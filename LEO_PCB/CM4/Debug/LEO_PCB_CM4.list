
LEO_PCB_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c8  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08108968  08108968  00009968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08108a28  08108a28  00009a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08108a30  08108a30  00009a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08108a34  08108a34  00009a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  10000000  08108a38  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a60  10000014  08108a4c  0000a014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10004a74  08108a4c  0000aa74  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001db7d  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ba6  00000000  00000000  00027bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016b8  00000000  00000000  0002b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000011a3  00000000  00000000  0002ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ae43  00000000  00000000  0002dfc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dda5  00000000  00000000  00068e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00185bdf  00000000  00000000  00086bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020c78a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005fec  00000000  00000000  0020c7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  002127bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000014 	.word	0x10000014
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08108950 	.word	0x08108950

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000018 	.word	0x10000018
 81002dc:	08108950 	.word	0x08108950

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <__aeabi_uldivmod>:
 81002f0:	b953      	cbnz	r3, 8100308 <__aeabi_uldivmod+0x18>
 81002f2:	b94a      	cbnz	r2, 8100308 <__aeabi_uldivmod+0x18>
 81002f4:	2900      	cmp	r1, #0
 81002f6:	bf08      	it	eq
 81002f8:	2800      	cmpeq	r0, #0
 81002fa:	bf1c      	itt	ne
 81002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8100300:	f04f 30ff 	movne.w	r0, #4294967295
 8100304:	f000 b988 	b.w	8100618 <__aeabi_idiv0>
 8100308:	f1ad 0c08 	sub.w	ip, sp, #8
 810030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100310:	f000 f806 	bl	8100320 <__udivmoddi4>
 8100314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810031c:	b004      	add	sp, #16
 810031e:	4770      	bx	lr

08100320 <__udivmoddi4>:
 8100320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100324:	9d08      	ldr	r5, [sp, #32]
 8100326:	468e      	mov	lr, r1
 8100328:	4604      	mov	r4, r0
 810032a:	4688      	mov	r8, r1
 810032c:	2b00      	cmp	r3, #0
 810032e:	d14a      	bne.n	81003c6 <__udivmoddi4+0xa6>
 8100330:	428a      	cmp	r2, r1
 8100332:	4617      	mov	r7, r2
 8100334:	d962      	bls.n	81003fc <__udivmoddi4+0xdc>
 8100336:	fab2 f682 	clz	r6, r2
 810033a:	b14e      	cbz	r6, 8100350 <__udivmoddi4+0x30>
 810033c:	f1c6 0320 	rsb	r3, r6, #32
 8100340:	fa01 f806 	lsl.w	r8, r1, r6
 8100344:	fa20 f303 	lsr.w	r3, r0, r3
 8100348:	40b7      	lsls	r7, r6
 810034a:	ea43 0808 	orr.w	r8, r3, r8
 810034e:	40b4      	lsls	r4, r6
 8100350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100354:	fa1f fc87 	uxth.w	ip, r7
 8100358:	fbb8 f1fe 	udiv	r1, r8, lr
 810035c:	0c23      	lsrs	r3, r4, #16
 810035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8100362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100366:	fb01 f20c 	mul.w	r2, r1, ip
 810036a:	429a      	cmp	r2, r3
 810036c:	d909      	bls.n	8100382 <__udivmoddi4+0x62>
 810036e:	18fb      	adds	r3, r7, r3
 8100370:	f101 30ff 	add.w	r0, r1, #4294967295
 8100374:	f080 80ea 	bcs.w	810054c <__udivmoddi4+0x22c>
 8100378:	429a      	cmp	r2, r3
 810037a:	f240 80e7 	bls.w	810054c <__udivmoddi4+0x22c>
 810037e:	3902      	subs	r1, #2
 8100380:	443b      	add	r3, r7
 8100382:	1a9a      	subs	r2, r3, r2
 8100384:	b2a3      	uxth	r3, r4
 8100386:	fbb2 f0fe 	udiv	r0, r2, lr
 810038a:	fb0e 2210 	mls	r2, lr, r0, r2
 810038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100392:	fb00 fc0c 	mul.w	ip, r0, ip
 8100396:	459c      	cmp	ip, r3
 8100398:	d909      	bls.n	81003ae <__udivmoddi4+0x8e>
 810039a:	18fb      	adds	r3, r7, r3
 810039c:	f100 32ff 	add.w	r2, r0, #4294967295
 81003a0:	f080 80d6 	bcs.w	8100550 <__udivmoddi4+0x230>
 81003a4:	459c      	cmp	ip, r3
 81003a6:	f240 80d3 	bls.w	8100550 <__udivmoddi4+0x230>
 81003aa:	443b      	add	r3, r7
 81003ac:	3802      	subs	r0, #2
 81003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 81003b2:	eba3 030c 	sub.w	r3, r3, ip
 81003b6:	2100      	movs	r1, #0
 81003b8:	b11d      	cbz	r5, 81003c2 <__udivmoddi4+0xa2>
 81003ba:	40f3      	lsrs	r3, r6
 81003bc:	2200      	movs	r2, #0
 81003be:	e9c5 3200 	strd	r3, r2, [r5]
 81003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003c6:	428b      	cmp	r3, r1
 81003c8:	d905      	bls.n	81003d6 <__udivmoddi4+0xb6>
 81003ca:	b10d      	cbz	r5, 81003d0 <__udivmoddi4+0xb0>
 81003cc:	e9c5 0100 	strd	r0, r1, [r5]
 81003d0:	2100      	movs	r1, #0
 81003d2:	4608      	mov	r0, r1
 81003d4:	e7f5      	b.n	81003c2 <__udivmoddi4+0xa2>
 81003d6:	fab3 f183 	clz	r1, r3
 81003da:	2900      	cmp	r1, #0
 81003dc:	d146      	bne.n	810046c <__udivmoddi4+0x14c>
 81003de:	4573      	cmp	r3, lr
 81003e0:	d302      	bcc.n	81003e8 <__udivmoddi4+0xc8>
 81003e2:	4282      	cmp	r2, r0
 81003e4:	f200 8105 	bhi.w	81005f2 <__udivmoddi4+0x2d2>
 81003e8:	1a84      	subs	r4, r0, r2
 81003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 81003ee:	2001      	movs	r0, #1
 81003f0:	4690      	mov	r8, r2
 81003f2:	2d00      	cmp	r5, #0
 81003f4:	d0e5      	beq.n	81003c2 <__udivmoddi4+0xa2>
 81003f6:	e9c5 4800 	strd	r4, r8, [r5]
 81003fa:	e7e2      	b.n	81003c2 <__udivmoddi4+0xa2>
 81003fc:	2a00      	cmp	r2, #0
 81003fe:	f000 8090 	beq.w	8100522 <__udivmoddi4+0x202>
 8100402:	fab2 f682 	clz	r6, r2
 8100406:	2e00      	cmp	r6, #0
 8100408:	f040 80a4 	bne.w	8100554 <__udivmoddi4+0x234>
 810040c:	1a8a      	subs	r2, r1, r2
 810040e:	0c03      	lsrs	r3, r0, #16
 8100410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100414:	b280      	uxth	r0, r0
 8100416:	b2bc      	uxth	r4, r7
 8100418:	2101      	movs	r1, #1
 810041a:	fbb2 fcfe 	udiv	ip, r2, lr
 810041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8100422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100426:	fb04 f20c 	mul.w	r2, r4, ip
 810042a:	429a      	cmp	r2, r3
 810042c:	d907      	bls.n	810043e <__udivmoddi4+0x11e>
 810042e:	18fb      	adds	r3, r7, r3
 8100430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8100434:	d202      	bcs.n	810043c <__udivmoddi4+0x11c>
 8100436:	429a      	cmp	r2, r3
 8100438:	f200 80e0 	bhi.w	81005fc <__udivmoddi4+0x2dc>
 810043c:	46c4      	mov	ip, r8
 810043e:	1a9b      	subs	r3, r3, r2
 8100440:	fbb3 f2fe 	udiv	r2, r3, lr
 8100444:	fb0e 3312 	mls	r3, lr, r2, r3
 8100448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 810044c:	fb02 f404 	mul.w	r4, r2, r4
 8100450:	429c      	cmp	r4, r3
 8100452:	d907      	bls.n	8100464 <__udivmoddi4+0x144>
 8100454:	18fb      	adds	r3, r7, r3
 8100456:	f102 30ff 	add.w	r0, r2, #4294967295
 810045a:	d202      	bcs.n	8100462 <__udivmoddi4+0x142>
 810045c:	429c      	cmp	r4, r3
 810045e:	f200 80ca 	bhi.w	81005f6 <__udivmoddi4+0x2d6>
 8100462:	4602      	mov	r2, r0
 8100464:	1b1b      	subs	r3, r3, r4
 8100466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 810046a:	e7a5      	b.n	81003b8 <__udivmoddi4+0x98>
 810046c:	f1c1 0620 	rsb	r6, r1, #32
 8100470:	408b      	lsls	r3, r1
 8100472:	fa22 f706 	lsr.w	r7, r2, r6
 8100476:	431f      	orrs	r7, r3
 8100478:	fa0e f401 	lsl.w	r4, lr, r1
 810047c:	fa20 f306 	lsr.w	r3, r0, r6
 8100480:	fa2e fe06 	lsr.w	lr, lr, r6
 8100484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100488:	4323      	orrs	r3, r4
 810048a:	fa00 f801 	lsl.w	r8, r0, r1
 810048e:	fa1f fc87 	uxth.w	ip, r7
 8100492:	fbbe f0f9 	udiv	r0, lr, r9
 8100496:	0c1c      	lsrs	r4, r3, #16
 8100498:	fb09 ee10 	mls	lr, r9, r0, lr
 810049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 81004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 81004a4:	45a6      	cmp	lr, r4
 81004a6:	fa02 f201 	lsl.w	r2, r2, r1
 81004aa:	d909      	bls.n	81004c0 <__udivmoddi4+0x1a0>
 81004ac:	193c      	adds	r4, r7, r4
 81004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 81004b2:	f080 809c 	bcs.w	81005ee <__udivmoddi4+0x2ce>
 81004b6:	45a6      	cmp	lr, r4
 81004b8:	f240 8099 	bls.w	81005ee <__udivmoddi4+0x2ce>
 81004bc:	3802      	subs	r0, #2
 81004be:	443c      	add	r4, r7
 81004c0:	eba4 040e 	sub.w	r4, r4, lr
 81004c4:	fa1f fe83 	uxth.w	lr, r3
 81004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 81004cc:	fb09 4413 	mls	r4, r9, r3, r4
 81004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 81004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 81004d8:	45a4      	cmp	ip, r4
 81004da:	d908      	bls.n	81004ee <__udivmoddi4+0x1ce>
 81004dc:	193c      	adds	r4, r7, r4
 81004de:	f103 3eff 	add.w	lr, r3, #4294967295
 81004e2:	f080 8082 	bcs.w	81005ea <__udivmoddi4+0x2ca>
 81004e6:	45a4      	cmp	ip, r4
 81004e8:	d97f      	bls.n	81005ea <__udivmoddi4+0x2ca>
 81004ea:	3b02      	subs	r3, #2
 81004ec:	443c      	add	r4, r7
 81004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 81004f2:	eba4 040c 	sub.w	r4, r4, ip
 81004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 81004fa:	4564      	cmp	r4, ip
 81004fc:	4673      	mov	r3, lr
 81004fe:	46e1      	mov	r9, ip
 8100500:	d362      	bcc.n	81005c8 <__udivmoddi4+0x2a8>
 8100502:	d05f      	beq.n	81005c4 <__udivmoddi4+0x2a4>
 8100504:	b15d      	cbz	r5, 810051e <__udivmoddi4+0x1fe>
 8100506:	ebb8 0203 	subs.w	r2, r8, r3
 810050a:	eb64 0409 	sbc.w	r4, r4, r9
 810050e:	fa04 f606 	lsl.w	r6, r4, r6
 8100512:	fa22 f301 	lsr.w	r3, r2, r1
 8100516:	431e      	orrs	r6, r3
 8100518:	40cc      	lsrs	r4, r1
 810051a:	e9c5 6400 	strd	r6, r4, [r5]
 810051e:	2100      	movs	r1, #0
 8100520:	e74f      	b.n	81003c2 <__udivmoddi4+0xa2>
 8100522:	fbb1 fcf2 	udiv	ip, r1, r2
 8100526:	0c01      	lsrs	r1, r0, #16
 8100528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 810052c:	b280      	uxth	r0, r0
 810052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8100532:	463b      	mov	r3, r7
 8100534:	4638      	mov	r0, r7
 8100536:	463c      	mov	r4, r7
 8100538:	46b8      	mov	r8, r7
 810053a:	46be      	mov	lr, r7
 810053c:	2620      	movs	r6, #32
 810053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8100542:	eba2 0208 	sub.w	r2, r2, r8
 8100546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 810054a:	e766      	b.n	810041a <__udivmoddi4+0xfa>
 810054c:	4601      	mov	r1, r0
 810054e:	e718      	b.n	8100382 <__udivmoddi4+0x62>
 8100550:	4610      	mov	r0, r2
 8100552:	e72c      	b.n	81003ae <__udivmoddi4+0x8e>
 8100554:	f1c6 0220 	rsb	r2, r6, #32
 8100558:	fa2e f302 	lsr.w	r3, lr, r2
 810055c:	40b7      	lsls	r7, r6
 810055e:	40b1      	lsls	r1, r6
 8100560:	fa20 f202 	lsr.w	r2, r0, r2
 8100564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100568:	430a      	orrs	r2, r1
 810056a:	fbb3 f8fe 	udiv	r8, r3, lr
 810056e:	b2bc      	uxth	r4, r7
 8100570:	fb0e 3318 	mls	r3, lr, r8, r3
 8100574:	0c11      	lsrs	r1, r2, #16
 8100576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810057a:	fb08 f904 	mul.w	r9, r8, r4
 810057e:	40b0      	lsls	r0, r6
 8100580:	4589      	cmp	r9, r1
 8100582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8100586:	b280      	uxth	r0, r0
 8100588:	d93e      	bls.n	8100608 <__udivmoddi4+0x2e8>
 810058a:	1879      	adds	r1, r7, r1
 810058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8100590:	d201      	bcs.n	8100596 <__udivmoddi4+0x276>
 8100592:	4589      	cmp	r9, r1
 8100594:	d81f      	bhi.n	81005d6 <__udivmoddi4+0x2b6>
 8100596:	eba1 0109 	sub.w	r1, r1, r9
 810059a:	fbb1 f9fe 	udiv	r9, r1, lr
 810059e:	fb09 f804 	mul.w	r8, r9, r4
 81005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 81005a6:	b292      	uxth	r2, r2
 81005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 81005ac:	4542      	cmp	r2, r8
 81005ae:	d229      	bcs.n	8100604 <__udivmoddi4+0x2e4>
 81005b0:	18ba      	adds	r2, r7, r2
 81005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 81005b6:	d2c4      	bcs.n	8100542 <__udivmoddi4+0x222>
 81005b8:	4542      	cmp	r2, r8
 81005ba:	d2c2      	bcs.n	8100542 <__udivmoddi4+0x222>
 81005bc:	f1a9 0102 	sub.w	r1, r9, #2
 81005c0:	443a      	add	r2, r7
 81005c2:	e7be      	b.n	8100542 <__udivmoddi4+0x222>
 81005c4:	45f0      	cmp	r8, lr
 81005c6:	d29d      	bcs.n	8100504 <__udivmoddi4+0x1e4>
 81005c8:	ebbe 0302 	subs.w	r3, lr, r2
 81005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 81005d0:	3801      	subs	r0, #1
 81005d2:	46e1      	mov	r9, ip
 81005d4:	e796      	b.n	8100504 <__udivmoddi4+0x1e4>
 81005d6:	eba7 0909 	sub.w	r9, r7, r9
 81005da:	4449      	add	r1, r9
 81005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 81005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 81005e4:	fb09 f804 	mul.w	r8, r9, r4
 81005e8:	e7db      	b.n	81005a2 <__udivmoddi4+0x282>
 81005ea:	4673      	mov	r3, lr
 81005ec:	e77f      	b.n	81004ee <__udivmoddi4+0x1ce>
 81005ee:	4650      	mov	r0, sl
 81005f0:	e766      	b.n	81004c0 <__udivmoddi4+0x1a0>
 81005f2:	4608      	mov	r0, r1
 81005f4:	e6fd      	b.n	81003f2 <__udivmoddi4+0xd2>
 81005f6:	443b      	add	r3, r7
 81005f8:	3a02      	subs	r2, #2
 81005fa:	e733      	b.n	8100464 <__udivmoddi4+0x144>
 81005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8100600:	443b      	add	r3, r7
 8100602:	e71c      	b.n	810043e <__udivmoddi4+0x11e>
 8100604:	4649      	mov	r1, r9
 8100606:	e79c      	b.n	8100542 <__udivmoddi4+0x222>
 8100608:	eba1 0109 	sub.w	r1, r1, r9
 810060c:	46c4      	mov	ip, r8
 810060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8100612:	fb09 f804 	mul.w	r8, r9, r4
 8100616:	e7c4      	b.n	81005a2 <__udivmoddi4+0x282>

08100618 <__aeabi_idiv0>:
 8100618:	4770      	bx	lr
 810061a:	bf00      	nop

0810061c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810061c:	b480      	push	{r7}
 810061e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100620:	4b09      	ldr	r3, [pc, #36]	@ (8100648 <SystemInit+0x2c>)
 8100622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100626:	4a08      	ldr	r2, [pc, #32]	@ (8100648 <SystemInit+0x2c>)
 8100628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810062c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100630:	4b05      	ldr	r3, [pc, #20]	@ (8100648 <SystemInit+0x2c>)
 8100632:	691b      	ldr	r3, [r3, #16]
 8100634:	4a04      	ldr	r2, [pc, #16]	@ (8100648 <SystemInit+0x2c>)
 8100636:	f043 0310 	orr.w	r3, r3, #16
 810063a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 810063c:	bf00      	nop
 810063e:	46bd      	mov	sp, r7
 8100640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100644:	4770      	bx	lr
 8100646:	bf00      	nop
 8100648:	e000ed00 	.word	0xe000ed00

0810064c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 810064c:	b480      	push	{r7}
 810064e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100650:	4b09      	ldr	r3, [pc, #36]	@ (8100678 <ExitRun0Mode+0x2c>)
 8100652:	68db      	ldr	r3, [r3, #12]
 8100654:	4a08      	ldr	r2, [pc, #32]	@ (8100678 <ExitRun0Mode+0x2c>)
 8100656:	f023 0302 	bic.w	r3, r3, #2
 810065a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 810065c:	bf00      	nop
 810065e:	4b06      	ldr	r3, [pc, #24]	@ (8100678 <ExitRun0Mode+0x2c>)
 8100660:	685b      	ldr	r3, [r3, #4]
 8100662:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100666:	2b00      	cmp	r3, #0
 8100668:	d0f9      	beq.n	810065e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 810066a:	bf00      	nop
 810066c:	bf00      	nop
 810066e:	46bd      	mov	sp, r7
 8100670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100674:	4770      	bx	lr
 8100676:	bf00      	nop
 8100678:	58024800 	.word	0x58024800

0810067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810067c:	b580      	push	{r7, lr}
 810067e:	b082      	sub	sp, #8
 8100680:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100682:	4b27      	ldr	r3, [pc, #156]	@ (8100720 <main+0xa4>)
 8100684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100688:	4a25      	ldr	r2, [pc, #148]	@ (8100720 <main+0xa4>)
 810068a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810068e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100692:	4b23      	ldr	r3, [pc, #140]	@ (8100720 <main+0xa4>)
 8100694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810069c:	607b      	str	r3, [r7, #4]
 810069e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006a0:	2001      	movs	r0, #1
 81006a2:	f001 fbd9 	bl	8101e58 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81006a6:	f001 fd95 	bl	81021d4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81006aa:	2201      	movs	r2, #1
 81006ac:	2102      	movs	r1, #2
 81006ae:	2000      	movs	r0, #0
 81006b0:	f001 fd16 	bl	81020e0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006b4:	4b1b      	ldr	r3, [pc, #108]	@ (8100724 <main+0xa8>)
 81006b6:	681b      	ldr	r3, [r3, #0]
 81006b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81006bc:	2b70      	cmp	r3, #112	@ 0x70
 81006be:	d108      	bne.n	81006d2 <main+0x56>
 81006c0:	4b19      	ldr	r3, [pc, #100]	@ (8100728 <main+0xac>)
 81006c2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81006c6:	4a18      	ldr	r2, [pc, #96]	@ (8100728 <main+0xac>)
 81006c8:	f043 0301 	orr.w	r3, r3, #1
 81006cc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81006d0:	e007      	b.n	81006e2 <main+0x66>
 81006d2:	4b15      	ldr	r3, [pc, #84]	@ (8100728 <main+0xac>)
 81006d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81006d8:	4a13      	ldr	r2, [pc, #76]	@ (8100728 <main+0xac>)
 81006da:	f043 0301 	orr.w	r3, r3, #1
 81006de:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006e2:	f000 fa9b 	bl	8100c1c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81006e6:	f000 f8b9 	bl	810085c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 81006ea:	f000 f86b 	bl	81007c4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 81006ee:	f000 f829 	bl	8100744 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 81006f2:	f005 fb6f 	bl	8105dd4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81006f6:	4a0d      	ldr	r2, [pc, #52]	@ (810072c <main+0xb0>)
 81006f8:	2100      	movs	r1, #0
 81006fa:	480d      	ldr	r0, [pc, #52]	@ (8100730 <main+0xb4>)
 81006fc:	f005 fbb4 	bl	8105e68 <osThreadNew>
 8100700:	4603      	mov	r3, r0
 8100702:	4a0c      	ldr	r2, [pc, #48]	@ (8100734 <main+0xb8>)
 8100704:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8100706:	4a0c      	ldr	r2, [pc, #48]	@ (8100738 <main+0xbc>)
 8100708:	2100      	movs	r1, #0
 810070a:	480c      	ldr	r0, [pc, #48]	@ (810073c <main+0xc0>)
 810070c:	f005 fbac 	bl	8105e68 <osThreadNew>
 8100710:	4603      	mov	r3, r0
 8100712:	4a0b      	ldr	r2, [pc, #44]	@ (8100740 <main+0xc4>)
 8100714:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8100716:	f005 fb81 	bl	8105e1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810071a:	bf00      	nop
 810071c:	e7fd      	b.n	810071a <main+0x9e>
 810071e:	bf00      	nop
 8100720:	58024400 	.word	0x58024400
 8100724:	e000ed00 	.word	0xe000ed00
 8100728:	58026400 	.word	0x58026400
 810072c:	081089b8 	.word	0x081089b8
 8100730:	08100905 	.word	0x08100905
 8100734:	10000118 	.word	0x10000118
 8100738:	081089dc 	.word	0x081089dc
 810073c:	08100925 	.word	0x08100925
 8100740:	1000011c 	.word	0x1000011c

08100744 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8100744:	b580      	push	{r7, lr}
 8100746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100748:	4b1b      	ldr	r3, [pc, #108]	@ (81007b8 <MX_I2C2_Init+0x74>)
 810074a:	4a1c      	ldr	r2, [pc, #112]	@ (81007bc <MX_I2C2_Init+0x78>)
 810074c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909BEB;
 810074e:	4b1a      	ldr	r3, [pc, #104]	@ (81007b8 <MX_I2C2_Init+0x74>)
 8100750:	4a1b      	ldr	r2, [pc, #108]	@ (81007c0 <MX_I2C2_Init+0x7c>)
 8100752:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100754:	4b18      	ldr	r3, [pc, #96]	@ (81007b8 <MX_I2C2_Init+0x74>)
 8100756:	2200      	movs	r2, #0
 8100758:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810075a:	4b17      	ldr	r3, [pc, #92]	@ (81007b8 <MX_I2C2_Init+0x74>)
 810075c:	2201      	movs	r2, #1
 810075e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100760:	4b15      	ldr	r3, [pc, #84]	@ (81007b8 <MX_I2C2_Init+0x74>)
 8100762:	2200      	movs	r2, #0
 8100764:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100766:	4b14      	ldr	r3, [pc, #80]	@ (81007b8 <MX_I2C2_Init+0x74>)
 8100768:	2200      	movs	r2, #0
 810076a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810076c:	4b12      	ldr	r3, [pc, #72]	@ (81007b8 <MX_I2C2_Init+0x74>)
 810076e:	2200      	movs	r2, #0
 8100770:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100772:	4b11      	ldr	r3, [pc, #68]	@ (81007b8 <MX_I2C2_Init+0x74>)
 8100774:	2200      	movs	r2, #0
 8100776:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100778:	4b0f      	ldr	r3, [pc, #60]	@ (81007b8 <MX_I2C2_Init+0x74>)
 810077a:	2200      	movs	r2, #0
 810077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 810077e:	480e      	ldr	r0, [pc, #56]	@ (81007b8 <MX_I2C2_Init+0x74>)
 8100780:	f001 fb7c 	bl	8101e7c <HAL_I2C_Init>
 8100784:	4603      	mov	r3, r0
 8100786:	2b00      	cmp	r3, #0
 8100788:	d001      	beq.n	810078e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 810078a:	f000 f8eb 	bl	8100964 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810078e:	2100      	movs	r1, #0
 8100790:	4809      	ldr	r0, [pc, #36]	@ (81007b8 <MX_I2C2_Init+0x74>)
 8100792:	f001 fc0e 	bl	8101fb2 <HAL_I2CEx_ConfigAnalogFilter>
 8100796:	4603      	mov	r3, r0
 8100798:	2b00      	cmp	r3, #0
 810079a:	d001      	beq.n	81007a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 810079c:	f000 f8e2 	bl	8100964 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81007a0:	2100      	movs	r1, #0
 81007a2:	4805      	ldr	r0, [pc, #20]	@ (81007b8 <MX_I2C2_Init+0x74>)
 81007a4:	f001 fc50 	bl	8102048 <HAL_I2CEx_ConfigDigitalFilter>
 81007a8:	4603      	mov	r3, r0
 81007aa:	2b00      	cmp	r3, #0
 81007ac:	d001      	beq.n	81007b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81007ae:	f000 f8d9 	bl	8100964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 81007b2:	bf00      	nop
 81007b4:	bd80      	pop	{r7, pc}
 81007b6:	bf00      	nop
 81007b8:	10000030 	.word	0x10000030
 81007bc:	40005800 	.word	0x40005800
 81007c0:	00909beb 	.word	0x00909beb

081007c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 81007c4:	b580      	push	{r7, lr}
 81007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 81007c8:	4b22      	ldr	r3, [pc, #136]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 81007ca:	4a23      	ldr	r2, [pc, #140]	@ (8100858 <MX_USART1_UART_Init+0x94>)
 81007cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 81007ce:	4b21      	ldr	r3, [pc, #132]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 81007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81007d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 81007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 81007d8:	2200      	movs	r2, #0
 81007da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 81007dc:	4b1d      	ldr	r3, [pc, #116]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 81007de:	2200      	movs	r2, #0
 81007e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 81007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 81007e4:	2200      	movs	r2, #0
 81007e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 81007e8:	4b1a      	ldr	r3, [pc, #104]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 81007ea:	220c      	movs	r2, #12
 81007ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81007ee:	4b19      	ldr	r3, [pc, #100]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 81007f0:	2200      	movs	r2, #0
 81007f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 81007f4:	4b17      	ldr	r3, [pc, #92]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 81007f6:	2200      	movs	r2, #0
 81007f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81007fa:	4b16      	ldr	r3, [pc, #88]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 81007fc:	2200      	movs	r2, #0
 81007fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100800:	4b14      	ldr	r3, [pc, #80]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 8100802:	2200      	movs	r2, #0
 8100804:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100806:	4b13      	ldr	r3, [pc, #76]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 8100808:	2200      	movs	r2, #0
 810080a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 810080c:	4811      	ldr	r0, [pc, #68]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 810080e:	f003 fcf3 	bl	81041f8 <HAL_UART_Init>
 8100812:	4603      	mov	r3, r0
 8100814:	2b00      	cmp	r3, #0
 8100816:	d001      	beq.n	810081c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8100818:	f000 f8a4 	bl	8100964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810081c:	2100      	movs	r1, #0
 810081e:	480d      	ldr	r0, [pc, #52]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 8100820:	f005 f9d9 	bl	8105bd6 <HAL_UARTEx_SetTxFifoThreshold>
 8100824:	4603      	mov	r3, r0
 8100826:	2b00      	cmp	r3, #0
 8100828:	d001      	beq.n	810082e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 810082a:	f000 f89b 	bl	8100964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810082e:	2100      	movs	r1, #0
 8100830:	4808      	ldr	r0, [pc, #32]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 8100832:	f005 fa0e 	bl	8105c52 <HAL_UARTEx_SetRxFifoThreshold>
 8100836:	4603      	mov	r3, r0
 8100838:	2b00      	cmp	r3, #0
 810083a:	d001      	beq.n	8100840 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 810083c:	f000 f892 	bl	8100964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8100840:	4804      	ldr	r0, [pc, #16]	@ (8100854 <MX_USART1_UART_Init+0x90>)
 8100842:	f005 f98f 	bl	8105b64 <HAL_UARTEx_DisableFifoMode>
 8100846:	4603      	mov	r3, r0
 8100848:	2b00      	cmp	r3, #0
 810084a:	d001      	beq.n	8100850 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 810084c:	f000 f88a 	bl	8100964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8100850:	bf00      	nop
 8100852:	bd80      	pop	{r7, pc}
 8100854:	10000084 	.word	0x10000084
 8100858:	40011000 	.word	0x40011000

0810085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810085c:	b580      	push	{r7, lr}
 810085e:	b088      	sub	sp, #32
 8100860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100862:	f107 030c 	add.w	r3, r7, #12
 8100866:	2200      	movs	r2, #0
 8100868:	601a      	str	r2, [r3, #0]
 810086a:	605a      	str	r2, [r3, #4]
 810086c:	609a      	str	r2, [r3, #8]
 810086e:	60da      	str	r2, [r3, #12]
 8100870:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100872:	4b22      	ldr	r3, [pc, #136]	@ (81008fc <MX_GPIO_Init+0xa0>)
 8100874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100878:	4a20      	ldr	r2, [pc, #128]	@ (81008fc <MX_GPIO_Init+0xa0>)
 810087a:	f043 0320 	orr.w	r3, r3, #32
 810087e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100882:	4b1e      	ldr	r3, [pc, #120]	@ (81008fc <MX_GPIO_Init+0xa0>)
 8100884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100888:	f003 0320 	and.w	r3, r3, #32
 810088c:	60bb      	str	r3, [r7, #8]
 810088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100890:	4b1a      	ldr	r3, [pc, #104]	@ (81008fc <MX_GPIO_Init+0xa0>)
 8100892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100896:	4a19      	ldr	r2, [pc, #100]	@ (81008fc <MX_GPIO_Init+0xa0>)
 8100898:	f043 0304 	orr.w	r3, r3, #4
 810089c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008a0:	4b16      	ldr	r3, [pc, #88]	@ (81008fc <MX_GPIO_Init+0xa0>)
 81008a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008a6:	f003 0304 	and.w	r3, r3, #4
 81008aa:	607b      	str	r3, [r7, #4]
 81008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81008ae:	4b13      	ldr	r3, [pc, #76]	@ (81008fc <MX_GPIO_Init+0xa0>)
 81008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008b4:	4a11      	ldr	r2, [pc, #68]	@ (81008fc <MX_GPIO_Init+0xa0>)
 81008b6:	f043 0301 	orr.w	r3, r3, #1
 81008ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008be:	4b0f      	ldr	r3, [pc, #60]	@ (81008fc <MX_GPIO_Init+0xa0>)
 81008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008c4:	f003 0301 	and.w	r3, r3, #1
 81008c8:	603b      	str	r3, [r7, #0]
 81008ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCU_LED_1_Pin|MCU_LED_2_Pin, GPIO_PIN_RESET);
 81008cc:	2200      	movs	r2, #0
 81008ce:	2103      	movs	r1, #3
 81008d0:	480b      	ldr	r0, [pc, #44]	@ (8100900 <MX_GPIO_Init+0xa4>)
 81008d2:	f001 fa8d 	bl	8101df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_LED_1_Pin MCU_LED_2_Pin */
  GPIO_InitStruct.Pin = MCU_LED_1_Pin|MCU_LED_2_Pin;
 81008d6:	2303      	movs	r3, #3
 81008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81008da:	2301      	movs	r3, #1
 81008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008de:	2300      	movs	r3, #0
 81008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008e2:	2300      	movs	r3, #0
 81008e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81008e6:	f107 030c 	add.w	r3, r7, #12
 81008ea:	4619      	mov	r1, r3
 81008ec:	4804      	ldr	r0, [pc, #16]	@ (8100900 <MX_GPIO_Init+0xa4>)
 81008ee:	f001 f8cf 	bl	8101a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81008f2:	bf00      	nop
 81008f4:	3720      	adds	r7, #32
 81008f6:	46bd      	mov	sp, r7
 81008f8:	bd80      	pop	{r7, pc}
 81008fa:	bf00      	nop
 81008fc:	58024400 	.word	0x58024400
 8100900:	58020800 	.word	0x58020800

08100904 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8100904:	b580      	push	{r7, lr}
 8100906:	b082      	sub	sp, #8
 8100908:	af00      	add	r7, sp, #0
 810090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(MCU_LED_1_GPIO_Port, MCU_LED_1_Pin);
 810090c:	2101      	movs	r1, #1
 810090e:	4804      	ldr	r0, [pc, #16]	@ (8100920 <StartDefaultTask+0x1c>)
 8100910:	f001 fa87 	bl	8101e22 <HAL_GPIO_TogglePin>
    osDelay(500);
 8100914:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8100918:	f005 fb38 	bl	8105f8c <osDelay>
	HAL_GPIO_TogglePin(MCU_LED_1_GPIO_Port, MCU_LED_1_Pin);
 810091c:	bf00      	nop
 810091e:	e7f5      	b.n	810090c <StartDefaultTask+0x8>
 8100920:	58020800 	.word	0x58020800

08100924 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8100924:	b580      	push	{r7, lr}
 8100926:	b084      	sub	sp, #16
 8100928:	af00      	add	r7, sp, #0
 810092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	const char *msg = "Hello World\r\n";
 810092c:	4b0a      	ldr	r3, [pc, #40]	@ (8100958 <StartTask02+0x34>)
 810092e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_TogglePin(MCU_LED_2_GPIO_Port, MCU_LED_2_Pin);
 8100930:	2102      	movs	r1, #2
 8100932:	480a      	ldr	r0, [pc, #40]	@ (810095c <StartTask02+0x38>)
 8100934:	f001 fa75 	bl	8101e22 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8100938:	68f8      	ldr	r0, [r7, #12]
 810093a:	f7ff fcd1 	bl	81002e0 <strlen>
 810093e:	4603      	mov	r3, r0
 8100940:	b29a      	uxth	r2, r3
 8100942:	f04f 33ff 	mov.w	r3, #4294967295
 8100946:	68f9      	ldr	r1, [r7, #12]
 8100948:	4805      	ldr	r0, [pc, #20]	@ (8100960 <StartTask02+0x3c>)
 810094a:	f003 fca5 	bl	8104298 <HAL_UART_Transmit>
	    osDelay(200);
 810094e:	20c8      	movs	r0, #200	@ 0xc8
 8100950:	f005 fb1c 	bl	8105f8c <osDelay>
  {
 8100954:	bf00      	nop
 8100956:	e7eb      	b.n	8100930 <StartTask02+0xc>
 8100958:	08108980 	.word	0x08108980
 810095c:	58020800 	.word	0x58020800
 8100960:	10000084 	.word	0x10000084

08100964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100964:	b480      	push	{r7}
 8100966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100968:	b672      	cpsid	i
}
 810096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810096c:	bf00      	nop
 810096e:	e7fd      	b.n	810096c <Error_Handler+0x8>

08100970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100970:	b580      	push	{r7, lr}
 8100972:	b082      	sub	sp, #8
 8100974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100976:	4b0c      	ldr	r3, [pc, #48]	@ (81009a8 <HAL_MspInit+0x38>)
 8100978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810097c:	4a0a      	ldr	r2, [pc, #40]	@ (81009a8 <HAL_MspInit+0x38>)
 810097e:	f043 0302 	orr.w	r3, r3, #2
 8100982:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100986:	4b08      	ldr	r3, [pc, #32]	@ (81009a8 <HAL_MspInit+0x38>)
 8100988:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810098c:	f003 0302 	and.w	r3, r3, #2
 8100990:	607b      	str	r3, [r7, #4]
 8100992:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100994:	2200      	movs	r2, #0
 8100996:	210f      	movs	r1, #15
 8100998:	f06f 0001 	mvn.w	r0, #1
 810099c:	f000 facd 	bl	8100f3a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81009a0:	bf00      	nop
 81009a2:	3708      	adds	r7, #8
 81009a4:	46bd      	mov	sp, r7
 81009a6:	bd80      	pop	{r7, pc}
 81009a8:	58024400 	.word	0x58024400

081009ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 81009ac:	b580      	push	{r7, lr}
 81009ae:	b0ba      	sub	sp, #232	@ 0xe8
 81009b0:	af00      	add	r7, sp, #0
 81009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81009b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81009b8:	2200      	movs	r2, #0
 81009ba:	601a      	str	r2, [r3, #0]
 81009bc:	605a      	str	r2, [r3, #4]
 81009be:	609a      	str	r2, [r3, #8]
 81009c0:	60da      	str	r2, [r3, #12]
 81009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81009c4:	f107 0310 	add.w	r3, r7, #16
 81009c8:	22c0      	movs	r2, #192	@ 0xc0
 81009ca:	2100      	movs	r1, #0
 81009cc:	4618      	mov	r0, r3
 81009ce:	f007 ff85 	bl	81088dc <memset>
  if(hi2c->Instance==I2C2)
 81009d2:	687b      	ldr	r3, [r7, #4]
 81009d4:	681b      	ldr	r3, [r3, #0]
 81009d6:	4a26      	ldr	r2, [pc, #152]	@ (8100a70 <HAL_I2C_MspInit+0xc4>)
 81009d8:	4293      	cmp	r3, r2
 81009da:	d145      	bne.n	8100a68 <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 81009dc:	f04f 0208 	mov.w	r2, #8
 81009e0:	f04f 0300 	mov.w	r3, #0
 81009e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81009e8:	2300      	movs	r3, #0
 81009ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81009ee:	f107 0310 	add.w	r3, r7, #16
 81009f2:	4618      	mov	r0, r3
 81009f4:	f001 fdd4 	bl	81025a0 <HAL_RCCEx_PeriphCLKConfig>
 81009f8:	4603      	mov	r3, r0
 81009fa:	2b00      	cmp	r3, #0
 81009fc:	d001      	beq.n	8100a02 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 81009fe:	f7ff ffb1 	bl	8100964 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100a02:	4b1c      	ldr	r3, [pc, #112]	@ (8100a74 <HAL_I2C_MspInit+0xc8>)
 8100a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a08:	4a1a      	ldr	r2, [pc, #104]	@ (8100a74 <HAL_I2C_MspInit+0xc8>)
 8100a0a:	f043 0320 	orr.w	r3, r3, #32
 8100a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100a12:	4b18      	ldr	r3, [pc, #96]	@ (8100a74 <HAL_I2C_MspInit+0xc8>)
 8100a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a18:	f003 0320 	and.w	r3, r3, #32
 8100a1c:	60fb      	str	r3, [r7, #12]
 8100a1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8100a20:	2303      	movs	r3, #3
 8100a22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100a26:	2312      	movs	r3, #18
 8100a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a2c:	2300      	movs	r3, #0
 8100a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a32:	2300      	movs	r3, #0
 8100a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8100a38:	2304      	movs	r3, #4
 8100a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100a3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100a42:	4619      	mov	r1, r3
 8100a44:	480c      	ldr	r0, [pc, #48]	@ (8100a78 <HAL_I2C_MspInit+0xcc>)
 8100a46:	f001 f823 	bl	8101a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8100a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8100a74 <HAL_I2C_MspInit+0xc8>)
 8100a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100a50:	4a08      	ldr	r2, [pc, #32]	@ (8100a74 <HAL_I2C_MspInit+0xc8>)
 8100a52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8100a56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100a5a:	4b06      	ldr	r3, [pc, #24]	@ (8100a74 <HAL_I2C_MspInit+0xc8>)
 8100a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8100a64:	60bb      	str	r3, [r7, #8]
 8100a66:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8100a68:	bf00      	nop
 8100a6a:	37e8      	adds	r7, #232	@ 0xe8
 8100a6c:	46bd      	mov	sp, r7
 8100a6e:	bd80      	pop	{r7, pc}
 8100a70:	40005800 	.word	0x40005800
 8100a74:	58024400 	.word	0x58024400
 8100a78:	58021400 	.word	0x58021400

08100a7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100a7c:	b580      	push	{r7, lr}
 8100a7e:	b0ba      	sub	sp, #232	@ 0xe8
 8100a80:	af00      	add	r7, sp, #0
 8100a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100a84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100a88:	2200      	movs	r2, #0
 8100a8a:	601a      	str	r2, [r3, #0]
 8100a8c:	605a      	str	r2, [r3, #4]
 8100a8e:	609a      	str	r2, [r3, #8]
 8100a90:	60da      	str	r2, [r3, #12]
 8100a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100a94:	f107 0310 	add.w	r3, r7, #16
 8100a98:	22c0      	movs	r2, #192	@ 0xc0
 8100a9a:	2100      	movs	r1, #0
 8100a9c:	4618      	mov	r0, r3
 8100a9e:	f007 ff1d 	bl	81088dc <memset>
  if(huart->Instance==USART1)
 8100aa2:	687b      	ldr	r3, [r7, #4]
 8100aa4:	681b      	ldr	r3, [r3, #0]
 8100aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8100b54 <HAL_UART_MspInit+0xd8>)
 8100aa8:	4293      	cmp	r3, r2
 8100aaa:	d14e      	bne.n	8100b4a <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8100aac:	f04f 0201 	mov.w	r2, #1
 8100ab0:	f04f 0300 	mov.w	r3, #0
 8100ab4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8100ab8:	2300      	movs	r3, #0
 8100aba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100abe:	f107 0310 	add.w	r3, r7, #16
 8100ac2:	4618      	mov	r0, r3
 8100ac4:	f001 fd6c 	bl	81025a0 <HAL_RCCEx_PeriphCLKConfig>
 8100ac8:	4603      	mov	r3, r0
 8100aca:	2b00      	cmp	r3, #0
 8100acc:	d001      	beq.n	8100ad2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8100ace:	f7ff ff49 	bl	8100964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8100ad2:	4b21      	ldr	r3, [pc, #132]	@ (8100b58 <HAL_UART_MspInit+0xdc>)
 8100ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8100b58 <HAL_UART_MspInit+0xdc>)
 8100ada:	f043 0310 	orr.w	r3, r3, #16
 8100ade:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8100ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8100b58 <HAL_UART_MspInit+0xdc>)
 8100ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100ae8:	f003 0310 	and.w	r3, r3, #16
 8100aec:	60fb      	str	r3, [r7, #12]
 8100aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100af0:	4b19      	ldr	r3, [pc, #100]	@ (8100b58 <HAL_UART_MspInit+0xdc>)
 8100af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100af6:	4a18      	ldr	r2, [pc, #96]	@ (8100b58 <HAL_UART_MspInit+0xdc>)
 8100af8:	f043 0301 	orr.w	r3, r3, #1
 8100afc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b00:	4b15      	ldr	r3, [pc, #84]	@ (8100b58 <HAL_UART_MspInit+0xdc>)
 8100b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b06:	f003 0301 	and.w	r3, r3, #1
 8100b0a:	60bb      	str	r3, [r7, #8]
 8100b0c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MCU_2_HOST_TXD_Pin|MCU_2_HOST_RXD_Pin;
 8100b0e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8100b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100b16:	2302      	movs	r3, #2
 8100b18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100b1c:	2300      	movs	r3, #0
 8100b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100b22:	2300      	movs	r3, #0
 8100b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8100b28:	2307      	movs	r3, #7
 8100b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100b2e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100b32:	4619      	mov	r1, r3
 8100b34:	4809      	ldr	r0, [pc, #36]	@ (8100b5c <HAL_UART_MspInit+0xe0>)
 8100b36:	f000 ffab 	bl	8101a90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8100b3a:	2200      	movs	r2, #0
 8100b3c:	2105      	movs	r1, #5
 8100b3e:	2025      	movs	r0, #37	@ 0x25
 8100b40:	f000 f9fb 	bl	8100f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8100b44:	2025      	movs	r0, #37	@ 0x25
 8100b46:	f000 fa12 	bl	8100f6e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8100b4a:	bf00      	nop
 8100b4c:	37e8      	adds	r7, #232	@ 0xe8
 8100b4e:	46bd      	mov	sp, r7
 8100b50:	bd80      	pop	{r7, pc}
 8100b52:	bf00      	nop
 8100b54:	40011000 	.word	0x40011000
 8100b58:	58024400 	.word	0x58024400
 8100b5c:	58020000 	.word	0x58020000

08100b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100b60:	b480      	push	{r7}
 8100b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100b64:	bf00      	nop
 8100b66:	e7fd      	b.n	8100b64 <NMI_Handler+0x4>

08100b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100b68:	b480      	push	{r7}
 8100b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100b6c:	bf00      	nop
 8100b6e:	e7fd      	b.n	8100b6c <HardFault_Handler+0x4>

08100b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100b70:	b480      	push	{r7}
 8100b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100b74:	bf00      	nop
 8100b76:	e7fd      	b.n	8100b74 <MemManage_Handler+0x4>

08100b78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100b78:	b480      	push	{r7}
 8100b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100b7c:	bf00      	nop
 8100b7e:	e7fd      	b.n	8100b7c <BusFault_Handler+0x4>

08100b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100b80:	b480      	push	{r7}
 8100b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100b84:	bf00      	nop
 8100b86:	e7fd      	b.n	8100b84 <UsageFault_Handler+0x4>

08100b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100b88:	b480      	push	{r7}
 8100b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100b8c:	bf00      	nop
 8100b8e:	46bd      	mov	sp, r7
 8100b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b94:	4770      	bx	lr

08100b96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100b96:	b580      	push	{r7, lr}
 8100b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100b9a:	f000 f8d3 	bl	8100d44 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8100b9e:	f007 fa61 	bl	8108064 <xTaskGetSchedulerState>
 8100ba2:	4603      	mov	r3, r0
 8100ba4:	2b01      	cmp	r3, #1
 8100ba6:	d001      	beq.n	8100bac <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8100ba8:	f005 fea6 	bl	81068f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100bac:	bf00      	nop
 8100bae:	bd80      	pop	{r7, pc}

08100bb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8100bb0:	b580      	push	{r7, lr}
 8100bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8100bb4:	4802      	ldr	r0, [pc, #8]	@ (8100bc0 <USART1_IRQHandler+0x10>)
 8100bb6:	f003 fbfd 	bl	81043b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8100bba:	bf00      	nop
 8100bbc:	bd80      	pop	{r7, pc}
 8100bbe:	bf00      	nop
 8100bc0:	10000084 	.word	0x10000084

08100bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100bc4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8100c00 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8100bc8:	f7ff fd40 	bl	810064c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100bcc:	f7ff fd26 	bl	810061c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100bd0:	480c      	ldr	r0, [pc, #48]	@ (8100c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100bd2:	490d      	ldr	r1, [pc, #52]	@ (8100c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8100c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100bd8:	e002      	b.n	8100be0 <LoopCopyDataInit>

08100bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100bde:	3304      	adds	r3, #4

08100be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100be4:	d3f9      	bcc.n	8100bda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100be6:	4a0a      	ldr	r2, [pc, #40]	@ (8100c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100be8:	4c0a      	ldr	r4, [pc, #40]	@ (8100c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100bec:	e001      	b.n	8100bf2 <LoopFillZerobss>

08100bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100bf0:	3204      	adds	r2, #4

08100bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100bf4:	d3fb      	bcc.n	8100bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100bf6:	f007 fe79 	bl	81088ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100bfa:	f7ff fd3f 	bl	810067c <main>
  bx  lr
 8100bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100c00:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100c04:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100c08:	10000014 	.word	0x10000014
  ldr r2, =_sidata
 8100c0c:	08108a38 	.word	0x08108a38
  ldr r2, =_sbss
 8100c10:	10000014 	.word	0x10000014
  ldr r4, =_ebss
 8100c14:	10004a74 	.word	0x10004a74

08100c18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100c18:	e7fe      	b.n	8100c18 <ADC3_IRQHandler>
	...

08100c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100c1c:	b580      	push	{r7, lr}
 8100c1e:	b082      	sub	sp, #8
 8100c20:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100c22:	4b28      	ldr	r3, [pc, #160]	@ (8100cc4 <HAL_Init+0xa8>)
 8100c24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100c28:	4a26      	ldr	r2, [pc, #152]	@ (8100cc4 <HAL_Init+0xa8>)
 8100c2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100c2e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100c32:	4b24      	ldr	r3, [pc, #144]	@ (8100cc4 <HAL_Init+0xa8>)
 8100c34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100c38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100c3c:	603b      	str	r3, [r7, #0]
 8100c3e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100c40:	4b21      	ldr	r3, [pc, #132]	@ (8100cc8 <HAL_Init+0xac>)
 8100c42:	681b      	ldr	r3, [r3, #0]
 8100c44:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100c48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8100cc8 <HAL_Init+0xac>)
 8100c4e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100c52:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100c54:	4b1c      	ldr	r3, [pc, #112]	@ (8100cc8 <HAL_Init+0xac>)
 8100c56:	681b      	ldr	r3, [r3, #0]
 8100c58:	4a1b      	ldr	r2, [pc, #108]	@ (8100cc8 <HAL_Init+0xac>)
 8100c5a:	f043 0301 	orr.w	r3, r3, #1
 8100c5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100c60:	2003      	movs	r0, #3
 8100c62:	f000 f95f 	bl	8100f24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100c66:	f001 fac3 	bl	81021f0 <HAL_RCC_GetSysClockFreq>
 8100c6a:	4602      	mov	r2, r0
 8100c6c:	4b15      	ldr	r3, [pc, #84]	@ (8100cc4 <HAL_Init+0xa8>)
 8100c6e:	699b      	ldr	r3, [r3, #24]
 8100c70:	0a1b      	lsrs	r3, r3, #8
 8100c72:	f003 030f 	and.w	r3, r3, #15
 8100c76:	4915      	ldr	r1, [pc, #84]	@ (8100ccc <HAL_Init+0xb0>)
 8100c78:	5ccb      	ldrb	r3, [r1, r3]
 8100c7a:	f003 031f 	and.w	r3, r3, #31
 8100c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8100c82:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100c84:	4b0f      	ldr	r3, [pc, #60]	@ (8100cc4 <HAL_Init+0xa8>)
 8100c86:	699b      	ldr	r3, [r3, #24]
 8100c88:	f003 030f 	and.w	r3, r3, #15
 8100c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8100ccc <HAL_Init+0xb0>)
 8100c8e:	5cd3      	ldrb	r3, [r2, r3]
 8100c90:	f003 031f 	and.w	r3, r3, #31
 8100c94:	687a      	ldr	r2, [r7, #4]
 8100c96:	fa22 f303 	lsr.w	r3, r2, r3
 8100c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8100cd0 <HAL_Init+0xb4>)
 8100c9c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8100cd0 <HAL_Init+0xb4>)
 8100ca0:	681b      	ldr	r3, [r3, #0]
 8100ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8100cd4 <HAL_Init+0xb8>)
 8100ca4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100ca6:	200f      	movs	r0, #15
 8100ca8:	f000 f816 	bl	8100cd8 <HAL_InitTick>
 8100cac:	4603      	mov	r3, r0
 8100cae:	2b00      	cmp	r3, #0
 8100cb0:	d001      	beq.n	8100cb6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100cb2:	2301      	movs	r3, #1
 8100cb4:	e002      	b.n	8100cbc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100cb6:	f7ff fe5b 	bl	8100970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100cba:	2300      	movs	r3, #0
}
 8100cbc:	4618      	mov	r0, r3
 8100cbe:	3708      	adds	r7, #8
 8100cc0:	46bd      	mov	sp, r7
 8100cc2:	bd80      	pop	{r7, pc}
 8100cc4:	58024400 	.word	0x58024400
 8100cc8:	40024400 	.word	0x40024400
 8100ccc:	081089a8 	.word	0x081089a8
 8100cd0:	10000004 	.word	0x10000004
 8100cd4:	10000000 	.word	0x10000000

08100cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100cd8:	b580      	push	{r7, lr}
 8100cda:	b082      	sub	sp, #8
 8100cdc:	af00      	add	r7, sp, #0
 8100cde:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100ce0:	4b15      	ldr	r3, [pc, #84]	@ (8100d38 <HAL_InitTick+0x60>)
 8100ce2:	781b      	ldrb	r3, [r3, #0]
 8100ce4:	2b00      	cmp	r3, #0
 8100ce6:	d101      	bne.n	8100cec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100ce8:	2301      	movs	r3, #1
 8100cea:	e021      	b.n	8100d30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100cec:	4b13      	ldr	r3, [pc, #76]	@ (8100d3c <HAL_InitTick+0x64>)
 8100cee:	681a      	ldr	r2, [r3, #0]
 8100cf0:	4b11      	ldr	r3, [pc, #68]	@ (8100d38 <HAL_InitTick+0x60>)
 8100cf2:	781b      	ldrb	r3, [r3, #0]
 8100cf4:	4619      	mov	r1, r3
 8100cf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8100cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8100d02:	4618      	mov	r0, r3
 8100d04:	f000 f941 	bl	8100f8a <HAL_SYSTICK_Config>
 8100d08:	4603      	mov	r3, r0
 8100d0a:	2b00      	cmp	r3, #0
 8100d0c:	d001      	beq.n	8100d12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100d0e:	2301      	movs	r3, #1
 8100d10:	e00e      	b.n	8100d30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100d12:	687b      	ldr	r3, [r7, #4]
 8100d14:	2b0f      	cmp	r3, #15
 8100d16:	d80a      	bhi.n	8100d2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100d18:	2200      	movs	r2, #0
 8100d1a:	6879      	ldr	r1, [r7, #4]
 8100d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8100d20:	f000 f90b 	bl	8100f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100d24:	4a06      	ldr	r2, [pc, #24]	@ (8100d40 <HAL_InitTick+0x68>)
 8100d26:	687b      	ldr	r3, [r7, #4]
 8100d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100d2a:	2300      	movs	r3, #0
 8100d2c:	e000      	b.n	8100d30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100d2e:	2301      	movs	r3, #1
}
 8100d30:	4618      	mov	r0, r3
 8100d32:	3708      	adds	r7, #8
 8100d34:	46bd      	mov	sp, r7
 8100d36:	bd80      	pop	{r7, pc}
 8100d38:	1000000c 	.word	0x1000000c
 8100d3c:	10000000 	.word	0x10000000
 8100d40:	10000008 	.word	0x10000008

08100d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100d44:	b480      	push	{r7}
 8100d46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100d48:	4b06      	ldr	r3, [pc, #24]	@ (8100d64 <HAL_IncTick+0x20>)
 8100d4a:	781b      	ldrb	r3, [r3, #0]
 8100d4c:	461a      	mov	r2, r3
 8100d4e:	4b06      	ldr	r3, [pc, #24]	@ (8100d68 <HAL_IncTick+0x24>)
 8100d50:	681b      	ldr	r3, [r3, #0]
 8100d52:	4413      	add	r3, r2
 8100d54:	4a04      	ldr	r2, [pc, #16]	@ (8100d68 <HAL_IncTick+0x24>)
 8100d56:	6013      	str	r3, [r2, #0]
}
 8100d58:	bf00      	nop
 8100d5a:	46bd      	mov	sp, r7
 8100d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d60:	4770      	bx	lr
 8100d62:	bf00      	nop
 8100d64:	1000000c 	.word	0x1000000c
 8100d68:	10000120 	.word	0x10000120

08100d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100d6c:	b480      	push	{r7}
 8100d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8100d70:	4b03      	ldr	r3, [pc, #12]	@ (8100d80 <HAL_GetTick+0x14>)
 8100d72:	681b      	ldr	r3, [r3, #0]
}
 8100d74:	4618      	mov	r0, r3
 8100d76:	46bd      	mov	sp, r7
 8100d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d7c:	4770      	bx	lr
 8100d7e:	bf00      	nop
 8100d80:	10000120 	.word	0x10000120

08100d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100d84:	b480      	push	{r7}
 8100d86:	b085      	sub	sp, #20
 8100d88:	af00      	add	r7, sp, #0
 8100d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100d8c:	687b      	ldr	r3, [r7, #4]
 8100d8e:	f003 0307 	and.w	r3, r3, #7
 8100d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100d94:	4b0c      	ldr	r3, [pc, #48]	@ (8100dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8100d96:	68db      	ldr	r3, [r3, #12]
 8100d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100d9a:	68ba      	ldr	r2, [r7, #8]
 8100d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100da0:	4013      	ands	r3, r2
 8100da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100da4:	68fb      	ldr	r3, [r7, #12]
 8100da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100da8:	68bb      	ldr	r3, [r7, #8]
 8100daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100db6:	4a04      	ldr	r2, [pc, #16]	@ (8100dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8100db8:	68bb      	ldr	r3, [r7, #8]
 8100dba:	60d3      	str	r3, [r2, #12]
}
 8100dbc:	bf00      	nop
 8100dbe:	3714      	adds	r7, #20
 8100dc0:	46bd      	mov	sp, r7
 8100dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dc6:	4770      	bx	lr
 8100dc8:	e000ed00 	.word	0xe000ed00

08100dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100dcc:	b480      	push	{r7}
 8100dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100dd0:	4b04      	ldr	r3, [pc, #16]	@ (8100de4 <__NVIC_GetPriorityGrouping+0x18>)
 8100dd2:	68db      	ldr	r3, [r3, #12]
 8100dd4:	0a1b      	lsrs	r3, r3, #8
 8100dd6:	f003 0307 	and.w	r3, r3, #7
}
 8100dda:	4618      	mov	r0, r3
 8100ddc:	46bd      	mov	sp, r7
 8100dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100de2:	4770      	bx	lr
 8100de4:	e000ed00 	.word	0xe000ed00

08100de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100de8:	b480      	push	{r7}
 8100dea:	b083      	sub	sp, #12
 8100dec:	af00      	add	r7, sp, #0
 8100dee:	4603      	mov	r3, r0
 8100df0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100df6:	2b00      	cmp	r3, #0
 8100df8:	db0b      	blt.n	8100e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100dfa:	88fb      	ldrh	r3, [r7, #6]
 8100dfc:	f003 021f 	and.w	r2, r3, #31
 8100e00:	4907      	ldr	r1, [pc, #28]	@ (8100e20 <__NVIC_EnableIRQ+0x38>)
 8100e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100e06:	095b      	lsrs	r3, r3, #5
 8100e08:	2001      	movs	r0, #1
 8100e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8100e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100e12:	bf00      	nop
 8100e14:	370c      	adds	r7, #12
 8100e16:	46bd      	mov	sp, r7
 8100e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e1c:	4770      	bx	lr
 8100e1e:	bf00      	nop
 8100e20:	e000e100 	.word	0xe000e100

08100e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100e24:	b480      	push	{r7}
 8100e26:	b083      	sub	sp, #12
 8100e28:	af00      	add	r7, sp, #0
 8100e2a:	4603      	mov	r3, r0
 8100e2c:	6039      	str	r1, [r7, #0]
 8100e2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100e34:	2b00      	cmp	r3, #0
 8100e36:	db0a      	blt.n	8100e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100e38:	683b      	ldr	r3, [r7, #0]
 8100e3a:	b2da      	uxtb	r2, r3
 8100e3c:	490c      	ldr	r1, [pc, #48]	@ (8100e70 <__NVIC_SetPriority+0x4c>)
 8100e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100e42:	0112      	lsls	r2, r2, #4
 8100e44:	b2d2      	uxtb	r2, r2
 8100e46:	440b      	add	r3, r1
 8100e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100e4c:	e00a      	b.n	8100e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100e4e:	683b      	ldr	r3, [r7, #0]
 8100e50:	b2da      	uxtb	r2, r3
 8100e52:	4908      	ldr	r1, [pc, #32]	@ (8100e74 <__NVIC_SetPriority+0x50>)
 8100e54:	88fb      	ldrh	r3, [r7, #6]
 8100e56:	f003 030f 	and.w	r3, r3, #15
 8100e5a:	3b04      	subs	r3, #4
 8100e5c:	0112      	lsls	r2, r2, #4
 8100e5e:	b2d2      	uxtb	r2, r2
 8100e60:	440b      	add	r3, r1
 8100e62:	761a      	strb	r2, [r3, #24]
}
 8100e64:	bf00      	nop
 8100e66:	370c      	adds	r7, #12
 8100e68:	46bd      	mov	sp, r7
 8100e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e6e:	4770      	bx	lr
 8100e70:	e000e100 	.word	0xe000e100
 8100e74:	e000ed00 	.word	0xe000ed00

08100e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100e78:	b480      	push	{r7}
 8100e7a:	b089      	sub	sp, #36	@ 0x24
 8100e7c:	af00      	add	r7, sp, #0
 8100e7e:	60f8      	str	r0, [r7, #12]
 8100e80:	60b9      	str	r1, [r7, #8]
 8100e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100e84:	68fb      	ldr	r3, [r7, #12]
 8100e86:	f003 0307 	and.w	r3, r3, #7
 8100e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100e8c:	69fb      	ldr	r3, [r7, #28]
 8100e8e:	f1c3 0307 	rsb	r3, r3, #7
 8100e92:	2b04      	cmp	r3, #4
 8100e94:	bf28      	it	cs
 8100e96:	2304      	movcs	r3, #4
 8100e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100e9a:	69fb      	ldr	r3, [r7, #28]
 8100e9c:	3304      	adds	r3, #4
 8100e9e:	2b06      	cmp	r3, #6
 8100ea0:	d902      	bls.n	8100ea8 <NVIC_EncodePriority+0x30>
 8100ea2:	69fb      	ldr	r3, [r7, #28]
 8100ea4:	3b03      	subs	r3, #3
 8100ea6:	e000      	b.n	8100eaa <NVIC_EncodePriority+0x32>
 8100ea8:	2300      	movs	r3, #0
 8100eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100eac:	f04f 32ff 	mov.w	r2, #4294967295
 8100eb0:	69bb      	ldr	r3, [r7, #24]
 8100eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8100eb6:	43da      	mvns	r2, r3
 8100eb8:	68bb      	ldr	r3, [r7, #8]
 8100eba:	401a      	ands	r2, r3
 8100ebc:	697b      	ldr	r3, [r7, #20]
 8100ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8100ec4:	697b      	ldr	r3, [r7, #20]
 8100ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8100eca:	43d9      	mvns	r1, r3
 8100ecc:	687b      	ldr	r3, [r7, #4]
 8100ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100ed0:	4313      	orrs	r3, r2
         );
}
 8100ed2:	4618      	mov	r0, r3
 8100ed4:	3724      	adds	r7, #36	@ 0x24
 8100ed6:	46bd      	mov	sp, r7
 8100ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100edc:	4770      	bx	lr
	...

08100ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100ee0:	b580      	push	{r7, lr}
 8100ee2:	b082      	sub	sp, #8
 8100ee4:	af00      	add	r7, sp, #0
 8100ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100ee8:	687b      	ldr	r3, [r7, #4]
 8100eea:	3b01      	subs	r3, #1
 8100eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100ef0:	d301      	bcc.n	8100ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100ef2:	2301      	movs	r3, #1
 8100ef4:	e00f      	b.n	8100f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8100f20 <SysTick_Config+0x40>)
 8100ef8:	687b      	ldr	r3, [r7, #4]
 8100efa:	3b01      	subs	r3, #1
 8100efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100efe:	210f      	movs	r1, #15
 8100f00:	f04f 30ff 	mov.w	r0, #4294967295
 8100f04:	f7ff ff8e 	bl	8100e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100f08:	4b05      	ldr	r3, [pc, #20]	@ (8100f20 <SysTick_Config+0x40>)
 8100f0a:	2200      	movs	r2, #0
 8100f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100f0e:	4b04      	ldr	r3, [pc, #16]	@ (8100f20 <SysTick_Config+0x40>)
 8100f10:	2207      	movs	r2, #7
 8100f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100f14:	2300      	movs	r3, #0
}
 8100f16:	4618      	mov	r0, r3
 8100f18:	3708      	adds	r7, #8
 8100f1a:	46bd      	mov	sp, r7
 8100f1c:	bd80      	pop	{r7, pc}
 8100f1e:	bf00      	nop
 8100f20:	e000e010 	.word	0xe000e010

08100f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100f24:	b580      	push	{r7, lr}
 8100f26:	b082      	sub	sp, #8
 8100f28:	af00      	add	r7, sp, #0
 8100f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100f2c:	6878      	ldr	r0, [r7, #4]
 8100f2e:	f7ff ff29 	bl	8100d84 <__NVIC_SetPriorityGrouping>
}
 8100f32:	bf00      	nop
 8100f34:	3708      	adds	r7, #8
 8100f36:	46bd      	mov	sp, r7
 8100f38:	bd80      	pop	{r7, pc}

08100f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100f3a:	b580      	push	{r7, lr}
 8100f3c:	b086      	sub	sp, #24
 8100f3e:	af00      	add	r7, sp, #0
 8100f40:	4603      	mov	r3, r0
 8100f42:	60b9      	str	r1, [r7, #8]
 8100f44:	607a      	str	r2, [r7, #4]
 8100f46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100f48:	f7ff ff40 	bl	8100dcc <__NVIC_GetPriorityGrouping>
 8100f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100f4e:	687a      	ldr	r2, [r7, #4]
 8100f50:	68b9      	ldr	r1, [r7, #8]
 8100f52:	6978      	ldr	r0, [r7, #20]
 8100f54:	f7ff ff90 	bl	8100e78 <NVIC_EncodePriority>
 8100f58:	4602      	mov	r2, r0
 8100f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100f5e:	4611      	mov	r1, r2
 8100f60:	4618      	mov	r0, r3
 8100f62:	f7ff ff5f 	bl	8100e24 <__NVIC_SetPriority>
}
 8100f66:	bf00      	nop
 8100f68:	3718      	adds	r7, #24
 8100f6a:	46bd      	mov	sp, r7
 8100f6c:	bd80      	pop	{r7, pc}

08100f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100f6e:	b580      	push	{r7, lr}
 8100f70:	b082      	sub	sp, #8
 8100f72:	af00      	add	r7, sp, #0
 8100f74:	4603      	mov	r3, r0
 8100f76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100f7c:	4618      	mov	r0, r3
 8100f7e:	f7ff ff33 	bl	8100de8 <__NVIC_EnableIRQ>
}
 8100f82:	bf00      	nop
 8100f84:	3708      	adds	r7, #8
 8100f86:	46bd      	mov	sp, r7
 8100f88:	bd80      	pop	{r7, pc}

08100f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100f8a:	b580      	push	{r7, lr}
 8100f8c:	b082      	sub	sp, #8
 8100f8e:	af00      	add	r7, sp, #0
 8100f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100f92:	6878      	ldr	r0, [r7, #4]
 8100f94:	f7ff ffa4 	bl	8100ee0 <SysTick_Config>
 8100f98:	4603      	mov	r3, r0
}
 8100f9a:	4618      	mov	r0, r3
 8100f9c:	3708      	adds	r7, #8
 8100f9e:	46bd      	mov	sp, r7
 8100fa0:	bd80      	pop	{r7, pc}
	...

08100fa4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100fa4:	b480      	push	{r7}
 8100fa6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100fa8:	4b06      	ldr	r3, [pc, #24]	@ (8100fc4 <HAL_GetCurrentCPUID+0x20>)
 8100faa:	681b      	ldr	r3, [r3, #0]
 8100fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100fb0:	2b70      	cmp	r3, #112	@ 0x70
 8100fb2:	d101      	bne.n	8100fb8 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8100fb4:	2303      	movs	r3, #3
 8100fb6:	e000      	b.n	8100fba <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8100fb8:	2301      	movs	r3, #1
  }
}
 8100fba:	4618      	mov	r0, r3
 8100fbc:	46bd      	mov	sp, r7
 8100fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fc2:	4770      	bx	lr
 8100fc4:	e000ed00 	.word	0xe000ed00

08100fc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8100fc8:	b580      	push	{r7, lr}
 8100fca:	b086      	sub	sp, #24
 8100fcc:	af00      	add	r7, sp, #0
 8100fce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8100fd0:	f7ff fecc 	bl	8100d6c <HAL_GetTick>
 8100fd4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8100fd6:	687b      	ldr	r3, [r7, #4]
 8100fd8:	2b00      	cmp	r3, #0
 8100fda:	d101      	bne.n	8100fe0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8100fdc:	2301      	movs	r3, #1
 8100fde:	e2dc      	b.n	810159a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8100fe0:	687b      	ldr	r3, [r7, #4]
 8100fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8100fe6:	b2db      	uxtb	r3, r3
 8100fe8:	2b02      	cmp	r3, #2
 8100fea:	d008      	beq.n	8100ffe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8100fec:	687b      	ldr	r3, [r7, #4]
 8100fee:	2280      	movs	r2, #128	@ 0x80
 8100ff0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8100ff2:	687b      	ldr	r3, [r7, #4]
 8100ff4:	2200      	movs	r2, #0
 8100ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8100ffa:	2301      	movs	r3, #1
 8100ffc:	e2cd      	b.n	810159a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8100ffe:	687b      	ldr	r3, [r7, #4]
 8101000:	681b      	ldr	r3, [r3, #0]
 8101002:	4a76      	ldr	r2, [pc, #472]	@ (81011dc <HAL_DMA_Abort+0x214>)
 8101004:	4293      	cmp	r3, r2
 8101006:	d04a      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 8101008:	687b      	ldr	r3, [r7, #4]
 810100a:	681b      	ldr	r3, [r3, #0]
 810100c:	4a74      	ldr	r2, [pc, #464]	@ (81011e0 <HAL_DMA_Abort+0x218>)
 810100e:	4293      	cmp	r3, r2
 8101010:	d045      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 8101012:	687b      	ldr	r3, [r7, #4]
 8101014:	681b      	ldr	r3, [r3, #0]
 8101016:	4a73      	ldr	r2, [pc, #460]	@ (81011e4 <HAL_DMA_Abort+0x21c>)
 8101018:	4293      	cmp	r3, r2
 810101a:	d040      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 810101c:	687b      	ldr	r3, [r7, #4]
 810101e:	681b      	ldr	r3, [r3, #0]
 8101020:	4a71      	ldr	r2, [pc, #452]	@ (81011e8 <HAL_DMA_Abort+0x220>)
 8101022:	4293      	cmp	r3, r2
 8101024:	d03b      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 8101026:	687b      	ldr	r3, [r7, #4]
 8101028:	681b      	ldr	r3, [r3, #0]
 810102a:	4a70      	ldr	r2, [pc, #448]	@ (81011ec <HAL_DMA_Abort+0x224>)
 810102c:	4293      	cmp	r3, r2
 810102e:	d036      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 8101030:	687b      	ldr	r3, [r7, #4]
 8101032:	681b      	ldr	r3, [r3, #0]
 8101034:	4a6e      	ldr	r2, [pc, #440]	@ (81011f0 <HAL_DMA_Abort+0x228>)
 8101036:	4293      	cmp	r3, r2
 8101038:	d031      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 810103a:	687b      	ldr	r3, [r7, #4]
 810103c:	681b      	ldr	r3, [r3, #0]
 810103e:	4a6d      	ldr	r2, [pc, #436]	@ (81011f4 <HAL_DMA_Abort+0x22c>)
 8101040:	4293      	cmp	r3, r2
 8101042:	d02c      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 8101044:	687b      	ldr	r3, [r7, #4]
 8101046:	681b      	ldr	r3, [r3, #0]
 8101048:	4a6b      	ldr	r2, [pc, #428]	@ (81011f8 <HAL_DMA_Abort+0x230>)
 810104a:	4293      	cmp	r3, r2
 810104c:	d027      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 810104e:	687b      	ldr	r3, [r7, #4]
 8101050:	681b      	ldr	r3, [r3, #0]
 8101052:	4a6a      	ldr	r2, [pc, #424]	@ (81011fc <HAL_DMA_Abort+0x234>)
 8101054:	4293      	cmp	r3, r2
 8101056:	d022      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 8101058:	687b      	ldr	r3, [r7, #4]
 810105a:	681b      	ldr	r3, [r3, #0]
 810105c:	4a68      	ldr	r2, [pc, #416]	@ (8101200 <HAL_DMA_Abort+0x238>)
 810105e:	4293      	cmp	r3, r2
 8101060:	d01d      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 8101062:	687b      	ldr	r3, [r7, #4]
 8101064:	681b      	ldr	r3, [r3, #0]
 8101066:	4a67      	ldr	r2, [pc, #412]	@ (8101204 <HAL_DMA_Abort+0x23c>)
 8101068:	4293      	cmp	r3, r2
 810106a:	d018      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 810106c:	687b      	ldr	r3, [r7, #4]
 810106e:	681b      	ldr	r3, [r3, #0]
 8101070:	4a65      	ldr	r2, [pc, #404]	@ (8101208 <HAL_DMA_Abort+0x240>)
 8101072:	4293      	cmp	r3, r2
 8101074:	d013      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 8101076:	687b      	ldr	r3, [r7, #4]
 8101078:	681b      	ldr	r3, [r3, #0]
 810107a:	4a64      	ldr	r2, [pc, #400]	@ (810120c <HAL_DMA_Abort+0x244>)
 810107c:	4293      	cmp	r3, r2
 810107e:	d00e      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 8101080:	687b      	ldr	r3, [r7, #4]
 8101082:	681b      	ldr	r3, [r3, #0]
 8101084:	4a62      	ldr	r2, [pc, #392]	@ (8101210 <HAL_DMA_Abort+0x248>)
 8101086:	4293      	cmp	r3, r2
 8101088:	d009      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 810108a:	687b      	ldr	r3, [r7, #4]
 810108c:	681b      	ldr	r3, [r3, #0]
 810108e:	4a61      	ldr	r2, [pc, #388]	@ (8101214 <HAL_DMA_Abort+0x24c>)
 8101090:	4293      	cmp	r3, r2
 8101092:	d004      	beq.n	810109e <HAL_DMA_Abort+0xd6>
 8101094:	687b      	ldr	r3, [r7, #4]
 8101096:	681b      	ldr	r3, [r3, #0]
 8101098:	4a5f      	ldr	r2, [pc, #380]	@ (8101218 <HAL_DMA_Abort+0x250>)
 810109a:	4293      	cmp	r3, r2
 810109c:	d101      	bne.n	81010a2 <HAL_DMA_Abort+0xda>
 810109e:	2301      	movs	r3, #1
 81010a0:	e000      	b.n	81010a4 <HAL_DMA_Abort+0xdc>
 81010a2:	2300      	movs	r3, #0
 81010a4:	2b00      	cmp	r3, #0
 81010a6:	d013      	beq.n	81010d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81010a8:	687b      	ldr	r3, [r7, #4]
 81010aa:	681b      	ldr	r3, [r3, #0]
 81010ac:	681a      	ldr	r2, [r3, #0]
 81010ae:	687b      	ldr	r3, [r7, #4]
 81010b0:	681b      	ldr	r3, [r3, #0]
 81010b2:	f022 021e 	bic.w	r2, r2, #30
 81010b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81010b8:	687b      	ldr	r3, [r7, #4]
 81010ba:	681b      	ldr	r3, [r3, #0]
 81010bc:	695a      	ldr	r2, [r3, #20]
 81010be:	687b      	ldr	r3, [r7, #4]
 81010c0:	681b      	ldr	r3, [r3, #0]
 81010c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 81010c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81010c8:	687b      	ldr	r3, [r7, #4]
 81010ca:	681b      	ldr	r3, [r3, #0]
 81010cc:	617b      	str	r3, [r7, #20]
 81010ce:	e00a      	b.n	81010e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81010d0:	687b      	ldr	r3, [r7, #4]
 81010d2:	681b      	ldr	r3, [r3, #0]
 81010d4:	681a      	ldr	r2, [r3, #0]
 81010d6:	687b      	ldr	r3, [r7, #4]
 81010d8:	681b      	ldr	r3, [r3, #0]
 81010da:	f022 020e 	bic.w	r2, r2, #14
 81010de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81010e0:	687b      	ldr	r3, [r7, #4]
 81010e2:	681b      	ldr	r3, [r3, #0]
 81010e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81010e6:	687b      	ldr	r3, [r7, #4]
 81010e8:	681b      	ldr	r3, [r3, #0]
 81010ea:	4a3c      	ldr	r2, [pc, #240]	@ (81011dc <HAL_DMA_Abort+0x214>)
 81010ec:	4293      	cmp	r3, r2
 81010ee:	d072      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 81010f0:	687b      	ldr	r3, [r7, #4]
 81010f2:	681b      	ldr	r3, [r3, #0]
 81010f4:	4a3a      	ldr	r2, [pc, #232]	@ (81011e0 <HAL_DMA_Abort+0x218>)
 81010f6:	4293      	cmp	r3, r2
 81010f8:	d06d      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 81010fa:	687b      	ldr	r3, [r7, #4]
 81010fc:	681b      	ldr	r3, [r3, #0]
 81010fe:	4a39      	ldr	r2, [pc, #228]	@ (81011e4 <HAL_DMA_Abort+0x21c>)
 8101100:	4293      	cmp	r3, r2
 8101102:	d068      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 8101104:	687b      	ldr	r3, [r7, #4]
 8101106:	681b      	ldr	r3, [r3, #0]
 8101108:	4a37      	ldr	r2, [pc, #220]	@ (81011e8 <HAL_DMA_Abort+0x220>)
 810110a:	4293      	cmp	r3, r2
 810110c:	d063      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 810110e:	687b      	ldr	r3, [r7, #4]
 8101110:	681b      	ldr	r3, [r3, #0]
 8101112:	4a36      	ldr	r2, [pc, #216]	@ (81011ec <HAL_DMA_Abort+0x224>)
 8101114:	4293      	cmp	r3, r2
 8101116:	d05e      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 8101118:	687b      	ldr	r3, [r7, #4]
 810111a:	681b      	ldr	r3, [r3, #0]
 810111c:	4a34      	ldr	r2, [pc, #208]	@ (81011f0 <HAL_DMA_Abort+0x228>)
 810111e:	4293      	cmp	r3, r2
 8101120:	d059      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 8101122:	687b      	ldr	r3, [r7, #4]
 8101124:	681b      	ldr	r3, [r3, #0]
 8101126:	4a33      	ldr	r2, [pc, #204]	@ (81011f4 <HAL_DMA_Abort+0x22c>)
 8101128:	4293      	cmp	r3, r2
 810112a:	d054      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 810112c:	687b      	ldr	r3, [r7, #4]
 810112e:	681b      	ldr	r3, [r3, #0]
 8101130:	4a31      	ldr	r2, [pc, #196]	@ (81011f8 <HAL_DMA_Abort+0x230>)
 8101132:	4293      	cmp	r3, r2
 8101134:	d04f      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 8101136:	687b      	ldr	r3, [r7, #4]
 8101138:	681b      	ldr	r3, [r3, #0]
 810113a:	4a30      	ldr	r2, [pc, #192]	@ (81011fc <HAL_DMA_Abort+0x234>)
 810113c:	4293      	cmp	r3, r2
 810113e:	d04a      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 8101140:	687b      	ldr	r3, [r7, #4]
 8101142:	681b      	ldr	r3, [r3, #0]
 8101144:	4a2e      	ldr	r2, [pc, #184]	@ (8101200 <HAL_DMA_Abort+0x238>)
 8101146:	4293      	cmp	r3, r2
 8101148:	d045      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 810114a:	687b      	ldr	r3, [r7, #4]
 810114c:	681b      	ldr	r3, [r3, #0]
 810114e:	4a2d      	ldr	r2, [pc, #180]	@ (8101204 <HAL_DMA_Abort+0x23c>)
 8101150:	4293      	cmp	r3, r2
 8101152:	d040      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 8101154:	687b      	ldr	r3, [r7, #4]
 8101156:	681b      	ldr	r3, [r3, #0]
 8101158:	4a2b      	ldr	r2, [pc, #172]	@ (8101208 <HAL_DMA_Abort+0x240>)
 810115a:	4293      	cmp	r3, r2
 810115c:	d03b      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 810115e:	687b      	ldr	r3, [r7, #4]
 8101160:	681b      	ldr	r3, [r3, #0]
 8101162:	4a2a      	ldr	r2, [pc, #168]	@ (810120c <HAL_DMA_Abort+0x244>)
 8101164:	4293      	cmp	r3, r2
 8101166:	d036      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 8101168:	687b      	ldr	r3, [r7, #4]
 810116a:	681b      	ldr	r3, [r3, #0]
 810116c:	4a28      	ldr	r2, [pc, #160]	@ (8101210 <HAL_DMA_Abort+0x248>)
 810116e:	4293      	cmp	r3, r2
 8101170:	d031      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 8101172:	687b      	ldr	r3, [r7, #4]
 8101174:	681b      	ldr	r3, [r3, #0]
 8101176:	4a27      	ldr	r2, [pc, #156]	@ (8101214 <HAL_DMA_Abort+0x24c>)
 8101178:	4293      	cmp	r3, r2
 810117a:	d02c      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 810117c:	687b      	ldr	r3, [r7, #4]
 810117e:	681b      	ldr	r3, [r3, #0]
 8101180:	4a25      	ldr	r2, [pc, #148]	@ (8101218 <HAL_DMA_Abort+0x250>)
 8101182:	4293      	cmp	r3, r2
 8101184:	d027      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 8101186:	687b      	ldr	r3, [r7, #4]
 8101188:	681b      	ldr	r3, [r3, #0]
 810118a:	4a24      	ldr	r2, [pc, #144]	@ (810121c <HAL_DMA_Abort+0x254>)
 810118c:	4293      	cmp	r3, r2
 810118e:	d022      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 8101190:	687b      	ldr	r3, [r7, #4]
 8101192:	681b      	ldr	r3, [r3, #0]
 8101194:	4a22      	ldr	r2, [pc, #136]	@ (8101220 <HAL_DMA_Abort+0x258>)
 8101196:	4293      	cmp	r3, r2
 8101198:	d01d      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 810119a:	687b      	ldr	r3, [r7, #4]
 810119c:	681b      	ldr	r3, [r3, #0]
 810119e:	4a21      	ldr	r2, [pc, #132]	@ (8101224 <HAL_DMA_Abort+0x25c>)
 81011a0:	4293      	cmp	r3, r2
 81011a2:	d018      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 81011a4:	687b      	ldr	r3, [r7, #4]
 81011a6:	681b      	ldr	r3, [r3, #0]
 81011a8:	4a1f      	ldr	r2, [pc, #124]	@ (8101228 <HAL_DMA_Abort+0x260>)
 81011aa:	4293      	cmp	r3, r2
 81011ac:	d013      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 81011ae:	687b      	ldr	r3, [r7, #4]
 81011b0:	681b      	ldr	r3, [r3, #0]
 81011b2:	4a1e      	ldr	r2, [pc, #120]	@ (810122c <HAL_DMA_Abort+0x264>)
 81011b4:	4293      	cmp	r3, r2
 81011b6:	d00e      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 81011b8:	687b      	ldr	r3, [r7, #4]
 81011ba:	681b      	ldr	r3, [r3, #0]
 81011bc:	4a1c      	ldr	r2, [pc, #112]	@ (8101230 <HAL_DMA_Abort+0x268>)
 81011be:	4293      	cmp	r3, r2
 81011c0:	d009      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 81011c2:	687b      	ldr	r3, [r7, #4]
 81011c4:	681b      	ldr	r3, [r3, #0]
 81011c6:	4a1b      	ldr	r2, [pc, #108]	@ (8101234 <HAL_DMA_Abort+0x26c>)
 81011c8:	4293      	cmp	r3, r2
 81011ca:	d004      	beq.n	81011d6 <HAL_DMA_Abort+0x20e>
 81011cc:	687b      	ldr	r3, [r7, #4]
 81011ce:	681b      	ldr	r3, [r3, #0]
 81011d0:	4a19      	ldr	r2, [pc, #100]	@ (8101238 <HAL_DMA_Abort+0x270>)
 81011d2:	4293      	cmp	r3, r2
 81011d4:	d132      	bne.n	810123c <HAL_DMA_Abort+0x274>
 81011d6:	2301      	movs	r3, #1
 81011d8:	e031      	b.n	810123e <HAL_DMA_Abort+0x276>
 81011da:	bf00      	nop
 81011dc:	40020010 	.word	0x40020010
 81011e0:	40020028 	.word	0x40020028
 81011e4:	40020040 	.word	0x40020040
 81011e8:	40020058 	.word	0x40020058
 81011ec:	40020070 	.word	0x40020070
 81011f0:	40020088 	.word	0x40020088
 81011f4:	400200a0 	.word	0x400200a0
 81011f8:	400200b8 	.word	0x400200b8
 81011fc:	40020410 	.word	0x40020410
 8101200:	40020428 	.word	0x40020428
 8101204:	40020440 	.word	0x40020440
 8101208:	40020458 	.word	0x40020458
 810120c:	40020470 	.word	0x40020470
 8101210:	40020488 	.word	0x40020488
 8101214:	400204a0 	.word	0x400204a0
 8101218:	400204b8 	.word	0x400204b8
 810121c:	58025408 	.word	0x58025408
 8101220:	5802541c 	.word	0x5802541c
 8101224:	58025430 	.word	0x58025430
 8101228:	58025444 	.word	0x58025444
 810122c:	58025458 	.word	0x58025458
 8101230:	5802546c 	.word	0x5802546c
 8101234:	58025480 	.word	0x58025480
 8101238:	58025494 	.word	0x58025494
 810123c:	2300      	movs	r3, #0
 810123e:	2b00      	cmp	r3, #0
 8101240:	d007      	beq.n	8101252 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8101242:	687b      	ldr	r3, [r7, #4]
 8101244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101246:	681a      	ldr	r2, [r3, #0]
 8101248:	687b      	ldr	r3, [r7, #4]
 810124a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810124c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8101250:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8101252:	687b      	ldr	r3, [r7, #4]
 8101254:	681b      	ldr	r3, [r3, #0]
 8101256:	4a6d      	ldr	r2, [pc, #436]	@ (810140c <HAL_DMA_Abort+0x444>)
 8101258:	4293      	cmp	r3, r2
 810125a:	d04a      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 810125c:	687b      	ldr	r3, [r7, #4]
 810125e:	681b      	ldr	r3, [r3, #0]
 8101260:	4a6b      	ldr	r2, [pc, #428]	@ (8101410 <HAL_DMA_Abort+0x448>)
 8101262:	4293      	cmp	r3, r2
 8101264:	d045      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 8101266:	687b      	ldr	r3, [r7, #4]
 8101268:	681b      	ldr	r3, [r3, #0]
 810126a:	4a6a      	ldr	r2, [pc, #424]	@ (8101414 <HAL_DMA_Abort+0x44c>)
 810126c:	4293      	cmp	r3, r2
 810126e:	d040      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 8101270:	687b      	ldr	r3, [r7, #4]
 8101272:	681b      	ldr	r3, [r3, #0]
 8101274:	4a68      	ldr	r2, [pc, #416]	@ (8101418 <HAL_DMA_Abort+0x450>)
 8101276:	4293      	cmp	r3, r2
 8101278:	d03b      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 810127a:	687b      	ldr	r3, [r7, #4]
 810127c:	681b      	ldr	r3, [r3, #0]
 810127e:	4a67      	ldr	r2, [pc, #412]	@ (810141c <HAL_DMA_Abort+0x454>)
 8101280:	4293      	cmp	r3, r2
 8101282:	d036      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 8101284:	687b      	ldr	r3, [r7, #4]
 8101286:	681b      	ldr	r3, [r3, #0]
 8101288:	4a65      	ldr	r2, [pc, #404]	@ (8101420 <HAL_DMA_Abort+0x458>)
 810128a:	4293      	cmp	r3, r2
 810128c:	d031      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 810128e:	687b      	ldr	r3, [r7, #4]
 8101290:	681b      	ldr	r3, [r3, #0]
 8101292:	4a64      	ldr	r2, [pc, #400]	@ (8101424 <HAL_DMA_Abort+0x45c>)
 8101294:	4293      	cmp	r3, r2
 8101296:	d02c      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 8101298:	687b      	ldr	r3, [r7, #4]
 810129a:	681b      	ldr	r3, [r3, #0]
 810129c:	4a62      	ldr	r2, [pc, #392]	@ (8101428 <HAL_DMA_Abort+0x460>)
 810129e:	4293      	cmp	r3, r2
 81012a0:	d027      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 81012a2:	687b      	ldr	r3, [r7, #4]
 81012a4:	681b      	ldr	r3, [r3, #0]
 81012a6:	4a61      	ldr	r2, [pc, #388]	@ (810142c <HAL_DMA_Abort+0x464>)
 81012a8:	4293      	cmp	r3, r2
 81012aa:	d022      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	681b      	ldr	r3, [r3, #0]
 81012b0:	4a5f      	ldr	r2, [pc, #380]	@ (8101430 <HAL_DMA_Abort+0x468>)
 81012b2:	4293      	cmp	r3, r2
 81012b4:	d01d      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 81012b6:	687b      	ldr	r3, [r7, #4]
 81012b8:	681b      	ldr	r3, [r3, #0]
 81012ba:	4a5e      	ldr	r2, [pc, #376]	@ (8101434 <HAL_DMA_Abort+0x46c>)
 81012bc:	4293      	cmp	r3, r2
 81012be:	d018      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 81012c0:	687b      	ldr	r3, [r7, #4]
 81012c2:	681b      	ldr	r3, [r3, #0]
 81012c4:	4a5c      	ldr	r2, [pc, #368]	@ (8101438 <HAL_DMA_Abort+0x470>)
 81012c6:	4293      	cmp	r3, r2
 81012c8:	d013      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	681b      	ldr	r3, [r3, #0]
 81012ce:	4a5b      	ldr	r2, [pc, #364]	@ (810143c <HAL_DMA_Abort+0x474>)
 81012d0:	4293      	cmp	r3, r2
 81012d2:	d00e      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 81012d4:	687b      	ldr	r3, [r7, #4]
 81012d6:	681b      	ldr	r3, [r3, #0]
 81012d8:	4a59      	ldr	r2, [pc, #356]	@ (8101440 <HAL_DMA_Abort+0x478>)
 81012da:	4293      	cmp	r3, r2
 81012dc:	d009      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 81012de:	687b      	ldr	r3, [r7, #4]
 81012e0:	681b      	ldr	r3, [r3, #0]
 81012e2:	4a58      	ldr	r2, [pc, #352]	@ (8101444 <HAL_DMA_Abort+0x47c>)
 81012e4:	4293      	cmp	r3, r2
 81012e6:	d004      	beq.n	81012f2 <HAL_DMA_Abort+0x32a>
 81012e8:	687b      	ldr	r3, [r7, #4]
 81012ea:	681b      	ldr	r3, [r3, #0]
 81012ec:	4a56      	ldr	r2, [pc, #344]	@ (8101448 <HAL_DMA_Abort+0x480>)
 81012ee:	4293      	cmp	r3, r2
 81012f0:	d108      	bne.n	8101304 <HAL_DMA_Abort+0x33c>
 81012f2:	687b      	ldr	r3, [r7, #4]
 81012f4:	681b      	ldr	r3, [r3, #0]
 81012f6:	681a      	ldr	r2, [r3, #0]
 81012f8:	687b      	ldr	r3, [r7, #4]
 81012fa:	681b      	ldr	r3, [r3, #0]
 81012fc:	f022 0201 	bic.w	r2, r2, #1
 8101300:	601a      	str	r2, [r3, #0]
 8101302:	e007      	b.n	8101314 <HAL_DMA_Abort+0x34c>
 8101304:	687b      	ldr	r3, [r7, #4]
 8101306:	681b      	ldr	r3, [r3, #0]
 8101308:	681a      	ldr	r2, [r3, #0]
 810130a:	687b      	ldr	r3, [r7, #4]
 810130c:	681b      	ldr	r3, [r3, #0]
 810130e:	f022 0201 	bic.w	r2, r2, #1
 8101312:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8101314:	e013      	b.n	810133e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8101316:	f7ff fd29 	bl	8100d6c <HAL_GetTick>
 810131a:	4602      	mov	r2, r0
 810131c:	693b      	ldr	r3, [r7, #16]
 810131e:	1ad3      	subs	r3, r2, r3
 8101320:	2b05      	cmp	r3, #5
 8101322:	d90c      	bls.n	810133e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8101324:	687b      	ldr	r3, [r7, #4]
 8101326:	2220      	movs	r2, #32
 8101328:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810132a:	687b      	ldr	r3, [r7, #4]
 810132c:	2203      	movs	r2, #3
 810132e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8101332:	687b      	ldr	r3, [r7, #4]
 8101334:	2200      	movs	r2, #0
 8101336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 810133a:	2301      	movs	r3, #1
 810133c:	e12d      	b.n	810159a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810133e:	697b      	ldr	r3, [r7, #20]
 8101340:	681b      	ldr	r3, [r3, #0]
 8101342:	f003 0301 	and.w	r3, r3, #1
 8101346:	2b00      	cmp	r3, #0
 8101348:	d1e5      	bne.n	8101316 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810134a:	687b      	ldr	r3, [r7, #4]
 810134c:	681b      	ldr	r3, [r3, #0]
 810134e:	4a2f      	ldr	r2, [pc, #188]	@ (810140c <HAL_DMA_Abort+0x444>)
 8101350:	4293      	cmp	r3, r2
 8101352:	d04a      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 8101354:	687b      	ldr	r3, [r7, #4]
 8101356:	681b      	ldr	r3, [r3, #0]
 8101358:	4a2d      	ldr	r2, [pc, #180]	@ (8101410 <HAL_DMA_Abort+0x448>)
 810135a:	4293      	cmp	r3, r2
 810135c:	d045      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 810135e:	687b      	ldr	r3, [r7, #4]
 8101360:	681b      	ldr	r3, [r3, #0]
 8101362:	4a2c      	ldr	r2, [pc, #176]	@ (8101414 <HAL_DMA_Abort+0x44c>)
 8101364:	4293      	cmp	r3, r2
 8101366:	d040      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 8101368:	687b      	ldr	r3, [r7, #4]
 810136a:	681b      	ldr	r3, [r3, #0]
 810136c:	4a2a      	ldr	r2, [pc, #168]	@ (8101418 <HAL_DMA_Abort+0x450>)
 810136e:	4293      	cmp	r3, r2
 8101370:	d03b      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 8101372:	687b      	ldr	r3, [r7, #4]
 8101374:	681b      	ldr	r3, [r3, #0]
 8101376:	4a29      	ldr	r2, [pc, #164]	@ (810141c <HAL_DMA_Abort+0x454>)
 8101378:	4293      	cmp	r3, r2
 810137a:	d036      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 810137c:	687b      	ldr	r3, [r7, #4]
 810137e:	681b      	ldr	r3, [r3, #0]
 8101380:	4a27      	ldr	r2, [pc, #156]	@ (8101420 <HAL_DMA_Abort+0x458>)
 8101382:	4293      	cmp	r3, r2
 8101384:	d031      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 8101386:	687b      	ldr	r3, [r7, #4]
 8101388:	681b      	ldr	r3, [r3, #0]
 810138a:	4a26      	ldr	r2, [pc, #152]	@ (8101424 <HAL_DMA_Abort+0x45c>)
 810138c:	4293      	cmp	r3, r2
 810138e:	d02c      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 8101390:	687b      	ldr	r3, [r7, #4]
 8101392:	681b      	ldr	r3, [r3, #0]
 8101394:	4a24      	ldr	r2, [pc, #144]	@ (8101428 <HAL_DMA_Abort+0x460>)
 8101396:	4293      	cmp	r3, r2
 8101398:	d027      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 810139a:	687b      	ldr	r3, [r7, #4]
 810139c:	681b      	ldr	r3, [r3, #0]
 810139e:	4a23      	ldr	r2, [pc, #140]	@ (810142c <HAL_DMA_Abort+0x464>)
 81013a0:	4293      	cmp	r3, r2
 81013a2:	d022      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 81013a4:	687b      	ldr	r3, [r7, #4]
 81013a6:	681b      	ldr	r3, [r3, #0]
 81013a8:	4a21      	ldr	r2, [pc, #132]	@ (8101430 <HAL_DMA_Abort+0x468>)
 81013aa:	4293      	cmp	r3, r2
 81013ac:	d01d      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 81013ae:	687b      	ldr	r3, [r7, #4]
 81013b0:	681b      	ldr	r3, [r3, #0]
 81013b2:	4a20      	ldr	r2, [pc, #128]	@ (8101434 <HAL_DMA_Abort+0x46c>)
 81013b4:	4293      	cmp	r3, r2
 81013b6:	d018      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 81013b8:	687b      	ldr	r3, [r7, #4]
 81013ba:	681b      	ldr	r3, [r3, #0]
 81013bc:	4a1e      	ldr	r2, [pc, #120]	@ (8101438 <HAL_DMA_Abort+0x470>)
 81013be:	4293      	cmp	r3, r2
 81013c0:	d013      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 81013c2:	687b      	ldr	r3, [r7, #4]
 81013c4:	681b      	ldr	r3, [r3, #0]
 81013c6:	4a1d      	ldr	r2, [pc, #116]	@ (810143c <HAL_DMA_Abort+0x474>)
 81013c8:	4293      	cmp	r3, r2
 81013ca:	d00e      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 81013cc:	687b      	ldr	r3, [r7, #4]
 81013ce:	681b      	ldr	r3, [r3, #0]
 81013d0:	4a1b      	ldr	r2, [pc, #108]	@ (8101440 <HAL_DMA_Abort+0x478>)
 81013d2:	4293      	cmp	r3, r2
 81013d4:	d009      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 81013d6:	687b      	ldr	r3, [r7, #4]
 81013d8:	681b      	ldr	r3, [r3, #0]
 81013da:	4a1a      	ldr	r2, [pc, #104]	@ (8101444 <HAL_DMA_Abort+0x47c>)
 81013dc:	4293      	cmp	r3, r2
 81013de:	d004      	beq.n	81013ea <HAL_DMA_Abort+0x422>
 81013e0:	687b      	ldr	r3, [r7, #4]
 81013e2:	681b      	ldr	r3, [r3, #0]
 81013e4:	4a18      	ldr	r2, [pc, #96]	@ (8101448 <HAL_DMA_Abort+0x480>)
 81013e6:	4293      	cmp	r3, r2
 81013e8:	d101      	bne.n	81013ee <HAL_DMA_Abort+0x426>
 81013ea:	2301      	movs	r3, #1
 81013ec:	e000      	b.n	81013f0 <HAL_DMA_Abort+0x428>
 81013ee:	2300      	movs	r3, #0
 81013f0:	2b00      	cmp	r3, #0
 81013f2:	d02b      	beq.n	810144c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81013f4:	687b      	ldr	r3, [r7, #4]
 81013f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81013f8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81013fa:	687b      	ldr	r3, [r7, #4]
 81013fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81013fe:	f003 031f 	and.w	r3, r3, #31
 8101402:	223f      	movs	r2, #63	@ 0x3f
 8101404:	409a      	lsls	r2, r3
 8101406:	68bb      	ldr	r3, [r7, #8]
 8101408:	609a      	str	r2, [r3, #8]
 810140a:	e02a      	b.n	8101462 <HAL_DMA_Abort+0x49a>
 810140c:	40020010 	.word	0x40020010
 8101410:	40020028 	.word	0x40020028
 8101414:	40020040 	.word	0x40020040
 8101418:	40020058 	.word	0x40020058
 810141c:	40020070 	.word	0x40020070
 8101420:	40020088 	.word	0x40020088
 8101424:	400200a0 	.word	0x400200a0
 8101428:	400200b8 	.word	0x400200b8
 810142c:	40020410 	.word	0x40020410
 8101430:	40020428 	.word	0x40020428
 8101434:	40020440 	.word	0x40020440
 8101438:	40020458 	.word	0x40020458
 810143c:	40020470 	.word	0x40020470
 8101440:	40020488 	.word	0x40020488
 8101444:	400204a0 	.word	0x400204a0
 8101448:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810144c:	687b      	ldr	r3, [r7, #4]
 810144e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101450:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101452:	687b      	ldr	r3, [r7, #4]
 8101454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101456:	f003 031f 	and.w	r3, r3, #31
 810145a:	2201      	movs	r2, #1
 810145c:	409a      	lsls	r2, r3
 810145e:	68fb      	ldr	r3, [r7, #12]
 8101460:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101462:	687b      	ldr	r3, [r7, #4]
 8101464:	681b      	ldr	r3, [r3, #0]
 8101466:	4a4f      	ldr	r2, [pc, #316]	@ (81015a4 <HAL_DMA_Abort+0x5dc>)
 8101468:	4293      	cmp	r3, r2
 810146a:	d072      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 810146c:	687b      	ldr	r3, [r7, #4]
 810146e:	681b      	ldr	r3, [r3, #0]
 8101470:	4a4d      	ldr	r2, [pc, #308]	@ (81015a8 <HAL_DMA_Abort+0x5e0>)
 8101472:	4293      	cmp	r3, r2
 8101474:	d06d      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 8101476:	687b      	ldr	r3, [r7, #4]
 8101478:	681b      	ldr	r3, [r3, #0]
 810147a:	4a4c      	ldr	r2, [pc, #304]	@ (81015ac <HAL_DMA_Abort+0x5e4>)
 810147c:	4293      	cmp	r3, r2
 810147e:	d068      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 8101480:	687b      	ldr	r3, [r7, #4]
 8101482:	681b      	ldr	r3, [r3, #0]
 8101484:	4a4a      	ldr	r2, [pc, #296]	@ (81015b0 <HAL_DMA_Abort+0x5e8>)
 8101486:	4293      	cmp	r3, r2
 8101488:	d063      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 810148a:	687b      	ldr	r3, [r7, #4]
 810148c:	681b      	ldr	r3, [r3, #0]
 810148e:	4a49      	ldr	r2, [pc, #292]	@ (81015b4 <HAL_DMA_Abort+0x5ec>)
 8101490:	4293      	cmp	r3, r2
 8101492:	d05e      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 8101494:	687b      	ldr	r3, [r7, #4]
 8101496:	681b      	ldr	r3, [r3, #0]
 8101498:	4a47      	ldr	r2, [pc, #284]	@ (81015b8 <HAL_DMA_Abort+0x5f0>)
 810149a:	4293      	cmp	r3, r2
 810149c:	d059      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 810149e:	687b      	ldr	r3, [r7, #4]
 81014a0:	681b      	ldr	r3, [r3, #0]
 81014a2:	4a46      	ldr	r2, [pc, #280]	@ (81015bc <HAL_DMA_Abort+0x5f4>)
 81014a4:	4293      	cmp	r3, r2
 81014a6:	d054      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 81014a8:	687b      	ldr	r3, [r7, #4]
 81014aa:	681b      	ldr	r3, [r3, #0]
 81014ac:	4a44      	ldr	r2, [pc, #272]	@ (81015c0 <HAL_DMA_Abort+0x5f8>)
 81014ae:	4293      	cmp	r3, r2
 81014b0:	d04f      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 81014b2:	687b      	ldr	r3, [r7, #4]
 81014b4:	681b      	ldr	r3, [r3, #0]
 81014b6:	4a43      	ldr	r2, [pc, #268]	@ (81015c4 <HAL_DMA_Abort+0x5fc>)
 81014b8:	4293      	cmp	r3, r2
 81014ba:	d04a      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 81014bc:	687b      	ldr	r3, [r7, #4]
 81014be:	681b      	ldr	r3, [r3, #0]
 81014c0:	4a41      	ldr	r2, [pc, #260]	@ (81015c8 <HAL_DMA_Abort+0x600>)
 81014c2:	4293      	cmp	r3, r2
 81014c4:	d045      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 81014c6:	687b      	ldr	r3, [r7, #4]
 81014c8:	681b      	ldr	r3, [r3, #0]
 81014ca:	4a40      	ldr	r2, [pc, #256]	@ (81015cc <HAL_DMA_Abort+0x604>)
 81014cc:	4293      	cmp	r3, r2
 81014ce:	d040      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 81014d0:	687b      	ldr	r3, [r7, #4]
 81014d2:	681b      	ldr	r3, [r3, #0]
 81014d4:	4a3e      	ldr	r2, [pc, #248]	@ (81015d0 <HAL_DMA_Abort+0x608>)
 81014d6:	4293      	cmp	r3, r2
 81014d8:	d03b      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 81014da:	687b      	ldr	r3, [r7, #4]
 81014dc:	681b      	ldr	r3, [r3, #0]
 81014de:	4a3d      	ldr	r2, [pc, #244]	@ (81015d4 <HAL_DMA_Abort+0x60c>)
 81014e0:	4293      	cmp	r3, r2
 81014e2:	d036      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 81014e4:	687b      	ldr	r3, [r7, #4]
 81014e6:	681b      	ldr	r3, [r3, #0]
 81014e8:	4a3b      	ldr	r2, [pc, #236]	@ (81015d8 <HAL_DMA_Abort+0x610>)
 81014ea:	4293      	cmp	r3, r2
 81014ec:	d031      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 81014ee:	687b      	ldr	r3, [r7, #4]
 81014f0:	681b      	ldr	r3, [r3, #0]
 81014f2:	4a3a      	ldr	r2, [pc, #232]	@ (81015dc <HAL_DMA_Abort+0x614>)
 81014f4:	4293      	cmp	r3, r2
 81014f6:	d02c      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 81014f8:	687b      	ldr	r3, [r7, #4]
 81014fa:	681b      	ldr	r3, [r3, #0]
 81014fc:	4a38      	ldr	r2, [pc, #224]	@ (81015e0 <HAL_DMA_Abort+0x618>)
 81014fe:	4293      	cmp	r3, r2
 8101500:	d027      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 8101502:	687b      	ldr	r3, [r7, #4]
 8101504:	681b      	ldr	r3, [r3, #0]
 8101506:	4a37      	ldr	r2, [pc, #220]	@ (81015e4 <HAL_DMA_Abort+0x61c>)
 8101508:	4293      	cmp	r3, r2
 810150a:	d022      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 810150c:	687b      	ldr	r3, [r7, #4]
 810150e:	681b      	ldr	r3, [r3, #0]
 8101510:	4a35      	ldr	r2, [pc, #212]	@ (81015e8 <HAL_DMA_Abort+0x620>)
 8101512:	4293      	cmp	r3, r2
 8101514:	d01d      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 8101516:	687b      	ldr	r3, [r7, #4]
 8101518:	681b      	ldr	r3, [r3, #0]
 810151a:	4a34      	ldr	r2, [pc, #208]	@ (81015ec <HAL_DMA_Abort+0x624>)
 810151c:	4293      	cmp	r3, r2
 810151e:	d018      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 8101520:	687b      	ldr	r3, [r7, #4]
 8101522:	681b      	ldr	r3, [r3, #0]
 8101524:	4a32      	ldr	r2, [pc, #200]	@ (81015f0 <HAL_DMA_Abort+0x628>)
 8101526:	4293      	cmp	r3, r2
 8101528:	d013      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 810152a:	687b      	ldr	r3, [r7, #4]
 810152c:	681b      	ldr	r3, [r3, #0]
 810152e:	4a31      	ldr	r2, [pc, #196]	@ (81015f4 <HAL_DMA_Abort+0x62c>)
 8101530:	4293      	cmp	r3, r2
 8101532:	d00e      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 8101534:	687b      	ldr	r3, [r7, #4]
 8101536:	681b      	ldr	r3, [r3, #0]
 8101538:	4a2f      	ldr	r2, [pc, #188]	@ (81015f8 <HAL_DMA_Abort+0x630>)
 810153a:	4293      	cmp	r3, r2
 810153c:	d009      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 810153e:	687b      	ldr	r3, [r7, #4]
 8101540:	681b      	ldr	r3, [r3, #0]
 8101542:	4a2e      	ldr	r2, [pc, #184]	@ (81015fc <HAL_DMA_Abort+0x634>)
 8101544:	4293      	cmp	r3, r2
 8101546:	d004      	beq.n	8101552 <HAL_DMA_Abort+0x58a>
 8101548:	687b      	ldr	r3, [r7, #4]
 810154a:	681b      	ldr	r3, [r3, #0]
 810154c:	4a2c      	ldr	r2, [pc, #176]	@ (8101600 <HAL_DMA_Abort+0x638>)
 810154e:	4293      	cmp	r3, r2
 8101550:	d101      	bne.n	8101556 <HAL_DMA_Abort+0x58e>
 8101552:	2301      	movs	r3, #1
 8101554:	e000      	b.n	8101558 <HAL_DMA_Abort+0x590>
 8101556:	2300      	movs	r3, #0
 8101558:	2b00      	cmp	r3, #0
 810155a:	d015      	beq.n	8101588 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810155c:	687b      	ldr	r3, [r7, #4]
 810155e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101560:	687a      	ldr	r2, [r7, #4]
 8101562:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8101564:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8101566:	687b      	ldr	r3, [r7, #4]
 8101568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810156a:	2b00      	cmp	r3, #0
 810156c:	d00c      	beq.n	8101588 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810156e:	687b      	ldr	r3, [r7, #4]
 8101570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101572:	681a      	ldr	r2, [r3, #0]
 8101574:	687b      	ldr	r3, [r7, #4]
 8101576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101578:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810157c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810157e:	687b      	ldr	r3, [r7, #4]
 8101580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101582:	687a      	ldr	r2, [r7, #4]
 8101584:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8101586:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8101588:	687b      	ldr	r3, [r7, #4]
 810158a:	2201      	movs	r2, #1
 810158c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8101590:	687b      	ldr	r3, [r7, #4]
 8101592:	2200      	movs	r2, #0
 8101594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8101598:	2300      	movs	r3, #0
}
 810159a:	4618      	mov	r0, r3
 810159c:	3718      	adds	r7, #24
 810159e:	46bd      	mov	sp, r7
 81015a0:	bd80      	pop	{r7, pc}
 81015a2:	bf00      	nop
 81015a4:	40020010 	.word	0x40020010
 81015a8:	40020028 	.word	0x40020028
 81015ac:	40020040 	.word	0x40020040
 81015b0:	40020058 	.word	0x40020058
 81015b4:	40020070 	.word	0x40020070
 81015b8:	40020088 	.word	0x40020088
 81015bc:	400200a0 	.word	0x400200a0
 81015c0:	400200b8 	.word	0x400200b8
 81015c4:	40020410 	.word	0x40020410
 81015c8:	40020428 	.word	0x40020428
 81015cc:	40020440 	.word	0x40020440
 81015d0:	40020458 	.word	0x40020458
 81015d4:	40020470 	.word	0x40020470
 81015d8:	40020488 	.word	0x40020488
 81015dc:	400204a0 	.word	0x400204a0
 81015e0:	400204b8 	.word	0x400204b8
 81015e4:	58025408 	.word	0x58025408
 81015e8:	5802541c 	.word	0x5802541c
 81015ec:	58025430 	.word	0x58025430
 81015f0:	58025444 	.word	0x58025444
 81015f4:	58025458 	.word	0x58025458
 81015f8:	5802546c 	.word	0x5802546c
 81015fc:	58025480 	.word	0x58025480
 8101600:	58025494 	.word	0x58025494

08101604 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8101604:	b580      	push	{r7, lr}
 8101606:	b084      	sub	sp, #16
 8101608:	af00      	add	r7, sp, #0
 810160a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810160c:	687b      	ldr	r3, [r7, #4]
 810160e:	2b00      	cmp	r3, #0
 8101610:	d101      	bne.n	8101616 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8101612:	2301      	movs	r3, #1
 8101614:	e237      	b.n	8101a86 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8101616:	687b      	ldr	r3, [r7, #4]
 8101618:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 810161c:	b2db      	uxtb	r3, r3
 810161e:	2b02      	cmp	r3, #2
 8101620:	d004      	beq.n	810162c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8101622:	687b      	ldr	r3, [r7, #4]
 8101624:	2280      	movs	r2, #128	@ 0x80
 8101626:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8101628:	2301      	movs	r3, #1
 810162a:	e22c      	b.n	8101a86 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810162c:	687b      	ldr	r3, [r7, #4]
 810162e:	681b      	ldr	r3, [r3, #0]
 8101630:	4a5c      	ldr	r2, [pc, #368]	@ (81017a4 <HAL_DMA_Abort_IT+0x1a0>)
 8101632:	4293      	cmp	r3, r2
 8101634:	d04a      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 8101636:	687b      	ldr	r3, [r7, #4]
 8101638:	681b      	ldr	r3, [r3, #0]
 810163a:	4a5b      	ldr	r2, [pc, #364]	@ (81017a8 <HAL_DMA_Abort_IT+0x1a4>)
 810163c:	4293      	cmp	r3, r2
 810163e:	d045      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 8101640:	687b      	ldr	r3, [r7, #4]
 8101642:	681b      	ldr	r3, [r3, #0]
 8101644:	4a59      	ldr	r2, [pc, #356]	@ (81017ac <HAL_DMA_Abort_IT+0x1a8>)
 8101646:	4293      	cmp	r3, r2
 8101648:	d040      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 810164a:	687b      	ldr	r3, [r7, #4]
 810164c:	681b      	ldr	r3, [r3, #0]
 810164e:	4a58      	ldr	r2, [pc, #352]	@ (81017b0 <HAL_DMA_Abort_IT+0x1ac>)
 8101650:	4293      	cmp	r3, r2
 8101652:	d03b      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 8101654:	687b      	ldr	r3, [r7, #4]
 8101656:	681b      	ldr	r3, [r3, #0]
 8101658:	4a56      	ldr	r2, [pc, #344]	@ (81017b4 <HAL_DMA_Abort_IT+0x1b0>)
 810165a:	4293      	cmp	r3, r2
 810165c:	d036      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 810165e:	687b      	ldr	r3, [r7, #4]
 8101660:	681b      	ldr	r3, [r3, #0]
 8101662:	4a55      	ldr	r2, [pc, #340]	@ (81017b8 <HAL_DMA_Abort_IT+0x1b4>)
 8101664:	4293      	cmp	r3, r2
 8101666:	d031      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 8101668:	687b      	ldr	r3, [r7, #4]
 810166a:	681b      	ldr	r3, [r3, #0]
 810166c:	4a53      	ldr	r2, [pc, #332]	@ (81017bc <HAL_DMA_Abort_IT+0x1b8>)
 810166e:	4293      	cmp	r3, r2
 8101670:	d02c      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 8101672:	687b      	ldr	r3, [r7, #4]
 8101674:	681b      	ldr	r3, [r3, #0]
 8101676:	4a52      	ldr	r2, [pc, #328]	@ (81017c0 <HAL_DMA_Abort_IT+0x1bc>)
 8101678:	4293      	cmp	r3, r2
 810167a:	d027      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 810167c:	687b      	ldr	r3, [r7, #4]
 810167e:	681b      	ldr	r3, [r3, #0]
 8101680:	4a50      	ldr	r2, [pc, #320]	@ (81017c4 <HAL_DMA_Abort_IT+0x1c0>)
 8101682:	4293      	cmp	r3, r2
 8101684:	d022      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 8101686:	687b      	ldr	r3, [r7, #4]
 8101688:	681b      	ldr	r3, [r3, #0]
 810168a:	4a4f      	ldr	r2, [pc, #316]	@ (81017c8 <HAL_DMA_Abort_IT+0x1c4>)
 810168c:	4293      	cmp	r3, r2
 810168e:	d01d      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 8101690:	687b      	ldr	r3, [r7, #4]
 8101692:	681b      	ldr	r3, [r3, #0]
 8101694:	4a4d      	ldr	r2, [pc, #308]	@ (81017cc <HAL_DMA_Abort_IT+0x1c8>)
 8101696:	4293      	cmp	r3, r2
 8101698:	d018      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 810169a:	687b      	ldr	r3, [r7, #4]
 810169c:	681b      	ldr	r3, [r3, #0]
 810169e:	4a4c      	ldr	r2, [pc, #304]	@ (81017d0 <HAL_DMA_Abort_IT+0x1cc>)
 81016a0:	4293      	cmp	r3, r2
 81016a2:	d013      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 81016a4:	687b      	ldr	r3, [r7, #4]
 81016a6:	681b      	ldr	r3, [r3, #0]
 81016a8:	4a4a      	ldr	r2, [pc, #296]	@ (81017d4 <HAL_DMA_Abort_IT+0x1d0>)
 81016aa:	4293      	cmp	r3, r2
 81016ac:	d00e      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 81016ae:	687b      	ldr	r3, [r7, #4]
 81016b0:	681b      	ldr	r3, [r3, #0]
 81016b2:	4a49      	ldr	r2, [pc, #292]	@ (81017d8 <HAL_DMA_Abort_IT+0x1d4>)
 81016b4:	4293      	cmp	r3, r2
 81016b6:	d009      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 81016b8:	687b      	ldr	r3, [r7, #4]
 81016ba:	681b      	ldr	r3, [r3, #0]
 81016bc:	4a47      	ldr	r2, [pc, #284]	@ (81017dc <HAL_DMA_Abort_IT+0x1d8>)
 81016be:	4293      	cmp	r3, r2
 81016c0:	d004      	beq.n	81016cc <HAL_DMA_Abort_IT+0xc8>
 81016c2:	687b      	ldr	r3, [r7, #4]
 81016c4:	681b      	ldr	r3, [r3, #0]
 81016c6:	4a46      	ldr	r2, [pc, #280]	@ (81017e0 <HAL_DMA_Abort_IT+0x1dc>)
 81016c8:	4293      	cmp	r3, r2
 81016ca:	d101      	bne.n	81016d0 <HAL_DMA_Abort_IT+0xcc>
 81016cc:	2301      	movs	r3, #1
 81016ce:	e000      	b.n	81016d2 <HAL_DMA_Abort_IT+0xce>
 81016d0:	2300      	movs	r3, #0
 81016d2:	2b00      	cmp	r3, #0
 81016d4:	f000 8086 	beq.w	81017e4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81016d8:	687b      	ldr	r3, [r7, #4]
 81016da:	2204      	movs	r2, #4
 81016dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81016e0:	687b      	ldr	r3, [r7, #4]
 81016e2:	681b      	ldr	r3, [r3, #0]
 81016e4:	4a2f      	ldr	r2, [pc, #188]	@ (81017a4 <HAL_DMA_Abort_IT+0x1a0>)
 81016e6:	4293      	cmp	r3, r2
 81016e8:	d04a      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 81016ea:	687b      	ldr	r3, [r7, #4]
 81016ec:	681b      	ldr	r3, [r3, #0]
 81016ee:	4a2e      	ldr	r2, [pc, #184]	@ (81017a8 <HAL_DMA_Abort_IT+0x1a4>)
 81016f0:	4293      	cmp	r3, r2
 81016f2:	d045      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 81016f4:	687b      	ldr	r3, [r7, #4]
 81016f6:	681b      	ldr	r3, [r3, #0]
 81016f8:	4a2c      	ldr	r2, [pc, #176]	@ (81017ac <HAL_DMA_Abort_IT+0x1a8>)
 81016fa:	4293      	cmp	r3, r2
 81016fc:	d040      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 81016fe:	687b      	ldr	r3, [r7, #4]
 8101700:	681b      	ldr	r3, [r3, #0]
 8101702:	4a2b      	ldr	r2, [pc, #172]	@ (81017b0 <HAL_DMA_Abort_IT+0x1ac>)
 8101704:	4293      	cmp	r3, r2
 8101706:	d03b      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 8101708:	687b      	ldr	r3, [r7, #4]
 810170a:	681b      	ldr	r3, [r3, #0]
 810170c:	4a29      	ldr	r2, [pc, #164]	@ (81017b4 <HAL_DMA_Abort_IT+0x1b0>)
 810170e:	4293      	cmp	r3, r2
 8101710:	d036      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 8101712:	687b      	ldr	r3, [r7, #4]
 8101714:	681b      	ldr	r3, [r3, #0]
 8101716:	4a28      	ldr	r2, [pc, #160]	@ (81017b8 <HAL_DMA_Abort_IT+0x1b4>)
 8101718:	4293      	cmp	r3, r2
 810171a:	d031      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	681b      	ldr	r3, [r3, #0]
 8101720:	4a26      	ldr	r2, [pc, #152]	@ (81017bc <HAL_DMA_Abort_IT+0x1b8>)
 8101722:	4293      	cmp	r3, r2
 8101724:	d02c      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 8101726:	687b      	ldr	r3, [r7, #4]
 8101728:	681b      	ldr	r3, [r3, #0]
 810172a:	4a25      	ldr	r2, [pc, #148]	@ (81017c0 <HAL_DMA_Abort_IT+0x1bc>)
 810172c:	4293      	cmp	r3, r2
 810172e:	d027      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 8101730:	687b      	ldr	r3, [r7, #4]
 8101732:	681b      	ldr	r3, [r3, #0]
 8101734:	4a23      	ldr	r2, [pc, #140]	@ (81017c4 <HAL_DMA_Abort_IT+0x1c0>)
 8101736:	4293      	cmp	r3, r2
 8101738:	d022      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	681b      	ldr	r3, [r3, #0]
 810173e:	4a22      	ldr	r2, [pc, #136]	@ (81017c8 <HAL_DMA_Abort_IT+0x1c4>)
 8101740:	4293      	cmp	r3, r2
 8101742:	d01d      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 8101744:	687b      	ldr	r3, [r7, #4]
 8101746:	681b      	ldr	r3, [r3, #0]
 8101748:	4a20      	ldr	r2, [pc, #128]	@ (81017cc <HAL_DMA_Abort_IT+0x1c8>)
 810174a:	4293      	cmp	r3, r2
 810174c:	d018      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 810174e:	687b      	ldr	r3, [r7, #4]
 8101750:	681b      	ldr	r3, [r3, #0]
 8101752:	4a1f      	ldr	r2, [pc, #124]	@ (81017d0 <HAL_DMA_Abort_IT+0x1cc>)
 8101754:	4293      	cmp	r3, r2
 8101756:	d013      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 8101758:	687b      	ldr	r3, [r7, #4]
 810175a:	681b      	ldr	r3, [r3, #0]
 810175c:	4a1d      	ldr	r2, [pc, #116]	@ (81017d4 <HAL_DMA_Abort_IT+0x1d0>)
 810175e:	4293      	cmp	r3, r2
 8101760:	d00e      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 8101762:	687b      	ldr	r3, [r7, #4]
 8101764:	681b      	ldr	r3, [r3, #0]
 8101766:	4a1c      	ldr	r2, [pc, #112]	@ (81017d8 <HAL_DMA_Abort_IT+0x1d4>)
 8101768:	4293      	cmp	r3, r2
 810176a:	d009      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 810176c:	687b      	ldr	r3, [r7, #4]
 810176e:	681b      	ldr	r3, [r3, #0]
 8101770:	4a1a      	ldr	r2, [pc, #104]	@ (81017dc <HAL_DMA_Abort_IT+0x1d8>)
 8101772:	4293      	cmp	r3, r2
 8101774:	d004      	beq.n	8101780 <HAL_DMA_Abort_IT+0x17c>
 8101776:	687b      	ldr	r3, [r7, #4]
 8101778:	681b      	ldr	r3, [r3, #0]
 810177a:	4a19      	ldr	r2, [pc, #100]	@ (81017e0 <HAL_DMA_Abort_IT+0x1dc>)
 810177c:	4293      	cmp	r3, r2
 810177e:	d108      	bne.n	8101792 <HAL_DMA_Abort_IT+0x18e>
 8101780:	687b      	ldr	r3, [r7, #4]
 8101782:	681b      	ldr	r3, [r3, #0]
 8101784:	681a      	ldr	r2, [r3, #0]
 8101786:	687b      	ldr	r3, [r7, #4]
 8101788:	681b      	ldr	r3, [r3, #0]
 810178a:	f022 0201 	bic.w	r2, r2, #1
 810178e:	601a      	str	r2, [r3, #0]
 8101790:	e178      	b.n	8101a84 <HAL_DMA_Abort_IT+0x480>
 8101792:	687b      	ldr	r3, [r7, #4]
 8101794:	681b      	ldr	r3, [r3, #0]
 8101796:	681a      	ldr	r2, [r3, #0]
 8101798:	687b      	ldr	r3, [r7, #4]
 810179a:	681b      	ldr	r3, [r3, #0]
 810179c:	f022 0201 	bic.w	r2, r2, #1
 81017a0:	601a      	str	r2, [r3, #0]
 81017a2:	e16f      	b.n	8101a84 <HAL_DMA_Abort_IT+0x480>
 81017a4:	40020010 	.word	0x40020010
 81017a8:	40020028 	.word	0x40020028
 81017ac:	40020040 	.word	0x40020040
 81017b0:	40020058 	.word	0x40020058
 81017b4:	40020070 	.word	0x40020070
 81017b8:	40020088 	.word	0x40020088
 81017bc:	400200a0 	.word	0x400200a0
 81017c0:	400200b8 	.word	0x400200b8
 81017c4:	40020410 	.word	0x40020410
 81017c8:	40020428 	.word	0x40020428
 81017cc:	40020440 	.word	0x40020440
 81017d0:	40020458 	.word	0x40020458
 81017d4:	40020470 	.word	0x40020470
 81017d8:	40020488 	.word	0x40020488
 81017dc:	400204a0 	.word	0x400204a0
 81017e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81017e4:	687b      	ldr	r3, [r7, #4]
 81017e6:	681b      	ldr	r3, [r3, #0]
 81017e8:	681a      	ldr	r2, [r3, #0]
 81017ea:	687b      	ldr	r3, [r7, #4]
 81017ec:	681b      	ldr	r3, [r3, #0]
 81017ee:	f022 020e 	bic.w	r2, r2, #14
 81017f2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 81017f4:	687b      	ldr	r3, [r7, #4]
 81017f6:	681b      	ldr	r3, [r3, #0]
 81017f8:	4a6c      	ldr	r2, [pc, #432]	@ (81019ac <HAL_DMA_Abort_IT+0x3a8>)
 81017fa:	4293      	cmp	r3, r2
 81017fc:	d04a      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 81017fe:	687b      	ldr	r3, [r7, #4]
 8101800:	681b      	ldr	r3, [r3, #0]
 8101802:	4a6b      	ldr	r2, [pc, #428]	@ (81019b0 <HAL_DMA_Abort_IT+0x3ac>)
 8101804:	4293      	cmp	r3, r2
 8101806:	d045      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 8101808:	687b      	ldr	r3, [r7, #4]
 810180a:	681b      	ldr	r3, [r3, #0]
 810180c:	4a69      	ldr	r2, [pc, #420]	@ (81019b4 <HAL_DMA_Abort_IT+0x3b0>)
 810180e:	4293      	cmp	r3, r2
 8101810:	d040      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 8101812:	687b      	ldr	r3, [r7, #4]
 8101814:	681b      	ldr	r3, [r3, #0]
 8101816:	4a68      	ldr	r2, [pc, #416]	@ (81019b8 <HAL_DMA_Abort_IT+0x3b4>)
 8101818:	4293      	cmp	r3, r2
 810181a:	d03b      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 810181c:	687b      	ldr	r3, [r7, #4]
 810181e:	681b      	ldr	r3, [r3, #0]
 8101820:	4a66      	ldr	r2, [pc, #408]	@ (81019bc <HAL_DMA_Abort_IT+0x3b8>)
 8101822:	4293      	cmp	r3, r2
 8101824:	d036      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 8101826:	687b      	ldr	r3, [r7, #4]
 8101828:	681b      	ldr	r3, [r3, #0]
 810182a:	4a65      	ldr	r2, [pc, #404]	@ (81019c0 <HAL_DMA_Abort_IT+0x3bc>)
 810182c:	4293      	cmp	r3, r2
 810182e:	d031      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 8101830:	687b      	ldr	r3, [r7, #4]
 8101832:	681b      	ldr	r3, [r3, #0]
 8101834:	4a63      	ldr	r2, [pc, #396]	@ (81019c4 <HAL_DMA_Abort_IT+0x3c0>)
 8101836:	4293      	cmp	r3, r2
 8101838:	d02c      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 810183a:	687b      	ldr	r3, [r7, #4]
 810183c:	681b      	ldr	r3, [r3, #0]
 810183e:	4a62      	ldr	r2, [pc, #392]	@ (81019c8 <HAL_DMA_Abort_IT+0x3c4>)
 8101840:	4293      	cmp	r3, r2
 8101842:	d027      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 8101844:	687b      	ldr	r3, [r7, #4]
 8101846:	681b      	ldr	r3, [r3, #0]
 8101848:	4a60      	ldr	r2, [pc, #384]	@ (81019cc <HAL_DMA_Abort_IT+0x3c8>)
 810184a:	4293      	cmp	r3, r2
 810184c:	d022      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 810184e:	687b      	ldr	r3, [r7, #4]
 8101850:	681b      	ldr	r3, [r3, #0]
 8101852:	4a5f      	ldr	r2, [pc, #380]	@ (81019d0 <HAL_DMA_Abort_IT+0x3cc>)
 8101854:	4293      	cmp	r3, r2
 8101856:	d01d      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 8101858:	687b      	ldr	r3, [r7, #4]
 810185a:	681b      	ldr	r3, [r3, #0]
 810185c:	4a5d      	ldr	r2, [pc, #372]	@ (81019d4 <HAL_DMA_Abort_IT+0x3d0>)
 810185e:	4293      	cmp	r3, r2
 8101860:	d018      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 8101862:	687b      	ldr	r3, [r7, #4]
 8101864:	681b      	ldr	r3, [r3, #0]
 8101866:	4a5c      	ldr	r2, [pc, #368]	@ (81019d8 <HAL_DMA_Abort_IT+0x3d4>)
 8101868:	4293      	cmp	r3, r2
 810186a:	d013      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 810186c:	687b      	ldr	r3, [r7, #4]
 810186e:	681b      	ldr	r3, [r3, #0]
 8101870:	4a5a      	ldr	r2, [pc, #360]	@ (81019dc <HAL_DMA_Abort_IT+0x3d8>)
 8101872:	4293      	cmp	r3, r2
 8101874:	d00e      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 8101876:	687b      	ldr	r3, [r7, #4]
 8101878:	681b      	ldr	r3, [r3, #0]
 810187a:	4a59      	ldr	r2, [pc, #356]	@ (81019e0 <HAL_DMA_Abort_IT+0x3dc>)
 810187c:	4293      	cmp	r3, r2
 810187e:	d009      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 8101880:	687b      	ldr	r3, [r7, #4]
 8101882:	681b      	ldr	r3, [r3, #0]
 8101884:	4a57      	ldr	r2, [pc, #348]	@ (81019e4 <HAL_DMA_Abort_IT+0x3e0>)
 8101886:	4293      	cmp	r3, r2
 8101888:	d004      	beq.n	8101894 <HAL_DMA_Abort_IT+0x290>
 810188a:	687b      	ldr	r3, [r7, #4]
 810188c:	681b      	ldr	r3, [r3, #0]
 810188e:	4a56      	ldr	r2, [pc, #344]	@ (81019e8 <HAL_DMA_Abort_IT+0x3e4>)
 8101890:	4293      	cmp	r3, r2
 8101892:	d108      	bne.n	81018a6 <HAL_DMA_Abort_IT+0x2a2>
 8101894:	687b      	ldr	r3, [r7, #4]
 8101896:	681b      	ldr	r3, [r3, #0]
 8101898:	681a      	ldr	r2, [r3, #0]
 810189a:	687b      	ldr	r3, [r7, #4]
 810189c:	681b      	ldr	r3, [r3, #0]
 810189e:	f022 0201 	bic.w	r2, r2, #1
 81018a2:	601a      	str	r2, [r3, #0]
 81018a4:	e007      	b.n	81018b6 <HAL_DMA_Abort_IT+0x2b2>
 81018a6:	687b      	ldr	r3, [r7, #4]
 81018a8:	681b      	ldr	r3, [r3, #0]
 81018aa:	681a      	ldr	r2, [r3, #0]
 81018ac:	687b      	ldr	r3, [r7, #4]
 81018ae:	681b      	ldr	r3, [r3, #0]
 81018b0:	f022 0201 	bic.w	r2, r2, #1
 81018b4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81018b6:	687b      	ldr	r3, [r7, #4]
 81018b8:	681b      	ldr	r3, [r3, #0]
 81018ba:	4a3c      	ldr	r2, [pc, #240]	@ (81019ac <HAL_DMA_Abort_IT+0x3a8>)
 81018bc:	4293      	cmp	r3, r2
 81018be:	d072      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 81018c0:	687b      	ldr	r3, [r7, #4]
 81018c2:	681b      	ldr	r3, [r3, #0]
 81018c4:	4a3a      	ldr	r2, [pc, #232]	@ (81019b0 <HAL_DMA_Abort_IT+0x3ac>)
 81018c6:	4293      	cmp	r3, r2
 81018c8:	d06d      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 81018ca:	687b      	ldr	r3, [r7, #4]
 81018cc:	681b      	ldr	r3, [r3, #0]
 81018ce:	4a39      	ldr	r2, [pc, #228]	@ (81019b4 <HAL_DMA_Abort_IT+0x3b0>)
 81018d0:	4293      	cmp	r3, r2
 81018d2:	d068      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 81018d4:	687b      	ldr	r3, [r7, #4]
 81018d6:	681b      	ldr	r3, [r3, #0]
 81018d8:	4a37      	ldr	r2, [pc, #220]	@ (81019b8 <HAL_DMA_Abort_IT+0x3b4>)
 81018da:	4293      	cmp	r3, r2
 81018dc:	d063      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 81018de:	687b      	ldr	r3, [r7, #4]
 81018e0:	681b      	ldr	r3, [r3, #0]
 81018e2:	4a36      	ldr	r2, [pc, #216]	@ (81019bc <HAL_DMA_Abort_IT+0x3b8>)
 81018e4:	4293      	cmp	r3, r2
 81018e6:	d05e      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 81018e8:	687b      	ldr	r3, [r7, #4]
 81018ea:	681b      	ldr	r3, [r3, #0]
 81018ec:	4a34      	ldr	r2, [pc, #208]	@ (81019c0 <HAL_DMA_Abort_IT+0x3bc>)
 81018ee:	4293      	cmp	r3, r2
 81018f0:	d059      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	681b      	ldr	r3, [r3, #0]
 81018f6:	4a33      	ldr	r2, [pc, #204]	@ (81019c4 <HAL_DMA_Abort_IT+0x3c0>)
 81018f8:	4293      	cmp	r3, r2
 81018fa:	d054      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 81018fc:	687b      	ldr	r3, [r7, #4]
 81018fe:	681b      	ldr	r3, [r3, #0]
 8101900:	4a31      	ldr	r2, [pc, #196]	@ (81019c8 <HAL_DMA_Abort_IT+0x3c4>)
 8101902:	4293      	cmp	r3, r2
 8101904:	d04f      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 8101906:	687b      	ldr	r3, [r7, #4]
 8101908:	681b      	ldr	r3, [r3, #0]
 810190a:	4a30      	ldr	r2, [pc, #192]	@ (81019cc <HAL_DMA_Abort_IT+0x3c8>)
 810190c:	4293      	cmp	r3, r2
 810190e:	d04a      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 8101910:	687b      	ldr	r3, [r7, #4]
 8101912:	681b      	ldr	r3, [r3, #0]
 8101914:	4a2e      	ldr	r2, [pc, #184]	@ (81019d0 <HAL_DMA_Abort_IT+0x3cc>)
 8101916:	4293      	cmp	r3, r2
 8101918:	d045      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	681b      	ldr	r3, [r3, #0]
 810191e:	4a2d      	ldr	r2, [pc, #180]	@ (81019d4 <HAL_DMA_Abort_IT+0x3d0>)
 8101920:	4293      	cmp	r3, r2
 8101922:	d040      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 8101924:	687b      	ldr	r3, [r7, #4]
 8101926:	681b      	ldr	r3, [r3, #0]
 8101928:	4a2b      	ldr	r2, [pc, #172]	@ (81019d8 <HAL_DMA_Abort_IT+0x3d4>)
 810192a:	4293      	cmp	r3, r2
 810192c:	d03b      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 810192e:	687b      	ldr	r3, [r7, #4]
 8101930:	681b      	ldr	r3, [r3, #0]
 8101932:	4a2a      	ldr	r2, [pc, #168]	@ (81019dc <HAL_DMA_Abort_IT+0x3d8>)
 8101934:	4293      	cmp	r3, r2
 8101936:	d036      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 8101938:	687b      	ldr	r3, [r7, #4]
 810193a:	681b      	ldr	r3, [r3, #0]
 810193c:	4a28      	ldr	r2, [pc, #160]	@ (81019e0 <HAL_DMA_Abort_IT+0x3dc>)
 810193e:	4293      	cmp	r3, r2
 8101940:	d031      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 8101942:	687b      	ldr	r3, [r7, #4]
 8101944:	681b      	ldr	r3, [r3, #0]
 8101946:	4a27      	ldr	r2, [pc, #156]	@ (81019e4 <HAL_DMA_Abort_IT+0x3e0>)
 8101948:	4293      	cmp	r3, r2
 810194a:	d02c      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 810194c:	687b      	ldr	r3, [r7, #4]
 810194e:	681b      	ldr	r3, [r3, #0]
 8101950:	4a25      	ldr	r2, [pc, #148]	@ (81019e8 <HAL_DMA_Abort_IT+0x3e4>)
 8101952:	4293      	cmp	r3, r2
 8101954:	d027      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 8101956:	687b      	ldr	r3, [r7, #4]
 8101958:	681b      	ldr	r3, [r3, #0]
 810195a:	4a24      	ldr	r2, [pc, #144]	@ (81019ec <HAL_DMA_Abort_IT+0x3e8>)
 810195c:	4293      	cmp	r3, r2
 810195e:	d022      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	681b      	ldr	r3, [r3, #0]
 8101964:	4a22      	ldr	r2, [pc, #136]	@ (81019f0 <HAL_DMA_Abort_IT+0x3ec>)
 8101966:	4293      	cmp	r3, r2
 8101968:	d01d      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 810196a:	687b      	ldr	r3, [r7, #4]
 810196c:	681b      	ldr	r3, [r3, #0]
 810196e:	4a21      	ldr	r2, [pc, #132]	@ (81019f4 <HAL_DMA_Abort_IT+0x3f0>)
 8101970:	4293      	cmp	r3, r2
 8101972:	d018      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 8101974:	687b      	ldr	r3, [r7, #4]
 8101976:	681b      	ldr	r3, [r3, #0]
 8101978:	4a1f      	ldr	r2, [pc, #124]	@ (81019f8 <HAL_DMA_Abort_IT+0x3f4>)
 810197a:	4293      	cmp	r3, r2
 810197c:	d013      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 810197e:	687b      	ldr	r3, [r7, #4]
 8101980:	681b      	ldr	r3, [r3, #0]
 8101982:	4a1e      	ldr	r2, [pc, #120]	@ (81019fc <HAL_DMA_Abort_IT+0x3f8>)
 8101984:	4293      	cmp	r3, r2
 8101986:	d00e      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 8101988:	687b      	ldr	r3, [r7, #4]
 810198a:	681b      	ldr	r3, [r3, #0]
 810198c:	4a1c      	ldr	r2, [pc, #112]	@ (8101a00 <HAL_DMA_Abort_IT+0x3fc>)
 810198e:	4293      	cmp	r3, r2
 8101990:	d009      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 8101992:	687b      	ldr	r3, [r7, #4]
 8101994:	681b      	ldr	r3, [r3, #0]
 8101996:	4a1b      	ldr	r2, [pc, #108]	@ (8101a04 <HAL_DMA_Abort_IT+0x400>)
 8101998:	4293      	cmp	r3, r2
 810199a:	d004      	beq.n	81019a6 <HAL_DMA_Abort_IT+0x3a2>
 810199c:	687b      	ldr	r3, [r7, #4]
 810199e:	681b      	ldr	r3, [r3, #0]
 81019a0:	4a19      	ldr	r2, [pc, #100]	@ (8101a08 <HAL_DMA_Abort_IT+0x404>)
 81019a2:	4293      	cmp	r3, r2
 81019a4:	d132      	bne.n	8101a0c <HAL_DMA_Abort_IT+0x408>
 81019a6:	2301      	movs	r3, #1
 81019a8:	e031      	b.n	8101a0e <HAL_DMA_Abort_IT+0x40a>
 81019aa:	bf00      	nop
 81019ac:	40020010 	.word	0x40020010
 81019b0:	40020028 	.word	0x40020028
 81019b4:	40020040 	.word	0x40020040
 81019b8:	40020058 	.word	0x40020058
 81019bc:	40020070 	.word	0x40020070
 81019c0:	40020088 	.word	0x40020088
 81019c4:	400200a0 	.word	0x400200a0
 81019c8:	400200b8 	.word	0x400200b8
 81019cc:	40020410 	.word	0x40020410
 81019d0:	40020428 	.word	0x40020428
 81019d4:	40020440 	.word	0x40020440
 81019d8:	40020458 	.word	0x40020458
 81019dc:	40020470 	.word	0x40020470
 81019e0:	40020488 	.word	0x40020488
 81019e4:	400204a0 	.word	0x400204a0
 81019e8:	400204b8 	.word	0x400204b8
 81019ec:	58025408 	.word	0x58025408
 81019f0:	5802541c 	.word	0x5802541c
 81019f4:	58025430 	.word	0x58025430
 81019f8:	58025444 	.word	0x58025444
 81019fc:	58025458 	.word	0x58025458
 8101a00:	5802546c 	.word	0x5802546c
 8101a04:	58025480 	.word	0x58025480
 8101a08:	58025494 	.word	0x58025494
 8101a0c:	2300      	movs	r3, #0
 8101a0e:	2b00      	cmp	r3, #0
 8101a10:	d028      	beq.n	8101a64 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8101a12:	687b      	ldr	r3, [r7, #4]
 8101a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101a16:	681a      	ldr	r2, [r3, #0]
 8101a18:	687b      	ldr	r3, [r7, #4]
 8101a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101a1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8101a20:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101a26:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101a28:	687b      	ldr	r3, [r7, #4]
 8101a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101a2c:	f003 031f 	and.w	r3, r3, #31
 8101a30:	2201      	movs	r2, #1
 8101a32:	409a      	lsls	r2, r3
 8101a34:	68fb      	ldr	r3, [r7, #12]
 8101a36:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8101a38:	687b      	ldr	r3, [r7, #4]
 8101a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101a3c:	687a      	ldr	r2, [r7, #4]
 8101a3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8101a40:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8101a42:	687b      	ldr	r3, [r7, #4]
 8101a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101a46:	2b00      	cmp	r3, #0
 8101a48:	d00c      	beq.n	8101a64 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101a4e:	681a      	ldr	r2, [r3, #0]
 8101a50:	687b      	ldr	r3, [r7, #4]
 8101a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101a54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8101a58:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8101a5a:	687b      	ldr	r3, [r7, #4]
 8101a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101a5e:	687a      	ldr	r2, [r7, #4]
 8101a60:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8101a62:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8101a64:	687b      	ldr	r3, [r7, #4]
 8101a66:	2201      	movs	r2, #1
 8101a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8101a6c:	687b      	ldr	r3, [r7, #4]
 8101a6e:	2200      	movs	r2, #0
 8101a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101a78:	2b00      	cmp	r3, #0
 8101a7a:	d003      	beq.n	8101a84 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101a80:	6878      	ldr	r0, [r7, #4]
 8101a82:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8101a84:	2300      	movs	r3, #0
}
 8101a86:	4618      	mov	r0, r3
 8101a88:	3710      	adds	r7, #16
 8101a8a:	46bd      	mov	sp, r7
 8101a8c:	bd80      	pop	{r7, pc}
 8101a8e:	bf00      	nop

08101a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8101a90:	b480      	push	{r7}
 8101a92:	b089      	sub	sp, #36	@ 0x24
 8101a94:	af00      	add	r7, sp, #0
 8101a96:	6078      	str	r0, [r7, #4]
 8101a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101a9a:	2300      	movs	r3, #0
 8101a9c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101a9e:	4b89      	ldr	r3, [pc, #548]	@ (8101cc4 <HAL_GPIO_Init+0x234>)
 8101aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101aa2:	e194      	b.n	8101dce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101aa4:	683b      	ldr	r3, [r7, #0]
 8101aa6:	681a      	ldr	r2, [r3, #0]
 8101aa8:	2101      	movs	r1, #1
 8101aaa:	69fb      	ldr	r3, [r7, #28]
 8101aac:	fa01 f303 	lsl.w	r3, r1, r3
 8101ab0:	4013      	ands	r3, r2
 8101ab2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101ab4:	693b      	ldr	r3, [r7, #16]
 8101ab6:	2b00      	cmp	r3, #0
 8101ab8:	f000 8186 	beq.w	8101dc8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101abc:	683b      	ldr	r3, [r7, #0]
 8101abe:	685b      	ldr	r3, [r3, #4]
 8101ac0:	f003 0303 	and.w	r3, r3, #3
 8101ac4:	2b01      	cmp	r3, #1
 8101ac6:	d005      	beq.n	8101ad4 <HAL_GPIO_Init+0x44>
 8101ac8:	683b      	ldr	r3, [r7, #0]
 8101aca:	685b      	ldr	r3, [r3, #4]
 8101acc:	f003 0303 	and.w	r3, r3, #3
 8101ad0:	2b02      	cmp	r3, #2
 8101ad2:	d130      	bne.n	8101b36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101ad4:	687b      	ldr	r3, [r7, #4]
 8101ad6:	689b      	ldr	r3, [r3, #8]
 8101ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101ada:	69fb      	ldr	r3, [r7, #28]
 8101adc:	005b      	lsls	r3, r3, #1
 8101ade:	2203      	movs	r2, #3
 8101ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8101ae4:	43db      	mvns	r3, r3
 8101ae6:	69ba      	ldr	r2, [r7, #24]
 8101ae8:	4013      	ands	r3, r2
 8101aea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101aec:	683b      	ldr	r3, [r7, #0]
 8101aee:	68da      	ldr	r2, [r3, #12]
 8101af0:	69fb      	ldr	r3, [r7, #28]
 8101af2:	005b      	lsls	r3, r3, #1
 8101af4:	fa02 f303 	lsl.w	r3, r2, r3
 8101af8:	69ba      	ldr	r2, [r7, #24]
 8101afa:	4313      	orrs	r3, r2
 8101afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	69ba      	ldr	r2, [r7, #24]
 8101b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101b04:	687b      	ldr	r3, [r7, #4]
 8101b06:	685b      	ldr	r3, [r3, #4]
 8101b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101b0a:	2201      	movs	r2, #1
 8101b0c:	69fb      	ldr	r3, [r7, #28]
 8101b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8101b12:	43db      	mvns	r3, r3
 8101b14:	69ba      	ldr	r2, [r7, #24]
 8101b16:	4013      	ands	r3, r2
 8101b18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101b1a:	683b      	ldr	r3, [r7, #0]
 8101b1c:	685b      	ldr	r3, [r3, #4]
 8101b1e:	091b      	lsrs	r3, r3, #4
 8101b20:	f003 0201 	and.w	r2, r3, #1
 8101b24:	69fb      	ldr	r3, [r7, #28]
 8101b26:	fa02 f303 	lsl.w	r3, r2, r3
 8101b2a:	69ba      	ldr	r2, [r7, #24]
 8101b2c:	4313      	orrs	r3, r2
 8101b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101b30:	687b      	ldr	r3, [r7, #4]
 8101b32:	69ba      	ldr	r2, [r7, #24]
 8101b34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101b36:	683b      	ldr	r3, [r7, #0]
 8101b38:	685b      	ldr	r3, [r3, #4]
 8101b3a:	f003 0303 	and.w	r3, r3, #3
 8101b3e:	2b03      	cmp	r3, #3
 8101b40:	d017      	beq.n	8101b72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101b42:	687b      	ldr	r3, [r7, #4]
 8101b44:	68db      	ldr	r3, [r3, #12]
 8101b46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101b48:	69fb      	ldr	r3, [r7, #28]
 8101b4a:	005b      	lsls	r3, r3, #1
 8101b4c:	2203      	movs	r2, #3
 8101b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8101b52:	43db      	mvns	r3, r3
 8101b54:	69ba      	ldr	r2, [r7, #24]
 8101b56:	4013      	ands	r3, r2
 8101b58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101b5a:	683b      	ldr	r3, [r7, #0]
 8101b5c:	689a      	ldr	r2, [r3, #8]
 8101b5e:	69fb      	ldr	r3, [r7, #28]
 8101b60:	005b      	lsls	r3, r3, #1
 8101b62:	fa02 f303 	lsl.w	r3, r2, r3
 8101b66:	69ba      	ldr	r2, [r7, #24]
 8101b68:	4313      	orrs	r3, r2
 8101b6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	69ba      	ldr	r2, [r7, #24]
 8101b70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101b72:	683b      	ldr	r3, [r7, #0]
 8101b74:	685b      	ldr	r3, [r3, #4]
 8101b76:	f003 0303 	and.w	r3, r3, #3
 8101b7a:	2b02      	cmp	r3, #2
 8101b7c:	d123      	bne.n	8101bc6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101b7e:	69fb      	ldr	r3, [r7, #28]
 8101b80:	08da      	lsrs	r2, r3, #3
 8101b82:	687b      	ldr	r3, [r7, #4]
 8101b84:	3208      	adds	r2, #8
 8101b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101b8c:	69fb      	ldr	r3, [r7, #28]
 8101b8e:	f003 0307 	and.w	r3, r3, #7
 8101b92:	009b      	lsls	r3, r3, #2
 8101b94:	220f      	movs	r2, #15
 8101b96:	fa02 f303 	lsl.w	r3, r2, r3
 8101b9a:	43db      	mvns	r3, r3
 8101b9c:	69ba      	ldr	r2, [r7, #24]
 8101b9e:	4013      	ands	r3, r2
 8101ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101ba2:	683b      	ldr	r3, [r7, #0]
 8101ba4:	691a      	ldr	r2, [r3, #16]
 8101ba6:	69fb      	ldr	r3, [r7, #28]
 8101ba8:	f003 0307 	and.w	r3, r3, #7
 8101bac:	009b      	lsls	r3, r3, #2
 8101bae:	fa02 f303 	lsl.w	r3, r2, r3
 8101bb2:	69ba      	ldr	r2, [r7, #24]
 8101bb4:	4313      	orrs	r3, r2
 8101bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101bb8:	69fb      	ldr	r3, [r7, #28]
 8101bba:	08da      	lsrs	r2, r3, #3
 8101bbc:	687b      	ldr	r3, [r7, #4]
 8101bbe:	3208      	adds	r2, #8
 8101bc0:	69b9      	ldr	r1, [r7, #24]
 8101bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101bc6:	687b      	ldr	r3, [r7, #4]
 8101bc8:	681b      	ldr	r3, [r3, #0]
 8101bca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101bcc:	69fb      	ldr	r3, [r7, #28]
 8101bce:	005b      	lsls	r3, r3, #1
 8101bd0:	2203      	movs	r2, #3
 8101bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8101bd6:	43db      	mvns	r3, r3
 8101bd8:	69ba      	ldr	r2, [r7, #24]
 8101bda:	4013      	ands	r3, r2
 8101bdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101bde:	683b      	ldr	r3, [r7, #0]
 8101be0:	685b      	ldr	r3, [r3, #4]
 8101be2:	f003 0203 	and.w	r2, r3, #3
 8101be6:	69fb      	ldr	r3, [r7, #28]
 8101be8:	005b      	lsls	r3, r3, #1
 8101bea:	fa02 f303 	lsl.w	r3, r2, r3
 8101bee:	69ba      	ldr	r2, [r7, #24]
 8101bf0:	4313      	orrs	r3, r2
 8101bf2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	69ba      	ldr	r2, [r7, #24]
 8101bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101bfa:	683b      	ldr	r3, [r7, #0]
 8101bfc:	685b      	ldr	r3, [r3, #4]
 8101bfe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8101c02:	2b00      	cmp	r3, #0
 8101c04:	f000 80e0 	beq.w	8101dc8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101c08:	4b2f      	ldr	r3, [pc, #188]	@ (8101cc8 <HAL_GPIO_Init+0x238>)
 8101c0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8101cc8 <HAL_GPIO_Init+0x238>)
 8101c10:	f043 0302 	orr.w	r3, r3, #2
 8101c14:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101c18:	4b2b      	ldr	r3, [pc, #172]	@ (8101cc8 <HAL_GPIO_Init+0x238>)
 8101c1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101c1e:	f003 0302 	and.w	r3, r3, #2
 8101c22:	60fb      	str	r3, [r7, #12]
 8101c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101c26:	4a29      	ldr	r2, [pc, #164]	@ (8101ccc <HAL_GPIO_Init+0x23c>)
 8101c28:	69fb      	ldr	r3, [r7, #28]
 8101c2a:	089b      	lsrs	r3, r3, #2
 8101c2c:	3302      	adds	r3, #2
 8101c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101c34:	69fb      	ldr	r3, [r7, #28]
 8101c36:	f003 0303 	and.w	r3, r3, #3
 8101c3a:	009b      	lsls	r3, r3, #2
 8101c3c:	220f      	movs	r2, #15
 8101c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8101c42:	43db      	mvns	r3, r3
 8101c44:	69ba      	ldr	r2, [r7, #24]
 8101c46:	4013      	ands	r3, r2
 8101c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101c4a:	687b      	ldr	r3, [r7, #4]
 8101c4c:	4a20      	ldr	r2, [pc, #128]	@ (8101cd0 <HAL_GPIO_Init+0x240>)
 8101c4e:	4293      	cmp	r3, r2
 8101c50:	d052      	beq.n	8101cf8 <HAL_GPIO_Init+0x268>
 8101c52:	687b      	ldr	r3, [r7, #4]
 8101c54:	4a1f      	ldr	r2, [pc, #124]	@ (8101cd4 <HAL_GPIO_Init+0x244>)
 8101c56:	4293      	cmp	r3, r2
 8101c58:	d031      	beq.n	8101cbe <HAL_GPIO_Init+0x22e>
 8101c5a:	687b      	ldr	r3, [r7, #4]
 8101c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8101cd8 <HAL_GPIO_Init+0x248>)
 8101c5e:	4293      	cmp	r3, r2
 8101c60:	d02b      	beq.n	8101cba <HAL_GPIO_Init+0x22a>
 8101c62:	687b      	ldr	r3, [r7, #4]
 8101c64:	4a1d      	ldr	r2, [pc, #116]	@ (8101cdc <HAL_GPIO_Init+0x24c>)
 8101c66:	4293      	cmp	r3, r2
 8101c68:	d025      	beq.n	8101cb6 <HAL_GPIO_Init+0x226>
 8101c6a:	687b      	ldr	r3, [r7, #4]
 8101c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8101ce0 <HAL_GPIO_Init+0x250>)
 8101c6e:	4293      	cmp	r3, r2
 8101c70:	d01f      	beq.n	8101cb2 <HAL_GPIO_Init+0x222>
 8101c72:	687b      	ldr	r3, [r7, #4]
 8101c74:	4a1b      	ldr	r2, [pc, #108]	@ (8101ce4 <HAL_GPIO_Init+0x254>)
 8101c76:	4293      	cmp	r3, r2
 8101c78:	d019      	beq.n	8101cae <HAL_GPIO_Init+0x21e>
 8101c7a:	687b      	ldr	r3, [r7, #4]
 8101c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8101ce8 <HAL_GPIO_Init+0x258>)
 8101c7e:	4293      	cmp	r3, r2
 8101c80:	d013      	beq.n	8101caa <HAL_GPIO_Init+0x21a>
 8101c82:	687b      	ldr	r3, [r7, #4]
 8101c84:	4a19      	ldr	r2, [pc, #100]	@ (8101cec <HAL_GPIO_Init+0x25c>)
 8101c86:	4293      	cmp	r3, r2
 8101c88:	d00d      	beq.n	8101ca6 <HAL_GPIO_Init+0x216>
 8101c8a:	687b      	ldr	r3, [r7, #4]
 8101c8c:	4a18      	ldr	r2, [pc, #96]	@ (8101cf0 <HAL_GPIO_Init+0x260>)
 8101c8e:	4293      	cmp	r3, r2
 8101c90:	d007      	beq.n	8101ca2 <HAL_GPIO_Init+0x212>
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	4a17      	ldr	r2, [pc, #92]	@ (8101cf4 <HAL_GPIO_Init+0x264>)
 8101c96:	4293      	cmp	r3, r2
 8101c98:	d101      	bne.n	8101c9e <HAL_GPIO_Init+0x20e>
 8101c9a:	2309      	movs	r3, #9
 8101c9c:	e02d      	b.n	8101cfa <HAL_GPIO_Init+0x26a>
 8101c9e:	230a      	movs	r3, #10
 8101ca0:	e02b      	b.n	8101cfa <HAL_GPIO_Init+0x26a>
 8101ca2:	2308      	movs	r3, #8
 8101ca4:	e029      	b.n	8101cfa <HAL_GPIO_Init+0x26a>
 8101ca6:	2307      	movs	r3, #7
 8101ca8:	e027      	b.n	8101cfa <HAL_GPIO_Init+0x26a>
 8101caa:	2306      	movs	r3, #6
 8101cac:	e025      	b.n	8101cfa <HAL_GPIO_Init+0x26a>
 8101cae:	2305      	movs	r3, #5
 8101cb0:	e023      	b.n	8101cfa <HAL_GPIO_Init+0x26a>
 8101cb2:	2304      	movs	r3, #4
 8101cb4:	e021      	b.n	8101cfa <HAL_GPIO_Init+0x26a>
 8101cb6:	2303      	movs	r3, #3
 8101cb8:	e01f      	b.n	8101cfa <HAL_GPIO_Init+0x26a>
 8101cba:	2302      	movs	r3, #2
 8101cbc:	e01d      	b.n	8101cfa <HAL_GPIO_Init+0x26a>
 8101cbe:	2301      	movs	r3, #1
 8101cc0:	e01b      	b.n	8101cfa <HAL_GPIO_Init+0x26a>
 8101cc2:	bf00      	nop
 8101cc4:	580000c0 	.word	0x580000c0
 8101cc8:	58024400 	.word	0x58024400
 8101ccc:	58000400 	.word	0x58000400
 8101cd0:	58020000 	.word	0x58020000
 8101cd4:	58020400 	.word	0x58020400
 8101cd8:	58020800 	.word	0x58020800
 8101cdc:	58020c00 	.word	0x58020c00
 8101ce0:	58021000 	.word	0x58021000
 8101ce4:	58021400 	.word	0x58021400
 8101ce8:	58021800 	.word	0x58021800
 8101cec:	58021c00 	.word	0x58021c00
 8101cf0:	58022000 	.word	0x58022000
 8101cf4:	58022400 	.word	0x58022400
 8101cf8:	2300      	movs	r3, #0
 8101cfa:	69fa      	ldr	r2, [r7, #28]
 8101cfc:	f002 0203 	and.w	r2, r2, #3
 8101d00:	0092      	lsls	r2, r2, #2
 8101d02:	4093      	lsls	r3, r2
 8101d04:	69ba      	ldr	r2, [r7, #24]
 8101d06:	4313      	orrs	r3, r2
 8101d08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101d0a:	4938      	ldr	r1, [pc, #224]	@ (8101dec <HAL_GPIO_Init+0x35c>)
 8101d0c:	69fb      	ldr	r3, [r7, #28]
 8101d0e:	089b      	lsrs	r3, r3, #2
 8101d10:	3302      	adds	r3, #2
 8101d12:	69ba      	ldr	r2, [r7, #24]
 8101d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101d1c:	681b      	ldr	r3, [r3, #0]
 8101d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101d20:	693b      	ldr	r3, [r7, #16]
 8101d22:	43db      	mvns	r3, r3
 8101d24:	69ba      	ldr	r2, [r7, #24]
 8101d26:	4013      	ands	r3, r2
 8101d28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101d2a:	683b      	ldr	r3, [r7, #0]
 8101d2c:	685b      	ldr	r3, [r3, #4]
 8101d2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101d32:	2b00      	cmp	r3, #0
 8101d34:	d003      	beq.n	8101d3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101d36:	69ba      	ldr	r2, [r7, #24]
 8101d38:	693b      	ldr	r3, [r7, #16]
 8101d3a:	4313      	orrs	r3, r2
 8101d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101d3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101d42:	69bb      	ldr	r3, [r7, #24]
 8101d44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101d4a:	685b      	ldr	r3, [r3, #4]
 8101d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101d4e:	693b      	ldr	r3, [r7, #16]
 8101d50:	43db      	mvns	r3, r3
 8101d52:	69ba      	ldr	r2, [r7, #24]
 8101d54:	4013      	ands	r3, r2
 8101d56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101d58:	683b      	ldr	r3, [r7, #0]
 8101d5a:	685b      	ldr	r3, [r3, #4]
 8101d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8101d60:	2b00      	cmp	r3, #0
 8101d62:	d003      	beq.n	8101d6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101d64:	69ba      	ldr	r2, [r7, #24]
 8101d66:	693b      	ldr	r3, [r7, #16]
 8101d68:	4313      	orrs	r3, r2
 8101d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101d6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101d70:	69bb      	ldr	r3, [r7, #24]
 8101d72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101d74:	697b      	ldr	r3, [r7, #20]
 8101d76:	685b      	ldr	r3, [r3, #4]
 8101d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101d7a:	693b      	ldr	r3, [r7, #16]
 8101d7c:	43db      	mvns	r3, r3
 8101d7e:	69ba      	ldr	r2, [r7, #24]
 8101d80:	4013      	ands	r3, r2
 8101d82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101d84:	683b      	ldr	r3, [r7, #0]
 8101d86:	685b      	ldr	r3, [r3, #4]
 8101d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101d8c:	2b00      	cmp	r3, #0
 8101d8e:	d003      	beq.n	8101d98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101d90:	69ba      	ldr	r2, [r7, #24]
 8101d92:	693b      	ldr	r3, [r7, #16]
 8101d94:	4313      	orrs	r3, r2
 8101d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101d98:	697b      	ldr	r3, [r7, #20]
 8101d9a:	69ba      	ldr	r2, [r7, #24]
 8101d9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101d9e:	697b      	ldr	r3, [r7, #20]
 8101da0:	681b      	ldr	r3, [r3, #0]
 8101da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101da4:	693b      	ldr	r3, [r7, #16]
 8101da6:	43db      	mvns	r3, r3
 8101da8:	69ba      	ldr	r2, [r7, #24]
 8101daa:	4013      	ands	r3, r2
 8101dac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101dae:	683b      	ldr	r3, [r7, #0]
 8101db0:	685b      	ldr	r3, [r3, #4]
 8101db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101db6:	2b00      	cmp	r3, #0
 8101db8:	d003      	beq.n	8101dc2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101dba:	69ba      	ldr	r2, [r7, #24]
 8101dbc:	693b      	ldr	r3, [r7, #16]
 8101dbe:	4313      	orrs	r3, r2
 8101dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101dc2:	697b      	ldr	r3, [r7, #20]
 8101dc4:	69ba      	ldr	r2, [r7, #24]
 8101dc6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101dc8:	69fb      	ldr	r3, [r7, #28]
 8101dca:	3301      	adds	r3, #1
 8101dcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101dce:	683b      	ldr	r3, [r7, #0]
 8101dd0:	681a      	ldr	r2, [r3, #0]
 8101dd2:	69fb      	ldr	r3, [r7, #28]
 8101dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8101dd8:	2b00      	cmp	r3, #0
 8101dda:	f47f ae63 	bne.w	8101aa4 <HAL_GPIO_Init+0x14>
  }
}
 8101dde:	bf00      	nop
 8101de0:	bf00      	nop
 8101de2:	3724      	adds	r7, #36	@ 0x24
 8101de4:	46bd      	mov	sp, r7
 8101de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dea:	4770      	bx	lr
 8101dec:	58000400 	.word	0x58000400

08101df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101df0:	b480      	push	{r7}
 8101df2:	b083      	sub	sp, #12
 8101df4:	af00      	add	r7, sp, #0
 8101df6:	6078      	str	r0, [r7, #4]
 8101df8:	460b      	mov	r3, r1
 8101dfa:	807b      	strh	r3, [r7, #2]
 8101dfc:	4613      	mov	r3, r2
 8101dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101e00:	787b      	ldrb	r3, [r7, #1]
 8101e02:	2b00      	cmp	r3, #0
 8101e04:	d003      	beq.n	8101e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101e06:	887a      	ldrh	r2, [r7, #2]
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101e0c:	e003      	b.n	8101e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101e0e:	887b      	ldrh	r3, [r7, #2]
 8101e10:	041a      	lsls	r2, r3, #16
 8101e12:	687b      	ldr	r3, [r7, #4]
 8101e14:	619a      	str	r2, [r3, #24]
}
 8101e16:	bf00      	nop
 8101e18:	370c      	adds	r7, #12
 8101e1a:	46bd      	mov	sp, r7
 8101e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e20:	4770      	bx	lr

08101e22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101e22:	b480      	push	{r7}
 8101e24:	b085      	sub	sp, #20
 8101e26:	af00      	add	r7, sp, #0
 8101e28:	6078      	str	r0, [r7, #4]
 8101e2a:	460b      	mov	r3, r1
 8101e2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8101e2e:	687b      	ldr	r3, [r7, #4]
 8101e30:	695b      	ldr	r3, [r3, #20]
 8101e32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8101e34:	887a      	ldrh	r2, [r7, #2]
 8101e36:	68fb      	ldr	r3, [r7, #12]
 8101e38:	4013      	ands	r3, r2
 8101e3a:	041a      	lsls	r2, r3, #16
 8101e3c:	68fb      	ldr	r3, [r7, #12]
 8101e3e:	43d9      	mvns	r1, r3
 8101e40:	887b      	ldrh	r3, [r7, #2]
 8101e42:	400b      	ands	r3, r1
 8101e44:	431a      	orrs	r2, r3
 8101e46:	687b      	ldr	r3, [r7, #4]
 8101e48:	619a      	str	r2, [r3, #24]
}
 8101e4a:	bf00      	nop
 8101e4c:	3714      	adds	r7, #20
 8101e4e:	46bd      	mov	sp, r7
 8101e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e54:	4770      	bx	lr
	...

08101e58 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101e58:	b480      	push	{r7}
 8101e5a:	b083      	sub	sp, #12
 8101e5c:	af00      	add	r7, sp, #0
 8101e5e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101e60:	4b05      	ldr	r3, [pc, #20]	@ (8101e78 <HAL_HSEM_ActivateNotification+0x20>)
 8101e62:	681a      	ldr	r2, [r3, #0]
 8101e64:	4904      	ldr	r1, [pc, #16]	@ (8101e78 <HAL_HSEM_ActivateNotification+0x20>)
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	4313      	orrs	r3, r2
 8101e6a:	600b      	str	r3, [r1, #0]
#endif
}
 8101e6c:	bf00      	nop
 8101e6e:	370c      	adds	r7, #12
 8101e70:	46bd      	mov	sp, r7
 8101e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e76:	4770      	bx	lr
 8101e78:	58026510 	.word	0x58026510

08101e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101e7c:	b580      	push	{r7, lr}
 8101e7e:	b082      	sub	sp, #8
 8101e80:	af00      	add	r7, sp, #0
 8101e82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	2b00      	cmp	r3, #0
 8101e88:	d101      	bne.n	8101e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8101e8a:	2301      	movs	r3, #1
 8101e8c:	e08d      	b.n	8101faa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8101e94:	b2db      	uxtb	r3, r3
 8101e96:	2b00      	cmp	r3, #0
 8101e98:	d106      	bne.n	8101ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8101e9a:	687b      	ldr	r3, [r7, #4]
 8101e9c:	2200      	movs	r2, #0
 8101e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8101ea2:	6878      	ldr	r0, [r7, #4]
 8101ea4:	f7fe fd82 	bl	81009ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	2224      	movs	r2, #36	@ 0x24
 8101eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	681b      	ldr	r3, [r3, #0]
 8101eb4:	681a      	ldr	r2, [r3, #0]
 8101eb6:	687b      	ldr	r3, [r7, #4]
 8101eb8:	681b      	ldr	r3, [r3, #0]
 8101eba:	f022 0201 	bic.w	r2, r2, #1
 8101ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	685a      	ldr	r2, [r3, #4]
 8101ec4:	687b      	ldr	r3, [r7, #4]
 8101ec6:	681b      	ldr	r3, [r3, #0]
 8101ec8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8101ecc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	681b      	ldr	r3, [r3, #0]
 8101ed2:	689a      	ldr	r2, [r3, #8]
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	681b      	ldr	r3, [r3, #0]
 8101ed8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8101edc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	68db      	ldr	r3, [r3, #12]
 8101ee2:	2b01      	cmp	r3, #1
 8101ee4:	d107      	bne.n	8101ef6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8101ee6:	687b      	ldr	r3, [r7, #4]
 8101ee8:	689a      	ldr	r2, [r3, #8]
 8101eea:	687b      	ldr	r3, [r7, #4]
 8101eec:	681b      	ldr	r3, [r3, #0]
 8101eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8101ef2:	609a      	str	r2, [r3, #8]
 8101ef4:	e006      	b.n	8101f04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	689a      	ldr	r2, [r3, #8]
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	681b      	ldr	r3, [r3, #0]
 8101efe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8101f02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	68db      	ldr	r3, [r3, #12]
 8101f08:	2b02      	cmp	r3, #2
 8101f0a:	d108      	bne.n	8101f1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	681b      	ldr	r3, [r3, #0]
 8101f10:	685a      	ldr	r2, [r3, #4]
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	681b      	ldr	r3, [r3, #0]
 8101f16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8101f1a:	605a      	str	r2, [r3, #4]
 8101f1c:	e007      	b.n	8101f2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	681b      	ldr	r3, [r3, #0]
 8101f22:	685a      	ldr	r2, [r3, #4]
 8101f24:	687b      	ldr	r3, [r7, #4]
 8101f26:	681b      	ldr	r3, [r3, #0]
 8101f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8101f2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8101f2e:	687b      	ldr	r3, [r7, #4]
 8101f30:	681b      	ldr	r3, [r3, #0]
 8101f32:	685b      	ldr	r3, [r3, #4]
 8101f34:	687a      	ldr	r2, [r7, #4]
 8101f36:	6812      	ldr	r2, [r2, #0]
 8101f38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101f3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101f40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8101f42:	687b      	ldr	r3, [r7, #4]
 8101f44:	681b      	ldr	r3, [r3, #0]
 8101f46:	68da      	ldr	r2, [r3, #12]
 8101f48:	687b      	ldr	r3, [r7, #4]
 8101f4a:	681b      	ldr	r3, [r3, #0]
 8101f4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8101f50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8101f52:	687b      	ldr	r3, [r7, #4]
 8101f54:	691a      	ldr	r2, [r3, #16]
 8101f56:	687b      	ldr	r3, [r7, #4]
 8101f58:	695b      	ldr	r3, [r3, #20]
 8101f5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8101f5e:	687b      	ldr	r3, [r7, #4]
 8101f60:	699b      	ldr	r3, [r3, #24]
 8101f62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	681b      	ldr	r3, [r3, #0]
 8101f68:	430a      	orrs	r2, r1
 8101f6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	69d9      	ldr	r1, [r3, #28]
 8101f70:	687b      	ldr	r3, [r7, #4]
 8101f72:	6a1a      	ldr	r2, [r3, #32]
 8101f74:	687b      	ldr	r3, [r7, #4]
 8101f76:	681b      	ldr	r3, [r3, #0]
 8101f78:	430a      	orrs	r2, r1
 8101f7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	681b      	ldr	r3, [r3, #0]
 8101f80:	681a      	ldr	r2, [r3, #0]
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	681b      	ldr	r3, [r3, #0]
 8101f86:	f042 0201 	orr.w	r2, r2, #1
 8101f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	2200      	movs	r2, #0
 8101f90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	2220      	movs	r2, #32
 8101f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	2200      	movs	r2, #0
 8101f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8101fa0:	687b      	ldr	r3, [r7, #4]
 8101fa2:	2200      	movs	r2, #0
 8101fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8101fa8:	2300      	movs	r3, #0
}
 8101faa:	4618      	mov	r0, r3
 8101fac:	3708      	adds	r7, #8
 8101fae:	46bd      	mov	sp, r7
 8101fb0:	bd80      	pop	{r7, pc}

08101fb2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8101fb2:	b480      	push	{r7}
 8101fb4:	b083      	sub	sp, #12
 8101fb6:	af00      	add	r7, sp, #0
 8101fb8:	6078      	str	r0, [r7, #4]
 8101fba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8101fc2:	b2db      	uxtb	r3, r3
 8101fc4:	2b20      	cmp	r3, #32
 8101fc6:	d138      	bne.n	810203a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8101fce:	2b01      	cmp	r3, #1
 8101fd0:	d101      	bne.n	8101fd6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8101fd2:	2302      	movs	r3, #2
 8101fd4:	e032      	b.n	810203c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	2201      	movs	r2, #1
 8101fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	2224      	movs	r2, #36	@ 0x24
 8101fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	681b      	ldr	r3, [r3, #0]
 8101fea:	681a      	ldr	r2, [r3, #0]
 8101fec:	687b      	ldr	r3, [r7, #4]
 8101fee:	681b      	ldr	r3, [r3, #0]
 8101ff0:	f022 0201 	bic.w	r2, r2, #1
 8101ff4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	681b      	ldr	r3, [r3, #0]
 8101ffa:	681a      	ldr	r2, [r3, #0]
 8101ffc:	687b      	ldr	r3, [r7, #4]
 8101ffe:	681b      	ldr	r3, [r3, #0]
 8102000:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8102004:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	681b      	ldr	r3, [r3, #0]
 810200a:	6819      	ldr	r1, [r3, #0]
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	681b      	ldr	r3, [r3, #0]
 8102010:	683a      	ldr	r2, [r7, #0]
 8102012:	430a      	orrs	r2, r1
 8102014:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	681b      	ldr	r3, [r3, #0]
 810201a:	681a      	ldr	r2, [r3, #0]
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	681b      	ldr	r3, [r3, #0]
 8102020:	f042 0201 	orr.w	r2, r2, #1
 8102024:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	2220      	movs	r2, #32
 810202a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810202e:	687b      	ldr	r3, [r7, #4]
 8102030:	2200      	movs	r2, #0
 8102032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8102036:	2300      	movs	r3, #0
 8102038:	e000      	b.n	810203c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810203a:	2302      	movs	r3, #2
  }
}
 810203c:	4618      	mov	r0, r3
 810203e:	370c      	adds	r7, #12
 8102040:	46bd      	mov	sp, r7
 8102042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102046:	4770      	bx	lr

08102048 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102048:	b480      	push	{r7}
 810204a:	b085      	sub	sp, #20
 810204c:	af00      	add	r7, sp, #0
 810204e:	6078      	str	r0, [r7, #4]
 8102050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8102058:	b2db      	uxtb	r3, r3
 810205a:	2b20      	cmp	r3, #32
 810205c:	d139      	bne.n	81020d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810205e:	687b      	ldr	r3, [r7, #4]
 8102060:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8102064:	2b01      	cmp	r3, #1
 8102066:	d101      	bne.n	810206c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102068:	2302      	movs	r3, #2
 810206a:	e033      	b.n	81020d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	2201      	movs	r2, #1
 8102070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	2224      	movs	r2, #36	@ 0x24
 8102078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810207c:	687b      	ldr	r3, [r7, #4]
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	681a      	ldr	r2, [r3, #0]
 8102082:	687b      	ldr	r3, [r7, #4]
 8102084:	681b      	ldr	r3, [r3, #0]
 8102086:	f022 0201 	bic.w	r2, r2, #1
 810208a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810208c:	687b      	ldr	r3, [r7, #4]
 810208e:	681b      	ldr	r3, [r3, #0]
 8102090:	681b      	ldr	r3, [r3, #0]
 8102092:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102094:	68fb      	ldr	r3, [r7, #12]
 8102096:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810209a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810209c:	683b      	ldr	r3, [r7, #0]
 810209e:	021b      	lsls	r3, r3, #8
 81020a0:	68fa      	ldr	r2, [r7, #12]
 81020a2:	4313      	orrs	r3, r2
 81020a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	681b      	ldr	r3, [r3, #0]
 81020aa:	68fa      	ldr	r2, [r7, #12]
 81020ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81020ae:	687b      	ldr	r3, [r7, #4]
 81020b0:	681b      	ldr	r3, [r3, #0]
 81020b2:	681a      	ldr	r2, [r3, #0]
 81020b4:	687b      	ldr	r3, [r7, #4]
 81020b6:	681b      	ldr	r3, [r3, #0]
 81020b8:	f042 0201 	orr.w	r2, r2, #1
 81020bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81020be:	687b      	ldr	r3, [r7, #4]
 81020c0:	2220      	movs	r2, #32
 81020c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	2200      	movs	r2, #0
 81020ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81020ce:	2300      	movs	r3, #0
 81020d0:	e000      	b.n	81020d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81020d2:	2302      	movs	r3, #2
  }
}
 81020d4:	4618      	mov	r0, r3
 81020d6:	3714      	adds	r7, #20
 81020d8:	46bd      	mov	sp, r7
 81020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020de:	4770      	bx	lr

081020e0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81020e0:	b580      	push	{r7, lr}
 81020e2:	b084      	sub	sp, #16
 81020e4:	af00      	add	r7, sp, #0
 81020e6:	60f8      	str	r0, [r7, #12]
 81020e8:	460b      	mov	r3, r1
 81020ea:	607a      	str	r2, [r7, #4]
 81020ec:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81020ee:	4b37      	ldr	r3, [pc, #220]	@ (81021cc <HAL_PWREx_EnterSTOPMode+0xec>)
 81020f0:	681b      	ldr	r3, [r3, #0]
 81020f2:	f023 0201 	bic.w	r2, r3, #1
 81020f6:	4935      	ldr	r1, [pc, #212]	@ (81021cc <HAL_PWREx_EnterSTOPMode+0xec>)
 81020f8:	68fb      	ldr	r3, [r7, #12]
 81020fa:	4313      	orrs	r3, r2
 81020fc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81020fe:	687b      	ldr	r3, [r7, #4]
 8102100:	2b00      	cmp	r3, #0
 8102102:	d123      	bne.n	810214c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102104:	f7fe ff4e 	bl	8100fa4 <HAL_GetCurrentCPUID>
 8102108:	4603      	mov	r3, r0
 810210a:	2b03      	cmp	r3, #3
 810210c:	d158      	bne.n	81021c0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810210e:	4b2f      	ldr	r3, [pc, #188]	@ (81021cc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102110:	691b      	ldr	r3, [r3, #16]
 8102112:	4a2e      	ldr	r2, [pc, #184]	@ (81021cc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102114:	f023 0301 	bic.w	r3, r3, #1
 8102118:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810211a:	4b2d      	ldr	r3, [pc, #180]	@ (81021d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810211c:	691b      	ldr	r3, [r3, #16]
 810211e:	4a2c      	ldr	r2, [pc, #176]	@ (81021d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102120:	f043 0304 	orr.w	r3, r3, #4
 8102124:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102126:	f3bf 8f4f 	dsb	sy
}
 810212a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810212c:	f3bf 8f6f 	isb	sy
}
 8102130:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102132:	7afb      	ldrb	r3, [r7, #11]
 8102134:	2b01      	cmp	r3, #1
 8102136:	d101      	bne.n	810213c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102138:	bf30      	wfi
 810213a:	e000      	b.n	810213e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810213c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810213e:	4b24      	ldr	r3, [pc, #144]	@ (81021d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102140:	691b      	ldr	r3, [r3, #16]
 8102142:	4a23      	ldr	r2, [pc, #140]	@ (81021d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102144:	f023 0304 	bic.w	r3, r3, #4
 8102148:	6113      	str	r3, [r2, #16]
 810214a:	e03c      	b.n	81021c6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810214c:	687b      	ldr	r3, [r7, #4]
 810214e:	2b01      	cmp	r3, #1
 8102150:	d123      	bne.n	810219a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102152:	f7fe ff27 	bl	8100fa4 <HAL_GetCurrentCPUID>
 8102156:	4603      	mov	r3, r0
 8102158:	2b01      	cmp	r3, #1
 810215a:	d133      	bne.n	81021c4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810215c:	4b1b      	ldr	r3, [pc, #108]	@ (81021cc <HAL_PWREx_EnterSTOPMode+0xec>)
 810215e:	695b      	ldr	r3, [r3, #20]
 8102160:	4a1a      	ldr	r2, [pc, #104]	@ (81021cc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102162:	f023 0302 	bic.w	r3, r3, #2
 8102166:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102168:	4b19      	ldr	r3, [pc, #100]	@ (81021d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810216a:	691b      	ldr	r3, [r3, #16]
 810216c:	4a18      	ldr	r2, [pc, #96]	@ (81021d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810216e:	f043 0304 	orr.w	r3, r3, #4
 8102172:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102174:	f3bf 8f4f 	dsb	sy
}
 8102178:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810217a:	f3bf 8f6f 	isb	sy
}
 810217e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102180:	7afb      	ldrb	r3, [r7, #11]
 8102182:	2b01      	cmp	r3, #1
 8102184:	d101      	bne.n	810218a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102186:	bf30      	wfi
 8102188:	e000      	b.n	810218c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810218a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810218c:	4b10      	ldr	r3, [pc, #64]	@ (81021d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810218e:	691b      	ldr	r3, [r3, #16]
 8102190:	4a0f      	ldr	r2, [pc, #60]	@ (81021d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102192:	f023 0304 	bic.w	r3, r3, #4
 8102196:	6113      	str	r3, [r2, #16]
 8102198:	e015      	b.n	81021c6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810219a:	f7fe ff03 	bl	8100fa4 <HAL_GetCurrentCPUID>
 810219e:	4603      	mov	r3, r0
 81021a0:	2b03      	cmp	r3, #3
 81021a2:	d106      	bne.n	81021b2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81021a4:	4b09      	ldr	r3, [pc, #36]	@ (81021cc <HAL_PWREx_EnterSTOPMode+0xec>)
 81021a6:	691b      	ldr	r3, [r3, #16]
 81021a8:	4a08      	ldr	r2, [pc, #32]	@ (81021cc <HAL_PWREx_EnterSTOPMode+0xec>)
 81021aa:	f023 0304 	bic.w	r3, r3, #4
 81021ae:	6113      	str	r3, [r2, #16]
 81021b0:	e009      	b.n	81021c6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81021b2:	4b06      	ldr	r3, [pc, #24]	@ (81021cc <HAL_PWREx_EnterSTOPMode+0xec>)
 81021b4:	695b      	ldr	r3, [r3, #20]
 81021b6:	4a05      	ldr	r2, [pc, #20]	@ (81021cc <HAL_PWREx_EnterSTOPMode+0xec>)
 81021b8:	f023 0304 	bic.w	r3, r3, #4
 81021bc:	6153      	str	r3, [r2, #20]
 81021be:	e002      	b.n	81021c6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81021c0:	bf00      	nop
 81021c2:	e000      	b.n	81021c6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81021c4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81021c6:	3710      	adds	r7, #16
 81021c8:	46bd      	mov	sp, r7
 81021ca:	bd80      	pop	{r7, pc}
 81021cc:	58024800 	.word	0x58024800
 81021d0:	e000ed00 	.word	0xe000ed00

081021d4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81021d4:	b580      	push	{r7, lr}
 81021d6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81021d8:	f7fe fee4 	bl	8100fa4 <HAL_GetCurrentCPUID>
 81021dc:	4603      	mov	r3, r0
 81021de:	2b03      	cmp	r3, #3
 81021e0:	d101      	bne.n	81021e6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81021e2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81021e4:	e001      	b.n	81021ea <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81021e6:	bf40      	sev
    __WFE ();
 81021e8:	bf20      	wfe
}
 81021ea:	bf00      	nop
 81021ec:	bd80      	pop	{r7, pc}
	...

081021f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81021f0:	b480      	push	{r7}
 81021f2:	b089      	sub	sp, #36	@ 0x24
 81021f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81021f6:	4bb3      	ldr	r3, [pc, #716]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021f8:	691b      	ldr	r3, [r3, #16]
 81021fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81021fe:	2b18      	cmp	r3, #24
 8102200:	f200 8155 	bhi.w	81024ae <HAL_RCC_GetSysClockFreq+0x2be>
 8102204:	a201      	add	r2, pc, #4	@ (adr r2, 810220c <HAL_RCC_GetSysClockFreq+0x1c>)
 8102206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810220a:	bf00      	nop
 810220c:	08102271 	.word	0x08102271
 8102210:	081024af 	.word	0x081024af
 8102214:	081024af 	.word	0x081024af
 8102218:	081024af 	.word	0x081024af
 810221c:	081024af 	.word	0x081024af
 8102220:	081024af 	.word	0x081024af
 8102224:	081024af 	.word	0x081024af
 8102228:	081024af 	.word	0x081024af
 810222c:	08102297 	.word	0x08102297
 8102230:	081024af 	.word	0x081024af
 8102234:	081024af 	.word	0x081024af
 8102238:	081024af 	.word	0x081024af
 810223c:	081024af 	.word	0x081024af
 8102240:	081024af 	.word	0x081024af
 8102244:	081024af 	.word	0x081024af
 8102248:	081024af 	.word	0x081024af
 810224c:	0810229d 	.word	0x0810229d
 8102250:	081024af 	.word	0x081024af
 8102254:	081024af 	.word	0x081024af
 8102258:	081024af 	.word	0x081024af
 810225c:	081024af 	.word	0x081024af
 8102260:	081024af 	.word	0x081024af
 8102264:	081024af 	.word	0x081024af
 8102268:	081024af 	.word	0x081024af
 810226c:	081022a3 	.word	0x081022a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102270:	4b94      	ldr	r3, [pc, #592]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102272:	681b      	ldr	r3, [r3, #0]
 8102274:	f003 0320 	and.w	r3, r3, #32
 8102278:	2b00      	cmp	r3, #0
 810227a:	d009      	beq.n	8102290 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810227c:	4b91      	ldr	r3, [pc, #580]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810227e:	681b      	ldr	r3, [r3, #0]
 8102280:	08db      	lsrs	r3, r3, #3
 8102282:	f003 0303 	and.w	r3, r3, #3
 8102286:	4a90      	ldr	r2, [pc, #576]	@ (81024c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102288:	fa22 f303 	lsr.w	r3, r2, r3
 810228c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810228e:	e111      	b.n	81024b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102290:	4b8d      	ldr	r3, [pc, #564]	@ (81024c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102292:	61bb      	str	r3, [r7, #24]
      break;
 8102294:	e10e      	b.n	81024b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8102296:	4b8d      	ldr	r3, [pc, #564]	@ (81024cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102298:	61bb      	str	r3, [r7, #24]
      break;
 810229a:	e10b      	b.n	81024b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810229c:	4b8c      	ldr	r3, [pc, #560]	@ (81024d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810229e:	61bb      	str	r3, [r7, #24]
      break;
 81022a0:	e108      	b.n	81024b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81022a2:	4b88      	ldr	r3, [pc, #544]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81022a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81022a6:	f003 0303 	and.w	r3, r3, #3
 81022aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81022ac:	4b85      	ldr	r3, [pc, #532]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81022b0:	091b      	lsrs	r3, r3, #4
 81022b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81022b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81022b8:	4b82      	ldr	r3, [pc, #520]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81022ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81022bc:	f003 0301 	and.w	r3, r3, #1
 81022c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81022c2:	4b80      	ldr	r3, [pc, #512]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81022c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81022c6:	08db      	lsrs	r3, r3, #3
 81022c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81022cc:	68fa      	ldr	r2, [r7, #12]
 81022ce:	fb02 f303 	mul.w	r3, r2, r3
 81022d2:	ee07 3a90 	vmov	s15, r3
 81022d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81022da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81022de:	693b      	ldr	r3, [r7, #16]
 81022e0:	2b00      	cmp	r3, #0
 81022e2:	f000 80e1 	beq.w	81024a8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 81022e6:	697b      	ldr	r3, [r7, #20]
 81022e8:	2b02      	cmp	r3, #2
 81022ea:	f000 8083 	beq.w	81023f4 <HAL_RCC_GetSysClockFreq+0x204>
 81022ee:	697b      	ldr	r3, [r7, #20]
 81022f0:	2b02      	cmp	r3, #2
 81022f2:	f200 80a1 	bhi.w	8102438 <HAL_RCC_GetSysClockFreq+0x248>
 81022f6:	697b      	ldr	r3, [r7, #20]
 81022f8:	2b00      	cmp	r3, #0
 81022fa:	d003      	beq.n	8102304 <HAL_RCC_GetSysClockFreq+0x114>
 81022fc:	697b      	ldr	r3, [r7, #20]
 81022fe:	2b01      	cmp	r3, #1
 8102300:	d056      	beq.n	81023b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102302:	e099      	b.n	8102438 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102304:	4b6f      	ldr	r3, [pc, #444]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102306:	681b      	ldr	r3, [r3, #0]
 8102308:	f003 0320 	and.w	r3, r3, #32
 810230c:	2b00      	cmp	r3, #0
 810230e:	d02d      	beq.n	810236c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102310:	4b6c      	ldr	r3, [pc, #432]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102312:	681b      	ldr	r3, [r3, #0]
 8102314:	08db      	lsrs	r3, r3, #3
 8102316:	f003 0303 	and.w	r3, r3, #3
 810231a:	4a6b      	ldr	r2, [pc, #428]	@ (81024c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810231c:	fa22 f303 	lsr.w	r3, r2, r3
 8102320:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102322:	687b      	ldr	r3, [r7, #4]
 8102324:	ee07 3a90 	vmov	s15, r3
 8102328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810232c:	693b      	ldr	r3, [r7, #16]
 810232e:	ee07 3a90 	vmov	s15, r3
 8102332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810233a:	4b62      	ldr	r3, [pc, #392]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810233e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102342:	ee07 3a90 	vmov	s15, r3
 8102346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810234a:	ed97 6a02 	vldr	s12, [r7, #8]
 810234e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810235a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810235e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102366:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810236a:	e087      	b.n	810247c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810236c:	693b      	ldr	r3, [r7, #16]
 810236e:	ee07 3a90 	vmov	s15, r3
 8102372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102376:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81024d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810237a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810237e:	4b51      	ldr	r3, [pc, #324]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102386:	ee07 3a90 	vmov	s15, r3
 810238a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810238e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102392:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810239a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810239e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81023a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81023a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81023aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81023ae:	e065      	b.n	810247c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81023b0:	693b      	ldr	r3, [r7, #16]
 81023b2:	ee07 3a90 	vmov	s15, r3
 81023b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81023ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81024dc <HAL_RCC_GetSysClockFreq+0x2ec>
 81023be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81023c2:	4b40      	ldr	r3, [pc, #256]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81023c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81023ca:	ee07 3a90 	vmov	s15, r3
 81023ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81023d2:	ed97 6a02 	vldr	s12, [r7, #8]
 81023d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81023da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81023de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81023e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81023e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81023ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81023ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81023f2:	e043      	b.n	810247c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81023f4:	693b      	ldr	r3, [r7, #16]
 81023f6:	ee07 3a90 	vmov	s15, r3
 81023fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81023fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81024e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102406:	4b2f      	ldr	r3, [pc, #188]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810240a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810240e:	ee07 3a90 	vmov	s15, r3
 8102412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102416:	ed97 6a02 	vldr	s12, [r7, #8]
 810241a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810241e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810242a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810242e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102432:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102436:	e021      	b.n	810247c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102438:	693b      	ldr	r3, [r7, #16]
 810243a:	ee07 3a90 	vmov	s15, r3
 810243e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102442:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81024dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8102446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810244a:	4b1e      	ldr	r3, [pc, #120]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810244e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102452:	ee07 3a90 	vmov	s15, r3
 8102456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810245a:	ed97 6a02 	vldr	s12, [r7, #8]
 810245e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810246a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810246e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102476:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810247a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810247c:	4b11      	ldr	r3, [pc, #68]	@ (81024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810247e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102480:	0a5b      	lsrs	r3, r3, #9
 8102482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102486:	3301      	adds	r3, #1
 8102488:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810248a:	683b      	ldr	r3, [r7, #0]
 810248c:	ee07 3a90 	vmov	s15, r3
 8102490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102494:	edd7 6a07 	vldr	s13, [r7, #28]
 8102498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810249c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81024a0:	ee17 3a90 	vmov	r3, s15
 81024a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81024a6:	e005      	b.n	81024b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81024a8:	2300      	movs	r3, #0
 81024aa:	61bb      	str	r3, [r7, #24]
      break;
 81024ac:	e002      	b.n	81024b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81024ae:	4b07      	ldr	r3, [pc, #28]	@ (81024cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81024b0:	61bb      	str	r3, [r7, #24]
      break;
 81024b2:	bf00      	nop
  }

  return sysclockfreq;
 81024b4:	69bb      	ldr	r3, [r7, #24]
}
 81024b6:	4618      	mov	r0, r3
 81024b8:	3724      	adds	r7, #36	@ 0x24
 81024ba:	46bd      	mov	sp, r7
 81024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024c0:	4770      	bx	lr
 81024c2:	bf00      	nop
 81024c4:	58024400 	.word	0x58024400
 81024c8:	03d09000 	.word	0x03d09000
 81024cc:	003d0900 	.word	0x003d0900
 81024d0:	02dc6c00 	.word	0x02dc6c00
 81024d4:	46000000 	.word	0x46000000
 81024d8:	4c742400 	.word	0x4c742400
 81024dc:	4a742400 	.word	0x4a742400
 81024e0:	4c371b00 	.word	0x4c371b00

081024e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81024e4:	b580      	push	{r7, lr}
 81024e6:	b082      	sub	sp, #8
 81024e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81024ea:	f7ff fe81 	bl	81021f0 <HAL_RCC_GetSysClockFreq>
 81024ee:	4602      	mov	r2, r0
 81024f0:	4b11      	ldr	r3, [pc, #68]	@ (8102538 <HAL_RCC_GetHCLKFreq+0x54>)
 81024f2:	699b      	ldr	r3, [r3, #24]
 81024f4:	0a1b      	lsrs	r3, r3, #8
 81024f6:	f003 030f 	and.w	r3, r3, #15
 81024fa:	4910      	ldr	r1, [pc, #64]	@ (810253c <HAL_RCC_GetHCLKFreq+0x58>)
 81024fc:	5ccb      	ldrb	r3, [r1, r3]
 81024fe:	f003 031f 	and.w	r3, r3, #31
 8102502:	fa22 f303 	lsr.w	r3, r2, r3
 8102506:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102508:	4b0b      	ldr	r3, [pc, #44]	@ (8102538 <HAL_RCC_GetHCLKFreq+0x54>)
 810250a:	699b      	ldr	r3, [r3, #24]
 810250c:	f003 030f 	and.w	r3, r3, #15
 8102510:	4a0a      	ldr	r2, [pc, #40]	@ (810253c <HAL_RCC_GetHCLKFreq+0x58>)
 8102512:	5cd3      	ldrb	r3, [r2, r3]
 8102514:	f003 031f 	and.w	r3, r3, #31
 8102518:	687a      	ldr	r2, [r7, #4]
 810251a:	fa22 f303 	lsr.w	r3, r2, r3
 810251e:	4a08      	ldr	r2, [pc, #32]	@ (8102540 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102520:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102522:	4b07      	ldr	r3, [pc, #28]	@ (8102540 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102524:	681b      	ldr	r3, [r3, #0]
 8102526:	4a07      	ldr	r2, [pc, #28]	@ (8102544 <HAL_RCC_GetHCLKFreq+0x60>)
 8102528:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810252a:	4b05      	ldr	r3, [pc, #20]	@ (8102540 <HAL_RCC_GetHCLKFreq+0x5c>)
 810252c:	681b      	ldr	r3, [r3, #0]
}
 810252e:	4618      	mov	r0, r3
 8102530:	3708      	adds	r7, #8
 8102532:	46bd      	mov	sp, r7
 8102534:	bd80      	pop	{r7, pc}
 8102536:	bf00      	nop
 8102538:	58024400 	.word	0x58024400
 810253c:	081089a8 	.word	0x081089a8
 8102540:	10000004 	.word	0x10000004
 8102544:	10000000 	.word	0x10000000

08102548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102548:	b580      	push	{r7, lr}
 810254a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810254c:	f7ff ffca 	bl	81024e4 <HAL_RCC_GetHCLKFreq>
 8102550:	4602      	mov	r2, r0
 8102552:	4b06      	ldr	r3, [pc, #24]	@ (810256c <HAL_RCC_GetPCLK1Freq+0x24>)
 8102554:	69db      	ldr	r3, [r3, #28]
 8102556:	091b      	lsrs	r3, r3, #4
 8102558:	f003 0307 	and.w	r3, r3, #7
 810255c:	4904      	ldr	r1, [pc, #16]	@ (8102570 <HAL_RCC_GetPCLK1Freq+0x28>)
 810255e:	5ccb      	ldrb	r3, [r1, r3]
 8102560:	f003 031f 	and.w	r3, r3, #31
 8102564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102568:	4618      	mov	r0, r3
 810256a:	bd80      	pop	{r7, pc}
 810256c:	58024400 	.word	0x58024400
 8102570:	081089a8 	.word	0x081089a8

08102574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102574:	b580      	push	{r7, lr}
 8102576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8102578:	f7ff ffb4 	bl	81024e4 <HAL_RCC_GetHCLKFreq>
 810257c:	4602      	mov	r2, r0
 810257e:	4b06      	ldr	r3, [pc, #24]	@ (8102598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8102580:	69db      	ldr	r3, [r3, #28]
 8102582:	0a1b      	lsrs	r3, r3, #8
 8102584:	f003 0307 	and.w	r3, r3, #7
 8102588:	4904      	ldr	r1, [pc, #16]	@ (810259c <HAL_RCC_GetPCLK2Freq+0x28>)
 810258a:	5ccb      	ldrb	r3, [r1, r3]
 810258c:	f003 031f 	and.w	r3, r3, #31
 8102590:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102594:	4618      	mov	r0, r3
 8102596:	bd80      	pop	{r7, pc}
 8102598:	58024400 	.word	0x58024400
 810259c:	081089a8 	.word	0x081089a8

081025a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81025a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81025a4:	b0ca      	sub	sp, #296	@ 0x128
 81025a6:	af00      	add	r7, sp, #0
 81025a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81025ac:	2300      	movs	r3, #0
 81025ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81025b2:	2300      	movs	r3, #0
 81025b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81025b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81025c4:	2500      	movs	r5, #0
 81025c6:	ea54 0305 	orrs.w	r3, r4, r5
 81025ca:	d049      	beq.n	8102660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81025cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81025d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81025d6:	d02f      	beq.n	8102638 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81025d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81025dc:	d828      	bhi.n	8102630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81025de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81025e2:	d01a      	beq.n	810261a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81025e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81025e8:	d822      	bhi.n	8102630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81025ea:	2b00      	cmp	r3, #0
 81025ec:	d003      	beq.n	81025f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 81025ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81025f2:	d007      	beq.n	8102604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81025f4:	e01c      	b.n	8102630 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81025f6:	4bb8      	ldr	r3, [pc, #736]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81025f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81025fa:	4ab7      	ldr	r2, [pc, #732]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81025fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102600:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102602:	e01a      	b.n	810263a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102608:	3308      	adds	r3, #8
 810260a:	2102      	movs	r1, #2
 810260c:	4618      	mov	r0, r3
 810260e:	f001 fc8f 	bl	8103f30 <RCCEx_PLL2_Config>
 8102612:	4603      	mov	r3, r0
 8102614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102618:	e00f      	b.n	810263a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810261a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810261e:	3328      	adds	r3, #40	@ 0x28
 8102620:	2102      	movs	r1, #2
 8102622:	4618      	mov	r0, r3
 8102624:	f001 fd36 	bl	8104094 <RCCEx_PLL3_Config>
 8102628:	4603      	mov	r3, r0
 810262a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810262e:	e004      	b.n	810263a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102630:	2301      	movs	r3, #1
 8102632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102636:	e000      	b.n	810263a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8102638:	bf00      	nop
    }

    if (ret == HAL_OK)
 810263a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810263e:	2b00      	cmp	r3, #0
 8102640:	d10a      	bne.n	8102658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102642:	4ba5      	ldr	r3, [pc, #660]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102646:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810264a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810264e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102650:	4aa1      	ldr	r2, [pc, #644]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102652:	430b      	orrs	r3, r1
 8102654:	6513      	str	r3, [r2, #80]	@ 0x50
 8102656:	e003      	b.n	8102660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810265c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102668:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810266c:	f04f 0900 	mov.w	r9, #0
 8102670:	ea58 0309 	orrs.w	r3, r8, r9
 8102674:	d047      	beq.n	8102706 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8102676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810267a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810267c:	2b04      	cmp	r3, #4
 810267e:	d82a      	bhi.n	81026d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8102680:	a201      	add	r2, pc, #4	@ (adr r2, 8102688 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8102682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102686:	bf00      	nop
 8102688:	0810269d 	.word	0x0810269d
 810268c:	081026ab 	.word	0x081026ab
 8102690:	081026c1 	.word	0x081026c1
 8102694:	081026df 	.word	0x081026df
 8102698:	081026df 	.word	0x081026df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810269c:	4b8e      	ldr	r3, [pc, #568]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81026a0:	4a8d      	ldr	r2, [pc, #564]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81026a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81026a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81026a8:	e01a      	b.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81026aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026ae:	3308      	adds	r3, #8
 81026b0:	2100      	movs	r1, #0
 81026b2:	4618      	mov	r0, r3
 81026b4:	f001 fc3c 	bl	8103f30 <RCCEx_PLL2_Config>
 81026b8:	4603      	mov	r3, r0
 81026ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81026be:	e00f      	b.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81026c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026c4:	3328      	adds	r3, #40	@ 0x28
 81026c6:	2100      	movs	r1, #0
 81026c8:	4618      	mov	r0, r3
 81026ca:	f001 fce3 	bl	8104094 <RCCEx_PLL3_Config>
 81026ce:	4603      	mov	r3, r0
 81026d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81026d4:	e004      	b.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81026d6:	2301      	movs	r3, #1
 81026d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81026dc:	e000      	b.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81026de:	bf00      	nop
    }

    if (ret == HAL_OK)
 81026e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026e4:	2b00      	cmp	r3, #0
 81026e6:	d10a      	bne.n	81026fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81026e8:	4b7b      	ldr	r3, [pc, #492]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81026ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81026ec:	f023 0107 	bic.w	r1, r3, #7
 81026f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81026f6:	4a78      	ldr	r2, [pc, #480]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81026f8:	430b      	orrs	r3, r1
 81026fa:	6513      	str	r3, [r2, #80]	@ 0x50
 81026fc:	e003      	b.n	8102706 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810270e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8102712:	f04f 0b00 	mov.w	fp, #0
 8102716:	ea5a 030b 	orrs.w	r3, sl, fp
 810271a:	d04c      	beq.n	81027b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810271c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102726:	d030      	beq.n	810278a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8102728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810272c:	d829      	bhi.n	8102782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810272e:	2bc0      	cmp	r3, #192	@ 0xc0
 8102730:	d02d      	beq.n	810278e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8102732:	2bc0      	cmp	r3, #192	@ 0xc0
 8102734:	d825      	bhi.n	8102782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102736:	2b80      	cmp	r3, #128	@ 0x80
 8102738:	d018      	beq.n	810276c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810273a:	2b80      	cmp	r3, #128	@ 0x80
 810273c:	d821      	bhi.n	8102782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810273e:	2b00      	cmp	r3, #0
 8102740:	d002      	beq.n	8102748 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8102742:	2b40      	cmp	r3, #64	@ 0x40
 8102744:	d007      	beq.n	8102756 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8102746:	e01c      	b.n	8102782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102748:	4b63      	ldr	r3, [pc, #396]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810274c:	4a62      	ldr	r2, [pc, #392]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810274e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102754:	e01c      	b.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810275a:	3308      	adds	r3, #8
 810275c:	2100      	movs	r1, #0
 810275e:	4618      	mov	r0, r3
 8102760:	f001 fbe6 	bl	8103f30 <RCCEx_PLL2_Config>
 8102764:	4603      	mov	r3, r0
 8102766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810276a:	e011      	b.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810276c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102770:	3328      	adds	r3, #40	@ 0x28
 8102772:	2100      	movs	r1, #0
 8102774:	4618      	mov	r0, r3
 8102776:	f001 fc8d 	bl	8104094 <RCCEx_PLL3_Config>
 810277a:	4603      	mov	r3, r0
 810277c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102780:	e006      	b.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102782:	2301      	movs	r3, #1
 8102784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102788:	e002      	b.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810278a:	bf00      	nop
 810278c:	e000      	b.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810278e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102794:	2b00      	cmp	r3, #0
 8102796:	d10a      	bne.n	81027ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102798:	4b4f      	ldr	r3, [pc, #316]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810279a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810279c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81027a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81027a6:	4a4c      	ldr	r2, [pc, #304]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81027a8:	430b      	orrs	r3, r1
 81027aa:	6513      	str	r3, [r2, #80]	@ 0x50
 81027ac:	e003      	b.n	81027b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81027b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81027b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81027c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81027c6:	2300      	movs	r3, #0
 81027c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81027cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81027d0:	460b      	mov	r3, r1
 81027d2:	4313      	orrs	r3, r2
 81027d4:	d053      	beq.n	810287e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81027d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81027de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81027e2:	d035      	beq.n	8102850 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81027e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81027e8:	d82e      	bhi.n	8102848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81027ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81027ee:	d031      	beq.n	8102854 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81027f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81027f4:	d828      	bhi.n	8102848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81027f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81027fa:	d01a      	beq.n	8102832 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81027fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102800:	d822      	bhi.n	8102848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102802:	2b00      	cmp	r3, #0
 8102804:	d003      	beq.n	810280e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8102806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810280a:	d007      	beq.n	810281c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810280c:	e01c      	b.n	8102848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810280e:	4b32      	ldr	r3, [pc, #200]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102812:	4a31      	ldr	r2, [pc, #196]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810281a:	e01c      	b.n	8102856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810281c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102820:	3308      	adds	r3, #8
 8102822:	2100      	movs	r1, #0
 8102824:	4618      	mov	r0, r3
 8102826:	f001 fb83 	bl	8103f30 <RCCEx_PLL2_Config>
 810282a:	4603      	mov	r3, r0
 810282c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102830:	e011      	b.n	8102856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102836:	3328      	adds	r3, #40	@ 0x28
 8102838:	2100      	movs	r1, #0
 810283a:	4618      	mov	r0, r3
 810283c:	f001 fc2a 	bl	8104094 <RCCEx_PLL3_Config>
 8102840:	4603      	mov	r3, r0
 8102842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102846:	e006      	b.n	8102856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102848:	2301      	movs	r3, #1
 810284a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810284e:	e002      	b.n	8102856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102850:	bf00      	nop
 8102852:	e000      	b.n	8102856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810285a:	2b00      	cmp	r3, #0
 810285c:	d10b      	bne.n	8102876 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810285e:	4b1e      	ldr	r3, [pc, #120]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102862:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8102866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810286a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810286e:	4a1a      	ldr	r2, [pc, #104]	@ (81028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102870:	430b      	orrs	r3, r1
 8102872:	6593      	str	r3, [r2, #88]	@ 0x58
 8102874:	e003      	b.n	810287e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810287a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810287e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102886:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810288a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810288e:	2300      	movs	r3, #0
 8102890:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8102894:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8102898:	460b      	mov	r3, r1
 810289a:	4313      	orrs	r3, r2
 810289c:	d056      	beq.n	810294c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810289e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81028a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81028aa:	d038      	beq.n	810291e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81028ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81028b0:	d831      	bhi.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81028b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81028b6:	d034      	beq.n	8102922 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81028b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81028bc:	d82b      	bhi.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81028be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81028c2:	d01d      	beq.n	8102900 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81028c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81028c8:	d825      	bhi.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81028ca:	2b00      	cmp	r3, #0
 81028cc:	d006      	beq.n	81028dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81028ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81028d2:	d00a      	beq.n	81028ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81028d4:	e01f      	b.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81028d6:	bf00      	nop
 81028d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81028dc:	4ba2      	ldr	r3, [pc, #648]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81028e0:	4aa1      	ldr	r2, [pc, #644]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81028e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81028e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81028e8:	e01c      	b.n	8102924 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81028ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028ee:	3308      	adds	r3, #8
 81028f0:	2100      	movs	r1, #0
 81028f2:	4618      	mov	r0, r3
 81028f4:	f001 fb1c 	bl	8103f30 <RCCEx_PLL2_Config>
 81028f8:	4603      	mov	r3, r0
 81028fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81028fe:	e011      	b.n	8102924 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102904:	3328      	adds	r3, #40	@ 0x28
 8102906:	2100      	movs	r1, #0
 8102908:	4618      	mov	r0, r3
 810290a:	f001 fbc3 	bl	8104094 <RCCEx_PLL3_Config>
 810290e:	4603      	mov	r3, r0
 8102910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102914:	e006      	b.n	8102924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102916:	2301      	movs	r3, #1
 8102918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810291c:	e002      	b.n	8102924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810291e:	bf00      	nop
 8102920:	e000      	b.n	8102924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102928:	2b00      	cmp	r3, #0
 810292a:	d10b      	bne.n	8102944 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810292c:	4b8e      	ldr	r3, [pc, #568]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810292e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102930:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8102934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102938:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810293c:	4a8a      	ldr	r2, [pc, #552]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810293e:	430b      	orrs	r3, r1
 8102940:	6593      	str	r3, [r2, #88]	@ 0x58
 8102942:	e003      	b.n	810294c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810294c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102954:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8102958:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810295c:	2300      	movs	r3, #0
 810295e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8102962:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8102966:	460b      	mov	r3, r1
 8102968:	4313      	orrs	r3, r2
 810296a:	d03a      	beq.n	81029e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810296c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102972:	2b30      	cmp	r3, #48	@ 0x30
 8102974:	d01f      	beq.n	81029b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8102976:	2b30      	cmp	r3, #48	@ 0x30
 8102978:	d819      	bhi.n	81029ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810297a:	2b20      	cmp	r3, #32
 810297c:	d00c      	beq.n	8102998 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810297e:	2b20      	cmp	r3, #32
 8102980:	d815      	bhi.n	81029ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102982:	2b00      	cmp	r3, #0
 8102984:	d019      	beq.n	81029ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8102986:	2b10      	cmp	r3, #16
 8102988:	d111      	bne.n	81029ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810298a:	4b77      	ldr	r3, [pc, #476]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810298c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810298e:	4a76      	ldr	r2, [pc, #472]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102996:	e011      	b.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810299c:	3308      	adds	r3, #8
 810299e:	2102      	movs	r1, #2
 81029a0:	4618      	mov	r0, r3
 81029a2:	f001 fac5 	bl	8103f30 <RCCEx_PLL2_Config>
 81029a6:	4603      	mov	r3, r0
 81029a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81029ac:	e006      	b.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81029ae:	2301      	movs	r3, #1
 81029b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81029b4:	e002      	b.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81029b6:	bf00      	nop
 81029b8:	e000      	b.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81029ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81029bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029c0:	2b00      	cmp	r3, #0
 81029c2:	d10a      	bne.n	81029da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81029c4:	4b68      	ldr	r3, [pc, #416]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81029c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81029c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 81029cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81029d2:	4a65      	ldr	r2, [pc, #404]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81029d4:	430b      	orrs	r3, r1
 81029d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81029d8:	e003      	b.n	81029e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81029e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81029ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81029f2:	2300      	movs	r3, #0
 81029f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81029f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81029fc:	460b      	mov	r3, r1
 81029fe:	4313      	orrs	r3, r2
 8102a00:	d051      	beq.n	8102aa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8102a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102a0c:	d035      	beq.n	8102a7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8102a0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102a12:	d82e      	bhi.n	8102a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102a14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102a18:	d031      	beq.n	8102a7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8102a1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102a1e:	d828      	bhi.n	8102a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102a24:	d01a      	beq.n	8102a5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8102a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102a2a:	d822      	bhi.n	8102a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102a2c:	2b00      	cmp	r3, #0
 8102a2e:	d003      	beq.n	8102a38 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8102a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102a34:	d007      	beq.n	8102a46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8102a36:	e01c      	b.n	8102a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102a38:	4b4b      	ldr	r3, [pc, #300]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102a44:	e01c      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a4a:	3308      	adds	r3, #8
 8102a4c:	2100      	movs	r1, #0
 8102a4e:	4618      	mov	r0, r3
 8102a50:	f001 fa6e 	bl	8103f30 <RCCEx_PLL2_Config>
 8102a54:	4603      	mov	r3, r0
 8102a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102a5a:	e011      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a60:	3328      	adds	r3, #40	@ 0x28
 8102a62:	2100      	movs	r1, #0
 8102a64:	4618      	mov	r0, r3
 8102a66:	f001 fb15 	bl	8104094 <RCCEx_PLL3_Config>
 8102a6a:	4603      	mov	r3, r0
 8102a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102a70:	e006      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102a72:	2301      	movs	r3, #1
 8102a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102a78:	e002      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102a7a:	bf00      	nop
 8102a7c:	e000      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a84:	2b00      	cmp	r3, #0
 8102a86:	d10a      	bne.n	8102a9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102a88:	4b37      	ldr	r3, [pc, #220]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102a8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8102a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102a96:	4a34      	ldr	r2, [pc, #208]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102a98:	430b      	orrs	r3, r1
 8102a9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8102a9c:	e003      	b.n	8102aa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102aae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8102ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8102ab6:	2300      	movs	r3, #0
 8102ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8102abc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8102ac0:	460b      	mov	r3, r1
 8102ac2:	4313      	orrs	r3, r2
 8102ac4:	d056      	beq.n	8102b74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8102ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102acc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102ad0:	d033      	beq.n	8102b3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102ad2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102ad6:	d82c      	bhi.n	8102b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102ad8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102adc:	d02f      	beq.n	8102b3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8102ade:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102ae2:	d826      	bhi.n	8102b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102ae4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102ae8:	d02b      	beq.n	8102b42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8102aea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102aee:	d820      	bhi.n	8102b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102af4:	d012      	beq.n	8102b1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8102af6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102afa:	d81a      	bhi.n	8102b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102afc:	2b00      	cmp	r3, #0
 8102afe:	d022      	beq.n	8102b46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8102b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102b04:	d115      	bne.n	8102b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b0a:	3308      	adds	r3, #8
 8102b0c:	2101      	movs	r1, #1
 8102b0e:	4618      	mov	r0, r3
 8102b10:	f001 fa0e 	bl	8103f30 <RCCEx_PLL2_Config>
 8102b14:	4603      	mov	r3, r0
 8102b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102b1a:	e015      	b.n	8102b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b20:	3328      	adds	r3, #40	@ 0x28
 8102b22:	2101      	movs	r1, #1
 8102b24:	4618      	mov	r0, r3
 8102b26:	f001 fab5 	bl	8104094 <RCCEx_PLL3_Config>
 8102b2a:	4603      	mov	r3, r0
 8102b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102b30:	e00a      	b.n	8102b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102b32:	2301      	movs	r3, #1
 8102b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102b38:	e006      	b.n	8102b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102b3a:	bf00      	nop
 8102b3c:	e004      	b.n	8102b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102b3e:	bf00      	nop
 8102b40:	e002      	b.n	8102b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102b42:	bf00      	nop
 8102b44:	e000      	b.n	8102b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b4c:	2b00      	cmp	r3, #0
 8102b4e:	d10d      	bne.n	8102b6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8102b50:	4b05      	ldr	r3, [pc, #20]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8102b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b5e:	4a02      	ldr	r2, [pc, #8]	@ (8102b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102b60:	430b      	orrs	r3, r1
 8102b62:	6513      	str	r3, [r2, #80]	@ 0x50
 8102b64:	e006      	b.n	8102b74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8102b66:	bf00      	nop
 8102b68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b7c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8102b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8102b84:	2300      	movs	r3, #0
 8102b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8102b8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8102b8e:	460b      	mov	r3, r1
 8102b90:	4313      	orrs	r3, r2
 8102b92:	d055      	beq.n	8102c40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8102b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102ba0:	d033      	beq.n	8102c0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8102ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102ba6:	d82c      	bhi.n	8102c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102bac:	d02f      	beq.n	8102c0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8102bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102bb2:	d826      	bhi.n	8102c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102bb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102bb8:	d02b      	beq.n	8102c12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8102bba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102bbe:	d820      	bhi.n	8102c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102bc4:	d012      	beq.n	8102bec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8102bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102bca:	d81a      	bhi.n	8102c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102bcc:	2b00      	cmp	r3, #0
 8102bce:	d022      	beq.n	8102c16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8102bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102bd4:	d115      	bne.n	8102c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bda:	3308      	adds	r3, #8
 8102bdc:	2101      	movs	r1, #1
 8102bde:	4618      	mov	r0, r3
 8102be0:	f001 f9a6 	bl	8103f30 <RCCEx_PLL2_Config>
 8102be4:	4603      	mov	r3, r0
 8102be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102bea:	e015      	b.n	8102c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bf0:	3328      	adds	r3, #40	@ 0x28
 8102bf2:	2101      	movs	r1, #1
 8102bf4:	4618      	mov	r0, r3
 8102bf6:	f001 fa4d 	bl	8104094 <RCCEx_PLL3_Config>
 8102bfa:	4603      	mov	r3, r0
 8102bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102c00:	e00a      	b.n	8102c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8102c02:	2301      	movs	r3, #1
 8102c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102c08:	e006      	b.n	8102c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102c0a:	bf00      	nop
 8102c0c:	e004      	b.n	8102c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102c0e:	bf00      	nop
 8102c10:	e002      	b.n	8102c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102c12:	bf00      	nop
 8102c14:	e000      	b.n	8102c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c1c:	2b00      	cmp	r3, #0
 8102c1e:	d10b      	bne.n	8102c38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102c20:	4ba4      	ldr	r3, [pc, #656]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102c24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102c30:	4aa0      	ldr	r2, [pc, #640]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102c32:	430b      	orrs	r3, r1
 8102c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8102c36:	e003      	b.n	8102c40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8102c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8102c50:	2300      	movs	r3, #0
 8102c52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8102c56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8102c5a:	460b      	mov	r3, r1
 8102c5c:	4313      	orrs	r3, r2
 8102c5e:	d037      	beq.n	8102cd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8102c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102c6a:	d00e      	beq.n	8102c8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8102c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102c70:	d816      	bhi.n	8102ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8102c72:	2b00      	cmp	r3, #0
 8102c74:	d018      	beq.n	8102ca8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8102c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102c7a:	d111      	bne.n	8102ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c7c:	4b8d      	ldr	r3, [pc, #564]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c80:	4a8c      	ldr	r2, [pc, #560]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102c88:	e00f      	b.n	8102caa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c8e:	3308      	adds	r3, #8
 8102c90:	2101      	movs	r1, #1
 8102c92:	4618      	mov	r0, r3
 8102c94:	f001 f94c 	bl	8103f30 <RCCEx_PLL2_Config>
 8102c98:	4603      	mov	r3, r0
 8102c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102c9e:	e004      	b.n	8102caa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102ca0:	2301      	movs	r3, #1
 8102ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102ca6:	e000      	b.n	8102caa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8102ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102cae:	2b00      	cmp	r3, #0
 8102cb0:	d10a      	bne.n	8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102cb2:	4b80      	ldr	r3, [pc, #512]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102cb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102cc0:	4a7c      	ldr	r2, [pc, #496]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102cc2:	430b      	orrs	r3, r1
 8102cc4:	6513      	str	r3, [r2, #80]	@ 0x50
 8102cc6:	e003      	b.n	8102cd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ccc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cd8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8102cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8102ce0:	2300      	movs	r3, #0
 8102ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8102ce6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8102cea:	460b      	mov	r3, r1
 8102cec:	4313      	orrs	r3, r2
 8102cee:	d039      	beq.n	8102d64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8102cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102cf6:	2b03      	cmp	r3, #3
 8102cf8:	d81c      	bhi.n	8102d34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8102cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8102d00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8102cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102d00:	08102d3d 	.word	0x08102d3d
 8102d04:	08102d11 	.word	0x08102d11
 8102d08:	08102d1f 	.word	0x08102d1f
 8102d0c:	08102d3d 	.word	0x08102d3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d10:	4b68      	ldr	r3, [pc, #416]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102d14:	4a67      	ldr	r2, [pc, #412]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8102d1c:	e00f      	b.n	8102d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d22:	3308      	adds	r3, #8
 8102d24:	2102      	movs	r1, #2
 8102d26:	4618      	mov	r0, r3
 8102d28:	f001 f902 	bl	8103f30 <RCCEx_PLL2_Config>
 8102d2c:	4603      	mov	r3, r0
 8102d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8102d32:	e004      	b.n	8102d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102d34:	2301      	movs	r3, #1
 8102d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102d3a:	e000      	b.n	8102d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8102d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d42:	2b00      	cmp	r3, #0
 8102d44:	d10a      	bne.n	8102d5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102d46:	4b5b      	ldr	r3, [pc, #364]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102d4a:	f023 0103 	bic.w	r1, r3, #3
 8102d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102d54:	4a57      	ldr	r2, [pc, #348]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102d56:	430b      	orrs	r3, r1
 8102d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102d5a:	e003      	b.n	8102d64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8102d70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8102d74:	2300      	movs	r3, #0
 8102d76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8102d7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8102d7e:	460b      	mov	r3, r1
 8102d80:	4313      	orrs	r3, r2
 8102d82:	f000 809f 	beq.w	8102ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102d86:	4b4c      	ldr	r3, [pc, #304]	@ (8102eb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102d88:	681b      	ldr	r3, [r3, #0]
 8102d8a:	4a4b      	ldr	r2, [pc, #300]	@ (8102eb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102d90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102d92:	f7fd ffeb 	bl	8100d6c <HAL_GetTick>
 8102d96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102d9a:	e00b      	b.n	8102db4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102d9c:	f7fd ffe6 	bl	8100d6c <HAL_GetTick>
 8102da0:	4602      	mov	r2, r0
 8102da2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8102da6:	1ad3      	subs	r3, r2, r3
 8102da8:	2b64      	cmp	r3, #100	@ 0x64
 8102daa:	d903      	bls.n	8102db4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8102dac:	2303      	movs	r3, #3
 8102dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102db2:	e005      	b.n	8102dc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102db4:	4b40      	ldr	r3, [pc, #256]	@ (8102eb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102dbc:	2b00      	cmp	r3, #0
 8102dbe:	d0ed      	beq.n	8102d9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8102dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102dc4:	2b00      	cmp	r3, #0
 8102dc6:	d179      	bne.n	8102ebc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102dca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102dd4:	4053      	eors	r3, r2
 8102dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102dda:	2b00      	cmp	r3, #0
 8102ddc:	d015      	beq.n	8102e0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102dde:	4b35      	ldr	r3, [pc, #212]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8102de6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8102dea:	4b32      	ldr	r3, [pc, #200]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102dee:	4a31      	ldr	r2, [pc, #196]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8102df4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102df6:	4b2f      	ldr	r3, [pc, #188]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8102e00:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8102e02:	4a2c      	ldr	r2, [pc, #176]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e08:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8102e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102e16:	d118      	bne.n	8102e4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102e18:	f7fd ffa8 	bl	8100d6c <HAL_GetTick>
 8102e1c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102e20:	e00d      	b.n	8102e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102e22:	f7fd ffa3 	bl	8100d6c <HAL_GetTick>
 8102e26:	4602      	mov	r2, r0
 8102e28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8102e2c:	1ad2      	subs	r2, r2, r3
 8102e2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8102e32:	429a      	cmp	r2, r3
 8102e34:	d903      	bls.n	8102e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8102e36:	2303      	movs	r3, #3
 8102e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8102e3c:	e005      	b.n	8102e4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102e42:	f003 0302 	and.w	r3, r3, #2
 8102e46:	2b00      	cmp	r3, #0
 8102e48:	d0eb      	beq.n	8102e22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8102e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e4e:	2b00      	cmp	r3, #0
 8102e50:	d12b      	bne.n	8102eaa <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102e62:	d110      	bne.n	8102e86 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8102e64:	4b13      	ldr	r3, [pc, #76]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102e66:	691b      	ldr	r3, [r3, #16]
 8102e68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8102e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102e74:	091b      	lsrs	r3, r3, #4
 8102e76:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8102e7a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8102e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102e80:	430b      	orrs	r3, r1
 8102e82:	6113      	str	r3, [r2, #16]
 8102e84:	e005      	b.n	8102e92 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8102e86:	4b0b      	ldr	r3, [pc, #44]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102e88:	691b      	ldr	r3, [r3, #16]
 8102e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102e8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8102e90:	6113      	str	r3, [r2, #16]
 8102e92:	4b08      	ldr	r3, [pc, #32]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102e94:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8102e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102ea2:	4a04      	ldr	r2, [pc, #16]	@ (8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102ea4:	430b      	orrs	r3, r1
 8102ea6:	6713      	str	r3, [r2, #112]	@ 0x70
 8102ea8:	e00c      	b.n	8102ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8102eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8102eb2:	e007      	b.n	8102ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8102eb4:	58024400 	.word	0x58024400
 8102eb8:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ecc:	f002 0301 	and.w	r3, r2, #1
 8102ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8102ed4:	2300      	movs	r3, #0
 8102ed6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8102eda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8102ede:	460b      	mov	r3, r1
 8102ee0:	4313      	orrs	r3, r2
 8102ee2:	f000 8089 	beq.w	8102ff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8102ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102eec:	2b28      	cmp	r3, #40	@ 0x28
 8102eee:	d86b      	bhi.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8102ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8102ef8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8102ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102ef6:	bf00      	nop
 8102ef8:	08102fd1 	.word	0x08102fd1
 8102efc:	08102fc9 	.word	0x08102fc9
 8102f00:	08102fc9 	.word	0x08102fc9
 8102f04:	08102fc9 	.word	0x08102fc9
 8102f08:	08102fc9 	.word	0x08102fc9
 8102f0c:	08102fc9 	.word	0x08102fc9
 8102f10:	08102fc9 	.word	0x08102fc9
 8102f14:	08102fc9 	.word	0x08102fc9
 8102f18:	08102f9d 	.word	0x08102f9d
 8102f1c:	08102fc9 	.word	0x08102fc9
 8102f20:	08102fc9 	.word	0x08102fc9
 8102f24:	08102fc9 	.word	0x08102fc9
 8102f28:	08102fc9 	.word	0x08102fc9
 8102f2c:	08102fc9 	.word	0x08102fc9
 8102f30:	08102fc9 	.word	0x08102fc9
 8102f34:	08102fc9 	.word	0x08102fc9
 8102f38:	08102fb3 	.word	0x08102fb3
 8102f3c:	08102fc9 	.word	0x08102fc9
 8102f40:	08102fc9 	.word	0x08102fc9
 8102f44:	08102fc9 	.word	0x08102fc9
 8102f48:	08102fc9 	.word	0x08102fc9
 8102f4c:	08102fc9 	.word	0x08102fc9
 8102f50:	08102fc9 	.word	0x08102fc9
 8102f54:	08102fc9 	.word	0x08102fc9
 8102f58:	08102fd1 	.word	0x08102fd1
 8102f5c:	08102fc9 	.word	0x08102fc9
 8102f60:	08102fc9 	.word	0x08102fc9
 8102f64:	08102fc9 	.word	0x08102fc9
 8102f68:	08102fc9 	.word	0x08102fc9
 8102f6c:	08102fc9 	.word	0x08102fc9
 8102f70:	08102fc9 	.word	0x08102fc9
 8102f74:	08102fc9 	.word	0x08102fc9
 8102f78:	08102fd1 	.word	0x08102fd1
 8102f7c:	08102fc9 	.word	0x08102fc9
 8102f80:	08102fc9 	.word	0x08102fc9
 8102f84:	08102fc9 	.word	0x08102fc9
 8102f88:	08102fc9 	.word	0x08102fc9
 8102f8c:	08102fc9 	.word	0x08102fc9
 8102f90:	08102fc9 	.word	0x08102fc9
 8102f94:	08102fc9 	.word	0x08102fc9
 8102f98:	08102fd1 	.word	0x08102fd1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fa0:	3308      	adds	r3, #8
 8102fa2:	2101      	movs	r1, #1
 8102fa4:	4618      	mov	r0, r3
 8102fa6:	f000 ffc3 	bl	8103f30 <RCCEx_PLL2_Config>
 8102faa:	4603      	mov	r3, r0
 8102fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102fb0:	e00f      	b.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fb6:	3328      	adds	r3, #40	@ 0x28
 8102fb8:	2101      	movs	r1, #1
 8102fba:	4618      	mov	r0, r3
 8102fbc:	f001 f86a 	bl	8104094 <RCCEx_PLL3_Config>
 8102fc0:	4603      	mov	r3, r0
 8102fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102fc6:	e004      	b.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102fc8:	2301      	movs	r3, #1
 8102fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102fce:	e000      	b.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8102fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102fd6:	2b00      	cmp	r3, #0
 8102fd8:	d10a      	bne.n	8102ff0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102fda:	4bbf      	ldr	r3, [pc, #764]	@ (81032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102fde:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8102fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fe6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102fe8:	4abb      	ldr	r2, [pc, #748]	@ (81032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102fea:	430b      	orrs	r3, r1
 8102fec:	6553      	str	r3, [r2, #84]	@ 0x54
 8102fee:	e003      	b.n	8102ff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103000:	f002 0302 	and.w	r3, r2, #2
 8103004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8103008:	2300      	movs	r3, #0
 810300a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810300e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8103012:	460b      	mov	r3, r1
 8103014:	4313      	orrs	r3, r2
 8103016:	d041      	beq.n	810309c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8103018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810301c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810301e:	2b05      	cmp	r3, #5
 8103020:	d824      	bhi.n	810306c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8103022:	a201      	add	r2, pc, #4	@ (adr r2, 8103028 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8103024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103028:	08103075 	.word	0x08103075
 810302c:	08103041 	.word	0x08103041
 8103030:	08103057 	.word	0x08103057
 8103034:	08103075 	.word	0x08103075
 8103038:	08103075 	.word	0x08103075
 810303c:	08103075 	.word	0x08103075
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103044:	3308      	adds	r3, #8
 8103046:	2101      	movs	r1, #1
 8103048:	4618      	mov	r0, r3
 810304a:	f000 ff71 	bl	8103f30 <RCCEx_PLL2_Config>
 810304e:	4603      	mov	r3, r0
 8103050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103054:	e00f      	b.n	8103076 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810305a:	3328      	adds	r3, #40	@ 0x28
 810305c:	2101      	movs	r1, #1
 810305e:	4618      	mov	r0, r3
 8103060:	f001 f818 	bl	8104094 <RCCEx_PLL3_Config>
 8103064:	4603      	mov	r3, r0
 8103066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810306a:	e004      	b.n	8103076 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810306c:	2301      	movs	r3, #1
 810306e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103072:	e000      	b.n	8103076 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8103074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810307a:	2b00      	cmp	r3, #0
 810307c:	d10a      	bne.n	8103094 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810307e:	4b96      	ldr	r3, [pc, #600]	@ (81032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103082:	f023 0107 	bic.w	r1, r3, #7
 8103086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810308a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810308c:	4a92      	ldr	r2, [pc, #584]	@ (81032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810308e:	430b      	orrs	r3, r1
 8103090:	6553      	str	r3, [r2, #84]	@ 0x54
 8103092:	e003      	b.n	810309c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810309c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030a4:	f002 0304 	and.w	r3, r2, #4
 81030a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81030ac:	2300      	movs	r3, #0
 81030ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81030b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81030b6:	460b      	mov	r3, r1
 81030b8:	4313      	orrs	r3, r2
 81030ba:	d044      	beq.n	8103146 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81030bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81030c4:	2b05      	cmp	r3, #5
 81030c6:	d825      	bhi.n	8103114 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81030c8:	a201      	add	r2, pc, #4	@ (adr r2, 81030d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81030ce:	bf00      	nop
 81030d0:	0810311d 	.word	0x0810311d
 81030d4:	081030e9 	.word	0x081030e9
 81030d8:	081030ff 	.word	0x081030ff
 81030dc:	0810311d 	.word	0x0810311d
 81030e0:	0810311d 	.word	0x0810311d
 81030e4:	0810311d 	.word	0x0810311d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81030e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030ec:	3308      	adds	r3, #8
 81030ee:	2101      	movs	r1, #1
 81030f0:	4618      	mov	r0, r3
 81030f2:	f000 ff1d 	bl	8103f30 <RCCEx_PLL2_Config>
 81030f6:	4603      	mov	r3, r0
 81030f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81030fc:	e00f      	b.n	810311e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81030fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103102:	3328      	adds	r3, #40	@ 0x28
 8103104:	2101      	movs	r1, #1
 8103106:	4618      	mov	r0, r3
 8103108:	f000 ffc4 	bl	8104094 <RCCEx_PLL3_Config>
 810310c:	4603      	mov	r3, r0
 810310e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103112:	e004      	b.n	810311e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103114:	2301      	movs	r3, #1
 8103116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810311a:	e000      	b.n	810311e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 810311c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810311e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103122:	2b00      	cmp	r3, #0
 8103124:	d10b      	bne.n	810313e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103126:	4b6c      	ldr	r3, [pc, #432]	@ (81032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810312a:	f023 0107 	bic.w	r1, r3, #7
 810312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103136:	4a68      	ldr	r2, [pc, #416]	@ (81032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103138:	430b      	orrs	r3, r1
 810313a:	6593      	str	r3, [r2, #88]	@ 0x58
 810313c:	e003      	b.n	8103146 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810313e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810314e:	f002 0320 	and.w	r3, r2, #32
 8103152:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8103156:	2300      	movs	r3, #0
 8103158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810315c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8103160:	460b      	mov	r3, r1
 8103162:	4313      	orrs	r3, r2
 8103164:	d055      	beq.n	8103212 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8103166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810316e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103172:	d033      	beq.n	81031dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8103174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103178:	d82c      	bhi.n	81031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810317a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810317e:	d02f      	beq.n	81031e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8103180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103184:	d826      	bhi.n	81031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8103186:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810318a:	d02b      	beq.n	81031e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 810318c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103190:	d820      	bhi.n	81031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8103192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103196:	d012      	beq.n	81031be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8103198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810319c:	d81a      	bhi.n	81031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810319e:	2b00      	cmp	r3, #0
 81031a0:	d022      	beq.n	81031e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81031a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81031a6:	d115      	bne.n	81031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81031a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031ac:	3308      	adds	r3, #8
 81031ae:	2100      	movs	r1, #0
 81031b0:	4618      	mov	r0, r3
 81031b2:	f000 febd 	bl	8103f30 <RCCEx_PLL2_Config>
 81031b6:	4603      	mov	r3, r0
 81031b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81031bc:	e015      	b.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81031be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031c2:	3328      	adds	r3, #40	@ 0x28
 81031c4:	2102      	movs	r1, #2
 81031c6:	4618      	mov	r0, r3
 81031c8:	f000 ff64 	bl	8104094 <RCCEx_PLL3_Config>
 81031cc:	4603      	mov	r3, r0
 81031ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81031d2:	e00a      	b.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81031d4:	2301      	movs	r3, #1
 81031d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81031da:	e006      	b.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81031dc:	bf00      	nop
 81031de:	e004      	b.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81031e0:	bf00      	nop
 81031e2:	e002      	b.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81031e4:	bf00      	nop
 81031e6:	e000      	b.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81031e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81031ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81031ee:	2b00      	cmp	r3, #0
 81031f0:	d10b      	bne.n	810320a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81031f2:	4b39      	ldr	r3, [pc, #228]	@ (81032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81031f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81031fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8103202:	4a35      	ldr	r2, [pc, #212]	@ (81032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103204:	430b      	orrs	r3, r1
 8103206:	6553      	str	r3, [r2, #84]	@ 0x54
 8103208:	e003      	b.n	8103212 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810320a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810320e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103216:	e9d3 2300 	ldrd	r2, r3, [r3]
 810321a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810321e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8103222:	2300      	movs	r3, #0
 8103224:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8103228:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810322c:	460b      	mov	r3, r1
 810322e:	4313      	orrs	r3, r2
 8103230:	d058      	beq.n	81032e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8103232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810323a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810323e:	d033      	beq.n	81032a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8103240:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103244:	d82c      	bhi.n	81032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8103246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810324a:	d02f      	beq.n	81032ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 810324c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103250:	d826      	bhi.n	81032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8103252:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103256:	d02b      	beq.n	81032b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8103258:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810325c:	d820      	bhi.n	81032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810325e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103262:	d012      	beq.n	810328a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8103264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103268:	d81a      	bhi.n	81032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810326a:	2b00      	cmp	r3, #0
 810326c:	d022      	beq.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810326e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8103272:	d115      	bne.n	81032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103278:	3308      	adds	r3, #8
 810327a:	2100      	movs	r1, #0
 810327c:	4618      	mov	r0, r3
 810327e:	f000 fe57 	bl	8103f30 <RCCEx_PLL2_Config>
 8103282:	4603      	mov	r3, r0
 8103284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103288:	e015      	b.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810328a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810328e:	3328      	adds	r3, #40	@ 0x28
 8103290:	2102      	movs	r1, #2
 8103292:	4618      	mov	r0, r3
 8103294:	f000 fefe 	bl	8104094 <RCCEx_PLL3_Config>
 8103298:	4603      	mov	r3, r0
 810329a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810329e:	e00a      	b.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81032a0:	2301      	movs	r3, #1
 81032a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81032a6:	e006      	b.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81032a8:	bf00      	nop
 81032aa:	e004      	b.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81032ac:	bf00      	nop
 81032ae:	e002      	b.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81032b0:	bf00      	nop
 81032b2:	e000      	b.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81032b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81032b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81032ba:	2b00      	cmp	r3, #0
 81032bc:	d10e      	bne.n	81032dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81032be:	4b06      	ldr	r3, [pc, #24]	@ (81032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81032c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81032c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81032c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81032ce:	4a02      	ldr	r2, [pc, #8]	@ (81032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81032d0:	430b      	orrs	r3, r1
 81032d2:	6593      	str	r3, [r2, #88]	@ 0x58
 81032d4:	e006      	b.n	81032e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81032d6:	bf00      	nop
 81032d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81032e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81032f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81032f4:	2300      	movs	r3, #0
 81032f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81032fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81032fe:	460b      	mov	r3, r1
 8103300:	4313      	orrs	r3, r2
 8103302:	d055      	beq.n	81033b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8103304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103308:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810330c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103310:	d033      	beq.n	810337a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8103312:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103316:	d82c      	bhi.n	8103372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810331c:	d02f      	beq.n	810337e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810331e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103322:	d826      	bhi.n	8103372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103324:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103328:	d02b      	beq.n	8103382 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810332a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810332e:	d820      	bhi.n	8103372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103334:	d012      	beq.n	810335c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8103336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810333a:	d81a      	bhi.n	8103372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810333c:	2b00      	cmp	r3, #0
 810333e:	d022      	beq.n	8103386 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8103340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103344:	d115      	bne.n	8103372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810334a:	3308      	adds	r3, #8
 810334c:	2100      	movs	r1, #0
 810334e:	4618      	mov	r0, r3
 8103350:	f000 fdee 	bl	8103f30 <RCCEx_PLL2_Config>
 8103354:	4603      	mov	r3, r0
 8103356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810335a:	e015      	b.n	8103388 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103360:	3328      	adds	r3, #40	@ 0x28
 8103362:	2102      	movs	r1, #2
 8103364:	4618      	mov	r0, r3
 8103366:	f000 fe95 	bl	8104094 <RCCEx_PLL3_Config>
 810336a:	4603      	mov	r3, r0
 810336c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103370:	e00a      	b.n	8103388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103372:	2301      	movs	r3, #1
 8103374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103378:	e006      	b.n	8103388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810337a:	bf00      	nop
 810337c:	e004      	b.n	8103388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810337e:	bf00      	nop
 8103380:	e002      	b.n	8103388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8103382:	bf00      	nop
 8103384:	e000      	b.n	8103388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8103386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810338c:	2b00      	cmp	r3, #0
 810338e:	d10b      	bne.n	81033a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103390:	4ba1      	ldr	r3, [pc, #644]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103394:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8103398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810339c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81033a0:	4a9d      	ldr	r2, [pc, #628]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81033a2:	430b      	orrs	r3, r1
 81033a4:	6593      	str	r3, [r2, #88]	@ 0x58
 81033a6:	e003      	b.n	81033b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81033ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033b8:	f002 0308 	and.w	r3, r2, #8
 81033bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81033c0:	2300      	movs	r3, #0
 81033c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81033c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81033ca:	460b      	mov	r3, r1
 81033cc:	4313      	orrs	r3, r2
 81033ce:	d01e      	beq.n	810340e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81033d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81033dc:	d10c      	bne.n	81033f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033e2:	3328      	adds	r3, #40	@ 0x28
 81033e4:	2102      	movs	r1, #2
 81033e6:	4618      	mov	r0, r3
 81033e8:	f000 fe54 	bl	8104094 <RCCEx_PLL3_Config>
 81033ec:	4603      	mov	r3, r0
 81033ee:	2b00      	cmp	r3, #0
 81033f0:	d002      	beq.n	81033f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81033f2:	2301      	movs	r3, #1
 81033f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81033f8:	4b87      	ldr	r3, [pc, #540]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81033fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81033fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8103400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103408:	4a83      	ldr	r2, [pc, #524]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810340a:	430b      	orrs	r3, r1
 810340c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103416:	f002 0310 	and.w	r3, r2, #16
 810341a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810341e:	2300      	movs	r3, #0
 8103420:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8103424:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8103428:	460b      	mov	r3, r1
 810342a:	4313      	orrs	r3, r2
 810342c:	d01e      	beq.n	810346c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810343a:	d10c      	bne.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103440:	3328      	adds	r3, #40	@ 0x28
 8103442:	2102      	movs	r1, #2
 8103444:	4618      	mov	r0, r3
 8103446:	f000 fe25 	bl	8104094 <RCCEx_PLL3_Config>
 810344a:	4603      	mov	r3, r0
 810344c:	2b00      	cmp	r3, #0
 810344e:	d002      	beq.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8103450:	2301      	movs	r3, #1
 8103452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103456:	4b70      	ldr	r3, [pc, #448]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810345a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103462:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103466:	4a6c      	ldr	r2, [pc, #432]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103468:	430b      	orrs	r3, r1
 810346a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810346c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103474:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8103478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810347c:	2300      	movs	r3, #0
 810347e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8103482:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8103486:	460b      	mov	r3, r1
 8103488:	4313      	orrs	r3, r2
 810348a:	d03e      	beq.n	810350a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810348c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103498:	d022      	beq.n	81034e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810349a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810349e:	d81b      	bhi.n	81034d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81034a0:	2b00      	cmp	r3, #0
 81034a2:	d003      	beq.n	81034ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81034a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81034a8:	d00b      	beq.n	81034c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81034aa:	e015      	b.n	81034d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034b0:	3308      	adds	r3, #8
 81034b2:	2100      	movs	r1, #0
 81034b4:	4618      	mov	r0, r3
 81034b6:	f000 fd3b 	bl	8103f30 <RCCEx_PLL2_Config>
 81034ba:	4603      	mov	r3, r0
 81034bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81034c0:	e00f      	b.n	81034e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034c6:	3328      	adds	r3, #40	@ 0x28
 81034c8:	2102      	movs	r1, #2
 81034ca:	4618      	mov	r0, r3
 81034cc:	f000 fde2 	bl	8104094 <RCCEx_PLL3_Config>
 81034d0:	4603      	mov	r3, r0
 81034d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81034d6:	e004      	b.n	81034e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81034d8:	2301      	movs	r3, #1
 81034da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81034de:	e000      	b.n	81034e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81034e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81034e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81034e6:	2b00      	cmp	r3, #0
 81034e8:	d10b      	bne.n	8103502 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81034ea:	4b4b      	ldr	r3, [pc, #300]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81034ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81034ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81034fa:	4a47      	ldr	r2, [pc, #284]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81034fc:	430b      	orrs	r3, r1
 81034fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8103500:	e003      	b.n	810350a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103512:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8103516:	67bb      	str	r3, [r7, #120]	@ 0x78
 8103518:	2300      	movs	r3, #0
 810351a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810351c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8103520:	460b      	mov	r3, r1
 8103522:	4313      	orrs	r3, r2
 8103524:	d03b      	beq.n	810359e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8103526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810352e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103532:	d01f      	beq.n	8103574 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8103534:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103538:	d818      	bhi.n	810356c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810353a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810353e:	d003      	beq.n	8103548 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8103540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103544:	d007      	beq.n	8103556 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103546:	e011      	b.n	810356c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103548:	4b33      	ldr	r3, [pc, #204]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810354c:	4a32      	ldr	r2, [pc, #200]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810354e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103554:	e00f      	b.n	8103576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810355a:	3328      	adds	r3, #40	@ 0x28
 810355c:	2101      	movs	r1, #1
 810355e:	4618      	mov	r0, r3
 8103560:	f000 fd98 	bl	8104094 <RCCEx_PLL3_Config>
 8103564:	4603      	mov	r3, r0
 8103566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810356a:	e004      	b.n	8103576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810356c:	2301      	movs	r3, #1
 810356e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103572:	e000      	b.n	8103576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8103574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810357a:	2b00      	cmp	r3, #0
 810357c:	d10b      	bne.n	8103596 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810357e:	4b26      	ldr	r3, [pc, #152]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103582:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810358e:	4a22      	ldr	r2, [pc, #136]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103590:	430b      	orrs	r3, r1
 8103592:	6553      	str	r3, [r2, #84]	@ 0x54
 8103594:	e003      	b.n	810359e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810359a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81035a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81035aa:	673b      	str	r3, [r7, #112]	@ 0x70
 81035ac:	2300      	movs	r3, #0
 81035ae:	677b      	str	r3, [r7, #116]	@ 0x74
 81035b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81035b4:	460b      	mov	r3, r1
 81035b6:	4313      	orrs	r3, r2
 81035b8:	d034      	beq.n	8103624 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81035c0:	2b00      	cmp	r3, #0
 81035c2:	d003      	beq.n	81035cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81035c8:	d007      	beq.n	81035da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81035ca:	e011      	b.n	81035f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81035cc:	4b12      	ldr	r3, [pc, #72]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81035ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035d0:	4a11      	ldr	r2, [pc, #68]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81035d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81035d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81035d8:	e00e      	b.n	81035f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035de:	3308      	adds	r3, #8
 81035e0:	2102      	movs	r1, #2
 81035e2:	4618      	mov	r0, r3
 81035e4:	f000 fca4 	bl	8103f30 <RCCEx_PLL2_Config>
 81035e8:	4603      	mov	r3, r0
 81035ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81035ee:	e003      	b.n	81035f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81035f0:	2301      	movs	r3, #1
 81035f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81035f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81035f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81035fc:	2b00      	cmp	r3, #0
 81035fe:	d10d      	bne.n	810361c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103600:	4b05      	ldr	r3, [pc, #20]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103604:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810360c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810360e:	4a02      	ldr	r2, [pc, #8]	@ (8103618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103610:	430b      	orrs	r3, r1
 8103612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103614:	e006      	b.n	8103624 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8103616:	bf00      	nop
 8103618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810361c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103628:	e9d3 2300 	ldrd	r2, r3, [r3]
 810362c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8103630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8103632:	2300      	movs	r3, #0
 8103634:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8103636:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810363a:	460b      	mov	r3, r1
 810363c:	4313      	orrs	r3, r2
 810363e:	d00c      	beq.n	810365a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103644:	3328      	adds	r3, #40	@ 0x28
 8103646:	2102      	movs	r1, #2
 8103648:	4618      	mov	r0, r3
 810364a:	f000 fd23 	bl	8104094 <RCCEx_PLL3_Config>
 810364e:	4603      	mov	r3, r0
 8103650:	2b00      	cmp	r3, #0
 8103652:	d002      	beq.n	810365a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8103654:	2301      	movs	r3, #1
 8103656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103662:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8103666:	663b      	str	r3, [r7, #96]	@ 0x60
 8103668:	2300      	movs	r3, #0
 810366a:	667b      	str	r3, [r7, #100]	@ 0x64
 810366c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8103670:	460b      	mov	r3, r1
 8103672:	4313      	orrs	r3, r2
 8103674:	d038      	beq.n	81036e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8103676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810367a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810367e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103682:	d018      	beq.n	81036b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8103684:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103688:	d811      	bhi.n	81036ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810368a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810368e:	d014      	beq.n	81036ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8103690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103694:	d80b      	bhi.n	81036ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8103696:	2b00      	cmp	r3, #0
 8103698:	d011      	beq.n	81036be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810369a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810369e:	d106      	bne.n	81036ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81036a0:	4bc3      	ldr	r3, [pc, #780]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036a4:	4ac2      	ldr	r2, [pc, #776]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81036a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81036aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81036ac:	e008      	b.n	81036c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81036ae:	2301      	movs	r3, #1
 81036b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81036b4:	e004      	b.n	81036c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81036b6:	bf00      	nop
 81036b8:	e002      	b.n	81036c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81036ba:	bf00      	nop
 81036bc:	e000      	b.n	81036c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81036be:	bf00      	nop
    }

    if (ret == HAL_OK)
 81036c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81036c4:	2b00      	cmp	r3, #0
 81036c6:	d10b      	bne.n	81036e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81036c8:	4bb9      	ldr	r3, [pc, #740]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81036cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81036d8:	4ab5      	ldr	r2, [pc, #724]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81036da:	430b      	orrs	r3, r1
 81036dc:	6553      	str	r3, [r2, #84]	@ 0x54
 81036de:	e003      	b.n	81036e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81036e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81036f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81036f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 81036f6:	2300      	movs	r3, #0
 81036f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81036fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81036fe:	460b      	mov	r3, r1
 8103700:	4313      	orrs	r3, r2
 8103702:	d009      	beq.n	8103718 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103704:	4baa      	ldr	r3, [pc, #680]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103708:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810370c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8103712:	4aa7      	ldr	r2, [pc, #668]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103714:	430b      	orrs	r3, r1
 8103716:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103720:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8103724:	653b      	str	r3, [r7, #80]	@ 0x50
 8103726:	2300      	movs	r3, #0
 8103728:	657b      	str	r3, [r7, #84]	@ 0x54
 810372a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810372e:	460b      	mov	r3, r1
 8103730:	4313      	orrs	r3, r2
 8103732:	d00a      	beq.n	810374a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103734:	4b9e      	ldr	r3, [pc, #632]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103736:	691b      	ldr	r3, [r3, #16]
 8103738:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810373c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103740:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103744:	4a9a      	ldr	r2, [pc, #616]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103746:	430b      	orrs	r3, r1
 8103748:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103752:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8103756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103758:	2300      	movs	r3, #0
 810375a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810375c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8103760:	460b      	mov	r3, r1
 8103762:	4313      	orrs	r3, r2
 8103764:	d009      	beq.n	810377a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103766:	4b92      	ldr	r3, [pc, #584]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810376a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103774:	4a8e      	ldr	r2, [pc, #568]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103776:	430b      	orrs	r3, r1
 8103778:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103782:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8103786:	643b      	str	r3, [r7, #64]	@ 0x40
 8103788:	2300      	movs	r3, #0
 810378a:	647b      	str	r3, [r7, #68]	@ 0x44
 810378c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8103790:	460b      	mov	r3, r1
 8103792:	4313      	orrs	r3, r2
 8103794:	d00e      	beq.n	81037b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103796:	4b86      	ldr	r3, [pc, #536]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103798:	691b      	ldr	r3, [r3, #16]
 810379a:	4a85      	ldr	r2, [pc, #532]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810379c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81037a0:	6113      	str	r3, [r2, #16]
 81037a2:	4b83      	ldr	r3, [pc, #524]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81037a4:	6919      	ldr	r1, [r3, #16]
 81037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81037ae:	4a80      	ldr	r2, [pc, #512]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81037b0:	430b      	orrs	r3, r1
 81037b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81037c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 81037c2:	2300      	movs	r3, #0
 81037c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81037c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81037ca:	460b      	mov	r3, r1
 81037cc:	4313      	orrs	r3, r2
 81037ce:	d009      	beq.n	81037e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81037d0:	4b77      	ldr	r3, [pc, #476]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81037d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81037d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81037de:	4a74      	ldr	r2, [pc, #464]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81037e0:	430b      	orrs	r3, r1
 81037e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81037f0:	633b      	str	r3, [r7, #48]	@ 0x30
 81037f2:	2300      	movs	r3, #0
 81037f4:	637b      	str	r3, [r7, #52]	@ 0x34
 81037f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81037fa:	460b      	mov	r3, r1
 81037fc:	4313      	orrs	r3, r2
 81037fe:	d00a      	beq.n	8103816 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103800:	4b6b      	ldr	r3, [pc, #428]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103804:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8103808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103810:	4a67      	ldr	r2, [pc, #412]	@ (81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103812:	430b      	orrs	r3, r1
 8103814:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8103816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810381e:	2100      	movs	r1, #0
 8103820:	62b9      	str	r1, [r7, #40]	@ 0x28
 8103822:	f003 0301 	and.w	r3, r3, #1
 8103826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8103828:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810382c:	460b      	mov	r3, r1
 810382e:	4313      	orrs	r3, r2
 8103830:	d011      	beq.n	8103856 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103836:	3308      	adds	r3, #8
 8103838:	2100      	movs	r1, #0
 810383a:	4618      	mov	r0, r3
 810383c:	f000 fb78 	bl	8103f30 <RCCEx_PLL2_Config>
 8103840:	4603      	mov	r3, r0
 8103842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810384a:	2b00      	cmp	r3, #0
 810384c:	d003      	beq.n	8103856 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810384e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8103856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810385e:	2100      	movs	r1, #0
 8103860:	6239      	str	r1, [r7, #32]
 8103862:	f003 0302 	and.w	r3, r3, #2
 8103866:	627b      	str	r3, [r7, #36]	@ 0x24
 8103868:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810386c:	460b      	mov	r3, r1
 810386e:	4313      	orrs	r3, r2
 8103870:	d011      	beq.n	8103896 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103876:	3308      	adds	r3, #8
 8103878:	2101      	movs	r1, #1
 810387a:	4618      	mov	r0, r3
 810387c:	f000 fb58 	bl	8103f30 <RCCEx_PLL2_Config>
 8103880:	4603      	mov	r3, r0
 8103882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810388a:	2b00      	cmp	r3, #0
 810388c:	d003      	beq.n	8103896 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810388e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8103896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810389e:	2100      	movs	r1, #0
 81038a0:	61b9      	str	r1, [r7, #24]
 81038a2:	f003 0304 	and.w	r3, r3, #4
 81038a6:	61fb      	str	r3, [r7, #28]
 81038a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81038ac:	460b      	mov	r3, r1
 81038ae:	4313      	orrs	r3, r2
 81038b0:	d011      	beq.n	81038d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038b6:	3308      	adds	r3, #8
 81038b8:	2102      	movs	r1, #2
 81038ba:	4618      	mov	r0, r3
 81038bc:	f000 fb38 	bl	8103f30 <RCCEx_PLL2_Config>
 81038c0:	4603      	mov	r3, r0
 81038c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81038c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81038ca:	2b00      	cmp	r3, #0
 81038cc:	d003      	beq.n	81038d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81038d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038de:	2100      	movs	r1, #0
 81038e0:	6139      	str	r1, [r7, #16]
 81038e2:	f003 0308 	and.w	r3, r3, #8
 81038e6:	617b      	str	r3, [r7, #20]
 81038e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81038ec:	460b      	mov	r3, r1
 81038ee:	4313      	orrs	r3, r2
 81038f0:	d011      	beq.n	8103916 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038f6:	3328      	adds	r3, #40	@ 0x28
 81038f8:	2100      	movs	r1, #0
 81038fa:	4618      	mov	r0, r3
 81038fc:	f000 fbca 	bl	8104094 <RCCEx_PLL3_Config>
 8103900:	4603      	mov	r3, r0
 8103902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8103906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810390a:	2b00      	cmp	r3, #0
 810390c:	d003      	beq.n	8103916 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810390e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8103916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810391e:	2100      	movs	r1, #0
 8103920:	60b9      	str	r1, [r7, #8]
 8103922:	f003 0310 	and.w	r3, r3, #16
 8103926:	60fb      	str	r3, [r7, #12]
 8103928:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810392c:	460b      	mov	r3, r1
 810392e:	4313      	orrs	r3, r2
 8103930:	d011      	beq.n	8103956 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103936:	3328      	adds	r3, #40	@ 0x28
 8103938:	2101      	movs	r1, #1
 810393a:	4618      	mov	r0, r3
 810393c:	f000 fbaa 	bl	8104094 <RCCEx_PLL3_Config>
 8103940:	4603      	mov	r3, r0
 8103942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810394a:	2b00      	cmp	r3, #0
 810394c:	d003      	beq.n	8103956 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810394e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8103956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810395e:	2100      	movs	r1, #0
 8103960:	6039      	str	r1, [r7, #0]
 8103962:	f003 0320 	and.w	r3, r3, #32
 8103966:	607b      	str	r3, [r7, #4]
 8103968:	e9d7 1200 	ldrd	r1, r2, [r7]
 810396c:	460b      	mov	r3, r1
 810396e:	4313      	orrs	r3, r2
 8103970:	d011      	beq.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103976:	3328      	adds	r3, #40	@ 0x28
 8103978:	2102      	movs	r1, #2
 810397a:	4618      	mov	r0, r3
 810397c:	f000 fb8a 	bl	8104094 <RCCEx_PLL3_Config>
 8103980:	4603      	mov	r3, r0
 8103982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810398a:	2b00      	cmp	r3, #0
 810398c:	d003      	beq.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810398e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8103996:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810399a:	2b00      	cmp	r3, #0
 810399c:	d101      	bne.n	81039a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810399e:	2300      	movs	r3, #0
 81039a0:	e000      	b.n	81039a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81039a2:	2301      	movs	r3, #1
}
 81039a4:	4618      	mov	r0, r3
 81039a6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 81039aa:	46bd      	mov	sp, r7
 81039ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81039b0:	58024400 	.word	0x58024400

081039b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81039b4:	b580      	push	{r7, lr}
 81039b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81039b8:	f7fe fd94 	bl	81024e4 <HAL_RCC_GetHCLKFreq>
 81039bc:	4602      	mov	r2, r0
 81039be:	4b06      	ldr	r3, [pc, #24]	@ (81039d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81039c0:	6a1b      	ldr	r3, [r3, #32]
 81039c2:	091b      	lsrs	r3, r3, #4
 81039c4:	f003 0307 	and.w	r3, r3, #7
 81039c8:	4904      	ldr	r1, [pc, #16]	@ (81039dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81039ca:	5ccb      	ldrb	r3, [r1, r3]
 81039cc:	f003 031f 	and.w	r3, r3, #31
 81039d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81039d4:	4618      	mov	r0, r3
 81039d6:	bd80      	pop	{r7, pc}
 81039d8:	58024400 	.word	0x58024400
 81039dc:	081089a8 	.word	0x081089a8

081039e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81039e0:	b480      	push	{r7}
 81039e2:	b089      	sub	sp, #36	@ 0x24
 81039e4:	af00      	add	r7, sp, #0
 81039e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81039e8:	4ba1      	ldr	r3, [pc, #644]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81039ec:	f003 0303 	and.w	r3, r3, #3
 81039f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81039f2:	4b9f      	ldr	r3, [pc, #636]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81039f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81039f6:	0b1b      	lsrs	r3, r3, #12
 81039f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81039fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81039fe:	4b9c      	ldr	r3, [pc, #624]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103a02:	091b      	lsrs	r3, r3, #4
 8103a04:	f003 0301 	and.w	r3, r3, #1
 8103a08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8103a0a:	4b99      	ldr	r3, [pc, #612]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103a0e:	08db      	lsrs	r3, r3, #3
 8103a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103a14:	693a      	ldr	r2, [r7, #16]
 8103a16:	fb02 f303 	mul.w	r3, r2, r3
 8103a1a:	ee07 3a90 	vmov	s15, r3
 8103a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103a26:	697b      	ldr	r3, [r7, #20]
 8103a28:	2b00      	cmp	r3, #0
 8103a2a:	f000 8111 	beq.w	8103c50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8103a2e:	69bb      	ldr	r3, [r7, #24]
 8103a30:	2b02      	cmp	r3, #2
 8103a32:	f000 8083 	beq.w	8103b3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103a36:	69bb      	ldr	r3, [r7, #24]
 8103a38:	2b02      	cmp	r3, #2
 8103a3a:	f200 80a1 	bhi.w	8103b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8103a3e:	69bb      	ldr	r3, [r7, #24]
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	d003      	beq.n	8103a4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103a44:	69bb      	ldr	r3, [r7, #24]
 8103a46:	2b01      	cmp	r3, #1
 8103a48:	d056      	beq.n	8103af8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8103a4a:	e099      	b.n	8103b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103a4c:	4b88      	ldr	r3, [pc, #544]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103a4e:	681b      	ldr	r3, [r3, #0]
 8103a50:	f003 0320 	and.w	r3, r3, #32
 8103a54:	2b00      	cmp	r3, #0
 8103a56:	d02d      	beq.n	8103ab4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103a58:	4b85      	ldr	r3, [pc, #532]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103a5a:	681b      	ldr	r3, [r3, #0]
 8103a5c:	08db      	lsrs	r3, r3, #3
 8103a5e:	f003 0303 	and.w	r3, r3, #3
 8103a62:	4a84      	ldr	r2, [pc, #528]	@ (8103c74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103a64:	fa22 f303 	lsr.w	r3, r2, r3
 8103a68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103a6a:	68bb      	ldr	r3, [r7, #8]
 8103a6c:	ee07 3a90 	vmov	s15, r3
 8103a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103a74:	697b      	ldr	r3, [r7, #20]
 8103a76:	ee07 3a90 	vmov	s15, r3
 8103a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103a82:	4b7b      	ldr	r3, [pc, #492]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103a8a:	ee07 3a90 	vmov	s15, r3
 8103a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8103a96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8103c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103aae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8103ab2:	e087      	b.n	8103bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103ab4:	697b      	ldr	r3, [r7, #20]
 8103ab6:	ee07 3a90 	vmov	s15, r3
 8103aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103abe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8103c7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ace:	ee07 3a90 	vmov	s15, r3
 8103ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8103ada:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8103c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103af6:	e065      	b.n	8103bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103af8:	697b      	ldr	r3, [r7, #20]
 8103afa:	ee07 3a90 	vmov	s15, r3
 8103afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8103c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103b0a:	4b59      	ldr	r3, [pc, #356]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103b12:	ee07 3a90 	vmov	s15, r3
 8103b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103b1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8103c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103b3a:	e043      	b.n	8103bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103b3c:	697b      	ldr	r3, [r7, #20]
 8103b3e:	ee07 3a90 	vmov	s15, r3
 8103b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8103c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8103b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103b4e:	4b48      	ldr	r3, [pc, #288]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103b56:	ee07 3a90 	vmov	s15, r3
 8103b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103b62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8103c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103b7e:	e021      	b.n	8103bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103b80:	697b      	ldr	r3, [r7, #20]
 8103b82:	ee07 3a90 	vmov	s15, r3
 8103b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8103c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103b92:	4b37      	ldr	r3, [pc, #220]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103b9a:	ee07 3a90 	vmov	s15, r3
 8103b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8103ba6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8103c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103bc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8103bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103bc8:	0a5b      	lsrs	r3, r3, #9
 8103bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103bce:	ee07 3a90 	vmov	s15, r3
 8103bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103bd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103bda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8103be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103bea:	ee17 2a90 	vmov	r2, s15
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8103bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103bf6:	0c1b      	lsrs	r3, r3, #16
 8103bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103bfc:	ee07 3a90 	vmov	s15, r3
 8103c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103c08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103c18:	ee17 2a90 	vmov	r2, s15
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8103c20:	4b13      	ldr	r3, [pc, #76]	@ (8103c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103c24:	0e1b      	lsrs	r3, r3, #24
 8103c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103c2a:	ee07 3a90 	vmov	s15, r3
 8103c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8103c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103c46:	ee17 2a90 	vmov	r2, s15
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8103c4e:	e008      	b.n	8103c62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	2200      	movs	r2, #0
 8103c54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	2200      	movs	r2, #0
 8103c5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	2200      	movs	r2, #0
 8103c60:	609a      	str	r2, [r3, #8]
}
 8103c62:	bf00      	nop
 8103c64:	3724      	adds	r7, #36	@ 0x24
 8103c66:	46bd      	mov	sp, r7
 8103c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c6c:	4770      	bx	lr
 8103c6e:	bf00      	nop
 8103c70:	58024400 	.word	0x58024400
 8103c74:	03d09000 	.word	0x03d09000
 8103c78:	46000000 	.word	0x46000000
 8103c7c:	4c742400 	.word	0x4c742400
 8103c80:	4a742400 	.word	0x4a742400
 8103c84:	4c371b00 	.word	0x4c371b00

08103c88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8103c88:	b480      	push	{r7}
 8103c8a:	b089      	sub	sp, #36	@ 0x24
 8103c8c:	af00      	add	r7, sp, #0
 8103c8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103c90:	4ba1      	ldr	r3, [pc, #644]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103c94:	f003 0303 	and.w	r3, r3, #3
 8103c98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8103c9a:	4b9f      	ldr	r3, [pc, #636]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103c9e:	0d1b      	lsrs	r3, r3, #20
 8103ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103ca4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8103ca6:	4b9c      	ldr	r3, [pc, #624]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103caa:	0a1b      	lsrs	r3, r3, #8
 8103cac:	f003 0301 	and.w	r3, r3, #1
 8103cb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8103cb2:	4b99      	ldr	r3, [pc, #612]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103cb6:	08db      	lsrs	r3, r3, #3
 8103cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103cbc:	693a      	ldr	r2, [r7, #16]
 8103cbe:	fb02 f303 	mul.w	r3, r2, r3
 8103cc2:	ee07 3a90 	vmov	s15, r3
 8103cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103cca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8103cce:	697b      	ldr	r3, [r7, #20]
 8103cd0:	2b00      	cmp	r3, #0
 8103cd2:	f000 8111 	beq.w	8103ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8103cd6:	69bb      	ldr	r3, [r7, #24]
 8103cd8:	2b02      	cmp	r3, #2
 8103cda:	f000 8083 	beq.w	8103de4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8103cde:	69bb      	ldr	r3, [r7, #24]
 8103ce0:	2b02      	cmp	r3, #2
 8103ce2:	f200 80a1 	bhi.w	8103e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8103ce6:	69bb      	ldr	r3, [r7, #24]
 8103ce8:	2b00      	cmp	r3, #0
 8103cea:	d003      	beq.n	8103cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8103cec:	69bb      	ldr	r3, [r7, #24]
 8103cee:	2b01      	cmp	r3, #1
 8103cf0:	d056      	beq.n	8103da0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8103cf2:	e099      	b.n	8103e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103cf4:	4b88      	ldr	r3, [pc, #544]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103cf6:	681b      	ldr	r3, [r3, #0]
 8103cf8:	f003 0320 	and.w	r3, r3, #32
 8103cfc:	2b00      	cmp	r3, #0
 8103cfe:	d02d      	beq.n	8103d5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103d00:	4b85      	ldr	r3, [pc, #532]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103d02:	681b      	ldr	r3, [r3, #0]
 8103d04:	08db      	lsrs	r3, r3, #3
 8103d06:	f003 0303 	and.w	r3, r3, #3
 8103d0a:	4a84      	ldr	r2, [pc, #528]	@ (8103f1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8103d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8103d10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103d12:	68bb      	ldr	r3, [r7, #8]
 8103d14:	ee07 3a90 	vmov	s15, r3
 8103d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d1c:	697b      	ldr	r3, [r7, #20]
 8103d1e:	ee07 3a90 	vmov	s15, r3
 8103d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103d2a:	4b7b      	ldr	r3, [pc, #492]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103d32:	ee07 3a90 	vmov	s15, r3
 8103d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103d3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8103f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8103d5a:	e087      	b.n	8103e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103d5c:	697b      	ldr	r3, [r7, #20]
 8103d5e:	ee07 3a90 	vmov	s15, r3
 8103d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8103f24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8103d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103d76:	ee07 3a90 	vmov	s15, r3
 8103d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103d82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8103f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103d9e:	e065      	b.n	8103e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103da0:	697b      	ldr	r3, [r7, #20]
 8103da2:	ee07 3a90 	vmov	s15, r3
 8103da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103daa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8103f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103db2:	4b59      	ldr	r3, [pc, #356]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103dba:	ee07 3a90 	vmov	s15, r3
 8103dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8103dc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8103f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103de2:	e043      	b.n	8103e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103de4:	697b      	ldr	r3, [r7, #20]
 8103de6:	ee07 3a90 	vmov	s15, r3
 8103dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103dee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8103f2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8103df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103df6:	4b48      	ldr	r3, [pc, #288]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103dfe:	ee07 3a90 	vmov	s15, r3
 8103e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8103e0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8103f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103e26:	e021      	b.n	8103e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103e28:	697b      	ldr	r3, [r7, #20]
 8103e2a:	ee07 3a90 	vmov	s15, r3
 8103e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8103f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e3a:	4b37      	ldr	r3, [pc, #220]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e42:	ee07 3a90 	vmov	s15, r3
 8103e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103e4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8103f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103e6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8103e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103e70:	0a5b      	lsrs	r3, r3, #9
 8103e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103e76:	ee07 3a90 	vmov	s15, r3
 8103e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8103e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103e92:	ee17 2a90 	vmov	r2, s15
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8103e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103e9e:	0c1b      	lsrs	r3, r3, #16
 8103ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103ea4:	ee07 3a90 	vmov	s15, r3
 8103ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103eac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8103eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103ec0:	ee17 2a90 	vmov	r2, s15
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8103ec8:	4b13      	ldr	r3, [pc, #76]	@ (8103f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103ecc:	0e1b      	lsrs	r3, r3, #24
 8103ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103ed2:	ee07 3a90 	vmov	s15, r3
 8103ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8103ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103eee:	ee17 2a90 	vmov	r2, s15
 8103ef2:	687b      	ldr	r3, [r7, #4]
 8103ef4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8103ef6:	e008      	b.n	8103f0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	2200      	movs	r2, #0
 8103efc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8103efe:	687b      	ldr	r3, [r7, #4]
 8103f00:	2200      	movs	r2, #0
 8103f02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8103f04:	687b      	ldr	r3, [r7, #4]
 8103f06:	2200      	movs	r2, #0
 8103f08:	609a      	str	r2, [r3, #8]
}
 8103f0a:	bf00      	nop
 8103f0c:	3724      	adds	r7, #36	@ 0x24
 8103f0e:	46bd      	mov	sp, r7
 8103f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f14:	4770      	bx	lr
 8103f16:	bf00      	nop
 8103f18:	58024400 	.word	0x58024400
 8103f1c:	03d09000 	.word	0x03d09000
 8103f20:	46000000 	.word	0x46000000
 8103f24:	4c742400 	.word	0x4c742400
 8103f28:	4a742400 	.word	0x4a742400
 8103f2c:	4c371b00 	.word	0x4c371b00

08103f30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103f30:	b580      	push	{r7, lr}
 8103f32:	b084      	sub	sp, #16
 8103f34:	af00      	add	r7, sp, #0
 8103f36:	6078      	str	r0, [r7, #4]
 8103f38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103f3a:	2300      	movs	r3, #0
 8103f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103f3e:	4b54      	ldr	r3, [pc, #336]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f42:	f003 0303 	and.w	r3, r3, #3
 8103f46:	2b03      	cmp	r3, #3
 8103f48:	d101      	bne.n	8103f4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103f4a:	2301      	movs	r3, #1
 8103f4c:	e09b      	b.n	8104086 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8103f4e:	4b50      	ldr	r3, [pc, #320]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	4a4f      	ldr	r2, [pc, #316]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103f54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8103f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103f5a:	f7fc ff07 	bl	8100d6c <HAL_GetTick>
 8103f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103f60:	e008      	b.n	8103f74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103f62:	f7fc ff03 	bl	8100d6c <HAL_GetTick>
 8103f66:	4602      	mov	r2, r0
 8103f68:	68bb      	ldr	r3, [r7, #8]
 8103f6a:	1ad3      	subs	r3, r2, r3
 8103f6c:	2b02      	cmp	r3, #2
 8103f6e:	d901      	bls.n	8103f74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103f70:	2303      	movs	r3, #3
 8103f72:	e088      	b.n	8104086 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103f74:	4b46      	ldr	r3, [pc, #280]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103f76:	681b      	ldr	r3, [r3, #0]
 8103f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103f7c:	2b00      	cmp	r3, #0
 8103f7e:	d1f0      	bne.n	8103f62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103f80:	4b43      	ldr	r3, [pc, #268]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f84:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	681b      	ldr	r3, [r3, #0]
 8103f8c:	031b      	lsls	r3, r3, #12
 8103f8e:	4940      	ldr	r1, [pc, #256]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103f90:	4313      	orrs	r3, r2
 8103f92:	628b      	str	r3, [r1, #40]	@ 0x28
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	685b      	ldr	r3, [r3, #4]
 8103f98:	3b01      	subs	r3, #1
 8103f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	689b      	ldr	r3, [r3, #8]
 8103fa2:	3b01      	subs	r3, #1
 8103fa4:	025b      	lsls	r3, r3, #9
 8103fa6:	b29b      	uxth	r3, r3
 8103fa8:	431a      	orrs	r2, r3
 8103faa:	687b      	ldr	r3, [r7, #4]
 8103fac:	68db      	ldr	r3, [r3, #12]
 8103fae:	3b01      	subs	r3, #1
 8103fb0:	041b      	lsls	r3, r3, #16
 8103fb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8103fb6:	431a      	orrs	r2, r3
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	691b      	ldr	r3, [r3, #16]
 8103fbc:	3b01      	subs	r3, #1
 8103fbe:	061b      	lsls	r3, r3, #24
 8103fc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103fc4:	4932      	ldr	r1, [pc, #200]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103fc6:	4313      	orrs	r3, r2
 8103fc8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103fca:	4b31      	ldr	r3, [pc, #196]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103fce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8103fd2:	687b      	ldr	r3, [r7, #4]
 8103fd4:	695b      	ldr	r3, [r3, #20]
 8103fd6:	492e      	ldr	r1, [pc, #184]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103fd8:	4313      	orrs	r3, r2
 8103fda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103fe0:	f023 0220 	bic.w	r2, r3, #32
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	699b      	ldr	r3, [r3, #24]
 8103fe8:	4929      	ldr	r1, [pc, #164]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103fea:	4313      	orrs	r3, r2
 8103fec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103fee:	4b28      	ldr	r3, [pc, #160]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103ff2:	4a27      	ldr	r2, [pc, #156]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103ff4:	f023 0310 	bic.w	r3, r3, #16
 8103ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103ffa:	4b25      	ldr	r3, [pc, #148]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8103ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104002:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8104006:	687a      	ldr	r2, [r7, #4]
 8104008:	69d2      	ldr	r2, [r2, #28]
 810400a:	00d2      	lsls	r2, r2, #3
 810400c:	4920      	ldr	r1, [pc, #128]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 810400e:	4313      	orrs	r3, r2
 8104010:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104012:	4b1f      	ldr	r3, [pc, #124]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8104014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104016:	4a1e      	ldr	r2, [pc, #120]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8104018:	f043 0310 	orr.w	r3, r3, #16
 810401c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810401e:	683b      	ldr	r3, [r7, #0]
 8104020:	2b00      	cmp	r3, #0
 8104022:	d106      	bne.n	8104032 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104024:	4b1a      	ldr	r3, [pc, #104]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8104026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104028:	4a19      	ldr	r2, [pc, #100]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 810402a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810402e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104030:	e00f      	b.n	8104052 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104032:	683b      	ldr	r3, [r7, #0]
 8104034:	2b01      	cmp	r3, #1
 8104036:	d106      	bne.n	8104046 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104038:	4b15      	ldr	r3, [pc, #84]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 810403a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810403c:	4a14      	ldr	r2, [pc, #80]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 810403e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8104042:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104044:	e005      	b.n	8104052 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104046:	4b12      	ldr	r3, [pc, #72]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8104048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810404a:	4a11      	ldr	r2, [pc, #68]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 810404c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8104050:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104052:	4b0f      	ldr	r3, [pc, #60]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	4a0e      	ldr	r2, [pc, #56]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 8104058:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810405c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810405e:	f7fc fe85 	bl	8100d6c <HAL_GetTick>
 8104062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104064:	e008      	b.n	8104078 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104066:	f7fc fe81 	bl	8100d6c <HAL_GetTick>
 810406a:	4602      	mov	r2, r0
 810406c:	68bb      	ldr	r3, [r7, #8]
 810406e:	1ad3      	subs	r3, r2, r3
 8104070:	2b02      	cmp	r3, #2
 8104072:	d901      	bls.n	8104078 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104074:	2303      	movs	r3, #3
 8104076:	e006      	b.n	8104086 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104078:	4b05      	ldr	r3, [pc, #20]	@ (8104090 <RCCEx_PLL2_Config+0x160>)
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104080:	2b00      	cmp	r3, #0
 8104082:	d0f0      	beq.n	8104066 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104084:	7bfb      	ldrb	r3, [r7, #15]
}
 8104086:	4618      	mov	r0, r3
 8104088:	3710      	adds	r7, #16
 810408a:	46bd      	mov	sp, r7
 810408c:	bd80      	pop	{r7, pc}
 810408e:	bf00      	nop
 8104090:	58024400 	.word	0x58024400

08104094 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104094:	b580      	push	{r7, lr}
 8104096:	b084      	sub	sp, #16
 8104098:	af00      	add	r7, sp, #0
 810409a:	6078      	str	r0, [r7, #4]
 810409c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810409e:	2300      	movs	r3, #0
 81040a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81040a2:	4b54      	ldr	r3, [pc, #336]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 81040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81040a6:	f003 0303 	and.w	r3, r3, #3
 81040aa:	2b03      	cmp	r3, #3
 81040ac:	d101      	bne.n	81040b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81040ae:	2301      	movs	r3, #1
 81040b0:	e09b      	b.n	81041ea <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81040b2:	4b50      	ldr	r3, [pc, #320]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 81040b4:	681b      	ldr	r3, [r3, #0]
 81040b6:	4a4f      	ldr	r2, [pc, #316]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 81040b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81040bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81040be:	f7fc fe55 	bl	8100d6c <HAL_GetTick>
 81040c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81040c4:	e008      	b.n	81040d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81040c6:	f7fc fe51 	bl	8100d6c <HAL_GetTick>
 81040ca:	4602      	mov	r2, r0
 81040cc:	68bb      	ldr	r3, [r7, #8]
 81040ce:	1ad3      	subs	r3, r2, r3
 81040d0:	2b02      	cmp	r3, #2
 81040d2:	d901      	bls.n	81040d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81040d4:	2303      	movs	r3, #3
 81040d6:	e088      	b.n	81041ea <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81040d8:	4b46      	ldr	r3, [pc, #280]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 81040da:	681b      	ldr	r3, [r3, #0]
 81040dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81040e0:	2b00      	cmp	r3, #0
 81040e2:	d1f0      	bne.n	81040c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81040e4:	4b43      	ldr	r3, [pc, #268]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 81040e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81040e8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	051b      	lsls	r3, r3, #20
 81040f2:	4940      	ldr	r1, [pc, #256]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 81040f4:	4313      	orrs	r3, r2
 81040f6:	628b      	str	r3, [r1, #40]	@ 0x28
 81040f8:	687b      	ldr	r3, [r7, #4]
 81040fa:	685b      	ldr	r3, [r3, #4]
 81040fc:	3b01      	subs	r3, #1
 81040fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104102:	687b      	ldr	r3, [r7, #4]
 8104104:	689b      	ldr	r3, [r3, #8]
 8104106:	3b01      	subs	r3, #1
 8104108:	025b      	lsls	r3, r3, #9
 810410a:	b29b      	uxth	r3, r3
 810410c:	431a      	orrs	r2, r3
 810410e:	687b      	ldr	r3, [r7, #4]
 8104110:	68db      	ldr	r3, [r3, #12]
 8104112:	3b01      	subs	r3, #1
 8104114:	041b      	lsls	r3, r3, #16
 8104116:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810411a:	431a      	orrs	r2, r3
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	691b      	ldr	r3, [r3, #16]
 8104120:	3b01      	subs	r3, #1
 8104122:	061b      	lsls	r3, r3, #24
 8104124:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104128:	4932      	ldr	r1, [pc, #200]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 810412a:	4313      	orrs	r3, r2
 810412c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810412e:	4b31      	ldr	r3, [pc, #196]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 8104130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104132:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8104136:	687b      	ldr	r3, [r7, #4]
 8104138:	695b      	ldr	r3, [r3, #20]
 810413a:	492e      	ldr	r1, [pc, #184]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 810413c:	4313      	orrs	r3, r2
 810413e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104140:	4b2c      	ldr	r3, [pc, #176]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 8104142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104144:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	699b      	ldr	r3, [r3, #24]
 810414c:	4929      	ldr	r1, [pc, #164]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 810414e:	4313      	orrs	r3, r2
 8104150:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104152:	4b28      	ldr	r3, [pc, #160]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 8104154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104156:	4a27      	ldr	r2, [pc, #156]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 8104158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810415c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810415e:	4b25      	ldr	r3, [pc, #148]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 8104160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104166:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810416a:	687a      	ldr	r2, [r7, #4]
 810416c:	69d2      	ldr	r2, [r2, #28]
 810416e:	00d2      	lsls	r2, r2, #3
 8104170:	4920      	ldr	r1, [pc, #128]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 8104172:	4313      	orrs	r3, r2
 8104174:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104176:	4b1f      	ldr	r3, [pc, #124]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 8104178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810417a:	4a1e      	ldr	r2, [pc, #120]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 810417c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104180:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8104182:	683b      	ldr	r3, [r7, #0]
 8104184:	2b00      	cmp	r3, #0
 8104186:	d106      	bne.n	8104196 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104188:	4b1a      	ldr	r3, [pc, #104]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 810418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810418c:	4a19      	ldr	r2, [pc, #100]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 810418e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8104192:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104194:	e00f      	b.n	81041b6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104196:	683b      	ldr	r3, [r7, #0]
 8104198:	2b01      	cmp	r3, #1
 810419a:	d106      	bne.n	81041aa <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810419c:	4b15      	ldr	r3, [pc, #84]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 810419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81041a0:	4a14      	ldr	r2, [pc, #80]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 81041a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81041a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81041a8:	e005      	b.n	81041b6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81041aa:	4b12      	ldr	r3, [pc, #72]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 81041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81041ae:	4a11      	ldr	r2, [pc, #68]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 81041b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81041b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81041b6:	4b0f      	ldr	r3, [pc, #60]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 81041b8:	681b      	ldr	r3, [r3, #0]
 81041ba:	4a0e      	ldr	r2, [pc, #56]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 81041bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81041c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81041c2:	f7fc fdd3 	bl	8100d6c <HAL_GetTick>
 81041c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81041c8:	e008      	b.n	81041dc <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81041ca:	f7fc fdcf 	bl	8100d6c <HAL_GetTick>
 81041ce:	4602      	mov	r2, r0
 81041d0:	68bb      	ldr	r3, [r7, #8]
 81041d2:	1ad3      	subs	r3, r2, r3
 81041d4:	2b02      	cmp	r3, #2
 81041d6:	d901      	bls.n	81041dc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81041d8:	2303      	movs	r3, #3
 81041da:	e006      	b.n	81041ea <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81041dc:	4b05      	ldr	r3, [pc, #20]	@ (81041f4 <RCCEx_PLL3_Config+0x160>)
 81041de:	681b      	ldr	r3, [r3, #0]
 81041e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81041e4:	2b00      	cmp	r3, #0
 81041e6:	d0f0      	beq.n	81041ca <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81041e8:	7bfb      	ldrb	r3, [r7, #15]
}
 81041ea:	4618      	mov	r0, r3
 81041ec:	3710      	adds	r7, #16
 81041ee:	46bd      	mov	sp, r7
 81041f0:	bd80      	pop	{r7, pc}
 81041f2:	bf00      	nop
 81041f4:	58024400 	.word	0x58024400

081041f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81041f8:	b580      	push	{r7, lr}
 81041fa:	b082      	sub	sp, #8
 81041fc:	af00      	add	r7, sp, #0
 81041fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8104200:	687b      	ldr	r3, [r7, #4]
 8104202:	2b00      	cmp	r3, #0
 8104204:	d101      	bne.n	810420a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8104206:	2301      	movs	r3, #1
 8104208:	e042      	b.n	8104290 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810420a:	687b      	ldr	r3, [r7, #4]
 810420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104210:	2b00      	cmp	r3, #0
 8104212:	d106      	bne.n	8104222 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8104214:	687b      	ldr	r3, [r7, #4]
 8104216:	2200      	movs	r2, #0
 8104218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810421c:	6878      	ldr	r0, [r7, #4]
 810421e:	f7fc fc2d 	bl	8100a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8104222:	687b      	ldr	r3, [r7, #4]
 8104224:	2224      	movs	r2, #36	@ 0x24
 8104226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	681a      	ldr	r2, [r3, #0]
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	681b      	ldr	r3, [r3, #0]
 8104234:	f022 0201 	bic.w	r2, r2, #1
 8104238:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810423a:	687b      	ldr	r3, [r7, #4]
 810423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810423e:	2b00      	cmp	r3, #0
 8104240:	d002      	beq.n	8104248 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8104242:	6878      	ldr	r0, [r7, #4]
 8104244:	f001 fa14 	bl	8105670 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8104248:	6878      	ldr	r0, [r7, #4]
 810424a:	f000 fca9 	bl	8104ba0 <UART_SetConfig>
 810424e:	4603      	mov	r3, r0
 8104250:	2b01      	cmp	r3, #1
 8104252:	d101      	bne.n	8104258 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8104254:	2301      	movs	r3, #1
 8104256:	e01b      	b.n	8104290 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	681b      	ldr	r3, [r3, #0]
 810425c:	685a      	ldr	r2, [r3, #4]
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	681b      	ldr	r3, [r3, #0]
 8104262:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8104266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	681b      	ldr	r3, [r3, #0]
 810426c:	689a      	ldr	r2, [r3, #8]
 810426e:	687b      	ldr	r3, [r7, #4]
 8104270:	681b      	ldr	r3, [r3, #0]
 8104272:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8104276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8104278:	687b      	ldr	r3, [r7, #4]
 810427a:	681b      	ldr	r3, [r3, #0]
 810427c:	681a      	ldr	r2, [r3, #0]
 810427e:	687b      	ldr	r3, [r7, #4]
 8104280:	681b      	ldr	r3, [r3, #0]
 8104282:	f042 0201 	orr.w	r2, r2, #1
 8104286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8104288:	6878      	ldr	r0, [r7, #4]
 810428a:	f001 fa93 	bl	81057b4 <UART_CheckIdleState>
 810428e:	4603      	mov	r3, r0
}
 8104290:	4618      	mov	r0, r3
 8104292:	3708      	adds	r7, #8
 8104294:	46bd      	mov	sp, r7
 8104296:	bd80      	pop	{r7, pc}

08104298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104298:	b580      	push	{r7, lr}
 810429a:	b08a      	sub	sp, #40	@ 0x28
 810429c:	af02      	add	r7, sp, #8
 810429e:	60f8      	str	r0, [r7, #12]
 81042a0:	60b9      	str	r1, [r7, #8]
 81042a2:	603b      	str	r3, [r7, #0]
 81042a4:	4613      	mov	r3, r2
 81042a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81042a8:	68fb      	ldr	r3, [r7, #12]
 81042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81042ae:	2b20      	cmp	r3, #32
 81042b0:	d17b      	bne.n	81043aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 81042b2:	68bb      	ldr	r3, [r7, #8]
 81042b4:	2b00      	cmp	r3, #0
 81042b6:	d002      	beq.n	81042be <HAL_UART_Transmit+0x26>
 81042b8:	88fb      	ldrh	r3, [r7, #6]
 81042ba:	2b00      	cmp	r3, #0
 81042bc:	d101      	bne.n	81042c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 81042be:	2301      	movs	r3, #1
 81042c0:	e074      	b.n	81043ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81042c2:	68fb      	ldr	r3, [r7, #12]
 81042c4:	2200      	movs	r2, #0
 81042c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81042ca:	68fb      	ldr	r3, [r7, #12]
 81042cc:	2221      	movs	r2, #33	@ 0x21
 81042ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81042d2:	f7fc fd4b 	bl	8100d6c <HAL_GetTick>
 81042d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81042d8:	68fb      	ldr	r3, [r7, #12]
 81042da:	88fa      	ldrh	r2, [r7, #6]
 81042dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 81042e0:	68fb      	ldr	r3, [r7, #12]
 81042e2:	88fa      	ldrh	r2, [r7, #6]
 81042e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81042e8:	68fb      	ldr	r3, [r7, #12]
 81042ea:	689b      	ldr	r3, [r3, #8]
 81042ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81042f0:	d108      	bne.n	8104304 <HAL_UART_Transmit+0x6c>
 81042f2:	68fb      	ldr	r3, [r7, #12]
 81042f4:	691b      	ldr	r3, [r3, #16]
 81042f6:	2b00      	cmp	r3, #0
 81042f8:	d104      	bne.n	8104304 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 81042fa:	2300      	movs	r3, #0
 81042fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81042fe:	68bb      	ldr	r3, [r7, #8]
 8104300:	61bb      	str	r3, [r7, #24]
 8104302:	e003      	b.n	810430c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8104304:	68bb      	ldr	r3, [r7, #8]
 8104306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8104308:	2300      	movs	r3, #0
 810430a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810430c:	e030      	b.n	8104370 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810430e:	683b      	ldr	r3, [r7, #0]
 8104310:	9300      	str	r3, [sp, #0]
 8104312:	697b      	ldr	r3, [r7, #20]
 8104314:	2200      	movs	r2, #0
 8104316:	2180      	movs	r1, #128	@ 0x80
 8104318:	68f8      	ldr	r0, [r7, #12]
 810431a:	f001 faf5 	bl	8105908 <UART_WaitOnFlagUntilTimeout>
 810431e:	4603      	mov	r3, r0
 8104320:	2b00      	cmp	r3, #0
 8104322:	d005      	beq.n	8104330 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8104324:	68fb      	ldr	r3, [r7, #12]
 8104326:	2220      	movs	r2, #32
 8104328:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810432c:	2303      	movs	r3, #3
 810432e:	e03d      	b.n	81043ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8104330:	69fb      	ldr	r3, [r7, #28]
 8104332:	2b00      	cmp	r3, #0
 8104334:	d10b      	bne.n	810434e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8104336:	69bb      	ldr	r3, [r7, #24]
 8104338:	881b      	ldrh	r3, [r3, #0]
 810433a:	461a      	mov	r2, r3
 810433c:	68fb      	ldr	r3, [r7, #12]
 810433e:	681b      	ldr	r3, [r3, #0]
 8104340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104344:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8104346:	69bb      	ldr	r3, [r7, #24]
 8104348:	3302      	adds	r3, #2
 810434a:	61bb      	str	r3, [r7, #24]
 810434c:	e007      	b.n	810435e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810434e:	69fb      	ldr	r3, [r7, #28]
 8104350:	781a      	ldrb	r2, [r3, #0]
 8104352:	68fb      	ldr	r3, [r7, #12]
 8104354:	681b      	ldr	r3, [r3, #0]
 8104356:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8104358:	69fb      	ldr	r3, [r7, #28]
 810435a:	3301      	adds	r3, #1
 810435c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810435e:	68fb      	ldr	r3, [r7, #12]
 8104360:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8104364:	b29b      	uxth	r3, r3
 8104366:	3b01      	subs	r3, #1
 8104368:	b29a      	uxth	r2, r3
 810436a:	68fb      	ldr	r3, [r7, #12]
 810436c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8104370:	68fb      	ldr	r3, [r7, #12]
 8104372:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8104376:	b29b      	uxth	r3, r3
 8104378:	2b00      	cmp	r3, #0
 810437a:	d1c8      	bne.n	810430e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810437c:	683b      	ldr	r3, [r7, #0]
 810437e:	9300      	str	r3, [sp, #0]
 8104380:	697b      	ldr	r3, [r7, #20]
 8104382:	2200      	movs	r2, #0
 8104384:	2140      	movs	r1, #64	@ 0x40
 8104386:	68f8      	ldr	r0, [r7, #12]
 8104388:	f001 fabe 	bl	8105908 <UART_WaitOnFlagUntilTimeout>
 810438c:	4603      	mov	r3, r0
 810438e:	2b00      	cmp	r3, #0
 8104390:	d005      	beq.n	810439e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8104392:	68fb      	ldr	r3, [r7, #12]
 8104394:	2220      	movs	r2, #32
 8104396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810439a:	2303      	movs	r3, #3
 810439c:	e006      	b.n	81043ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810439e:	68fb      	ldr	r3, [r7, #12]
 81043a0:	2220      	movs	r2, #32
 81043a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 81043a6:	2300      	movs	r3, #0
 81043a8:	e000      	b.n	81043ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 81043aa:	2302      	movs	r3, #2
  }
}
 81043ac:	4618      	mov	r0, r3
 81043ae:	3720      	adds	r7, #32
 81043b0:	46bd      	mov	sp, r7
 81043b2:	bd80      	pop	{r7, pc}

081043b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 81043b4:	b580      	push	{r7, lr}
 81043b6:	b0ba      	sub	sp, #232	@ 0xe8
 81043b8:	af00      	add	r7, sp, #0
 81043ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	681b      	ldr	r3, [r3, #0]
 81043c0:	69db      	ldr	r3, [r3, #28]
 81043c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 81043c6:	687b      	ldr	r3, [r7, #4]
 81043c8:	681b      	ldr	r3, [r3, #0]
 81043ca:	681b      	ldr	r3, [r3, #0]
 81043cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	681b      	ldr	r3, [r3, #0]
 81043d4:	689b      	ldr	r3, [r3, #8]
 81043d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 81043da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 81043de:	f640 030f 	movw	r3, #2063	@ 0x80f
 81043e2:	4013      	ands	r3, r2
 81043e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 81043e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 81043ec:	2b00      	cmp	r3, #0
 81043ee:	d11b      	bne.n	8104428 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81043f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81043f4:	f003 0320 	and.w	r3, r3, #32
 81043f8:	2b00      	cmp	r3, #0
 81043fa:	d015      	beq.n	8104428 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81043fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8104400:	f003 0320 	and.w	r3, r3, #32
 8104404:	2b00      	cmp	r3, #0
 8104406:	d105      	bne.n	8104414 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8104408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810440c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8104410:	2b00      	cmp	r3, #0
 8104412:	d009      	beq.n	8104428 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8104414:	687b      	ldr	r3, [r7, #4]
 8104416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8104418:	2b00      	cmp	r3, #0
 810441a:	f000 8395 	beq.w	8104b48 <HAL_UART_IRQHandler+0x794>
      {
        huart->RxISR(huart);
 810441e:	687b      	ldr	r3, [r7, #4]
 8104420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8104422:	6878      	ldr	r0, [r7, #4]
 8104424:	4798      	blx	r3
      }
      return;
 8104426:	e38f      	b.n	8104b48 <HAL_UART_IRQHandler+0x794>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8104428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810442c:	2b00      	cmp	r3, #0
 810442e:	f000 8123 	beq.w	8104678 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8104432:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8104436:	4b8d      	ldr	r3, [pc, #564]	@ (810466c <HAL_UART_IRQHandler+0x2b8>)
 8104438:	4013      	ands	r3, r2
 810443a:	2b00      	cmp	r3, #0
 810443c:	d106      	bne.n	810444c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810443e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8104442:	4b8b      	ldr	r3, [pc, #556]	@ (8104670 <HAL_UART_IRQHandler+0x2bc>)
 8104444:	4013      	ands	r3, r2
 8104446:	2b00      	cmp	r3, #0
 8104448:	f000 8116 	beq.w	8104678 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810444c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8104450:	f003 0301 	and.w	r3, r3, #1
 8104454:	2b00      	cmp	r3, #0
 8104456:	d011      	beq.n	810447c <HAL_UART_IRQHandler+0xc8>
 8104458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810445c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104460:	2b00      	cmp	r3, #0
 8104462:	d00b      	beq.n	810447c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	681b      	ldr	r3, [r3, #0]
 8104468:	2201      	movs	r2, #1
 810446a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104472:	f043 0201 	orr.w	r2, r3, #1
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8104480:	f003 0302 	and.w	r3, r3, #2
 8104484:	2b00      	cmp	r3, #0
 8104486:	d011      	beq.n	81044ac <HAL_UART_IRQHandler+0xf8>
 8104488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810448c:	f003 0301 	and.w	r3, r3, #1
 8104490:	2b00      	cmp	r3, #0
 8104492:	d00b      	beq.n	81044ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	681b      	ldr	r3, [r3, #0]
 8104498:	2202      	movs	r2, #2
 810449a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810449c:	687b      	ldr	r3, [r7, #4]
 810449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81044a2:	f043 0204 	orr.w	r2, r3, #4
 81044a6:	687b      	ldr	r3, [r7, #4]
 81044a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81044ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81044b0:	f003 0304 	and.w	r3, r3, #4
 81044b4:	2b00      	cmp	r3, #0
 81044b6:	d011      	beq.n	81044dc <HAL_UART_IRQHandler+0x128>
 81044b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 81044bc:	f003 0301 	and.w	r3, r3, #1
 81044c0:	2b00      	cmp	r3, #0
 81044c2:	d00b      	beq.n	81044dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	681b      	ldr	r3, [r3, #0]
 81044c8:	2204      	movs	r2, #4
 81044ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 81044cc:	687b      	ldr	r3, [r7, #4]
 81044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81044d2:	f043 0202 	orr.w	r2, r3, #2
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 81044dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81044e0:	f003 0308 	and.w	r3, r3, #8
 81044e4:	2b00      	cmp	r3, #0
 81044e6:	d017      	beq.n	8104518 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81044e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81044ec:	f003 0320 	and.w	r3, r3, #32
 81044f0:	2b00      	cmp	r3, #0
 81044f2:	d105      	bne.n	8104500 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 81044f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 81044f8:	4b5c      	ldr	r3, [pc, #368]	@ (810466c <HAL_UART_IRQHandler+0x2b8>)
 81044fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81044fc:	2b00      	cmp	r3, #0
 81044fe:	d00b      	beq.n	8104518 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	681b      	ldr	r3, [r3, #0]
 8104504:	2208      	movs	r2, #8
 8104506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810450e:	f043 0208 	orr.w	r2, r3, #8
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8104518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810451c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8104520:	2b00      	cmp	r3, #0
 8104522:	d012      	beq.n	810454a <HAL_UART_IRQHandler+0x196>
 8104524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8104528:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810452c:	2b00      	cmp	r3, #0
 810452e:	d00c      	beq.n	810454a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	681b      	ldr	r3, [r3, #0]
 8104534:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8104538:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104540:	f043 0220 	orr.w	r2, r3, #32
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810454a:	687b      	ldr	r3, [r7, #4]
 810454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104550:	2b00      	cmp	r3, #0
 8104552:	f000 82fb 	beq.w	8104b4c <HAL_UART_IRQHandler+0x798>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8104556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810455a:	f003 0320 	and.w	r3, r3, #32
 810455e:	2b00      	cmp	r3, #0
 8104560:	d013      	beq.n	810458a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8104562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8104566:	f003 0320 	and.w	r3, r3, #32
 810456a:	2b00      	cmp	r3, #0
 810456c:	d105      	bne.n	810457a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810456e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8104572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8104576:	2b00      	cmp	r3, #0
 8104578:	d007      	beq.n	810458a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 810457a:	687b      	ldr	r3, [r7, #4]
 810457c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810457e:	2b00      	cmp	r3, #0
 8104580:	d003      	beq.n	810458a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8104586:	6878      	ldr	r0, [r7, #4]
 8104588:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810458a:	687b      	ldr	r3, [r7, #4]
 810458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104590:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	681b      	ldr	r3, [r3, #0]
 8104598:	689b      	ldr	r3, [r3, #8]
 810459a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810459e:	2b40      	cmp	r3, #64	@ 0x40
 81045a0:	d005      	beq.n	81045ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 81045a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 81045a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81045aa:	2b00      	cmp	r3, #0
 81045ac:	d054      	beq.n	8104658 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 81045ae:	6878      	ldr	r0, [r7, #4]
 81045b0:	f001 fa17 	bl	81059e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	681b      	ldr	r3, [r3, #0]
 81045b8:	689b      	ldr	r3, [r3, #8]
 81045ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81045be:	2b40      	cmp	r3, #64	@ 0x40
 81045c0:	d146      	bne.n	8104650 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	681b      	ldr	r3, [r3, #0]
 81045c6:	3308      	adds	r3, #8
 81045c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81045cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 81045d0:	e853 3f00 	ldrex	r3, [r3]
 81045d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 81045d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 81045dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 81045e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81045e4:	687b      	ldr	r3, [r7, #4]
 81045e6:	681b      	ldr	r3, [r3, #0]
 81045e8:	3308      	adds	r3, #8
 81045ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 81045ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 81045f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81045f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 81045fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 81045fe:	e841 2300 	strex	r3, r2, [r1]
 8104602:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8104606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810460a:	2b00      	cmp	r3, #0
 810460c:	d1d9      	bne.n	81045c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104614:	2b00      	cmp	r3, #0
 8104616:	d017      	beq.n	8104648 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810461e:	4a15      	ldr	r2, [pc, #84]	@ (8104674 <HAL_UART_IRQHandler+0x2c0>)
 8104620:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8104622:	687b      	ldr	r3, [r7, #4]
 8104624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104628:	4618      	mov	r0, r3
 810462a:	f7fc ffeb 	bl	8101604 <HAL_DMA_Abort_IT>
 810462e:	4603      	mov	r3, r0
 8104630:	2b00      	cmp	r3, #0
 8104632:	d019      	beq.n	8104668 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8104634:	687b      	ldr	r3, [r7, #4]
 8104636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810463a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810463c:	687a      	ldr	r2, [r7, #4]
 810463e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8104642:	4610      	mov	r0, r2
 8104644:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104646:	e00f      	b.n	8104668 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8104648:	6878      	ldr	r0, [r7, #4]
 810464a:	f000 fa93 	bl	8104b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810464e:	e00b      	b.n	8104668 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8104650:	6878      	ldr	r0, [r7, #4]
 8104652:	f000 fa8f 	bl	8104b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104656:	e007      	b.n	8104668 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8104658:	6878      	ldr	r0, [r7, #4]
 810465a:	f000 fa8b 	bl	8104b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	2200      	movs	r2, #0
 8104662:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8104666:	e271      	b.n	8104b4c <HAL_UART_IRQHandler+0x798>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104668:	bf00      	nop
    return;
 810466a:	e26f      	b.n	8104b4c <HAL_UART_IRQHandler+0x798>
 810466c:	10000001 	.word	0x10000001
 8104670:	04000120 	.word	0x04000120
 8104674:	08105aaf 	.word	0x08105aaf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8104678:	687b      	ldr	r3, [r7, #4]
 810467a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810467c:	2b01      	cmp	r3, #1
 810467e:	f040 8205 	bne.w	8104a8c <HAL_UART_IRQHandler+0x6d8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8104682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8104686:	f003 0310 	and.w	r3, r3, #16
 810468a:	2b00      	cmp	r3, #0
 810468c:	f000 81fe 	beq.w	8104a8c <HAL_UART_IRQHandler+0x6d8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8104690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8104694:	f003 0310 	and.w	r3, r3, #16
 8104698:	2b00      	cmp	r3, #0
 810469a:	f000 81f7 	beq.w	8104a8c <HAL_UART_IRQHandler+0x6d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810469e:	687b      	ldr	r3, [r7, #4]
 81046a0:	681b      	ldr	r3, [r3, #0]
 81046a2:	2210      	movs	r2, #16
 81046a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	689b      	ldr	r3, [r3, #8]
 81046ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81046b0:	2b40      	cmp	r3, #64	@ 0x40
 81046b2:	f040 816d 	bne.w	8104990 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 81046b6:	687b      	ldr	r3, [r7, #4]
 81046b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81046bc:	681b      	ldr	r3, [r3, #0]
 81046be:	4aa4      	ldr	r2, [pc, #656]	@ (8104950 <HAL_UART_IRQHandler+0x59c>)
 81046c0:	4293      	cmp	r3, r2
 81046c2:	d068      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81046ca:	681b      	ldr	r3, [r3, #0]
 81046cc:	4aa1      	ldr	r2, [pc, #644]	@ (8104954 <HAL_UART_IRQHandler+0x5a0>)
 81046ce:	4293      	cmp	r3, r2
 81046d0:	d061      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 81046d2:	687b      	ldr	r3, [r7, #4]
 81046d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81046d8:	681b      	ldr	r3, [r3, #0]
 81046da:	4a9f      	ldr	r2, [pc, #636]	@ (8104958 <HAL_UART_IRQHandler+0x5a4>)
 81046dc:	4293      	cmp	r3, r2
 81046de:	d05a      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81046e6:	681b      	ldr	r3, [r3, #0]
 81046e8:	4a9c      	ldr	r2, [pc, #624]	@ (810495c <HAL_UART_IRQHandler+0x5a8>)
 81046ea:	4293      	cmp	r3, r2
 81046ec:	d053      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 81046ee:	687b      	ldr	r3, [r7, #4]
 81046f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81046f4:	681b      	ldr	r3, [r3, #0]
 81046f6:	4a9a      	ldr	r2, [pc, #616]	@ (8104960 <HAL_UART_IRQHandler+0x5ac>)
 81046f8:	4293      	cmp	r3, r2
 81046fa:	d04c      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104702:	681b      	ldr	r3, [r3, #0]
 8104704:	4a97      	ldr	r2, [pc, #604]	@ (8104964 <HAL_UART_IRQHandler+0x5b0>)
 8104706:	4293      	cmp	r3, r2
 8104708:	d045      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104710:	681b      	ldr	r3, [r3, #0]
 8104712:	4a95      	ldr	r2, [pc, #596]	@ (8104968 <HAL_UART_IRQHandler+0x5b4>)
 8104714:	4293      	cmp	r3, r2
 8104716:	d03e      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	4a92      	ldr	r2, [pc, #584]	@ (810496c <HAL_UART_IRQHandler+0x5b8>)
 8104722:	4293      	cmp	r3, r2
 8104724:	d037      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810472c:	681b      	ldr	r3, [r3, #0]
 810472e:	4a90      	ldr	r2, [pc, #576]	@ (8104970 <HAL_UART_IRQHandler+0x5bc>)
 8104730:	4293      	cmp	r3, r2
 8104732:	d030      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 8104734:	687b      	ldr	r3, [r7, #4]
 8104736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	4a8d      	ldr	r2, [pc, #564]	@ (8104974 <HAL_UART_IRQHandler+0x5c0>)
 810473e:	4293      	cmp	r3, r2
 8104740:	d029      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104748:	681b      	ldr	r3, [r3, #0]
 810474a:	4a8b      	ldr	r2, [pc, #556]	@ (8104978 <HAL_UART_IRQHandler+0x5c4>)
 810474c:	4293      	cmp	r3, r2
 810474e:	d022      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104756:	681b      	ldr	r3, [r3, #0]
 8104758:	4a88      	ldr	r2, [pc, #544]	@ (810497c <HAL_UART_IRQHandler+0x5c8>)
 810475a:	4293      	cmp	r3, r2
 810475c:	d01b      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104764:	681b      	ldr	r3, [r3, #0]
 8104766:	4a86      	ldr	r2, [pc, #536]	@ (8104980 <HAL_UART_IRQHandler+0x5cc>)
 8104768:	4293      	cmp	r3, r2
 810476a:	d014      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 810476c:	687b      	ldr	r3, [r7, #4]
 810476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104772:	681b      	ldr	r3, [r3, #0]
 8104774:	4a83      	ldr	r2, [pc, #524]	@ (8104984 <HAL_UART_IRQHandler+0x5d0>)
 8104776:	4293      	cmp	r3, r2
 8104778:	d00d      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104780:	681b      	ldr	r3, [r3, #0]
 8104782:	4a81      	ldr	r2, [pc, #516]	@ (8104988 <HAL_UART_IRQHandler+0x5d4>)
 8104784:	4293      	cmp	r3, r2
 8104786:	d006      	beq.n	8104796 <HAL_UART_IRQHandler+0x3e2>
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810478e:	681b      	ldr	r3, [r3, #0]
 8104790:	4a7e      	ldr	r2, [pc, #504]	@ (810498c <HAL_UART_IRQHandler+0x5d8>)
 8104792:	4293      	cmp	r3, r2
 8104794:	d106      	bne.n	81047a4 <HAL_UART_IRQHandler+0x3f0>
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810479c:	681b      	ldr	r3, [r3, #0]
 810479e:	685b      	ldr	r3, [r3, #4]
 81047a0:	b29b      	uxth	r3, r3
 81047a2:	e005      	b.n	81047b0 <HAL_UART_IRQHandler+0x3fc>
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81047aa:	681b      	ldr	r3, [r3, #0]
 81047ac:	685b      	ldr	r3, [r3, #4]
 81047ae:	b29b      	uxth	r3, r3
 81047b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 81047b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 81047b8:	2b00      	cmp	r3, #0
 81047ba:	f000 80ad 	beq.w	8104918 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 81047c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 81047c8:	429a      	cmp	r2, r3
 81047ca:	f080 80a5 	bcs.w	8104918 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 81047ce:	687b      	ldr	r3, [r7, #4]
 81047d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 81047d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 81047d8:	687b      	ldr	r3, [r7, #4]
 81047da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81047de:	69db      	ldr	r3, [r3, #28]
 81047e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81047e4:	f000 8087 	beq.w	81048f6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81047e8:	687b      	ldr	r3, [r7, #4]
 81047ea:	681b      	ldr	r3, [r3, #0]
 81047ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81047f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 81047f4:	e853 3f00 	ldrex	r3, [r3]
 81047f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 81047fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8104800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8104804:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	681b      	ldr	r3, [r3, #0]
 810480c:	461a      	mov	r2, r3
 810480e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8104812:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8104816:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810481a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 810481e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8104822:	e841 2300 	strex	r3, r2, [r1]
 8104826:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 810482a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810482e:	2b00      	cmp	r3, #0
 8104830:	d1da      	bne.n	81047e8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	681b      	ldr	r3, [r3, #0]
 8104836:	3308      	adds	r3, #8
 8104838:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810483a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810483c:	e853 3f00 	ldrex	r3, [r3]
 8104840:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8104842:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8104844:	f023 0301 	bic.w	r3, r3, #1
 8104848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	681b      	ldr	r3, [r3, #0]
 8104850:	3308      	adds	r3, #8
 8104852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8104856:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 810485a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810485c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810485e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8104862:	e841 2300 	strex	r3, r2, [r1]
 8104866:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8104868:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810486a:	2b00      	cmp	r3, #0
 810486c:	d1e1      	bne.n	8104832 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	681b      	ldr	r3, [r3, #0]
 8104872:	3308      	adds	r3, #8
 8104874:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8104878:	e853 3f00 	ldrex	r3, [r3]
 810487c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810487e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8104880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8104884:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	3308      	adds	r3, #8
 810488e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8104892:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8104894:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104896:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8104898:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810489a:	e841 2300 	strex	r3, r2, [r1]
 810489e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 81048a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 81048a2:	2b00      	cmp	r3, #0
 81048a4:	d1e3      	bne.n	810486e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 81048a6:	687b      	ldr	r3, [r7, #4]
 81048a8:	2220      	movs	r2, #32
 81048aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81048ae:	687b      	ldr	r3, [r7, #4]
 81048b0:	2200      	movs	r2, #0
 81048b2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	681b      	ldr	r3, [r3, #0]
 81048b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81048ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81048bc:	e853 3f00 	ldrex	r3, [r3]
 81048c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 81048c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81048c4:	f023 0310 	bic.w	r3, r3, #16
 81048c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81048cc:	687b      	ldr	r3, [r7, #4]
 81048ce:	681b      	ldr	r3, [r3, #0]
 81048d0:	461a      	mov	r2, r3
 81048d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 81048d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 81048d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81048da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 81048dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 81048de:	e841 2300 	strex	r3, r2, [r1]
 81048e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 81048e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81048e6:	2b00      	cmp	r3, #0
 81048e8:	d1e4      	bne.n	81048b4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 81048ea:	687b      	ldr	r3, [r7, #4]
 81048ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81048f0:	4618      	mov	r0, r3
 81048f2:	f7fc fb69 	bl	8100fc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 81048f6:	687b      	ldr	r3, [r7, #4]
 81048f8:	2202      	movs	r2, #2
 81048fa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8104902:	687b      	ldr	r3, [r7, #4]
 8104904:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8104908:	b29b      	uxth	r3, r3
 810490a:	1ad3      	subs	r3, r2, r3
 810490c:	b29b      	uxth	r3, r3
 810490e:	4619      	mov	r1, r3
 8104910:	6878      	ldr	r0, [r7, #4]
 8104912:	f000 f939 	bl	8104b88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8104916:	e11b      	b.n	8104b50 <HAL_UART_IRQHandler+0x79c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8104918:	687b      	ldr	r3, [r7, #4]
 810491a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810491e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8104922:	429a      	cmp	r2, r3
 8104924:	f040 8114 	bne.w	8104b50 <HAL_UART_IRQHandler+0x79c>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8104928:	687b      	ldr	r3, [r7, #4]
 810492a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810492e:	69db      	ldr	r3, [r3, #28]
 8104930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104934:	f040 810c 	bne.w	8104b50 <HAL_UART_IRQHandler+0x79c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8104938:	687b      	ldr	r3, [r7, #4]
 810493a:	2202      	movs	r2, #2
 810493c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810493e:	687b      	ldr	r3, [r7, #4]
 8104940:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8104944:	4619      	mov	r1, r3
 8104946:	6878      	ldr	r0, [r7, #4]
 8104948:	f000 f91e 	bl	8104b88 <HAL_UARTEx_RxEventCallback>
      return;
 810494c:	e100      	b.n	8104b50 <HAL_UART_IRQHandler+0x79c>
 810494e:	bf00      	nop
 8104950:	40020010 	.word	0x40020010
 8104954:	40020028 	.word	0x40020028
 8104958:	40020040 	.word	0x40020040
 810495c:	40020058 	.word	0x40020058
 8104960:	40020070 	.word	0x40020070
 8104964:	40020088 	.word	0x40020088
 8104968:	400200a0 	.word	0x400200a0
 810496c:	400200b8 	.word	0x400200b8
 8104970:	40020410 	.word	0x40020410
 8104974:	40020428 	.word	0x40020428
 8104978:	40020440 	.word	0x40020440
 810497c:	40020458 	.word	0x40020458
 8104980:	40020470 	.word	0x40020470
 8104984:	40020488 	.word	0x40020488
 8104988:	400204a0 	.word	0x400204a0
 810498c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8104990:	687b      	ldr	r3, [r7, #4]
 8104992:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8104996:	687b      	ldr	r3, [r7, #4]
 8104998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810499c:	b29b      	uxth	r3, r3
 810499e:	1ad3      	subs	r3, r2, r3
 81049a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 81049a4:	687b      	ldr	r3, [r7, #4]
 81049a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 81049aa:	b29b      	uxth	r3, r3
 81049ac:	2b00      	cmp	r3, #0
 81049ae:	f000 80d1 	beq.w	8104b54 <HAL_UART_IRQHandler+0x7a0>
          && (nb_rx_data > 0U))
 81049b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 81049b6:	2b00      	cmp	r3, #0
 81049b8:	f000 80cc 	beq.w	8104b54 <HAL_UART_IRQHandler+0x7a0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81049bc:	687b      	ldr	r3, [r7, #4]
 81049be:	681b      	ldr	r3, [r3, #0]
 81049c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81049c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049c4:	e853 3f00 	ldrex	r3, [r3]
 81049c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 81049ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81049cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81049d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	461a      	mov	r2, r3
 81049da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 81049de:	647b      	str	r3, [r7, #68]	@ 0x44
 81049e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81049e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 81049e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81049e6:	e841 2300 	strex	r3, r2, [r1]
 81049ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 81049ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81049ee:	2b00      	cmp	r3, #0
 81049f0:	d1e4      	bne.n	81049bc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81049f2:	687b      	ldr	r3, [r7, #4]
 81049f4:	681b      	ldr	r3, [r3, #0]
 81049f6:	3308      	adds	r3, #8
 81049f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81049fc:	e853 3f00 	ldrex	r3, [r3]
 8104a00:	623b      	str	r3, [r7, #32]
   return(result);
 8104a02:	6a3b      	ldr	r3, [r7, #32]
 8104a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8104a08:	f023 0301 	bic.w	r3, r3, #1
 8104a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8104a10:	687b      	ldr	r3, [r7, #4]
 8104a12:	681b      	ldr	r3, [r3, #0]
 8104a14:	3308      	adds	r3, #8
 8104a16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8104a1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8104a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104a1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8104a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8104a22:	e841 2300 	strex	r3, r2, [r1]
 8104a26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8104a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104a2a:	2b00      	cmp	r3, #0
 8104a2c:	d1e1      	bne.n	81049f2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	2220      	movs	r2, #32
 8104a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	2200      	movs	r2, #0
 8104a3a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8104a3c:	687b      	ldr	r3, [r7, #4]
 8104a3e:	2200      	movs	r2, #0
 8104a40:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104a42:	687b      	ldr	r3, [r7, #4]
 8104a44:	681b      	ldr	r3, [r3, #0]
 8104a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104a48:	693b      	ldr	r3, [r7, #16]
 8104a4a:	e853 3f00 	ldrex	r3, [r3]
 8104a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8104a50:	68fb      	ldr	r3, [r7, #12]
 8104a52:	f023 0310 	bic.w	r3, r3, #16
 8104a56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8104a5a:	687b      	ldr	r3, [r7, #4]
 8104a5c:	681b      	ldr	r3, [r3, #0]
 8104a5e:	461a      	mov	r2, r3
 8104a60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8104a64:	61fb      	str	r3, [r7, #28]
 8104a66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104a68:	69b9      	ldr	r1, [r7, #24]
 8104a6a:	69fa      	ldr	r2, [r7, #28]
 8104a6c:	e841 2300 	strex	r3, r2, [r1]
 8104a70:	617b      	str	r3, [r7, #20]
   return(result);
 8104a72:	697b      	ldr	r3, [r7, #20]
 8104a74:	2b00      	cmp	r3, #0
 8104a76:	d1e4      	bne.n	8104a42 <HAL_UART_IRQHandler+0x68e>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8104a78:	687b      	ldr	r3, [r7, #4]
 8104a7a:	2202      	movs	r2, #2
 8104a7c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8104a7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8104a82:	4619      	mov	r1, r3
 8104a84:	6878      	ldr	r0, [r7, #4]
 8104a86:	f000 f87f 	bl	8104b88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8104a8a:	e063      	b.n	8104b54 <HAL_UART_IRQHandler+0x7a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8104a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8104a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8104a94:	2b00      	cmp	r3, #0
 8104a96:	d00e      	beq.n	8104ab6 <HAL_UART_IRQHandler+0x702>
 8104a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8104a9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8104aa0:	2b00      	cmp	r3, #0
 8104aa2:	d008      	beq.n	8104ab6 <HAL_UART_IRQHandler+0x702>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8104aac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8104aae:	6878      	ldr	r0, [r7, #4]
 8104ab0:	f001 f83a 	bl	8105b28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8104ab4:	e051      	b.n	8104b5a <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8104ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8104aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104abe:	2b00      	cmp	r3, #0
 8104ac0:	d014      	beq.n	8104aec <HAL_UART_IRQHandler+0x738>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8104ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8104ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104aca:	2b00      	cmp	r3, #0
 8104acc:	d105      	bne.n	8104ada <HAL_UART_IRQHandler+0x726>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8104ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8104ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8104ad6:	2b00      	cmp	r3, #0
 8104ad8:	d008      	beq.n	8104aec <HAL_UART_IRQHandler+0x738>
  {
    if (huart->TxISR != NULL)
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8104ade:	2b00      	cmp	r3, #0
 8104ae0:	d03a      	beq.n	8104b58 <HAL_UART_IRQHandler+0x7a4>
    {
      huart->TxISR(huart);
 8104ae2:	687b      	ldr	r3, [r7, #4]
 8104ae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8104ae6:	6878      	ldr	r0, [r7, #4]
 8104ae8:	4798      	blx	r3
    }
    return;
 8104aea:	e035      	b.n	8104b58 <HAL_UART_IRQHandler+0x7a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8104aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8104af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104af4:	2b00      	cmp	r3, #0
 8104af6:	d009      	beq.n	8104b0c <HAL_UART_IRQHandler+0x758>
 8104af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8104afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104b00:	2b00      	cmp	r3, #0
 8104b02:	d003      	beq.n	8104b0c <HAL_UART_IRQHandler+0x758>
  {
    UART_EndTransmit_IT(huart);
 8104b04:	6878      	ldr	r0, [r7, #4]
 8104b06:	f000 ffe4 	bl	8105ad2 <UART_EndTransmit_IT>
    return;
 8104b0a:	e026      	b.n	8104b5a <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8104b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8104b10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8104b14:	2b00      	cmp	r3, #0
 8104b16:	d009      	beq.n	8104b2c <HAL_UART_IRQHandler+0x778>
 8104b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8104b1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8104b20:	2b00      	cmp	r3, #0
 8104b22:	d003      	beq.n	8104b2c <HAL_UART_IRQHandler+0x778>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8104b24:	6878      	ldr	r0, [r7, #4]
 8104b26:	f001 f813 	bl	8105b50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8104b2a:	e016      	b.n	8104b5a <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8104b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8104b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8104b34:	2b00      	cmp	r3, #0
 8104b36:	d010      	beq.n	8104b5a <HAL_UART_IRQHandler+0x7a6>
 8104b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8104b3c:	2b00      	cmp	r3, #0
 8104b3e:	da0c      	bge.n	8104b5a <HAL_UART_IRQHandler+0x7a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8104b40:	6878      	ldr	r0, [r7, #4]
 8104b42:	f000 fffb 	bl	8105b3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8104b46:	e008      	b.n	8104b5a <HAL_UART_IRQHandler+0x7a6>
      return;
 8104b48:	bf00      	nop
 8104b4a:	e006      	b.n	8104b5a <HAL_UART_IRQHandler+0x7a6>
    return;
 8104b4c:	bf00      	nop
 8104b4e:	e004      	b.n	8104b5a <HAL_UART_IRQHandler+0x7a6>
      return;
 8104b50:	bf00      	nop
 8104b52:	e002      	b.n	8104b5a <HAL_UART_IRQHandler+0x7a6>
      return;
 8104b54:	bf00      	nop
 8104b56:	e000      	b.n	8104b5a <HAL_UART_IRQHandler+0x7a6>
    return;
 8104b58:	bf00      	nop
  }
}
 8104b5a:	37e8      	adds	r7, #232	@ 0xe8
 8104b5c:	46bd      	mov	sp, r7
 8104b5e:	bd80      	pop	{r7, pc}

08104b60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8104b60:	b480      	push	{r7}
 8104b62:	b083      	sub	sp, #12
 8104b64:	af00      	add	r7, sp, #0
 8104b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8104b68:	bf00      	nop
 8104b6a:	370c      	adds	r7, #12
 8104b6c:	46bd      	mov	sp, r7
 8104b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b72:	4770      	bx	lr

08104b74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8104b74:	b480      	push	{r7}
 8104b76:	b083      	sub	sp, #12
 8104b78:	af00      	add	r7, sp, #0
 8104b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8104b7c:	bf00      	nop
 8104b7e:	370c      	adds	r7, #12
 8104b80:	46bd      	mov	sp, r7
 8104b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b86:	4770      	bx	lr

08104b88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8104b88:	b480      	push	{r7}
 8104b8a:	b083      	sub	sp, #12
 8104b8c:	af00      	add	r7, sp, #0
 8104b8e:	6078      	str	r0, [r7, #4]
 8104b90:	460b      	mov	r3, r1
 8104b92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8104b94:	bf00      	nop
 8104b96:	370c      	adds	r7, #12
 8104b98:	46bd      	mov	sp, r7
 8104b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b9e:	4770      	bx	lr

08104ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8104ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104ba4:	b092      	sub	sp, #72	@ 0x48
 8104ba6:	af00      	add	r7, sp, #0
 8104ba8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8104baa:	2300      	movs	r3, #0
 8104bac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8104bb0:	697b      	ldr	r3, [r7, #20]
 8104bb2:	689a      	ldr	r2, [r3, #8]
 8104bb4:	697b      	ldr	r3, [r7, #20]
 8104bb6:	691b      	ldr	r3, [r3, #16]
 8104bb8:	431a      	orrs	r2, r3
 8104bba:	697b      	ldr	r3, [r7, #20]
 8104bbc:	695b      	ldr	r3, [r3, #20]
 8104bbe:	431a      	orrs	r2, r3
 8104bc0:	697b      	ldr	r3, [r7, #20]
 8104bc2:	69db      	ldr	r3, [r3, #28]
 8104bc4:	4313      	orrs	r3, r2
 8104bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8104bc8:	697b      	ldr	r3, [r7, #20]
 8104bca:	681b      	ldr	r3, [r3, #0]
 8104bcc:	681a      	ldr	r2, [r3, #0]
 8104bce:	4bbd      	ldr	r3, [pc, #756]	@ (8104ec4 <UART_SetConfig+0x324>)
 8104bd0:	4013      	ands	r3, r2
 8104bd2:	697a      	ldr	r2, [r7, #20]
 8104bd4:	6812      	ldr	r2, [r2, #0]
 8104bd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8104bd8:	430b      	orrs	r3, r1
 8104bda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8104bdc:	697b      	ldr	r3, [r7, #20]
 8104bde:	681b      	ldr	r3, [r3, #0]
 8104be0:	685b      	ldr	r3, [r3, #4]
 8104be2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8104be6:	697b      	ldr	r3, [r7, #20]
 8104be8:	68da      	ldr	r2, [r3, #12]
 8104bea:	697b      	ldr	r3, [r7, #20]
 8104bec:	681b      	ldr	r3, [r3, #0]
 8104bee:	430a      	orrs	r2, r1
 8104bf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8104bf2:	697b      	ldr	r3, [r7, #20]
 8104bf4:	699b      	ldr	r3, [r3, #24]
 8104bf6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8104bf8:	697b      	ldr	r3, [r7, #20]
 8104bfa:	681b      	ldr	r3, [r3, #0]
 8104bfc:	4ab2      	ldr	r2, [pc, #712]	@ (8104ec8 <UART_SetConfig+0x328>)
 8104bfe:	4293      	cmp	r3, r2
 8104c00:	d004      	beq.n	8104c0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8104c02:	697b      	ldr	r3, [r7, #20]
 8104c04:	6a1b      	ldr	r3, [r3, #32]
 8104c06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8104c08:	4313      	orrs	r3, r2
 8104c0a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8104c0c:	697b      	ldr	r3, [r7, #20]
 8104c0e:	681b      	ldr	r3, [r3, #0]
 8104c10:	689b      	ldr	r3, [r3, #8]
 8104c12:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8104c16:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8104c1a:	697a      	ldr	r2, [r7, #20]
 8104c1c:	6812      	ldr	r2, [r2, #0]
 8104c1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8104c20:	430b      	orrs	r3, r1
 8104c22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8104c24:	697b      	ldr	r3, [r7, #20]
 8104c26:	681b      	ldr	r3, [r3, #0]
 8104c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104c2a:	f023 010f 	bic.w	r1, r3, #15
 8104c2e:	697b      	ldr	r3, [r7, #20]
 8104c30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8104c32:	697b      	ldr	r3, [r7, #20]
 8104c34:	681b      	ldr	r3, [r3, #0]
 8104c36:	430a      	orrs	r2, r1
 8104c38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8104c3a:	697b      	ldr	r3, [r7, #20]
 8104c3c:	681b      	ldr	r3, [r3, #0]
 8104c3e:	4aa3      	ldr	r2, [pc, #652]	@ (8104ecc <UART_SetConfig+0x32c>)
 8104c40:	4293      	cmp	r3, r2
 8104c42:	d177      	bne.n	8104d34 <UART_SetConfig+0x194>
 8104c44:	4ba2      	ldr	r3, [pc, #648]	@ (8104ed0 <UART_SetConfig+0x330>)
 8104c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104c48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8104c4c:	2b28      	cmp	r3, #40	@ 0x28
 8104c4e:	d86d      	bhi.n	8104d2c <UART_SetConfig+0x18c>
 8104c50:	a201      	add	r2, pc, #4	@ (adr r2, 8104c58 <UART_SetConfig+0xb8>)
 8104c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c56:	bf00      	nop
 8104c58:	08104cfd 	.word	0x08104cfd
 8104c5c:	08104d2d 	.word	0x08104d2d
 8104c60:	08104d2d 	.word	0x08104d2d
 8104c64:	08104d2d 	.word	0x08104d2d
 8104c68:	08104d2d 	.word	0x08104d2d
 8104c6c:	08104d2d 	.word	0x08104d2d
 8104c70:	08104d2d 	.word	0x08104d2d
 8104c74:	08104d2d 	.word	0x08104d2d
 8104c78:	08104d05 	.word	0x08104d05
 8104c7c:	08104d2d 	.word	0x08104d2d
 8104c80:	08104d2d 	.word	0x08104d2d
 8104c84:	08104d2d 	.word	0x08104d2d
 8104c88:	08104d2d 	.word	0x08104d2d
 8104c8c:	08104d2d 	.word	0x08104d2d
 8104c90:	08104d2d 	.word	0x08104d2d
 8104c94:	08104d2d 	.word	0x08104d2d
 8104c98:	08104d0d 	.word	0x08104d0d
 8104c9c:	08104d2d 	.word	0x08104d2d
 8104ca0:	08104d2d 	.word	0x08104d2d
 8104ca4:	08104d2d 	.word	0x08104d2d
 8104ca8:	08104d2d 	.word	0x08104d2d
 8104cac:	08104d2d 	.word	0x08104d2d
 8104cb0:	08104d2d 	.word	0x08104d2d
 8104cb4:	08104d2d 	.word	0x08104d2d
 8104cb8:	08104d15 	.word	0x08104d15
 8104cbc:	08104d2d 	.word	0x08104d2d
 8104cc0:	08104d2d 	.word	0x08104d2d
 8104cc4:	08104d2d 	.word	0x08104d2d
 8104cc8:	08104d2d 	.word	0x08104d2d
 8104ccc:	08104d2d 	.word	0x08104d2d
 8104cd0:	08104d2d 	.word	0x08104d2d
 8104cd4:	08104d2d 	.word	0x08104d2d
 8104cd8:	08104d1d 	.word	0x08104d1d
 8104cdc:	08104d2d 	.word	0x08104d2d
 8104ce0:	08104d2d 	.word	0x08104d2d
 8104ce4:	08104d2d 	.word	0x08104d2d
 8104ce8:	08104d2d 	.word	0x08104d2d
 8104cec:	08104d2d 	.word	0x08104d2d
 8104cf0:	08104d2d 	.word	0x08104d2d
 8104cf4:	08104d2d 	.word	0x08104d2d
 8104cf8:	08104d25 	.word	0x08104d25
 8104cfc:	2301      	movs	r3, #1
 8104cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d02:	e220      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d04:	2304      	movs	r3, #4
 8104d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d0a:	e21c      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d0c:	2308      	movs	r3, #8
 8104d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d12:	e218      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d14:	2310      	movs	r3, #16
 8104d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d1a:	e214      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d1c:	2320      	movs	r3, #32
 8104d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d22:	e210      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d24:	2340      	movs	r3, #64	@ 0x40
 8104d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d2a:	e20c      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d2c:	2380      	movs	r3, #128	@ 0x80
 8104d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d32:	e208      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d34:	697b      	ldr	r3, [r7, #20]
 8104d36:	681b      	ldr	r3, [r3, #0]
 8104d38:	4a66      	ldr	r2, [pc, #408]	@ (8104ed4 <UART_SetConfig+0x334>)
 8104d3a:	4293      	cmp	r3, r2
 8104d3c:	d130      	bne.n	8104da0 <UART_SetConfig+0x200>
 8104d3e:	4b64      	ldr	r3, [pc, #400]	@ (8104ed0 <UART_SetConfig+0x330>)
 8104d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104d42:	f003 0307 	and.w	r3, r3, #7
 8104d46:	2b05      	cmp	r3, #5
 8104d48:	d826      	bhi.n	8104d98 <UART_SetConfig+0x1f8>
 8104d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8104d50 <UART_SetConfig+0x1b0>)
 8104d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d50:	08104d69 	.word	0x08104d69
 8104d54:	08104d71 	.word	0x08104d71
 8104d58:	08104d79 	.word	0x08104d79
 8104d5c:	08104d81 	.word	0x08104d81
 8104d60:	08104d89 	.word	0x08104d89
 8104d64:	08104d91 	.word	0x08104d91
 8104d68:	2300      	movs	r3, #0
 8104d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d6e:	e1ea      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d70:	2304      	movs	r3, #4
 8104d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d76:	e1e6      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d78:	2308      	movs	r3, #8
 8104d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d7e:	e1e2      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d80:	2310      	movs	r3, #16
 8104d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d86:	e1de      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d88:	2320      	movs	r3, #32
 8104d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d8e:	e1da      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d90:	2340      	movs	r3, #64	@ 0x40
 8104d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d96:	e1d6      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104d98:	2380      	movs	r3, #128	@ 0x80
 8104d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104d9e:	e1d2      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104da0:	697b      	ldr	r3, [r7, #20]
 8104da2:	681b      	ldr	r3, [r3, #0]
 8104da4:	4a4c      	ldr	r2, [pc, #304]	@ (8104ed8 <UART_SetConfig+0x338>)
 8104da6:	4293      	cmp	r3, r2
 8104da8:	d130      	bne.n	8104e0c <UART_SetConfig+0x26c>
 8104daa:	4b49      	ldr	r3, [pc, #292]	@ (8104ed0 <UART_SetConfig+0x330>)
 8104dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104dae:	f003 0307 	and.w	r3, r3, #7
 8104db2:	2b05      	cmp	r3, #5
 8104db4:	d826      	bhi.n	8104e04 <UART_SetConfig+0x264>
 8104db6:	a201      	add	r2, pc, #4	@ (adr r2, 8104dbc <UART_SetConfig+0x21c>)
 8104db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104dbc:	08104dd5 	.word	0x08104dd5
 8104dc0:	08104ddd 	.word	0x08104ddd
 8104dc4:	08104de5 	.word	0x08104de5
 8104dc8:	08104ded 	.word	0x08104ded
 8104dcc:	08104df5 	.word	0x08104df5
 8104dd0:	08104dfd 	.word	0x08104dfd
 8104dd4:	2300      	movs	r3, #0
 8104dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104dda:	e1b4      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104ddc:	2304      	movs	r3, #4
 8104dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104de2:	e1b0      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104de4:	2308      	movs	r3, #8
 8104de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104dea:	e1ac      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104dec:	2310      	movs	r3, #16
 8104dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104df2:	e1a8      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104df4:	2320      	movs	r3, #32
 8104df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104dfa:	e1a4      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104dfc:	2340      	movs	r3, #64	@ 0x40
 8104dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104e02:	e1a0      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104e04:	2380      	movs	r3, #128	@ 0x80
 8104e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104e0a:	e19c      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104e0c:	697b      	ldr	r3, [r7, #20]
 8104e0e:	681b      	ldr	r3, [r3, #0]
 8104e10:	4a32      	ldr	r2, [pc, #200]	@ (8104edc <UART_SetConfig+0x33c>)
 8104e12:	4293      	cmp	r3, r2
 8104e14:	d130      	bne.n	8104e78 <UART_SetConfig+0x2d8>
 8104e16:	4b2e      	ldr	r3, [pc, #184]	@ (8104ed0 <UART_SetConfig+0x330>)
 8104e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e1a:	f003 0307 	and.w	r3, r3, #7
 8104e1e:	2b05      	cmp	r3, #5
 8104e20:	d826      	bhi.n	8104e70 <UART_SetConfig+0x2d0>
 8104e22:	a201      	add	r2, pc, #4	@ (adr r2, 8104e28 <UART_SetConfig+0x288>)
 8104e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e28:	08104e41 	.word	0x08104e41
 8104e2c:	08104e49 	.word	0x08104e49
 8104e30:	08104e51 	.word	0x08104e51
 8104e34:	08104e59 	.word	0x08104e59
 8104e38:	08104e61 	.word	0x08104e61
 8104e3c:	08104e69 	.word	0x08104e69
 8104e40:	2300      	movs	r3, #0
 8104e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104e46:	e17e      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104e48:	2304      	movs	r3, #4
 8104e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104e4e:	e17a      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104e50:	2308      	movs	r3, #8
 8104e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104e56:	e176      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104e58:	2310      	movs	r3, #16
 8104e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104e5e:	e172      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104e60:	2320      	movs	r3, #32
 8104e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104e66:	e16e      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104e68:	2340      	movs	r3, #64	@ 0x40
 8104e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104e6e:	e16a      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104e70:	2380      	movs	r3, #128	@ 0x80
 8104e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104e76:	e166      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104e78:	697b      	ldr	r3, [r7, #20]
 8104e7a:	681b      	ldr	r3, [r3, #0]
 8104e7c:	4a18      	ldr	r2, [pc, #96]	@ (8104ee0 <UART_SetConfig+0x340>)
 8104e7e:	4293      	cmp	r3, r2
 8104e80:	d140      	bne.n	8104f04 <UART_SetConfig+0x364>
 8104e82:	4b13      	ldr	r3, [pc, #76]	@ (8104ed0 <UART_SetConfig+0x330>)
 8104e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e86:	f003 0307 	and.w	r3, r3, #7
 8104e8a:	2b05      	cmp	r3, #5
 8104e8c:	d836      	bhi.n	8104efc <UART_SetConfig+0x35c>
 8104e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8104e94 <UART_SetConfig+0x2f4>)
 8104e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e94:	08104ead 	.word	0x08104ead
 8104e98:	08104eb5 	.word	0x08104eb5
 8104e9c:	08104ebd 	.word	0x08104ebd
 8104ea0:	08104ee5 	.word	0x08104ee5
 8104ea4:	08104eed 	.word	0x08104eed
 8104ea8:	08104ef5 	.word	0x08104ef5
 8104eac:	2300      	movs	r3, #0
 8104eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104eb2:	e148      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104eb4:	2304      	movs	r3, #4
 8104eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104eba:	e144      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104ebc:	2308      	movs	r3, #8
 8104ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104ec2:	e140      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104ec4:	cfff69f3 	.word	0xcfff69f3
 8104ec8:	58000c00 	.word	0x58000c00
 8104ecc:	40011000 	.word	0x40011000
 8104ed0:	58024400 	.word	0x58024400
 8104ed4:	40004400 	.word	0x40004400
 8104ed8:	40004800 	.word	0x40004800
 8104edc:	40004c00 	.word	0x40004c00
 8104ee0:	40005000 	.word	0x40005000
 8104ee4:	2310      	movs	r3, #16
 8104ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104eea:	e12c      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104eec:	2320      	movs	r3, #32
 8104eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104ef2:	e128      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104ef4:	2340      	movs	r3, #64	@ 0x40
 8104ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104efa:	e124      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104efc:	2380      	movs	r3, #128	@ 0x80
 8104efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104f02:	e120      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104f04:	697b      	ldr	r3, [r7, #20]
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	4acb      	ldr	r2, [pc, #812]	@ (8105238 <UART_SetConfig+0x698>)
 8104f0a:	4293      	cmp	r3, r2
 8104f0c:	d176      	bne.n	8104ffc <UART_SetConfig+0x45c>
 8104f0e:	4bcb      	ldr	r3, [pc, #812]	@ (810523c <UART_SetConfig+0x69c>)
 8104f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8104f16:	2b28      	cmp	r3, #40	@ 0x28
 8104f18:	d86c      	bhi.n	8104ff4 <UART_SetConfig+0x454>
 8104f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8104f20 <UART_SetConfig+0x380>)
 8104f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104f20:	08104fc5 	.word	0x08104fc5
 8104f24:	08104ff5 	.word	0x08104ff5
 8104f28:	08104ff5 	.word	0x08104ff5
 8104f2c:	08104ff5 	.word	0x08104ff5
 8104f30:	08104ff5 	.word	0x08104ff5
 8104f34:	08104ff5 	.word	0x08104ff5
 8104f38:	08104ff5 	.word	0x08104ff5
 8104f3c:	08104ff5 	.word	0x08104ff5
 8104f40:	08104fcd 	.word	0x08104fcd
 8104f44:	08104ff5 	.word	0x08104ff5
 8104f48:	08104ff5 	.word	0x08104ff5
 8104f4c:	08104ff5 	.word	0x08104ff5
 8104f50:	08104ff5 	.word	0x08104ff5
 8104f54:	08104ff5 	.word	0x08104ff5
 8104f58:	08104ff5 	.word	0x08104ff5
 8104f5c:	08104ff5 	.word	0x08104ff5
 8104f60:	08104fd5 	.word	0x08104fd5
 8104f64:	08104ff5 	.word	0x08104ff5
 8104f68:	08104ff5 	.word	0x08104ff5
 8104f6c:	08104ff5 	.word	0x08104ff5
 8104f70:	08104ff5 	.word	0x08104ff5
 8104f74:	08104ff5 	.word	0x08104ff5
 8104f78:	08104ff5 	.word	0x08104ff5
 8104f7c:	08104ff5 	.word	0x08104ff5
 8104f80:	08104fdd 	.word	0x08104fdd
 8104f84:	08104ff5 	.word	0x08104ff5
 8104f88:	08104ff5 	.word	0x08104ff5
 8104f8c:	08104ff5 	.word	0x08104ff5
 8104f90:	08104ff5 	.word	0x08104ff5
 8104f94:	08104ff5 	.word	0x08104ff5
 8104f98:	08104ff5 	.word	0x08104ff5
 8104f9c:	08104ff5 	.word	0x08104ff5
 8104fa0:	08104fe5 	.word	0x08104fe5
 8104fa4:	08104ff5 	.word	0x08104ff5
 8104fa8:	08104ff5 	.word	0x08104ff5
 8104fac:	08104ff5 	.word	0x08104ff5
 8104fb0:	08104ff5 	.word	0x08104ff5
 8104fb4:	08104ff5 	.word	0x08104ff5
 8104fb8:	08104ff5 	.word	0x08104ff5
 8104fbc:	08104ff5 	.word	0x08104ff5
 8104fc0:	08104fed 	.word	0x08104fed
 8104fc4:	2301      	movs	r3, #1
 8104fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104fca:	e0bc      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104fcc:	2304      	movs	r3, #4
 8104fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104fd2:	e0b8      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104fd4:	2308      	movs	r3, #8
 8104fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104fda:	e0b4      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104fdc:	2310      	movs	r3, #16
 8104fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104fe2:	e0b0      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104fe4:	2320      	movs	r3, #32
 8104fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104fea:	e0ac      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104fec:	2340      	movs	r3, #64	@ 0x40
 8104fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104ff2:	e0a8      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104ff4:	2380      	movs	r3, #128	@ 0x80
 8104ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104ffa:	e0a4      	b.n	8105146 <UART_SetConfig+0x5a6>
 8104ffc:	697b      	ldr	r3, [r7, #20]
 8104ffe:	681b      	ldr	r3, [r3, #0]
 8105000:	4a8f      	ldr	r2, [pc, #572]	@ (8105240 <UART_SetConfig+0x6a0>)
 8105002:	4293      	cmp	r3, r2
 8105004:	d130      	bne.n	8105068 <UART_SetConfig+0x4c8>
 8105006:	4b8d      	ldr	r3, [pc, #564]	@ (810523c <UART_SetConfig+0x69c>)
 8105008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810500a:	f003 0307 	and.w	r3, r3, #7
 810500e:	2b05      	cmp	r3, #5
 8105010:	d826      	bhi.n	8105060 <UART_SetConfig+0x4c0>
 8105012:	a201      	add	r2, pc, #4	@ (adr r2, 8105018 <UART_SetConfig+0x478>)
 8105014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105018:	08105031 	.word	0x08105031
 810501c:	08105039 	.word	0x08105039
 8105020:	08105041 	.word	0x08105041
 8105024:	08105049 	.word	0x08105049
 8105028:	08105051 	.word	0x08105051
 810502c:	08105059 	.word	0x08105059
 8105030:	2300      	movs	r3, #0
 8105032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105036:	e086      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105038:	2304      	movs	r3, #4
 810503a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810503e:	e082      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105040:	2308      	movs	r3, #8
 8105042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105046:	e07e      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105048:	2310      	movs	r3, #16
 810504a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810504e:	e07a      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105050:	2320      	movs	r3, #32
 8105052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105056:	e076      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105058:	2340      	movs	r3, #64	@ 0x40
 810505a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810505e:	e072      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105060:	2380      	movs	r3, #128	@ 0x80
 8105062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105066:	e06e      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105068:	697b      	ldr	r3, [r7, #20]
 810506a:	681b      	ldr	r3, [r3, #0]
 810506c:	4a75      	ldr	r2, [pc, #468]	@ (8105244 <UART_SetConfig+0x6a4>)
 810506e:	4293      	cmp	r3, r2
 8105070:	d130      	bne.n	81050d4 <UART_SetConfig+0x534>
 8105072:	4b72      	ldr	r3, [pc, #456]	@ (810523c <UART_SetConfig+0x69c>)
 8105074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105076:	f003 0307 	and.w	r3, r3, #7
 810507a:	2b05      	cmp	r3, #5
 810507c:	d826      	bhi.n	81050cc <UART_SetConfig+0x52c>
 810507e:	a201      	add	r2, pc, #4	@ (adr r2, 8105084 <UART_SetConfig+0x4e4>)
 8105080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105084:	0810509d 	.word	0x0810509d
 8105088:	081050a5 	.word	0x081050a5
 810508c:	081050ad 	.word	0x081050ad
 8105090:	081050b5 	.word	0x081050b5
 8105094:	081050bd 	.word	0x081050bd
 8105098:	081050c5 	.word	0x081050c5
 810509c:	2300      	movs	r3, #0
 810509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81050a2:	e050      	b.n	8105146 <UART_SetConfig+0x5a6>
 81050a4:	2304      	movs	r3, #4
 81050a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81050aa:	e04c      	b.n	8105146 <UART_SetConfig+0x5a6>
 81050ac:	2308      	movs	r3, #8
 81050ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81050b2:	e048      	b.n	8105146 <UART_SetConfig+0x5a6>
 81050b4:	2310      	movs	r3, #16
 81050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81050ba:	e044      	b.n	8105146 <UART_SetConfig+0x5a6>
 81050bc:	2320      	movs	r3, #32
 81050be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81050c2:	e040      	b.n	8105146 <UART_SetConfig+0x5a6>
 81050c4:	2340      	movs	r3, #64	@ 0x40
 81050c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81050ca:	e03c      	b.n	8105146 <UART_SetConfig+0x5a6>
 81050cc:	2380      	movs	r3, #128	@ 0x80
 81050ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81050d2:	e038      	b.n	8105146 <UART_SetConfig+0x5a6>
 81050d4:	697b      	ldr	r3, [r7, #20]
 81050d6:	681b      	ldr	r3, [r3, #0]
 81050d8:	4a5b      	ldr	r2, [pc, #364]	@ (8105248 <UART_SetConfig+0x6a8>)
 81050da:	4293      	cmp	r3, r2
 81050dc:	d130      	bne.n	8105140 <UART_SetConfig+0x5a0>
 81050de:	4b57      	ldr	r3, [pc, #348]	@ (810523c <UART_SetConfig+0x69c>)
 81050e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81050e2:	f003 0307 	and.w	r3, r3, #7
 81050e6:	2b05      	cmp	r3, #5
 81050e8:	d826      	bhi.n	8105138 <UART_SetConfig+0x598>
 81050ea:	a201      	add	r2, pc, #4	@ (adr r2, 81050f0 <UART_SetConfig+0x550>)
 81050ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81050f0:	08105109 	.word	0x08105109
 81050f4:	08105111 	.word	0x08105111
 81050f8:	08105119 	.word	0x08105119
 81050fc:	08105121 	.word	0x08105121
 8105100:	08105129 	.word	0x08105129
 8105104:	08105131 	.word	0x08105131
 8105108:	2302      	movs	r3, #2
 810510a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810510e:	e01a      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105110:	2304      	movs	r3, #4
 8105112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105116:	e016      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105118:	2308      	movs	r3, #8
 810511a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810511e:	e012      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105120:	2310      	movs	r3, #16
 8105122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105126:	e00e      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105128:	2320      	movs	r3, #32
 810512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810512e:	e00a      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105130:	2340      	movs	r3, #64	@ 0x40
 8105132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105136:	e006      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105138:	2380      	movs	r3, #128	@ 0x80
 810513a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810513e:	e002      	b.n	8105146 <UART_SetConfig+0x5a6>
 8105140:	2380      	movs	r3, #128	@ 0x80
 8105142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8105146:	697b      	ldr	r3, [r7, #20]
 8105148:	681b      	ldr	r3, [r3, #0]
 810514a:	4a3f      	ldr	r2, [pc, #252]	@ (8105248 <UART_SetConfig+0x6a8>)
 810514c:	4293      	cmp	r3, r2
 810514e:	f040 80f8 	bne.w	8105342 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8105152:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8105156:	2b20      	cmp	r3, #32
 8105158:	dc46      	bgt.n	81051e8 <UART_SetConfig+0x648>
 810515a:	2b02      	cmp	r3, #2
 810515c:	f2c0 8082 	blt.w	8105264 <UART_SetConfig+0x6c4>
 8105160:	3b02      	subs	r3, #2
 8105162:	2b1e      	cmp	r3, #30
 8105164:	d87e      	bhi.n	8105264 <UART_SetConfig+0x6c4>
 8105166:	a201      	add	r2, pc, #4	@ (adr r2, 810516c <UART_SetConfig+0x5cc>)
 8105168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810516c:	081051ef 	.word	0x081051ef
 8105170:	08105265 	.word	0x08105265
 8105174:	081051f7 	.word	0x081051f7
 8105178:	08105265 	.word	0x08105265
 810517c:	08105265 	.word	0x08105265
 8105180:	08105265 	.word	0x08105265
 8105184:	08105207 	.word	0x08105207
 8105188:	08105265 	.word	0x08105265
 810518c:	08105265 	.word	0x08105265
 8105190:	08105265 	.word	0x08105265
 8105194:	08105265 	.word	0x08105265
 8105198:	08105265 	.word	0x08105265
 810519c:	08105265 	.word	0x08105265
 81051a0:	08105265 	.word	0x08105265
 81051a4:	08105217 	.word	0x08105217
 81051a8:	08105265 	.word	0x08105265
 81051ac:	08105265 	.word	0x08105265
 81051b0:	08105265 	.word	0x08105265
 81051b4:	08105265 	.word	0x08105265
 81051b8:	08105265 	.word	0x08105265
 81051bc:	08105265 	.word	0x08105265
 81051c0:	08105265 	.word	0x08105265
 81051c4:	08105265 	.word	0x08105265
 81051c8:	08105265 	.word	0x08105265
 81051cc:	08105265 	.word	0x08105265
 81051d0:	08105265 	.word	0x08105265
 81051d4:	08105265 	.word	0x08105265
 81051d8:	08105265 	.word	0x08105265
 81051dc:	08105265 	.word	0x08105265
 81051e0:	08105265 	.word	0x08105265
 81051e4:	08105257 	.word	0x08105257
 81051e8:	2b40      	cmp	r3, #64	@ 0x40
 81051ea:	d037      	beq.n	810525c <UART_SetConfig+0x6bc>
 81051ec:	e03a      	b.n	8105264 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81051ee:	f7fe fbe1 	bl	81039b4 <HAL_RCCEx_GetD3PCLK1Freq>
 81051f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81051f4:	e03c      	b.n	8105270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81051f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81051fa:	4618      	mov	r0, r3
 81051fc:	f7fe fbf0 	bl	81039e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105204:	e034      	b.n	8105270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105206:	f107 0318 	add.w	r3, r7, #24
 810520a:	4618      	mov	r0, r3
 810520c:	f7fe fd3c 	bl	8103c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105210:	69fb      	ldr	r3, [r7, #28]
 8105212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105214:	e02c      	b.n	8105270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105216:	4b09      	ldr	r3, [pc, #36]	@ (810523c <UART_SetConfig+0x69c>)
 8105218:	681b      	ldr	r3, [r3, #0]
 810521a:	f003 0320 	and.w	r3, r3, #32
 810521e:	2b00      	cmp	r3, #0
 8105220:	d016      	beq.n	8105250 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105222:	4b06      	ldr	r3, [pc, #24]	@ (810523c <UART_SetConfig+0x69c>)
 8105224:	681b      	ldr	r3, [r3, #0]
 8105226:	08db      	lsrs	r3, r3, #3
 8105228:	f003 0303 	and.w	r3, r3, #3
 810522c:	4a07      	ldr	r2, [pc, #28]	@ (810524c <UART_SetConfig+0x6ac>)
 810522e:	fa22 f303 	lsr.w	r3, r2, r3
 8105232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105234:	e01c      	b.n	8105270 <UART_SetConfig+0x6d0>
 8105236:	bf00      	nop
 8105238:	40011400 	.word	0x40011400
 810523c:	58024400 	.word	0x58024400
 8105240:	40007800 	.word	0x40007800
 8105244:	40007c00 	.word	0x40007c00
 8105248:	58000c00 	.word	0x58000c00
 810524c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8105250:	4b9d      	ldr	r3, [pc, #628]	@ (81054c8 <UART_SetConfig+0x928>)
 8105252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105254:	e00c      	b.n	8105270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105256:	4b9d      	ldr	r3, [pc, #628]	@ (81054cc <UART_SetConfig+0x92c>)
 8105258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810525a:	e009      	b.n	8105270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810525c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8105260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105262:	e005      	b.n	8105270 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8105264:	2300      	movs	r3, #0
 8105266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8105268:	2301      	movs	r3, #1
 810526a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810526e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105272:	2b00      	cmp	r3, #0
 8105274:	f000 81de 	beq.w	8105634 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105278:	697b      	ldr	r3, [r7, #20]
 810527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810527c:	4a94      	ldr	r2, [pc, #592]	@ (81054d0 <UART_SetConfig+0x930>)
 810527e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105282:	461a      	mov	r2, r3
 8105284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105286:	fbb3 f3f2 	udiv	r3, r3, r2
 810528a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810528c:	697b      	ldr	r3, [r7, #20]
 810528e:	685a      	ldr	r2, [r3, #4]
 8105290:	4613      	mov	r3, r2
 8105292:	005b      	lsls	r3, r3, #1
 8105294:	4413      	add	r3, r2
 8105296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105298:	429a      	cmp	r2, r3
 810529a:	d305      	bcc.n	81052a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810529c:	697b      	ldr	r3, [r7, #20]
 810529e:	685b      	ldr	r3, [r3, #4]
 81052a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81052a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81052a4:	429a      	cmp	r2, r3
 81052a6:	d903      	bls.n	81052b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81052a8:	2301      	movs	r3, #1
 81052aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81052ae:	e1c1      	b.n	8105634 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81052b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81052b2:	2200      	movs	r2, #0
 81052b4:	60bb      	str	r3, [r7, #8]
 81052b6:	60fa      	str	r2, [r7, #12]
 81052b8:	697b      	ldr	r3, [r7, #20]
 81052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81052bc:	4a84      	ldr	r2, [pc, #528]	@ (81054d0 <UART_SetConfig+0x930>)
 81052be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81052c2:	b29b      	uxth	r3, r3
 81052c4:	2200      	movs	r2, #0
 81052c6:	603b      	str	r3, [r7, #0]
 81052c8:	607a      	str	r2, [r7, #4]
 81052ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 81052ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81052d2:	f7fb f80d 	bl	81002f0 <__aeabi_uldivmod>
 81052d6:	4602      	mov	r2, r0
 81052d8:	460b      	mov	r3, r1
 81052da:	4610      	mov	r0, r2
 81052dc:	4619      	mov	r1, r3
 81052de:	f04f 0200 	mov.w	r2, #0
 81052e2:	f04f 0300 	mov.w	r3, #0
 81052e6:	020b      	lsls	r3, r1, #8
 81052e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81052ec:	0202      	lsls	r2, r0, #8
 81052ee:	6979      	ldr	r1, [r7, #20]
 81052f0:	6849      	ldr	r1, [r1, #4]
 81052f2:	0849      	lsrs	r1, r1, #1
 81052f4:	2000      	movs	r0, #0
 81052f6:	460c      	mov	r4, r1
 81052f8:	4605      	mov	r5, r0
 81052fa:	eb12 0804 	adds.w	r8, r2, r4
 81052fe:	eb43 0905 	adc.w	r9, r3, r5
 8105302:	697b      	ldr	r3, [r7, #20]
 8105304:	685b      	ldr	r3, [r3, #4]
 8105306:	2200      	movs	r2, #0
 8105308:	469a      	mov	sl, r3
 810530a:	4693      	mov	fp, r2
 810530c:	4652      	mov	r2, sl
 810530e:	465b      	mov	r3, fp
 8105310:	4640      	mov	r0, r8
 8105312:	4649      	mov	r1, r9
 8105314:	f7fa ffec 	bl	81002f0 <__aeabi_uldivmod>
 8105318:	4602      	mov	r2, r0
 810531a:	460b      	mov	r3, r1
 810531c:	4613      	mov	r3, r2
 810531e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8105320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105322:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105326:	d308      	bcc.n	810533a <UART_SetConfig+0x79a>
 8105328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810532a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810532e:	d204      	bcs.n	810533a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8105330:	697b      	ldr	r3, [r7, #20]
 8105332:	681b      	ldr	r3, [r3, #0]
 8105334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8105336:	60da      	str	r2, [r3, #12]
 8105338:	e17c      	b.n	8105634 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810533a:	2301      	movs	r3, #1
 810533c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8105340:	e178      	b.n	8105634 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8105342:	697b      	ldr	r3, [r7, #20]
 8105344:	69db      	ldr	r3, [r3, #28]
 8105346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810534a:	f040 80c5 	bne.w	81054d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810534e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8105352:	2b20      	cmp	r3, #32
 8105354:	dc48      	bgt.n	81053e8 <UART_SetConfig+0x848>
 8105356:	2b00      	cmp	r3, #0
 8105358:	db7b      	blt.n	8105452 <UART_SetConfig+0x8b2>
 810535a:	2b20      	cmp	r3, #32
 810535c:	d879      	bhi.n	8105452 <UART_SetConfig+0x8b2>
 810535e:	a201      	add	r2, pc, #4	@ (adr r2, 8105364 <UART_SetConfig+0x7c4>)
 8105360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105364:	081053ef 	.word	0x081053ef
 8105368:	081053f7 	.word	0x081053f7
 810536c:	08105453 	.word	0x08105453
 8105370:	08105453 	.word	0x08105453
 8105374:	081053ff 	.word	0x081053ff
 8105378:	08105453 	.word	0x08105453
 810537c:	08105453 	.word	0x08105453
 8105380:	08105453 	.word	0x08105453
 8105384:	0810540f 	.word	0x0810540f
 8105388:	08105453 	.word	0x08105453
 810538c:	08105453 	.word	0x08105453
 8105390:	08105453 	.word	0x08105453
 8105394:	08105453 	.word	0x08105453
 8105398:	08105453 	.word	0x08105453
 810539c:	08105453 	.word	0x08105453
 81053a0:	08105453 	.word	0x08105453
 81053a4:	0810541f 	.word	0x0810541f
 81053a8:	08105453 	.word	0x08105453
 81053ac:	08105453 	.word	0x08105453
 81053b0:	08105453 	.word	0x08105453
 81053b4:	08105453 	.word	0x08105453
 81053b8:	08105453 	.word	0x08105453
 81053bc:	08105453 	.word	0x08105453
 81053c0:	08105453 	.word	0x08105453
 81053c4:	08105453 	.word	0x08105453
 81053c8:	08105453 	.word	0x08105453
 81053cc:	08105453 	.word	0x08105453
 81053d0:	08105453 	.word	0x08105453
 81053d4:	08105453 	.word	0x08105453
 81053d8:	08105453 	.word	0x08105453
 81053dc:	08105453 	.word	0x08105453
 81053e0:	08105453 	.word	0x08105453
 81053e4:	08105445 	.word	0x08105445
 81053e8:	2b40      	cmp	r3, #64	@ 0x40
 81053ea:	d02e      	beq.n	810544a <UART_SetConfig+0x8aa>
 81053ec:	e031      	b.n	8105452 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81053ee:	f7fd f8ab 	bl	8102548 <HAL_RCC_GetPCLK1Freq>
 81053f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81053f4:	e033      	b.n	810545e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81053f6:	f7fd f8bd 	bl	8102574 <HAL_RCC_GetPCLK2Freq>
 81053fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81053fc:	e02f      	b.n	810545e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81053fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105402:	4618      	mov	r0, r3
 8105404:	f7fe faec 	bl	81039e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810540a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810540c:	e027      	b.n	810545e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810540e:	f107 0318 	add.w	r3, r7, #24
 8105412:	4618      	mov	r0, r3
 8105414:	f7fe fc38 	bl	8103c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105418:	69fb      	ldr	r3, [r7, #28]
 810541a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810541c:	e01f      	b.n	810545e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810541e:	4b2d      	ldr	r3, [pc, #180]	@ (81054d4 <UART_SetConfig+0x934>)
 8105420:	681b      	ldr	r3, [r3, #0]
 8105422:	f003 0320 	and.w	r3, r3, #32
 8105426:	2b00      	cmp	r3, #0
 8105428:	d009      	beq.n	810543e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810542a:	4b2a      	ldr	r3, [pc, #168]	@ (81054d4 <UART_SetConfig+0x934>)
 810542c:	681b      	ldr	r3, [r3, #0]
 810542e:	08db      	lsrs	r3, r3, #3
 8105430:	f003 0303 	and.w	r3, r3, #3
 8105434:	4a24      	ldr	r2, [pc, #144]	@ (81054c8 <UART_SetConfig+0x928>)
 8105436:	fa22 f303 	lsr.w	r3, r2, r3
 810543a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810543c:	e00f      	b.n	810545e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810543e:	4b22      	ldr	r3, [pc, #136]	@ (81054c8 <UART_SetConfig+0x928>)
 8105440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105442:	e00c      	b.n	810545e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105444:	4b21      	ldr	r3, [pc, #132]	@ (81054cc <UART_SetConfig+0x92c>)
 8105446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105448:	e009      	b.n	810545e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810544a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810544e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105450:	e005      	b.n	810545e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8105452:	2300      	movs	r3, #0
 8105454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8105456:	2301      	movs	r3, #1
 8105458:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810545c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810545e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105460:	2b00      	cmp	r3, #0
 8105462:	f000 80e7 	beq.w	8105634 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105466:	697b      	ldr	r3, [r7, #20]
 8105468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810546a:	4a19      	ldr	r2, [pc, #100]	@ (81054d0 <UART_SetConfig+0x930>)
 810546c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105470:	461a      	mov	r2, r3
 8105472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105474:	fbb3 f3f2 	udiv	r3, r3, r2
 8105478:	005a      	lsls	r2, r3, #1
 810547a:	697b      	ldr	r3, [r7, #20]
 810547c:	685b      	ldr	r3, [r3, #4]
 810547e:	085b      	lsrs	r3, r3, #1
 8105480:	441a      	add	r2, r3
 8105482:	697b      	ldr	r3, [r7, #20]
 8105484:	685b      	ldr	r3, [r3, #4]
 8105486:	fbb2 f3f3 	udiv	r3, r2, r3
 810548a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810548e:	2b0f      	cmp	r3, #15
 8105490:	d916      	bls.n	81054c0 <UART_SetConfig+0x920>
 8105492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105498:	d212      	bcs.n	81054c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810549a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810549c:	b29b      	uxth	r3, r3
 810549e:	f023 030f 	bic.w	r3, r3, #15
 81054a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81054a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81054a6:	085b      	lsrs	r3, r3, #1
 81054a8:	b29b      	uxth	r3, r3
 81054aa:	f003 0307 	and.w	r3, r3, #7
 81054ae:	b29a      	uxth	r2, r3
 81054b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 81054b2:	4313      	orrs	r3, r2
 81054b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 81054b6:	697b      	ldr	r3, [r7, #20]
 81054b8:	681b      	ldr	r3, [r3, #0]
 81054ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 81054bc:	60da      	str	r2, [r3, #12]
 81054be:	e0b9      	b.n	8105634 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81054c0:	2301      	movs	r3, #1
 81054c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81054c6:	e0b5      	b.n	8105634 <UART_SetConfig+0xa94>
 81054c8:	03d09000 	.word	0x03d09000
 81054cc:	003d0900 	.word	0x003d0900
 81054d0:	08108a00 	.word	0x08108a00
 81054d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81054d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81054dc:	2b20      	cmp	r3, #32
 81054de:	dc49      	bgt.n	8105574 <UART_SetConfig+0x9d4>
 81054e0:	2b00      	cmp	r3, #0
 81054e2:	db7c      	blt.n	81055de <UART_SetConfig+0xa3e>
 81054e4:	2b20      	cmp	r3, #32
 81054e6:	d87a      	bhi.n	81055de <UART_SetConfig+0xa3e>
 81054e8:	a201      	add	r2, pc, #4	@ (adr r2, 81054f0 <UART_SetConfig+0x950>)
 81054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054ee:	bf00      	nop
 81054f0:	0810557b 	.word	0x0810557b
 81054f4:	08105583 	.word	0x08105583
 81054f8:	081055df 	.word	0x081055df
 81054fc:	081055df 	.word	0x081055df
 8105500:	0810558b 	.word	0x0810558b
 8105504:	081055df 	.word	0x081055df
 8105508:	081055df 	.word	0x081055df
 810550c:	081055df 	.word	0x081055df
 8105510:	0810559b 	.word	0x0810559b
 8105514:	081055df 	.word	0x081055df
 8105518:	081055df 	.word	0x081055df
 810551c:	081055df 	.word	0x081055df
 8105520:	081055df 	.word	0x081055df
 8105524:	081055df 	.word	0x081055df
 8105528:	081055df 	.word	0x081055df
 810552c:	081055df 	.word	0x081055df
 8105530:	081055ab 	.word	0x081055ab
 8105534:	081055df 	.word	0x081055df
 8105538:	081055df 	.word	0x081055df
 810553c:	081055df 	.word	0x081055df
 8105540:	081055df 	.word	0x081055df
 8105544:	081055df 	.word	0x081055df
 8105548:	081055df 	.word	0x081055df
 810554c:	081055df 	.word	0x081055df
 8105550:	081055df 	.word	0x081055df
 8105554:	081055df 	.word	0x081055df
 8105558:	081055df 	.word	0x081055df
 810555c:	081055df 	.word	0x081055df
 8105560:	081055df 	.word	0x081055df
 8105564:	081055df 	.word	0x081055df
 8105568:	081055df 	.word	0x081055df
 810556c:	081055df 	.word	0x081055df
 8105570:	081055d1 	.word	0x081055d1
 8105574:	2b40      	cmp	r3, #64	@ 0x40
 8105576:	d02e      	beq.n	81055d6 <UART_SetConfig+0xa36>
 8105578:	e031      	b.n	81055de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810557a:	f7fc ffe5 	bl	8102548 <HAL_RCC_GetPCLK1Freq>
 810557e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105580:	e033      	b.n	81055ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105582:	f7fc fff7 	bl	8102574 <HAL_RCC_GetPCLK2Freq>
 8105586:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105588:	e02f      	b.n	81055ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810558a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810558e:	4618      	mov	r0, r3
 8105590:	f7fe fa26 	bl	81039e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105598:	e027      	b.n	81055ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810559a:	f107 0318 	add.w	r3, r7, #24
 810559e:	4618      	mov	r0, r3
 81055a0:	f7fe fb72 	bl	8103c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81055a4:	69fb      	ldr	r3, [r7, #28]
 81055a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81055a8:	e01f      	b.n	81055ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81055aa:	4b2d      	ldr	r3, [pc, #180]	@ (8105660 <UART_SetConfig+0xac0>)
 81055ac:	681b      	ldr	r3, [r3, #0]
 81055ae:	f003 0320 	and.w	r3, r3, #32
 81055b2:	2b00      	cmp	r3, #0
 81055b4:	d009      	beq.n	81055ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81055b6:	4b2a      	ldr	r3, [pc, #168]	@ (8105660 <UART_SetConfig+0xac0>)
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	08db      	lsrs	r3, r3, #3
 81055bc:	f003 0303 	and.w	r3, r3, #3
 81055c0:	4a28      	ldr	r2, [pc, #160]	@ (8105664 <UART_SetConfig+0xac4>)
 81055c2:	fa22 f303 	lsr.w	r3, r2, r3
 81055c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81055c8:	e00f      	b.n	81055ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81055ca:	4b26      	ldr	r3, [pc, #152]	@ (8105664 <UART_SetConfig+0xac4>)
 81055cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81055ce:	e00c      	b.n	81055ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81055d0:	4b25      	ldr	r3, [pc, #148]	@ (8105668 <UART_SetConfig+0xac8>)
 81055d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81055d4:	e009      	b.n	81055ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81055d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81055da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81055dc:	e005      	b.n	81055ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81055de:	2300      	movs	r3, #0
 81055e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81055e2:	2301      	movs	r3, #1
 81055e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81055e8:	bf00      	nop
    }

    if (pclk != 0U)
 81055ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81055ec:	2b00      	cmp	r3, #0
 81055ee:	d021      	beq.n	8105634 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81055f0:	697b      	ldr	r3, [r7, #20]
 81055f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81055f4:	4a1d      	ldr	r2, [pc, #116]	@ (810566c <UART_SetConfig+0xacc>)
 81055f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81055fa:	461a      	mov	r2, r3
 81055fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81055fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8105602:	697b      	ldr	r3, [r7, #20]
 8105604:	685b      	ldr	r3, [r3, #4]
 8105606:	085b      	lsrs	r3, r3, #1
 8105608:	441a      	add	r2, r3
 810560a:	697b      	ldr	r3, [r7, #20]
 810560c:	685b      	ldr	r3, [r3, #4]
 810560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8105612:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105616:	2b0f      	cmp	r3, #15
 8105618:	d909      	bls.n	810562e <UART_SetConfig+0xa8e>
 810561a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810561c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105620:	d205      	bcs.n	810562e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8105622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105624:	b29a      	uxth	r2, r3
 8105626:	697b      	ldr	r3, [r7, #20]
 8105628:	681b      	ldr	r3, [r3, #0]
 810562a:	60da      	str	r2, [r3, #12]
 810562c:	e002      	b.n	8105634 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810562e:	2301      	movs	r3, #1
 8105630:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8105634:	697b      	ldr	r3, [r7, #20]
 8105636:	2201      	movs	r2, #1
 8105638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810563c:	697b      	ldr	r3, [r7, #20]
 810563e:	2201      	movs	r2, #1
 8105640:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8105644:	697b      	ldr	r3, [r7, #20]
 8105646:	2200      	movs	r2, #0
 8105648:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810564a:	697b      	ldr	r3, [r7, #20]
 810564c:	2200      	movs	r2, #0
 810564e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8105650:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8105654:	4618      	mov	r0, r3
 8105656:	3748      	adds	r7, #72	@ 0x48
 8105658:	46bd      	mov	sp, r7
 810565a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810565e:	bf00      	nop
 8105660:	58024400 	.word	0x58024400
 8105664:	03d09000 	.word	0x03d09000
 8105668:	003d0900 	.word	0x003d0900
 810566c:	08108a00 	.word	0x08108a00

08105670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105670:	b480      	push	{r7}
 8105672:	b083      	sub	sp, #12
 8105674:	af00      	add	r7, sp, #0
 8105676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810567c:	f003 0308 	and.w	r3, r3, #8
 8105680:	2b00      	cmp	r3, #0
 8105682:	d00a      	beq.n	810569a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	681b      	ldr	r3, [r3, #0]
 8105688:	685b      	ldr	r3, [r3, #4]
 810568a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810568e:	687b      	ldr	r3, [r7, #4]
 8105690:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	681b      	ldr	r3, [r3, #0]
 8105696:	430a      	orrs	r2, r1
 8105698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810569a:	687b      	ldr	r3, [r7, #4]
 810569c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810569e:	f003 0301 	and.w	r3, r3, #1
 81056a2:	2b00      	cmp	r3, #0
 81056a4:	d00a      	beq.n	81056bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81056a6:	687b      	ldr	r3, [r7, #4]
 81056a8:	681b      	ldr	r3, [r3, #0]
 81056aa:	685b      	ldr	r3, [r3, #4]
 81056ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 81056b0:	687b      	ldr	r3, [r7, #4]
 81056b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	681b      	ldr	r3, [r3, #0]
 81056b8:	430a      	orrs	r2, r1
 81056ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81056c0:	f003 0302 	and.w	r3, r3, #2
 81056c4:	2b00      	cmp	r3, #0
 81056c6:	d00a      	beq.n	81056de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	685b      	ldr	r3, [r3, #4]
 81056ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81056d6:	687b      	ldr	r3, [r7, #4]
 81056d8:	681b      	ldr	r3, [r3, #0]
 81056da:	430a      	orrs	r2, r1
 81056dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81056de:	687b      	ldr	r3, [r7, #4]
 81056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81056e2:	f003 0304 	and.w	r3, r3, #4
 81056e6:	2b00      	cmp	r3, #0
 81056e8:	d00a      	beq.n	8105700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81056ea:	687b      	ldr	r3, [r7, #4]
 81056ec:	681b      	ldr	r3, [r3, #0]
 81056ee:	685b      	ldr	r3, [r3, #4]
 81056f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 81056f4:	687b      	ldr	r3, [r7, #4]
 81056f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81056f8:	687b      	ldr	r3, [r7, #4]
 81056fa:	681b      	ldr	r3, [r3, #0]
 81056fc:	430a      	orrs	r2, r1
 81056fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8105700:	687b      	ldr	r3, [r7, #4]
 8105702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105704:	f003 0310 	and.w	r3, r3, #16
 8105708:	2b00      	cmp	r3, #0
 810570a:	d00a      	beq.n	8105722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	681b      	ldr	r3, [r3, #0]
 8105710:	689b      	ldr	r3, [r3, #8]
 8105712:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8105716:	687b      	ldr	r3, [r7, #4]
 8105718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810571a:	687b      	ldr	r3, [r7, #4]
 810571c:	681b      	ldr	r3, [r3, #0]
 810571e:	430a      	orrs	r2, r1
 8105720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105726:	f003 0320 	and.w	r3, r3, #32
 810572a:	2b00      	cmp	r3, #0
 810572c:	d00a      	beq.n	8105744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810572e:	687b      	ldr	r3, [r7, #4]
 8105730:	681b      	ldr	r3, [r3, #0]
 8105732:	689b      	ldr	r3, [r3, #8]
 8105734:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8105738:	687b      	ldr	r3, [r7, #4]
 810573a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810573c:	687b      	ldr	r3, [r7, #4]
 810573e:	681b      	ldr	r3, [r3, #0]
 8105740:	430a      	orrs	r2, r1
 8105742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8105744:	687b      	ldr	r3, [r7, #4]
 8105746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810574c:	2b00      	cmp	r3, #0
 810574e:	d01a      	beq.n	8105786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105750:	687b      	ldr	r3, [r7, #4]
 8105752:	681b      	ldr	r3, [r3, #0]
 8105754:	685b      	ldr	r3, [r3, #4]
 8105756:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810575a:	687b      	ldr	r3, [r7, #4]
 810575c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810575e:	687b      	ldr	r3, [r7, #4]
 8105760:	681b      	ldr	r3, [r3, #0]
 8105762:	430a      	orrs	r2, r1
 8105764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105766:	687b      	ldr	r3, [r7, #4]
 8105768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810576a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810576e:	d10a      	bne.n	8105786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105770:	687b      	ldr	r3, [r7, #4]
 8105772:	681b      	ldr	r3, [r3, #0]
 8105774:	685b      	ldr	r3, [r3, #4]
 8105776:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	681b      	ldr	r3, [r3, #0]
 8105782:	430a      	orrs	r2, r1
 8105784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810578a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810578e:	2b00      	cmp	r3, #0
 8105790:	d00a      	beq.n	81057a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8105792:	687b      	ldr	r3, [r7, #4]
 8105794:	681b      	ldr	r3, [r3, #0]
 8105796:	685b      	ldr	r3, [r3, #4]
 8105798:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810579c:	687b      	ldr	r3, [r7, #4]
 810579e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	430a      	orrs	r2, r1
 81057a6:	605a      	str	r2, [r3, #4]
  }
}
 81057a8:	bf00      	nop
 81057aa:	370c      	adds	r7, #12
 81057ac:	46bd      	mov	sp, r7
 81057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057b2:	4770      	bx	lr

081057b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81057b4:	b580      	push	{r7, lr}
 81057b6:	b098      	sub	sp, #96	@ 0x60
 81057b8:	af02      	add	r7, sp, #8
 81057ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81057bc:	687b      	ldr	r3, [r7, #4]
 81057be:	2200      	movs	r2, #0
 81057c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81057c4:	f7fb fad2 	bl	8100d6c <HAL_GetTick>
 81057c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	681b      	ldr	r3, [r3, #0]
 81057d0:	f003 0308 	and.w	r3, r3, #8
 81057d4:	2b08      	cmp	r3, #8
 81057d6:	d12f      	bne.n	8105838 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81057d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 81057dc:	9300      	str	r3, [sp, #0]
 81057de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81057e0:	2200      	movs	r2, #0
 81057e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 81057e6:	6878      	ldr	r0, [r7, #4]
 81057e8:	f000 f88e 	bl	8105908 <UART_WaitOnFlagUntilTimeout>
 81057ec:	4603      	mov	r3, r0
 81057ee:	2b00      	cmp	r3, #0
 81057f0:	d022      	beq.n	8105838 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 81057f2:	687b      	ldr	r3, [r7, #4]
 81057f4:	681b      	ldr	r3, [r3, #0]
 81057f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81057f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81057fa:	e853 3f00 	ldrex	r3, [r3]
 81057fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8105800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8105806:	653b      	str	r3, [r7, #80]	@ 0x50
 8105808:	687b      	ldr	r3, [r7, #4]
 810580a:	681b      	ldr	r3, [r3, #0]
 810580c:	461a      	mov	r2, r3
 810580e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8105810:	647b      	str	r3, [r7, #68]	@ 0x44
 8105812:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105814:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8105816:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8105818:	e841 2300 	strex	r3, r2, [r1]
 810581c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810581e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105820:	2b00      	cmp	r3, #0
 8105822:	d1e6      	bne.n	81057f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8105824:	687b      	ldr	r3, [r7, #4]
 8105826:	2220      	movs	r2, #32
 8105828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810582c:	687b      	ldr	r3, [r7, #4]
 810582e:	2200      	movs	r2, #0
 8105830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105834:	2303      	movs	r3, #3
 8105836:	e063      	b.n	8105900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8105838:	687b      	ldr	r3, [r7, #4]
 810583a:	681b      	ldr	r3, [r3, #0]
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	f003 0304 	and.w	r3, r3, #4
 8105842:	2b04      	cmp	r3, #4
 8105844:	d149      	bne.n	81058da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105846:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810584a:	9300      	str	r3, [sp, #0]
 810584c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810584e:	2200      	movs	r2, #0
 8105850:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8105854:	6878      	ldr	r0, [r7, #4]
 8105856:	f000 f857 	bl	8105908 <UART_WaitOnFlagUntilTimeout>
 810585a:	4603      	mov	r3, r0
 810585c:	2b00      	cmp	r3, #0
 810585e:	d03c      	beq.n	81058da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8105860:	687b      	ldr	r3, [r7, #4]
 8105862:	681b      	ldr	r3, [r3, #0]
 8105864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105868:	e853 3f00 	ldrex	r3, [r3]
 810586c:	623b      	str	r3, [r7, #32]
   return(result);
 810586e:	6a3b      	ldr	r3, [r7, #32]
 8105870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8105874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	681b      	ldr	r3, [r3, #0]
 810587a:	461a      	mov	r2, r3
 810587c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810587e:	633b      	str	r3, [r7, #48]	@ 0x30
 8105880:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8105884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105886:	e841 2300 	strex	r3, r2, [r1]
 810588a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810588c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810588e:	2b00      	cmp	r3, #0
 8105890:	d1e6      	bne.n	8105860 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	681b      	ldr	r3, [r3, #0]
 8105896:	3308      	adds	r3, #8
 8105898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810589a:	693b      	ldr	r3, [r7, #16]
 810589c:	e853 3f00 	ldrex	r3, [r3]
 81058a0:	60fb      	str	r3, [r7, #12]
   return(result);
 81058a2:	68fb      	ldr	r3, [r7, #12]
 81058a4:	f023 0301 	bic.w	r3, r3, #1
 81058a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 81058aa:	687b      	ldr	r3, [r7, #4]
 81058ac:	681b      	ldr	r3, [r3, #0]
 81058ae:	3308      	adds	r3, #8
 81058b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81058b2:	61fa      	str	r2, [r7, #28]
 81058b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81058b6:	69b9      	ldr	r1, [r7, #24]
 81058b8:	69fa      	ldr	r2, [r7, #28]
 81058ba:	e841 2300 	strex	r3, r2, [r1]
 81058be:	617b      	str	r3, [r7, #20]
   return(result);
 81058c0:	697b      	ldr	r3, [r7, #20]
 81058c2:	2b00      	cmp	r3, #0
 81058c4:	d1e5      	bne.n	8105892 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81058c6:	687b      	ldr	r3, [r7, #4]
 81058c8:	2220      	movs	r2, #32
 81058ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 81058ce:	687b      	ldr	r3, [r7, #4]
 81058d0:	2200      	movs	r2, #0
 81058d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81058d6:	2303      	movs	r3, #3
 81058d8:	e012      	b.n	8105900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81058da:	687b      	ldr	r3, [r7, #4]
 81058dc:	2220      	movs	r2, #32
 81058de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81058e2:	687b      	ldr	r3, [r7, #4]
 81058e4:	2220      	movs	r2, #32
 81058e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	2200      	movs	r2, #0
 81058ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81058f0:	687b      	ldr	r3, [r7, #4]
 81058f2:	2200      	movs	r2, #0
 81058f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	2200      	movs	r2, #0
 81058fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81058fe:	2300      	movs	r3, #0
}
 8105900:	4618      	mov	r0, r3
 8105902:	3758      	adds	r7, #88	@ 0x58
 8105904:	46bd      	mov	sp, r7
 8105906:	bd80      	pop	{r7, pc}

08105908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8105908:	b580      	push	{r7, lr}
 810590a:	b084      	sub	sp, #16
 810590c:	af00      	add	r7, sp, #0
 810590e:	60f8      	str	r0, [r7, #12]
 8105910:	60b9      	str	r1, [r7, #8]
 8105912:	603b      	str	r3, [r7, #0]
 8105914:	4613      	mov	r3, r2
 8105916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105918:	e04f      	b.n	81059ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810591a:	69bb      	ldr	r3, [r7, #24]
 810591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105920:	d04b      	beq.n	81059ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105922:	f7fb fa23 	bl	8100d6c <HAL_GetTick>
 8105926:	4602      	mov	r2, r0
 8105928:	683b      	ldr	r3, [r7, #0]
 810592a:	1ad3      	subs	r3, r2, r3
 810592c:	69ba      	ldr	r2, [r7, #24]
 810592e:	429a      	cmp	r2, r3
 8105930:	d302      	bcc.n	8105938 <UART_WaitOnFlagUntilTimeout+0x30>
 8105932:	69bb      	ldr	r3, [r7, #24]
 8105934:	2b00      	cmp	r3, #0
 8105936:	d101      	bne.n	810593c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8105938:	2303      	movs	r3, #3
 810593a:	e04e      	b.n	81059da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810593c:	68fb      	ldr	r3, [r7, #12]
 810593e:	681b      	ldr	r3, [r3, #0]
 8105940:	681b      	ldr	r3, [r3, #0]
 8105942:	f003 0304 	and.w	r3, r3, #4
 8105946:	2b00      	cmp	r3, #0
 8105948:	d037      	beq.n	81059ba <UART_WaitOnFlagUntilTimeout+0xb2>
 810594a:	68bb      	ldr	r3, [r7, #8]
 810594c:	2b80      	cmp	r3, #128	@ 0x80
 810594e:	d034      	beq.n	81059ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8105950:	68bb      	ldr	r3, [r7, #8]
 8105952:	2b40      	cmp	r3, #64	@ 0x40
 8105954:	d031      	beq.n	81059ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8105956:	68fb      	ldr	r3, [r7, #12]
 8105958:	681b      	ldr	r3, [r3, #0]
 810595a:	69db      	ldr	r3, [r3, #28]
 810595c:	f003 0308 	and.w	r3, r3, #8
 8105960:	2b08      	cmp	r3, #8
 8105962:	d110      	bne.n	8105986 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8105964:	68fb      	ldr	r3, [r7, #12]
 8105966:	681b      	ldr	r3, [r3, #0]
 8105968:	2208      	movs	r2, #8
 810596a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810596c:	68f8      	ldr	r0, [r7, #12]
 810596e:	f000 f838 	bl	81059e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8105972:	68fb      	ldr	r3, [r7, #12]
 8105974:	2208      	movs	r2, #8
 8105976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810597a:	68fb      	ldr	r3, [r7, #12]
 810597c:	2200      	movs	r2, #0
 810597e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8105982:	2301      	movs	r3, #1
 8105984:	e029      	b.n	81059da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8105986:	68fb      	ldr	r3, [r7, #12]
 8105988:	681b      	ldr	r3, [r3, #0]
 810598a:	69db      	ldr	r3, [r3, #28]
 810598c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8105990:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8105994:	d111      	bne.n	81059ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8105996:	68fb      	ldr	r3, [r7, #12]
 8105998:	681b      	ldr	r3, [r3, #0]
 810599a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810599e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81059a0:	68f8      	ldr	r0, [r7, #12]
 81059a2:	f000 f81e 	bl	81059e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81059a6:	68fb      	ldr	r3, [r7, #12]
 81059a8:	2220      	movs	r2, #32
 81059aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81059ae:	68fb      	ldr	r3, [r7, #12]
 81059b0:	2200      	movs	r2, #0
 81059b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 81059b6:	2303      	movs	r3, #3
 81059b8:	e00f      	b.n	81059da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81059ba:	68fb      	ldr	r3, [r7, #12]
 81059bc:	681b      	ldr	r3, [r3, #0]
 81059be:	69da      	ldr	r2, [r3, #28]
 81059c0:	68bb      	ldr	r3, [r7, #8]
 81059c2:	4013      	ands	r3, r2
 81059c4:	68ba      	ldr	r2, [r7, #8]
 81059c6:	429a      	cmp	r2, r3
 81059c8:	bf0c      	ite	eq
 81059ca:	2301      	moveq	r3, #1
 81059cc:	2300      	movne	r3, #0
 81059ce:	b2db      	uxtb	r3, r3
 81059d0:	461a      	mov	r2, r3
 81059d2:	79fb      	ldrb	r3, [r7, #7]
 81059d4:	429a      	cmp	r2, r3
 81059d6:	d0a0      	beq.n	810591a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81059d8:	2300      	movs	r3, #0
}
 81059da:	4618      	mov	r0, r3
 81059dc:	3710      	adds	r7, #16
 81059de:	46bd      	mov	sp, r7
 81059e0:	bd80      	pop	{r7, pc}

081059e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81059e2:	b480      	push	{r7}
 81059e4:	b095      	sub	sp, #84	@ 0x54
 81059e6:	af00      	add	r7, sp, #0
 81059e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81059ea:	687b      	ldr	r3, [r7, #4]
 81059ec:	681b      	ldr	r3, [r3, #0]
 81059ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81059f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81059f2:	e853 3f00 	ldrex	r3, [r3]
 81059f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81059f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81059fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81059fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105a00:	687b      	ldr	r3, [r7, #4]
 8105a02:	681b      	ldr	r3, [r3, #0]
 8105a04:	461a      	mov	r2, r3
 8105a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8105a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8105a0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105a0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8105a0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8105a10:	e841 2300 	strex	r3, r2, [r1]
 8105a14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8105a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105a18:	2b00      	cmp	r3, #0
 8105a1a:	d1e6      	bne.n	81059ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	681b      	ldr	r3, [r3, #0]
 8105a20:	3308      	adds	r3, #8
 8105a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105a24:	6a3b      	ldr	r3, [r7, #32]
 8105a26:	e853 3f00 	ldrex	r3, [r3]
 8105a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8105a2c:	69fb      	ldr	r3, [r7, #28]
 8105a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8105a32:	f023 0301 	bic.w	r3, r3, #1
 8105a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	681b      	ldr	r3, [r3, #0]
 8105a3c:	3308      	adds	r3, #8
 8105a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8105a40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8105a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8105a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105a48:	e841 2300 	strex	r3, r2, [r1]
 8105a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8105a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105a50:	2b00      	cmp	r3, #0
 8105a52:	d1e3      	bne.n	8105a1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8105a54:	687b      	ldr	r3, [r7, #4]
 8105a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105a58:	2b01      	cmp	r3, #1
 8105a5a:	d118      	bne.n	8105a8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	681b      	ldr	r3, [r3, #0]
 8105a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105a62:	68fb      	ldr	r3, [r7, #12]
 8105a64:	e853 3f00 	ldrex	r3, [r3]
 8105a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8105a6a:	68bb      	ldr	r3, [r7, #8]
 8105a6c:	f023 0310 	bic.w	r3, r3, #16
 8105a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8105a72:	687b      	ldr	r3, [r7, #4]
 8105a74:	681b      	ldr	r3, [r3, #0]
 8105a76:	461a      	mov	r2, r3
 8105a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105a7a:	61bb      	str	r3, [r7, #24]
 8105a7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105a7e:	6979      	ldr	r1, [r7, #20]
 8105a80:	69ba      	ldr	r2, [r7, #24]
 8105a82:	e841 2300 	strex	r3, r2, [r1]
 8105a86:	613b      	str	r3, [r7, #16]
   return(result);
 8105a88:	693b      	ldr	r3, [r7, #16]
 8105a8a:	2b00      	cmp	r3, #0
 8105a8c:	d1e6      	bne.n	8105a5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	2220      	movs	r2, #32
 8105a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105a96:	687b      	ldr	r3, [r7, #4]
 8105a98:	2200      	movs	r2, #0
 8105a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	2200      	movs	r2, #0
 8105aa0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8105aa2:	bf00      	nop
 8105aa4:	3754      	adds	r7, #84	@ 0x54
 8105aa6:	46bd      	mov	sp, r7
 8105aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105aac:	4770      	bx	lr

08105aae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8105aae:	b580      	push	{r7, lr}
 8105ab0:	b084      	sub	sp, #16
 8105ab2:	af00      	add	r7, sp, #0
 8105ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8105ab6:	687b      	ldr	r3, [r7, #4]
 8105ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105aba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8105abc:	68fb      	ldr	r3, [r7, #12]
 8105abe:	2200      	movs	r2, #0
 8105ac0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8105ac4:	68f8      	ldr	r0, [r7, #12]
 8105ac6:	f7ff f855 	bl	8104b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8105aca:	bf00      	nop
 8105acc:	3710      	adds	r7, #16
 8105ace:	46bd      	mov	sp, r7
 8105ad0:	bd80      	pop	{r7, pc}

08105ad2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8105ad2:	b580      	push	{r7, lr}
 8105ad4:	b088      	sub	sp, #32
 8105ad6:	af00      	add	r7, sp, #0
 8105ad8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8105ada:	687b      	ldr	r3, [r7, #4]
 8105adc:	681b      	ldr	r3, [r3, #0]
 8105ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105ae0:	68fb      	ldr	r3, [r7, #12]
 8105ae2:	e853 3f00 	ldrex	r3, [r3]
 8105ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8105ae8:	68bb      	ldr	r3, [r7, #8]
 8105aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8105aee:	61fb      	str	r3, [r7, #28]
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	681b      	ldr	r3, [r3, #0]
 8105af4:	461a      	mov	r2, r3
 8105af6:	69fb      	ldr	r3, [r7, #28]
 8105af8:	61bb      	str	r3, [r7, #24]
 8105afa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105afc:	6979      	ldr	r1, [r7, #20]
 8105afe:	69ba      	ldr	r2, [r7, #24]
 8105b00:	e841 2300 	strex	r3, r2, [r1]
 8105b04:	613b      	str	r3, [r7, #16]
   return(result);
 8105b06:	693b      	ldr	r3, [r7, #16]
 8105b08:	2b00      	cmp	r3, #0
 8105b0a:	d1e6      	bne.n	8105ada <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8105b0c:	687b      	ldr	r3, [r7, #4]
 8105b0e:	2220      	movs	r2, #32
 8105b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8105b14:	687b      	ldr	r3, [r7, #4]
 8105b16:	2200      	movs	r2, #0
 8105b18:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8105b1a:	6878      	ldr	r0, [r7, #4]
 8105b1c:	f7ff f820 	bl	8104b60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8105b20:	bf00      	nop
 8105b22:	3720      	adds	r7, #32
 8105b24:	46bd      	mov	sp, r7
 8105b26:	bd80      	pop	{r7, pc}

08105b28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8105b28:	b480      	push	{r7}
 8105b2a:	b083      	sub	sp, #12
 8105b2c:	af00      	add	r7, sp, #0
 8105b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8105b30:	bf00      	nop
 8105b32:	370c      	adds	r7, #12
 8105b34:	46bd      	mov	sp, r7
 8105b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b3a:	4770      	bx	lr

08105b3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8105b3c:	b480      	push	{r7}
 8105b3e:	b083      	sub	sp, #12
 8105b40:	af00      	add	r7, sp, #0
 8105b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8105b44:	bf00      	nop
 8105b46:	370c      	adds	r7, #12
 8105b48:	46bd      	mov	sp, r7
 8105b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b4e:	4770      	bx	lr

08105b50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8105b50:	b480      	push	{r7}
 8105b52:	b083      	sub	sp, #12
 8105b54:	af00      	add	r7, sp, #0
 8105b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8105b58:	bf00      	nop
 8105b5a:	370c      	adds	r7, #12
 8105b5c:	46bd      	mov	sp, r7
 8105b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b62:	4770      	bx	lr

08105b64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8105b64:	b480      	push	{r7}
 8105b66:	b085      	sub	sp, #20
 8105b68:	af00      	add	r7, sp, #0
 8105b6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105b6c:	687b      	ldr	r3, [r7, #4]
 8105b6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8105b72:	2b01      	cmp	r3, #1
 8105b74:	d101      	bne.n	8105b7a <HAL_UARTEx_DisableFifoMode+0x16>
 8105b76:	2302      	movs	r3, #2
 8105b78:	e027      	b.n	8105bca <HAL_UARTEx_DisableFifoMode+0x66>
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	2201      	movs	r2, #1
 8105b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8105b82:	687b      	ldr	r3, [r7, #4]
 8105b84:	2224      	movs	r2, #36	@ 0x24
 8105b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105b8a:	687b      	ldr	r3, [r7, #4]
 8105b8c:	681b      	ldr	r3, [r3, #0]
 8105b8e:	681b      	ldr	r3, [r3, #0]
 8105b90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105b92:	687b      	ldr	r3, [r7, #4]
 8105b94:	681b      	ldr	r3, [r3, #0]
 8105b96:	681a      	ldr	r2, [r3, #0]
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	681b      	ldr	r3, [r3, #0]
 8105b9c:	f022 0201 	bic.w	r2, r2, #1
 8105ba0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8105ba2:	68fb      	ldr	r3, [r7, #12]
 8105ba4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8105ba8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8105baa:	687b      	ldr	r3, [r7, #4]
 8105bac:	2200      	movs	r2, #0
 8105bae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105bb0:	687b      	ldr	r3, [r7, #4]
 8105bb2:	681b      	ldr	r3, [r3, #0]
 8105bb4:	68fa      	ldr	r2, [r7, #12]
 8105bb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105bb8:	687b      	ldr	r3, [r7, #4]
 8105bba:	2220      	movs	r2, #32
 8105bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105bc0:	687b      	ldr	r3, [r7, #4]
 8105bc2:	2200      	movs	r2, #0
 8105bc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8105bc8:	2300      	movs	r3, #0
}
 8105bca:	4618      	mov	r0, r3
 8105bcc:	3714      	adds	r7, #20
 8105bce:	46bd      	mov	sp, r7
 8105bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bd4:	4770      	bx	lr

08105bd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105bd6:	b580      	push	{r7, lr}
 8105bd8:	b084      	sub	sp, #16
 8105bda:	af00      	add	r7, sp, #0
 8105bdc:	6078      	str	r0, [r7, #4]
 8105bde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105be0:	687b      	ldr	r3, [r7, #4]
 8105be2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8105be6:	2b01      	cmp	r3, #1
 8105be8:	d101      	bne.n	8105bee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8105bea:	2302      	movs	r3, #2
 8105bec:	e02d      	b.n	8105c4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8105bee:	687b      	ldr	r3, [r7, #4]
 8105bf0:	2201      	movs	r2, #1
 8105bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8105bf6:	687b      	ldr	r3, [r7, #4]
 8105bf8:	2224      	movs	r2, #36	@ 0x24
 8105bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105bfe:	687b      	ldr	r3, [r7, #4]
 8105c00:	681b      	ldr	r3, [r3, #0]
 8105c02:	681b      	ldr	r3, [r3, #0]
 8105c04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105c06:	687b      	ldr	r3, [r7, #4]
 8105c08:	681b      	ldr	r3, [r3, #0]
 8105c0a:	681a      	ldr	r2, [r3, #0]
 8105c0c:	687b      	ldr	r3, [r7, #4]
 8105c0e:	681b      	ldr	r3, [r3, #0]
 8105c10:	f022 0201 	bic.w	r2, r2, #1
 8105c14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8105c16:	687b      	ldr	r3, [r7, #4]
 8105c18:	681b      	ldr	r3, [r3, #0]
 8105c1a:	689b      	ldr	r3, [r3, #8]
 8105c1c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8105c20:	687b      	ldr	r3, [r7, #4]
 8105c22:	681b      	ldr	r3, [r3, #0]
 8105c24:	683a      	ldr	r2, [r7, #0]
 8105c26:	430a      	orrs	r2, r1
 8105c28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105c2a:	6878      	ldr	r0, [r7, #4]
 8105c2c:	f000 f850 	bl	8105cd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105c30:	687b      	ldr	r3, [r7, #4]
 8105c32:	681b      	ldr	r3, [r3, #0]
 8105c34:	68fa      	ldr	r2, [r7, #12]
 8105c36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105c38:	687b      	ldr	r3, [r7, #4]
 8105c3a:	2220      	movs	r2, #32
 8105c3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	2200      	movs	r2, #0
 8105c44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8105c48:	2300      	movs	r3, #0
}
 8105c4a:	4618      	mov	r0, r3
 8105c4c:	3710      	adds	r7, #16
 8105c4e:	46bd      	mov	sp, r7
 8105c50:	bd80      	pop	{r7, pc}

08105c52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105c52:	b580      	push	{r7, lr}
 8105c54:	b084      	sub	sp, #16
 8105c56:	af00      	add	r7, sp, #0
 8105c58:	6078      	str	r0, [r7, #4]
 8105c5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105c5c:	687b      	ldr	r3, [r7, #4]
 8105c5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8105c62:	2b01      	cmp	r3, #1
 8105c64:	d101      	bne.n	8105c6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8105c66:	2302      	movs	r3, #2
 8105c68:	e02d      	b.n	8105cc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	2201      	movs	r2, #1
 8105c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8105c72:	687b      	ldr	r3, [r7, #4]
 8105c74:	2224      	movs	r2, #36	@ 0x24
 8105c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	681b      	ldr	r3, [r3, #0]
 8105c7e:	681b      	ldr	r3, [r3, #0]
 8105c80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105c82:	687b      	ldr	r3, [r7, #4]
 8105c84:	681b      	ldr	r3, [r3, #0]
 8105c86:	681a      	ldr	r2, [r3, #0]
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	681b      	ldr	r3, [r3, #0]
 8105c8c:	f022 0201 	bic.w	r2, r2, #1
 8105c90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8105c92:	687b      	ldr	r3, [r7, #4]
 8105c94:	681b      	ldr	r3, [r3, #0]
 8105c96:	689b      	ldr	r3, [r3, #8]
 8105c98:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	681b      	ldr	r3, [r3, #0]
 8105ca0:	683a      	ldr	r2, [r7, #0]
 8105ca2:	430a      	orrs	r2, r1
 8105ca4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105ca6:	6878      	ldr	r0, [r7, #4]
 8105ca8:	f000 f812 	bl	8105cd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	681b      	ldr	r3, [r3, #0]
 8105cb0:	68fa      	ldr	r2, [r7, #12]
 8105cb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105cb4:	687b      	ldr	r3, [r7, #4]
 8105cb6:	2220      	movs	r2, #32
 8105cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105cbc:	687b      	ldr	r3, [r7, #4]
 8105cbe:	2200      	movs	r2, #0
 8105cc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8105cc4:	2300      	movs	r3, #0
}
 8105cc6:	4618      	mov	r0, r3
 8105cc8:	3710      	adds	r7, #16
 8105cca:	46bd      	mov	sp, r7
 8105ccc:	bd80      	pop	{r7, pc}
	...

08105cd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8105cd0:	b480      	push	{r7}
 8105cd2:	b085      	sub	sp, #20
 8105cd4:	af00      	add	r7, sp, #0
 8105cd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105cdc:	2b00      	cmp	r3, #0
 8105cde:	d108      	bne.n	8105cf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8105ce0:	687b      	ldr	r3, [r7, #4]
 8105ce2:	2201      	movs	r2, #1
 8105ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8105ce8:	687b      	ldr	r3, [r7, #4]
 8105cea:	2201      	movs	r2, #1
 8105cec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8105cf0:	e031      	b.n	8105d56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8105cf2:	2310      	movs	r3, #16
 8105cf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8105cf6:	2310      	movs	r3, #16
 8105cf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	681b      	ldr	r3, [r3, #0]
 8105cfe:	689b      	ldr	r3, [r3, #8]
 8105d00:	0e5b      	lsrs	r3, r3, #25
 8105d02:	b2db      	uxtb	r3, r3
 8105d04:	f003 0307 	and.w	r3, r3, #7
 8105d08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8105d0a:	687b      	ldr	r3, [r7, #4]
 8105d0c:	681b      	ldr	r3, [r3, #0]
 8105d0e:	689b      	ldr	r3, [r3, #8]
 8105d10:	0f5b      	lsrs	r3, r3, #29
 8105d12:	b2db      	uxtb	r3, r3
 8105d14:	f003 0307 	and.w	r3, r3, #7
 8105d18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105d1a:	7bbb      	ldrb	r3, [r7, #14]
 8105d1c:	7b3a      	ldrb	r2, [r7, #12]
 8105d1e:	4911      	ldr	r1, [pc, #68]	@ (8105d64 <UARTEx_SetNbDataToProcess+0x94>)
 8105d20:	5c8a      	ldrb	r2, [r1, r2]
 8105d22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8105d26:	7b3a      	ldrb	r2, [r7, #12]
 8105d28:	490f      	ldr	r1, [pc, #60]	@ (8105d68 <UARTEx_SetNbDataToProcess+0x98>)
 8105d2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105d2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8105d30:	b29a      	uxth	r2, r3
 8105d32:	687b      	ldr	r3, [r7, #4]
 8105d34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105d38:	7bfb      	ldrb	r3, [r7, #15]
 8105d3a:	7b7a      	ldrb	r2, [r7, #13]
 8105d3c:	4909      	ldr	r1, [pc, #36]	@ (8105d64 <UARTEx_SetNbDataToProcess+0x94>)
 8105d3e:	5c8a      	ldrb	r2, [r1, r2]
 8105d40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8105d44:	7b7a      	ldrb	r2, [r7, #13]
 8105d46:	4908      	ldr	r1, [pc, #32]	@ (8105d68 <UARTEx_SetNbDataToProcess+0x98>)
 8105d48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105d4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8105d4e:	b29a      	uxth	r2, r3
 8105d50:	687b      	ldr	r3, [r7, #4]
 8105d52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8105d56:	bf00      	nop
 8105d58:	3714      	adds	r7, #20
 8105d5a:	46bd      	mov	sp, r7
 8105d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d60:	4770      	bx	lr
 8105d62:	bf00      	nop
 8105d64:	08108a18 	.word	0x08108a18
 8105d68:	08108a20 	.word	0x08108a20

08105d6c <__NVIC_SetPriority>:
{
 8105d6c:	b480      	push	{r7}
 8105d6e:	b083      	sub	sp, #12
 8105d70:	af00      	add	r7, sp, #0
 8105d72:	4603      	mov	r3, r0
 8105d74:	6039      	str	r1, [r7, #0]
 8105d76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105d7c:	2b00      	cmp	r3, #0
 8105d7e:	db0a      	blt.n	8105d96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105d80:	683b      	ldr	r3, [r7, #0]
 8105d82:	b2da      	uxtb	r2, r3
 8105d84:	490c      	ldr	r1, [pc, #48]	@ (8105db8 <__NVIC_SetPriority+0x4c>)
 8105d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105d8a:	0112      	lsls	r2, r2, #4
 8105d8c:	b2d2      	uxtb	r2, r2
 8105d8e:	440b      	add	r3, r1
 8105d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8105d94:	e00a      	b.n	8105dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105d96:	683b      	ldr	r3, [r7, #0]
 8105d98:	b2da      	uxtb	r2, r3
 8105d9a:	4908      	ldr	r1, [pc, #32]	@ (8105dbc <__NVIC_SetPriority+0x50>)
 8105d9c:	88fb      	ldrh	r3, [r7, #6]
 8105d9e:	f003 030f 	and.w	r3, r3, #15
 8105da2:	3b04      	subs	r3, #4
 8105da4:	0112      	lsls	r2, r2, #4
 8105da6:	b2d2      	uxtb	r2, r2
 8105da8:	440b      	add	r3, r1
 8105daa:	761a      	strb	r2, [r3, #24]
}
 8105dac:	bf00      	nop
 8105dae:	370c      	adds	r7, #12
 8105db0:	46bd      	mov	sp, r7
 8105db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105db6:	4770      	bx	lr
 8105db8:	e000e100 	.word	0xe000e100
 8105dbc:	e000ed00 	.word	0xe000ed00

08105dc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8105dc0:	b580      	push	{r7, lr}
 8105dc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8105dc4:	2100      	movs	r1, #0
 8105dc6:	f06f 0004 	mvn.w	r0, #4
 8105dca:	f7ff ffcf 	bl	8105d6c <__NVIC_SetPriority>
#endif
}
 8105dce:	bf00      	nop
 8105dd0:	bd80      	pop	{r7, pc}
	...

08105dd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8105dd4:	b480      	push	{r7}
 8105dd6:	b083      	sub	sp, #12
 8105dd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105dda:	f3ef 8305 	mrs	r3, IPSR
 8105dde:	603b      	str	r3, [r7, #0]
  return(result);
 8105de0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8105de2:	2b00      	cmp	r3, #0
 8105de4:	d003      	beq.n	8105dee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8105de6:	f06f 0305 	mvn.w	r3, #5
 8105dea:	607b      	str	r3, [r7, #4]
 8105dec:	e00c      	b.n	8105e08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8105dee:	4b0a      	ldr	r3, [pc, #40]	@ (8105e18 <osKernelInitialize+0x44>)
 8105df0:	681b      	ldr	r3, [r3, #0]
 8105df2:	2b00      	cmp	r3, #0
 8105df4:	d105      	bne.n	8105e02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8105df6:	4b08      	ldr	r3, [pc, #32]	@ (8105e18 <osKernelInitialize+0x44>)
 8105df8:	2201      	movs	r2, #1
 8105dfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8105dfc:	2300      	movs	r3, #0
 8105dfe:	607b      	str	r3, [r7, #4]
 8105e00:	e002      	b.n	8105e08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8105e02:	f04f 33ff 	mov.w	r3, #4294967295
 8105e06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8105e08:	687b      	ldr	r3, [r7, #4]
}
 8105e0a:	4618      	mov	r0, r3
 8105e0c:	370c      	adds	r7, #12
 8105e0e:	46bd      	mov	sp, r7
 8105e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e14:	4770      	bx	lr
 8105e16:	bf00      	nop
 8105e18:	10000124 	.word	0x10000124

08105e1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8105e1c:	b580      	push	{r7, lr}
 8105e1e:	b082      	sub	sp, #8
 8105e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105e22:	f3ef 8305 	mrs	r3, IPSR
 8105e26:	603b      	str	r3, [r7, #0]
  return(result);
 8105e28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8105e2a:	2b00      	cmp	r3, #0
 8105e2c:	d003      	beq.n	8105e36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8105e2e:	f06f 0305 	mvn.w	r3, #5
 8105e32:	607b      	str	r3, [r7, #4]
 8105e34:	e010      	b.n	8105e58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8105e36:	4b0b      	ldr	r3, [pc, #44]	@ (8105e64 <osKernelStart+0x48>)
 8105e38:	681b      	ldr	r3, [r3, #0]
 8105e3a:	2b01      	cmp	r3, #1
 8105e3c:	d109      	bne.n	8105e52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8105e3e:	f7ff ffbf 	bl	8105dc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8105e42:	4b08      	ldr	r3, [pc, #32]	@ (8105e64 <osKernelStart+0x48>)
 8105e44:	2202      	movs	r2, #2
 8105e46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8105e48:	f001 fcbe 	bl	81077c8 <vTaskStartScheduler>
      stat = osOK;
 8105e4c:	2300      	movs	r3, #0
 8105e4e:	607b      	str	r3, [r7, #4]
 8105e50:	e002      	b.n	8105e58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8105e52:	f04f 33ff 	mov.w	r3, #4294967295
 8105e56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8105e58:	687b      	ldr	r3, [r7, #4]
}
 8105e5a:	4618      	mov	r0, r3
 8105e5c:	3708      	adds	r7, #8
 8105e5e:	46bd      	mov	sp, r7
 8105e60:	bd80      	pop	{r7, pc}
 8105e62:	bf00      	nop
 8105e64:	10000124 	.word	0x10000124

08105e68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8105e68:	b580      	push	{r7, lr}
 8105e6a:	b08e      	sub	sp, #56	@ 0x38
 8105e6c:	af04      	add	r7, sp, #16
 8105e6e:	60f8      	str	r0, [r7, #12]
 8105e70:	60b9      	str	r1, [r7, #8]
 8105e72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8105e74:	2300      	movs	r3, #0
 8105e76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105e78:	f3ef 8305 	mrs	r3, IPSR
 8105e7c:	617b      	str	r3, [r7, #20]
  return(result);
 8105e7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8105e80:	2b00      	cmp	r3, #0
 8105e82:	d17e      	bne.n	8105f82 <osThreadNew+0x11a>
 8105e84:	68fb      	ldr	r3, [r7, #12]
 8105e86:	2b00      	cmp	r3, #0
 8105e88:	d07b      	beq.n	8105f82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8105e8a:	2380      	movs	r3, #128	@ 0x80
 8105e8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8105e8e:	2318      	movs	r3, #24
 8105e90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8105e92:	2300      	movs	r3, #0
 8105e94:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8105e96:	f04f 33ff 	mov.w	r3, #4294967295
 8105e9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8105e9c:	687b      	ldr	r3, [r7, #4]
 8105e9e:	2b00      	cmp	r3, #0
 8105ea0:	d045      	beq.n	8105f2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8105ea2:	687b      	ldr	r3, [r7, #4]
 8105ea4:	681b      	ldr	r3, [r3, #0]
 8105ea6:	2b00      	cmp	r3, #0
 8105ea8:	d002      	beq.n	8105eb0 <osThreadNew+0x48>
        name = attr->name;
 8105eaa:	687b      	ldr	r3, [r7, #4]
 8105eac:	681b      	ldr	r3, [r3, #0]
 8105eae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	699b      	ldr	r3, [r3, #24]
 8105eb4:	2b00      	cmp	r3, #0
 8105eb6:	d002      	beq.n	8105ebe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	699b      	ldr	r3, [r3, #24]
 8105ebc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8105ebe:	69fb      	ldr	r3, [r7, #28]
 8105ec0:	2b00      	cmp	r3, #0
 8105ec2:	d008      	beq.n	8105ed6 <osThreadNew+0x6e>
 8105ec4:	69fb      	ldr	r3, [r7, #28]
 8105ec6:	2b38      	cmp	r3, #56	@ 0x38
 8105ec8:	d805      	bhi.n	8105ed6 <osThreadNew+0x6e>
 8105eca:	687b      	ldr	r3, [r7, #4]
 8105ecc:	685b      	ldr	r3, [r3, #4]
 8105ece:	f003 0301 	and.w	r3, r3, #1
 8105ed2:	2b00      	cmp	r3, #0
 8105ed4:	d001      	beq.n	8105eda <osThreadNew+0x72>
        return (NULL);
 8105ed6:	2300      	movs	r3, #0
 8105ed8:	e054      	b.n	8105f84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	695b      	ldr	r3, [r3, #20]
 8105ede:	2b00      	cmp	r3, #0
 8105ee0:	d003      	beq.n	8105eea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8105ee2:	687b      	ldr	r3, [r7, #4]
 8105ee4:	695b      	ldr	r3, [r3, #20]
 8105ee6:	089b      	lsrs	r3, r3, #2
 8105ee8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	689b      	ldr	r3, [r3, #8]
 8105eee:	2b00      	cmp	r3, #0
 8105ef0:	d00e      	beq.n	8105f10 <osThreadNew+0xa8>
 8105ef2:	687b      	ldr	r3, [r7, #4]
 8105ef4:	68db      	ldr	r3, [r3, #12]
 8105ef6:	2b5b      	cmp	r3, #91	@ 0x5b
 8105ef8:	d90a      	bls.n	8105f10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8105efa:	687b      	ldr	r3, [r7, #4]
 8105efc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8105efe:	2b00      	cmp	r3, #0
 8105f00:	d006      	beq.n	8105f10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8105f02:	687b      	ldr	r3, [r7, #4]
 8105f04:	695b      	ldr	r3, [r3, #20]
 8105f06:	2b00      	cmp	r3, #0
 8105f08:	d002      	beq.n	8105f10 <osThreadNew+0xa8>
        mem = 1;
 8105f0a:	2301      	movs	r3, #1
 8105f0c:	61bb      	str	r3, [r7, #24]
 8105f0e:	e010      	b.n	8105f32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8105f10:	687b      	ldr	r3, [r7, #4]
 8105f12:	689b      	ldr	r3, [r3, #8]
 8105f14:	2b00      	cmp	r3, #0
 8105f16:	d10c      	bne.n	8105f32 <osThreadNew+0xca>
 8105f18:	687b      	ldr	r3, [r7, #4]
 8105f1a:	68db      	ldr	r3, [r3, #12]
 8105f1c:	2b00      	cmp	r3, #0
 8105f1e:	d108      	bne.n	8105f32 <osThreadNew+0xca>
 8105f20:	687b      	ldr	r3, [r7, #4]
 8105f22:	691b      	ldr	r3, [r3, #16]
 8105f24:	2b00      	cmp	r3, #0
 8105f26:	d104      	bne.n	8105f32 <osThreadNew+0xca>
          mem = 0;
 8105f28:	2300      	movs	r3, #0
 8105f2a:	61bb      	str	r3, [r7, #24]
 8105f2c:	e001      	b.n	8105f32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8105f2e:	2300      	movs	r3, #0
 8105f30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8105f32:	69bb      	ldr	r3, [r7, #24]
 8105f34:	2b01      	cmp	r3, #1
 8105f36:	d110      	bne.n	8105f5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8105f38:	687b      	ldr	r3, [r7, #4]
 8105f3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8105f3c:	687a      	ldr	r2, [r7, #4]
 8105f3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8105f40:	9202      	str	r2, [sp, #8]
 8105f42:	9301      	str	r3, [sp, #4]
 8105f44:	69fb      	ldr	r3, [r7, #28]
 8105f46:	9300      	str	r3, [sp, #0]
 8105f48:	68bb      	ldr	r3, [r7, #8]
 8105f4a:	6a3a      	ldr	r2, [r7, #32]
 8105f4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8105f4e:	68f8      	ldr	r0, [r7, #12]
 8105f50:	f001 fa5e 	bl	8107410 <xTaskCreateStatic>
 8105f54:	4603      	mov	r3, r0
 8105f56:	613b      	str	r3, [r7, #16]
 8105f58:	e013      	b.n	8105f82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8105f5a:	69bb      	ldr	r3, [r7, #24]
 8105f5c:	2b00      	cmp	r3, #0
 8105f5e:	d110      	bne.n	8105f82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8105f60:	6a3b      	ldr	r3, [r7, #32]
 8105f62:	b29a      	uxth	r2, r3
 8105f64:	f107 0310 	add.w	r3, r7, #16
 8105f68:	9301      	str	r3, [sp, #4]
 8105f6a:	69fb      	ldr	r3, [r7, #28]
 8105f6c:	9300      	str	r3, [sp, #0]
 8105f6e:	68bb      	ldr	r3, [r7, #8]
 8105f70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8105f72:	68f8      	ldr	r0, [r7, #12]
 8105f74:	f001 faac 	bl	81074d0 <xTaskCreate>
 8105f78:	4603      	mov	r3, r0
 8105f7a:	2b01      	cmp	r3, #1
 8105f7c:	d001      	beq.n	8105f82 <osThreadNew+0x11a>
            hTask = NULL;
 8105f7e:	2300      	movs	r3, #0
 8105f80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8105f82:	693b      	ldr	r3, [r7, #16]
}
 8105f84:	4618      	mov	r0, r3
 8105f86:	3728      	adds	r7, #40	@ 0x28
 8105f88:	46bd      	mov	sp, r7
 8105f8a:	bd80      	pop	{r7, pc}

08105f8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8105f8c:	b580      	push	{r7, lr}
 8105f8e:	b084      	sub	sp, #16
 8105f90:	af00      	add	r7, sp, #0
 8105f92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105f94:	f3ef 8305 	mrs	r3, IPSR
 8105f98:	60bb      	str	r3, [r7, #8]
  return(result);
 8105f9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8105f9c:	2b00      	cmp	r3, #0
 8105f9e:	d003      	beq.n	8105fa8 <osDelay+0x1c>
    stat = osErrorISR;
 8105fa0:	f06f 0305 	mvn.w	r3, #5
 8105fa4:	60fb      	str	r3, [r7, #12]
 8105fa6:	e007      	b.n	8105fb8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8105fa8:	2300      	movs	r3, #0
 8105faa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8105fac:	687b      	ldr	r3, [r7, #4]
 8105fae:	2b00      	cmp	r3, #0
 8105fb0:	d002      	beq.n	8105fb8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8105fb2:	6878      	ldr	r0, [r7, #4]
 8105fb4:	f001 fbd2 	bl	810775c <vTaskDelay>
    }
  }

  return (stat);
 8105fb8:	68fb      	ldr	r3, [r7, #12]
}
 8105fba:	4618      	mov	r0, r3
 8105fbc:	3710      	adds	r7, #16
 8105fbe:	46bd      	mov	sp, r7
 8105fc0:	bd80      	pop	{r7, pc}
	...

08105fc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8105fc4:	b480      	push	{r7}
 8105fc6:	b085      	sub	sp, #20
 8105fc8:	af00      	add	r7, sp, #0
 8105fca:	60f8      	str	r0, [r7, #12]
 8105fcc:	60b9      	str	r1, [r7, #8]
 8105fce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8105fd0:	68fb      	ldr	r3, [r7, #12]
 8105fd2:	4a07      	ldr	r2, [pc, #28]	@ (8105ff0 <vApplicationGetIdleTaskMemory+0x2c>)
 8105fd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8105fd6:	68bb      	ldr	r3, [r7, #8]
 8105fd8:	4a06      	ldr	r2, [pc, #24]	@ (8105ff4 <vApplicationGetIdleTaskMemory+0x30>)
 8105fda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	2280      	movs	r2, #128	@ 0x80
 8105fe0:	601a      	str	r2, [r3, #0]
}
 8105fe2:	bf00      	nop
 8105fe4:	3714      	adds	r7, #20
 8105fe6:	46bd      	mov	sp, r7
 8105fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fec:	4770      	bx	lr
 8105fee:	bf00      	nop
 8105ff0:	10000128 	.word	0x10000128
 8105ff4:	10000184 	.word	0x10000184

08105ff8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8105ff8:	b480      	push	{r7}
 8105ffa:	b085      	sub	sp, #20
 8105ffc:	af00      	add	r7, sp, #0
 8105ffe:	60f8      	str	r0, [r7, #12]
 8106000:	60b9      	str	r1, [r7, #8]
 8106002:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8106004:	68fb      	ldr	r3, [r7, #12]
 8106006:	4a07      	ldr	r2, [pc, #28]	@ (8106024 <vApplicationGetTimerTaskMemory+0x2c>)
 8106008:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810600a:	68bb      	ldr	r3, [r7, #8]
 810600c:	4a06      	ldr	r2, [pc, #24]	@ (8106028 <vApplicationGetTimerTaskMemory+0x30>)
 810600e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8106010:	687b      	ldr	r3, [r7, #4]
 8106012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8106016:	601a      	str	r2, [r3, #0]
}
 8106018:	bf00      	nop
 810601a:	3714      	adds	r7, #20
 810601c:	46bd      	mov	sp, r7
 810601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106022:	4770      	bx	lr
 8106024:	10000384 	.word	0x10000384
 8106028:	100003e0 	.word	0x100003e0

0810602c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810602c:	b580      	push	{r7, lr}
 810602e:	b08a      	sub	sp, #40	@ 0x28
 8106030:	af00      	add	r7, sp, #0
 8106032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8106034:	2300      	movs	r3, #0
 8106036:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8106038:	f001 fc2e 	bl	8107898 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810603c:	4b5c      	ldr	r3, [pc, #368]	@ (81061b0 <pvPortMalloc+0x184>)
 810603e:	681b      	ldr	r3, [r3, #0]
 8106040:	2b00      	cmp	r3, #0
 8106042:	d101      	bne.n	8106048 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8106044:	f000 f924 	bl	8106290 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8106048:	4b5a      	ldr	r3, [pc, #360]	@ (81061b4 <pvPortMalloc+0x188>)
 810604a:	681a      	ldr	r2, [r3, #0]
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	4013      	ands	r3, r2
 8106050:	2b00      	cmp	r3, #0
 8106052:	f040 8095 	bne.w	8106180 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8106056:	687b      	ldr	r3, [r7, #4]
 8106058:	2b00      	cmp	r3, #0
 810605a:	d01e      	beq.n	810609a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810605c:	2208      	movs	r2, #8
 810605e:	687b      	ldr	r3, [r7, #4]
 8106060:	4413      	add	r3, r2
 8106062:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8106064:	687b      	ldr	r3, [r7, #4]
 8106066:	f003 0307 	and.w	r3, r3, #7
 810606a:	2b00      	cmp	r3, #0
 810606c:	d015      	beq.n	810609a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810606e:	687b      	ldr	r3, [r7, #4]
 8106070:	f023 0307 	bic.w	r3, r3, #7
 8106074:	3308      	adds	r3, #8
 8106076:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	f003 0307 	and.w	r3, r3, #7
 810607e:	2b00      	cmp	r3, #0
 8106080:	d00b      	beq.n	810609a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8106082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106086:	f383 8811 	msr	BASEPRI, r3
 810608a:	f3bf 8f6f 	isb	sy
 810608e:	f3bf 8f4f 	dsb	sy
 8106092:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8106094:	bf00      	nop
 8106096:	bf00      	nop
 8106098:	e7fd      	b.n	8106096 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810609a:	687b      	ldr	r3, [r7, #4]
 810609c:	2b00      	cmp	r3, #0
 810609e:	d06f      	beq.n	8106180 <pvPortMalloc+0x154>
 81060a0:	4b45      	ldr	r3, [pc, #276]	@ (81061b8 <pvPortMalloc+0x18c>)
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	687a      	ldr	r2, [r7, #4]
 81060a6:	429a      	cmp	r2, r3
 81060a8:	d86a      	bhi.n	8106180 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81060aa:	4b44      	ldr	r3, [pc, #272]	@ (81061bc <pvPortMalloc+0x190>)
 81060ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81060ae:	4b43      	ldr	r3, [pc, #268]	@ (81061bc <pvPortMalloc+0x190>)
 81060b0:	681b      	ldr	r3, [r3, #0]
 81060b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81060b4:	e004      	b.n	81060c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 81060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81060b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81060bc:	681b      	ldr	r3, [r3, #0]
 81060be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81060c2:	685b      	ldr	r3, [r3, #4]
 81060c4:	687a      	ldr	r2, [r7, #4]
 81060c6:	429a      	cmp	r2, r3
 81060c8:	d903      	bls.n	81060d2 <pvPortMalloc+0xa6>
 81060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81060cc:	681b      	ldr	r3, [r3, #0]
 81060ce:	2b00      	cmp	r3, #0
 81060d0:	d1f1      	bne.n	81060b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81060d2:	4b37      	ldr	r3, [pc, #220]	@ (81061b0 <pvPortMalloc+0x184>)
 81060d4:	681b      	ldr	r3, [r3, #0]
 81060d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81060d8:	429a      	cmp	r2, r3
 81060da:	d051      	beq.n	8106180 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81060dc:	6a3b      	ldr	r3, [r7, #32]
 81060de:	681b      	ldr	r3, [r3, #0]
 81060e0:	2208      	movs	r2, #8
 81060e2:	4413      	add	r3, r2
 81060e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81060e8:	681a      	ldr	r2, [r3, #0]
 81060ea:	6a3b      	ldr	r3, [r7, #32]
 81060ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 81060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81060f0:	685a      	ldr	r2, [r3, #4]
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	1ad2      	subs	r2, r2, r3
 81060f6:	2308      	movs	r3, #8
 81060f8:	005b      	lsls	r3, r3, #1
 81060fa:	429a      	cmp	r2, r3
 81060fc:	d920      	bls.n	8106140 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 81060fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8106100:	687b      	ldr	r3, [r7, #4]
 8106102:	4413      	add	r3, r2
 8106104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8106106:	69bb      	ldr	r3, [r7, #24]
 8106108:	f003 0307 	and.w	r3, r3, #7
 810610c:	2b00      	cmp	r3, #0
 810610e:	d00b      	beq.n	8106128 <pvPortMalloc+0xfc>
	__asm volatile
 8106110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106114:	f383 8811 	msr	BASEPRI, r3
 8106118:	f3bf 8f6f 	isb	sy
 810611c:	f3bf 8f4f 	dsb	sy
 8106120:	613b      	str	r3, [r7, #16]
}
 8106122:	bf00      	nop
 8106124:	bf00      	nop
 8106126:	e7fd      	b.n	8106124 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8106128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810612a:	685a      	ldr	r2, [r3, #4]
 810612c:	687b      	ldr	r3, [r7, #4]
 810612e:	1ad2      	subs	r2, r2, r3
 8106130:	69bb      	ldr	r3, [r7, #24]
 8106132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8106134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106136:	687a      	ldr	r2, [r7, #4]
 8106138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810613a:	69b8      	ldr	r0, [r7, #24]
 810613c:	f000 f90a 	bl	8106354 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8106140:	4b1d      	ldr	r3, [pc, #116]	@ (81061b8 <pvPortMalloc+0x18c>)
 8106142:	681a      	ldr	r2, [r3, #0]
 8106144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106146:	685b      	ldr	r3, [r3, #4]
 8106148:	1ad3      	subs	r3, r2, r3
 810614a:	4a1b      	ldr	r2, [pc, #108]	@ (81061b8 <pvPortMalloc+0x18c>)
 810614c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810614e:	4b1a      	ldr	r3, [pc, #104]	@ (81061b8 <pvPortMalloc+0x18c>)
 8106150:	681a      	ldr	r2, [r3, #0]
 8106152:	4b1b      	ldr	r3, [pc, #108]	@ (81061c0 <pvPortMalloc+0x194>)
 8106154:	681b      	ldr	r3, [r3, #0]
 8106156:	429a      	cmp	r2, r3
 8106158:	d203      	bcs.n	8106162 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810615a:	4b17      	ldr	r3, [pc, #92]	@ (81061b8 <pvPortMalloc+0x18c>)
 810615c:	681b      	ldr	r3, [r3, #0]
 810615e:	4a18      	ldr	r2, [pc, #96]	@ (81061c0 <pvPortMalloc+0x194>)
 8106160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8106162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106164:	685a      	ldr	r2, [r3, #4]
 8106166:	4b13      	ldr	r3, [pc, #76]	@ (81061b4 <pvPortMalloc+0x188>)
 8106168:	681b      	ldr	r3, [r3, #0]
 810616a:	431a      	orrs	r2, r3
 810616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810616e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8106170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106172:	2200      	movs	r2, #0
 8106174:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8106176:	4b13      	ldr	r3, [pc, #76]	@ (81061c4 <pvPortMalloc+0x198>)
 8106178:	681b      	ldr	r3, [r3, #0]
 810617a:	3301      	adds	r3, #1
 810617c:	4a11      	ldr	r2, [pc, #68]	@ (81061c4 <pvPortMalloc+0x198>)
 810617e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8106180:	f001 fb98 	bl	81078b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8106184:	69fb      	ldr	r3, [r7, #28]
 8106186:	f003 0307 	and.w	r3, r3, #7
 810618a:	2b00      	cmp	r3, #0
 810618c:	d00b      	beq.n	81061a6 <pvPortMalloc+0x17a>
	__asm volatile
 810618e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106192:	f383 8811 	msr	BASEPRI, r3
 8106196:	f3bf 8f6f 	isb	sy
 810619a:	f3bf 8f4f 	dsb	sy
 810619e:	60fb      	str	r3, [r7, #12]
}
 81061a0:	bf00      	nop
 81061a2:	bf00      	nop
 81061a4:	e7fd      	b.n	81061a2 <pvPortMalloc+0x176>
	return pvReturn;
 81061a6:	69fb      	ldr	r3, [r7, #28]
}
 81061a8:	4618      	mov	r0, r3
 81061aa:	3728      	adds	r7, #40	@ 0x28
 81061ac:	46bd      	mov	sp, r7
 81061ae:	bd80      	pop	{r7, pc}
 81061b0:	100043e8 	.word	0x100043e8
 81061b4:	100043fc 	.word	0x100043fc
 81061b8:	100043ec 	.word	0x100043ec
 81061bc:	100043e0 	.word	0x100043e0
 81061c0:	100043f0 	.word	0x100043f0
 81061c4:	100043f4 	.word	0x100043f4

081061c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81061c8:	b580      	push	{r7, lr}
 81061ca:	b086      	sub	sp, #24
 81061cc:	af00      	add	r7, sp, #0
 81061ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81061d0:	687b      	ldr	r3, [r7, #4]
 81061d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	2b00      	cmp	r3, #0
 81061d8:	d04f      	beq.n	810627a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81061da:	2308      	movs	r3, #8
 81061dc:	425b      	negs	r3, r3
 81061de:	697a      	ldr	r2, [r7, #20]
 81061e0:	4413      	add	r3, r2
 81061e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81061e4:	697b      	ldr	r3, [r7, #20]
 81061e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81061e8:	693b      	ldr	r3, [r7, #16]
 81061ea:	685a      	ldr	r2, [r3, #4]
 81061ec:	4b25      	ldr	r3, [pc, #148]	@ (8106284 <vPortFree+0xbc>)
 81061ee:	681b      	ldr	r3, [r3, #0]
 81061f0:	4013      	ands	r3, r2
 81061f2:	2b00      	cmp	r3, #0
 81061f4:	d10b      	bne.n	810620e <vPortFree+0x46>
	__asm volatile
 81061f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81061fa:	f383 8811 	msr	BASEPRI, r3
 81061fe:	f3bf 8f6f 	isb	sy
 8106202:	f3bf 8f4f 	dsb	sy
 8106206:	60fb      	str	r3, [r7, #12]
}
 8106208:	bf00      	nop
 810620a:	bf00      	nop
 810620c:	e7fd      	b.n	810620a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810620e:	693b      	ldr	r3, [r7, #16]
 8106210:	681b      	ldr	r3, [r3, #0]
 8106212:	2b00      	cmp	r3, #0
 8106214:	d00b      	beq.n	810622e <vPortFree+0x66>
	__asm volatile
 8106216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810621a:	f383 8811 	msr	BASEPRI, r3
 810621e:	f3bf 8f6f 	isb	sy
 8106222:	f3bf 8f4f 	dsb	sy
 8106226:	60bb      	str	r3, [r7, #8]
}
 8106228:	bf00      	nop
 810622a:	bf00      	nop
 810622c:	e7fd      	b.n	810622a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810622e:	693b      	ldr	r3, [r7, #16]
 8106230:	685a      	ldr	r2, [r3, #4]
 8106232:	4b14      	ldr	r3, [pc, #80]	@ (8106284 <vPortFree+0xbc>)
 8106234:	681b      	ldr	r3, [r3, #0]
 8106236:	4013      	ands	r3, r2
 8106238:	2b00      	cmp	r3, #0
 810623a:	d01e      	beq.n	810627a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810623c:	693b      	ldr	r3, [r7, #16]
 810623e:	681b      	ldr	r3, [r3, #0]
 8106240:	2b00      	cmp	r3, #0
 8106242:	d11a      	bne.n	810627a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8106244:	693b      	ldr	r3, [r7, #16]
 8106246:	685a      	ldr	r2, [r3, #4]
 8106248:	4b0e      	ldr	r3, [pc, #56]	@ (8106284 <vPortFree+0xbc>)
 810624a:	681b      	ldr	r3, [r3, #0]
 810624c:	43db      	mvns	r3, r3
 810624e:	401a      	ands	r2, r3
 8106250:	693b      	ldr	r3, [r7, #16]
 8106252:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8106254:	f001 fb20 	bl	8107898 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8106258:	693b      	ldr	r3, [r7, #16]
 810625a:	685a      	ldr	r2, [r3, #4]
 810625c:	4b0a      	ldr	r3, [pc, #40]	@ (8106288 <vPortFree+0xc0>)
 810625e:	681b      	ldr	r3, [r3, #0]
 8106260:	4413      	add	r3, r2
 8106262:	4a09      	ldr	r2, [pc, #36]	@ (8106288 <vPortFree+0xc0>)
 8106264:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8106266:	6938      	ldr	r0, [r7, #16]
 8106268:	f000 f874 	bl	8106354 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810626c:	4b07      	ldr	r3, [pc, #28]	@ (810628c <vPortFree+0xc4>)
 810626e:	681b      	ldr	r3, [r3, #0]
 8106270:	3301      	adds	r3, #1
 8106272:	4a06      	ldr	r2, [pc, #24]	@ (810628c <vPortFree+0xc4>)
 8106274:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8106276:	f001 fb1d 	bl	81078b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810627a:	bf00      	nop
 810627c:	3718      	adds	r7, #24
 810627e:	46bd      	mov	sp, r7
 8106280:	bd80      	pop	{r7, pc}
 8106282:	bf00      	nop
 8106284:	100043fc 	.word	0x100043fc
 8106288:	100043ec 	.word	0x100043ec
 810628c:	100043f8 	.word	0x100043f8

08106290 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8106290:	b480      	push	{r7}
 8106292:	b085      	sub	sp, #20
 8106294:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8106296:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 810629a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810629c:	4b27      	ldr	r3, [pc, #156]	@ (810633c <prvHeapInit+0xac>)
 810629e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81062a0:	68fb      	ldr	r3, [r7, #12]
 81062a2:	f003 0307 	and.w	r3, r3, #7
 81062a6:	2b00      	cmp	r3, #0
 81062a8:	d00c      	beq.n	81062c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81062aa:	68fb      	ldr	r3, [r7, #12]
 81062ac:	3307      	adds	r3, #7
 81062ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81062b0:	68fb      	ldr	r3, [r7, #12]
 81062b2:	f023 0307 	bic.w	r3, r3, #7
 81062b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81062b8:	68ba      	ldr	r2, [r7, #8]
 81062ba:	68fb      	ldr	r3, [r7, #12]
 81062bc:	1ad3      	subs	r3, r2, r3
 81062be:	4a1f      	ldr	r2, [pc, #124]	@ (810633c <prvHeapInit+0xac>)
 81062c0:	4413      	add	r3, r2
 81062c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81062c4:	68fb      	ldr	r3, [r7, #12]
 81062c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81062c8:	4a1d      	ldr	r2, [pc, #116]	@ (8106340 <prvHeapInit+0xb0>)
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81062ce:	4b1c      	ldr	r3, [pc, #112]	@ (8106340 <prvHeapInit+0xb0>)
 81062d0:	2200      	movs	r2, #0
 81062d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81062d4:	687b      	ldr	r3, [r7, #4]
 81062d6:	68ba      	ldr	r2, [r7, #8]
 81062d8:	4413      	add	r3, r2
 81062da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 81062dc:	2208      	movs	r2, #8
 81062de:	68fb      	ldr	r3, [r7, #12]
 81062e0:	1a9b      	subs	r3, r3, r2
 81062e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81062e4:	68fb      	ldr	r3, [r7, #12]
 81062e6:	f023 0307 	bic.w	r3, r3, #7
 81062ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 81062ec:	68fb      	ldr	r3, [r7, #12]
 81062ee:	4a15      	ldr	r2, [pc, #84]	@ (8106344 <prvHeapInit+0xb4>)
 81062f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 81062f2:	4b14      	ldr	r3, [pc, #80]	@ (8106344 <prvHeapInit+0xb4>)
 81062f4:	681b      	ldr	r3, [r3, #0]
 81062f6:	2200      	movs	r2, #0
 81062f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 81062fa:	4b12      	ldr	r3, [pc, #72]	@ (8106344 <prvHeapInit+0xb4>)
 81062fc:	681b      	ldr	r3, [r3, #0]
 81062fe:	2200      	movs	r2, #0
 8106300:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8106302:	687b      	ldr	r3, [r7, #4]
 8106304:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8106306:	683b      	ldr	r3, [r7, #0]
 8106308:	68fa      	ldr	r2, [r7, #12]
 810630a:	1ad2      	subs	r2, r2, r3
 810630c:	683b      	ldr	r3, [r7, #0]
 810630e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8106310:	4b0c      	ldr	r3, [pc, #48]	@ (8106344 <prvHeapInit+0xb4>)
 8106312:	681a      	ldr	r2, [r3, #0]
 8106314:	683b      	ldr	r3, [r7, #0]
 8106316:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8106318:	683b      	ldr	r3, [r7, #0]
 810631a:	685b      	ldr	r3, [r3, #4]
 810631c:	4a0a      	ldr	r2, [pc, #40]	@ (8106348 <prvHeapInit+0xb8>)
 810631e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8106320:	683b      	ldr	r3, [r7, #0]
 8106322:	685b      	ldr	r3, [r3, #4]
 8106324:	4a09      	ldr	r2, [pc, #36]	@ (810634c <prvHeapInit+0xbc>)
 8106326:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8106328:	4b09      	ldr	r3, [pc, #36]	@ (8106350 <prvHeapInit+0xc0>)
 810632a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810632e:	601a      	str	r2, [r3, #0]
}
 8106330:	bf00      	nop
 8106332:	3714      	adds	r7, #20
 8106334:	46bd      	mov	sp, r7
 8106336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810633a:	4770      	bx	lr
 810633c:	100007e0 	.word	0x100007e0
 8106340:	100043e0 	.word	0x100043e0
 8106344:	100043e8 	.word	0x100043e8
 8106348:	100043f0 	.word	0x100043f0
 810634c:	100043ec 	.word	0x100043ec
 8106350:	100043fc 	.word	0x100043fc

08106354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8106354:	b480      	push	{r7}
 8106356:	b085      	sub	sp, #20
 8106358:	af00      	add	r7, sp, #0
 810635a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810635c:	4b28      	ldr	r3, [pc, #160]	@ (8106400 <prvInsertBlockIntoFreeList+0xac>)
 810635e:	60fb      	str	r3, [r7, #12]
 8106360:	e002      	b.n	8106368 <prvInsertBlockIntoFreeList+0x14>
 8106362:	68fb      	ldr	r3, [r7, #12]
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	60fb      	str	r3, [r7, #12]
 8106368:	68fb      	ldr	r3, [r7, #12]
 810636a:	681b      	ldr	r3, [r3, #0]
 810636c:	687a      	ldr	r2, [r7, #4]
 810636e:	429a      	cmp	r2, r3
 8106370:	d8f7      	bhi.n	8106362 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8106372:	68fb      	ldr	r3, [r7, #12]
 8106374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8106376:	68fb      	ldr	r3, [r7, #12]
 8106378:	685b      	ldr	r3, [r3, #4]
 810637a:	68ba      	ldr	r2, [r7, #8]
 810637c:	4413      	add	r3, r2
 810637e:	687a      	ldr	r2, [r7, #4]
 8106380:	429a      	cmp	r2, r3
 8106382:	d108      	bne.n	8106396 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8106384:	68fb      	ldr	r3, [r7, #12]
 8106386:	685a      	ldr	r2, [r3, #4]
 8106388:	687b      	ldr	r3, [r7, #4]
 810638a:	685b      	ldr	r3, [r3, #4]
 810638c:	441a      	add	r2, r3
 810638e:	68fb      	ldr	r3, [r7, #12]
 8106390:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8106392:	68fb      	ldr	r3, [r7, #12]
 8106394:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8106396:	687b      	ldr	r3, [r7, #4]
 8106398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810639a:	687b      	ldr	r3, [r7, #4]
 810639c:	685b      	ldr	r3, [r3, #4]
 810639e:	68ba      	ldr	r2, [r7, #8]
 81063a0:	441a      	add	r2, r3
 81063a2:	68fb      	ldr	r3, [r7, #12]
 81063a4:	681b      	ldr	r3, [r3, #0]
 81063a6:	429a      	cmp	r2, r3
 81063a8:	d118      	bne.n	81063dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81063aa:	68fb      	ldr	r3, [r7, #12]
 81063ac:	681a      	ldr	r2, [r3, #0]
 81063ae:	4b15      	ldr	r3, [pc, #84]	@ (8106404 <prvInsertBlockIntoFreeList+0xb0>)
 81063b0:	681b      	ldr	r3, [r3, #0]
 81063b2:	429a      	cmp	r2, r3
 81063b4:	d00d      	beq.n	81063d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	685a      	ldr	r2, [r3, #4]
 81063ba:	68fb      	ldr	r3, [r7, #12]
 81063bc:	681b      	ldr	r3, [r3, #0]
 81063be:	685b      	ldr	r3, [r3, #4]
 81063c0:	441a      	add	r2, r3
 81063c2:	687b      	ldr	r3, [r7, #4]
 81063c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81063c6:	68fb      	ldr	r3, [r7, #12]
 81063c8:	681b      	ldr	r3, [r3, #0]
 81063ca:	681a      	ldr	r2, [r3, #0]
 81063cc:	687b      	ldr	r3, [r7, #4]
 81063ce:	601a      	str	r2, [r3, #0]
 81063d0:	e008      	b.n	81063e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81063d2:	4b0c      	ldr	r3, [pc, #48]	@ (8106404 <prvInsertBlockIntoFreeList+0xb0>)
 81063d4:	681a      	ldr	r2, [r3, #0]
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	601a      	str	r2, [r3, #0]
 81063da:	e003      	b.n	81063e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81063dc:	68fb      	ldr	r3, [r7, #12]
 81063de:	681a      	ldr	r2, [r3, #0]
 81063e0:	687b      	ldr	r3, [r7, #4]
 81063e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 81063e4:	68fa      	ldr	r2, [r7, #12]
 81063e6:	687b      	ldr	r3, [r7, #4]
 81063e8:	429a      	cmp	r2, r3
 81063ea:	d002      	beq.n	81063f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81063ec:	68fb      	ldr	r3, [r7, #12]
 81063ee:	687a      	ldr	r2, [r7, #4]
 81063f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81063f2:	bf00      	nop
 81063f4:	3714      	adds	r7, #20
 81063f6:	46bd      	mov	sp, r7
 81063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063fc:	4770      	bx	lr
 81063fe:	bf00      	nop
 8106400:	100043e0 	.word	0x100043e0
 8106404:	100043e8 	.word	0x100043e8

08106408 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8106408:	b480      	push	{r7}
 810640a:	b083      	sub	sp, #12
 810640c:	af00      	add	r7, sp, #0
 810640e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8106410:	687b      	ldr	r3, [r7, #4]
 8106412:	f103 0208 	add.w	r2, r3, #8
 8106416:	687b      	ldr	r3, [r7, #4]
 8106418:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	f04f 32ff 	mov.w	r2, #4294967295
 8106420:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8106422:	687b      	ldr	r3, [r7, #4]
 8106424:	f103 0208 	add.w	r2, r3, #8
 8106428:	687b      	ldr	r3, [r7, #4]
 810642a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810642c:	687b      	ldr	r3, [r7, #4]
 810642e:	f103 0208 	add.w	r2, r3, #8
 8106432:	687b      	ldr	r3, [r7, #4]
 8106434:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	2200      	movs	r2, #0
 810643a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810643c:	bf00      	nop
 810643e:	370c      	adds	r7, #12
 8106440:	46bd      	mov	sp, r7
 8106442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106446:	4770      	bx	lr

08106448 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8106448:	b480      	push	{r7}
 810644a:	b083      	sub	sp, #12
 810644c:	af00      	add	r7, sp, #0
 810644e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	2200      	movs	r2, #0
 8106454:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8106456:	bf00      	nop
 8106458:	370c      	adds	r7, #12
 810645a:	46bd      	mov	sp, r7
 810645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106460:	4770      	bx	lr

08106462 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8106462:	b480      	push	{r7}
 8106464:	b085      	sub	sp, #20
 8106466:	af00      	add	r7, sp, #0
 8106468:	6078      	str	r0, [r7, #4]
 810646a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810646c:	687b      	ldr	r3, [r7, #4]
 810646e:	685b      	ldr	r3, [r3, #4]
 8106470:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8106472:	683b      	ldr	r3, [r7, #0]
 8106474:	68fa      	ldr	r2, [r7, #12]
 8106476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8106478:	68fb      	ldr	r3, [r7, #12]
 810647a:	689a      	ldr	r2, [r3, #8]
 810647c:	683b      	ldr	r3, [r7, #0]
 810647e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8106480:	68fb      	ldr	r3, [r7, #12]
 8106482:	689b      	ldr	r3, [r3, #8]
 8106484:	683a      	ldr	r2, [r7, #0]
 8106486:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8106488:	68fb      	ldr	r3, [r7, #12]
 810648a:	683a      	ldr	r2, [r7, #0]
 810648c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810648e:	683b      	ldr	r3, [r7, #0]
 8106490:	687a      	ldr	r2, [r7, #4]
 8106492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8106494:	687b      	ldr	r3, [r7, #4]
 8106496:	681b      	ldr	r3, [r3, #0]
 8106498:	1c5a      	adds	r2, r3, #1
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	601a      	str	r2, [r3, #0]
}
 810649e:	bf00      	nop
 81064a0:	3714      	adds	r7, #20
 81064a2:	46bd      	mov	sp, r7
 81064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064a8:	4770      	bx	lr

081064aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81064aa:	b480      	push	{r7}
 81064ac:	b085      	sub	sp, #20
 81064ae:	af00      	add	r7, sp, #0
 81064b0:	6078      	str	r0, [r7, #4]
 81064b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81064b4:	683b      	ldr	r3, [r7, #0]
 81064b6:	681b      	ldr	r3, [r3, #0]
 81064b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81064ba:	68bb      	ldr	r3, [r7, #8]
 81064bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81064c0:	d103      	bne.n	81064ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81064c2:	687b      	ldr	r3, [r7, #4]
 81064c4:	691b      	ldr	r3, [r3, #16]
 81064c6:	60fb      	str	r3, [r7, #12]
 81064c8:	e00c      	b.n	81064e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81064ca:	687b      	ldr	r3, [r7, #4]
 81064cc:	3308      	adds	r3, #8
 81064ce:	60fb      	str	r3, [r7, #12]
 81064d0:	e002      	b.n	81064d8 <vListInsert+0x2e>
 81064d2:	68fb      	ldr	r3, [r7, #12]
 81064d4:	685b      	ldr	r3, [r3, #4]
 81064d6:	60fb      	str	r3, [r7, #12]
 81064d8:	68fb      	ldr	r3, [r7, #12]
 81064da:	685b      	ldr	r3, [r3, #4]
 81064dc:	681b      	ldr	r3, [r3, #0]
 81064de:	68ba      	ldr	r2, [r7, #8]
 81064e0:	429a      	cmp	r2, r3
 81064e2:	d2f6      	bcs.n	81064d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 81064e4:	68fb      	ldr	r3, [r7, #12]
 81064e6:	685a      	ldr	r2, [r3, #4]
 81064e8:	683b      	ldr	r3, [r7, #0]
 81064ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 81064ec:	683b      	ldr	r3, [r7, #0]
 81064ee:	685b      	ldr	r3, [r3, #4]
 81064f0:	683a      	ldr	r2, [r7, #0]
 81064f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 81064f4:	683b      	ldr	r3, [r7, #0]
 81064f6:	68fa      	ldr	r2, [r7, #12]
 81064f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 81064fa:	68fb      	ldr	r3, [r7, #12]
 81064fc:	683a      	ldr	r2, [r7, #0]
 81064fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8106500:	683b      	ldr	r3, [r7, #0]
 8106502:	687a      	ldr	r2, [r7, #4]
 8106504:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8106506:	687b      	ldr	r3, [r7, #4]
 8106508:	681b      	ldr	r3, [r3, #0]
 810650a:	1c5a      	adds	r2, r3, #1
 810650c:	687b      	ldr	r3, [r7, #4]
 810650e:	601a      	str	r2, [r3, #0]
}
 8106510:	bf00      	nop
 8106512:	3714      	adds	r7, #20
 8106514:	46bd      	mov	sp, r7
 8106516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810651a:	4770      	bx	lr

0810651c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810651c:	b480      	push	{r7}
 810651e:	b085      	sub	sp, #20
 8106520:	af00      	add	r7, sp, #0
 8106522:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	691b      	ldr	r3, [r3, #16]
 8106528:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	685b      	ldr	r3, [r3, #4]
 810652e:	687a      	ldr	r2, [r7, #4]
 8106530:	6892      	ldr	r2, [r2, #8]
 8106532:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8106534:	687b      	ldr	r3, [r7, #4]
 8106536:	689b      	ldr	r3, [r3, #8]
 8106538:	687a      	ldr	r2, [r7, #4]
 810653a:	6852      	ldr	r2, [r2, #4]
 810653c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810653e:	68fb      	ldr	r3, [r7, #12]
 8106540:	685b      	ldr	r3, [r3, #4]
 8106542:	687a      	ldr	r2, [r7, #4]
 8106544:	429a      	cmp	r2, r3
 8106546:	d103      	bne.n	8106550 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8106548:	687b      	ldr	r3, [r7, #4]
 810654a:	689a      	ldr	r2, [r3, #8]
 810654c:	68fb      	ldr	r3, [r7, #12]
 810654e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8106550:	687b      	ldr	r3, [r7, #4]
 8106552:	2200      	movs	r2, #0
 8106554:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8106556:	68fb      	ldr	r3, [r7, #12]
 8106558:	681b      	ldr	r3, [r3, #0]
 810655a:	1e5a      	subs	r2, r3, #1
 810655c:	68fb      	ldr	r3, [r7, #12]
 810655e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8106560:	68fb      	ldr	r3, [r7, #12]
 8106562:	681b      	ldr	r3, [r3, #0]
}
 8106564:	4618      	mov	r0, r3
 8106566:	3714      	adds	r7, #20
 8106568:	46bd      	mov	sp, r7
 810656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810656e:	4770      	bx	lr

08106570 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8106570:	b480      	push	{r7}
 8106572:	b085      	sub	sp, #20
 8106574:	af00      	add	r7, sp, #0
 8106576:	60f8      	str	r0, [r7, #12]
 8106578:	60b9      	str	r1, [r7, #8]
 810657a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810657c:	68fb      	ldr	r3, [r7, #12]
 810657e:	3b04      	subs	r3, #4
 8106580:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8106582:	68fb      	ldr	r3, [r7, #12]
 8106584:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8106588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810658a:	68fb      	ldr	r3, [r7, #12]
 810658c:	3b04      	subs	r3, #4
 810658e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8106590:	68bb      	ldr	r3, [r7, #8]
 8106592:	f023 0201 	bic.w	r2, r3, #1
 8106596:	68fb      	ldr	r3, [r7, #12]
 8106598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810659a:	68fb      	ldr	r3, [r7, #12]
 810659c:	3b04      	subs	r3, #4
 810659e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81065a0:	4a0c      	ldr	r2, [pc, #48]	@ (81065d4 <pxPortInitialiseStack+0x64>)
 81065a2:	68fb      	ldr	r3, [r7, #12]
 81065a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81065a6:	68fb      	ldr	r3, [r7, #12]
 81065a8:	3b14      	subs	r3, #20
 81065aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81065ac:	687a      	ldr	r2, [r7, #4]
 81065ae:	68fb      	ldr	r3, [r7, #12]
 81065b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81065b2:	68fb      	ldr	r3, [r7, #12]
 81065b4:	3b04      	subs	r3, #4
 81065b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81065b8:	68fb      	ldr	r3, [r7, #12]
 81065ba:	f06f 0202 	mvn.w	r2, #2
 81065be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81065c0:	68fb      	ldr	r3, [r7, #12]
 81065c2:	3b20      	subs	r3, #32
 81065c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81065c6:	68fb      	ldr	r3, [r7, #12]
}
 81065c8:	4618      	mov	r0, r3
 81065ca:	3714      	adds	r7, #20
 81065cc:	46bd      	mov	sp, r7
 81065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065d2:	4770      	bx	lr
 81065d4:	081065d9 	.word	0x081065d9

081065d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 81065d8:	b480      	push	{r7}
 81065da:	b085      	sub	sp, #20
 81065dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 81065de:	2300      	movs	r3, #0
 81065e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 81065e2:	4b13      	ldr	r3, [pc, #76]	@ (8106630 <prvTaskExitError+0x58>)
 81065e4:	681b      	ldr	r3, [r3, #0]
 81065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81065ea:	d00b      	beq.n	8106604 <prvTaskExitError+0x2c>
	__asm volatile
 81065ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81065f0:	f383 8811 	msr	BASEPRI, r3
 81065f4:	f3bf 8f6f 	isb	sy
 81065f8:	f3bf 8f4f 	dsb	sy
 81065fc:	60fb      	str	r3, [r7, #12]
}
 81065fe:	bf00      	nop
 8106600:	bf00      	nop
 8106602:	e7fd      	b.n	8106600 <prvTaskExitError+0x28>
	__asm volatile
 8106604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106608:	f383 8811 	msr	BASEPRI, r3
 810660c:	f3bf 8f6f 	isb	sy
 8106610:	f3bf 8f4f 	dsb	sy
 8106614:	60bb      	str	r3, [r7, #8]
}
 8106616:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8106618:	bf00      	nop
 810661a:	687b      	ldr	r3, [r7, #4]
 810661c:	2b00      	cmp	r3, #0
 810661e:	d0fc      	beq.n	810661a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8106620:	bf00      	nop
 8106622:	bf00      	nop
 8106624:	3714      	adds	r7, #20
 8106626:	46bd      	mov	sp, r7
 8106628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810662c:	4770      	bx	lr
 810662e:	bf00      	nop
 8106630:	10000010 	.word	0x10000010
	...

08106640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8106640:	4b07      	ldr	r3, [pc, #28]	@ (8106660 <pxCurrentTCBConst2>)
 8106642:	6819      	ldr	r1, [r3, #0]
 8106644:	6808      	ldr	r0, [r1, #0]
 8106646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810664a:	f380 8809 	msr	PSP, r0
 810664e:	f3bf 8f6f 	isb	sy
 8106652:	f04f 0000 	mov.w	r0, #0
 8106656:	f380 8811 	msr	BASEPRI, r0
 810665a:	4770      	bx	lr
 810665c:	f3af 8000 	nop.w

08106660 <pxCurrentTCBConst2>:
 8106660:	10004448 	.word	0x10004448
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8106664:	bf00      	nop
 8106666:	bf00      	nop

08106668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8106668:	4808      	ldr	r0, [pc, #32]	@ (810668c <prvPortStartFirstTask+0x24>)
 810666a:	6800      	ldr	r0, [r0, #0]
 810666c:	6800      	ldr	r0, [r0, #0]
 810666e:	f380 8808 	msr	MSP, r0
 8106672:	f04f 0000 	mov.w	r0, #0
 8106676:	f380 8814 	msr	CONTROL, r0
 810667a:	b662      	cpsie	i
 810667c:	b661      	cpsie	f
 810667e:	f3bf 8f4f 	dsb	sy
 8106682:	f3bf 8f6f 	isb	sy
 8106686:	df00      	svc	0
 8106688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810668a:	bf00      	nop
 810668c:	e000ed08 	.word	0xe000ed08

08106690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8106690:	b580      	push	{r7, lr}
 8106692:	b086      	sub	sp, #24
 8106694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8106696:	4b47      	ldr	r3, [pc, #284]	@ (81067b4 <xPortStartScheduler+0x124>)
 8106698:	681b      	ldr	r3, [r3, #0]
 810669a:	4a47      	ldr	r2, [pc, #284]	@ (81067b8 <xPortStartScheduler+0x128>)
 810669c:	4293      	cmp	r3, r2
 810669e:	d10b      	bne.n	81066b8 <xPortStartScheduler+0x28>
	__asm volatile
 81066a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81066a4:	f383 8811 	msr	BASEPRI, r3
 81066a8:	f3bf 8f6f 	isb	sy
 81066ac:	f3bf 8f4f 	dsb	sy
 81066b0:	60fb      	str	r3, [r7, #12]
}
 81066b2:	bf00      	nop
 81066b4:	bf00      	nop
 81066b6:	e7fd      	b.n	81066b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81066b8:	4b3e      	ldr	r3, [pc, #248]	@ (81067b4 <xPortStartScheduler+0x124>)
 81066ba:	681b      	ldr	r3, [r3, #0]
 81066bc:	4a3f      	ldr	r2, [pc, #252]	@ (81067bc <xPortStartScheduler+0x12c>)
 81066be:	4293      	cmp	r3, r2
 81066c0:	d10b      	bne.n	81066da <xPortStartScheduler+0x4a>
	__asm volatile
 81066c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81066c6:	f383 8811 	msr	BASEPRI, r3
 81066ca:	f3bf 8f6f 	isb	sy
 81066ce:	f3bf 8f4f 	dsb	sy
 81066d2:	613b      	str	r3, [r7, #16]
}
 81066d4:	bf00      	nop
 81066d6:	bf00      	nop
 81066d8:	e7fd      	b.n	81066d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81066da:	4b39      	ldr	r3, [pc, #228]	@ (81067c0 <xPortStartScheduler+0x130>)
 81066dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81066de:	697b      	ldr	r3, [r7, #20]
 81066e0:	781b      	ldrb	r3, [r3, #0]
 81066e2:	b2db      	uxtb	r3, r3
 81066e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81066e6:	697b      	ldr	r3, [r7, #20]
 81066e8:	22ff      	movs	r2, #255	@ 0xff
 81066ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81066ec:	697b      	ldr	r3, [r7, #20]
 81066ee:	781b      	ldrb	r3, [r3, #0]
 81066f0:	b2db      	uxtb	r3, r3
 81066f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81066f4:	78fb      	ldrb	r3, [r7, #3]
 81066f6:	b2db      	uxtb	r3, r3
 81066f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 81066fc:	b2da      	uxtb	r2, r3
 81066fe:	4b31      	ldr	r3, [pc, #196]	@ (81067c4 <xPortStartScheduler+0x134>)
 8106700:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8106702:	4b31      	ldr	r3, [pc, #196]	@ (81067c8 <xPortStartScheduler+0x138>)
 8106704:	2207      	movs	r2, #7
 8106706:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8106708:	e009      	b.n	810671e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810670a:	4b2f      	ldr	r3, [pc, #188]	@ (81067c8 <xPortStartScheduler+0x138>)
 810670c:	681b      	ldr	r3, [r3, #0]
 810670e:	3b01      	subs	r3, #1
 8106710:	4a2d      	ldr	r2, [pc, #180]	@ (81067c8 <xPortStartScheduler+0x138>)
 8106712:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8106714:	78fb      	ldrb	r3, [r7, #3]
 8106716:	b2db      	uxtb	r3, r3
 8106718:	005b      	lsls	r3, r3, #1
 810671a:	b2db      	uxtb	r3, r3
 810671c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810671e:	78fb      	ldrb	r3, [r7, #3]
 8106720:	b2db      	uxtb	r3, r3
 8106722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106726:	2b80      	cmp	r3, #128	@ 0x80
 8106728:	d0ef      	beq.n	810670a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810672a:	4b27      	ldr	r3, [pc, #156]	@ (81067c8 <xPortStartScheduler+0x138>)
 810672c:	681b      	ldr	r3, [r3, #0]
 810672e:	f1c3 0307 	rsb	r3, r3, #7
 8106732:	2b04      	cmp	r3, #4
 8106734:	d00b      	beq.n	810674e <xPortStartScheduler+0xbe>
	__asm volatile
 8106736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810673a:	f383 8811 	msr	BASEPRI, r3
 810673e:	f3bf 8f6f 	isb	sy
 8106742:	f3bf 8f4f 	dsb	sy
 8106746:	60bb      	str	r3, [r7, #8]
}
 8106748:	bf00      	nop
 810674a:	bf00      	nop
 810674c:	e7fd      	b.n	810674a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810674e:	4b1e      	ldr	r3, [pc, #120]	@ (81067c8 <xPortStartScheduler+0x138>)
 8106750:	681b      	ldr	r3, [r3, #0]
 8106752:	021b      	lsls	r3, r3, #8
 8106754:	4a1c      	ldr	r2, [pc, #112]	@ (81067c8 <xPortStartScheduler+0x138>)
 8106756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8106758:	4b1b      	ldr	r3, [pc, #108]	@ (81067c8 <xPortStartScheduler+0x138>)
 810675a:	681b      	ldr	r3, [r3, #0]
 810675c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8106760:	4a19      	ldr	r2, [pc, #100]	@ (81067c8 <xPortStartScheduler+0x138>)
 8106762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8106764:	687b      	ldr	r3, [r7, #4]
 8106766:	b2da      	uxtb	r2, r3
 8106768:	697b      	ldr	r3, [r7, #20]
 810676a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810676c:	4b17      	ldr	r3, [pc, #92]	@ (81067cc <xPortStartScheduler+0x13c>)
 810676e:	681b      	ldr	r3, [r3, #0]
 8106770:	4a16      	ldr	r2, [pc, #88]	@ (81067cc <xPortStartScheduler+0x13c>)
 8106772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8106776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8106778:	4b14      	ldr	r3, [pc, #80]	@ (81067cc <xPortStartScheduler+0x13c>)
 810677a:	681b      	ldr	r3, [r3, #0]
 810677c:	4a13      	ldr	r2, [pc, #76]	@ (81067cc <xPortStartScheduler+0x13c>)
 810677e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8106782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8106784:	f000 f8da 	bl	810693c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8106788:	4b11      	ldr	r3, [pc, #68]	@ (81067d0 <xPortStartScheduler+0x140>)
 810678a:	2200      	movs	r2, #0
 810678c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810678e:	f000 f8f9 	bl	8106984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8106792:	4b10      	ldr	r3, [pc, #64]	@ (81067d4 <xPortStartScheduler+0x144>)
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	4a0f      	ldr	r2, [pc, #60]	@ (81067d4 <xPortStartScheduler+0x144>)
 8106798:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810679c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810679e:	f7ff ff63 	bl	8106668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81067a2:	f001 f9ef 	bl	8107b84 <vTaskSwitchContext>
	prvTaskExitError();
 81067a6:	f7ff ff17 	bl	81065d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81067aa:	2300      	movs	r3, #0
}
 81067ac:	4618      	mov	r0, r3
 81067ae:	3718      	adds	r7, #24
 81067b0:	46bd      	mov	sp, r7
 81067b2:	bd80      	pop	{r7, pc}
 81067b4:	e000ed00 	.word	0xe000ed00
 81067b8:	410fc271 	.word	0x410fc271
 81067bc:	410fc270 	.word	0x410fc270
 81067c0:	e000e400 	.word	0xe000e400
 81067c4:	10004400 	.word	0x10004400
 81067c8:	10004404 	.word	0x10004404
 81067cc:	e000ed20 	.word	0xe000ed20
 81067d0:	10000010 	.word	0x10000010
 81067d4:	e000ef34 	.word	0xe000ef34

081067d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 81067d8:	b480      	push	{r7}
 81067da:	b083      	sub	sp, #12
 81067dc:	af00      	add	r7, sp, #0
	__asm volatile
 81067de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81067e2:	f383 8811 	msr	BASEPRI, r3
 81067e6:	f3bf 8f6f 	isb	sy
 81067ea:	f3bf 8f4f 	dsb	sy
 81067ee:	607b      	str	r3, [r7, #4]
}
 81067f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 81067f2:	4b10      	ldr	r3, [pc, #64]	@ (8106834 <vPortEnterCritical+0x5c>)
 81067f4:	681b      	ldr	r3, [r3, #0]
 81067f6:	3301      	adds	r3, #1
 81067f8:	4a0e      	ldr	r2, [pc, #56]	@ (8106834 <vPortEnterCritical+0x5c>)
 81067fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 81067fc:	4b0d      	ldr	r3, [pc, #52]	@ (8106834 <vPortEnterCritical+0x5c>)
 81067fe:	681b      	ldr	r3, [r3, #0]
 8106800:	2b01      	cmp	r3, #1
 8106802:	d110      	bne.n	8106826 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8106804:	4b0c      	ldr	r3, [pc, #48]	@ (8106838 <vPortEnterCritical+0x60>)
 8106806:	681b      	ldr	r3, [r3, #0]
 8106808:	b2db      	uxtb	r3, r3
 810680a:	2b00      	cmp	r3, #0
 810680c:	d00b      	beq.n	8106826 <vPortEnterCritical+0x4e>
	__asm volatile
 810680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106812:	f383 8811 	msr	BASEPRI, r3
 8106816:	f3bf 8f6f 	isb	sy
 810681a:	f3bf 8f4f 	dsb	sy
 810681e:	603b      	str	r3, [r7, #0]
}
 8106820:	bf00      	nop
 8106822:	bf00      	nop
 8106824:	e7fd      	b.n	8106822 <vPortEnterCritical+0x4a>
	}
}
 8106826:	bf00      	nop
 8106828:	370c      	adds	r7, #12
 810682a:	46bd      	mov	sp, r7
 810682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106830:	4770      	bx	lr
 8106832:	bf00      	nop
 8106834:	10000010 	.word	0x10000010
 8106838:	e000ed04 	.word	0xe000ed04

0810683c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810683c:	b480      	push	{r7}
 810683e:	b083      	sub	sp, #12
 8106840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8106842:	4b12      	ldr	r3, [pc, #72]	@ (810688c <vPortExitCritical+0x50>)
 8106844:	681b      	ldr	r3, [r3, #0]
 8106846:	2b00      	cmp	r3, #0
 8106848:	d10b      	bne.n	8106862 <vPortExitCritical+0x26>
	__asm volatile
 810684a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810684e:	f383 8811 	msr	BASEPRI, r3
 8106852:	f3bf 8f6f 	isb	sy
 8106856:	f3bf 8f4f 	dsb	sy
 810685a:	607b      	str	r3, [r7, #4]
}
 810685c:	bf00      	nop
 810685e:	bf00      	nop
 8106860:	e7fd      	b.n	810685e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8106862:	4b0a      	ldr	r3, [pc, #40]	@ (810688c <vPortExitCritical+0x50>)
 8106864:	681b      	ldr	r3, [r3, #0]
 8106866:	3b01      	subs	r3, #1
 8106868:	4a08      	ldr	r2, [pc, #32]	@ (810688c <vPortExitCritical+0x50>)
 810686a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810686c:	4b07      	ldr	r3, [pc, #28]	@ (810688c <vPortExitCritical+0x50>)
 810686e:	681b      	ldr	r3, [r3, #0]
 8106870:	2b00      	cmp	r3, #0
 8106872:	d105      	bne.n	8106880 <vPortExitCritical+0x44>
 8106874:	2300      	movs	r3, #0
 8106876:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8106878:	683b      	ldr	r3, [r7, #0]
 810687a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810687e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8106880:	bf00      	nop
 8106882:	370c      	adds	r7, #12
 8106884:	46bd      	mov	sp, r7
 8106886:	f85d 7b04 	ldr.w	r7, [sp], #4
 810688a:	4770      	bx	lr
 810688c:	10000010 	.word	0x10000010

08106890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8106890:	f3ef 8009 	mrs	r0, PSP
 8106894:	f3bf 8f6f 	isb	sy
 8106898:	4b15      	ldr	r3, [pc, #84]	@ (81068f0 <pxCurrentTCBConst>)
 810689a:	681a      	ldr	r2, [r3, #0]
 810689c:	f01e 0f10 	tst.w	lr, #16
 81068a0:	bf08      	it	eq
 81068a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81068a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81068aa:	6010      	str	r0, [r2, #0]
 81068ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 81068b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 81068b4:	f380 8811 	msr	BASEPRI, r0
 81068b8:	f3bf 8f4f 	dsb	sy
 81068bc:	f3bf 8f6f 	isb	sy
 81068c0:	f001 f960 	bl	8107b84 <vTaskSwitchContext>
 81068c4:	f04f 0000 	mov.w	r0, #0
 81068c8:	f380 8811 	msr	BASEPRI, r0
 81068cc:	bc09      	pop	{r0, r3}
 81068ce:	6819      	ldr	r1, [r3, #0]
 81068d0:	6808      	ldr	r0, [r1, #0]
 81068d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81068d6:	f01e 0f10 	tst.w	lr, #16
 81068da:	bf08      	it	eq
 81068dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81068e0:	f380 8809 	msr	PSP, r0
 81068e4:	f3bf 8f6f 	isb	sy
 81068e8:	4770      	bx	lr
 81068ea:	bf00      	nop
 81068ec:	f3af 8000 	nop.w

081068f0 <pxCurrentTCBConst>:
 81068f0:	10004448 	.word	0x10004448
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81068f4:	bf00      	nop
 81068f6:	bf00      	nop

081068f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 81068f8:	b580      	push	{r7, lr}
 81068fa:	b082      	sub	sp, #8
 81068fc:	af00      	add	r7, sp, #0
	__asm volatile
 81068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106902:	f383 8811 	msr	BASEPRI, r3
 8106906:	f3bf 8f6f 	isb	sy
 810690a:	f3bf 8f4f 	dsb	sy
 810690e:	607b      	str	r3, [r7, #4]
}
 8106910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8106912:	f001 f87d 	bl	8107a10 <xTaskIncrementTick>
 8106916:	4603      	mov	r3, r0
 8106918:	2b00      	cmp	r3, #0
 810691a:	d003      	beq.n	8106924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810691c:	4b06      	ldr	r3, [pc, #24]	@ (8106938 <xPortSysTickHandler+0x40>)
 810691e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106922:	601a      	str	r2, [r3, #0]
 8106924:	2300      	movs	r3, #0
 8106926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8106928:	683b      	ldr	r3, [r7, #0]
 810692a:	f383 8811 	msr	BASEPRI, r3
}
 810692e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8106930:	bf00      	nop
 8106932:	3708      	adds	r7, #8
 8106934:	46bd      	mov	sp, r7
 8106936:	bd80      	pop	{r7, pc}
 8106938:	e000ed04 	.word	0xe000ed04

0810693c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810693c:	b480      	push	{r7}
 810693e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8106940:	4b0b      	ldr	r3, [pc, #44]	@ (8106970 <vPortSetupTimerInterrupt+0x34>)
 8106942:	2200      	movs	r2, #0
 8106944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8106946:	4b0b      	ldr	r3, [pc, #44]	@ (8106974 <vPortSetupTimerInterrupt+0x38>)
 8106948:	2200      	movs	r2, #0
 810694a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810694c:	4b0a      	ldr	r3, [pc, #40]	@ (8106978 <vPortSetupTimerInterrupt+0x3c>)
 810694e:	681b      	ldr	r3, [r3, #0]
 8106950:	4a0a      	ldr	r2, [pc, #40]	@ (810697c <vPortSetupTimerInterrupt+0x40>)
 8106952:	fba2 2303 	umull	r2, r3, r2, r3
 8106956:	099b      	lsrs	r3, r3, #6
 8106958:	4a09      	ldr	r2, [pc, #36]	@ (8106980 <vPortSetupTimerInterrupt+0x44>)
 810695a:	3b01      	subs	r3, #1
 810695c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810695e:	4b04      	ldr	r3, [pc, #16]	@ (8106970 <vPortSetupTimerInterrupt+0x34>)
 8106960:	2207      	movs	r2, #7
 8106962:	601a      	str	r2, [r3, #0]
}
 8106964:	bf00      	nop
 8106966:	46bd      	mov	sp, r7
 8106968:	f85d 7b04 	ldr.w	r7, [sp], #4
 810696c:	4770      	bx	lr
 810696e:	bf00      	nop
 8106970:	e000e010 	.word	0xe000e010
 8106974:	e000e018 	.word	0xe000e018
 8106978:	10000004 	.word	0x10000004
 810697c:	10624dd3 	.word	0x10624dd3
 8106980:	e000e014 	.word	0xe000e014

08106984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8106984:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8106994 <vPortEnableVFP+0x10>
 8106988:	6801      	ldr	r1, [r0, #0]
 810698a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810698e:	6001      	str	r1, [r0, #0]
 8106990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8106992:	bf00      	nop
 8106994:	e000ed88 	.word	0xe000ed88

08106998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8106998:	b480      	push	{r7}
 810699a:	b085      	sub	sp, #20
 810699c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810699e:	f3ef 8305 	mrs	r3, IPSR
 81069a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81069a4:	68fb      	ldr	r3, [r7, #12]
 81069a6:	2b0f      	cmp	r3, #15
 81069a8:	d915      	bls.n	81069d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81069aa:	4a18      	ldr	r2, [pc, #96]	@ (8106a0c <vPortValidateInterruptPriority+0x74>)
 81069ac:	68fb      	ldr	r3, [r7, #12]
 81069ae:	4413      	add	r3, r2
 81069b0:	781b      	ldrb	r3, [r3, #0]
 81069b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 81069b4:	4b16      	ldr	r3, [pc, #88]	@ (8106a10 <vPortValidateInterruptPriority+0x78>)
 81069b6:	781b      	ldrb	r3, [r3, #0]
 81069b8:	7afa      	ldrb	r2, [r7, #11]
 81069ba:	429a      	cmp	r2, r3
 81069bc:	d20b      	bcs.n	81069d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 81069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81069c2:	f383 8811 	msr	BASEPRI, r3
 81069c6:	f3bf 8f6f 	isb	sy
 81069ca:	f3bf 8f4f 	dsb	sy
 81069ce:	607b      	str	r3, [r7, #4]
}
 81069d0:	bf00      	nop
 81069d2:	bf00      	nop
 81069d4:	e7fd      	b.n	81069d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 81069d6:	4b0f      	ldr	r3, [pc, #60]	@ (8106a14 <vPortValidateInterruptPriority+0x7c>)
 81069d8:	681b      	ldr	r3, [r3, #0]
 81069da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 81069de:	4b0e      	ldr	r3, [pc, #56]	@ (8106a18 <vPortValidateInterruptPriority+0x80>)
 81069e0:	681b      	ldr	r3, [r3, #0]
 81069e2:	429a      	cmp	r2, r3
 81069e4:	d90b      	bls.n	81069fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 81069e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81069ea:	f383 8811 	msr	BASEPRI, r3
 81069ee:	f3bf 8f6f 	isb	sy
 81069f2:	f3bf 8f4f 	dsb	sy
 81069f6:	603b      	str	r3, [r7, #0]
}
 81069f8:	bf00      	nop
 81069fa:	bf00      	nop
 81069fc:	e7fd      	b.n	81069fa <vPortValidateInterruptPriority+0x62>
	}
 81069fe:	bf00      	nop
 8106a00:	3714      	adds	r7, #20
 8106a02:	46bd      	mov	sp, r7
 8106a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a08:	4770      	bx	lr
 8106a0a:	bf00      	nop
 8106a0c:	e000e3f0 	.word	0xe000e3f0
 8106a10:	10004400 	.word	0x10004400
 8106a14:	e000ed0c 	.word	0xe000ed0c
 8106a18:	10004404 	.word	0x10004404

08106a1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8106a1c:	b580      	push	{r7, lr}
 8106a1e:	b084      	sub	sp, #16
 8106a20:	af00      	add	r7, sp, #0
 8106a22:	6078      	str	r0, [r7, #4]
 8106a24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8106a2a:	68fb      	ldr	r3, [r7, #12]
 8106a2c:	2b00      	cmp	r3, #0
 8106a2e:	d10b      	bne.n	8106a48 <xQueueGenericReset+0x2c>
	__asm volatile
 8106a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106a34:	f383 8811 	msr	BASEPRI, r3
 8106a38:	f3bf 8f6f 	isb	sy
 8106a3c:	f3bf 8f4f 	dsb	sy
 8106a40:	60bb      	str	r3, [r7, #8]
}
 8106a42:	bf00      	nop
 8106a44:	bf00      	nop
 8106a46:	e7fd      	b.n	8106a44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8106a48:	f7ff fec6 	bl	81067d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8106a4c:	68fb      	ldr	r3, [r7, #12]
 8106a4e:	681a      	ldr	r2, [r3, #0]
 8106a50:	68fb      	ldr	r3, [r7, #12]
 8106a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106a54:	68f9      	ldr	r1, [r7, #12]
 8106a56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8106a58:	fb01 f303 	mul.w	r3, r1, r3
 8106a5c:	441a      	add	r2, r3
 8106a5e:	68fb      	ldr	r3, [r7, #12]
 8106a60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8106a62:	68fb      	ldr	r3, [r7, #12]
 8106a64:	2200      	movs	r2, #0
 8106a66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8106a68:	68fb      	ldr	r3, [r7, #12]
 8106a6a:	681a      	ldr	r2, [r3, #0]
 8106a6c:	68fb      	ldr	r3, [r7, #12]
 8106a6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8106a70:	68fb      	ldr	r3, [r7, #12]
 8106a72:	681a      	ldr	r2, [r3, #0]
 8106a74:	68fb      	ldr	r3, [r7, #12]
 8106a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106a78:	3b01      	subs	r3, #1
 8106a7a:	68f9      	ldr	r1, [r7, #12]
 8106a7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8106a7e:	fb01 f303 	mul.w	r3, r1, r3
 8106a82:	441a      	add	r2, r3
 8106a84:	68fb      	ldr	r3, [r7, #12]
 8106a86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8106a88:	68fb      	ldr	r3, [r7, #12]
 8106a8a:	22ff      	movs	r2, #255	@ 0xff
 8106a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8106a90:	68fb      	ldr	r3, [r7, #12]
 8106a92:	22ff      	movs	r2, #255	@ 0xff
 8106a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8106a98:	683b      	ldr	r3, [r7, #0]
 8106a9a:	2b00      	cmp	r3, #0
 8106a9c:	d114      	bne.n	8106ac8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106a9e:	68fb      	ldr	r3, [r7, #12]
 8106aa0:	691b      	ldr	r3, [r3, #16]
 8106aa2:	2b00      	cmp	r3, #0
 8106aa4:	d01a      	beq.n	8106adc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106aa6:	68fb      	ldr	r3, [r7, #12]
 8106aa8:	3310      	adds	r3, #16
 8106aaa:	4618      	mov	r0, r3
 8106aac:	f001 f91a 	bl	8107ce4 <xTaskRemoveFromEventList>
 8106ab0:	4603      	mov	r3, r0
 8106ab2:	2b00      	cmp	r3, #0
 8106ab4:	d012      	beq.n	8106adc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8106ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8106aec <xQueueGenericReset+0xd0>)
 8106ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106abc:	601a      	str	r2, [r3, #0]
 8106abe:	f3bf 8f4f 	dsb	sy
 8106ac2:	f3bf 8f6f 	isb	sy
 8106ac6:	e009      	b.n	8106adc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8106ac8:	68fb      	ldr	r3, [r7, #12]
 8106aca:	3310      	adds	r3, #16
 8106acc:	4618      	mov	r0, r3
 8106ace:	f7ff fc9b 	bl	8106408 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8106ad2:	68fb      	ldr	r3, [r7, #12]
 8106ad4:	3324      	adds	r3, #36	@ 0x24
 8106ad6:	4618      	mov	r0, r3
 8106ad8:	f7ff fc96 	bl	8106408 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8106adc:	f7ff feae 	bl	810683c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8106ae0:	2301      	movs	r3, #1
}
 8106ae2:	4618      	mov	r0, r3
 8106ae4:	3710      	adds	r7, #16
 8106ae6:	46bd      	mov	sp, r7
 8106ae8:	bd80      	pop	{r7, pc}
 8106aea:	bf00      	nop
 8106aec:	e000ed04 	.word	0xe000ed04

08106af0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8106af0:	b580      	push	{r7, lr}
 8106af2:	b08e      	sub	sp, #56	@ 0x38
 8106af4:	af02      	add	r7, sp, #8
 8106af6:	60f8      	str	r0, [r7, #12]
 8106af8:	60b9      	str	r1, [r7, #8]
 8106afa:	607a      	str	r2, [r7, #4]
 8106afc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8106afe:	68fb      	ldr	r3, [r7, #12]
 8106b00:	2b00      	cmp	r3, #0
 8106b02:	d10b      	bne.n	8106b1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8106b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106b08:	f383 8811 	msr	BASEPRI, r3
 8106b0c:	f3bf 8f6f 	isb	sy
 8106b10:	f3bf 8f4f 	dsb	sy
 8106b14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8106b16:	bf00      	nop
 8106b18:	bf00      	nop
 8106b1a:	e7fd      	b.n	8106b18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8106b1c:	683b      	ldr	r3, [r7, #0]
 8106b1e:	2b00      	cmp	r3, #0
 8106b20:	d10b      	bne.n	8106b3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8106b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106b26:	f383 8811 	msr	BASEPRI, r3
 8106b2a:	f3bf 8f6f 	isb	sy
 8106b2e:	f3bf 8f4f 	dsb	sy
 8106b32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8106b34:	bf00      	nop
 8106b36:	bf00      	nop
 8106b38:	e7fd      	b.n	8106b36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8106b3a:	687b      	ldr	r3, [r7, #4]
 8106b3c:	2b00      	cmp	r3, #0
 8106b3e:	d002      	beq.n	8106b46 <xQueueGenericCreateStatic+0x56>
 8106b40:	68bb      	ldr	r3, [r7, #8]
 8106b42:	2b00      	cmp	r3, #0
 8106b44:	d001      	beq.n	8106b4a <xQueueGenericCreateStatic+0x5a>
 8106b46:	2301      	movs	r3, #1
 8106b48:	e000      	b.n	8106b4c <xQueueGenericCreateStatic+0x5c>
 8106b4a:	2300      	movs	r3, #0
 8106b4c:	2b00      	cmp	r3, #0
 8106b4e:	d10b      	bne.n	8106b68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8106b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106b54:	f383 8811 	msr	BASEPRI, r3
 8106b58:	f3bf 8f6f 	isb	sy
 8106b5c:	f3bf 8f4f 	dsb	sy
 8106b60:	623b      	str	r3, [r7, #32]
}
 8106b62:	bf00      	nop
 8106b64:	bf00      	nop
 8106b66:	e7fd      	b.n	8106b64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	2b00      	cmp	r3, #0
 8106b6c:	d102      	bne.n	8106b74 <xQueueGenericCreateStatic+0x84>
 8106b6e:	68bb      	ldr	r3, [r7, #8]
 8106b70:	2b00      	cmp	r3, #0
 8106b72:	d101      	bne.n	8106b78 <xQueueGenericCreateStatic+0x88>
 8106b74:	2301      	movs	r3, #1
 8106b76:	e000      	b.n	8106b7a <xQueueGenericCreateStatic+0x8a>
 8106b78:	2300      	movs	r3, #0
 8106b7a:	2b00      	cmp	r3, #0
 8106b7c:	d10b      	bne.n	8106b96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8106b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106b82:	f383 8811 	msr	BASEPRI, r3
 8106b86:	f3bf 8f6f 	isb	sy
 8106b8a:	f3bf 8f4f 	dsb	sy
 8106b8e:	61fb      	str	r3, [r7, #28]
}
 8106b90:	bf00      	nop
 8106b92:	bf00      	nop
 8106b94:	e7fd      	b.n	8106b92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8106b96:	2350      	movs	r3, #80	@ 0x50
 8106b98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8106b9a:	697b      	ldr	r3, [r7, #20]
 8106b9c:	2b50      	cmp	r3, #80	@ 0x50
 8106b9e:	d00b      	beq.n	8106bb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8106ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106ba4:	f383 8811 	msr	BASEPRI, r3
 8106ba8:	f3bf 8f6f 	isb	sy
 8106bac:	f3bf 8f4f 	dsb	sy
 8106bb0:	61bb      	str	r3, [r7, #24]
}
 8106bb2:	bf00      	nop
 8106bb4:	bf00      	nop
 8106bb6:	e7fd      	b.n	8106bb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8106bb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8106bba:	683b      	ldr	r3, [r7, #0]
 8106bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8106bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106bc0:	2b00      	cmp	r3, #0
 8106bc2:	d00d      	beq.n	8106be0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8106bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106bc6:	2201      	movs	r2, #1
 8106bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8106bcc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8106bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106bd2:	9300      	str	r3, [sp, #0]
 8106bd4:	4613      	mov	r3, r2
 8106bd6:	687a      	ldr	r2, [r7, #4]
 8106bd8:	68b9      	ldr	r1, [r7, #8]
 8106bda:	68f8      	ldr	r0, [r7, #12]
 8106bdc:	f000 f805 	bl	8106bea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8106be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8106be2:	4618      	mov	r0, r3
 8106be4:	3730      	adds	r7, #48	@ 0x30
 8106be6:	46bd      	mov	sp, r7
 8106be8:	bd80      	pop	{r7, pc}

08106bea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8106bea:	b580      	push	{r7, lr}
 8106bec:	b084      	sub	sp, #16
 8106bee:	af00      	add	r7, sp, #0
 8106bf0:	60f8      	str	r0, [r7, #12]
 8106bf2:	60b9      	str	r1, [r7, #8]
 8106bf4:	607a      	str	r2, [r7, #4]
 8106bf6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8106bf8:	68bb      	ldr	r3, [r7, #8]
 8106bfa:	2b00      	cmp	r3, #0
 8106bfc:	d103      	bne.n	8106c06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8106bfe:	69bb      	ldr	r3, [r7, #24]
 8106c00:	69ba      	ldr	r2, [r7, #24]
 8106c02:	601a      	str	r2, [r3, #0]
 8106c04:	e002      	b.n	8106c0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8106c06:	69bb      	ldr	r3, [r7, #24]
 8106c08:	687a      	ldr	r2, [r7, #4]
 8106c0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8106c0c:	69bb      	ldr	r3, [r7, #24]
 8106c0e:	68fa      	ldr	r2, [r7, #12]
 8106c10:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8106c12:	69bb      	ldr	r3, [r7, #24]
 8106c14:	68ba      	ldr	r2, [r7, #8]
 8106c16:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8106c18:	2101      	movs	r1, #1
 8106c1a:	69b8      	ldr	r0, [r7, #24]
 8106c1c:	f7ff fefe 	bl	8106a1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8106c20:	69bb      	ldr	r3, [r7, #24]
 8106c22:	78fa      	ldrb	r2, [r7, #3]
 8106c24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8106c28:	bf00      	nop
 8106c2a:	3710      	adds	r7, #16
 8106c2c:	46bd      	mov	sp, r7
 8106c2e:	bd80      	pop	{r7, pc}

08106c30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8106c30:	b580      	push	{r7, lr}
 8106c32:	b08e      	sub	sp, #56	@ 0x38
 8106c34:	af00      	add	r7, sp, #0
 8106c36:	60f8      	str	r0, [r7, #12]
 8106c38:	60b9      	str	r1, [r7, #8]
 8106c3a:	607a      	str	r2, [r7, #4]
 8106c3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8106c3e:	2300      	movs	r3, #0
 8106c40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8106c42:	68fb      	ldr	r3, [r7, #12]
 8106c44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8106c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c48:	2b00      	cmp	r3, #0
 8106c4a:	d10b      	bne.n	8106c64 <xQueueGenericSend+0x34>
	__asm volatile
 8106c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106c50:	f383 8811 	msr	BASEPRI, r3
 8106c54:	f3bf 8f6f 	isb	sy
 8106c58:	f3bf 8f4f 	dsb	sy
 8106c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8106c5e:	bf00      	nop
 8106c60:	bf00      	nop
 8106c62:	e7fd      	b.n	8106c60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106c64:	68bb      	ldr	r3, [r7, #8]
 8106c66:	2b00      	cmp	r3, #0
 8106c68:	d103      	bne.n	8106c72 <xQueueGenericSend+0x42>
 8106c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106c6e:	2b00      	cmp	r3, #0
 8106c70:	d101      	bne.n	8106c76 <xQueueGenericSend+0x46>
 8106c72:	2301      	movs	r3, #1
 8106c74:	e000      	b.n	8106c78 <xQueueGenericSend+0x48>
 8106c76:	2300      	movs	r3, #0
 8106c78:	2b00      	cmp	r3, #0
 8106c7a:	d10b      	bne.n	8106c94 <xQueueGenericSend+0x64>
	__asm volatile
 8106c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106c80:	f383 8811 	msr	BASEPRI, r3
 8106c84:	f3bf 8f6f 	isb	sy
 8106c88:	f3bf 8f4f 	dsb	sy
 8106c8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8106c8e:	bf00      	nop
 8106c90:	bf00      	nop
 8106c92:	e7fd      	b.n	8106c90 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106c94:	683b      	ldr	r3, [r7, #0]
 8106c96:	2b02      	cmp	r3, #2
 8106c98:	d103      	bne.n	8106ca2 <xQueueGenericSend+0x72>
 8106c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106c9e:	2b01      	cmp	r3, #1
 8106ca0:	d101      	bne.n	8106ca6 <xQueueGenericSend+0x76>
 8106ca2:	2301      	movs	r3, #1
 8106ca4:	e000      	b.n	8106ca8 <xQueueGenericSend+0x78>
 8106ca6:	2300      	movs	r3, #0
 8106ca8:	2b00      	cmp	r3, #0
 8106caa:	d10b      	bne.n	8106cc4 <xQueueGenericSend+0x94>
	__asm volatile
 8106cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106cb0:	f383 8811 	msr	BASEPRI, r3
 8106cb4:	f3bf 8f6f 	isb	sy
 8106cb8:	f3bf 8f4f 	dsb	sy
 8106cbc:	623b      	str	r3, [r7, #32]
}
 8106cbe:	bf00      	nop
 8106cc0:	bf00      	nop
 8106cc2:	e7fd      	b.n	8106cc0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8106cc4:	f001 f9ce 	bl	8108064 <xTaskGetSchedulerState>
 8106cc8:	4603      	mov	r3, r0
 8106cca:	2b00      	cmp	r3, #0
 8106ccc:	d102      	bne.n	8106cd4 <xQueueGenericSend+0xa4>
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	2b00      	cmp	r3, #0
 8106cd2:	d101      	bne.n	8106cd8 <xQueueGenericSend+0xa8>
 8106cd4:	2301      	movs	r3, #1
 8106cd6:	e000      	b.n	8106cda <xQueueGenericSend+0xaa>
 8106cd8:	2300      	movs	r3, #0
 8106cda:	2b00      	cmp	r3, #0
 8106cdc:	d10b      	bne.n	8106cf6 <xQueueGenericSend+0xc6>
	__asm volatile
 8106cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106ce2:	f383 8811 	msr	BASEPRI, r3
 8106ce6:	f3bf 8f6f 	isb	sy
 8106cea:	f3bf 8f4f 	dsb	sy
 8106cee:	61fb      	str	r3, [r7, #28]
}
 8106cf0:	bf00      	nop
 8106cf2:	bf00      	nop
 8106cf4:	e7fd      	b.n	8106cf2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8106cf6:	f7ff fd6f 	bl	81067d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8106cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106cfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8106cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106d02:	429a      	cmp	r2, r3
 8106d04:	d302      	bcc.n	8106d0c <xQueueGenericSend+0xdc>
 8106d06:	683b      	ldr	r3, [r7, #0]
 8106d08:	2b02      	cmp	r3, #2
 8106d0a:	d129      	bne.n	8106d60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8106d0c:	683a      	ldr	r2, [r7, #0]
 8106d0e:	68b9      	ldr	r1, [r7, #8]
 8106d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106d12:	f000 fa0f 	bl	8107134 <prvCopyDataToQueue>
 8106d16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8106d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106d1c:	2b00      	cmp	r3, #0
 8106d1e:	d010      	beq.n	8106d42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d22:	3324      	adds	r3, #36	@ 0x24
 8106d24:	4618      	mov	r0, r3
 8106d26:	f000 ffdd 	bl	8107ce4 <xTaskRemoveFromEventList>
 8106d2a:	4603      	mov	r3, r0
 8106d2c:	2b00      	cmp	r3, #0
 8106d2e:	d013      	beq.n	8106d58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8106d30:	4b3f      	ldr	r3, [pc, #252]	@ (8106e30 <xQueueGenericSend+0x200>)
 8106d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106d36:	601a      	str	r2, [r3, #0]
 8106d38:	f3bf 8f4f 	dsb	sy
 8106d3c:	f3bf 8f6f 	isb	sy
 8106d40:	e00a      	b.n	8106d58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8106d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106d44:	2b00      	cmp	r3, #0
 8106d46:	d007      	beq.n	8106d58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8106d48:	4b39      	ldr	r3, [pc, #228]	@ (8106e30 <xQueueGenericSend+0x200>)
 8106d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106d4e:	601a      	str	r2, [r3, #0]
 8106d50:	f3bf 8f4f 	dsb	sy
 8106d54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8106d58:	f7ff fd70 	bl	810683c <vPortExitCritical>
				return pdPASS;
 8106d5c:	2301      	movs	r3, #1
 8106d5e:	e063      	b.n	8106e28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8106d60:	687b      	ldr	r3, [r7, #4]
 8106d62:	2b00      	cmp	r3, #0
 8106d64:	d103      	bne.n	8106d6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8106d66:	f7ff fd69 	bl	810683c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8106d6a:	2300      	movs	r3, #0
 8106d6c:	e05c      	b.n	8106e28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8106d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106d70:	2b00      	cmp	r3, #0
 8106d72:	d106      	bne.n	8106d82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8106d74:	f107 0314 	add.w	r3, r7, #20
 8106d78:	4618      	mov	r0, r3
 8106d7a:	f001 f817 	bl	8107dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8106d7e:	2301      	movs	r3, #1
 8106d80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8106d82:	f7ff fd5b 	bl	810683c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8106d86:	f000 fd87 	bl	8107898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8106d8a:	f7ff fd25 	bl	81067d8 <vPortEnterCritical>
 8106d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106d94:	b25b      	sxtb	r3, r3
 8106d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106d9a:	d103      	bne.n	8106da4 <xQueueGenericSend+0x174>
 8106d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d9e:	2200      	movs	r2, #0
 8106da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106da6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106daa:	b25b      	sxtb	r3, r3
 8106dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106db0:	d103      	bne.n	8106dba <xQueueGenericSend+0x18a>
 8106db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106db4:	2200      	movs	r2, #0
 8106db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106dba:	f7ff fd3f 	bl	810683c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8106dbe:	1d3a      	adds	r2, r7, #4
 8106dc0:	f107 0314 	add.w	r3, r7, #20
 8106dc4:	4611      	mov	r1, r2
 8106dc6:	4618      	mov	r0, r3
 8106dc8:	f001 f806 	bl	8107dd8 <xTaskCheckForTimeOut>
 8106dcc:	4603      	mov	r3, r0
 8106dce:	2b00      	cmp	r3, #0
 8106dd0:	d124      	bne.n	8106e1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8106dd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106dd4:	f000 faa6 	bl	8107324 <prvIsQueueFull>
 8106dd8:	4603      	mov	r3, r0
 8106dda:	2b00      	cmp	r3, #0
 8106ddc:	d018      	beq.n	8106e10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8106dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106de0:	3310      	adds	r3, #16
 8106de2:	687a      	ldr	r2, [r7, #4]
 8106de4:	4611      	mov	r1, r2
 8106de6:	4618      	mov	r0, r3
 8106de8:	f000 ff2a 	bl	8107c40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8106dec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106dee:	f000 fa31 	bl	8107254 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8106df2:	f000 fd5f 	bl	81078b4 <xTaskResumeAll>
 8106df6:	4603      	mov	r3, r0
 8106df8:	2b00      	cmp	r3, #0
 8106dfa:	f47f af7c 	bne.w	8106cf6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8106dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8106e30 <xQueueGenericSend+0x200>)
 8106e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106e04:	601a      	str	r2, [r3, #0]
 8106e06:	f3bf 8f4f 	dsb	sy
 8106e0a:	f3bf 8f6f 	isb	sy
 8106e0e:	e772      	b.n	8106cf6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8106e10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106e12:	f000 fa1f 	bl	8107254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8106e16:	f000 fd4d 	bl	81078b4 <xTaskResumeAll>
 8106e1a:	e76c      	b.n	8106cf6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8106e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106e1e:	f000 fa19 	bl	8107254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8106e22:	f000 fd47 	bl	81078b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8106e26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8106e28:	4618      	mov	r0, r3
 8106e2a:	3738      	adds	r7, #56	@ 0x38
 8106e2c:	46bd      	mov	sp, r7
 8106e2e:	bd80      	pop	{r7, pc}
 8106e30:	e000ed04 	.word	0xe000ed04

08106e34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8106e34:	b580      	push	{r7, lr}
 8106e36:	b090      	sub	sp, #64	@ 0x40
 8106e38:	af00      	add	r7, sp, #0
 8106e3a:	60f8      	str	r0, [r7, #12]
 8106e3c:	60b9      	str	r1, [r7, #8]
 8106e3e:	607a      	str	r2, [r7, #4]
 8106e40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8106e42:	68fb      	ldr	r3, [r7, #12]
 8106e44:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8106e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106e48:	2b00      	cmp	r3, #0
 8106e4a:	d10b      	bne.n	8106e64 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8106e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106e50:	f383 8811 	msr	BASEPRI, r3
 8106e54:	f3bf 8f6f 	isb	sy
 8106e58:	f3bf 8f4f 	dsb	sy
 8106e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8106e5e:	bf00      	nop
 8106e60:	bf00      	nop
 8106e62:	e7fd      	b.n	8106e60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106e64:	68bb      	ldr	r3, [r7, #8]
 8106e66:	2b00      	cmp	r3, #0
 8106e68:	d103      	bne.n	8106e72 <xQueueGenericSendFromISR+0x3e>
 8106e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106e6e:	2b00      	cmp	r3, #0
 8106e70:	d101      	bne.n	8106e76 <xQueueGenericSendFromISR+0x42>
 8106e72:	2301      	movs	r3, #1
 8106e74:	e000      	b.n	8106e78 <xQueueGenericSendFromISR+0x44>
 8106e76:	2300      	movs	r3, #0
 8106e78:	2b00      	cmp	r3, #0
 8106e7a:	d10b      	bne.n	8106e94 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8106e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106e80:	f383 8811 	msr	BASEPRI, r3
 8106e84:	f3bf 8f6f 	isb	sy
 8106e88:	f3bf 8f4f 	dsb	sy
 8106e8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8106e8e:	bf00      	nop
 8106e90:	bf00      	nop
 8106e92:	e7fd      	b.n	8106e90 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106e94:	683b      	ldr	r3, [r7, #0]
 8106e96:	2b02      	cmp	r3, #2
 8106e98:	d103      	bne.n	8106ea2 <xQueueGenericSendFromISR+0x6e>
 8106e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e9e:	2b01      	cmp	r3, #1
 8106ea0:	d101      	bne.n	8106ea6 <xQueueGenericSendFromISR+0x72>
 8106ea2:	2301      	movs	r3, #1
 8106ea4:	e000      	b.n	8106ea8 <xQueueGenericSendFromISR+0x74>
 8106ea6:	2300      	movs	r3, #0
 8106ea8:	2b00      	cmp	r3, #0
 8106eaa:	d10b      	bne.n	8106ec4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8106eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106eb0:	f383 8811 	msr	BASEPRI, r3
 8106eb4:	f3bf 8f6f 	isb	sy
 8106eb8:	f3bf 8f4f 	dsb	sy
 8106ebc:	623b      	str	r3, [r7, #32]
}
 8106ebe:	bf00      	nop
 8106ec0:	bf00      	nop
 8106ec2:	e7fd      	b.n	8106ec0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8106ec4:	f7ff fd68 	bl	8106998 <vPortValidateInterruptPriority>
	__asm volatile
 8106ec8:	f3ef 8211 	mrs	r2, BASEPRI
 8106ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106ed0:	f383 8811 	msr	BASEPRI, r3
 8106ed4:	f3bf 8f6f 	isb	sy
 8106ed8:	f3bf 8f4f 	dsb	sy
 8106edc:	61fa      	str	r2, [r7, #28]
 8106ede:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8106ee0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8106ee2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8106ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106ee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8106ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106eec:	429a      	cmp	r2, r3
 8106eee:	d302      	bcc.n	8106ef6 <xQueueGenericSendFromISR+0xc2>
 8106ef0:	683b      	ldr	r3, [r7, #0]
 8106ef2:	2b02      	cmp	r3, #2
 8106ef4:	d12f      	bne.n	8106f56 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8106ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106efc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8106f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8106f06:	683a      	ldr	r2, [r7, #0]
 8106f08:	68b9      	ldr	r1, [r7, #8]
 8106f0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8106f0c:	f000 f912 	bl	8107134 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8106f10:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8106f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106f18:	d112      	bne.n	8106f40 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8106f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106f1e:	2b00      	cmp	r3, #0
 8106f20:	d016      	beq.n	8106f50 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106f24:	3324      	adds	r3, #36	@ 0x24
 8106f26:	4618      	mov	r0, r3
 8106f28:	f000 fedc 	bl	8107ce4 <xTaskRemoveFromEventList>
 8106f2c:	4603      	mov	r3, r0
 8106f2e:	2b00      	cmp	r3, #0
 8106f30:	d00e      	beq.n	8106f50 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8106f32:	687b      	ldr	r3, [r7, #4]
 8106f34:	2b00      	cmp	r3, #0
 8106f36:	d00b      	beq.n	8106f50 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8106f38:	687b      	ldr	r3, [r7, #4]
 8106f3a:	2201      	movs	r2, #1
 8106f3c:	601a      	str	r2, [r3, #0]
 8106f3e:	e007      	b.n	8106f50 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8106f40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8106f44:	3301      	adds	r3, #1
 8106f46:	b2db      	uxtb	r3, r3
 8106f48:	b25a      	sxtb	r2, r3
 8106f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106f4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8106f50:	2301      	movs	r3, #1
 8106f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8106f54:	e001      	b.n	8106f5a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8106f56:	2300      	movs	r3, #0
 8106f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106f5c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8106f5e:	697b      	ldr	r3, [r7, #20]
 8106f60:	f383 8811 	msr	BASEPRI, r3
}
 8106f64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8106f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8106f68:	4618      	mov	r0, r3
 8106f6a:	3740      	adds	r7, #64	@ 0x40
 8106f6c:	46bd      	mov	sp, r7
 8106f6e:	bd80      	pop	{r7, pc}

08106f70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8106f70:	b580      	push	{r7, lr}
 8106f72:	b08c      	sub	sp, #48	@ 0x30
 8106f74:	af00      	add	r7, sp, #0
 8106f76:	60f8      	str	r0, [r7, #12]
 8106f78:	60b9      	str	r1, [r7, #8]
 8106f7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8106f7c:	2300      	movs	r3, #0
 8106f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8106f80:	68fb      	ldr	r3, [r7, #12]
 8106f82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8106f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106f86:	2b00      	cmp	r3, #0
 8106f88:	d10b      	bne.n	8106fa2 <xQueueReceive+0x32>
	__asm volatile
 8106f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106f8e:	f383 8811 	msr	BASEPRI, r3
 8106f92:	f3bf 8f6f 	isb	sy
 8106f96:	f3bf 8f4f 	dsb	sy
 8106f9a:	623b      	str	r3, [r7, #32]
}
 8106f9c:	bf00      	nop
 8106f9e:	bf00      	nop
 8106fa0:	e7fd      	b.n	8106f9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106fa2:	68bb      	ldr	r3, [r7, #8]
 8106fa4:	2b00      	cmp	r3, #0
 8106fa6:	d103      	bne.n	8106fb0 <xQueueReceive+0x40>
 8106fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106fac:	2b00      	cmp	r3, #0
 8106fae:	d101      	bne.n	8106fb4 <xQueueReceive+0x44>
 8106fb0:	2301      	movs	r3, #1
 8106fb2:	e000      	b.n	8106fb6 <xQueueReceive+0x46>
 8106fb4:	2300      	movs	r3, #0
 8106fb6:	2b00      	cmp	r3, #0
 8106fb8:	d10b      	bne.n	8106fd2 <xQueueReceive+0x62>
	__asm volatile
 8106fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106fbe:	f383 8811 	msr	BASEPRI, r3
 8106fc2:	f3bf 8f6f 	isb	sy
 8106fc6:	f3bf 8f4f 	dsb	sy
 8106fca:	61fb      	str	r3, [r7, #28]
}
 8106fcc:	bf00      	nop
 8106fce:	bf00      	nop
 8106fd0:	e7fd      	b.n	8106fce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8106fd2:	f001 f847 	bl	8108064 <xTaskGetSchedulerState>
 8106fd6:	4603      	mov	r3, r0
 8106fd8:	2b00      	cmp	r3, #0
 8106fda:	d102      	bne.n	8106fe2 <xQueueReceive+0x72>
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	2b00      	cmp	r3, #0
 8106fe0:	d101      	bne.n	8106fe6 <xQueueReceive+0x76>
 8106fe2:	2301      	movs	r3, #1
 8106fe4:	e000      	b.n	8106fe8 <xQueueReceive+0x78>
 8106fe6:	2300      	movs	r3, #0
 8106fe8:	2b00      	cmp	r3, #0
 8106fea:	d10b      	bne.n	8107004 <xQueueReceive+0x94>
	__asm volatile
 8106fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106ff0:	f383 8811 	msr	BASEPRI, r3
 8106ff4:	f3bf 8f6f 	isb	sy
 8106ff8:	f3bf 8f4f 	dsb	sy
 8106ffc:	61bb      	str	r3, [r7, #24]
}
 8106ffe:	bf00      	nop
 8107000:	bf00      	nop
 8107002:	e7fd      	b.n	8107000 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8107004:	f7ff fbe8 	bl	81067d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8107008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810700a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810700c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107010:	2b00      	cmp	r3, #0
 8107012:	d01f      	beq.n	8107054 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8107014:	68b9      	ldr	r1, [r7, #8]
 8107016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8107018:	f000 f8f6 	bl	8107208 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810701c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810701e:	1e5a      	subs	r2, r3, #1
 8107020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107022:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8107024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107026:	691b      	ldr	r3, [r3, #16]
 8107028:	2b00      	cmp	r3, #0
 810702a:	d00f      	beq.n	810704c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810702c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810702e:	3310      	adds	r3, #16
 8107030:	4618      	mov	r0, r3
 8107032:	f000 fe57 	bl	8107ce4 <xTaskRemoveFromEventList>
 8107036:	4603      	mov	r3, r0
 8107038:	2b00      	cmp	r3, #0
 810703a:	d007      	beq.n	810704c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810703c:	4b3c      	ldr	r3, [pc, #240]	@ (8107130 <xQueueReceive+0x1c0>)
 810703e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107042:	601a      	str	r2, [r3, #0]
 8107044:	f3bf 8f4f 	dsb	sy
 8107048:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810704c:	f7ff fbf6 	bl	810683c <vPortExitCritical>
				return pdPASS;
 8107050:	2301      	movs	r3, #1
 8107052:	e069      	b.n	8107128 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8107054:	687b      	ldr	r3, [r7, #4]
 8107056:	2b00      	cmp	r3, #0
 8107058:	d103      	bne.n	8107062 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810705a:	f7ff fbef 	bl	810683c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810705e:	2300      	movs	r3, #0
 8107060:	e062      	b.n	8107128 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8107062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107064:	2b00      	cmp	r3, #0
 8107066:	d106      	bne.n	8107076 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8107068:	f107 0310 	add.w	r3, r7, #16
 810706c:	4618      	mov	r0, r3
 810706e:	f000 fe9d 	bl	8107dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8107072:	2301      	movs	r3, #1
 8107074:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8107076:	f7ff fbe1 	bl	810683c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810707a:	f000 fc0d 	bl	8107898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810707e:	f7ff fbab 	bl	81067d8 <vPortEnterCritical>
 8107082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107084:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8107088:	b25b      	sxtb	r3, r3
 810708a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810708e:	d103      	bne.n	8107098 <xQueueReceive+0x128>
 8107090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107092:	2200      	movs	r2, #0
 8107094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8107098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810709a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810709e:	b25b      	sxtb	r3, r3
 81070a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81070a4:	d103      	bne.n	81070ae <xQueueReceive+0x13e>
 81070a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81070a8:	2200      	movs	r2, #0
 81070aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81070ae:	f7ff fbc5 	bl	810683c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81070b2:	1d3a      	adds	r2, r7, #4
 81070b4:	f107 0310 	add.w	r3, r7, #16
 81070b8:	4611      	mov	r1, r2
 81070ba:	4618      	mov	r0, r3
 81070bc:	f000 fe8c 	bl	8107dd8 <xTaskCheckForTimeOut>
 81070c0:	4603      	mov	r3, r0
 81070c2:	2b00      	cmp	r3, #0
 81070c4:	d123      	bne.n	810710e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81070c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81070c8:	f000 f916 	bl	81072f8 <prvIsQueueEmpty>
 81070cc:	4603      	mov	r3, r0
 81070ce:	2b00      	cmp	r3, #0
 81070d0:	d017      	beq.n	8107102 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81070d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81070d4:	3324      	adds	r3, #36	@ 0x24
 81070d6:	687a      	ldr	r2, [r7, #4]
 81070d8:	4611      	mov	r1, r2
 81070da:	4618      	mov	r0, r3
 81070dc:	f000 fdb0 	bl	8107c40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81070e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81070e2:	f000 f8b7 	bl	8107254 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81070e6:	f000 fbe5 	bl	81078b4 <xTaskResumeAll>
 81070ea:	4603      	mov	r3, r0
 81070ec:	2b00      	cmp	r3, #0
 81070ee:	d189      	bne.n	8107004 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 81070f0:	4b0f      	ldr	r3, [pc, #60]	@ (8107130 <xQueueReceive+0x1c0>)
 81070f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81070f6:	601a      	str	r2, [r3, #0]
 81070f8:	f3bf 8f4f 	dsb	sy
 81070fc:	f3bf 8f6f 	isb	sy
 8107100:	e780      	b.n	8107004 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8107102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8107104:	f000 f8a6 	bl	8107254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8107108:	f000 fbd4 	bl	81078b4 <xTaskResumeAll>
 810710c:	e77a      	b.n	8107004 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810710e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8107110:	f000 f8a0 	bl	8107254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8107114:	f000 fbce 	bl	81078b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8107118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810711a:	f000 f8ed 	bl	81072f8 <prvIsQueueEmpty>
 810711e:	4603      	mov	r3, r0
 8107120:	2b00      	cmp	r3, #0
 8107122:	f43f af6f 	beq.w	8107004 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8107126:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8107128:	4618      	mov	r0, r3
 810712a:	3730      	adds	r7, #48	@ 0x30
 810712c:	46bd      	mov	sp, r7
 810712e:	bd80      	pop	{r7, pc}
 8107130:	e000ed04 	.word	0xe000ed04

08107134 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8107134:	b580      	push	{r7, lr}
 8107136:	b086      	sub	sp, #24
 8107138:	af00      	add	r7, sp, #0
 810713a:	60f8      	str	r0, [r7, #12]
 810713c:	60b9      	str	r1, [r7, #8]
 810713e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8107140:	2300      	movs	r3, #0
 8107142:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8107144:	68fb      	ldr	r3, [r7, #12]
 8107146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107148:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810714a:	68fb      	ldr	r3, [r7, #12]
 810714c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810714e:	2b00      	cmp	r3, #0
 8107150:	d10d      	bne.n	810716e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8107152:	68fb      	ldr	r3, [r7, #12]
 8107154:	681b      	ldr	r3, [r3, #0]
 8107156:	2b00      	cmp	r3, #0
 8107158:	d14d      	bne.n	81071f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810715a:	68fb      	ldr	r3, [r7, #12]
 810715c:	689b      	ldr	r3, [r3, #8]
 810715e:	4618      	mov	r0, r3
 8107160:	f000 ff9e 	bl	81080a0 <xTaskPriorityDisinherit>
 8107164:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8107166:	68fb      	ldr	r3, [r7, #12]
 8107168:	2200      	movs	r2, #0
 810716a:	609a      	str	r2, [r3, #8]
 810716c:	e043      	b.n	81071f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810716e:	687b      	ldr	r3, [r7, #4]
 8107170:	2b00      	cmp	r3, #0
 8107172:	d119      	bne.n	81071a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8107174:	68fb      	ldr	r3, [r7, #12]
 8107176:	6858      	ldr	r0, [r3, #4]
 8107178:	68fb      	ldr	r3, [r7, #12]
 810717a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810717c:	461a      	mov	r2, r3
 810717e:	68b9      	ldr	r1, [r7, #8]
 8107180:	f001 fbd8 	bl	8108934 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8107184:	68fb      	ldr	r3, [r7, #12]
 8107186:	685a      	ldr	r2, [r3, #4]
 8107188:	68fb      	ldr	r3, [r7, #12]
 810718a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810718c:	441a      	add	r2, r3
 810718e:	68fb      	ldr	r3, [r7, #12]
 8107190:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8107192:	68fb      	ldr	r3, [r7, #12]
 8107194:	685a      	ldr	r2, [r3, #4]
 8107196:	68fb      	ldr	r3, [r7, #12]
 8107198:	689b      	ldr	r3, [r3, #8]
 810719a:	429a      	cmp	r2, r3
 810719c:	d32b      	bcc.n	81071f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810719e:	68fb      	ldr	r3, [r7, #12]
 81071a0:	681a      	ldr	r2, [r3, #0]
 81071a2:	68fb      	ldr	r3, [r7, #12]
 81071a4:	605a      	str	r2, [r3, #4]
 81071a6:	e026      	b.n	81071f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 81071a8:	68fb      	ldr	r3, [r7, #12]
 81071aa:	68d8      	ldr	r0, [r3, #12]
 81071ac:	68fb      	ldr	r3, [r7, #12]
 81071ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81071b0:	461a      	mov	r2, r3
 81071b2:	68b9      	ldr	r1, [r7, #8]
 81071b4:	f001 fbbe 	bl	8108934 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81071b8:	68fb      	ldr	r3, [r7, #12]
 81071ba:	68da      	ldr	r2, [r3, #12]
 81071bc:	68fb      	ldr	r3, [r7, #12]
 81071be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81071c0:	425b      	negs	r3, r3
 81071c2:	441a      	add	r2, r3
 81071c4:	68fb      	ldr	r3, [r7, #12]
 81071c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81071c8:	68fb      	ldr	r3, [r7, #12]
 81071ca:	68da      	ldr	r2, [r3, #12]
 81071cc:	68fb      	ldr	r3, [r7, #12]
 81071ce:	681b      	ldr	r3, [r3, #0]
 81071d0:	429a      	cmp	r2, r3
 81071d2:	d207      	bcs.n	81071e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 81071d4:	68fb      	ldr	r3, [r7, #12]
 81071d6:	689a      	ldr	r2, [r3, #8]
 81071d8:	68fb      	ldr	r3, [r7, #12]
 81071da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81071dc:	425b      	negs	r3, r3
 81071de:	441a      	add	r2, r3
 81071e0:	68fb      	ldr	r3, [r7, #12]
 81071e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 81071e4:	687b      	ldr	r3, [r7, #4]
 81071e6:	2b02      	cmp	r3, #2
 81071e8:	d105      	bne.n	81071f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81071ea:	693b      	ldr	r3, [r7, #16]
 81071ec:	2b00      	cmp	r3, #0
 81071ee:	d002      	beq.n	81071f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 81071f0:	693b      	ldr	r3, [r7, #16]
 81071f2:	3b01      	subs	r3, #1
 81071f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81071f6:	693b      	ldr	r3, [r7, #16]
 81071f8:	1c5a      	adds	r2, r3, #1
 81071fa:	68fb      	ldr	r3, [r7, #12]
 81071fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 81071fe:	697b      	ldr	r3, [r7, #20]
}
 8107200:	4618      	mov	r0, r3
 8107202:	3718      	adds	r7, #24
 8107204:	46bd      	mov	sp, r7
 8107206:	bd80      	pop	{r7, pc}

08107208 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8107208:	b580      	push	{r7, lr}
 810720a:	b082      	sub	sp, #8
 810720c:	af00      	add	r7, sp, #0
 810720e:	6078      	str	r0, [r7, #4]
 8107210:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8107212:	687b      	ldr	r3, [r7, #4]
 8107214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107216:	2b00      	cmp	r3, #0
 8107218:	d018      	beq.n	810724c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810721a:	687b      	ldr	r3, [r7, #4]
 810721c:	68da      	ldr	r2, [r3, #12]
 810721e:	687b      	ldr	r3, [r7, #4]
 8107220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107222:	441a      	add	r2, r3
 8107224:	687b      	ldr	r3, [r7, #4]
 8107226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8107228:	687b      	ldr	r3, [r7, #4]
 810722a:	68da      	ldr	r2, [r3, #12]
 810722c:	687b      	ldr	r3, [r7, #4]
 810722e:	689b      	ldr	r3, [r3, #8]
 8107230:	429a      	cmp	r2, r3
 8107232:	d303      	bcc.n	810723c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8107234:	687b      	ldr	r3, [r7, #4]
 8107236:	681a      	ldr	r2, [r3, #0]
 8107238:	687b      	ldr	r3, [r7, #4]
 810723a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810723c:	687b      	ldr	r3, [r7, #4]
 810723e:	68d9      	ldr	r1, [r3, #12]
 8107240:	687b      	ldr	r3, [r7, #4]
 8107242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107244:	461a      	mov	r2, r3
 8107246:	6838      	ldr	r0, [r7, #0]
 8107248:	f001 fb74 	bl	8108934 <memcpy>
	}
}
 810724c:	bf00      	nop
 810724e:	3708      	adds	r7, #8
 8107250:	46bd      	mov	sp, r7
 8107252:	bd80      	pop	{r7, pc}

08107254 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8107254:	b580      	push	{r7, lr}
 8107256:	b084      	sub	sp, #16
 8107258:	af00      	add	r7, sp, #0
 810725a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810725c:	f7ff fabc 	bl	81067d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8107260:	687b      	ldr	r3, [r7, #4]
 8107262:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8107266:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8107268:	e011      	b.n	810728e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810726a:	687b      	ldr	r3, [r7, #4]
 810726c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810726e:	2b00      	cmp	r3, #0
 8107270:	d012      	beq.n	8107298 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8107272:	687b      	ldr	r3, [r7, #4]
 8107274:	3324      	adds	r3, #36	@ 0x24
 8107276:	4618      	mov	r0, r3
 8107278:	f000 fd34 	bl	8107ce4 <xTaskRemoveFromEventList>
 810727c:	4603      	mov	r3, r0
 810727e:	2b00      	cmp	r3, #0
 8107280:	d001      	beq.n	8107286 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8107282:	f000 fe0d 	bl	8107ea0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8107286:	7bfb      	ldrb	r3, [r7, #15]
 8107288:	3b01      	subs	r3, #1
 810728a:	b2db      	uxtb	r3, r3
 810728c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810728e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8107292:	2b00      	cmp	r3, #0
 8107294:	dce9      	bgt.n	810726a <prvUnlockQueue+0x16>
 8107296:	e000      	b.n	810729a <prvUnlockQueue+0x46>
					break;
 8107298:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810729a:	687b      	ldr	r3, [r7, #4]
 810729c:	22ff      	movs	r2, #255	@ 0xff
 810729e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 81072a2:	f7ff facb 	bl	810683c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 81072a6:	f7ff fa97 	bl	81067d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 81072aa:	687b      	ldr	r3, [r7, #4]
 81072ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81072b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 81072b2:	e011      	b.n	81072d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81072b4:	687b      	ldr	r3, [r7, #4]
 81072b6:	691b      	ldr	r3, [r3, #16]
 81072b8:	2b00      	cmp	r3, #0
 81072ba:	d012      	beq.n	81072e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81072bc:	687b      	ldr	r3, [r7, #4]
 81072be:	3310      	adds	r3, #16
 81072c0:	4618      	mov	r0, r3
 81072c2:	f000 fd0f 	bl	8107ce4 <xTaskRemoveFromEventList>
 81072c6:	4603      	mov	r3, r0
 81072c8:	2b00      	cmp	r3, #0
 81072ca:	d001      	beq.n	81072d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 81072cc:	f000 fde8 	bl	8107ea0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 81072d0:	7bbb      	ldrb	r3, [r7, #14]
 81072d2:	3b01      	subs	r3, #1
 81072d4:	b2db      	uxtb	r3, r3
 81072d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 81072d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81072dc:	2b00      	cmp	r3, #0
 81072de:	dce9      	bgt.n	81072b4 <prvUnlockQueue+0x60>
 81072e0:	e000      	b.n	81072e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 81072e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 81072e4:	687b      	ldr	r3, [r7, #4]
 81072e6:	22ff      	movs	r2, #255	@ 0xff
 81072e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 81072ec:	f7ff faa6 	bl	810683c <vPortExitCritical>
}
 81072f0:	bf00      	nop
 81072f2:	3710      	adds	r7, #16
 81072f4:	46bd      	mov	sp, r7
 81072f6:	bd80      	pop	{r7, pc}

081072f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 81072f8:	b580      	push	{r7, lr}
 81072fa:	b084      	sub	sp, #16
 81072fc:	af00      	add	r7, sp, #0
 81072fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8107300:	f7ff fa6a 	bl	81067d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8107304:	687b      	ldr	r3, [r7, #4]
 8107306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107308:	2b00      	cmp	r3, #0
 810730a:	d102      	bne.n	8107312 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810730c:	2301      	movs	r3, #1
 810730e:	60fb      	str	r3, [r7, #12]
 8107310:	e001      	b.n	8107316 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8107312:	2300      	movs	r3, #0
 8107314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8107316:	f7ff fa91 	bl	810683c <vPortExitCritical>

	return xReturn;
 810731a:	68fb      	ldr	r3, [r7, #12]
}
 810731c:	4618      	mov	r0, r3
 810731e:	3710      	adds	r7, #16
 8107320:	46bd      	mov	sp, r7
 8107322:	bd80      	pop	{r7, pc}

08107324 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8107324:	b580      	push	{r7, lr}
 8107326:	b084      	sub	sp, #16
 8107328:	af00      	add	r7, sp, #0
 810732a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810732c:	f7ff fa54 	bl	81067d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8107334:	687b      	ldr	r3, [r7, #4]
 8107336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107338:	429a      	cmp	r2, r3
 810733a:	d102      	bne.n	8107342 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810733c:	2301      	movs	r3, #1
 810733e:	60fb      	str	r3, [r7, #12]
 8107340:	e001      	b.n	8107346 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8107342:	2300      	movs	r3, #0
 8107344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8107346:	f7ff fa79 	bl	810683c <vPortExitCritical>

	return xReturn;
 810734a:	68fb      	ldr	r3, [r7, #12]
}
 810734c:	4618      	mov	r0, r3
 810734e:	3710      	adds	r7, #16
 8107350:	46bd      	mov	sp, r7
 8107352:	bd80      	pop	{r7, pc}

08107354 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8107354:	b480      	push	{r7}
 8107356:	b085      	sub	sp, #20
 8107358:	af00      	add	r7, sp, #0
 810735a:	6078      	str	r0, [r7, #4]
 810735c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810735e:	2300      	movs	r3, #0
 8107360:	60fb      	str	r3, [r7, #12]
 8107362:	e014      	b.n	810738e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8107364:	4a0f      	ldr	r2, [pc, #60]	@ (81073a4 <vQueueAddToRegistry+0x50>)
 8107366:	68fb      	ldr	r3, [r7, #12]
 8107368:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810736c:	2b00      	cmp	r3, #0
 810736e:	d10b      	bne.n	8107388 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8107370:	490c      	ldr	r1, [pc, #48]	@ (81073a4 <vQueueAddToRegistry+0x50>)
 8107372:	68fb      	ldr	r3, [r7, #12]
 8107374:	683a      	ldr	r2, [r7, #0]
 8107376:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810737a:	4a0a      	ldr	r2, [pc, #40]	@ (81073a4 <vQueueAddToRegistry+0x50>)
 810737c:	68fb      	ldr	r3, [r7, #12]
 810737e:	00db      	lsls	r3, r3, #3
 8107380:	4413      	add	r3, r2
 8107382:	687a      	ldr	r2, [r7, #4]
 8107384:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8107386:	e006      	b.n	8107396 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8107388:	68fb      	ldr	r3, [r7, #12]
 810738a:	3301      	adds	r3, #1
 810738c:	60fb      	str	r3, [r7, #12]
 810738e:	68fb      	ldr	r3, [r7, #12]
 8107390:	2b07      	cmp	r3, #7
 8107392:	d9e7      	bls.n	8107364 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8107394:	bf00      	nop
 8107396:	bf00      	nop
 8107398:	3714      	adds	r7, #20
 810739a:	46bd      	mov	sp, r7
 810739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073a0:	4770      	bx	lr
 81073a2:	bf00      	nop
 81073a4:	10004408 	.word	0x10004408

081073a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81073a8:	b580      	push	{r7, lr}
 81073aa:	b086      	sub	sp, #24
 81073ac:	af00      	add	r7, sp, #0
 81073ae:	60f8      	str	r0, [r7, #12]
 81073b0:	60b9      	str	r1, [r7, #8]
 81073b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 81073b4:	68fb      	ldr	r3, [r7, #12]
 81073b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81073b8:	f7ff fa0e 	bl	81067d8 <vPortEnterCritical>
 81073bc:	697b      	ldr	r3, [r7, #20]
 81073be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81073c2:	b25b      	sxtb	r3, r3
 81073c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81073c8:	d103      	bne.n	81073d2 <vQueueWaitForMessageRestricted+0x2a>
 81073ca:	697b      	ldr	r3, [r7, #20]
 81073cc:	2200      	movs	r2, #0
 81073ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81073d2:	697b      	ldr	r3, [r7, #20]
 81073d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81073d8:	b25b      	sxtb	r3, r3
 81073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 81073de:	d103      	bne.n	81073e8 <vQueueWaitForMessageRestricted+0x40>
 81073e0:	697b      	ldr	r3, [r7, #20]
 81073e2:	2200      	movs	r2, #0
 81073e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81073e8:	f7ff fa28 	bl	810683c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 81073ec:	697b      	ldr	r3, [r7, #20]
 81073ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81073f0:	2b00      	cmp	r3, #0
 81073f2:	d106      	bne.n	8107402 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 81073f4:	697b      	ldr	r3, [r7, #20]
 81073f6:	3324      	adds	r3, #36	@ 0x24
 81073f8:	687a      	ldr	r2, [r7, #4]
 81073fa:	68b9      	ldr	r1, [r7, #8]
 81073fc:	4618      	mov	r0, r3
 81073fe:	f000 fc45 	bl	8107c8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8107402:	6978      	ldr	r0, [r7, #20]
 8107404:	f7ff ff26 	bl	8107254 <prvUnlockQueue>
	}
 8107408:	bf00      	nop
 810740a:	3718      	adds	r7, #24
 810740c:	46bd      	mov	sp, r7
 810740e:	bd80      	pop	{r7, pc}

08107410 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8107410:	b580      	push	{r7, lr}
 8107412:	b08e      	sub	sp, #56	@ 0x38
 8107414:	af04      	add	r7, sp, #16
 8107416:	60f8      	str	r0, [r7, #12]
 8107418:	60b9      	str	r1, [r7, #8]
 810741a:	607a      	str	r2, [r7, #4]
 810741c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810741e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107420:	2b00      	cmp	r3, #0
 8107422:	d10b      	bne.n	810743c <xTaskCreateStatic+0x2c>
	__asm volatile
 8107424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107428:	f383 8811 	msr	BASEPRI, r3
 810742c:	f3bf 8f6f 	isb	sy
 8107430:	f3bf 8f4f 	dsb	sy
 8107434:	623b      	str	r3, [r7, #32]
}
 8107436:	bf00      	nop
 8107438:	bf00      	nop
 810743a:	e7fd      	b.n	8107438 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810743c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810743e:	2b00      	cmp	r3, #0
 8107440:	d10b      	bne.n	810745a <xTaskCreateStatic+0x4a>
	__asm volatile
 8107442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107446:	f383 8811 	msr	BASEPRI, r3
 810744a:	f3bf 8f6f 	isb	sy
 810744e:	f3bf 8f4f 	dsb	sy
 8107452:	61fb      	str	r3, [r7, #28]
}
 8107454:	bf00      	nop
 8107456:	bf00      	nop
 8107458:	e7fd      	b.n	8107456 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810745a:	235c      	movs	r3, #92	@ 0x5c
 810745c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810745e:	693b      	ldr	r3, [r7, #16]
 8107460:	2b5c      	cmp	r3, #92	@ 0x5c
 8107462:	d00b      	beq.n	810747c <xTaskCreateStatic+0x6c>
	__asm volatile
 8107464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107468:	f383 8811 	msr	BASEPRI, r3
 810746c:	f3bf 8f6f 	isb	sy
 8107470:	f3bf 8f4f 	dsb	sy
 8107474:	61bb      	str	r3, [r7, #24]
}
 8107476:	bf00      	nop
 8107478:	bf00      	nop
 810747a:	e7fd      	b.n	8107478 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810747c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810747e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107480:	2b00      	cmp	r3, #0
 8107482:	d01e      	beq.n	81074c2 <xTaskCreateStatic+0xb2>
 8107484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107486:	2b00      	cmp	r3, #0
 8107488:	d01b      	beq.n	81074c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810748a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810748c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107490:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8107492:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8107494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107496:	2202      	movs	r2, #2
 8107498:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810749c:	2300      	movs	r3, #0
 810749e:	9303      	str	r3, [sp, #12]
 81074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81074a2:	9302      	str	r3, [sp, #8]
 81074a4:	f107 0314 	add.w	r3, r7, #20
 81074a8:	9301      	str	r3, [sp, #4]
 81074aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81074ac:	9300      	str	r3, [sp, #0]
 81074ae:	683b      	ldr	r3, [r7, #0]
 81074b0:	687a      	ldr	r2, [r7, #4]
 81074b2:	68b9      	ldr	r1, [r7, #8]
 81074b4:	68f8      	ldr	r0, [r7, #12]
 81074b6:	f000 f850 	bl	810755a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81074ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81074bc:	f000 f8de 	bl	810767c <prvAddNewTaskToReadyList>
 81074c0:	e001      	b.n	81074c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 81074c2:	2300      	movs	r3, #0
 81074c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 81074c6:	697b      	ldr	r3, [r7, #20]
	}
 81074c8:	4618      	mov	r0, r3
 81074ca:	3728      	adds	r7, #40	@ 0x28
 81074cc:	46bd      	mov	sp, r7
 81074ce:	bd80      	pop	{r7, pc}

081074d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 81074d0:	b580      	push	{r7, lr}
 81074d2:	b08c      	sub	sp, #48	@ 0x30
 81074d4:	af04      	add	r7, sp, #16
 81074d6:	60f8      	str	r0, [r7, #12]
 81074d8:	60b9      	str	r1, [r7, #8]
 81074da:	603b      	str	r3, [r7, #0]
 81074dc:	4613      	mov	r3, r2
 81074de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 81074e0:	88fb      	ldrh	r3, [r7, #6]
 81074e2:	009b      	lsls	r3, r3, #2
 81074e4:	4618      	mov	r0, r3
 81074e6:	f7fe fda1 	bl	810602c <pvPortMalloc>
 81074ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 81074ec:	697b      	ldr	r3, [r7, #20]
 81074ee:	2b00      	cmp	r3, #0
 81074f0:	d00e      	beq.n	8107510 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 81074f2:	205c      	movs	r0, #92	@ 0x5c
 81074f4:	f7fe fd9a 	bl	810602c <pvPortMalloc>
 81074f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 81074fa:	69fb      	ldr	r3, [r7, #28]
 81074fc:	2b00      	cmp	r3, #0
 81074fe:	d003      	beq.n	8107508 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8107500:	69fb      	ldr	r3, [r7, #28]
 8107502:	697a      	ldr	r2, [r7, #20]
 8107504:	631a      	str	r2, [r3, #48]	@ 0x30
 8107506:	e005      	b.n	8107514 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8107508:	6978      	ldr	r0, [r7, #20]
 810750a:	f7fe fe5d 	bl	81061c8 <vPortFree>
 810750e:	e001      	b.n	8107514 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8107510:	2300      	movs	r3, #0
 8107512:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8107514:	69fb      	ldr	r3, [r7, #28]
 8107516:	2b00      	cmp	r3, #0
 8107518:	d017      	beq.n	810754a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810751a:	69fb      	ldr	r3, [r7, #28]
 810751c:	2200      	movs	r2, #0
 810751e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8107522:	88fa      	ldrh	r2, [r7, #6]
 8107524:	2300      	movs	r3, #0
 8107526:	9303      	str	r3, [sp, #12]
 8107528:	69fb      	ldr	r3, [r7, #28]
 810752a:	9302      	str	r3, [sp, #8]
 810752c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810752e:	9301      	str	r3, [sp, #4]
 8107530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107532:	9300      	str	r3, [sp, #0]
 8107534:	683b      	ldr	r3, [r7, #0]
 8107536:	68b9      	ldr	r1, [r7, #8]
 8107538:	68f8      	ldr	r0, [r7, #12]
 810753a:	f000 f80e 	bl	810755a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810753e:	69f8      	ldr	r0, [r7, #28]
 8107540:	f000 f89c 	bl	810767c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8107544:	2301      	movs	r3, #1
 8107546:	61bb      	str	r3, [r7, #24]
 8107548:	e002      	b.n	8107550 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810754a:	f04f 33ff 	mov.w	r3, #4294967295
 810754e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8107550:	69bb      	ldr	r3, [r7, #24]
	}
 8107552:	4618      	mov	r0, r3
 8107554:	3720      	adds	r7, #32
 8107556:	46bd      	mov	sp, r7
 8107558:	bd80      	pop	{r7, pc}

0810755a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810755a:	b580      	push	{r7, lr}
 810755c:	b088      	sub	sp, #32
 810755e:	af00      	add	r7, sp, #0
 8107560:	60f8      	str	r0, [r7, #12]
 8107562:	60b9      	str	r1, [r7, #8]
 8107564:	607a      	str	r2, [r7, #4]
 8107566:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8107568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810756a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810756c:	687b      	ldr	r3, [r7, #4]
 810756e:	009b      	lsls	r3, r3, #2
 8107570:	461a      	mov	r2, r3
 8107572:	21a5      	movs	r1, #165	@ 0xa5
 8107574:	f001 f9b2 	bl	81088dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8107578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810757a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810757c:	687b      	ldr	r3, [r7, #4]
 810757e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8107582:	3b01      	subs	r3, #1
 8107584:	009b      	lsls	r3, r3, #2
 8107586:	4413      	add	r3, r2
 8107588:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810758a:	69bb      	ldr	r3, [r7, #24]
 810758c:	f023 0307 	bic.w	r3, r3, #7
 8107590:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8107592:	69bb      	ldr	r3, [r7, #24]
 8107594:	f003 0307 	and.w	r3, r3, #7
 8107598:	2b00      	cmp	r3, #0
 810759a:	d00b      	beq.n	81075b4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810759c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81075a0:	f383 8811 	msr	BASEPRI, r3
 81075a4:	f3bf 8f6f 	isb	sy
 81075a8:	f3bf 8f4f 	dsb	sy
 81075ac:	617b      	str	r3, [r7, #20]
}
 81075ae:	bf00      	nop
 81075b0:	bf00      	nop
 81075b2:	e7fd      	b.n	81075b0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 81075b4:	68bb      	ldr	r3, [r7, #8]
 81075b6:	2b00      	cmp	r3, #0
 81075b8:	d01f      	beq.n	81075fa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81075ba:	2300      	movs	r3, #0
 81075bc:	61fb      	str	r3, [r7, #28]
 81075be:	e012      	b.n	81075e6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 81075c0:	68ba      	ldr	r2, [r7, #8]
 81075c2:	69fb      	ldr	r3, [r7, #28]
 81075c4:	4413      	add	r3, r2
 81075c6:	7819      	ldrb	r1, [r3, #0]
 81075c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81075ca:	69fb      	ldr	r3, [r7, #28]
 81075cc:	4413      	add	r3, r2
 81075ce:	3334      	adds	r3, #52	@ 0x34
 81075d0:	460a      	mov	r2, r1
 81075d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 81075d4:	68ba      	ldr	r2, [r7, #8]
 81075d6:	69fb      	ldr	r3, [r7, #28]
 81075d8:	4413      	add	r3, r2
 81075da:	781b      	ldrb	r3, [r3, #0]
 81075dc:	2b00      	cmp	r3, #0
 81075de:	d006      	beq.n	81075ee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81075e0:	69fb      	ldr	r3, [r7, #28]
 81075e2:	3301      	adds	r3, #1
 81075e4:	61fb      	str	r3, [r7, #28]
 81075e6:	69fb      	ldr	r3, [r7, #28]
 81075e8:	2b0f      	cmp	r3, #15
 81075ea:	d9e9      	bls.n	81075c0 <prvInitialiseNewTask+0x66>
 81075ec:	e000      	b.n	81075f0 <prvInitialiseNewTask+0x96>
			{
				break;
 81075ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 81075f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81075f2:	2200      	movs	r2, #0
 81075f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 81075f8:	e003      	b.n	8107602 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 81075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81075fc:	2200      	movs	r2, #0
 81075fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8107602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107604:	2b37      	cmp	r3, #55	@ 0x37
 8107606:	d901      	bls.n	810760c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8107608:	2337      	movs	r3, #55	@ 0x37
 810760a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810760c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810760e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8107610:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8107612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107614:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8107616:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8107618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810761a:	2200      	movs	r2, #0
 810761c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810761e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107620:	3304      	adds	r3, #4
 8107622:	4618      	mov	r0, r3
 8107624:	f7fe ff10 	bl	8106448 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8107628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810762a:	3318      	adds	r3, #24
 810762c:	4618      	mov	r0, r3
 810762e:	f7fe ff0b 	bl	8106448 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8107632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107636:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810763a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107640:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8107642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107646:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8107648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810764a:	2200      	movs	r2, #0
 810764c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107650:	2200      	movs	r2, #0
 8107652:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8107656:	683a      	ldr	r2, [r7, #0]
 8107658:	68f9      	ldr	r1, [r7, #12]
 810765a:	69b8      	ldr	r0, [r7, #24]
 810765c:	f7fe ff88 	bl	8106570 <pxPortInitialiseStack>
 8107660:	4602      	mov	r2, r0
 8107662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107664:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8107666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107668:	2b00      	cmp	r3, #0
 810766a:	d002      	beq.n	8107672 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810766c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810766e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8107672:	bf00      	nop
 8107674:	3720      	adds	r7, #32
 8107676:	46bd      	mov	sp, r7
 8107678:	bd80      	pop	{r7, pc}
	...

0810767c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810767c:	b580      	push	{r7, lr}
 810767e:	b082      	sub	sp, #8
 8107680:	af00      	add	r7, sp, #0
 8107682:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8107684:	f7ff f8a8 	bl	81067d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8107688:	4b2d      	ldr	r3, [pc, #180]	@ (8107740 <prvAddNewTaskToReadyList+0xc4>)
 810768a:	681b      	ldr	r3, [r3, #0]
 810768c:	3301      	adds	r3, #1
 810768e:	4a2c      	ldr	r2, [pc, #176]	@ (8107740 <prvAddNewTaskToReadyList+0xc4>)
 8107690:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8107692:	4b2c      	ldr	r3, [pc, #176]	@ (8107744 <prvAddNewTaskToReadyList+0xc8>)
 8107694:	681b      	ldr	r3, [r3, #0]
 8107696:	2b00      	cmp	r3, #0
 8107698:	d109      	bne.n	81076ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810769a:	4a2a      	ldr	r2, [pc, #168]	@ (8107744 <prvAddNewTaskToReadyList+0xc8>)
 810769c:	687b      	ldr	r3, [r7, #4]
 810769e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81076a0:	4b27      	ldr	r3, [pc, #156]	@ (8107740 <prvAddNewTaskToReadyList+0xc4>)
 81076a2:	681b      	ldr	r3, [r3, #0]
 81076a4:	2b01      	cmp	r3, #1
 81076a6:	d110      	bne.n	81076ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 81076a8:	f000 fc1e 	bl	8107ee8 <prvInitialiseTaskLists>
 81076ac:	e00d      	b.n	81076ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 81076ae:	4b26      	ldr	r3, [pc, #152]	@ (8107748 <prvAddNewTaskToReadyList+0xcc>)
 81076b0:	681b      	ldr	r3, [r3, #0]
 81076b2:	2b00      	cmp	r3, #0
 81076b4:	d109      	bne.n	81076ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81076b6:	4b23      	ldr	r3, [pc, #140]	@ (8107744 <prvAddNewTaskToReadyList+0xc8>)
 81076b8:	681b      	ldr	r3, [r3, #0]
 81076ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81076bc:	687b      	ldr	r3, [r7, #4]
 81076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81076c0:	429a      	cmp	r2, r3
 81076c2:	d802      	bhi.n	81076ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81076c4:	4a1f      	ldr	r2, [pc, #124]	@ (8107744 <prvAddNewTaskToReadyList+0xc8>)
 81076c6:	687b      	ldr	r3, [r7, #4]
 81076c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81076ca:	4b20      	ldr	r3, [pc, #128]	@ (810774c <prvAddNewTaskToReadyList+0xd0>)
 81076cc:	681b      	ldr	r3, [r3, #0]
 81076ce:	3301      	adds	r3, #1
 81076d0:	4a1e      	ldr	r2, [pc, #120]	@ (810774c <prvAddNewTaskToReadyList+0xd0>)
 81076d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 81076d4:	4b1d      	ldr	r3, [pc, #116]	@ (810774c <prvAddNewTaskToReadyList+0xd0>)
 81076d6:	681a      	ldr	r2, [r3, #0]
 81076d8:	687b      	ldr	r3, [r7, #4]
 81076da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 81076dc:	687b      	ldr	r3, [r7, #4]
 81076de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81076e0:	4b1b      	ldr	r3, [pc, #108]	@ (8107750 <prvAddNewTaskToReadyList+0xd4>)
 81076e2:	681b      	ldr	r3, [r3, #0]
 81076e4:	429a      	cmp	r2, r3
 81076e6:	d903      	bls.n	81076f0 <prvAddNewTaskToReadyList+0x74>
 81076e8:	687b      	ldr	r3, [r7, #4]
 81076ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81076ec:	4a18      	ldr	r2, [pc, #96]	@ (8107750 <prvAddNewTaskToReadyList+0xd4>)
 81076ee:	6013      	str	r3, [r2, #0]
 81076f0:	687b      	ldr	r3, [r7, #4]
 81076f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81076f4:	4613      	mov	r3, r2
 81076f6:	009b      	lsls	r3, r3, #2
 81076f8:	4413      	add	r3, r2
 81076fa:	009b      	lsls	r3, r3, #2
 81076fc:	4a15      	ldr	r2, [pc, #84]	@ (8107754 <prvAddNewTaskToReadyList+0xd8>)
 81076fe:	441a      	add	r2, r3
 8107700:	687b      	ldr	r3, [r7, #4]
 8107702:	3304      	adds	r3, #4
 8107704:	4619      	mov	r1, r3
 8107706:	4610      	mov	r0, r2
 8107708:	f7fe feab 	bl	8106462 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810770c:	f7ff f896 	bl	810683c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8107710:	4b0d      	ldr	r3, [pc, #52]	@ (8107748 <prvAddNewTaskToReadyList+0xcc>)
 8107712:	681b      	ldr	r3, [r3, #0]
 8107714:	2b00      	cmp	r3, #0
 8107716:	d00e      	beq.n	8107736 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8107718:	4b0a      	ldr	r3, [pc, #40]	@ (8107744 <prvAddNewTaskToReadyList+0xc8>)
 810771a:	681b      	ldr	r3, [r3, #0]
 810771c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810771e:	687b      	ldr	r3, [r7, #4]
 8107720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107722:	429a      	cmp	r2, r3
 8107724:	d207      	bcs.n	8107736 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8107726:	4b0c      	ldr	r3, [pc, #48]	@ (8107758 <prvAddNewTaskToReadyList+0xdc>)
 8107728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810772c:	601a      	str	r2, [r3, #0]
 810772e:	f3bf 8f4f 	dsb	sy
 8107732:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8107736:	bf00      	nop
 8107738:	3708      	adds	r7, #8
 810773a:	46bd      	mov	sp, r7
 810773c:	bd80      	pop	{r7, pc}
 810773e:	bf00      	nop
 8107740:	1000491c 	.word	0x1000491c
 8107744:	10004448 	.word	0x10004448
 8107748:	10004928 	.word	0x10004928
 810774c:	10004938 	.word	0x10004938
 8107750:	10004924 	.word	0x10004924
 8107754:	1000444c 	.word	0x1000444c
 8107758:	e000ed04 	.word	0xe000ed04

0810775c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810775c:	b580      	push	{r7, lr}
 810775e:	b084      	sub	sp, #16
 8107760:	af00      	add	r7, sp, #0
 8107762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8107764:	2300      	movs	r3, #0
 8107766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8107768:	687b      	ldr	r3, [r7, #4]
 810776a:	2b00      	cmp	r3, #0
 810776c:	d018      	beq.n	81077a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810776e:	4b14      	ldr	r3, [pc, #80]	@ (81077c0 <vTaskDelay+0x64>)
 8107770:	681b      	ldr	r3, [r3, #0]
 8107772:	2b00      	cmp	r3, #0
 8107774:	d00b      	beq.n	810778e <vTaskDelay+0x32>
	__asm volatile
 8107776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810777a:	f383 8811 	msr	BASEPRI, r3
 810777e:	f3bf 8f6f 	isb	sy
 8107782:	f3bf 8f4f 	dsb	sy
 8107786:	60bb      	str	r3, [r7, #8]
}
 8107788:	bf00      	nop
 810778a:	bf00      	nop
 810778c:	e7fd      	b.n	810778a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810778e:	f000 f883 	bl	8107898 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8107792:	2100      	movs	r1, #0
 8107794:	6878      	ldr	r0, [r7, #4]
 8107796:	f000 fcf3 	bl	8108180 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810779a:	f000 f88b 	bl	81078b4 <xTaskResumeAll>
 810779e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81077a0:	68fb      	ldr	r3, [r7, #12]
 81077a2:	2b00      	cmp	r3, #0
 81077a4:	d107      	bne.n	81077b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 81077a6:	4b07      	ldr	r3, [pc, #28]	@ (81077c4 <vTaskDelay+0x68>)
 81077a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81077ac:	601a      	str	r2, [r3, #0]
 81077ae:	f3bf 8f4f 	dsb	sy
 81077b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81077b6:	bf00      	nop
 81077b8:	3710      	adds	r7, #16
 81077ba:	46bd      	mov	sp, r7
 81077bc:	bd80      	pop	{r7, pc}
 81077be:	bf00      	nop
 81077c0:	10004944 	.word	0x10004944
 81077c4:	e000ed04 	.word	0xe000ed04

081077c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 81077c8:	b580      	push	{r7, lr}
 81077ca:	b08a      	sub	sp, #40	@ 0x28
 81077cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 81077ce:	2300      	movs	r3, #0
 81077d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 81077d2:	2300      	movs	r3, #0
 81077d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 81077d6:	463a      	mov	r2, r7
 81077d8:	1d39      	adds	r1, r7, #4
 81077da:	f107 0308 	add.w	r3, r7, #8
 81077de:	4618      	mov	r0, r3
 81077e0:	f7fe fbf0 	bl	8105fc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 81077e4:	6839      	ldr	r1, [r7, #0]
 81077e6:	687b      	ldr	r3, [r7, #4]
 81077e8:	68ba      	ldr	r2, [r7, #8]
 81077ea:	9202      	str	r2, [sp, #8]
 81077ec:	9301      	str	r3, [sp, #4]
 81077ee:	2300      	movs	r3, #0
 81077f0:	9300      	str	r3, [sp, #0]
 81077f2:	2300      	movs	r3, #0
 81077f4:	460a      	mov	r2, r1
 81077f6:	4922      	ldr	r1, [pc, #136]	@ (8107880 <vTaskStartScheduler+0xb8>)
 81077f8:	4822      	ldr	r0, [pc, #136]	@ (8107884 <vTaskStartScheduler+0xbc>)
 81077fa:	f7ff fe09 	bl	8107410 <xTaskCreateStatic>
 81077fe:	4603      	mov	r3, r0
 8107800:	4a21      	ldr	r2, [pc, #132]	@ (8107888 <vTaskStartScheduler+0xc0>)
 8107802:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8107804:	4b20      	ldr	r3, [pc, #128]	@ (8107888 <vTaskStartScheduler+0xc0>)
 8107806:	681b      	ldr	r3, [r3, #0]
 8107808:	2b00      	cmp	r3, #0
 810780a:	d002      	beq.n	8107812 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810780c:	2301      	movs	r3, #1
 810780e:	617b      	str	r3, [r7, #20]
 8107810:	e001      	b.n	8107816 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8107812:	2300      	movs	r3, #0
 8107814:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8107816:	697b      	ldr	r3, [r7, #20]
 8107818:	2b01      	cmp	r3, #1
 810781a:	d102      	bne.n	8107822 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810781c:	f000 fd04 	bl	8108228 <xTimerCreateTimerTask>
 8107820:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8107822:	697b      	ldr	r3, [r7, #20]
 8107824:	2b01      	cmp	r3, #1
 8107826:	d116      	bne.n	8107856 <vTaskStartScheduler+0x8e>
	__asm volatile
 8107828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810782c:	f383 8811 	msr	BASEPRI, r3
 8107830:	f3bf 8f6f 	isb	sy
 8107834:	f3bf 8f4f 	dsb	sy
 8107838:	613b      	str	r3, [r7, #16]
}
 810783a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810783c:	4b13      	ldr	r3, [pc, #76]	@ (810788c <vTaskStartScheduler+0xc4>)
 810783e:	f04f 32ff 	mov.w	r2, #4294967295
 8107842:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8107844:	4b12      	ldr	r3, [pc, #72]	@ (8107890 <vTaskStartScheduler+0xc8>)
 8107846:	2201      	movs	r2, #1
 8107848:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810784a:	4b12      	ldr	r3, [pc, #72]	@ (8107894 <vTaskStartScheduler+0xcc>)
 810784c:	2200      	movs	r2, #0
 810784e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8107850:	f7fe ff1e 	bl	8106690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8107854:	e00f      	b.n	8107876 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8107856:	697b      	ldr	r3, [r7, #20]
 8107858:	f1b3 3fff 	cmp.w	r3, #4294967295
 810785c:	d10b      	bne.n	8107876 <vTaskStartScheduler+0xae>
	__asm volatile
 810785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107862:	f383 8811 	msr	BASEPRI, r3
 8107866:	f3bf 8f6f 	isb	sy
 810786a:	f3bf 8f4f 	dsb	sy
 810786e:	60fb      	str	r3, [r7, #12]
}
 8107870:	bf00      	nop
 8107872:	bf00      	nop
 8107874:	e7fd      	b.n	8107872 <vTaskStartScheduler+0xaa>
}
 8107876:	bf00      	nop
 8107878:	3718      	adds	r7, #24
 810787a:	46bd      	mov	sp, r7
 810787c:	bd80      	pop	{r7, pc}
 810787e:	bf00      	nop
 8107880:	08108990 	.word	0x08108990
 8107884:	08107eb9 	.word	0x08107eb9
 8107888:	10004940 	.word	0x10004940
 810788c:	1000493c 	.word	0x1000493c
 8107890:	10004928 	.word	0x10004928
 8107894:	10004920 	.word	0x10004920

08107898 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8107898:	b480      	push	{r7}
 810789a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810789c:	4b04      	ldr	r3, [pc, #16]	@ (81078b0 <vTaskSuspendAll+0x18>)
 810789e:	681b      	ldr	r3, [r3, #0]
 81078a0:	3301      	adds	r3, #1
 81078a2:	4a03      	ldr	r2, [pc, #12]	@ (81078b0 <vTaskSuspendAll+0x18>)
 81078a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 81078a6:	bf00      	nop
 81078a8:	46bd      	mov	sp, r7
 81078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078ae:	4770      	bx	lr
 81078b0:	10004944 	.word	0x10004944

081078b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81078b4:	b580      	push	{r7, lr}
 81078b6:	b084      	sub	sp, #16
 81078b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81078ba:	2300      	movs	r3, #0
 81078bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81078be:	2300      	movs	r3, #0
 81078c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 81078c2:	4b42      	ldr	r3, [pc, #264]	@ (81079cc <xTaskResumeAll+0x118>)
 81078c4:	681b      	ldr	r3, [r3, #0]
 81078c6:	2b00      	cmp	r3, #0
 81078c8:	d10b      	bne.n	81078e2 <xTaskResumeAll+0x2e>
	__asm volatile
 81078ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81078ce:	f383 8811 	msr	BASEPRI, r3
 81078d2:	f3bf 8f6f 	isb	sy
 81078d6:	f3bf 8f4f 	dsb	sy
 81078da:	603b      	str	r3, [r7, #0]
}
 81078dc:	bf00      	nop
 81078de:	bf00      	nop
 81078e0:	e7fd      	b.n	81078de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 81078e2:	f7fe ff79 	bl	81067d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 81078e6:	4b39      	ldr	r3, [pc, #228]	@ (81079cc <xTaskResumeAll+0x118>)
 81078e8:	681b      	ldr	r3, [r3, #0]
 81078ea:	3b01      	subs	r3, #1
 81078ec:	4a37      	ldr	r2, [pc, #220]	@ (81079cc <xTaskResumeAll+0x118>)
 81078ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81078f0:	4b36      	ldr	r3, [pc, #216]	@ (81079cc <xTaskResumeAll+0x118>)
 81078f2:	681b      	ldr	r3, [r3, #0]
 81078f4:	2b00      	cmp	r3, #0
 81078f6:	d162      	bne.n	81079be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81078f8:	4b35      	ldr	r3, [pc, #212]	@ (81079d0 <xTaskResumeAll+0x11c>)
 81078fa:	681b      	ldr	r3, [r3, #0]
 81078fc:	2b00      	cmp	r3, #0
 81078fe:	d05e      	beq.n	81079be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8107900:	e02f      	b.n	8107962 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107902:	4b34      	ldr	r3, [pc, #208]	@ (81079d4 <xTaskResumeAll+0x120>)
 8107904:	68db      	ldr	r3, [r3, #12]
 8107906:	68db      	ldr	r3, [r3, #12]
 8107908:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810790a:	68fb      	ldr	r3, [r7, #12]
 810790c:	3318      	adds	r3, #24
 810790e:	4618      	mov	r0, r3
 8107910:	f7fe fe04 	bl	810651c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107914:	68fb      	ldr	r3, [r7, #12]
 8107916:	3304      	adds	r3, #4
 8107918:	4618      	mov	r0, r3
 810791a:	f7fe fdff 	bl	810651c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810791e:	68fb      	ldr	r3, [r7, #12]
 8107920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107922:	4b2d      	ldr	r3, [pc, #180]	@ (81079d8 <xTaskResumeAll+0x124>)
 8107924:	681b      	ldr	r3, [r3, #0]
 8107926:	429a      	cmp	r2, r3
 8107928:	d903      	bls.n	8107932 <xTaskResumeAll+0x7e>
 810792a:	68fb      	ldr	r3, [r7, #12]
 810792c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810792e:	4a2a      	ldr	r2, [pc, #168]	@ (81079d8 <xTaskResumeAll+0x124>)
 8107930:	6013      	str	r3, [r2, #0]
 8107932:	68fb      	ldr	r3, [r7, #12]
 8107934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107936:	4613      	mov	r3, r2
 8107938:	009b      	lsls	r3, r3, #2
 810793a:	4413      	add	r3, r2
 810793c:	009b      	lsls	r3, r3, #2
 810793e:	4a27      	ldr	r2, [pc, #156]	@ (81079dc <xTaskResumeAll+0x128>)
 8107940:	441a      	add	r2, r3
 8107942:	68fb      	ldr	r3, [r7, #12]
 8107944:	3304      	adds	r3, #4
 8107946:	4619      	mov	r1, r3
 8107948:	4610      	mov	r0, r2
 810794a:	f7fe fd8a 	bl	8106462 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810794e:	68fb      	ldr	r3, [r7, #12]
 8107950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107952:	4b23      	ldr	r3, [pc, #140]	@ (81079e0 <xTaskResumeAll+0x12c>)
 8107954:	681b      	ldr	r3, [r3, #0]
 8107956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107958:	429a      	cmp	r2, r3
 810795a:	d302      	bcc.n	8107962 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810795c:	4b21      	ldr	r3, [pc, #132]	@ (81079e4 <xTaskResumeAll+0x130>)
 810795e:	2201      	movs	r2, #1
 8107960:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8107962:	4b1c      	ldr	r3, [pc, #112]	@ (81079d4 <xTaskResumeAll+0x120>)
 8107964:	681b      	ldr	r3, [r3, #0]
 8107966:	2b00      	cmp	r3, #0
 8107968:	d1cb      	bne.n	8107902 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810796a:	68fb      	ldr	r3, [r7, #12]
 810796c:	2b00      	cmp	r3, #0
 810796e:	d001      	beq.n	8107974 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8107970:	f000 fb58 	bl	8108024 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8107974:	4b1c      	ldr	r3, [pc, #112]	@ (81079e8 <xTaskResumeAll+0x134>)
 8107976:	681b      	ldr	r3, [r3, #0]
 8107978:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810797a:	687b      	ldr	r3, [r7, #4]
 810797c:	2b00      	cmp	r3, #0
 810797e:	d010      	beq.n	81079a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8107980:	f000 f846 	bl	8107a10 <xTaskIncrementTick>
 8107984:	4603      	mov	r3, r0
 8107986:	2b00      	cmp	r3, #0
 8107988:	d002      	beq.n	8107990 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810798a:	4b16      	ldr	r3, [pc, #88]	@ (81079e4 <xTaskResumeAll+0x130>)
 810798c:	2201      	movs	r2, #1
 810798e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8107990:	687b      	ldr	r3, [r7, #4]
 8107992:	3b01      	subs	r3, #1
 8107994:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8107996:	687b      	ldr	r3, [r7, #4]
 8107998:	2b00      	cmp	r3, #0
 810799a:	d1f1      	bne.n	8107980 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810799c:	4b12      	ldr	r3, [pc, #72]	@ (81079e8 <xTaskResumeAll+0x134>)
 810799e:	2200      	movs	r2, #0
 81079a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 81079a2:	4b10      	ldr	r3, [pc, #64]	@ (81079e4 <xTaskResumeAll+0x130>)
 81079a4:	681b      	ldr	r3, [r3, #0]
 81079a6:	2b00      	cmp	r3, #0
 81079a8:	d009      	beq.n	81079be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81079aa:	2301      	movs	r3, #1
 81079ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81079ae:	4b0f      	ldr	r3, [pc, #60]	@ (81079ec <xTaskResumeAll+0x138>)
 81079b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81079b4:	601a      	str	r2, [r3, #0]
 81079b6:	f3bf 8f4f 	dsb	sy
 81079ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81079be:	f7fe ff3d 	bl	810683c <vPortExitCritical>

	return xAlreadyYielded;
 81079c2:	68bb      	ldr	r3, [r7, #8]
}
 81079c4:	4618      	mov	r0, r3
 81079c6:	3710      	adds	r7, #16
 81079c8:	46bd      	mov	sp, r7
 81079ca:	bd80      	pop	{r7, pc}
 81079cc:	10004944 	.word	0x10004944
 81079d0:	1000491c 	.word	0x1000491c
 81079d4:	100048dc 	.word	0x100048dc
 81079d8:	10004924 	.word	0x10004924
 81079dc:	1000444c 	.word	0x1000444c
 81079e0:	10004448 	.word	0x10004448
 81079e4:	10004930 	.word	0x10004930
 81079e8:	1000492c 	.word	0x1000492c
 81079ec:	e000ed04 	.word	0xe000ed04

081079f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 81079f0:	b480      	push	{r7}
 81079f2:	b083      	sub	sp, #12
 81079f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 81079f6:	4b05      	ldr	r3, [pc, #20]	@ (8107a0c <xTaskGetTickCount+0x1c>)
 81079f8:	681b      	ldr	r3, [r3, #0]
 81079fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 81079fc:	687b      	ldr	r3, [r7, #4]
}
 81079fe:	4618      	mov	r0, r3
 8107a00:	370c      	adds	r7, #12
 8107a02:	46bd      	mov	sp, r7
 8107a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a08:	4770      	bx	lr
 8107a0a:	bf00      	nop
 8107a0c:	10004920 	.word	0x10004920

08107a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8107a10:	b580      	push	{r7, lr}
 8107a12:	b086      	sub	sp, #24
 8107a14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8107a16:	2300      	movs	r3, #0
 8107a18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8107b58 <xTaskIncrementTick+0x148>)
 8107a1c:	681b      	ldr	r3, [r3, #0]
 8107a1e:	2b00      	cmp	r3, #0
 8107a20:	f040 8090 	bne.w	8107b44 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8107a24:	4b4d      	ldr	r3, [pc, #308]	@ (8107b5c <xTaskIncrementTick+0x14c>)
 8107a26:	681b      	ldr	r3, [r3, #0]
 8107a28:	3301      	adds	r3, #1
 8107a2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8107a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8107b5c <xTaskIncrementTick+0x14c>)
 8107a2e:	693b      	ldr	r3, [r7, #16]
 8107a30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8107a32:	693b      	ldr	r3, [r7, #16]
 8107a34:	2b00      	cmp	r3, #0
 8107a36:	d121      	bne.n	8107a7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8107a38:	4b49      	ldr	r3, [pc, #292]	@ (8107b60 <xTaskIncrementTick+0x150>)
 8107a3a:	681b      	ldr	r3, [r3, #0]
 8107a3c:	681b      	ldr	r3, [r3, #0]
 8107a3e:	2b00      	cmp	r3, #0
 8107a40:	d00b      	beq.n	8107a5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8107a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107a46:	f383 8811 	msr	BASEPRI, r3
 8107a4a:	f3bf 8f6f 	isb	sy
 8107a4e:	f3bf 8f4f 	dsb	sy
 8107a52:	603b      	str	r3, [r7, #0]
}
 8107a54:	bf00      	nop
 8107a56:	bf00      	nop
 8107a58:	e7fd      	b.n	8107a56 <xTaskIncrementTick+0x46>
 8107a5a:	4b41      	ldr	r3, [pc, #260]	@ (8107b60 <xTaskIncrementTick+0x150>)
 8107a5c:	681b      	ldr	r3, [r3, #0]
 8107a5e:	60fb      	str	r3, [r7, #12]
 8107a60:	4b40      	ldr	r3, [pc, #256]	@ (8107b64 <xTaskIncrementTick+0x154>)
 8107a62:	681b      	ldr	r3, [r3, #0]
 8107a64:	4a3e      	ldr	r2, [pc, #248]	@ (8107b60 <xTaskIncrementTick+0x150>)
 8107a66:	6013      	str	r3, [r2, #0]
 8107a68:	4a3e      	ldr	r2, [pc, #248]	@ (8107b64 <xTaskIncrementTick+0x154>)
 8107a6a:	68fb      	ldr	r3, [r7, #12]
 8107a6c:	6013      	str	r3, [r2, #0]
 8107a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8107b68 <xTaskIncrementTick+0x158>)
 8107a70:	681b      	ldr	r3, [r3, #0]
 8107a72:	3301      	adds	r3, #1
 8107a74:	4a3c      	ldr	r2, [pc, #240]	@ (8107b68 <xTaskIncrementTick+0x158>)
 8107a76:	6013      	str	r3, [r2, #0]
 8107a78:	f000 fad4 	bl	8108024 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8107a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8107b6c <xTaskIncrementTick+0x15c>)
 8107a7e:	681b      	ldr	r3, [r3, #0]
 8107a80:	693a      	ldr	r2, [r7, #16]
 8107a82:	429a      	cmp	r2, r3
 8107a84:	d349      	bcc.n	8107b1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107a86:	4b36      	ldr	r3, [pc, #216]	@ (8107b60 <xTaskIncrementTick+0x150>)
 8107a88:	681b      	ldr	r3, [r3, #0]
 8107a8a:	681b      	ldr	r3, [r3, #0]
 8107a8c:	2b00      	cmp	r3, #0
 8107a8e:	d104      	bne.n	8107a9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107a90:	4b36      	ldr	r3, [pc, #216]	@ (8107b6c <xTaskIncrementTick+0x15c>)
 8107a92:	f04f 32ff 	mov.w	r2, #4294967295
 8107a96:	601a      	str	r2, [r3, #0]
					break;
 8107a98:	e03f      	b.n	8107b1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107a9a:	4b31      	ldr	r3, [pc, #196]	@ (8107b60 <xTaskIncrementTick+0x150>)
 8107a9c:	681b      	ldr	r3, [r3, #0]
 8107a9e:	68db      	ldr	r3, [r3, #12]
 8107aa0:	68db      	ldr	r3, [r3, #12]
 8107aa2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8107aa4:	68bb      	ldr	r3, [r7, #8]
 8107aa6:	685b      	ldr	r3, [r3, #4]
 8107aa8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8107aaa:	693a      	ldr	r2, [r7, #16]
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	429a      	cmp	r2, r3
 8107ab0:	d203      	bcs.n	8107aba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8107ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8107b6c <xTaskIncrementTick+0x15c>)
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8107ab8:	e02f      	b.n	8107b1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107aba:	68bb      	ldr	r3, [r7, #8]
 8107abc:	3304      	adds	r3, #4
 8107abe:	4618      	mov	r0, r3
 8107ac0:	f7fe fd2c 	bl	810651c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8107ac4:	68bb      	ldr	r3, [r7, #8]
 8107ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107ac8:	2b00      	cmp	r3, #0
 8107aca:	d004      	beq.n	8107ad6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107acc:	68bb      	ldr	r3, [r7, #8]
 8107ace:	3318      	adds	r3, #24
 8107ad0:	4618      	mov	r0, r3
 8107ad2:	f7fe fd23 	bl	810651c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8107ad6:	68bb      	ldr	r3, [r7, #8]
 8107ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107ada:	4b25      	ldr	r3, [pc, #148]	@ (8107b70 <xTaskIncrementTick+0x160>)
 8107adc:	681b      	ldr	r3, [r3, #0]
 8107ade:	429a      	cmp	r2, r3
 8107ae0:	d903      	bls.n	8107aea <xTaskIncrementTick+0xda>
 8107ae2:	68bb      	ldr	r3, [r7, #8]
 8107ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107ae6:	4a22      	ldr	r2, [pc, #136]	@ (8107b70 <xTaskIncrementTick+0x160>)
 8107ae8:	6013      	str	r3, [r2, #0]
 8107aea:	68bb      	ldr	r3, [r7, #8]
 8107aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107aee:	4613      	mov	r3, r2
 8107af0:	009b      	lsls	r3, r3, #2
 8107af2:	4413      	add	r3, r2
 8107af4:	009b      	lsls	r3, r3, #2
 8107af6:	4a1f      	ldr	r2, [pc, #124]	@ (8107b74 <xTaskIncrementTick+0x164>)
 8107af8:	441a      	add	r2, r3
 8107afa:	68bb      	ldr	r3, [r7, #8]
 8107afc:	3304      	adds	r3, #4
 8107afe:	4619      	mov	r1, r3
 8107b00:	4610      	mov	r0, r2
 8107b02:	f7fe fcae 	bl	8106462 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8107b06:	68bb      	ldr	r3, [r7, #8]
 8107b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8107b78 <xTaskIncrementTick+0x168>)
 8107b0c:	681b      	ldr	r3, [r3, #0]
 8107b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107b10:	429a      	cmp	r2, r3
 8107b12:	d3b8      	bcc.n	8107a86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8107b14:	2301      	movs	r3, #1
 8107b16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107b18:	e7b5      	b.n	8107a86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8107b1a:	4b17      	ldr	r3, [pc, #92]	@ (8107b78 <xTaskIncrementTick+0x168>)
 8107b1c:	681b      	ldr	r3, [r3, #0]
 8107b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107b20:	4914      	ldr	r1, [pc, #80]	@ (8107b74 <xTaskIncrementTick+0x164>)
 8107b22:	4613      	mov	r3, r2
 8107b24:	009b      	lsls	r3, r3, #2
 8107b26:	4413      	add	r3, r2
 8107b28:	009b      	lsls	r3, r3, #2
 8107b2a:	440b      	add	r3, r1
 8107b2c:	681b      	ldr	r3, [r3, #0]
 8107b2e:	2b01      	cmp	r3, #1
 8107b30:	d901      	bls.n	8107b36 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8107b32:	2301      	movs	r3, #1
 8107b34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8107b36:	4b11      	ldr	r3, [pc, #68]	@ (8107b7c <xTaskIncrementTick+0x16c>)
 8107b38:	681b      	ldr	r3, [r3, #0]
 8107b3a:	2b00      	cmp	r3, #0
 8107b3c:	d007      	beq.n	8107b4e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8107b3e:	2301      	movs	r3, #1
 8107b40:	617b      	str	r3, [r7, #20]
 8107b42:	e004      	b.n	8107b4e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8107b44:	4b0e      	ldr	r3, [pc, #56]	@ (8107b80 <xTaskIncrementTick+0x170>)
 8107b46:	681b      	ldr	r3, [r3, #0]
 8107b48:	3301      	adds	r3, #1
 8107b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8107b80 <xTaskIncrementTick+0x170>)
 8107b4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8107b4e:	697b      	ldr	r3, [r7, #20]
}
 8107b50:	4618      	mov	r0, r3
 8107b52:	3718      	adds	r7, #24
 8107b54:	46bd      	mov	sp, r7
 8107b56:	bd80      	pop	{r7, pc}
 8107b58:	10004944 	.word	0x10004944
 8107b5c:	10004920 	.word	0x10004920
 8107b60:	100048d4 	.word	0x100048d4
 8107b64:	100048d8 	.word	0x100048d8
 8107b68:	10004934 	.word	0x10004934
 8107b6c:	1000493c 	.word	0x1000493c
 8107b70:	10004924 	.word	0x10004924
 8107b74:	1000444c 	.word	0x1000444c
 8107b78:	10004448 	.word	0x10004448
 8107b7c:	10004930 	.word	0x10004930
 8107b80:	1000492c 	.word	0x1000492c

08107b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8107b84:	b480      	push	{r7}
 8107b86:	b085      	sub	sp, #20
 8107b88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8107b8a:	4b28      	ldr	r3, [pc, #160]	@ (8107c2c <vTaskSwitchContext+0xa8>)
 8107b8c:	681b      	ldr	r3, [r3, #0]
 8107b8e:	2b00      	cmp	r3, #0
 8107b90:	d003      	beq.n	8107b9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8107b92:	4b27      	ldr	r3, [pc, #156]	@ (8107c30 <vTaskSwitchContext+0xac>)
 8107b94:	2201      	movs	r2, #1
 8107b96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8107b98:	e042      	b.n	8107c20 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8107b9a:	4b25      	ldr	r3, [pc, #148]	@ (8107c30 <vTaskSwitchContext+0xac>)
 8107b9c:	2200      	movs	r2, #0
 8107b9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107ba0:	4b24      	ldr	r3, [pc, #144]	@ (8107c34 <vTaskSwitchContext+0xb0>)
 8107ba2:	681b      	ldr	r3, [r3, #0]
 8107ba4:	60fb      	str	r3, [r7, #12]
 8107ba6:	e011      	b.n	8107bcc <vTaskSwitchContext+0x48>
 8107ba8:	68fb      	ldr	r3, [r7, #12]
 8107baa:	2b00      	cmp	r3, #0
 8107bac:	d10b      	bne.n	8107bc6 <vTaskSwitchContext+0x42>
	__asm volatile
 8107bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107bb2:	f383 8811 	msr	BASEPRI, r3
 8107bb6:	f3bf 8f6f 	isb	sy
 8107bba:	f3bf 8f4f 	dsb	sy
 8107bbe:	607b      	str	r3, [r7, #4]
}
 8107bc0:	bf00      	nop
 8107bc2:	bf00      	nop
 8107bc4:	e7fd      	b.n	8107bc2 <vTaskSwitchContext+0x3e>
 8107bc6:	68fb      	ldr	r3, [r7, #12]
 8107bc8:	3b01      	subs	r3, #1
 8107bca:	60fb      	str	r3, [r7, #12]
 8107bcc:	491a      	ldr	r1, [pc, #104]	@ (8107c38 <vTaskSwitchContext+0xb4>)
 8107bce:	68fa      	ldr	r2, [r7, #12]
 8107bd0:	4613      	mov	r3, r2
 8107bd2:	009b      	lsls	r3, r3, #2
 8107bd4:	4413      	add	r3, r2
 8107bd6:	009b      	lsls	r3, r3, #2
 8107bd8:	440b      	add	r3, r1
 8107bda:	681b      	ldr	r3, [r3, #0]
 8107bdc:	2b00      	cmp	r3, #0
 8107bde:	d0e3      	beq.n	8107ba8 <vTaskSwitchContext+0x24>
 8107be0:	68fa      	ldr	r2, [r7, #12]
 8107be2:	4613      	mov	r3, r2
 8107be4:	009b      	lsls	r3, r3, #2
 8107be6:	4413      	add	r3, r2
 8107be8:	009b      	lsls	r3, r3, #2
 8107bea:	4a13      	ldr	r2, [pc, #76]	@ (8107c38 <vTaskSwitchContext+0xb4>)
 8107bec:	4413      	add	r3, r2
 8107bee:	60bb      	str	r3, [r7, #8]
 8107bf0:	68bb      	ldr	r3, [r7, #8]
 8107bf2:	685b      	ldr	r3, [r3, #4]
 8107bf4:	685a      	ldr	r2, [r3, #4]
 8107bf6:	68bb      	ldr	r3, [r7, #8]
 8107bf8:	605a      	str	r2, [r3, #4]
 8107bfa:	68bb      	ldr	r3, [r7, #8]
 8107bfc:	685a      	ldr	r2, [r3, #4]
 8107bfe:	68bb      	ldr	r3, [r7, #8]
 8107c00:	3308      	adds	r3, #8
 8107c02:	429a      	cmp	r2, r3
 8107c04:	d104      	bne.n	8107c10 <vTaskSwitchContext+0x8c>
 8107c06:	68bb      	ldr	r3, [r7, #8]
 8107c08:	685b      	ldr	r3, [r3, #4]
 8107c0a:	685a      	ldr	r2, [r3, #4]
 8107c0c:	68bb      	ldr	r3, [r7, #8]
 8107c0e:	605a      	str	r2, [r3, #4]
 8107c10:	68bb      	ldr	r3, [r7, #8]
 8107c12:	685b      	ldr	r3, [r3, #4]
 8107c14:	68db      	ldr	r3, [r3, #12]
 8107c16:	4a09      	ldr	r2, [pc, #36]	@ (8107c3c <vTaskSwitchContext+0xb8>)
 8107c18:	6013      	str	r3, [r2, #0]
 8107c1a:	4a06      	ldr	r2, [pc, #24]	@ (8107c34 <vTaskSwitchContext+0xb0>)
 8107c1c:	68fb      	ldr	r3, [r7, #12]
 8107c1e:	6013      	str	r3, [r2, #0]
}
 8107c20:	bf00      	nop
 8107c22:	3714      	adds	r7, #20
 8107c24:	46bd      	mov	sp, r7
 8107c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c2a:	4770      	bx	lr
 8107c2c:	10004944 	.word	0x10004944
 8107c30:	10004930 	.word	0x10004930
 8107c34:	10004924 	.word	0x10004924
 8107c38:	1000444c 	.word	0x1000444c
 8107c3c:	10004448 	.word	0x10004448

08107c40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8107c40:	b580      	push	{r7, lr}
 8107c42:	b084      	sub	sp, #16
 8107c44:	af00      	add	r7, sp, #0
 8107c46:	6078      	str	r0, [r7, #4]
 8107c48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	2b00      	cmp	r3, #0
 8107c4e:	d10b      	bne.n	8107c68 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8107c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107c54:	f383 8811 	msr	BASEPRI, r3
 8107c58:	f3bf 8f6f 	isb	sy
 8107c5c:	f3bf 8f4f 	dsb	sy
 8107c60:	60fb      	str	r3, [r7, #12]
}
 8107c62:	bf00      	nop
 8107c64:	bf00      	nop
 8107c66:	e7fd      	b.n	8107c64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8107c68:	4b07      	ldr	r3, [pc, #28]	@ (8107c88 <vTaskPlaceOnEventList+0x48>)
 8107c6a:	681b      	ldr	r3, [r3, #0]
 8107c6c:	3318      	adds	r3, #24
 8107c6e:	4619      	mov	r1, r3
 8107c70:	6878      	ldr	r0, [r7, #4]
 8107c72:	f7fe fc1a 	bl	81064aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8107c76:	2101      	movs	r1, #1
 8107c78:	6838      	ldr	r0, [r7, #0]
 8107c7a:	f000 fa81 	bl	8108180 <prvAddCurrentTaskToDelayedList>
}
 8107c7e:	bf00      	nop
 8107c80:	3710      	adds	r7, #16
 8107c82:	46bd      	mov	sp, r7
 8107c84:	bd80      	pop	{r7, pc}
 8107c86:	bf00      	nop
 8107c88:	10004448 	.word	0x10004448

08107c8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8107c8c:	b580      	push	{r7, lr}
 8107c8e:	b086      	sub	sp, #24
 8107c90:	af00      	add	r7, sp, #0
 8107c92:	60f8      	str	r0, [r7, #12]
 8107c94:	60b9      	str	r1, [r7, #8]
 8107c96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8107c98:	68fb      	ldr	r3, [r7, #12]
 8107c9a:	2b00      	cmp	r3, #0
 8107c9c:	d10b      	bne.n	8107cb6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8107c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107ca2:	f383 8811 	msr	BASEPRI, r3
 8107ca6:	f3bf 8f6f 	isb	sy
 8107caa:	f3bf 8f4f 	dsb	sy
 8107cae:	617b      	str	r3, [r7, #20]
}
 8107cb0:	bf00      	nop
 8107cb2:	bf00      	nop
 8107cb4:	e7fd      	b.n	8107cb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8107cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8107ce0 <vTaskPlaceOnEventListRestricted+0x54>)
 8107cb8:	681b      	ldr	r3, [r3, #0]
 8107cba:	3318      	adds	r3, #24
 8107cbc:	4619      	mov	r1, r3
 8107cbe:	68f8      	ldr	r0, [r7, #12]
 8107cc0:	f7fe fbcf 	bl	8106462 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	2b00      	cmp	r3, #0
 8107cc8:	d002      	beq.n	8107cd0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8107cca:	f04f 33ff 	mov.w	r3, #4294967295
 8107cce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8107cd0:	6879      	ldr	r1, [r7, #4]
 8107cd2:	68b8      	ldr	r0, [r7, #8]
 8107cd4:	f000 fa54 	bl	8108180 <prvAddCurrentTaskToDelayedList>
	}
 8107cd8:	bf00      	nop
 8107cda:	3718      	adds	r7, #24
 8107cdc:	46bd      	mov	sp, r7
 8107cde:	bd80      	pop	{r7, pc}
 8107ce0:	10004448 	.word	0x10004448

08107ce4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8107ce4:	b580      	push	{r7, lr}
 8107ce6:	b086      	sub	sp, #24
 8107ce8:	af00      	add	r7, sp, #0
 8107cea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107cec:	687b      	ldr	r3, [r7, #4]
 8107cee:	68db      	ldr	r3, [r3, #12]
 8107cf0:	68db      	ldr	r3, [r3, #12]
 8107cf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8107cf4:	693b      	ldr	r3, [r7, #16]
 8107cf6:	2b00      	cmp	r3, #0
 8107cf8:	d10b      	bne.n	8107d12 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8107cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107cfe:	f383 8811 	msr	BASEPRI, r3
 8107d02:	f3bf 8f6f 	isb	sy
 8107d06:	f3bf 8f4f 	dsb	sy
 8107d0a:	60fb      	str	r3, [r7, #12]
}
 8107d0c:	bf00      	nop
 8107d0e:	bf00      	nop
 8107d10:	e7fd      	b.n	8107d0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8107d12:	693b      	ldr	r3, [r7, #16]
 8107d14:	3318      	adds	r3, #24
 8107d16:	4618      	mov	r0, r3
 8107d18:	f7fe fc00 	bl	810651c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8107d94 <xTaskRemoveFromEventList+0xb0>)
 8107d1e:	681b      	ldr	r3, [r3, #0]
 8107d20:	2b00      	cmp	r3, #0
 8107d22:	d11d      	bne.n	8107d60 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8107d24:	693b      	ldr	r3, [r7, #16]
 8107d26:	3304      	adds	r3, #4
 8107d28:	4618      	mov	r0, r3
 8107d2a:	f7fe fbf7 	bl	810651c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8107d2e:	693b      	ldr	r3, [r7, #16]
 8107d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107d32:	4b19      	ldr	r3, [pc, #100]	@ (8107d98 <xTaskRemoveFromEventList+0xb4>)
 8107d34:	681b      	ldr	r3, [r3, #0]
 8107d36:	429a      	cmp	r2, r3
 8107d38:	d903      	bls.n	8107d42 <xTaskRemoveFromEventList+0x5e>
 8107d3a:	693b      	ldr	r3, [r7, #16]
 8107d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d3e:	4a16      	ldr	r2, [pc, #88]	@ (8107d98 <xTaskRemoveFromEventList+0xb4>)
 8107d40:	6013      	str	r3, [r2, #0]
 8107d42:	693b      	ldr	r3, [r7, #16]
 8107d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107d46:	4613      	mov	r3, r2
 8107d48:	009b      	lsls	r3, r3, #2
 8107d4a:	4413      	add	r3, r2
 8107d4c:	009b      	lsls	r3, r3, #2
 8107d4e:	4a13      	ldr	r2, [pc, #76]	@ (8107d9c <xTaskRemoveFromEventList+0xb8>)
 8107d50:	441a      	add	r2, r3
 8107d52:	693b      	ldr	r3, [r7, #16]
 8107d54:	3304      	adds	r3, #4
 8107d56:	4619      	mov	r1, r3
 8107d58:	4610      	mov	r0, r2
 8107d5a:	f7fe fb82 	bl	8106462 <vListInsertEnd>
 8107d5e:	e005      	b.n	8107d6c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8107d60:	693b      	ldr	r3, [r7, #16]
 8107d62:	3318      	adds	r3, #24
 8107d64:	4619      	mov	r1, r3
 8107d66:	480e      	ldr	r0, [pc, #56]	@ (8107da0 <xTaskRemoveFromEventList+0xbc>)
 8107d68:	f7fe fb7b 	bl	8106462 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8107d6c:	693b      	ldr	r3, [r7, #16]
 8107d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107d70:	4b0c      	ldr	r3, [pc, #48]	@ (8107da4 <xTaskRemoveFromEventList+0xc0>)
 8107d72:	681b      	ldr	r3, [r3, #0]
 8107d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d76:	429a      	cmp	r2, r3
 8107d78:	d905      	bls.n	8107d86 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8107d7a:	2301      	movs	r3, #1
 8107d7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8107d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8107da8 <xTaskRemoveFromEventList+0xc4>)
 8107d80:	2201      	movs	r2, #1
 8107d82:	601a      	str	r2, [r3, #0]
 8107d84:	e001      	b.n	8107d8a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8107d86:	2300      	movs	r3, #0
 8107d88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8107d8a:	697b      	ldr	r3, [r7, #20]
}
 8107d8c:	4618      	mov	r0, r3
 8107d8e:	3718      	adds	r7, #24
 8107d90:	46bd      	mov	sp, r7
 8107d92:	bd80      	pop	{r7, pc}
 8107d94:	10004944 	.word	0x10004944
 8107d98:	10004924 	.word	0x10004924
 8107d9c:	1000444c 	.word	0x1000444c
 8107da0:	100048dc 	.word	0x100048dc
 8107da4:	10004448 	.word	0x10004448
 8107da8:	10004930 	.word	0x10004930

08107dac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8107dac:	b480      	push	{r7}
 8107dae:	b083      	sub	sp, #12
 8107db0:	af00      	add	r7, sp, #0
 8107db2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8107db4:	4b06      	ldr	r3, [pc, #24]	@ (8107dd0 <vTaskInternalSetTimeOutState+0x24>)
 8107db6:	681a      	ldr	r2, [r3, #0]
 8107db8:	687b      	ldr	r3, [r7, #4]
 8107dba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8107dbc:	4b05      	ldr	r3, [pc, #20]	@ (8107dd4 <vTaskInternalSetTimeOutState+0x28>)
 8107dbe:	681a      	ldr	r2, [r3, #0]
 8107dc0:	687b      	ldr	r3, [r7, #4]
 8107dc2:	605a      	str	r2, [r3, #4]
}
 8107dc4:	bf00      	nop
 8107dc6:	370c      	adds	r7, #12
 8107dc8:	46bd      	mov	sp, r7
 8107dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107dce:	4770      	bx	lr
 8107dd0:	10004934 	.word	0x10004934
 8107dd4:	10004920 	.word	0x10004920

08107dd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8107dd8:	b580      	push	{r7, lr}
 8107dda:	b088      	sub	sp, #32
 8107ddc:	af00      	add	r7, sp, #0
 8107dde:	6078      	str	r0, [r7, #4]
 8107de0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8107de2:	687b      	ldr	r3, [r7, #4]
 8107de4:	2b00      	cmp	r3, #0
 8107de6:	d10b      	bne.n	8107e00 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8107de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107dec:	f383 8811 	msr	BASEPRI, r3
 8107df0:	f3bf 8f6f 	isb	sy
 8107df4:	f3bf 8f4f 	dsb	sy
 8107df8:	613b      	str	r3, [r7, #16]
}
 8107dfa:	bf00      	nop
 8107dfc:	bf00      	nop
 8107dfe:	e7fd      	b.n	8107dfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8107e00:	683b      	ldr	r3, [r7, #0]
 8107e02:	2b00      	cmp	r3, #0
 8107e04:	d10b      	bne.n	8107e1e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8107e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107e0a:	f383 8811 	msr	BASEPRI, r3
 8107e0e:	f3bf 8f6f 	isb	sy
 8107e12:	f3bf 8f4f 	dsb	sy
 8107e16:	60fb      	str	r3, [r7, #12]
}
 8107e18:	bf00      	nop
 8107e1a:	bf00      	nop
 8107e1c:	e7fd      	b.n	8107e1a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8107e1e:	f7fe fcdb 	bl	81067d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8107e22:	4b1d      	ldr	r3, [pc, #116]	@ (8107e98 <xTaskCheckForTimeOut+0xc0>)
 8107e24:	681b      	ldr	r3, [r3, #0]
 8107e26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8107e28:	687b      	ldr	r3, [r7, #4]
 8107e2a:	685b      	ldr	r3, [r3, #4]
 8107e2c:	69ba      	ldr	r2, [r7, #24]
 8107e2e:	1ad3      	subs	r3, r2, r3
 8107e30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8107e32:	683b      	ldr	r3, [r7, #0]
 8107e34:	681b      	ldr	r3, [r3, #0]
 8107e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107e3a:	d102      	bne.n	8107e42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8107e3c:	2300      	movs	r3, #0
 8107e3e:	61fb      	str	r3, [r7, #28]
 8107e40:	e023      	b.n	8107e8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8107e42:	687b      	ldr	r3, [r7, #4]
 8107e44:	681a      	ldr	r2, [r3, #0]
 8107e46:	4b15      	ldr	r3, [pc, #84]	@ (8107e9c <xTaskCheckForTimeOut+0xc4>)
 8107e48:	681b      	ldr	r3, [r3, #0]
 8107e4a:	429a      	cmp	r2, r3
 8107e4c:	d007      	beq.n	8107e5e <xTaskCheckForTimeOut+0x86>
 8107e4e:	687b      	ldr	r3, [r7, #4]
 8107e50:	685b      	ldr	r3, [r3, #4]
 8107e52:	69ba      	ldr	r2, [r7, #24]
 8107e54:	429a      	cmp	r2, r3
 8107e56:	d302      	bcc.n	8107e5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8107e58:	2301      	movs	r3, #1
 8107e5a:	61fb      	str	r3, [r7, #28]
 8107e5c:	e015      	b.n	8107e8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8107e5e:	683b      	ldr	r3, [r7, #0]
 8107e60:	681b      	ldr	r3, [r3, #0]
 8107e62:	697a      	ldr	r2, [r7, #20]
 8107e64:	429a      	cmp	r2, r3
 8107e66:	d20b      	bcs.n	8107e80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8107e68:	683b      	ldr	r3, [r7, #0]
 8107e6a:	681a      	ldr	r2, [r3, #0]
 8107e6c:	697b      	ldr	r3, [r7, #20]
 8107e6e:	1ad2      	subs	r2, r2, r3
 8107e70:	683b      	ldr	r3, [r7, #0]
 8107e72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8107e74:	6878      	ldr	r0, [r7, #4]
 8107e76:	f7ff ff99 	bl	8107dac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8107e7a:	2300      	movs	r3, #0
 8107e7c:	61fb      	str	r3, [r7, #28]
 8107e7e:	e004      	b.n	8107e8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8107e80:	683b      	ldr	r3, [r7, #0]
 8107e82:	2200      	movs	r2, #0
 8107e84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8107e86:	2301      	movs	r3, #1
 8107e88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8107e8a:	f7fe fcd7 	bl	810683c <vPortExitCritical>

	return xReturn;
 8107e8e:	69fb      	ldr	r3, [r7, #28]
}
 8107e90:	4618      	mov	r0, r3
 8107e92:	3720      	adds	r7, #32
 8107e94:	46bd      	mov	sp, r7
 8107e96:	bd80      	pop	{r7, pc}
 8107e98:	10004920 	.word	0x10004920
 8107e9c:	10004934 	.word	0x10004934

08107ea0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8107ea0:	b480      	push	{r7}
 8107ea2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8107ea4:	4b03      	ldr	r3, [pc, #12]	@ (8107eb4 <vTaskMissedYield+0x14>)
 8107ea6:	2201      	movs	r2, #1
 8107ea8:	601a      	str	r2, [r3, #0]
}
 8107eaa:	bf00      	nop
 8107eac:	46bd      	mov	sp, r7
 8107eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107eb2:	4770      	bx	lr
 8107eb4:	10004930 	.word	0x10004930

08107eb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8107eb8:	b580      	push	{r7, lr}
 8107eba:	b082      	sub	sp, #8
 8107ebc:	af00      	add	r7, sp, #0
 8107ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8107ec0:	f000 f852 	bl	8107f68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8107ec4:	4b06      	ldr	r3, [pc, #24]	@ (8107ee0 <prvIdleTask+0x28>)
 8107ec6:	681b      	ldr	r3, [r3, #0]
 8107ec8:	2b01      	cmp	r3, #1
 8107eca:	d9f9      	bls.n	8107ec0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8107ecc:	4b05      	ldr	r3, [pc, #20]	@ (8107ee4 <prvIdleTask+0x2c>)
 8107ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107ed2:	601a      	str	r2, [r3, #0]
 8107ed4:	f3bf 8f4f 	dsb	sy
 8107ed8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8107edc:	e7f0      	b.n	8107ec0 <prvIdleTask+0x8>
 8107ede:	bf00      	nop
 8107ee0:	1000444c 	.word	0x1000444c
 8107ee4:	e000ed04 	.word	0xe000ed04

08107ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8107ee8:	b580      	push	{r7, lr}
 8107eea:	b082      	sub	sp, #8
 8107eec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8107eee:	2300      	movs	r3, #0
 8107ef0:	607b      	str	r3, [r7, #4]
 8107ef2:	e00c      	b.n	8107f0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8107ef4:	687a      	ldr	r2, [r7, #4]
 8107ef6:	4613      	mov	r3, r2
 8107ef8:	009b      	lsls	r3, r3, #2
 8107efa:	4413      	add	r3, r2
 8107efc:	009b      	lsls	r3, r3, #2
 8107efe:	4a12      	ldr	r2, [pc, #72]	@ (8107f48 <prvInitialiseTaskLists+0x60>)
 8107f00:	4413      	add	r3, r2
 8107f02:	4618      	mov	r0, r3
 8107f04:	f7fe fa80 	bl	8106408 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8107f08:	687b      	ldr	r3, [r7, #4]
 8107f0a:	3301      	adds	r3, #1
 8107f0c:	607b      	str	r3, [r7, #4]
 8107f0e:	687b      	ldr	r3, [r7, #4]
 8107f10:	2b37      	cmp	r3, #55	@ 0x37
 8107f12:	d9ef      	bls.n	8107ef4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8107f14:	480d      	ldr	r0, [pc, #52]	@ (8107f4c <prvInitialiseTaskLists+0x64>)
 8107f16:	f7fe fa77 	bl	8106408 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8107f1a:	480d      	ldr	r0, [pc, #52]	@ (8107f50 <prvInitialiseTaskLists+0x68>)
 8107f1c:	f7fe fa74 	bl	8106408 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8107f20:	480c      	ldr	r0, [pc, #48]	@ (8107f54 <prvInitialiseTaskLists+0x6c>)
 8107f22:	f7fe fa71 	bl	8106408 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8107f26:	480c      	ldr	r0, [pc, #48]	@ (8107f58 <prvInitialiseTaskLists+0x70>)
 8107f28:	f7fe fa6e 	bl	8106408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8107f2c:	480b      	ldr	r0, [pc, #44]	@ (8107f5c <prvInitialiseTaskLists+0x74>)
 8107f2e:	f7fe fa6b 	bl	8106408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8107f32:	4b0b      	ldr	r3, [pc, #44]	@ (8107f60 <prvInitialiseTaskLists+0x78>)
 8107f34:	4a05      	ldr	r2, [pc, #20]	@ (8107f4c <prvInitialiseTaskLists+0x64>)
 8107f36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8107f38:	4b0a      	ldr	r3, [pc, #40]	@ (8107f64 <prvInitialiseTaskLists+0x7c>)
 8107f3a:	4a05      	ldr	r2, [pc, #20]	@ (8107f50 <prvInitialiseTaskLists+0x68>)
 8107f3c:	601a      	str	r2, [r3, #0]
}
 8107f3e:	bf00      	nop
 8107f40:	3708      	adds	r7, #8
 8107f42:	46bd      	mov	sp, r7
 8107f44:	bd80      	pop	{r7, pc}
 8107f46:	bf00      	nop
 8107f48:	1000444c 	.word	0x1000444c
 8107f4c:	100048ac 	.word	0x100048ac
 8107f50:	100048c0 	.word	0x100048c0
 8107f54:	100048dc 	.word	0x100048dc
 8107f58:	100048f0 	.word	0x100048f0
 8107f5c:	10004908 	.word	0x10004908
 8107f60:	100048d4 	.word	0x100048d4
 8107f64:	100048d8 	.word	0x100048d8

08107f68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8107f68:	b580      	push	{r7, lr}
 8107f6a:	b082      	sub	sp, #8
 8107f6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8107f6e:	e019      	b.n	8107fa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8107f70:	f7fe fc32 	bl	81067d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107f74:	4b10      	ldr	r3, [pc, #64]	@ (8107fb8 <prvCheckTasksWaitingTermination+0x50>)
 8107f76:	68db      	ldr	r3, [r3, #12]
 8107f78:	68db      	ldr	r3, [r3, #12]
 8107f7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107f7c:	687b      	ldr	r3, [r7, #4]
 8107f7e:	3304      	adds	r3, #4
 8107f80:	4618      	mov	r0, r3
 8107f82:	f7fe facb 	bl	810651c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8107f86:	4b0d      	ldr	r3, [pc, #52]	@ (8107fbc <prvCheckTasksWaitingTermination+0x54>)
 8107f88:	681b      	ldr	r3, [r3, #0]
 8107f8a:	3b01      	subs	r3, #1
 8107f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8107fbc <prvCheckTasksWaitingTermination+0x54>)
 8107f8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8107f90:	4b0b      	ldr	r3, [pc, #44]	@ (8107fc0 <prvCheckTasksWaitingTermination+0x58>)
 8107f92:	681b      	ldr	r3, [r3, #0]
 8107f94:	3b01      	subs	r3, #1
 8107f96:	4a0a      	ldr	r2, [pc, #40]	@ (8107fc0 <prvCheckTasksWaitingTermination+0x58>)
 8107f98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8107f9a:	f7fe fc4f 	bl	810683c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8107f9e:	6878      	ldr	r0, [r7, #4]
 8107fa0:	f000 f810 	bl	8107fc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8107fa4:	4b06      	ldr	r3, [pc, #24]	@ (8107fc0 <prvCheckTasksWaitingTermination+0x58>)
 8107fa6:	681b      	ldr	r3, [r3, #0]
 8107fa8:	2b00      	cmp	r3, #0
 8107faa:	d1e1      	bne.n	8107f70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8107fac:	bf00      	nop
 8107fae:	bf00      	nop
 8107fb0:	3708      	adds	r7, #8
 8107fb2:	46bd      	mov	sp, r7
 8107fb4:	bd80      	pop	{r7, pc}
 8107fb6:	bf00      	nop
 8107fb8:	100048f0 	.word	0x100048f0
 8107fbc:	1000491c 	.word	0x1000491c
 8107fc0:	10004904 	.word	0x10004904

08107fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8107fc4:	b580      	push	{r7, lr}
 8107fc6:	b084      	sub	sp, #16
 8107fc8:	af00      	add	r7, sp, #0
 8107fca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8107fcc:	687b      	ldr	r3, [r7, #4]
 8107fce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8107fd2:	2b00      	cmp	r3, #0
 8107fd4:	d108      	bne.n	8107fe8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8107fd6:	687b      	ldr	r3, [r7, #4]
 8107fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107fda:	4618      	mov	r0, r3
 8107fdc:	f7fe f8f4 	bl	81061c8 <vPortFree>
				vPortFree( pxTCB );
 8107fe0:	6878      	ldr	r0, [r7, #4]
 8107fe2:	f7fe f8f1 	bl	81061c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8107fe6:	e019      	b.n	810801c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8107fe8:	687b      	ldr	r3, [r7, #4]
 8107fea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8107fee:	2b01      	cmp	r3, #1
 8107ff0:	d103      	bne.n	8107ffa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8107ff2:	6878      	ldr	r0, [r7, #4]
 8107ff4:	f7fe f8e8 	bl	81061c8 <vPortFree>
	}
 8107ff8:	e010      	b.n	810801c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8107ffa:	687b      	ldr	r3, [r7, #4]
 8107ffc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8108000:	2b02      	cmp	r3, #2
 8108002:	d00b      	beq.n	810801c <prvDeleteTCB+0x58>
	__asm volatile
 8108004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108008:	f383 8811 	msr	BASEPRI, r3
 810800c:	f3bf 8f6f 	isb	sy
 8108010:	f3bf 8f4f 	dsb	sy
 8108014:	60fb      	str	r3, [r7, #12]
}
 8108016:	bf00      	nop
 8108018:	bf00      	nop
 810801a:	e7fd      	b.n	8108018 <prvDeleteTCB+0x54>
	}
 810801c:	bf00      	nop
 810801e:	3710      	adds	r7, #16
 8108020:	46bd      	mov	sp, r7
 8108022:	bd80      	pop	{r7, pc}

08108024 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8108024:	b480      	push	{r7}
 8108026:	b083      	sub	sp, #12
 8108028:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810802a:	4b0c      	ldr	r3, [pc, #48]	@ (810805c <prvResetNextTaskUnblockTime+0x38>)
 810802c:	681b      	ldr	r3, [r3, #0]
 810802e:	681b      	ldr	r3, [r3, #0]
 8108030:	2b00      	cmp	r3, #0
 8108032:	d104      	bne.n	810803e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8108034:	4b0a      	ldr	r3, [pc, #40]	@ (8108060 <prvResetNextTaskUnblockTime+0x3c>)
 8108036:	f04f 32ff 	mov.w	r2, #4294967295
 810803a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810803c:	e008      	b.n	8108050 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810803e:	4b07      	ldr	r3, [pc, #28]	@ (810805c <prvResetNextTaskUnblockTime+0x38>)
 8108040:	681b      	ldr	r3, [r3, #0]
 8108042:	68db      	ldr	r3, [r3, #12]
 8108044:	68db      	ldr	r3, [r3, #12]
 8108046:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8108048:	687b      	ldr	r3, [r7, #4]
 810804a:	685b      	ldr	r3, [r3, #4]
 810804c:	4a04      	ldr	r2, [pc, #16]	@ (8108060 <prvResetNextTaskUnblockTime+0x3c>)
 810804e:	6013      	str	r3, [r2, #0]
}
 8108050:	bf00      	nop
 8108052:	370c      	adds	r7, #12
 8108054:	46bd      	mov	sp, r7
 8108056:	f85d 7b04 	ldr.w	r7, [sp], #4
 810805a:	4770      	bx	lr
 810805c:	100048d4 	.word	0x100048d4
 8108060:	1000493c 	.word	0x1000493c

08108064 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8108064:	b480      	push	{r7}
 8108066:	b083      	sub	sp, #12
 8108068:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810806a:	4b0b      	ldr	r3, [pc, #44]	@ (8108098 <xTaskGetSchedulerState+0x34>)
 810806c:	681b      	ldr	r3, [r3, #0]
 810806e:	2b00      	cmp	r3, #0
 8108070:	d102      	bne.n	8108078 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8108072:	2301      	movs	r3, #1
 8108074:	607b      	str	r3, [r7, #4]
 8108076:	e008      	b.n	810808a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8108078:	4b08      	ldr	r3, [pc, #32]	@ (810809c <xTaskGetSchedulerState+0x38>)
 810807a:	681b      	ldr	r3, [r3, #0]
 810807c:	2b00      	cmp	r3, #0
 810807e:	d102      	bne.n	8108086 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8108080:	2302      	movs	r3, #2
 8108082:	607b      	str	r3, [r7, #4]
 8108084:	e001      	b.n	810808a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8108086:	2300      	movs	r3, #0
 8108088:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810808a:	687b      	ldr	r3, [r7, #4]
	}
 810808c:	4618      	mov	r0, r3
 810808e:	370c      	adds	r7, #12
 8108090:	46bd      	mov	sp, r7
 8108092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108096:	4770      	bx	lr
 8108098:	10004928 	.word	0x10004928
 810809c:	10004944 	.word	0x10004944

081080a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81080a0:	b580      	push	{r7, lr}
 81080a2:	b086      	sub	sp, #24
 81080a4:	af00      	add	r7, sp, #0
 81080a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 81080a8:	687b      	ldr	r3, [r7, #4]
 81080aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 81080ac:	2300      	movs	r3, #0
 81080ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81080b0:	687b      	ldr	r3, [r7, #4]
 81080b2:	2b00      	cmp	r3, #0
 81080b4:	d058      	beq.n	8108168 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 81080b6:	4b2f      	ldr	r3, [pc, #188]	@ (8108174 <xTaskPriorityDisinherit+0xd4>)
 81080b8:	681b      	ldr	r3, [r3, #0]
 81080ba:	693a      	ldr	r2, [r7, #16]
 81080bc:	429a      	cmp	r2, r3
 81080be:	d00b      	beq.n	81080d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 81080c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81080c4:	f383 8811 	msr	BASEPRI, r3
 81080c8:	f3bf 8f6f 	isb	sy
 81080cc:	f3bf 8f4f 	dsb	sy
 81080d0:	60fb      	str	r3, [r7, #12]
}
 81080d2:	bf00      	nop
 81080d4:	bf00      	nop
 81080d6:	e7fd      	b.n	81080d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 81080d8:	693b      	ldr	r3, [r7, #16]
 81080da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81080dc:	2b00      	cmp	r3, #0
 81080de:	d10b      	bne.n	81080f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 81080e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81080e4:	f383 8811 	msr	BASEPRI, r3
 81080e8:	f3bf 8f6f 	isb	sy
 81080ec:	f3bf 8f4f 	dsb	sy
 81080f0:	60bb      	str	r3, [r7, #8]
}
 81080f2:	bf00      	nop
 81080f4:	bf00      	nop
 81080f6:	e7fd      	b.n	81080f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 81080f8:	693b      	ldr	r3, [r7, #16]
 81080fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81080fc:	1e5a      	subs	r2, r3, #1
 81080fe:	693b      	ldr	r3, [r7, #16]
 8108100:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8108102:	693b      	ldr	r3, [r7, #16]
 8108104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8108106:	693b      	ldr	r3, [r7, #16]
 8108108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810810a:	429a      	cmp	r2, r3
 810810c:	d02c      	beq.n	8108168 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810810e:	693b      	ldr	r3, [r7, #16]
 8108110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108112:	2b00      	cmp	r3, #0
 8108114:	d128      	bne.n	8108168 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8108116:	693b      	ldr	r3, [r7, #16]
 8108118:	3304      	adds	r3, #4
 810811a:	4618      	mov	r0, r3
 810811c:	f7fe f9fe 	bl	810651c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8108120:	693b      	ldr	r3, [r7, #16]
 8108122:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8108124:	693b      	ldr	r3, [r7, #16]
 8108126:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8108128:	693b      	ldr	r3, [r7, #16]
 810812a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810812c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8108130:	693b      	ldr	r3, [r7, #16]
 8108132:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8108134:	693b      	ldr	r3, [r7, #16]
 8108136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8108138:	4b0f      	ldr	r3, [pc, #60]	@ (8108178 <xTaskPriorityDisinherit+0xd8>)
 810813a:	681b      	ldr	r3, [r3, #0]
 810813c:	429a      	cmp	r2, r3
 810813e:	d903      	bls.n	8108148 <xTaskPriorityDisinherit+0xa8>
 8108140:	693b      	ldr	r3, [r7, #16]
 8108142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108144:	4a0c      	ldr	r2, [pc, #48]	@ (8108178 <xTaskPriorityDisinherit+0xd8>)
 8108146:	6013      	str	r3, [r2, #0]
 8108148:	693b      	ldr	r3, [r7, #16]
 810814a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810814c:	4613      	mov	r3, r2
 810814e:	009b      	lsls	r3, r3, #2
 8108150:	4413      	add	r3, r2
 8108152:	009b      	lsls	r3, r3, #2
 8108154:	4a09      	ldr	r2, [pc, #36]	@ (810817c <xTaskPriorityDisinherit+0xdc>)
 8108156:	441a      	add	r2, r3
 8108158:	693b      	ldr	r3, [r7, #16]
 810815a:	3304      	adds	r3, #4
 810815c:	4619      	mov	r1, r3
 810815e:	4610      	mov	r0, r2
 8108160:	f7fe f97f 	bl	8106462 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8108164:	2301      	movs	r3, #1
 8108166:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8108168:	697b      	ldr	r3, [r7, #20]
	}
 810816a:	4618      	mov	r0, r3
 810816c:	3718      	adds	r7, #24
 810816e:	46bd      	mov	sp, r7
 8108170:	bd80      	pop	{r7, pc}
 8108172:	bf00      	nop
 8108174:	10004448 	.word	0x10004448
 8108178:	10004924 	.word	0x10004924
 810817c:	1000444c 	.word	0x1000444c

08108180 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8108180:	b580      	push	{r7, lr}
 8108182:	b084      	sub	sp, #16
 8108184:	af00      	add	r7, sp, #0
 8108186:	6078      	str	r0, [r7, #4]
 8108188:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810818a:	4b21      	ldr	r3, [pc, #132]	@ (8108210 <prvAddCurrentTaskToDelayedList+0x90>)
 810818c:	681b      	ldr	r3, [r3, #0]
 810818e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8108190:	4b20      	ldr	r3, [pc, #128]	@ (8108214 <prvAddCurrentTaskToDelayedList+0x94>)
 8108192:	681b      	ldr	r3, [r3, #0]
 8108194:	3304      	adds	r3, #4
 8108196:	4618      	mov	r0, r3
 8108198:	f7fe f9c0 	bl	810651c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810819c:	687b      	ldr	r3, [r7, #4]
 810819e:	f1b3 3fff 	cmp.w	r3, #4294967295
 81081a2:	d10a      	bne.n	81081ba <prvAddCurrentTaskToDelayedList+0x3a>
 81081a4:	683b      	ldr	r3, [r7, #0]
 81081a6:	2b00      	cmp	r3, #0
 81081a8:	d007      	beq.n	81081ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81081aa:	4b1a      	ldr	r3, [pc, #104]	@ (8108214 <prvAddCurrentTaskToDelayedList+0x94>)
 81081ac:	681b      	ldr	r3, [r3, #0]
 81081ae:	3304      	adds	r3, #4
 81081b0:	4619      	mov	r1, r3
 81081b2:	4819      	ldr	r0, [pc, #100]	@ (8108218 <prvAddCurrentTaskToDelayedList+0x98>)
 81081b4:	f7fe f955 	bl	8106462 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81081b8:	e026      	b.n	8108208 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81081ba:	68fa      	ldr	r2, [r7, #12]
 81081bc:	687b      	ldr	r3, [r7, #4]
 81081be:	4413      	add	r3, r2
 81081c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81081c2:	4b14      	ldr	r3, [pc, #80]	@ (8108214 <prvAddCurrentTaskToDelayedList+0x94>)
 81081c4:	681b      	ldr	r3, [r3, #0]
 81081c6:	68ba      	ldr	r2, [r7, #8]
 81081c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81081ca:	68ba      	ldr	r2, [r7, #8]
 81081cc:	68fb      	ldr	r3, [r7, #12]
 81081ce:	429a      	cmp	r2, r3
 81081d0:	d209      	bcs.n	81081e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81081d2:	4b12      	ldr	r3, [pc, #72]	@ (810821c <prvAddCurrentTaskToDelayedList+0x9c>)
 81081d4:	681a      	ldr	r2, [r3, #0]
 81081d6:	4b0f      	ldr	r3, [pc, #60]	@ (8108214 <prvAddCurrentTaskToDelayedList+0x94>)
 81081d8:	681b      	ldr	r3, [r3, #0]
 81081da:	3304      	adds	r3, #4
 81081dc:	4619      	mov	r1, r3
 81081de:	4610      	mov	r0, r2
 81081e0:	f7fe f963 	bl	81064aa <vListInsert>
}
 81081e4:	e010      	b.n	8108208 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81081e6:	4b0e      	ldr	r3, [pc, #56]	@ (8108220 <prvAddCurrentTaskToDelayedList+0xa0>)
 81081e8:	681a      	ldr	r2, [r3, #0]
 81081ea:	4b0a      	ldr	r3, [pc, #40]	@ (8108214 <prvAddCurrentTaskToDelayedList+0x94>)
 81081ec:	681b      	ldr	r3, [r3, #0]
 81081ee:	3304      	adds	r3, #4
 81081f0:	4619      	mov	r1, r3
 81081f2:	4610      	mov	r0, r2
 81081f4:	f7fe f959 	bl	81064aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 81081f8:	4b0a      	ldr	r3, [pc, #40]	@ (8108224 <prvAddCurrentTaskToDelayedList+0xa4>)
 81081fa:	681b      	ldr	r3, [r3, #0]
 81081fc:	68ba      	ldr	r2, [r7, #8]
 81081fe:	429a      	cmp	r2, r3
 8108200:	d202      	bcs.n	8108208 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8108202:	4a08      	ldr	r2, [pc, #32]	@ (8108224 <prvAddCurrentTaskToDelayedList+0xa4>)
 8108204:	68bb      	ldr	r3, [r7, #8]
 8108206:	6013      	str	r3, [r2, #0]
}
 8108208:	bf00      	nop
 810820a:	3710      	adds	r7, #16
 810820c:	46bd      	mov	sp, r7
 810820e:	bd80      	pop	{r7, pc}
 8108210:	10004920 	.word	0x10004920
 8108214:	10004448 	.word	0x10004448
 8108218:	10004908 	.word	0x10004908
 810821c:	100048d8 	.word	0x100048d8
 8108220:	100048d4 	.word	0x100048d4
 8108224:	1000493c 	.word	0x1000493c

08108228 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8108228:	b580      	push	{r7, lr}
 810822a:	b08a      	sub	sp, #40	@ 0x28
 810822c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810822e:	2300      	movs	r3, #0
 8108230:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8108232:	f000 fb13 	bl	810885c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8108236:	4b1d      	ldr	r3, [pc, #116]	@ (81082ac <xTimerCreateTimerTask+0x84>)
 8108238:	681b      	ldr	r3, [r3, #0]
 810823a:	2b00      	cmp	r3, #0
 810823c:	d021      	beq.n	8108282 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810823e:	2300      	movs	r3, #0
 8108240:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8108242:	2300      	movs	r3, #0
 8108244:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8108246:	1d3a      	adds	r2, r7, #4
 8108248:	f107 0108 	add.w	r1, r7, #8
 810824c:	f107 030c 	add.w	r3, r7, #12
 8108250:	4618      	mov	r0, r3
 8108252:	f7fd fed1 	bl	8105ff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8108256:	6879      	ldr	r1, [r7, #4]
 8108258:	68bb      	ldr	r3, [r7, #8]
 810825a:	68fa      	ldr	r2, [r7, #12]
 810825c:	9202      	str	r2, [sp, #8]
 810825e:	9301      	str	r3, [sp, #4]
 8108260:	2302      	movs	r3, #2
 8108262:	9300      	str	r3, [sp, #0]
 8108264:	2300      	movs	r3, #0
 8108266:	460a      	mov	r2, r1
 8108268:	4911      	ldr	r1, [pc, #68]	@ (81082b0 <xTimerCreateTimerTask+0x88>)
 810826a:	4812      	ldr	r0, [pc, #72]	@ (81082b4 <xTimerCreateTimerTask+0x8c>)
 810826c:	f7ff f8d0 	bl	8107410 <xTaskCreateStatic>
 8108270:	4603      	mov	r3, r0
 8108272:	4a11      	ldr	r2, [pc, #68]	@ (81082b8 <xTimerCreateTimerTask+0x90>)
 8108274:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8108276:	4b10      	ldr	r3, [pc, #64]	@ (81082b8 <xTimerCreateTimerTask+0x90>)
 8108278:	681b      	ldr	r3, [r3, #0]
 810827a:	2b00      	cmp	r3, #0
 810827c:	d001      	beq.n	8108282 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810827e:	2301      	movs	r3, #1
 8108280:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8108282:	697b      	ldr	r3, [r7, #20]
 8108284:	2b00      	cmp	r3, #0
 8108286:	d10b      	bne.n	81082a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8108288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810828c:	f383 8811 	msr	BASEPRI, r3
 8108290:	f3bf 8f6f 	isb	sy
 8108294:	f3bf 8f4f 	dsb	sy
 8108298:	613b      	str	r3, [r7, #16]
}
 810829a:	bf00      	nop
 810829c:	bf00      	nop
 810829e:	e7fd      	b.n	810829c <xTimerCreateTimerTask+0x74>
	return xReturn;
 81082a0:	697b      	ldr	r3, [r7, #20]
}
 81082a2:	4618      	mov	r0, r3
 81082a4:	3718      	adds	r7, #24
 81082a6:	46bd      	mov	sp, r7
 81082a8:	bd80      	pop	{r7, pc}
 81082aa:	bf00      	nop
 81082ac:	10004978 	.word	0x10004978
 81082b0:	08108998 	.word	0x08108998
 81082b4:	081083f5 	.word	0x081083f5
 81082b8:	1000497c 	.word	0x1000497c

081082bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81082bc:	b580      	push	{r7, lr}
 81082be:	b08a      	sub	sp, #40	@ 0x28
 81082c0:	af00      	add	r7, sp, #0
 81082c2:	60f8      	str	r0, [r7, #12]
 81082c4:	60b9      	str	r1, [r7, #8]
 81082c6:	607a      	str	r2, [r7, #4]
 81082c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81082ca:	2300      	movs	r3, #0
 81082cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81082ce:	68fb      	ldr	r3, [r7, #12]
 81082d0:	2b00      	cmp	r3, #0
 81082d2:	d10b      	bne.n	81082ec <xTimerGenericCommand+0x30>
	__asm volatile
 81082d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81082d8:	f383 8811 	msr	BASEPRI, r3
 81082dc:	f3bf 8f6f 	isb	sy
 81082e0:	f3bf 8f4f 	dsb	sy
 81082e4:	623b      	str	r3, [r7, #32]
}
 81082e6:	bf00      	nop
 81082e8:	bf00      	nop
 81082ea:	e7fd      	b.n	81082e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 81082ec:	4b19      	ldr	r3, [pc, #100]	@ (8108354 <xTimerGenericCommand+0x98>)
 81082ee:	681b      	ldr	r3, [r3, #0]
 81082f0:	2b00      	cmp	r3, #0
 81082f2:	d02a      	beq.n	810834a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 81082f4:	68bb      	ldr	r3, [r7, #8]
 81082f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 81082f8:	687b      	ldr	r3, [r7, #4]
 81082fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 81082fc:	68fb      	ldr	r3, [r7, #12]
 81082fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8108300:	68bb      	ldr	r3, [r7, #8]
 8108302:	2b05      	cmp	r3, #5
 8108304:	dc18      	bgt.n	8108338 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8108306:	f7ff fead 	bl	8108064 <xTaskGetSchedulerState>
 810830a:	4603      	mov	r3, r0
 810830c:	2b02      	cmp	r3, #2
 810830e:	d109      	bne.n	8108324 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8108310:	4b10      	ldr	r3, [pc, #64]	@ (8108354 <xTimerGenericCommand+0x98>)
 8108312:	6818      	ldr	r0, [r3, #0]
 8108314:	f107 0110 	add.w	r1, r7, #16
 8108318:	2300      	movs	r3, #0
 810831a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810831c:	f7fe fc88 	bl	8106c30 <xQueueGenericSend>
 8108320:	6278      	str	r0, [r7, #36]	@ 0x24
 8108322:	e012      	b.n	810834a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8108324:	4b0b      	ldr	r3, [pc, #44]	@ (8108354 <xTimerGenericCommand+0x98>)
 8108326:	6818      	ldr	r0, [r3, #0]
 8108328:	f107 0110 	add.w	r1, r7, #16
 810832c:	2300      	movs	r3, #0
 810832e:	2200      	movs	r2, #0
 8108330:	f7fe fc7e 	bl	8106c30 <xQueueGenericSend>
 8108334:	6278      	str	r0, [r7, #36]	@ 0x24
 8108336:	e008      	b.n	810834a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8108338:	4b06      	ldr	r3, [pc, #24]	@ (8108354 <xTimerGenericCommand+0x98>)
 810833a:	6818      	ldr	r0, [r3, #0]
 810833c:	f107 0110 	add.w	r1, r7, #16
 8108340:	2300      	movs	r3, #0
 8108342:	683a      	ldr	r2, [r7, #0]
 8108344:	f7fe fd76 	bl	8106e34 <xQueueGenericSendFromISR>
 8108348:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810834c:	4618      	mov	r0, r3
 810834e:	3728      	adds	r7, #40	@ 0x28
 8108350:	46bd      	mov	sp, r7
 8108352:	bd80      	pop	{r7, pc}
 8108354:	10004978 	.word	0x10004978

08108358 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8108358:	b580      	push	{r7, lr}
 810835a:	b088      	sub	sp, #32
 810835c:	af02      	add	r7, sp, #8
 810835e:	6078      	str	r0, [r7, #4]
 8108360:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108362:	4b23      	ldr	r3, [pc, #140]	@ (81083f0 <prvProcessExpiredTimer+0x98>)
 8108364:	681b      	ldr	r3, [r3, #0]
 8108366:	68db      	ldr	r3, [r3, #12]
 8108368:	68db      	ldr	r3, [r3, #12]
 810836a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810836c:	697b      	ldr	r3, [r7, #20]
 810836e:	3304      	adds	r3, #4
 8108370:	4618      	mov	r0, r3
 8108372:	f7fe f8d3 	bl	810651c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8108376:	697b      	ldr	r3, [r7, #20]
 8108378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810837c:	f003 0304 	and.w	r3, r3, #4
 8108380:	2b00      	cmp	r3, #0
 8108382:	d023      	beq.n	81083cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8108384:	697b      	ldr	r3, [r7, #20]
 8108386:	699a      	ldr	r2, [r3, #24]
 8108388:	687b      	ldr	r3, [r7, #4]
 810838a:	18d1      	adds	r1, r2, r3
 810838c:	687b      	ldr	r3, [r7, #4]
 810838e:	683a      	ldr	r2, [r7, #0]
 8108390:	6978      	ldr	r0, [r7, #20]
 8108392:	f000 f8d5 	bl	8108540 <prvInsertTimerInActiveList>
 8108396:	4603      	mov	r3, r0
 8108398:	2b00      	cmp	r3, #0
 810839a:	d020      	beq.n	81083de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810839c:	2300      	movs	r3, #0
 810839e:	9300      	str	r3, [sp, #0]
 81083a0:	2300      	movs	r3, #0
 81083a2:	687a      	ldr	r2, [r7, #4]
 81083a4:	2100      	movs	r1, #0
 81083a6:	6978      	ldr	r0, [r7, #20]
 81083a8:	f7ff ff88 	bl	81082bc <xTimerGenericCommand>
 81083ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81083ae:	693b      	ldr	r3, [r7, #16]
 81083b0:	2b00      	cmp	r3, #0
 81083b2:	d114      	bne.n	81083de <prvProcessExpiredTimer+0x86>
	__asm volatile
 81083b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81083b8:	f383 8811 	msr	BASEPRI, r3
 81083bc:	f3bf 8f6f 	isb	sy
 81083c0:	f3bf 8f4f 	dsb	sy
 81083c4:	60fb      	str	r3, [r7, #12]
}
 81083c6:	bf00      	nop
 81083c8:	bf00      	nop
 81083ca:	e7fd      	b.n	81083c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81083cc:	697b      	ldr	r3, [r7, #20]
 81083ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81083d2:	f023 0301 	bic.w	r3, r3, #1
 81083d6:	b2da      	uxtb	r2, r3
 81083d8:	697b      	ldr	r3, [r7, #20]
 81083da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81083de:	697b      	ldr	r3, [r7, #20]
 81083e0:	6a1b      	ldr	r3, [r3, #32]
 81083e2:	6978      	ldr	r0, [r7, #20]
 81083e4:	4798      	blx	r3
}
 81083e6:	bf00      	nop
 81083e8:	3718      	adds	r7, #24
 81083ea:	46bd      	mov	sp, r7
 81083ec:	bd80      	pop	{r7, pc}
 81083ee:	bf00      	nop
 81083f0:	10004970 	.word	0x10004970

081083f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 81083f4:	b580      	push	{r7, lr}
 81083f6:	b084      	sub	sp, #16
 81083f8:	af00      	add	r7, sp, #0
 81083fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81083fc:	f107 0308 	add.w	r3, r7, #8
 8108400:	4618      	mov	r0, r3
 8108402:	f000 f859 	bl	81084b8 <prvGetNextExpireTime>
 8108406:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8108408:	68bb      	ldr	r3, [r7, #8]
 810840a:	4619      	mov	r1, r3
 810840c:	68f8      	ldr	r0, [r7, #12]
 810840e:	f000 f805 	bl	810841c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8108412:	f000 f8d7 	bl	81085c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8108416:	bf00      	nop
 8108418:	e7f0      	b.n	81083fc <prvTimerTask+0x8>
	...

0810841c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810841c:	b580      	push	{r7, lr}
 810841e:	b084      	sub	sp, #16
 8108420:	af00      	add	r7, sp, #0
 8108422:	6078      	str	r0, [r7, #4]
 8108424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8108426:	f7ff fa37 	bl	8107898 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810842a:	f107 0308 	add.w	r3, r7, #8
 810842e:	4618      	mov	r0, r3
 8108430:	f000 f866 	bl	8108500 <prvSampleTimeNow>
 8108434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8108436:	68bb      	ldr	r3, [r7, #8]
 8108438:	2b00      	cmp	r3, #0
 810843a:	d130      	bne.n	810849e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810843c:	683b      	ldr	r3, [r7, #0]
 810843e:	2b00      	cmp	r3, #0
 8108440:	d10a      	bne.n	8108458 <prvProcessTimerOrBlockTask+0x3c>
 8108442:	687a      	ldr	r2, [r7, #4]
 8108444:	68fb      	ldr	r3, [r7, #12]
 8108446:	429a      	cmp	r2, r3
 8108448:	d806      	bhi.n	8108458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810844a:	f7ff fa33 	bl	81078b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810844e:	68f9      	ldr	r1, [r7, #12]
 8108450:	6878      	ldr	r0, [r7, #4]
 8108452:	f7ff ff81 	bl	8108358 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8108456:	e024      	b.n	81084a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8108458:	683b      	ldr	r3, [r7, #0]
 810845a:	2b00      	cmp	r3, #0
 810845c:	d008      	beq.n	8108470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810845e:	4b13      	ldr	r3, [pc, #76]	@ (81084ac <prvProcessTimerOrBlockTask+0x90>)
 8108460:	681b      	ldr	r3, [r3, #0]
 8108462:	681b      	ldr	r3, [r3, #0]
 8108464:	2b00      	cmp	r3, #0
 8108466:	d101      	bne.n	810846c <prvProcessTimerOrBlockTask+0x50>
 8108468:	2301      	movs	r3, #1
 810846a:	e000      	b.n	810846e <prvProcessTimerOrBlockTask+0x52>
 810846c:	2300      	movs	r3, #0
 810846e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8108470:	4b0f      	ldr	r3, [pc, #60]	@ (81084b0 <prvProcessTimerOrBlockTask+0x94>)
 8108472:	6818      	ldr	r0, [r3, #0]
 8108474:	687a      	ldr	r2, [r7, #4]
 8108476:	68fb      	ldr	r3, [r7, #12]
 8108478:	1ad3      	subs	r3, r2, r3
 810847a:	683a      	ldr	r2, [r7, #0]
 810847c:	4619      	mov	r1, r3
 810847e:	f7fe ff93 	bl	81073a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8108482:	f7ff fa17 	bl	81078b4 <xTaskResumeAll>
 8108486:	4603      	mov	r3, r0
 8108488:	2b00      	cmp	r3, #0
 810848a:	d10a      	bne.n	81084a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810848c:	4b09      	ldr	r3, [pc, #36]	@ (81084b4 <prvProcessTimerOrBlockTask+0x98>)
 810848e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108492:	601a      	str	r2, [r3, #0]
 8108494:	f3bf 8f4f 	dsb	sy
 8108498:	f3bf 8f6f 	isb	sy
}
 810849c:	e001      	b.n	81084a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810849e:	f7ff fa09 	bl	81078b4 <xTaskResumeAll>
}
 81084a2:	bf00      	nop
 81084a4:	3710      	adds	r7, #16
 81084a6:	46bd      	mov	sp, r7
 81084a8:	bd80      	pop	{r7, pc}
 81084aa:	bf00      	nop
 81084ac:	10004974 	.word	0x10004974
 81084b0:	10004978 	.word	0x10004978
 81084b4:	e000ed04 	.word	0xe000ed04

081084b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81084b8:	b480      	push	{r7}
 81084ba:	b085      	sub	sp, #20
 81084bc:	af00      	add	r7, sp, #0
 81084be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81084c0:	4b0e      	ldr	r3, [pc, #56]	@ (81084fc <prvGetNextExpireTime+0x44>)
 81084c2:	681b      	ldr	r3, [r3, #0]
 81084c4:	681b      	ldr	r3, [r3, #0]
 81084c6:	2b00      	cmp	r3, #0
 81084c8:	d101      	bne.n	81084ce <prvGetNextExpireTime+0x16>
 81084ca:	2201      	movs	r2, #1
 81084cc:	e000      	b.n	81084d0 <prvGetNextExpireTime+0x18>
 81084ce:	2200      	movs	r2, #0
 81084d0:	687b      	ldr	r3, [r7, #4]
 81084d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81084d4:	687b      	ldr	r3, [r7, #4]
 81084d6:	681b      	ldr	r3, [r3, #0]
 81084d8:	2b00      	cmp	r3, #0
 81084da:	d105      	bne.n	81084e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81084dc:	4b07      	ldr	r3, [pc, #28]	@ (81084fc <prvGetNextExpireTime+0x44>)
 81084de:	681b      	ldr	r3, [r3, #0]
 81084e0:	68db      	ldr	r3, [r3, #12]
 81084e2:	681b      	ldr	r3, [r3, #0]
 81084e4:	60fb      	str	r3, [r7, #12]
 81084e6:	e001      	b.n	81084ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 81084e8:	2300      	movs	r3, #0
 81084ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 81084ec:	68fb      	ldr	r3, [r7, #12]
}
 81084ee:	4618      	mov	r0, r3
 81084f0:	3714      	adds	r7, #20
 81084f2:	46bd      	mov	sp, r7
 81084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084f8:	4770      	bx	lr
 81084fa:	bf00      	nop
 81084fc:	10004970 	.word	0x10004970

08108500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8108500:	b580      	push	{r7, lr}
 8108502:	b084      	sub	sp, #16
 8108504:	af00      	add	r7, sp, #0
 8108506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8108508:	f7ff fa72 	bl	81079f0 <xTaskGetTickCount>
 810850c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810850e:	4b0b      	ldr	r3, [pc, #44]	@ (810853c <prvSampleTimeNow+0x3c>)
 8108510:	681b      	ldr	r3, [r3, #0]
 8108512:	68fa      	ldr	r2, [r7, #12]
 8108514:	429a      	cmp	r2, r3
 8108516:	d205      	bcs.n	8108524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8108518:	f000 f93a 	bl	8108790 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810851c:	687b      	ldr	r3, [r7, #4]
 810851e:	2201      	movs	r2, #1
 8108520:	601a      	str	r2, [r3, #0]
 8108522:	e002      	b.n	810852a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8108524:	687b      	ldr	r3, [r7, #4]
 8108526:	2200      	movs	r2, #0
 8108528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810852a:	4a04      	ldr	r2, [pc, #16]	@ (810853c <prvSampleTimeNow+0x3c>)
 810852c:	68fb      	ldr	r3, [r7, #12]
 810852e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8108530:	68fb      	ldr	r3, [r7, #12]
}
 8108532:	4618      	mov	r0, r3
 8108534:	3710      	adds	r7, #16
 8108536:	46bd      	mov	sp, r7
 8108538:	bd80      	pop	{r7, pc}
 810853a:	bf00      	nop
 810853c:	10004980 	.word	0x10004980

08108540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8108540:	b580      	push	{r7, lr}
 8108542:	b086      	sub	sp, #24
 8108544:	af00      	add	r7, sp, #0
 8108546:	60f8      	str	r0, [r7, #12]
 8108548:	60b9      	str	r1, [r7, #8]
 810854a:	607a      	str	r2, [r7, #4]
 810854c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810854e:	2300      	movs	r3, #0
 8108550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8108552:	68fb      	ldr	r3, [r7, #12]
 8108554:	68ba      	ldr	r2, [r7, #8]
 8108556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8108558:	68fb      	ldr	r3, [r7, #12]
 810855a:	68fa      	ldr	r2, [r7, #12]
 810855c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810855e:	68ba      	ldr	r2, [r7, #8]
 8108560:	687b      	ldr	r3, [r7, #4]
 8108562:	429a      	cmp	r2, r3
 8108564:	d812      	bhi.n	810858c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8108566:	687a      	ldr	r2, [r7, #4]
 8108568:	683b      	ldr	r3, [r7, #0]
 810856a:	1ad2      	subs	r2, r2, r3
 810856c:	68fb      	ldr	r3, [r7, #12]
 810856e:	699b      	ldr	r3, [r3, #24]
 8108570:	429a      	cmp	r2, r3
 8108572:	d302      	bcc.n	810857a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8108574:	2301      	movs	r3, #1
 8108576:	617b      	str	r3, [r7, #20]
 8108578:	e01b      	b.n	81085b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810857a:	4b10      	ldr	r3, [pc, #64]	@ (81085bc <prvInsertTimerInActiveList+0x7c>)
 810857c:	681a      	ldr	r2, [r3, #0]
 810857e:	68fb      	ldr	r3, [r7, #12]
 8108580:	3304      	adds	r3, #4
 8108582:	4619      	mov	r1, r3
 8108584:	4610      	mov	r0, r2
 8108586:	f7fd ff90 	bl	81064aa <vListInsert>
 810858a:	e012      	b.n	81085b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810858c:	687a      	ldr	r2, [r7, #4]
 810858e:	683b      	ldr	r3, [r7, #0]
 8108590:	429a      	cmp	r2, r3
 8108592:	d206      	bcs.n	81085a2 <prvInsertTimerInActiveList+0x62>
 8108594:	68ba      	ldr	r2, [r7, #8]
 8108596:	683b      	ldr	r3, [r7, #0]
 8108598:	429a      	cmp	r2, r3
 810859a:	d302      	bcc.n	81085a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810859c:	2301      	movs	r3, #1
 810859e:	617b      	str	r3, [r7, #20]
 81085a0:	e007      	b.n	81085b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81085a2:	4b07      	ldr	r3, [pc, #28]	@ (81085c0 <prvInsertTimerInActiveList+0x80>)
 81085a4:	681a      	ldr	r2, [r3, #0]
 81085a6:	68fb      	ldr	r3, [r7, #12]
 81085a8:	3304      	adds	r3, #4
 81085aa:	4619      	mov	r1, r3
 81085ac:	4610      	mov	r0, r2
 81085ae:	f7fd ff7c 	bl	81064aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 81085b2:	697b      	ldr	r3, [r7, #20]
}
 81085b4:	4618      	mov	r0, r3
 81085b6:	3718      	adds	r7, #24
 81085b8:	46bd      	mov	sp, r7
 81085ba:	bd80      	pop	{r7, pc}
 81085bc:	10004974 	.word	0x10004974
 81085c0:	10004970 	.word	0x10004970

081085c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81085c4:	b580      	push	{r7, lr}
 81085c6:	b08e      	sub	sp, #56	@ 0x38
 81085c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81085ca:	e0ce      	b.n	810876a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81085cc:	687b      	ldr	r3, [r7, #4]
 81085ce:	2b00      	cmp	r3, #0
 81085d0:	da19      	bge.n	8108606 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81085d2:	1d3b      	adds	r3, r7, #4
 81085d4:	3304      	adds	r3, #4
 81085d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81085d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81085da:	2b00      	cmp	r3, #0
 81085dc:	d10b      	bne.n	81085f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 81085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81085e2:	f383 8811 	msr	BASEPRI, r3
 81085e6:	f3bf 8f6f 	isb	sy
 81085ea:	f3bf 8f4f 	dsb	sy
 81085ee:	61fb      	str	r3, [r7, #28]
}
 81085f0:	bf00      	nop
 81085f2:	bf00      	nop
 81085f4:	e7fd      	b.n	81085f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 81085f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81085f8:	681b      	ldr	r3, [r3, #0]
 81085fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81085fc:	6850      	ldr	r0, [r2, #4]
 81085fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108600:	6892      	ldr	r2, [r2, #8]
 8108602:	4611      	mov	r1, r2
 8108604:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8108606:	687b      	ldr	r3, [r7, #4]
 8108608:	2b00      	cmp	r3, #0
 810860a:	f2c0 80ae 	blt.w	810876a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810860e:	68fb      	ldr	r3, [r7, #12]
 8108610:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8108612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108614:	695b      	ldr	r3, [r3, #20]
 8108616:	2b00      	cmp	r3, #0
 8108618:	d004      	beq.n	8108624 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810861a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810861c:	3304      	adds	r3, #4
 810861e:	4618      	mov	r0, r3
 8108620:	f7fd ff7c 	bl	810651c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8108624:	463b      	mov	r3, r7
 8108626:	4618      	mov	r0, r3
 8108628:	f7ff ff6a 	bl	8108500 <prvSampleTimeNow>
 810862c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810862e:	687b      	ldr	r3, [r7, #4]
 8108630:	2b09      	cmp	r3, #9
 8108632:	f200 8097 	bhi.w	8108764 <prvProcessReceivedCommands+0x1a0>
 8108636:	a201      	add	r2, pc, #4	@ (adr r2, 810863c <prvProcessReceivedCommands+0x78>)
 8108638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810863c:	08108665 	.word	0x08108665
 8108640:	08108665 	.word	0x08108665
 8108644:	08108665 	.word	0x08108665
 8108648:	081086db 	.word	0x081086db
 810864c:	081086ef 	.word	0x081086ef
 8108650:	0810873b 	.word	0x0810873b
 8108654:	08108665 	.word	0x08108665
 8108658:	08108665 	.word	0x08108665
 810865c:	081086db 	.word	0x081086db
 8108660:	081086ef 	.word	0x081086ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8108664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108666:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810866a:	f043 0301 	orr.w	r3, r3, #1
 810866e:	b2da      	uxtb	r2, r3
 8108670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108672:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8108676:	68ba      	ldr	r2, [r7, #8]
 8108678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810867a:	699b      	ldr	r3, [r3, #24]
 810867c:	18d1      	adds	r1, r2, r3
 810867e:	68bb      	ldr	r3, [r7, #8]
 8108680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108684:	f7ff ff5c 	bl	8108540 <prvInsertTimerInActiveList>
 8108688:	4603      	mov	r3, r0
 810868a:	2b00      	cmp	r3, #0
 810868c:	d06c      	beq.n	8108768 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810868e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108690:	6a1b      	ldr	r3, [r3, #32]
 8108692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108694:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8108696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108698:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810869c:	f003 0304 	and.w	r3, r3, #4
 81086a0:	2b00      	cmp	r3, #0
 81086a2:	d061      	beq.n	8108768 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81086a4:	68ba      	ldr	r2, [r7, #8]
 81086a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086a8:	699b      	ldr	r3, [r3, #24]
 81086aa:	441a      	add	r2, r3
 81086ac:	2300      	movs	r3, #0
 81086ae:	9300      	str	r3, [sp, #0]
 81086b0:	2300      	movs	r3, #0
 81086b2:	2100      	movs	r1, #0
 81086b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81086b6:	f7ff fe01 	bl	81082bc <xTimerGenericCommand>
 81086ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81086bc:	6a3b      	ldr	r3, [r7, #32]
 81086be:	2b00      	cmp	r3, #0
 81086c0:	d152      	bne.n	8108768 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 81086c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81086c6:	f383 8811 	msr	BASEPRI, r3
 81086ca:	f3bf 8f6f 	isb	sy
 81086ce:	f3bf 8f4f 	dsb	sy
 81086d2:	61bb      	str	r3, [r7, #24]
}
 81086d4:	bf00      	nop
 81086d6:	bf00      	nop
 81086d8:	e7fd      	b.n	81086d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81086da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81086e0:	f023 0301 	bic.w	r3, r3, #1
 81086e4:	b2da      	uxtb	r2, r3
 81086e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81086ec:	e03d      	b.n	810876a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81086ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81086f4:	f043 0301 	orr.w	r3, r3, #1
 81086f8:	b2da      	uxtb	r2, r3
 81086fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8108700:	68ba      	ldr	r2, [r7, #8]
 8108702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108704:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8108706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108708:	699b      	ldr	r3, [r3, #24]
 810870a:	2b00      	cmp	r3, #0
 810870c:	d10b      	bne.n	8108726 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810870e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108712:	f383 8811 	msr	BASEPRI, r3
 8108716:	f3bf 8f6f 	isb	sy
 810871a:	f3bf 8f4f 	dsb	sy
 810871e:	617b      	str	r3, [r7, #20]
}
 8108720:	bf00      	nop
 8108722:	bf00      	nop
 8108724:	e7fd      	b.n	8108722 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8108726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108728:	699a      	ldr	r2, [r3, #24]
 810872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810872c:	18d1      	adds	r1, r2, r3
 810872e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108734:	f7ff ff04 	bl	8108540 <prvInsertTimerInActiveList>
					break;
 8108738:	e017      	b.n	810876a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810873a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810873c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8108740:	f003 0302 	and.w	r3, r3, #2
 8108744:	2b00      	cmp	r3, #0
 8108746:	d103      	bne.n	8108750 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8108748:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810874a:	f7fd fd3d 	bl	81061c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810874e:	e00c      	b.n	810876a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8108750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108752:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8108756:	f023 0301 	bic.w	r3, r3, #1
 810875a:	b2da      	uxtb	r2, r3
 810875c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810875e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8108762:	e002      	b.n	810876a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8108764:	bf00      	nop
 8108766:	e000      	b.n	810876a <prvProcessReceivedCommands+0x1a6>
					break;
 8108768:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810876a:	4b08      	ldr	r3, [pc, #32]	@ (810878c <prvProcessReceivedCommands+0x1c8>)
 810876c:	681b      	ldr	r3, [r3, #0]
 810876e:	1d39      	adds	r1, r7, #4
 8108770:	2200      	movs	r2, #0
 8108772:	4618      	mov	r0, r3
 8108774:	f7fe fbfc 	bl	8106f70 <xQueueReceive>
 8108778:	4603      	mov	r3, r0
 810877a:	2b00      	cmp	r3, #0
 810877c:	f47f af26 	bne.w	81085cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8108780:	bf00      	nop
 8108782:	bf00      	nop
 8108784:	3730      	adds	r7, #48	@ 0x30
 8108786:	46bd      	mov	sp, r7
 8108788:	bd80      	pop	{r7, pc}
 810878a:	bf00      	nop
 810878c:	10004978 	.word	0x10004978

08108790 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8108790:	b580      	push	{r7, lr}
 8108792:	b088      	sub	sp, #32
 8108794:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8108796:	e049      	b.n	810882c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8108798:	4b2e      	ldr	r3, [pc, #184]	@ (8108854 <prvSwitchTimerLists+0xc4>)
 810879a:	681b      	ldr	r3, [r3, #0]
 810879c:	68db      	ldr	r3, [r3, #12]
 810879e:	681b      	ldr	r3, [r3, #0]
 81087a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81087a2:	4b2c      	ldr	r3, [pc, #176]	@ (8108854 <prvSwitchTimerLists+0xc4>)
 81087a4:	681b      	ldr	r3, [r3, #0]
 81087a6:	68db      	ldr	r3, [r3, #12]
 81087a8:	68db      	ldr	r3, [r3, #12]
 81087aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81087ac:	68fb      	ldr	r3, [r7, #12]
 81087ae:	3304      	adds	r3, #4
 81087b0:	4618      	mov	r0, r3
 81087b2:	f7fd feb3 	bl	810651c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81087b6:	68fb      	ldr	r3, [r7, #12]
 81087b8:	6a1b      	ldr	r3, [r3, #32]
 81087ba:	68f8      	ldr	r0, [r7, #12]
 81087bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81087be:	68fb      	ldr	r3, [r7, #12]
 81087c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81087c4:	f003 0304 	and.w	r3, r3, #4
 81087c8:	2b00      	cmp	r3, #0
 81087ca:	d02f      	beq.n	810882c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81087cc:	68fb      	ldr	r3, [r7, #12]
 81087ce:	699b      	ldr	r3, [r3, #24]
 81087d0:	693a      	ldr	r2, [r7, #16]
 81087d2:	4413      	add	r3, r2
 81087d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81087d6:	68ba      	ldr	r2, [r7, #8]
 81087d8:	693b      	ldr	r3, [r7, #16]
 81087da:	429a      	cmp	r2, r3
 81087dc:	d90e      	bls.n	81087fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81087de:	68fb      	ldr	r3, [r7, #12]
 81087e0:	68ba      	ldr	r2, [r7, #8]
 81087e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81087e4:	68fb      	ldr	r3, [r7, #12]
 81087e6:	68fa      	ldr	r2, [r7, #12]
 81087e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81087ea:	4b1a      	ldr	r3, [pc, #104]	@ (8108854 <prvSwitchTimerLists+0xc4>)
 81087ec:	681a      	ldr	r2, [r3, #0]
 81087ee:	68fb      	ldr	r3, [r7, #12]
 81087f0:	3304      	adds	r3, #4
 81087f2:	4619      	mov	r1, r3
 81087f4:	4610      	mov	r0, r2
 81087f6:	f7fd fe58 	bl	81064aa <vListInsert>
 81087fa:	e017      	b.n	810882c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81087fc:	2300      	movs	r3, #0
 81087fe:	9300      	str	r3, [sp, #0]
 8108800:	2300      	movs	r3, #0
 8108802:	693a      	ldr	r2, [r7, #16]
 8108804:	2100      	movs	r1, #0
 8108806:	68f8      	ldr	r0, [r7, #12]
 8108808:	f7ff fd58 	bl	81082bc <xTimerGenericCommand>
 810880c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810880e:	687b      	ldr	r3, [r7, #4]
 8108810:	2b00      	cmp	r3, #0
 8108812:	d10b      	bne.n	810882c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8108814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108818:	f383 8811 	msr	BASEPRI, r3
 810881c:	f3bf 8f6f 	isb	sy
 8108820:	f3bf 8f4f 	dsb	sy
 8108824:	603b      	str	r3, [r7, #0]
}
 8108826:	bf00      	nop
 8108828:	bf00      	nop
 810882a:	e7fd      	b.n	8108828 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810882c:	4b09      	ldr	r3, [pc, #36]	@ (8108854 <prvSwitchTimerLists+0xc4>)
 810882e:	681b      	ldr	r3, [r3, #0]
 8108830:	681b      	ldr	r3, [r3, #0]
 8108832:	2b00      	cmp	r3, #0
 8108834:	d1b0      	bne.n	8108798 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8108836:	4b07      	ldr	r3, [pc, #28]	@ (8108854 <prvSwitchTimerLists+0xc4>)
 8108838:	681b      	ldr	r3, [r3, #0]
 810883a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810883c:	4b06      	ldr	r3, [pc, #24]	@ (8108858 <prvSwitchTimerLists+0xc8>)
 810883e:	681b      	ldr	r3, [r3, #0]
 8108840:	4a04      	ldr	r2, [pc, #16]	@ (8108854 <prvSwitchTimerLists+0xc4>)
 8108842:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8108844:	4a04      	ldr	r2, [pc, #16]	@ (8108858 <prvSwitchTimerLists+0xc8>)
 8108846:	697b      	ldr	r3, [r7, #20]
 8108848:	6013      	str	r3, [r2, #0]
}
 810884a:	bf00      	nop
 810884c:	3718      	adds	r7, #24
 810884e:	46bd      	mov	sp, r7
 8108850:	bd80      	pop	{r7, pc}
 8108852:	bf00      	nop
 8108854:	10004970 	.word	0x10004970
 8108858:	10004974 	.word	0x10004974

0810885c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810885c:	b580      	push	{r7, lr}
 810885e:	b082      	sub	sp, #8
 8108860:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8108862:	f7fd ffb9 	bl	81067d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8108866:	4b15      	ldr	r3, [pc, #84]	@ (81088bc <prvCheckForValidListAndQueue+0x60>)
 8108868:	681b      	ldr	r3, [r3, #0]
 810886a:	2b00      	cmp	r3, #0
 810886c:	d120      	bne.n	81088b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810886e:	4814      	ldr	r0, [pc, #80]	@ (81088c0 <prvCheckForValidListAndQueue+0x64>)
 8108870:	f7fd fdca 	bl	8106408 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8108874:	4813      	ldr	r0, [pc, #76]	@ (81088c4 <prvCheckForValidListAndQueue+0x68>)
 8108876:	f7fd fdc7 	bl	8106408 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810887a:	4b13      	ldr	r3, [pc, #76]	@ (81088c8 <prvCheckForValidListAndQueue+0x6c>)
 810887c:	4a10      	ldr	r2, [pc, #64]	@ (81088c0 <prvCheckForValidListAndQueue+0x64>)
 810887e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8108880:	4b12      	ldr	r3, [pc, #72]	@ (81088cc <prvCheckForValidListAndQueue+0x70>)
 8108882:	4a10      	ldr	r2, [pc, #64]	@ (81088c4 <prvCheckForValidListAndQueue+0x68>)
 8108884:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8108886:	2300      	movs	r3, #0
 8108888:	9300      	str	r3, [sp, #0]
 810888a:	4b11      	ldr	r3, [pc, #68]	@ (81088d0 <prvCheckForValidListAndQueue+0x74>)
 810888c:	4a11      	ldr	r2, [pc, #68]	@ (81088d4 <prvCheckForValidListAndQueue+0x78>)
 810888e:	2110      	movs	r1, #16
 8108890:	200a      	movs	r0, #10
 8108892:	f7fe f92d 	bl	8106af0 <xQueueGenericCreateStatic>
 8108896:	4603      	mov	r3, r0
 8108898:	4a08      	ldr	r2, [pc, #32]	@ (81088bc <prvCheckForValidListAndQueue+0x60>)
 810889a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810889c:	4b07      	ldr	r3, [pc, #28]	@ (81088bc <prvCheckForValidListAndQueue+0x60>)
 810889e:	681b      	ldr	r3, [r3, #0]
 81088a0:	2b00      	cmp	r3, #0
 81088a2:	d005      	beq.n	81088b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 81088a4:	4b05      	ldr	r3, [pc, #20]	@ (81088bc <prvCheckForValidListAndQueue+0x60>)
 81088a6:	681b      	ldr	r3, [r3, #0]
 81088a8:	490b      	ldr	r1, [pc, #44]	@ (81088d8 <prvCheckForValidListAndQueue+0x7c>)
 81088aa:	4618      	mov	r0, r3
 81088ac:	f7fe fd52 	bl	8107354 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81088b0:	f7fd ffc4 	bl	810683c <vPortExitCritical>
}
 81088b4:	bf00      	nop
 81088b6:	46bd      	mov	sp, r7
 81088b8:	bd80      	pop	{r7, pc}
 81088ba:	bf00      	nop
 81088bc:	10004978 	.word	0x10004978
 81088c0:	10004948 	.word	0x10004948
 81088c4:	1000495c 	.word	0x1000495c
 81088c8:	10004970 	.word	0x10004970
 81088cc:	10004974 	.word	0x10004974
 81088d0:	10004a24 	.word	0x10004a24
 81088d4:	10004984 	.word	0x10004984
 81088d8:	081089a0 	.word	0x081089a0

081088dc <memset>:
 81088dc:	4402      	add	r2, r0
 81088de:	4603      	mov	r3, r0
 81088e0:	4293      	cmp	r3, r2
 81088e2:	d100      	bne.n	81088e6 <memset+0xa>
 81088e4:	4770      	bx	lr
 81088e6:	f803 1b01 	strb.w	r1, [r3], #1
 81088ea:	e7f9      	b.n	81088e0 <memset+0x4>

081088ec <__libc_init_array>:
 81088ec:	b570      	push	{r4, r5, r6, lr}
 81088ee:	4d0d      	ldr	r5, [pc, #52]	@ (8108924 <__libc_init_array+0x38>)
 81088f0:	4c0d      	ldr	r4, [pc, #52]	@ (8108928 <__libc_init_array+0x3c>)
 81088f2:	1b64      	subs	r4, r4, r5
 81088f4:	10a4      	asrs	r4, r4, #2
 81088f6:	2600      	movs	r6, #0
 81088f8:	42a6      	cmp	r6, r4
 81088fa:	d109      	bne.n	8108910 <__libc_init_array+0x24>
 81088fc:	4d0b      	ldr	r5, [pc, #44]	@ (810892c <__libc_init_array+0x40>)
 81088fe:	4c0c      	ldr	r4, [pc, #48]	@ (8108930 <__libc_init_array+0x44>)
 8108900:	f000 f826 	bl	8108950 <_init>
 8108904:	1b64      	subs	r4, r4, r5
 8108906:	10a4      	asrs	r4, r4, #2
 8108908:	2600      	movs	r6, #0
 810890a:	42a6      	cmp	r6, r4
 810890c:	d105      	bne.n	810891a <__libc_init_array+0x2e>
 810890e:	bd70      	pop	{r4, r5, r6, pc}
 8108910:	f855 3b04 	ldr.w	r3, [r5], #4
 8108914:	4798      	blx	r3
 8108916:	3601      	adds	r6, #1
 8108918:	e7ee      	b.n	81088f8 <__libc_init_array+0xc>
 810891a:	f855 3b04 	ldr.w	r3, [r5], #4
 810891e:	4798      	blx	r3
 8108920:	3601      	adds	r6, #1
 8108922:	e7f2      	b.n	810890a <__libc_init_array+0x1e>
 8108924:	08108a30 	.word	0x08108a30
 8108928:	08108a30 	.word	0x08108a30
 810892c:	08108a30 	.word	0x08108a30
 8108930:	08108a34 	.word	0x08108a34

08108934 <memcpy>:
 8108934:	440a      	add	r2, r1
 8108936:	4291      	cmp	r1, r2
 8108938:	f100 33ff 	add.w	r3, r0, #4294967295
 810893c:	d100      	bne.n	8108940 <memcpy+0xc>
 810893e:	4770      	bx	lr
 8108940:	b510      	push	{r4, lr}
 8108942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108946:	f803 4f01 	strb.w	r4, [r3, #1]!
 810894a:	4291      	cmp	r1, r2
 810894c:	d1f9      	bne.n	8108942 <memcpy+0xe>
 810894e:	bd10      	pop	{r4, pc}

08108950 <_init>:
 8108950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108952:	bf00      	nop
 8108954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108956:	bc08      	pop	{r3}
 8108958:	469e      	mov	lr, r3
 810895a:	4770      	bx	lr

0810895c <_fini>:
 810895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810895e:	bf00      	nop
 8108960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108962:	bc08      	pop	{r3}
 8108964:	469e      	mov	lr, r3
 8108966:	4770      	bx	lr
