
LEO_PCB_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001934  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001bcc  08001bcc  00002bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bdc  08001bdc  00003010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001bdc  08001bdc  00003010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001bdc  08001bdc  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bdc  08001bdc  00002bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001be0  08001be0  00002be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08001be4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  24000010  08001bf4  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000030  08001bf4  00003030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c00  00000000  00000000  0000303e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001283  00000000  00000000  00009c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000aec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e5  00000000  00000000  0000b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037e6f  00000000  00000000  0000ba55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000759b  00000000  00000000  000438c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00172c0c  00000000  00000000  0004ae5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bda6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001980  00000000  00000000  001bdab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001bf430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001bb4 	.word	0x08001bb4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001bb4 	.word	0x08001bb4

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000444:	bf00      	nop
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <ExitRun0Mode+0x2c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	58024800 	.word	0x58024800

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800046a:	f000 f8c3 	bl	80005f4 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000472:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b20      	ldr	r3, [pc, #128]	@ (80004f8 <main+0x94>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d004      	beq.n	800048c <main+0x28>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x12>
  if ( timeout < 0 )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x32>
  {
  Error_Handler();
 8000492:	f000 f8db 	bl	800064c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000496:	f000 f955 	bl	8000744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049a:	f000 f82f 	bl	80004fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800049e:	4b16      	ldr	r3, [pc, #88]	@ (80004f8 <main+0x94>)
 80004a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004a4:	4a14      	ldr	r2, [pc, #80]	@ (80004f8 <main+0x94>)
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004ae:	4b12      	ldr	r3, [pc, #72]	@ (80004f8 <main+0x94>)
 80004b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004bc:	2000      	movs	r0, #0
 80004be:	f000 fb3b 	bl	8000b38 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004c2:	2100      	movs	r1, #0
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 fb51 	bl	8000b6c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004ce:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004d0:	bf00      	nop
 80004d2:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <main+0x94>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d104      	bne.n	80004e8 <main+0x84>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	1e5a      	subs	r2, r3, #1
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dcf4      	bgt.n	80004d2 <main+0x6e>
if ( timeout < 0 )
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	da02      	bge.n	80004f4 <main+0x90>
{
Error_Handler();
 80004ee:	f000 f8ad 	bl	800064c <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <main+0x90>
 80004f8:	58024400 	.word	0x58024400

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b09c      	sub	sp, #112	@ 0x70
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000506:	224c      	movs	r2, #76	@ 0x4c
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fb26 	bl	8001b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2220      	movs	r2, #32
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f001 fb20 	bl	8001b5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800051c:	2004      	movs	r0, #4
 800051e:	f000 fb39 	bl	8000b94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	4b31      	ldr	r3, [pc, #196]	@ (80005ec <SystemClock_Config+0xf0>)
 8000528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800052a:	4a30      	ldr	r2, [pc, #192]	@ (80005ec <SystemClock_Config+0xf0>)
 800052c:	f023 0301 	bic.w	r3, r3, #1
 8000530:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000532:	4b2e      	ldr	r3, [pc, #184]	@ (80005ec <SystemClock_Config+0xf0>)
 8000534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <SystemClock_Config+0xf4>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000544:	4a2a      	ldr	r2, [pc, #168]	@ (80005f0 <SystemClock_Config+0xf4>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <SystemClock_Config+0xf4>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000558:	bf00      	nop
 800055a:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <SystemClock_Config+0xf4>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000566:	d1f8      	bne.n	800055a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800056c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000570:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	2302      	movs	r3, #2
 8000578:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800057a:	2304      	movs	r3, #4
 800057c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 800057e:	2314      	movs	r3, #20
 8000580:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 6;
 8000582:	2306      	movs	r3, #6
 8000584:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000586:	2302      	movs	r3, #2
 8000588:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800058a:	2302      	movs	r3, #2
 800058c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800058e:	230c      	movs	r3, #12
 8000590:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000592:	2300      	movs	r3, #0
 8000594:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fb52 	bl	8000c48 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005aa:	f000 f84f 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	233f      	movs	r3, #63	@ 0x3f
 80005b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2303      	movs	r3, #3
 80005b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 ff92 	bl	80014fc <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80005de:	f000 f835 	bl	800064c <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3770      	adds	r7, #112	@ 0x70
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	58000400 	.word	0x58000400
 80005f0:	58024800 	.word	0x58024800

080005f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000606:	f000 fa1f 	bl	8000a48 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800060a:	2301      	movs	r3, #1
 800060c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800060e:	2300      	movs	r3, #0
 8000610:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000616:	231f      	movs	r3, #31
 8000618:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800061a:	2387      	movs	r3, #135	@ 0x87
 800061c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800061e:	2300      	movs	r3, #0
 8000620:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000622:	2300      	movs	r3, #0
 8000624:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000626:	2301      	movs	r3, #1
 8000628:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800062a:	2301      	movs	r3, #1
 800062c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800062e:	2300      	movs	r3, #0
 8000630:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000636:	463b      	mov	r3, r7
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fa3d 	bl	8000ab8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800063e:	2004      	movs	r0, #4
 8000640:	f000 fa1a 	bl	8000a78 <HAL_MPU_Enable>

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <Error_Handler+0x8>

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <HAL_MspInit+0x30>)
 8000660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000664:	4a08      	ldr	r2, [pc, #32]	@ (8000688 <HAL_MspInit+0x30>)
 8000666:	f043 0302 	orr.w	r3, r3, #2
 800066a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <HAL_MspInit+0x30>)
 8000670:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000674:	f003 0302 	and.w	r3, r3, #2
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	58024400 	.word	0x58024400

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <NMI_Handler+0x4>

08000694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <HardFault_Handler+0x4>

0800069c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <MemManage_Handler+0x4>

080006a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e2:	f000 f8a1 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80006ec:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000728 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80006f0:	f7ff fea0 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f4:	f7ff fdf0 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	@ (800072c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	@ (8000730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	@ (800073c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071e:	f001 fa25 	bl	8001b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000722:	f7ff fe9f 	bl	8000464 <main>
  bx  lr
 8000726:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000728:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800072c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000730:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000734:	08001be4 	.word	0x08001be4
  ldr r2, =_sbss
 8000738:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800073c:	24000030 	.word	0x24000030

08000740 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC3_IRQHandler>
	...

08000744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074a:	2003      	movs	r0, #3
 800074c:	f000 f94a 	bl	80009e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000750:	f001 f88a 	bl	8001868 <HAL_RCC_GetSysClockFreq>
 8000754:	4602      	mov	r2, r0
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <HAL_Init+0x68>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	0a1b      	lsrs	r3, r3, #8
 800075c:	f003 030f 	and.w	r3, r3, #15
 8000760:	4913      	ldr	r1, [pc, #76]	@ (80007b0 <HAL_Init+0x6c>)
 8000762:	5ccb      	ldrb	r3, [r1, r3]
 8000764:	f003 031f 	and.w	r3, r3, #31
 8000768:	fa22 f303 	lsr.w	r3, r2, r3
 800076c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <HAL_Init+0x68>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <HAL_Init+0x6c>)
 8000778:	5cd3      	ldrb	r3, [r2, r3]
 800077a:	f003 031f 	and.w	r3, r3, #31
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	fa22 f303 	lsr.w	r3, r2, r3
 8000784:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <HAL_Init+0x70>)
 8000786:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000788:	4a0b      	ldr	r2, [pc, #44]	@ (80007b8 <HAL_Init+0x74>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800078e:	200f      	movs	r0, #15
 8000790:	f000 f814 	bl	80007bc <HAL_InitTick>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e002      	b.n	80007a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800079e:	f7ff ff5b 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	58024400 	.word	0x58024400
 80007b0:	08001bcc 	.word	0x08001bcc
 80007b4:	24000004 	.word	0x24000004
 80007b8:	24000000 	.word	0x24000000

080007bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007c4:	4b15      	ldr	r3, [pc, #84]	@ (800081c <HAL_InitTick+0x60>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007cc:	2301      	movs	r3, #1
 80007ce:	e021      	b.n	8000814 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007d0:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <HAL_InitTick+0x64>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <HAL_InitTick+0x60>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f921 	bl	8000a2e <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f000 f8f9 	bl	80009fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <HAL_InitTick+0x68>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2400000c 	.word	0x2400000c
 8000820:	24000000 	.word	0x24000000
 8000824:	24000008 	.word	0x24000008

08000828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <HAL_IncTick+0x20>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_IncTick+0x24>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a04      	ldr	r2, [pc, #16]	@ (800084c <HAL_IncTick+0x24>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	2400000c 	.word	0x2400000c
 800084c:	2400002c 	.word	0x2400002c

08000850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <HAL_GetTick+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	2400002c 	.word	0x2400002c

08000868 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800086c:	4b03      	ldr	r3, [pc, #12]	@ (800087c <HAL_GetREVID+0x14>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	0c1b      	lsrs	r3, r3, #16
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	5c001000 	.word	0x5c001000

08000880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <__NVIC_SetPriorityGrouping+0x40>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ae:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <__NVIC_SetPriorityGrouping+0x40>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	60d3      	str	r3, [r2, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00
 80008c4:	05fa0000 	.word	0x05fa0000

080008c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	f003 0307 	and.w	r3, r3, #7
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db0a      	blt.n	800090e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	490c      	ldr	r1, [pc, #48]	@ (8000930 <__NVIC_SetPriority+0x4c>)
 80008fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800090c:	e00a      	b.n	8000924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4908      	ldr	r1, [pc, #32]	@ (8000934 <__NVIC_SetPriority+0x50>)
 8000914:	88fb      	ldrh	r3, [r7, #6]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	3b04      	subs	r3, #4
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	440b      	add	r3, r1
 8000922:	761a      	strb	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	@ 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f1c3 0307 	rsb	r3, r3, #7
 8000952:	2b04      	cmp	r3, #4
 8000954:	bf28      	it	cs
 8000956:	2304      	movcs	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	2b06      	cmp	r3, #6
 8000960:	d902      	bls.n	8000968 <NVIC_EncodePriority+0x30>
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3b03      	subs	r3, #3
 8000966:	e000      	b.n	800096a <NVIC_EncodePriority+0x32>
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43d9      	mvns	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	4313      	orrs	r3, r2
         );
}
 8000992:	4618      	mov	r0, r3
 8000994:	3724      	adds	r7, #36	@ 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009b0:	d301      	bcc.n	80009b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00f      	b.n	80009d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <SysTick_Config+0x40>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009be:	210f      	movs	r1, #15
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f7ff ff8e 	bl	80008e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c8:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <SysTick_Config+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ce:	4b04      	ldr	r3, [pc, #16]	@ (80009e0 <SysTick_Config+0x40>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	e000e010 	.word	0xe000e010

080009e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff47 	bl	8000880 <__NVIC_SetPriorityGrouping>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a08:	f7ff ff5e 	bl	80008c8 <__NVIC_GetPriorityGrouping>
 8000a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	6978      	ldr	r0, [r7, #20]
 8000a14:	f7ff ff90 	bl	8000938 <NVIC_EncodePriority>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff5f 	bl	80008e4 <__NVIC_SetPriority>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ffb2 	bl	80009a0 <SysTick_Config>
 8000a3c:	4603      	mov	r3, r0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000a4c:	f3bf 8f5f 	dmb	sy
}
 8000a50:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000a52:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <HAL_MPU_Disable+0x28>)
 8000a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a56:	4a06      	ldr	r2, [pc, #24]	@ (8000a70 <HAL_MPU_Disable+0x28>)
 8000a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a5c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_MPU_Disable+0x2c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00
 8000a74:	e000ed90 	.word	0xe000ed90

08000a78 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000a80:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab0 <HAL_MPU_Enable+0x38>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <HAL_MPU_Enable+0x3c>)
 8000a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a8e:	4a09      	ldr	r2, [pc, #36]	@ (8000ab4 <HAL_MPU_Enable+0x3c>)
 8000a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a94:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000a96:	f3bf 8f4f 	dsb	sy
}
 8000a9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a9c:	f3bf 8f6f 	isb	sy
}
 8000aa0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed90 	.word	0xe000ed90
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	785a      	ldrb	r2, [r3, #1]
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <HAL_MPU_ConfigRegion+0x7c>)
 8000ac6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <HAL_MPU_ConfigRegion+0x7c>)
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	4a19      	ldr	r2, [pc, #100]	@ (8000b34 <HAL_MPU_ConfigRegion+0x7c>)
 8000ace:	f023 0301 	bic.w	r3, r3, #1
 8000ad2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ad4:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <HAL_MPU_ConfigRegion+0x7c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7b1b      	ldrb	r3, [r3, #12]
 8000ae0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7adb      	ldrb	r3, [r3, #11]
 8000ae6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ae8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7a9b      	ldrb	r3, [r3, #10]
 8000aee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000af0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	7b5b      	ldrb	r3, [r3, #13]
 8000af6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000af8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7b9b      	ldrb	r3, [r3, #14]
 8000afe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7bdb      	ldrb	r3, [r3, #15]
 8000b06:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000b08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	7a5b      	ldrb	r3, [r3, #9]
 8000b0e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7a1b      	ldrb	r3, [r3, #8]
 8000b16:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b18:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b20:	4a04      	ldr	r2, [pc, #16]	@ (8000b34 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b22:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b24:	6113      	str	r3, [r2, #16]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed90 	.word	0xe000ed90

08000b38 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000b40:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <HAL_HSEM_FastTake+0x2c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3320      	adds	r3, #32
 8000b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4a:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <HAL_HSEM_FastTake+0x30>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d101      	bne.n	8000b54 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	e000      	b.n	8000b56 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	58026400 	.word	0x58026400
 8000b68:	80000300 	.word	0x80000300

08000b6c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000b76:	4906      	ldr	r1, [pc, #24]	@ (8000b90 <HAL_HSEM_Release+0x24>)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	58026400 	.word	0x58026400

08000b94 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000b9c:	4b29      	ldr	r3, [pc, #164]	@ (8000c44 <HAL_PWREx_ConfigSupply+0xb0>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	f003 0307 	and.w	r3, r3, #7
 8000ba4:	2b06      	cmp	r3, #6
 8000ba6:	d00a      	beq.n	8000bbe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000ba8:	4b26      	ldr	r3, [pc, #152]	@ (8000c44 <HAL_PWREx_ConfigSupply+0xb0>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d001      	beq.n	8000bba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e040      	b.n	8000c3c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e03e      	b.n	8000c3c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000bbe:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <HAL_PWREx_ConfigSupply+0xb0>)
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8000bc6:	491f      	ldr	r1, [pc, #124]	@ (8000c44 <HAL_PWREx_ConfigSupply+0xb0>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000bce:	f7ff fe3f 	bl	8000850 <HAL_GetTick>
 8000bd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000bd4:	e009      	b.n	8000bea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000bd6:	f7ff fe3b 	bl	8000850 <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000be4:	d901      	bls.n	8000bea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e028      	b.n	8000c3c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <HAL_PWREx_ConfigSupply+0xb0>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bf6:	d1ee      	bne.n	8000bd6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b1e      	cmp	r3, #30
 8000bfc:	d008      	beq.n	8000c10 <HAL_PWREx_ConfigSupply+0x7c>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c02:	d005      	beq.n	8000c10 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b1d      	cmp	r3, #29
 8000c08:	d002      	beq.n	8000c10 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c0e:	d114      	bne.n	8000c3a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000c10:	f7ff fe1e 	bl	8000850 <HAL_GetTick>
 8000c14:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000c16:	e009      	b.n	8000c2c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000c18:	f7ff fe1a 	bl	8000850 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c26:	d901      	bls.n	8000c2c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e007      	b.n	8000c3c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_PWREx_ConfigSupply+0xb0>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c38:	d1ee      	bne.n	8000c18 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	58024800 	.word	0x58024800

08000c48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	@ 0x30
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f000 bc48 	b.w	80014ec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 8088 	beq.w	8000d7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c6a:	4b99      	ldr	r3, [pc, #612]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000c74:	4b96      	ldr	r3, [pc, #600]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c7c:	2b10      	cmp	r3, #16
 8000c7e:	d007      	beq.n	8000c90 <HAL_RCC_OscConfig+0x48>
 8000c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c82:	2b18      	cmp	r3, #24
 8000c84:	d111      	bne.n	8000caa <HAL_RCC_OscConfig+0x62>
 8000c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d10c      	bne.n	8000caa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c90:	4b8f      	ldr	r3, [pc, #572]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d06d      	beq.n	8000d78 <HAL_RCC_OscConfig+0x130>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d169      	bne.n	8000d78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	f000 bc21 	b.w	80014ec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cb2:	d106      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x7a>
 8000cb4:	4b86      	ldr	r3, [pc, #536]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a85      	ldr	r2, [pc, #532]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	e02e      	b.n	8000d20 <HAL_RCC_OscConfig+0xd8>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10c      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x9c>
 8000cca:	4b81      	ldr	r3, [pc, #516]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a80      	ldr	r2, [pc, #512]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	4b7e      	ldr	r3, [pc, #504]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a7d      	ldr	r2, [pc, #500]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000cdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	e01d      	b.n	8000d20 <HAL_RCC_OscConfig+0xd8>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cec:	d10c      	bne.n	8000d08 <HAL_RCC_OscConfig+0xc0>
 8000cee:	4b78      	ldr	r3, [pc, #480]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a77      	ldr	r2, [pc, #476]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	4b75      	ldr	r3, [pc, #468]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a74      	ldr	r2, [pc, #464]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e00b      	b.n	8000d20 <HAL_RCC_OscConfig+0xd8>
 8000d08:	4b71      	ldr	r3, [pc, #452]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a70      	ldr	r2, [pc, #448]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	4b6e      	ldr	r3, [pc, #440]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a6d      	ldr	r2, [pc, #436]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d013      	beq.n	8000d50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d28:	f7ff fd92 	bl	8000850 <HAL_GetTick>
 8000d2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d30:	f7ff fd8e 	bl	8000850 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b64      	cmp	r3, #100	@ 0x64
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e3d4      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d42:	4b63      	ldr	r3, [pc, #396]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f0      	beq.n	8000d30 <HAL_RCC_OscConfig+0xe8>
 8000d4e:	e014      	b.n	8000d7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d50:	f7ff fd7e 	bl	8000850 <HAL_GetTick>
 8000d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d56:	e008      	b.n	8000d6a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d58:	f7ff fd7a 	bl	8000850 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b64      	cmp	r3, #100	@ 0x64
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e3c0      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d6a:	4b59      	ldr	r3, [pc, #356]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f0      	bne.n	8000d58 <HAL_RCC_OscConfig+0x110>
 8000d76:	e000      	b.n	8000d7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 80ca 	beq.w	8000f1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d88:	4b51      	ldr	r3, [pc, #324]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000d90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000d92:	4b4f      	ldr	r3, [pc, #316]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d96:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000d98:	6a3b      	ldr	r3, [r7, #32]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d007      	beq.n	8000dae <HAL_RCC_OscConfig+0x166>
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	2b18      	cmp	r3, #24
 8000da2:	d156      	bne.n	8000e52 <HAL_RCC_OscConfig+0x20a>
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d151      	bne.n	8000e52 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000dae:	4b48      	ldr	r3, [pc, #288]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d005      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x17e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e392      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000dc6:	4b42      	ldr	r3, [pc, #264]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f023 0219 	bic.w	r2, r3, #25
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	493f      	ldr	r1, [pc, #252]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fd3a 	bl	8000850 <HAL_GetTick>
 8000ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de0:	f7ff fd36 	bl	8000850 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e37c      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000df2:	4b37      	ldr	r3, [pc, #220]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f0      	beq.n	8000de0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfe:	f7ff fd33 	bl	8000868 <HAL_GetREVID>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d817      	bhi.n	8000e3c <HAL_RCC_OscConfig+0x1f4>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	2b40      	cmp	r3, #64	@ 0x40
 8000e12:	d108      	bne.n	8000e26 <HAL_RCC_OscConfig+0x1de>
 8000e14:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8000e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e22:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e24:	e07a      	b.n	8000f1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e26:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	031b      	lsls	r3, r3, #12
 8000e34:	4926      	ldr	r1, [pc, #152]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e3a:	e06f      	b.n	8000f1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	061b      	lsls	r3, r3, #24
 8000e4a:	4921      	ldr	r1, [pc, #132]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e50:	e064      	b.n	8000f1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d047      	beq.n	8000eea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 0219 	bic.w	r2, r3, #25
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	491a      	ldr	r1, [pc, #104]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fcf0 	bl	8000850 <HAL_GetTick>
 8000e70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e74:	f7ff fcec 	bl	8000850 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e332      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e86:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f0      	beq.n	8000e74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e92:	f7ff fce9 	bl	8000868 <HAL_GetREVID>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d819      	bhi.n	8000ed4 <HAL_RCC_OscConfig+0x28c>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	2b40      	cmp	r3, #64	@ 0x40
 8000ea6:	d108      	bne.n	8000eba <HAL_RCC_OscConfig+0x272>
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8000eb0:	4a07      	ldr	r2, [pc, #28]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb6:	6053      	str	r3, [r2, #4]
 8000eb8:	e030      	b.n	8000f1c <HAL_RCC_OscConfig+0x2d4>
 8000eba:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	031b      	lsls	r3, r3, #12
 8000ec8:	4901      	ldr	r1, [pc, #4]	@ (8000ed0 <HAL_RCC_OscConfig+0x288>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	604b      	str	r3, [r1, #4]
 8000ece:	e025      	b.n	8000f1c <HAL_RCC_OscConfig+0x2d4>
 8000ed0:	58024400 	.word	0x58024400
 8000ed4:	4b9a      	ldr	r3, [pc, #616]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	061b      	lsls	r3, r3, #24
 8000ee2:	4997      	ldr	r1, [pc, #604]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
 8000ee8:	e018      	b.n	8000f1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eea:	4b95      	ldr	r3, [pc, #596]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a94      	ldr	r2, [pc, #592]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef6:	f7ff fcab 	bl	8000850 <HAL_GetTick>
 8000efa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efe:	f7ff fca7 	bl	8000850 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e2ed      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f10:	4b8b      	ldr	r3, [pc, #556]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1f0      	bne.n	8000efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80a9 	beq.w	800107c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f2a:	4b85      	ldr	r3, [pc, #532]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000f32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f34:	4b82      	ldr	r3, [pc, #520]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d007      	beq.n	8000f50 <HAL_RCC_OscConfig+0x308>
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2b18      	cmp	r3, #24
 8000f44:	d13a      	bne.n	8000fbc <HAL_RCC_OscConfig+0x374>
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d135      	bne.n	8000fbc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f50:	4b7b      	ldr	r3, [pc, #492]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <HAL_RCC_OscConfig+0x320>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	2b80      	cmp	r3, #128	@ 0x80
 8000f62:	d001      	beq.n	8000f68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e2c1      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f68:	f7ff fc7e 	bl	8000868 <HAL_GetREVID>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d817      	bhi.n	8000fa6 <HAL_RCC_OscConfig+0x35e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	2b20      	cmp	r3, #32
 8000f7c:	d108      	bne.n	8000f90 <HAL_RCC_OscConfig+0x348>
 8000f7e:	4b70      	ldr	r3, [pc, #448]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8000f86:	4a6e      	ldr	r2, [pc, #440]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000f88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000f8c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f8e:	e075      	b.n	800107c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f90:	4b6b      	ldr	r3, [pc, #428]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	069b      	lsls	r3, r3, #26
 8000f9e:	4968      	ldr	r1, [pc, #416]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000fa4:	e06a      	b.n	800107c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000fa6:	4b66      	ldr	r3, [pc, #408]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	061b      	lsls	r3, r3, #24
 8000fb4:	4962      	ldr	r1, [pc, #392]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000fba:	e05f      	b.n	800107c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d042      	beq.n	800104a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a5d      	ldr	r2, [pc, #372]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fc3e 	bl	8000850 <HAL_GetTick>
 8000fd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000fd8:	f7ff fc3a 	bl	8000850 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e280      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000fea:	4b55      	ldr	r3, [pc, #340]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f0      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000ff6:	f7ff fc37 	bl	8000868 <HAL_GetREVID>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001000:	4293      	cmp	r3, r2
 8001002:	d817      	bhi.n	8001034 <HAL_RCC_OscConfig+0x3ec>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	2b20      	cmp	r3, #32
 800100a:	d108      	bne.n	800101e <HAL_RCC_OscConfig+0x3d6>
 800100c:	4b4c      	ldr	r3, [pc, #304]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001014:	4a4a      	ldr	r2, [pc, #296]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8001016:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800101a:	6053      	str	r3, [r2, #4]
 800101c:	e02e      	b.n	800107c <HAL_RCC_OscConfig+0x434>
 800101e:	4b48      	ldr	r3, [pc, #288]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	069b      	lsls	r3, r3, #26
 800102c:	4944      	ldr	r1, [pc, #272]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 800102e:	4313      	orrs	r3, r2
 8001030:	604b      	str	r3, [r1, #4]
 8001032:	e023      	b.n	800107c <HAL_RCC_OscConfig+0x434>
 8001034:	4b42      	ldr	r3, [pc, #264]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	061b      	lsls	r3, r3, #24
 8001042:	493f      	ldr	r1, [pc, #252]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8001044:	4313      	orrs	r3, r2
 8001046:	60cb      	str	r3, [r1, #12]
 8001048:	e018      	b.n	800107c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800104a:	4b3d      	ldr	r3, [pc, #244]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a3c      	ldr	r2, [pc, #240]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8001050:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001056:	f7ff fbfb 	bl	8000850 <HAL_GetTick>
 800105a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800105e:	f7ff fbf7 	bl	8000850 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e23d      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001070:	4b33      	ldr	r3, [pc, #204]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f0      	bne.n	800105e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	2b00      	cmp	r3, #0
 8001086:	d036      	beq.n	80010f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d019      	beq.n	80010c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001090:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8001092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001094:	4a2a      	ldr	r2, [pc, #168]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109c:	f7ff fbd8 	bl	8000850 <HAL_GetTick>
 80010a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a4:	f7ff fbd4 	bl	8000850 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e21a      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010b6:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 80010b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0x45c>
 80010c2:	e018      	b.n	80010f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 80010c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 80010ca:	f023 0301 	bic.w	r3, r3, #1
 80010ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d0:	f7ff fbbe 	bl	8000850 <HAL_GetTick>
 80010d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fbba 	bl	8000850 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e200      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 80010ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0320 	and.w	r3, r3, #32
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d039      	beq.n	8001176 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d01c      	beq.n	8001144 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800110a:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a0c      	ldr	r2, [pc, #48]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8001110:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001114:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001116:	f7ff fb9b 	bl	8000850 <HAL_GetTick>
 800111a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800111e:	f7ff fb97 	bl	8000850 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e1dd      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x4d6>
 800113c:	e01b      	b.n	8001176 <HAL_RCC_OscConfig+0x52e>
 800113e:	bf00      	nop
 8001140:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001144:	4b9b      	ldr	r3, [pc, #620]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a9a      	ldr	r2, [pc, #616]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 800114a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800114e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001150:	f7ff fb7e 	bl	8000850 <HAL_GetTick>
 8001154:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001158:	f7ff fb7a 	bl	8000850 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1c0      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800116a:	4b92      	ldr	r3, [pc, #584]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8081 	beq.w	8001286 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001184:	4b8c      	ldr	r3, [pc, #560]	@ (80013b8 <HAL_RCC_OscConfig+0x770>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a8b      	ldr	r2, [pc, #556]	@ (80013b8 <HAL_RCC_OscConfig+0x770>)
 800118a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001190:	f7ff fb5e 	bl	8000850 <HAL_GetTick>
 8001194:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001198:	f7ff fb5a 	bl	8000850 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	@ 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e1a0      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80011aa:	4b83      	ldr	r3, [pc, #524]	@ (80013b8 <HAL_RCC_OscConfig+0x770>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d106      	bne.n	80011cc <HAL_RCC_OscConfig+0x584>
 80011be:	4b7d      	ldr	r3, [pc, #500]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80011c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011c2:	4a7c      	ldr	r2, [pc, #496]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80011ca:	e02d      	b.n	8001228 <HAL_RCC_OscConfig+0x5e0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10c      	bne.n	80011ee <HAL_RCC_OscConfig+0x5a6>
 80011d4:	4b77      	ldr	r3, [pc, #476]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80011d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011d8:	4a76      	ldr	r2, [pc, #472]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80011da:	f023 0301 	bic.w	r3, r3, #1
 80011de:	6713      	str	r3, [r2, #112]	@ 0x70
 80011e0:	4b74      	ldr	r3, [pc, #464]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80011e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011e4:	4a73      	ldr	r2, [pc, #460]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80011e6:	f023 0304 	bic.w	r3, r3, #4
 80011ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80011ec:	e01c      	b.n	8001228 <HAL_RCC_OscConfig+0x5e0>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x5c8>
 80011f6:	4b6f      	ldr	r3, [pc, #444]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80011f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011fa:	4a6e      	ldr	r2, [pc, #440]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6713      	str	r3, [r2, #112]	@ 0x70
 8001202:	4b6c      	ldr	r3, [pc, #432]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001206:	4a6b      	ldr	r2, [pc, #428]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6713      	str	r3, [r2, #112]	@ 0x70
 800120e:	e00b      	b.n	8001228 <HAL_RCC_OscConfig+0x5e0>
 8001210:	4b68      	ldr	r3, [pc, #416]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001214:	4a67      	ldr	r2, [pc, #412]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	6713      	str	r3, [r2, #112]	@ 0x70
 800121c:	4b65      	ldr	r3, [pc, #404]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 800121e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001220:	4a64      	ldr	r2, [pc, #400]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001222:	f023 0304 	bic.w	r3, r3, #4
 8001226:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d015      	beq.n	800125c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001230:	f7ff fb0e 	bl	8000850 <HAL_GetTick>
 8001234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001236:	e00a      	b.n	800124e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001238:	f7ff fb0a 	bl	8000850 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001246:	4293      	cmp	r3, r2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e14e      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800124e:	4b59      	ldr	r3, [pc, #356]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0ee      	beq.n	8001238 <HAL_RCC_OscConfig+0x5f0>
 800125a:	e014      	b.n	8001286 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125c:	f7ff faf8 	bl	8000850 <HAL_GetTick>
 8001260:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001262:	e00a      	b.n	800127a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001264:	f7ff faf4 	bl	8000850 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001272:	4293      	cmp	r3, r2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e138      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800127a:	4b4e      	ldr	r3, [pc, #312]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 800127c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1ee      	bne.n	8001264 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 812d 	beq.w	80014ea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001290:	4b48      	ldr	r3, [pc, #288]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001298:	2b18      	cmp	r3, #24
 800129a:	f000 80bd 	beq.w	8001418 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	f040 809e 	bne.w	80013e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a8:	4b42      	ldr	r3, [pc, #264]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a41      	ldr	r2, [pc, #260]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80012ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff facc 	bl	8000850 <HAL_GetTick>
 80012b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012bc:	f7ff fac8 	bl	8000850 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e10e      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012ce:	4b39      	ldr	r3, [pc, #228]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012da:	4b36      	ldr	r3, [pc, #216]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80012dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012de:	4b37      	ldr	r3, [pc, #220]	@ (80013bc <HAL_RCC_OscConfig+0x774>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	430a      	orrs	r2, r1
 80012ee:	4931      	ldr	r1, [pc, #196]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f8:	3b01      	subs	r3, #1
 80012fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001302:	3b01      	subs	r3, #1
 8001304:	025b      	lsls	r3, r3, #9
 8001306:	b29b      	uxth	r3, r3
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800130e:	3b01      	subs	r3, #1
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800131c:	3b01      	subs	r3, #1
 800131e:	061b      	lsls	r3, r3, #24
 8001320:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001324:	4923      	ldr	r1, [pc, #140]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001326:	4313      	orrs	r3, r2
 8001328:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800132a:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 800132c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132e:	4a21      	ldr	r2, [pc, #132]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001336:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <HAL_RCC_OscConfig+0x778>)
 800133c:	4013      	ands	r3, r2
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001342:	00d2      	lsls	r2, r2, #3
 8001344:	491b      	ldr	r1, [pc, #108]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001346:	4313      	orrs	r3, r2
 8001348:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800134a:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 800134c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134e:	f023 020c 	bic.w	r2, r3, #12
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	4917      	ldr	r1, [pc, #92]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001358:	4313      	orrs	r3, r2
 800135a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 800135e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001360:	f023 0202 	bic.w	r2, r3, #2
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001368:	4912      	ldr	r1, [pc, #72]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 800136a:	4313      	orrs	r3, r2
 800136c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001372:	4a10      	ldr	r2, [pc, #64]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 800137c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137e:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001384:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138a:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001396:	4a07      	ldr	r2, [pc, #28]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800139e:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <HAL_RCC_OscConfig+0x76c>)
 80013a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fa51 	bl	8000850 <HAL_GetTick>
 80013ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013b0:	e011      	b.n	80013d6 <HAL_RCC_OscConfig+0x78e>
 80013b2:	bf00      	nop
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58024800 	.word	0x58024800
 80013bc:	fffffc0c 	.word	0xfffffc0c
 80013c0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff fa44 	bl	8000850 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e08a      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013d6:	4b47      	ldr	r3, [pc, #284]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x77c>
 80013e2:	e082      	b.n	80014ea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e4:	4b43      	ldr	r3, [pc, #268]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a42      	ldr	r2, [pc, #264]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 80013ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fa2e 	bl	8000850 <HAL_GetTick>
 80013f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff fa2a 	bl	8000850 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e070      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800140a:	4b3a      	ldr	r3, [pc, #232]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x7b0>
 8001416:	e068      	b.n	80014ea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001418:	4b36      	ldr	r3, [pc, #216]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 800141a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800141e:	4b35      	ldr	r3, [pc, #212]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001428:	2b01      	cmp	r3, #1
 800142a:	d031      	beq.n	8001490 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	f003 0203 	and.w	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001436:	429a      	cmp	r2, r3
 8001438:	d12a      	bne.n	8001490 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	429a      	cmp	r2, r3
 8001448:	d122      	bne.n	8001490 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001454:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d11a      	bne.n	8001490 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	0a5b      	lsrs	r3, r3, #9
 800145e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001466:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001468:	429a      	cmp	r2, r3
 800146a:	d111      	bne.n	8001490 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	0c1b      	lsrs	r3, r3, #16
 8001470:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001478:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800147a:	429a      	cmp	r2, r3
 800147c:	d108      	bne.n	8001490 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	0e1b      	lsrs	r3, r3, #24
 8001482:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800148a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e02b      	b.n	80014ec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 8001496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800149e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d01f      	beq.n	80014ea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 80014ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ae:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014b6:	f7ff f9cb 	bl	8000850 <HAL_GetTick>
 80014ba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80014bc:	bf00      	nop
 80014be:	f7ff f9c7 	bl	8000850 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d0f9      	beq.n	80014be <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 80014cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_RCC_OscConfig+0x8b0>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80014d6:	00d2      	lsls	r2, r2, #3
 80014d8:	4906      	ldr	r1, [pc, #24]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80014de:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 80014e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e2:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_RCC_OscConfig+0x8ac>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3730      	adds	r7, #48	@ 0x30
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	58024400 	.word	0x58024400
 80014f8:	ffff0007 	.word	0xffff0007

080014fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e19c      	b.n	800184a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001510:	4b8a      	ldr	r3, [pc, #552]	@ (800173c <HAL_RCC_ClockConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d910      	bls.n	8001540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	4b87      	ldr	r3, [pc, #540]	@ (800173c <HAL_RCC_ClockConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 020f 	bic.w	r2, r3, #15
 8001526:	4985      	ldr	r1, [pc, #532]	@ (800173c <HAL_RCC_ClockConfig+0x240>)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800152e:	4b83      	ldr	r3, [pc, #524]	@ (800173c <HAL_RCC_ClockConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e184      	b.n	800184a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d010      	beq.n	800156e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	4b7b      	ldr	r3, [pc, #492]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001558:	429a      	cmp	r2, r3
 800155a:	d908      	bls.n	800156e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800155c:	4b78      	ldr	r3, [pc, #480]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	4975      	ldr	r1, [pc, #468]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 800156a:	4313      	orrs	r3, r2
 800156c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d010      	beq.n	800159c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	4b70      	ldr	r3, [pc, #448]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001586:	429a      	cmp	r2, r3
 8001588:	d908      	bls.n	800159c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800158a:	4b6d      	ldr	r3, [pc, #436]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	496a      	ldr	r1, [pc, #424]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 8001598:	4313      	orrs	r3, r2
 800159a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d010      	beq.n	80015ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	4b64      	ldr	r3, [pc, #400]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d908      	bls.n	80015ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80015b8:	4b61      	ldr	r3, [pc, #388]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	495e      	ldr	r1, [pc, #376]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0320 	and.w	r3, r3, #32
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d010      	beq.n	80015f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69da      	ldr	r2, [r3, #28]
 80015da:	4b59      	ldr	r3, [pc, #356]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d908      	bls.n	80015f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80015e6:	4b56      	ldr	r3, [pc, #344]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4953      	ldr	r1, [pc, #332]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d010      	beq.n	8001626 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	4b4d      	ldr	r3, [pc, #308]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	429a      	cmp	r2, r3
 8001612:	d908      	bls.n	8001626 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001614:	4b4a      	ldr	r3, [pc, #296]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f023 020f 	bic.w	r2, r3, #15
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4947      	ldr	r1, [pc, #284]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 8001622:	4313      	orrs	r3, r2
 8001624:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d055      	beq.n	80016de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001632:	4b43      	ldr	r3, [pc, #268]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	4940      	ldr	r1, [pc, #256]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 8001640:	4313      	orrs	r3, r2
 8001642:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d107      	bne.n	800165c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800164c:	4b3c      	ldr	r3, [pc, #240]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d121      	bne.n	800169c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0f6      	b.n	800184a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d107      	bne.n	8001674 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001664:	4b36      	ldr	r3, [pc, #216]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d115      	bne.n	800169c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0ea      	b.n	800184a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d107      	bne.n	800168c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800167c:	4b30      	ldr	r3, [pc, #192]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d109      	bne.n	800169c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0de      	b.n	800184a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800168c:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0d6      	b.n	800184a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800169c:	4b28      	ldr	r3, [pc, #160]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f023 0207 	bic.w	r2, r3, #7
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4925      	ldr	r1, [pc, #148]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016ae:	f7ff f8cf 	bl	8000850 <HAL_GetTick>
 80016b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b6:	f7ff f8cb 	bl	8000850 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0be      	b.n	800184a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	429a      	cmp	r2, r3
 80016dc:	d1eb      	bne.n	80016b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d010      	beq.n	800170c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d208      	bcs.n	800170c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f023 020f 	bic.w	r2, r3, #15
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	490e      	ldr	r1, [pc, #56]	@ (8001740 <HAL_RCC_ClockConfig+0x244>)
 8001708:	4313      	orrs	r3, r2
 800170a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <HAL_RCC_ClockConfig+0x240>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d214      	bcs.n	8001744 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b08      	ldr	r3, [pc, #32]	@ (800173c <HAL_RCC_ClockConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 020f 	bic.w	r2, r3, #15
 8001722:	4906      	ldr	r1, [pc, #24]	@ (800173c <HAL_RCC_ClockConfig+0x240>)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b04      	ldr	r3, [pc, #16]	@ (800173c <HAL_RCC_ClockConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e086      	b.n	800184a <HAL_RCC_ClockConfig+0x34e>
 800173c:	52002000 	.word	0x52002000
 8001740:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d010      	beq.n	8001772 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	4b3f      	ldr	r3, [pc, #252]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800175c:	429a      	cmp	r2, r3
 800175e:	d208      	bcs.n	8001772 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001760:	4b3c      	ldr	r3, [pc, #240]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	4939      	ldr	r1, [pc, #228]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 800176e:	4313      	orrs	r3, r2
 8001770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d010      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	4b34      	ldr	r3, [pc, #208]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800178a:	429a      	cmp	r2, r3
 800178c:	d208      	bcs.n	80017a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800178e:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	492e      	ldr	r1, [pc, #184]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 800179c:	4313      	orrs	r3, r2
 800179e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d010      	beq.n	80017ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699a      	ldr	r2, [r3, #24]
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d208      	bcs.n	80017ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80017bc:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4922      	ldr	r1, [pc, #136]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d010      	beq.n	80017fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d208      	bcs.n	80017fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80017ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4917      	ldr	r1, [pc, #92]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017fc:	f000 f834 	bl	8001868 <HAL_RCC_GetSysClockFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	4912      	ldr	r1, [pc, #72]	@ (8001858 <HAL_RCC_ClockConfig+0x35c>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
 8001818:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_RCC_ClockConfig+0x358>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <HAL_RCC_ClockConfig+0x35c>)
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
 8001830:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <HAL_RCC_ClockConfig+0x360>)
 8001832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001834:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <HAL_RCC_ClockConfig+0x364>)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <HAL_RCC_ClockConfig+0x368>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe ffbc 	bl	80007bc <HAL_InitTick>
 8001844:	4603      	mov	r3, r0
 8001846:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	58024400 	.word	0x58024400
 8001858:	08001bcc 	.word	0x08001bcc
 800185c:	24000004 	.word	0x24000004
 8001860:	24000000 	.word	0x24000000
 8001864:	24000008 	.word	0x24000008

08001868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800186e:	4bb3      	ldr	r3, [pc, #716]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001876:	2b18      	cmp	r3, #24
 8001878:	f200 8155 	bhi.w	8001b26 <HAL_RCC_GetSysClockFreq+0x2be>
 800187c:	a201      	add	r2, pc, #4	@ (adr r2, 8001884 <HAL_RCC_GetSysClockFreq+0x1c>)
 800187e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001882:	bf00      	nop
 8001884:	080018e9 	.word	0x080018e9
 8001888:	08001b27 	.word	0x08001b27
 800188c:	08001b27 	.word	0x08001b27
 8001890:	08001b27 	.word	0x08001b27
 8001894:	08001b27 	.word	0x08001b27
 8001898:	08001b27 	.word	0x08001b27
 800189c:	08001b27 	.word	0x08001b27
 80018a0:	08001b27 	.word	0x08001b27
 80018a4:	0800190f 	.word	0x0800190f
 80018a8:	08001b27 	.word	0x08001b27
 80018ac:	08001b27 	.word	0x08001b27
 80018b0:	08001b27 	.word	0x08001b27
 80018b4:	08001b27 	.word	0x08001b27
 80018b8:	08001b27 	.word	0x08001b27
 80018bc:	08001b27 	.word	0x08001b27
 80018c0:	08001b27 	.word	0x08001b27
 80018c4:	08001915 	.word	0x08001915
 80018c8:	08001b27 	.word	0x08001b27
 80018cc:	08001b27 	.word	0x08001b27
 80018d0:	08001b27 	.word	0x08001b27
 80018d4:	08001b27 	.word	0x08001b27
 80018d8:	08001b27 	.word	0x08001b27
 80018dc:	08001b27 	.word	0x08001b27
 80018e0:	08001b27 	.word	0x08001b27
 80018e4:	0800191b 	.word	0x0800191b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018e8:	4b94      	ldr	r3, [pc, #592]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0320 	and.w	r3, r3, #32
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d009      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80018f4:	4b91      	ldr	r3, [pc, #580]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	4a90      	ldr	r2, [pc, #576]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001906:	e111      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001908:	4b8d      	ldr	r3, [pc, #564]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800190a:	61bb      	str	r3, [r7, #24]
      break;
 800190c:	e10e      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800190e:	4b8d      	ldr	r3, [pc, #564]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001910:	61bb      	str	r3, [r7, #24]
      break;
 8001912:	e10b      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001914:	4b8c      	ldr	r3, [pc, #560]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001916:	61bb      	str	r3, [r7, #24]
      break;
 8001918:	e108      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800191a:	4b88      	ldr	r3, [pc, #544]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800191c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001924:	4b85      	ldr	r3, [pc, #532]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800192e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001930:	4b82      	ldr	r3, [pc, #520]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800193a:	4b80      	ldr	r3, [pc, #512]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800193c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800193e:	08db      	lsrs	r3, r3, #3
 8001940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001952:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80e1 	beq.w	8001b20 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b02      	cmp	r3, #2
 8001962:	f000 8083 	beq.w	8001a6c <HAL_RCC_GetSysClockFreq+0x204>
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b02      	cmp	r3, #2
 800196a:	f200 80a1 	bhi.w	8001ab0 <HAL_RCC_GetSysClockFreq+0x248>
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x114>
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d056      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x1c0>
 800197a:	e099      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800197c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	2b00      	cmp	r3, #0
 8001986:	d02d      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001988:	4b6c      	ldr	r3, [pc, #432]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	08db      	lsrs	r3, r3, #3
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	4a6b      	ldr	r2, [pc, #428]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019b2:	4b62      	ldr	r3, [pc, #392]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80019c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 80019ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80019e2:	e087      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001b50 <HAL_RCC_GetSysClockFreq+0x2e8>
 80019f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019f6:	4b51      	ldr	r3, [pc, #324]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a0a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001a26:	e065      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a32:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001b54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a3a:	4b40      	ldr	r3, [pc, #256]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a4e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001a6a:	e043      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a76:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001b58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a92:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001aae:	e021      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001b54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ad6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001af2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af8:	0a5b      	lsrs	r3, r3, #9
 8001afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001afe:	3301      	adds	r3, #1
 8001b00:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b18:	ee17 3a90 	vmov	r3, s15
 8001b1c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001b1e:	e005      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61bb      	str	r3, [r7, #24]
      break;
 8001b24:	e002      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001b26:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001b28:	61bb      	str	r3, [r7, #24]
      break;
 8001b2a:	bf00      	nop
  }

  return sysclockfreq;
 8001b2c:	69bb      	ldr	r3, [r7, #24]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	@ 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	03d09000 	.word	0x03d09000
 8001b44:	003d0900 	.word	0x003d0900
 8001b48:	02dc6c00 	.word	0x02dc6c00
 8001b4c:	46000000 	.word	0x46000000
 8001b50:	4c742400 	.word	0x4c742400
 8001b54:	4a742400 	.word	0x4a742400
 8001b58:	4c371b00 	.word	0x4c371b00

08001b5c <memset>:
 8001b5c:	4402      	add	r2, r0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d100      	bne.n	8001b66 <memset+0xa>
 8001b64:	4770      	bx	lr
 8001b66:	f803 1b01 	strb.w	r1, [r3], #1
 8001b6a:	e7f9      	b.n	8001b60 <memset+0x4>

08001b6c <__libc_init_array>:
 8001b6c:	b570      	push	{r4, r5, r6, lr}
 8001b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8001ba4 <__libc_init_array+0x38>)
 8001b70:	4c0d      	ldr	r4, [pc, #52]	@ (8001ba8 <__libc_init_array+0x3c>)
 8001b72:	1b64      	subs	r4, r4, r5
 8001b74:	10a4      	asrs	r4, r4, #2
 8001b76:	2600      	movs	r6, #0
 8001b78:	42a6      	cmp	r6, r4
 8001b7a:	d109      	bne.n	8001b90 <__libc_init_array+0x24>
 8001b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8001bac <__libc_init_array+0x40>)
 8001b7e:	4c0c      	ldr	r4, [pc, #48]	@ (8001bb0 <__libc_init_array+0x44>)
 8001b80:	f000 f818 	bl	8001bb4 <_init>
 8001b84:	1b64      	subs	r4, r4, r5
 8001b86:	10a4      	asrs	r4, r4, #2
 8001b88:	2600      	movs	r6, #0
 8001b8a:	42a6      	cmp	r6, r4
 8001b8c:	d105      	bne.n	8001b9a <__libc_init_array+0x2e>
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b94:	4798      	blx	r3
 8001b96:	3601      	adds	r6, #1
 8001b98:	e7ee      	b.n	8001b78 <__libc_init_array+0xc>
 8001b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b9e:	4798      	blx	r3
 8001ba0:	3601      	adds	r6, #1
 8001ba2:	e7f2      	b.n	8001b8a <__libc_init_array+0x1e>
 8001ba4:	08001bdc 	.word	0x08001bdc
 8001ba8:	08001bdc 	.word	0x08001bdc
 8001bac:	08001bdc 	.word	0x08001bdc
 8001bb0:	08001be0 	.word	0x08001be0

08001bb4 <_init>:
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb6:	bf00      	nop
 8001bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bba:	bc08      	pop	{r3}
 8001bbc:	469e      	mov	lr, r3
 8001bbe:	4770      	bx	lr

08001bc0 <_fini>:
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	bf00      	nop
 8001bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc6:	bc08      	pop	{r3}
 8001bc8:	469e      	mov	lr, r3
 8001bca:	4770      	bx	lr
