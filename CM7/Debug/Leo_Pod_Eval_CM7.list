
Leo_Pod_Eval_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003680  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003918  08003918  00004918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003940  08003940  000051c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003940  08003940  000051c8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003940  08003940  000051c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003940  08003940  00004940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003944  08003944  00004944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08003948  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAM_D3       000001b8  24000010  08003958  00005010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000028  240001c8  08003b10  000051c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  240001f0  08003b10  000051f0  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000051c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a24d  00000000  00000000  000051f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001adf  00000000  00000000  0000f443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  00010f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000646  00000000  00000000  000117a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038ab8  00000000  00000000  00011dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6ff  00000000  00000000  0004a8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00174064  00000000  00000000  00055fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ca009  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000208c  00000000  00000000  001ca04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001cc0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001c8 	.word	0x240001c8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003900 	.word	0x08003900

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001cc 	.word	0x240001cc
 80002d4:	08003900 	.word	0x08003900

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000444:	bf00      	nop
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <ExitRun0Mode+0x2c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	58024800 	.word	0x58024800

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800046a:	4b56      	ldr	r3, [pc, #344]	@ (80005c4 <main+0x160>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000472:	2b00      	cmp	r3, #0
 8000474:	d11b      	bne.n	80004ae <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000476:	f3bf 8f4f 	dsb	sy
}
 800047a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800047c:	f3bf 8f6f 	isb	sy
}
 8000480:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000482:	4b50      	ldr	r3, [pc, #320]	@ (80005c4 <main+0x160>)
 8000484:	2200      	movs	r2, #0
 8000486:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800048a:	f3bf 8f4f 	dsb	sy
}
 800048e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000490:	f3bf 8f6f 	isb	sy
}
 8000494:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000496:	4b4b      	ldr	r3, [pc, #300]	@ (80005c4 <main+0x160>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a4a      	ldr	r2, [pc, #296]	@ (80005c4 <main+0x160>)
 800049c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004a2:	f3bf 8f4f 	dsb	sy
}
 80004a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a8:	f3bf 8f6f 	isb	sy
}
 80004ac:	e000      	b.n	80004b0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004ae:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004b0:	4b44      	ldr	r3, [pc, #272]	@ (80005c4 <main+0x160>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d138      	bne.n	800052e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004bc:	4b41      	ldr	r3, [pc, #260]	@ (80005c4 <main+0x160>)
 80004be:	2200      	movs	r2, #0
 80004c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004c4:	f3bf 8f4f 	dsb	sy
}
 80004c8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004ca:	4b3e      	ldr	r3, [pc, #248]	@ (80005c4 <main+0x160>)
 80004cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004d0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	0b5b      	lsrs	r3, r3, #13
 80004d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004da:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004dc:	693b      	ldr	r3, [r7, #16]
 80004de:	08db      	lsrs	r3, r3, #3
 80004e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004e4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	015a      	lsls	r2, r3, #5
 80004ea:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80004ee:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f4:	4933      	ldr	r1, [pc, #204]	@ (80005c4 <main+0x160>)
 80004f6:	4313      	orrs	r3, r2
 80004f8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	1e5a      	subs	r2, r3, #1
 8000500:	60ba      	str	r2, [r7, #8]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d1ef      	bne.n	80004e6 <main+0x82>
    } while(sets-- != 0U);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	1e5a      	subs	r2, r3, #1
 800050a:	60fa      	str	r2, [r7, #12]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1e5      	bne.n	80004dc <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000510:	f3bf 8f4f 	dsb	sy
}
 8000514:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000516:	4b2b      	ldr	r3, [pc, #172]	@ (80005c4 <main+0x160>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a2a      	ldr	r2, [pc, #168]	@ (80005c4 <main+0x160>)
 800051c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000520:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000522:	f3bf 8f4f 	dsb	sy
}
 8000526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000528:	f3bf 8f6f 	isb	sy
}
 800052c:	e000      	b.n	8000530 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800052e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000530:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000534:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000536:	bf00      	nop
 8000538:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <main+0x164>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000540:	2b00      	cmp	r3, #0
 8000542:	d004      	beq.n	800054e <main+0xea>
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	617a      	str	r2, [r7, #20]
 800054a:	2b00      	cmp	r3, #0
 800054c:	dcf4      	bgt.n	8000538 <main+0xd4>
  if ( timeout < 0 )
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	2b00      	cmp	r3, #0
 8000552:	da01      	bge.n	8000558 <main+0xf4>
  {
  Error_Handler();
 8000554:	f000 f90c 	bl	8000770 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 fa10 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f836 	bl	80005cc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000560:	f000 f8b4 	bl	80006cc <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000564:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <main+0x164>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800056a:	4a17      	ldr	r2, [pc, #92]	@ (80005c8 <main+0x164>)
 800056c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000570:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000574:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <main+0x164>)
 8000576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800057a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000582:	2000      	movs	r0, #0
 8000584:	f000 fd72 	bl	800106c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000588:	2100      	movs	r1, #0
 800058a:	2000      	movs	r0, #0
 800058c:	f000 fd88 	bl	80010a0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000590:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000594:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000596:	bf00      	nop
 8000598:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <main+0x164>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d104      	bne.n	80005ae <main+0x14a>
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	1e5a      	subs	r2, r3, #1
 80005a8:	617a      	str	r2, [r7, #20]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dcf4      	bgt.n	8000598 <main+0x134>
if ( timeout < 0 )
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da01      	bge.n	80005b8 <main+0x154>
{
Error_Handler();
 80005b4:	f000 f8dc 	bl	8000770 <Error_Handler>
}
/* USER CODE END Boot_Mode_Sequence_2 */
  /* Resource Manager Utility initialisation ---------------------------------*/
  MX_RESMGR_UTILITY_Init();
 80005b8:	f000 f8e0 	bl	800077c <MX_RESMGR_UTILITY_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f8a4 	bl	8000708 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <main+0x15c>
 80005c4:	e000ed00 	.word	0xe000ed00
 80005c8:	58024400 	.word	0x58024400

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b09c      	sub	sp, #112	@ 0x70
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d6:	224c      	movs	r2, #76	@ 0x4c
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 f964 	bl	80038a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2220      	movs	r2, #32
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 f95e 	bl	80038a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005ec:	2004      	movs	r0, #4
 80005ee:	f000 fd6b 	bl	80010c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	4b33      	ldr	r3, [pc, #204]	@ (80006c4 <SystemClock_Config+0xf8>)
 80005f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005fa:	4a32      	ldr	r2, [pc, #200]	@ (80006c4 <SystemClock_Config+0xf8>)
 80005fc:	f023 0301 	bic.w	r3, r3, #1
 8000600:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000602:	4b30      	ldr	r3, [pc, #192]	@ (80006c4 <SystemClock_Config+0xf8>)
 8000604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <SystemClock_Config+0xfc>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a2d      	ldr	r2, [pc, #180]	@ (80006c8 <SystemClock_Config+0xfc>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <SystemClock_Config+0xfc>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000624:	bf00      	nop
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <SystemClock_Config+0xfc>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800062e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000632:	d1f8      	bne.n	8000626 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 8000634:	2312      	movs	r3, #18
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000638:	2301      	movs	r3, #1
 800063a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2340      	movs	r3, #64	@ 0x40
 800063e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000640:	2380      	movs	r3, #128	@ 0x80
 8000642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000644:	2320      	movs	r3, #32
 8000646:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 800064c:	2301      	movs	r3, #1
 800064e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000654:	23c8      	movs	r3, #200	@ 0xc8
 8000656:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000664:	2308      	movs	r3, #8
 8000666:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000668:	2300      	movs	r3, #0
 800066a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fd81 	bl	800117c <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000680:	f000 f876 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	233f      	movs	r3, #63	@ 0x3f
 8000686:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000690:	2308      	movs	r3, #8
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000694:	2340      	movs	r3, #64	@ 0x40
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000698:	2340      	movs	r3, #64	@ 0x40
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800069c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006a2:	2340      	movs	r3, #64	@ 0x40
 80006a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f9c0 	bl	8001a30 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006b6:	f000 f85b 	bl	8000770 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3770      	adds	r7, #112	@ 0x70
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	58000400 	.word	0x58000400
 80006c8:	58024800 	.word	0x58024800

080006cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b0b0      	sub	sp, #192	@ 0xc0
 80006d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	22c0      	movs	r2, #192	@ 0xc0
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 f8e5 	bl	80038a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80006de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80006e2:	f04f 0300 	mov.w	r3, #0
 80006e6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80006ea:	2300      	movs	r3, #0
 80006ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fccd 	bl	8002090 <HAL_RCCEx_PeriphCLKConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 80006fc:	f000 f838 	bl	8000770 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	37c0      	adds	r7, #192	@ 0xc0
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_GPIO_Init+0x60>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000722:	4a11      	ldr	r2, [pc, #68]	@ (8000768 <MX_GPIO_Init+0x60>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_GPIO_Init+0x60>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2101      	movs	r1, #1
 800073e:	480b      	ldr	r0, [pc, #44]	@ (800076c <MX_GPIO_Init+0x64>)
 8000740:	f000 fc7a 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED1_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin;
 8000744:	2301      	movs	r3, #1
 8000746:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(USER_LED1_GPIO_Port, &GPIO_InitStruct);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4804      	ldr	r0, [pc, #16]	@ (800076c <MX_GPIO_Init+0x64>)
 800075a:	f000 fabd 	bl	8000cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	58024400 	.word	0x58024400
 800076c:	58020400 	.word	0x58020400

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <Error_Handler+0x8>

0800077c <MX_RESMGR_UTILITY_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* RESMGR_UTILITY init function */
void MX_RESMGR_UTILITY_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  if (ResMgr_Init(MX_RESMGR_UTILITY_SendMsg, MX_RESMGR_UTILITY_Callback) != RESMGR_OK)
 8000780:	4905      	ldr	r1, [pc, #20]	@ (8000798 <MX_RESMGR_UTILITY_Init+0x1c>)
 8000782:	4806      	ldr	r0, [pc, #24]	@ (800079c <MX_RESMGR_UTILITY_Init+0x20>)
 8000784:	f002 fff2 	bl	800376c <ResMgr_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_RESMGR_UTILITY_Init+0x16>
  {
    Error_Handler();
 800078e:	f7ff ffef 	bl	8000770 <Error_Handler>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	080007ed 	.word	0x080007ed
 800079c:	080007a1 	.word	0x080007a1

080007a0 <MX_RESMGR_UTILITY_SendMsg>:

/* Resource Manager send message function */
__weak void MX_RESMGR_UTILITY_SendMsg(uint32_t id, uint32_t msg)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 4 */
    switch (msg)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2b05      	cmp	r3, #5
 80007ae:	d811      	bhi.n	80007d4 <MX_RESMGR_UTILITY_SendMsg+0x34>
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2b05      	cmp	r3, #5
 80007b4:	d811      	bhi.n	80007da <MX_RESMGR_UTILITY_SendMsg+0x3a>
 80007b6:	a201      	add	r2, pc, #4	@ (adr r2, 80007bc <MX_RESMGR_UTILITY_SendMsg+0x1c>)
 80007b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007bc:	080007db 	.word	0x080007db
 80007c0:	080007db 	.word	0x080007db
 80007c4:	080007db 	.word	0x080007db
 80007c8:	080007db 	.word	0x080007db
 80007cc:	080007db 	.word	0x080007db
 80007d0:	080007db 	.word	0x080007db
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2bff      	cmp	r3, #255	@ 0xff
 80007d8:	d001      	beq.n	80007de <MX_RESMGR_UTILITY_SendMsg+0x3e>
        case RESMGR_MSG_REJECT:
            //User Code
            break;

        default:
            break;
 80007da:	bf00      	nop
 80007dc:	e000      	b.n	80007e0 <MX_RESMGR_UTILITY_SendMsg+0x40>
            break;
 80007de:	bf00      	nop
    }
      /* USER CODE END 4 */

    return;
 80007e0:	bf00      	nop
}
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <MX_RESMGR_UTILITY_Callback>:

/* Resource Manager callback function */
__weak void MX_RESMGR_UTILITY_Callback(uint32_t id, uint32_t msg)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 5 */
    switch (msg)
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	2b15      	cmp	r3, #21
 80007fa:	d831      	bhi.n	8000860 <MX_RESMGR_UTILITY_Callback+0x74>
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2b15      	cmp	r3, #21
 8000800:	d831      	bhi.n	8000866 <MX_RESMGR_UTILITY_Callback+0x7a>
 8000802:	a201      	add	r2, pc, #4	@ (adr r2, 8000808 <MX_RESMGR_UTILITY_Callback+0x1c>)
 8000804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000808:	08000867 	.word	0x08000867
 800080c:	08000867 	.word	0x08000867
 8000810:	08000867 	.word	0x08000867
 8000814:	08000867 	.word	0x08000867
 8000818:	08000867 	.word	0x08000867
 800081c:	08000867 	.word	0x08000867
 8000820:	08000867 	.word	0x08000867
 8000824:	08000867 	.word	0x08000867
 8000828:	08000867 	.word	0x08000867
 800082c:	08000867 	.word	0x08000867
 8000830:	08000867 	.word	0x08000867
 8000834:	08000867 	.word	0x08000867
 8000838:	08000867 	.word	0x08000867
 800083c:	08000867 	.word	0x08000867
 8000840:	08000867 	.word	0x08000867
 8000844:	08000867 	.word	0x08000867
 8000848:	08000867 	.word	0x08000867
 800084c:	08000867 	.word	0x08000867
 8000850:	08000867 	.word	0x08000867
 8000854:	08000867 	.word	0x08000867
 8000858:	08000867 	.word	0x08000867
 800085c:	08000867 	.word	0x08000867
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	2bff      	cmp	r3, #255	@ 0xff
 8000864:	d001      	beq.n	800086a <MX_RESMGR_UTILITY_Callback+0x7e>
        case RESMGR_MSG_REJECTED:
            //User Code
            break;

        default:
            break;
 8000866:	bf00      	nop
 8000868:	e000      	b.n	800086c <MX_RESMGR_UTILITY_Callback+0x80>
            break;
 800086a:	bf00      	nop
    }
      /* USER CODE END 5 */

    return;
 800086c:	bf00      	nop
}
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_MspInit+0x3c>)
 8000880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000884:	4a0b      	ldr	r2, [pc, #44]	@ (80008b4 <HAL_MspInit+0x3c>)
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <HAL_MspInit+0x3c>)
 8000890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000894:	f003 0302 	and.w	r3, r3, #2
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	2005      	movs	r0, #5
 80008a2:	f000 f9e4 	bl	8000c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80008a6:	2005      	movs	r0, #5
 80008a8:	f000 f9fb 	bl	8000ca2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	58024400 	.word	0x58024400

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <UsageFault_Handler+0x4>

080008e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090e:	f000 f8a7 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}

08000916 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000924:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000960 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000928:	f7ff fd84 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800092c:	f7ff fcd4 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	@ (8000968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	@ (8000974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000956:	f002 ffaf 	bl	80038b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f7ff fd83 	bl	8000464 <main>
  bx  lr
 800095e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000960:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000964:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000968:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800096c:	08003948 	.word	0x08003948
  ldr r2, =_sbss
 8000970:	240001c8 	.word	0x240001c8
  ldr r4, =_ebss
 8000974:	240001f0 	.word	0x240001f0

08000978 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC3_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000982:	2003      	movs	r0, #3
 8000984:	f000 f968 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000988:	f001 fa08 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 800098c:	4602      	mov	r2, r0
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <HAL_Init+0x68>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	f003 030f 	and.w	r3, r3, #15
 8000998:	4913      	ldr	r1, [pc, #76]	@ (80009e8 <HAL_Init+0x6c>)
 800099a:	5ccb      	ldrb	r3, [r1, r3]
 800099c:	f003 031f 	and.w	r3, r3, #31
 80009a0:	fa22 f303 	lsr.w	r3, r2, r3
 80009a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <HAL_Init+0x68>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <HAL_Init+0x6c>)
 80009b0:	5cd3      	ldrb	r3, [r2, r3]
 80009b2:	f003 031f 	and.w	r3, r3, #31
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	fa22 f303 	lsr.w	r3, r2, r3
 80009bc:	4a0b      	ldr	r2, [pc, #44]	@ (80009ec <HAL_Init+0x70>)
 80009be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009c0:	4a0b      	ldr	r2, [pc, #44]	@ (80009f0 <HAL_Init+0x74>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c6:	200f      	movs	r0, #15
 80009c8:	f000 f814 	bl	80009f4 <HAL_InitTick>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e002      	b.n	80009dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009d6:	f7ff ff4f 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	58024400 	.word	0x58024400
 80009e8:	08003918 	.word	0x08003918
 80009ec:	24000004 	.word	0x24000004
 80009f0:	24000000 	.word	0x24000000

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009fc:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <HAL_InitTick+0x60>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d101      	bne.n	8000a08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e021      	b.n	8000a4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <HAL_InitTick+0x64>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <HAL_InitTick+0x60>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f94d 	bl	8000cbe <HAL_SYSTICK_Config>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00e      	b.n	8000a4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d80a      	bhi.n	8000a4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f000 f917 	bl	8000c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4a06      	ldr	r2, [pc, #24]	@ (8000a5c <HAL_InitTick+0x68>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2400000c 	.word	0x2400000c
 8000a58:	24000000 	.word	0x24000000
 8000a5c:	24000008 	.word	0x24000008

08000a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	2400000c 	.word	0x2400000c
 8000a84:	240001e4 	.word	0x240001e4

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	@ (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	240001e4 	.word	0x240001e4

08000aa0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <HAL_GetREVID+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	0c1b      	lsrs	r3, r3, #16
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	5c001000 	.word	0x5c001000

08000ab8 <__NVIC_SetPriorityGrouping>:
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <__NVIC_SetPriorityGrouping+0x40>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00
 8000afc:	05fa0000 	.word	0x05fa0000

08000b00 <__NVIC_GetPriorityGrouping>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_EnableIRQ>:
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db0b      	blt.n	8000b46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	f003 021f 	and.w	r2, r3, #31
 8000b34:	4907      	ldr	r1, [pc, #28]	@ (8000b54 <__NVIC_EnableIRQ+0x38>)
 8000b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <__NVIC_SetPriority>:
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db0a      	blt.n	8000b82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	490c      	ldr	r1, [pc, #48]	@ (8000ba4 <__NVIC_SetPriority+0x4c>)
 8000b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b80:	e00a      	b.n	8000b98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4908      	ldr	r1, [pc, #32]	@ (8000ba8 <__NVIC_SetPriority+0x50>)
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	440b      	add	r3, r1
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EncodePriority>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	@ 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f1c3 0307 	rsb	r3, r3, #7
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	bf28      	it	cs
 8000bca:	2304      	movcs	r3, #4
 8000bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d902      	bls.n	8000bdc <NVIC_EncodePriority+0x30>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b03      	subs	r3, #3
 8000bda:	e000      	b.n	8000bde <NVIC_EncodePriority+0x32>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43d9      	mvns	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	4313      	orrs	r3, r2
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3724      	adds	r7, #36	@ 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c24:	d301      	bcc.n	8000c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00f      	b.n	8000c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <SysTick_Config+0x40>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c32:	210f      	movs	r1, #15
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f7ff ff8e 	bl	8000b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <SysTick_Config+0x40>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <SysTick_Config+0x40>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ff29 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7c:	f7ff ff40 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff ff90 	bl	8000bac <NVIC_EncodePriority>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff5f 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff33 	bl	8000b1c <__NVIC_EnableIRQ>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffa4 	bl	8000c14 <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	@ 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ce6:	4b89      	ldr	r3, [pc, #548]	@ (8000f0c <HAL_GPIO_Init+0x234>)
 8000ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cea:	e194      	b.n	8001016 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 8186 	beq.w	8001010 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d005      	beq.n	8000d1c <HAL_GPIO_Init+0x44>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d130      	bne.n	8000d7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d52:	2201      	movs	r2, #1
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	f003 0201 	and.w	r2, r3, #1
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d017      	beq.n	8000dba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d123      	bne.n	8000e0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	08da      	lsrs	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3208      	adds	r2, #8
 8000dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	220f      	movs	r2, #15
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	691a      	ldr	r2, [r3, #16]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	69b9      	ldr	r1, [r7, #24]
 8000e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0203 	and.w	r2, r3, #3
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 80e0 	beq.w	8001010 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e50:	4b2f      	ldr	r3, [pc, #188]	@ (8000f10 <HAL_GPIO_Init+0x238>)
 8000e52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e56:	4a2e      	ldr	r2, [pc, #184]	@ (8000f10 <HAL_GPIO_Init+0x238>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e60:	4b2b      	ldr	r3, [pc, #172]	@ (8000f10 <HAL_GPIO_Init+0x238>)
 8000e62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e6e:	4a29      	ldr	r2, [pc, #164]	@ (8000f14 <HAL_GPIO_Init+0x23c>)
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a20      	ldr	r2, [pc, #128]	@ (8000f18 <HAL_GPIO_Init+0x240>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d052      	beq.n	8000f40 <HAL_GPIO_Init+0x268>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8000f1c <HAL_GPIO_Init+0x244>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d031      	beq.n	8000f06 <HAL_GPIO_Init+0x22e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f20 <HAL_GPIO_Init+0x248>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d02b      	beq.n	8000f02 <HAL_GPIO_Init+0x22a>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a1d      	ldr	r2, [pc, #116]	@ (8000f24 <HAL_GPIO_Init+0x24c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d025      	beq.n	8000efe <HAL_GPIO_Init+0x226>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f28 <HAL_GPIO_Init+0x250>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d01f      	beq.n	8000efa <HAL_GPIO_Init+0x222>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f2c <HAL_GPIO_Init+0x254>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d019      	beq.n	8000ef6 <HAL_GPIO_Init+0x21e>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f30 <HAL_GPIO_Init+0x258>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0x21a>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	@ (8000f34 <HAL_GPIO_Init+0x25c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00d      	beq.n	8000eee <HAL_GPIO_Init+0x216>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <HAL_GPIO_Init+0x260>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x212>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a17      	ldr	r2, [pc, #92]	@ (8000f3c <HAL_GPIO_Init+0x264>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_GPIO_Init+0x20e>
 8000ee2:	2309      	movs	r3, #9
 8000ee4:	e02d      	b.n	8000f42 <HAL_GPIO_Init+0x26a>
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	e02b      	b.n	8000f42 <HAL_GPIO_Init+0x26a>
 8000eea:	2308      	movs	r3, #8
 8000eec:	e029      	b.n	8000f42 <HAL_GPIO_Init+0x26a>
 8000eee:	2307      	movs	r3, #7
 8000ef0:	e027      	b.n	8000f42 <HAL_GPIO_Init+0x26a>
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	e025      	b.n	8000f42 <HAL_GPIO_Init+0x26a>
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	e023      	b.n	8000f42 <HAL_GPIO_Init+0x26a>
 8000efa:	2304      	movs	r3, #4
 8000efc:	e021      	b.n	8000f42 <HAL_GPIO_Init+0x26a>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e01f      	b.n	8000f42 <HAL_GPIO_Init+0x26a>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e01d      	b.n	8000f42 <HAL_GPIO_Init+0x26a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e01b      	b.n	8000f42 <HAL_GPIO_Init+0x26a>
 8000f0a:	bf00      	nop
 8000f0c:	58000080 	.word	0x58000080
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58000400 	.word	0x58000400
 8000f18:	58020000 	.word	0x58020000
 8000f1c:	58020400 	.word	0x58020400
 8000f20:	58020800 	.word	0x58020800
 8000f24:	58020c00 	.word	0x58020c00
 8000f28:	58021000 	.word	0x58021000
 8000f2c:	58021400 	.word	0x58021400
 8000f30:	58021800 	.word	0x58021800
 8000f34:	58021c00 	.word	0x58021c00
 8000f38:	58022000 	.word	0x58022000
 8000f3c:	58022400 	.word	0x58022400
 8000f40:	2300      	movs	r3, #0
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	f002 0203 	and.w	r2, r2, #3
 8000f48:	0092      	lsls	r2, r2, #2
 8000f4a:	4093      	lsls	r3, r2
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f52:	4938      	ldr	r1, [pc, #224]	@ (8001034 <HAL_GPIO_Init+0x35c>)
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000fb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	3301      	adds	r3, #1
 8001014:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	f47f ae63 	bne.w	8000cec <HAL_GPIO_Init+0x14>
  }
}
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	3724      	adds	r7, #36	@ 0x24
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	58000400 	.word	0x58000400

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001074:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_HSEM_FastTake+0x2c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3320      	adds	r3, #32
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	4a07      	ldr	r2, [pc, #28]	@ (800109c <HAL_HSEM_FastTake+0x30>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d101      	bne.n	8001088 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	e000      	b.n	800108a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	58026400 	.word	0x58026400
 800109c:	80000300 	.word	0x80000300

080010a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80010aa:	4906      	ldr	r1, [pc, #24]	@ (80010c4 <HAL_HSEM_Release+0x24>)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	58026400 	.word	0x58026400

080010c8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80010d0:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <HAL_PWREx_ConfigSupply+0xb0>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	2b06      	cmp	r3, #6
 80010da:	d00a      	beq.n	80010f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010dc:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <HAL_PWREx_ConfigSupply+0xb0>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d001      	beq.n	80010ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e040      	b.n	8001170 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e03e      	b.n	8001170 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010f2:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <HAL_PWREx_ConfigSupply+0xb0>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80010fa:	491f      	ldr	r1, [pc, #124]	@ (8001178 <HAL_PWREx_ConfigSupply+0xb0>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4313      	orrs	r3, r2
 8001100:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001102:	f7ff fcc1 	bl	8000a88 <HAL_GetTick>
 8001106:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001108:	e009      	b.n	800111e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800110a:	f7ff fcbd 	bl	8000a88 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001118:	d901      	bls.n	800111e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e028      	b.n	8001170 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800111e:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <HAL_PWREx_ConfigSupply+0xb0>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800112a:	d1ee      	bne.n	800110a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b1e      	cmp	r3, #30
 8001130:	d008      	beq.n	8001144 <HAL_PWREx_ConfigSupply+0x7c>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b2e      	cmp	r3, #46	@ 0x2e
 8001136:	d005      	beq.n	8001144 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b1d      	cmp	r3, #29
 800113c:	d002      	beq.n	8001144 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b2d      	cmp	r3, #45	@ 0x2d
 8001142:	d114      	bne.n	800116e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001144:	f7ff fca0 	bl	8000a88 <HAL_GetTick>
 8001148:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800114a:	e009      	b.n	8001160 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800114c:	f7ff fc9c 	bl	8000a88 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800115a:	d901      	bls.n	8001160 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e007      	b.n	8001170 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HAL_PWREx_ConfigSupply+0xb0>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800116c:	d1ee      	bne.n	800114c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	58024800 	.word	0x58024800

0800117c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	@ 0x30
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	f000 bc48 	b.w	8001a20 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 8088 	beq.w	80012ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800119e:	4b99      	ldr	r3, [pc, #612]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011a8:	4b96      	ldr	r3, [pc, #600]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80011aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b0:	2b10      	cmp	r3, #16
 80011b2:	d007      	beq.n	80011c4 <HAL_RCC_OscConfig+0x48>
 80011b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b6:	2b18      	cmp	r3, #24
 80011b8:	d111      	bne.n	80011de <HAL_RCC_OscConfig+0x62>
 80011ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d10c      	bne.n	80011de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d06d      	beq.n	80012ac <HAL_RCC_OscConfig+0x130>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d169      	bne.n	80012ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	f000 bc21 	b.w	8001a20 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x7a>
 80011e8:	4b86      	ldr	r3, [pc, #536]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a85      	ldr	r2, [pc, #532]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80011ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e02e      	b.n	8001254 <HAL_RCC_OscConfig+0xd8>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x9c>
 80011fe:	4b81      	ldr	r3, [pc, #516]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a80      	ldr	r2, [pc, #512]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b7e      	ldr	r3, [pc, #504]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a7d      	ldr	r2, [pc, #500]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001210:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e01d      	b.n	8001254 <HAL_RCC_OscConfig+0xd8>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0xc0>
 8001222:	4b78      	ldr	r3, [pc, #480]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a77      	ldr	r2, [pc, #476]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b75      	ldr	r3, [pc, #468]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a74      	ldr	r2, [pc, #464]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0xd8>
 800123c:	4b71      	ldr	r3, [pc, #452]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a70      	ldr	r2, [pc, #448]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b6e      	ldr	r3, [pc, #440]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a6d      	ldr	r2, [pc, #436]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 800124e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fc14 	bl	8000a88 <HAL_GetTick>
 8001260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fc10 	bl	8000a88 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	@ 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e3d4      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001276:	4b63      	ldr	r3, [pc, #396]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0xe8>
 8001282:	e014      	b.n	80012ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fc00 	bl	8000a88 <HAL_GetTick>
 8001288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fbfc 	bl	8000a88 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	@ 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e3c0      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800129e:	4b59      	ldr	r3, [pc, #356]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x110>
 80012aa:	e000      	b.n	80012ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80ca 	beq.w	8001450 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012bc:	4b51      	ldr	r3, [pc, #324]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80012c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <HAL_RCC_OscConfig+0x166>
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	2b18      	cmp	r3, #24
 80012d6:	d156      	bne.n	8001386 <HAL_RCC_OscConfig+0x20a>
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d151      	bne.n	8001386 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e2:	4b48      	ldr	r3, [pc, #288]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_OscConfig+0x17e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e392      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012fa:	4b42      	ldr	r3, [pc, #264]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 0219 	bic.w	r2, r3, #25
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	493f      	ldr	r1, [pc, #252]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fbbc 	bl	8000a88 <HAL_GetTick>
 8001310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001314:	f7ff fbb8 	bl	8000a88 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e37c      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001326:	4b37      	ldr	r3, [pc, #220]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001332:	f7ff fbb5 	bl	8000aa0 <HAL_GetREVID>
 8001336:	4603      	mov	r3, r0
 8001338:	f241 0203 	movw	r2, #4099	@ 0x1003
 800133c:	4293      	cmp	r3, r2
 800133e:	d817      	bhi.n	8001370 <HAL_RCC_OscConfig+0x1f4>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	2b40      	cmp	r3, #64	@ 0x40
 8001346:	d108      	bne.n	800135a <HAL_RCC_OscConfig+0x1de>
 8001348:	4b2e      	ldr	r3, [pc, #184]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001350:	4a2c      	ldr	r2, [pc, #176]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001356:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001358:	e07a      	b.n	8001450 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b2a      	ldr	r3, [pc, #168]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	031b      	lsls	r3, r3, #12
 8001368:	4926      	ldr	r1, [pc, #152]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 800136a:	4313      	orrs	r3, r2
 800136c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800136e:	e06f      	b.n	8001450 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	061b      	lsls	r3, r3, #24
 800137e:	4921      	ldr	r1, [pc, #132]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001384:	e064      	b.n	8001450 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d047      	beq.n	800141e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800138e:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 0219 	bic.w	r2, r3, #25
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	491a      	ldr	r1, [pc, #104]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fb72 	bl	8000a88 <HAL_GetTick>
 80013a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a8:	f7ff fb6e 	bl	8000a88 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e332      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013ba:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	f7ff fb6b 	bl	8000aa0 <HAL_GetREVID>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d819      	bhi.n	8001408 <HAL_RCC_OscConfig+0x28c>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	2b40      	cmp	r3, #64	@ 0x40
 80013da:	d108      	bne.n	80013ee <HAL_RCC_OscConfig+0x272>
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80013e4:	4a07      	ldr	r2, [pc, #28]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80013e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ea:	6053      	str	r3, [r2, #4]
 80013ec:	e030      	b.n	8001450 <HAL_RCC_OscConfig+0x2d4>
 80013ee:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	031b      	lsls	r3, r3, #12
 80013fc:	4901      	ldr	r1, [pc, #4]	@ (8001404 <HAL_RCC_OscConfig+0x288>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
 8001402:	e025      	b.n	8001450 <HAL_RCC_OscConfig+0x2d4>
 8001404:	58024400 	.word	0x58024400
 8001408:	4b9a      	ldr	r3, [pc, #616]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	061b      	lsls	r3, r3, #24
 8001416:	4997      	ldr	r1, [pc, #604]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
 800141c:	e018      	b.n	8001450 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141e:	4b95      	ldr	r3, [pc, #596]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a94      	ldr	r2, [pc, #592]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fb2d 	bl	8000a88 <HAL_GetTick>
 800142e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fb29 	bl	8000a88 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e2ed      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001444:	4b8b      	ldr	r3, [pc, #556]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f0      	bne.n	8001432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a9 	beq.w	80015b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800145e:	4b85      	ldr	r3, [pc, #532]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001466:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001468:	4b82      	ldr	r3, [pc, #520]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 800146a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b08      	cmp	r3, #8
 8001472:	d007      	beq.n	8001484 <HAL_RCC_OscConfig+0x308>
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2b18      	cmp	r3, #24
 8001478:	d13a      	bne.n	80014f0 <HAL_RCC_OscConfig+0x374>
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d135      	bne.n	80014f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001484:	4b7b      	ldr	r3, [pc, #492]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x320>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b80      	cmp	r3, #128	@ 0x80
 8001496:	d001      	beq.n	800149c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e2c1      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800149c:	f7ff fb00 	bl	8000aa0 <HAL_GetREVID>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d817      	bhi.n	80014da <HAL_RCC_OscConfig+0x35e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	d108      	bne.n	80014c4 <HAL_RCC_OscConfig+0x348>
 80014b2:	4b70      	ldr	r3, [pc, #448]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80014ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80014bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80014c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014c2:	e075      	b.n	80015b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	069b      	lsls	r3, r3, #26
 80014d2:	4968      	ldr	r1, [pc, #416]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014d8:	e06a      	b.n	80015b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014da:	4b66      	ldr	r3, [pc, #408]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	061b      	lsls	r3, r3, #24
 80014e8:	4962      	ldr	r1, [pc, #392]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014ee:	e05f      	b.n	80015b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d042      	beq.n	800157e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80014fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fac0 	bl	8000a88 <HAL_GetTick>
 8001508:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800150c:	f7ff fabc 	bl	8000a88 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e280      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800151e:	4b55      	ldr	r3, [pc, #340]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800152a:	f7ff fab9 	bl	8000aa0 <HAL_GetREVID>
 800152e:	4603      	mov	r3, r0
 8001530:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001534:	4293      	cmp	r3, r2
 8001536:	d817      	bhi.n	8001568 <HAL_RCC_OscConfig+0x3ec>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	2b20      	cmp	r3, #32
 800153e:	d108      	bne.n	8001552 <HAL_RCC_OscConfig+0x3d6>
 8001540:	4b4c      	ldr	r3, [pc, #304]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001548:	4a4a      	ldr	r2, [pc, #296]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 800154a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800154e:	6053      	str	r3, [r2, #4]
 8001550:	e02e      	b.n	80015b0 <HAL_RCC_OscConfig+0x434>
 8001552:	4b48      	ldr	r3, [pc, #288]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	069b      	lsls	r3, r3, #26
 8001560:	4944      	ldr	r1, [pc, #272]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
 8001566:	e023      	b.n	80015b0 <HAL_RCC_OscConfig+0x434>
 8001568:	4b42      	ldr	r3, [pc, #264]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	493f      	ldr	r1, [pc, #252]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001578:	4313      	orrs	r3, r2
 800157a:	60cb      	str	r3, [r1, #12]
 800157c:	e018      	b.n	80015b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800157e:	4b3d      	ldr	r3, [pc, #244]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a3c      	ldr	r2, [pc, #240]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001584:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff fa7d 	bl	8000a88 <HAL_GetTick>
 800158e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001592:	f7ff fa79 	bl	8000a88 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e23d      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015a4:	4b33      	ldr	r3, [pc, #204]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d036      	beq.n	800162a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d019      	beq.n	80015f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80015c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fa5a 	bl	8000a88 <HAL_GetTick>
 80015d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fa56 	bl	8000a88 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e21a      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ea:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80015ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x45c>
 80015f6:	e018      	b.n	800162a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80015fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 80015fe:	f023 0301 	bic.w	r3, r3, #1
 8001602:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff fa40 	bl	8000a88 <HAL_GetTick>
 8001608:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160c:	f7ff fa3c 	bl	8000a88 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e200      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	2b00      	cmp	r3, #0
 8001634:	d039      	beq.n	80016aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d01c      	beq.n	8001678 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800163e:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a0c      	ldr	r2, [pc, #48]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001644:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001648:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800164a:	f7ff fa1d 	bl	8000a88 <HAL_GetTick>
 800164e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001652:	f7ff fa19 	bl	8000a88 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e1dd      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <HAL_RCC_OscConfig+0x4f8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x4d6>
 8001670:	e01b      	b.n	80016aa <HAL_RCC_OscConfig+0x52e>
 8001672:	bf00      	nop
 8001674:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001678:	4b9b      	ldr	r3, [pc, #620]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a9a      	ldr	r2, [pc, #616]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800167e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001682:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001684:	f7ff fa00 	bl	8000a88 <HAL_GetTick>
 8001688:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800168c:	f7ff f9fc 	bl	8000a88 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1c0      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800169e:	4b92      	ldr	r3, [pc, #584]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8081 	beq.w	80017ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016b8:	4b8c      	ldr	r3, [pc, #560]	@ (80018ec <HAL_RCC_OscConfig+0x770>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a8b      	ldr	r2, [pc, #556]	@ (80018ec <HAL_RCC_OscConfig+0x770>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016c4:	f7ff f9e0 	bl	8000a88 <HAL_GetTick>
 80016c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016cc:	f7ff f9dc 	bl	8000a88 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	@ 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e1a0      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016de:	4b83      	ldr	r3, [pc, #524]	@ (80018ec <HAL_RCC_OscConfig+0x770>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_OscConfig+0x584>
 80016f2:	4b7d      	ldr	r3, [pc, #500]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f6:	4a7c      	ldr	r2, [pc, #496]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016fe:	e02d      	b.n	800175c <HAL_RCC_OscConfig+0x5e0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10c      	bne.n	8001722 <HAL_RCC_OscConfig+0x5a6>
 8001708:	4b77      	ldr	r3, [pc, #476]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170c:	4a76      	ldr	r2, [pc, #472]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	@ 0x70
 8001714:	4b74      	ldr	r3, [pc, #464]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001718:	4a73      	ldr	r2, [pc, #460]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800171a:	f023 0304 	bic.w	r3, r3, #4
 800171e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001720:	e01c      	b.n	800175c <HAL_RCC_OscConfig+0x5e0>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b05      	cmp	r3, #5
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x5c8>
 800172a:	4b6f      	ldr	r3, [pc, #444]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172e:	4a6e      	ldr	r2, [pc, #440]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6713      	str	r3, [r2, #112]	@ 0x70
 8001736:	4b6c      	ldr	r3, [pc, #432]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173a:	4a6b      	ldr	r2, [pc, #428]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6713      	str	r3, [r2, #112]	@ 0x70
 8001742:	e00b      	b.n	800175c <HAL_RCC_OscConfig+0x5e0>
 8001744:	4b68      	ldr	r3, [pc, #416]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001748:	4a67      	ldr	r2, [pc, #412]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001750:	4b65      	ldr	r3, [pc, #404]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001754:	4a64      	ldr	r2, [pc, #400]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001756:	f023 0304 	bic.w	r3, r3, #4
 800175a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d015      	beq.n	8001790 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001764:	f7ff f990 	bl	8000a88 <HAL_GetTick>
 8001768:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800176a:	e00a      	b.n	8001782 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176c:	f7ff f98c 	bl	8000a88 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e14e      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001782:	4b59      	ldr	r3, [pc, #356]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0ee      	beq.n	800176c <HAL_RCC_OscConfig+0x5f0>
 800178e:	e014      	b.n	80017ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff f97a 	bl	8000a88 <HAL_GetTick>
 8001794:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001796:	e00a      	b.n	80017ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001798:	f7ff f976 	bl	8000a88 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e138      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ae:	4b4e      	ldr	r3, [pc, #312]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ee      	bne.n	8001798 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 812d 	beq.w	8001a1e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017c4:	4b48      	ldr	r3, [pc, #288]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017cc:	2b18      	cmp	r3, #24
 80017ce:	f000 80bd 	beq.w	800194c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	f040 809e 	bne.w	8001918 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017dc:	4b42      	ldr	r3, [pc, #264]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a41      	ldr	r2, [pc, #260]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80017e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff f94e 	bl	8000a88 <HAL_GetTick>
 80017ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff f94a 	bl	8000a88 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e10e      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001802:	4b39      	ldr	r3, [pc, #228]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180e:	4b36      	ldr	r3, [pc, #216]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001810:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001812:	4b37      	ldr	r3, [pc, #220]	@ (80018f0 <HAL_RCC_OscConfig+0x774>)
 8001814:	4013      	ands	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	430a      	orrs	r2, r1
 8001822:	4931      	ldr	r1, [pc, #196]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001824:	4313      	orrs	r3, r2
 8001826:	628b      	str	r3, [r1, #40]	@ 0x28
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182c:	3b01      	subs	r3, #1
 800182e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001836:	3b01      	subs	r3, #1
 8001838:	025b      	lsls	r3, r3, #9
 800183a:	b29b      	uxth	r3, r3
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001842:	3b01      	subs	r3, #1
 8001844:	041b      	lsls	r3, r3, #16
 8001846:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001850:	3b01      	subs	r3, #1
 8001852:	061b      	lsls	r3, r3, #24
 8001854:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001858:	4923      	ldr	r1, [pc, #140]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800185a:	4313      	orrs	r3, r2
 800185c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800185e:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001862:	4a21      	ldr	r2, [pc, #132]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800186a:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800186c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800186e:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <HAL_RCC_OscConfig+0x778>)
 8001870:	4013      	ands	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001876:	00d2      	lsls	r2, r2, #3
 8001878:	491b      	ldr	r1, [pc, #108]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800187a:	4313      	orrs	r3, r2
 800187c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800187e:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	f023 020c 	bic.w	r2, r3, #12
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4917      	ldr	r1, [pc, #92]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800188c:	4313      	orrs	r3, r2
 800188e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001890:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 8001892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001894:	f023 0202 	bic.w	r2, r3, #2
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189c:	4912      	ldr	r1, [pc, #72]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80018a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a6:	4a10      	ldr	r2, [pc, #64]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80018b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b2:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80018c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ca:	4a07      	ldr	r2, [pc, #28]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <HAL_RCC_OscConfig+0x76c>)
 80018d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff f8d3 	bl	8000a88 <HAL_GetTick>
 80018e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018e4:	e011      	b.n	800190a <HAL_RCC_OscConfig+0x78e>
 80018e6:	bf00      	nop
 80018e8:	58024400 	.word	0x58024400
 80018ec:	58024800 	.word	0x58024800
 80018f0:	fffffc0c 	.word	0xfffffc0c
 80018f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff f8c6 	bl	8000a88 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e08a      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800190a:	4b47      	ldr	r3, [pc, #284]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x77c>
 8001916:	e082      	b.n	8001a1e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001918:	4b43      	ldr	r3, [pc, #268]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a42      	ldr	r2, [pc, #264]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 800191e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff f8b0 	bl	8000a88 <HAL_GetTick>
 8001928:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff f8ac 	bl	8000a88 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e070      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800193e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x7b0>
 800194a:	e068      	b.n	8001a1e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800194c:	4b36      	ldr	r3, [pc, #216]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001952:	4b35      	ldr	r3, [pc, #212]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	2b01      	cmp	r3, #1
 800195e:	d031      	beq.n	80019c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	f003 0203 	and.w	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d12a      	bne.n	80019c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	429a      	cmp	r2, r3
 800197c:	d122      	bne.n	80019c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001988:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d11a      	bne.n	80019c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	0a5b      	lsrs	r3, r3, #9
 8001992:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d111      	bne.n	80019c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	0c1b      	lsrs	r3, r3, #16
 80019a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d108      	bne.n	80019c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	0e1b      	lsrs	r3, r3, #24
 80019b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e02b      	b.n	8001a20 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80019c8:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 80019ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80019d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d01f      	beq.n	8001a1e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	4a11      	ldr	r2, [pc, #68]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019ea:	f7ff f84d 	bl	8000a88 <HAL_GetTick>
 80019ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80019f0:	bf00      	nop
 80019f2:	f7ff f849 	bl	8000a88 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d0f9      	beq.n	80019f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 8001a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_RCC_OscConfig+0x8b0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a0a:	00d2      	lsls	r2, r2, #3
 8001a0c:	4906      	ldr	r1, [pc, #24]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a12:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 8001a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a16:	4a04      	ldr	r2, [pc, #16]	@ (8001a28 <HAL_RCC_OscConfig+0x8ac>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3730      	adds	r7, #48	@ 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	58024400 	.word	0x58024400
 8001a2c:	ffff0007 	.word	0xffff0007

08001a30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e19c      	b.n	8001d7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b8a      	ldr	r3, [pc, #552]	@ (8001c70 <HAL_RCC_ClockConfig+0x240>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d910      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b87      	ldr	r3, [pc, #540]	@ (8001c70 <HAL_RCC_ClockConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 020f 	bic.w	r2, r3, #15
 8001a5a:	4985      	ldr	r1, [pc, #532]	@ (8001c70 <HAL_RCC_ClockConfig+0x240>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b83      	ldr	r3, [pc, #524]	@ (8001c70 <HAL_RCC_ClockConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e184      	b.n	8001d7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	4b7b      	ldr	r3, [pc, #492]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d908      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a90:	4b78      	ldr	r3, [pc, #480]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4975      	ldr	r1, [pc, #468]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d010      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	4b70      	ldr	r3, [pc, #448]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d908      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001abe:	4b6d      	ldr	r3, [pc, #436]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	496a      	ldr	r1, [pc, #424]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d010      	beq.n	8001afe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	4b64      	ldr	r3, [pc, #400]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d908      	bls.n	8001afe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001aec:	4b61      	ldr	r3, [pc, #388]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	495e      	ldr	r1, [pc, #376]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0320 	and.w	r3, r3, #32
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d010      	beq.n	8001b2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	4b59      	ldr	r3, [pc, #356]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d908      	bls.n	8001b2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b1a:	4b56      	ldr	r3, [pc, #344]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4953      	ldr	r1, [pc, #332]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d010      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d908      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b4a      	ldr	r3, [pc, #296]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f023 020f 	bic.w	r2, r3, #15
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4947      	ldr	r1, [pc, #284]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d055      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b66:	4b43      	ldr	r3, [pc, #268]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4940      	ldr	r1, [pc, #256]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b80:	4b3c      	ldr	r3, [pc, #240]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d121      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0f6      	b.n	8001d7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b98:	4b36      	ldr	r3, [pc, #216]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d115      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0ea      	b.n	8001d7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bb0:	4b30      	ldr	r3, [pc, #192]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0de      	b.n	8001d7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0d6      	b.n	8001d7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bd0:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	f023 0207 	bic.w	r2, r3, #7
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4925      	ldr	r1, [pc, #148]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be2:	f7fe ff51 	bl	8000a88 <HAL_GetTick>
 8001be6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bea:	f7fe ff4d 	bl	8000a88 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0be      	b.n	8001d7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c00:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d1eb      	bne.n	8001bea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d010      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d208      	bcs.n	8001c40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2e:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f023 020f 	bic.w	r2, r3, #15
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	490e      	ldr	r1, [pc, #56]	@ (8001c74 <HAL_RCC_ClockConfig+0x244>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_RCC_ClockConfig+0x240>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d214      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_RCC_ClockConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 020f 	bic.w	r2, r3, #15
 8001c56:	4906      	ldr	r1, [pc, #24]	@ (8001c70 <HAL_RCC_ClockConfig+0x240>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <HAL_RCC_ClockConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e086      	b.n	8001d7e <HAL_RCC_ClockConfig+0x34e>
 8001c70:	52002000 	.word	0x52002000
 8001c74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d010      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	4b3f      	ldr	r3, [pc, #252]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d208      	bcs.n	8001ca6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c94:	4b3c      	ldr	r3, [pc, #240]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	4939      	ldr	r1, [pc, #228]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d010      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d208      	bcs.n	8001cd4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cc2:	4b31      	ldr	r3, [pc, #196]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	492e      	ldr	r1, [pc, #184]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d010      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699a      	ldr	r2, [r3, #24]
 8001ce4:	4b28      	ldr	r3, [pc, #160]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d208      	bcs.n	8001d02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cf0:	4b25      	ldr	r3, [pc, #148]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4922      	ldr	r1, [pc, #136]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d010      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d208      	bcs.n	8001d30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4917      	ldr	r1, [pc, #92]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d30:	f000 f834 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	4912      	ldr	r1, [pc, #72]	@ (8001d8c <HAL_RCC_ClockConfig+0x35c>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_RCC_ClockConfig+0x358>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	4a0d      	ldr	r2, [pc, #52]	@ (8001d8c <HAL_RCC_ClockConfig+0x35c>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
 8001d64:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <HAL_RCC_ClockConfig+0x360>)
 8001d66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d68:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <HAL_RCC_ClockConfig+0x364>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_RCC_ClockConfig+0x368>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fe3e 	bl	80009f4 <HAL_InitTick>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	58024400 	.word	0x58024400
 8001d8c:	08003918 	.word	0x08003918
 8001d90:	24000004 	.word	0x24000004
 8001d94:	24000000 	.word	0x24000000
 8001d98:	24000008 	.word	0x24000008

08001d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da2:	4bb3      	ldr	r3, [pc, #716]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001daa:	2b18      	cmp	r3, #24
 8001dac:	f200 8155 	bhi.w	800205a <HAL_RCC_GetSysClockFreq+0x2be>
 8001db0:	a201      	add	r2, pc, #4	@ (adr r2, 8001db8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db6:	bf00      	nop
 8001db8:	08001e1d 	.word	0x08001e1d
 8001dbc:	0800205b 	.word	0x0800205b
 8001dc0:	0800205b 	.word	0x0800205b
 8001dc4:	0800205b 	.word	0x0800205b
 8001dc8:	0800205b 	.word	0x0800205b
 8001dcc:	0800205b 	.word	0x0800205b
 8001dd0:	0800205b 	.word	0x0800205b
 8001dd4:	0800205b 	.word	0x0800205b
 8001dd8:	08001e43 	.word	0x08001e43
 8001ddc:	0800205b 	.word	0x0800205b
 8001de0:	0800205b 	.word	0x0800205b
 8001de4:	0800205b 	.word	0x0800205b
 8001de8:	0800205b 	.word	0x0800205b
 8001dec:	0800205b 	.word	0x0800205b
 8001df0:	0800205b 	.word	0x0800205b
 8001df4:	0800205b 	.word	0x0800205b
 8001df8:	08001e49 	.word	0x08001e49
 8001dfc:	0800205b 	.word	0x0800205b
 8001e00:	0800205b 	.word	0x0800205b
 8001e04:	0800205b 	.word	0x0800205b
 8001e08:	0800205b 	.word	0x0800205b
 8001e0c:	0800205b 	.word	0x0800205b
 8001e10:	0800205b 	.word	0x0800205b
 8001e14:	0800205b 	.word	0x0800205b
 8001e18:	08001e4f 	.word	0x08001e4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e1c:	4b94      	ldr	r3, [pc, #592]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e28:	4b91      	ldr	r3, [pc, #580]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	4a90      	ldr	r2, [pc, #576]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
 8001e38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e3a:	e111      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e3c:	4b8d      	ldr	r3, [pc, #564]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e3e:	61bb      	str	r3, [r7, #24]
      break;
 8001e40:	e10e      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e42:	4b8d      	ldr	r3, [pc, #564]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e44:	61bb      	str	r3, [r7, #24]
      break;
 8001e46:	e10b      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e48:	4b8c      	ldr	r3, [pc, #560]	@ (800207c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e4a:	61bb      	str	r3, [r7, #24]
      break;
 8001e4c:	e108      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e4e:	4b88      	ldr	r3, [pc, #544]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e58:	4b85      	ldr	r3, [pc, #532]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e64:	4b82      	ldr	r3, [pc, #520]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e6e:	4b80      	ldr	r3, [pc, #512]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e72:	08db      	lsrs	r3, r3, #3
 8001e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80e1 	beq.w	8002054 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	f000 8083 	beq.w	8001fa0 <HAL_RCC_GetSysClockFreq+0x204>
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	f200 80a1 	bhi.w	8001fe4 <HAL_RCC_GetSysClockFreq+0x248>
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x114>
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d056      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001eae:	e099      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001eb0:	4b6f      	ldr	r3, [pc, #444]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d02d      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	08db      	lsrs	r3, r3, #3
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	4a6b      	ldr	r2, [pc, #428]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee6:	4b62      	ldr	r3, [pc, #392]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001efa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002080 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f16:	e087      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002084 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f2a:	4b51      	ldr	r3, [pc, #324]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002080 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f5a:	e065      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002088 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6e:	4b40      	ldr	r3, [pc, #256]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002080 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f9e:	e043      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001faa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800208c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fc6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002080 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fe2:	e021      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002088 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffe:	ee07 3a90 	vmov	s15, r3
 8002002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002006:	ed97 6a02 	vldr	s12, [r7, #8]
 800200a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002080 <HAL_RCC_GetSysClockFreq+0x2e4>
 800200e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800201a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800201e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002026:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202c:	0a5b      	lsrs	r3, r3, #9
 800202e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002032:	3301      	adds	r3, #1
 8002034:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	ee07 3a90 	vmov	s15, r3
 800203c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002040:	edd7 6a07 	vldr	s13, [r7, #28]
 8002044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800204c:	ee17 3a90 	vmov	r3, s15
 8002050:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002052:	e005      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
      break;
 8002058:	e002      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800205a:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800205c:	61bb      	str	r3, [r7, #24]
      break;
 800205e:	bf00      	nop
  }

  return sysclockfreq;
 8002060:	69bb      	ldr	r3, [r7, #24]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	58024400 	.word	0x58024400
 8002074:	03d09000 	.word	0x03d09000
 8002078:	003d0900 	.word	0x003d0900
 800207c:	017d7840 	.word	0x017d7840
 8002080:	46000000 	.word	0x46000000
 8002084:	4c742400 	.word	0x4c742400
 8002088:	4a742400 	.word	0x4a742400
 800208c:	4bbebc20 	.word	0x4bbebc20

08002090 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002094:	b0ca      	sub	sp, #296	@ 0x128
 8002096:	af00      	add	r7, sp, #0
 8002098:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800209c:	2300      	movs	r3, #0
 800209e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020a2:	2300      	movs	r3, #0
 80020a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80020b4:	2500      	movs	r5, #0
 80020b6:	ea54 0305 	orrs.w	r3, r4, r5
 80020ba:	d049      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80020bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80020c6:	d02f      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80020c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80020cc:	d828      	bhi.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80020ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020d2:	d01a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80020d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020d8:	d822      	bhi.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020e2:	d007      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020e4:	e01c      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020e6:	4bb8      	ldr	r3, [pc, #736]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ea:	4ab7      	ldr	r2, [pc, #732]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80020f2:	e01a      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80020f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020f8:	3308      	adds	r3, #8
 80020fa:	2102      	movs	r1, #2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f001 f9d1 	bl	80034a4 <RCCEx_PLL2_Config>
 8002102:	4603      	mov	r3, r0
 8002104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002108:	e00f      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800210a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800210e:	3328      	adds	r3, #40	@ 0x28
 8002110:	2102      	movs	r1, #2
 8002112:	4618      	mov	r0, r3
 8002114:	f001 fa78 	bl	8003608 <RCCEx_PLL3_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800211e:	e004      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002126:	e000      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800212a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10a      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002132:	4ba5      	ldr	r3, [pc, #660]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002136:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800213a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800213e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002140:	4aa1      	ldr	r2, [pc, #644]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002142:	430b      	orrs	r3, r1
 8002144:	6513      	str	r3, [r2, #80]	@ 0x50
 8002146:	e003      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800214c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800215c:	f04f 0900 	mov.w	r9, #0
 8002160:	ea58 0309 	orrs.w	r3, r8, r9
 8002164:	d047      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800216a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216c:	2b04      	cmp	r3, #4
 800216e:	d82a      	bhi.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002170:	a201      	add	r2, pc, #4	@ (adr r2, 8002178 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002176:	bf00      	nop
 8002178:	0800218d 	.word	0x0800218d
 800217c:	0800219b 	.word	0x0800219b
 8002180:	080021b1 	.word	0x080021b1
 8002184:	080021cf 	.word	0x080021cf
 8002188:	080021cf 	.word	0x080021cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800218c:	4b8e      	ldr	r3, [pc, #568]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	4a8d      	ldr	r2, [pc, #564]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002198:	e01a      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800219a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800219e:	3308      	adds	r3, #8
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 f97e 	bl	80034a4 <RCCEx_PLL2_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021ae:	e00f      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021b4:	3328      	adds	r3, #40	@ 0x28
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f001 fa25 	bl	8003608 <RCCEx_PLL3_Config>
 80021be:	4603      	mov	r3, r0
 80021c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021c4:	e004      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80021cc:	e000      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80021ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10a      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021d8:	4b7b      	ldr	r3, [pc, #492]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021dc:	f023 0107 	bic.w	r1, r3, #7
 80021e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	4a78      	ldr	r2, [pc, #480]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80021ec:	e003      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80021f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80021f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002202:	f04f 0b00 	mov.w	fp, #0
 8002206:	ea5a 030b 	orrs.w	r3, sl, fp
 800220a:	d04c      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800220c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002216:	d030      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800221c:	d829      	bhi.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800221e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002220:	d02d      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002222:	2bc0      	cmp	r3, #192	@ 0xc0
 8002224:	d825      	bhi.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002226:	2b80      	cmp	r3, #128	@ 0x80
 8002228:	d018      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800222a:	2b80      	cmp	r3, #128	@ 0x80
 800222c:	d821      	bhi.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002232:	2b40      	cmp	r3, #64	@ 0x40
 8002234:	d007      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002236:	e01c      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002238:	4b63      	ldr	r3, [pc, #396]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	4a62      	ldr	r2, [pc, #392]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800223e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002244:	e01c      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800224a:	3308      	adds	r3, #8
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f001 f928 	bl	80034a4 <RCCEx_PLL2_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800225a:	e011      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800225c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002260:	3328      	adds	r3, #40	@ 0x28
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f001 f9cf 	bl	8003608 <RCCEx_PLL3_Config>
 800226a:	4603      	mov	r3, r0
 800226c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002270:	e006      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002278:	e002      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800227e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002288:	4b4f      	ldr	r3, [pc, #316]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800228a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800228c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002296:	4a4c      	ldr	r2, [pc, #304]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002298:	430b      	orrs	r3, r1
 800229a:	6513      	str	r3, [r2, #80]	@ 0x50
 800229c:	e003      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800229e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80022a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80022a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80022b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80022bc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80022c0:	460b      	mov	r3, r1
 80022c2:	4313      	orrs	r3, r2
 80022c4:	d053      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80022c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80022ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022d2:	d035      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80022d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022d8:	d82e      	bhi.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80022da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80022de:	d031      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80022e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80022e4:	d828      	bhi.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80022e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022ea:	d01a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80022ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022f0:	d822      	bhi.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80022f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022fa:	d007      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80022fc:	e01c      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022fe:	4b32      	ldr	r3, [pc, #200]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	4a31      	ldr	r2, [pc, #196]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002308:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800230a:	e01c      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800230c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002310:	3308      	adds	r3, #8
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f001 f8c5 	bl	80034a4 <RCCEx_PLL2_Config>
 800231a:	4603      	mov	r3, r0
 800231c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002320:	e011      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002326:	3328      	adds	r3, #40	@ 0x28
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f001 f96c 	bl	8003608 <RCCEx_PLL3_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002336:	e006      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800233e:	e002      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002340:	bf00      	nop
 8002342:	e000      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800234e:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002352:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800235a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800235e:	4a1a      	ldr	r2, [pc, #104]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002360:	430b      	orrs	r3, r1
 8002362:	6593      	str	r3, [r2, #88]	@ 0x58
 8002364:	e003      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800236a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800236e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800237a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002384:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002388:	460b      	mov	r3, r1
 800238a:	4313      	orrs	r3, r2
 800238c:	d056      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800238e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002392:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002396:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800239a:	d038      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800239c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023a0:	d831      	bhi.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023a6:	d034      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80023a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023ac:	d82b      	bhi.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023b2:	d01d      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80023b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023b8:	d825      	bhi.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d006      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80023be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80023c4:	e01f      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023c6:	bf00      	nop
 80023c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023cc:	4ba2      	ldr	r3, [pc, #648]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	4aa1      	ldr	r2, [pc, #644]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023d8:	e01c      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80023da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023de:	3308      	adds	r3, #8
 80023e0:	2100      	movs	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f001 f85e 	bl	80034a4 <RCCEx_PLL2_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80023ee:	e011      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023f4:	3328      	adds	r3, #40	@ 0x28
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 f905 	bl	8003608 <RCCEx_PLL3_Config>
 80023fe:	4603      	mov	r3, r0
 8002400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002404:	e006      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800240c:	e002      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800240e:	bf00      	nop
 8002410:	e000      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800241c:	4b8e      	ldr	r3, [pc, #568]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002428:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800242c:	4a8a      	ldr	r2, [pc, #552]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800242e:	430b      	orrs	r3, r1
 8002430:	6593      	str	r3, [r2, #88]	@ 0x58
 8002432:	e003      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800243c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002448:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002452:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002456:	460b      	mov	r3, r1
 8002458:	4313      	orrs	r3, r2
 800245a:	d03a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800245c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	2b30      	cmp	r3, #48	@ 0x30
 8002464:	d01f      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002466:	2b30      	cmp	r3, #48	@ 0x30
 8002468:	d819      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800246a:	2b20      	cmp	r3, #32
 800246c:	d00c      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800246e:	2b20      	cmp	r3, #32
 8002470:	d815      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002472:	2b00      	cmp	r3, #0
 8002474:	d019      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002476:	2b10      	cmp	r3, #16
 8002478:	d111      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800247a:	4b77      	ldr	r3, [pc, #476]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	4a76      	ldr	r2, [pc, #472]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002486:	e011      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800248c:	3308      	adds	r3, #8
 800248e:	2102      	movs	r1, #2
 8002490:	4618      	mov	r0, r3
 8002492:	f001 f807 	bl	80034a4 <RCCEx_PLL2_Config>
 8002496:	4603      	mov	r3, r0
 8002498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800249c:	e006      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80024a4:	e002      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80024a6:	bf00      	nop
 80024a8:	e000      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80024aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80024b4:	4b68      	ldr	r3, [pc, #416]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80024bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	4a65      	ldr	r2, [pc, #404]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024c4:	430b      	orrs	r3, r1
 80024c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024c8:	e003      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80024ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80024d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80024de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80024e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4313      	orrs	r3, r2
 80024f0:	d051      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80024f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024fc:	d035      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80024fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002502:	d82e      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002504:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002508:	d031      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800250a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800250e:	d828      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002514:	d01a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800251a:	d822      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002524:	d007      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002526:	e01c      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002528:	4b4b      	ldr	r3, [pc, #300]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800252a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252c:	4a4a      	ldr	r2, [pc, #296]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800252e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002532:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002534:	e01c      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800253a:	3308      	adds	r3, #8
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f000 ffb0 	bl	80034a4 <RCCEx_PLL2_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800254a:	e011      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800254c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002550:	3328      	adds	r3, #40	@ 0x28
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f001 f857 	bl	8003608 <RCCEx_PLL3_Config>
 800255a:	4603      	mov	r3, r0
 800255c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002560:	e006      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002568:	e002      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800256a:	bf00      	nop
 800256c:	e000      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800256e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002578:	4b37      	ldr	r3, [pc, #220]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800257a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800257c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002586:	4a34      	ldr	r2, [pc, #208]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002588:	430b      	orrs	r3, r1
 800258a:	6513      	str	r3, [r2, #80]	@ 0x50
 800258c:	e003      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800258e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002592:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80025a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80025ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80025b0:	460b      	mov	r3, r1
 80025b2:	4313      	orrs	r3, r2
 80025b4:	d056      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80025b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025c0:	d033      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80025c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025c6:	d82c      	bhi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025cc:	d02f      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80025ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025d2:	d826      	bhi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025d8:	d02b      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80025da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025de:	d820      	bhi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025e4:	d012      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80025e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025ea:	d81a      	bhi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d022      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f4:	d115      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80025f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025fa:	3308      	adds	r3, #8
 80025fc:	2101      	movs	r1, #1
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 ff50 	bl	80034a4 <RCCEx_PLL2_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800260a:	e015      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800260c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002610:	3328      	adds	r3, #40	@ 0x28
 8002612:	2101      	movs	r1, #1
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fff7 	bl	8003608 <RCCEx_PLL3_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002620:	e00a      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002628:	e006      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800262a:	bf00      	nop
 800262c:	e004      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800262e:	bf00      	nop
 8002630:	e002      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002632:	bf00      	nop
 8002634:	e000      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10d      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002640:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002644:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800264c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800264e:	4a02      	ldr	r2, [pc, #8]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002650:	430b      	orrs	r3, r1
 8002652:	6513      	str	r3, [r2, #80]	@ 0x50
 8002654:	e006      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002656:	bf00      	nop
 8002658:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800267a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800267e:	460b      	mov	r3, r1
 8002680:	4313      	orrs	r3, r2
 8002682:	d055      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002688:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800268c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002690:	d033      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002692:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002696:	d82c      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800269c:	d02f      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800269e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026a2:	d826      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80026a8:	d02b      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80026aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80026ae:	d820      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026b4:	d012      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80026b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026ba:	d81a      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d022      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80026c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026c4:	d115      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80026c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ca:	3308      	adds	r3, #8
 80026cc:	2101      	movs	r1, #1
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fee8 	bl	80034a4 <RCCEx_PLL2_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80026da:	e015      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80026dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026e0:	3328      	adds	r3, #40	@ 0x28
 80026e2:	2101      	movs	r1, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 ff8f 	bl	8003608 <RCCEx_PLL3_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80026f0:	e00a      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80026f8:	e006      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80026fa:	bf00      	nop
 80026fc:	e004      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80026fe:	bf00      	nop
 8002700:	e002      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002702:	bf00      	nop
 8002704:	e000      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002710:	4ba3      	ldr	r3, [pc, #652]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800271c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002720:	4a9f      	ldr	r2, [pc, #636]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002722:	430b      	orrs	r3, r1
 8002724:	6593      	str	r3, [r2, #88]	@ 0x58
 8002726:	e003      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800272c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800273c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002746:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800274a:	460b      	mov	r3, r1
 800274c:	4313      	orrs	r3, r2
 800274e:	d037      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800275a:	d00e      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800275c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002760:	d816      	bhi.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002762:	2b00      	cmp	r3, #0
 8002764:	d018      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002766:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800276a:	d111      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800276c:	4b8c      	ldr	r3, [pc, #560]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	4a8b      	ldr	r2, [pc, #556]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002778:	e00f      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800277a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800277e:	3308      	adds	r3, #8
 8002780:	2101      	movs	r1, #1
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fe8e 	bl	80034a4 <RCCEx_PLL2_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800278e:	e004      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002796:	e000      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800279a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027a2:	4b7f      	ldr	r3, [pc, #508]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80027aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	4a7b      	ldr	r2, [pc, #492]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027b2:	430b      	orrs	r3, r1
 80027b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80027b6:	e003      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80027c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80027cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80027d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80027da:	460b      	mov	r3, r1
 80027dc:	4313      	orrs	r3, r2
 80027de:	d039      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80027e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d81c      	bhi.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80027ea:	a201      	add	r2, pc, #4	@ (adr r2, 80027f0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80027ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f0:	0800282d 	.word	0x0800282d
 80027f4:	08002801 	.word	0x08002801
 80027f8:	0800280f 	.word	0x0800280f
 80027fc:	0800282d 	.word	0x0800282d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002800:	4b67      	ldr	r3, [pc, #412]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002804:	4a66      	ldr	r2, [pc, #408]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800280c:	e00f      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800280e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002812:	3308      	adds	r3, #8
 8002814:	2102      	movs	r1, #2
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fe44 	bl	80034a4 <RCCEx_PLL2_Config>
 800281c:	4603      	mov	r3, r0
 800281e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002822:	e004      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800282a:	e000      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800282c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800282e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002836:	4b5a      	ldr	r3, [pc, #360]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283a:	f023 0103 	bic.w	r1, r3, #3
 800283e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002844:	4a56      	ldr	r2, [pc, #344]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002846:	430b      	orrs	r3, r1
 8002848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800284a:	e003      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002850:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800286a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800286e:	460b      	mov	r3, r1
 8002870:	4313      	orrs	r3, r2
 8002872:	f000 809f 	beq.w	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002876:	4b4b      	ldr	r3, [pc, #300]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a4a      	ldr	r2, [pc, #296]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002880:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002882:	f7fe f901 	bl	8000a88 <HAL_GetTick>
 8002886:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800288a:	e00b      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288c:	f7fe f8fc 	bl	8000a88 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	@ 0x64
 800289a:	d903      	bls.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028a2:	e005      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028a4:	4b3f      	ldr	r3, [pc, #252]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ed      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80028b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d179      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80028b8:	4b39      	ldr	r3, [pc, #228]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80028c4:	4053      	eors	r3, r2
 80028c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d015      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028ce:	4b34      	ldr	r3, [pc, #208]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028da:	4b31      	ldr	r3, [pc, #196]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	4a30      	ldr	r2, [pc, #192]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028e6:	4b2e      	ldr	r3, [pc, #184]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ea:	4a2d      	ldr	r2, [pc, #180]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80028f2:	4a2b      	ldr	r2, [pc, #172]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80028fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002906:	d118      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe f8be 	bl	8000a88 <HAL_GetTick>
 800290c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002910:	e00d      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe f8b9 	bl	8000a88 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800291c:	1ad2      	subs	r2, r2, r3
 800291e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002922:	429a      	cmp	r2, r3
 8002924:	d903      	bls.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800292c:	e005      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800292e:	4b1c      	ldr	r3, [pc, #112]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0eb      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800293a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800293e:	2b00      	cmp	r3, #0
 8002940:	d129      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002946:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800294a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800294e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002952:	d10e      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800295c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002960:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002964:	091a      	lsrs	r2, r3, #4
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002968:	4013      	ands	r3, r2
 800296a:	4a0d      	ldr	r2, [pc, #52]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800296c:	430b      	orrs	r3, r1
 800296e:	6113      	str	r3, [r2, #16]
 8002970:	e005      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002978:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800297c:	6113      	str	r3, [r2, #16]
 800297e:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002980:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002986:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800298a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298e:	4a04      	ldr	r2, [pc, #16]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002990:	430b      	orrs	r3, r1
 8002992:	6713      	str	r3, [r2, #112]	@ 0x70
 8002994:	e00e      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800299a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800299e:	e009      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80029a0:	58024400 	.word	0x58024400
 80029a4:	58024800 	.word	0x58024800
 80029a8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80029b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f002 0301 	and.w	r3, r2, #1
 80029c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f000 8089 	beq.w	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80029d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029dc:	2b28      	cmp	r3, #40	@ 0x28
 80029de:	d86b      	bhi.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80029e0:	a201      	add	r2, pc, #4	@ (adr r2, 80029e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	08002ac1 	.word	0x08002ac1
 80029ec:	08002ab9 	.word	0x08002ab9
 80029f0:	08002ab9 	.word	0x08002ab9
 80029f4:	08002ab9 	.word	0x08002ab9
 80029f8:	08002ab9 	.word	0x08002ab9
 80029fc:	08002ab9 	.word	0x08002ab9
 8002a00:	08002ab9 	.word	0x08002ab9
 8002a04:	08002ab9 	.word	0x08002ab9
 8002a08:	08002a8d 	.word	0x08002a8d
 8002a0c:	08002ab9 	.word	0x08002ab9
 8002a10:	08002ab9 	.word	0x08002ab9
 8002a14:	08002ab9 	.word	0x08002ab9
 8002a18:	08002ab9 	.word	0x08002ab9
 8002a1c:	08002ab9 	.word	0x08002ab9
 8002a20:	08002ab9 	.word	0x08002ab9
 8002a24:	08002ab9 	.word	0x08002ab9
 8002a28:	08002aa3 	.word	0x08002aa3
 8002a2c:	08002ab9 	.word	0x08002ab9
 8002a30:	08002ab9 	.word	0x08002ab9
 8002a34:	08002ab9 	.word	0x08002ab9
 8002a38:	08002ab9 	.word	0x08002ab9
 8002a3c:	08002ab9 	.word	0x08002ab9
 8002a40:	08002ab9 	.word	0x08002ab9
 8002a44:	08002ab9 	.word	0x08002ab9
 8002a48:	08002ac1 	.word	0x08002ac1
 8002a4c:	08002ab9 	.word	0x08002ab9
 8002a50:	08002ab9 	.word	0x08002ab9
 8002a54:	08002ab9 	.word	0x08002ab9
 8002a58:	08002ab9 	.word	0x08002ab9
 8002a5c:	08002ab9 	.word	0x08002ab9
 8002a60:	08002ab9 	.word	0x08002ab9
 8002a64:	08002ab9 	.word	0x08002ab9
 8002a68:	08002ac1 	.word	0x08002ac1
 8002a6c:	08002ab9 	.word	0x08002ab9
 8002a70:	08002ab9 	.word	0x08002ab9
 8002a74:	08002ab9 	.word	0x08002ab9
 8002a78:	08002ab9 	.word	0x08002ab9
 8002a7c:	08002ab9 	.word	0x08002ab9
 8002a80:	08002ab9 	.word	0x08002ab9
 8002a84:	08002ab9 	.word	0x08002ab9
 8002a88:	08002ac1 	.word	0x08002ac1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a90:	3308      	adds	r3, #8
 8002a92:	2101      	movs	r1, #1
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fd05 	bl	80034a4 <RCCEx_PLL2_Config>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002aa0:	e00f      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa6:	3328      	adds	r3, #40	@ 0x28
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fdac 	bl	8003608 <RCCEx_PLL3_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ab6:	e004      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002abe:	e000      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002aca:	4bbf      	ldr	r3, [pc, #764]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ace:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ad8:	4abb      	ldr	r2, [pc, #748]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ada:	430b      	orrs	r3, r1
 8002adc:	6553      	str	r3, [r2, #84]	@ 0x54
 8002ade:	e003      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af0:	f002 0302 	and.w	r3, r2, #2
 8002af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002afe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002b02:	460b      	mov	r3, r1
 8002b04:	4313      	orrs	r3, r2
 8002b06:	d041      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d824      	bhi.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002b12:	a201      	add	r2, pc, #4	@ (adr r2, 8002b18 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b18:	08002b65 	.word	0x08002b65
 8002b1c:	08002b31 	.word	0x08002b31
 8002b20:	08002b47 	.word	0x08002b47
 8002b24:	08002b65 	.word	0x08002b65
 8002b28:	08002b65 	.word	0x08002b65
 8002b2c:	08002b65 	.word	0x08002b65
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b34:	3308      	adds	r3, #8
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fcb3 	bl	80034a4 <RCCEx_PLL2_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002b44:	e00f      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b4a:	3328      	adds	r3, #40	@ 0x28
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fd5a 	bl	8003608 <RCCEx_PLL3_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002b5a:	e004      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b62:	e000      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002b6e:	4b96      	ldr	r3, [pc, #600]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b72:	f023 0107 	bic.w	r1, r3, #7
 8002b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b7c:	4a92      	ldr	r2, [pc, #584]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	6553      	str	r3, [r2, #84]	@ 0x54
 8002b82:	e003      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f002 0304 	and.w	r3, r2, #4
 8002b98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ba2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	d044      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	d825      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbe:	bf00      	nop
 8002bc0:	08002c0d 	.word	0x08002c0d
 8002bc4:	08002bd9 	.word	0x08002bd9
 8002bc8:	08002bef 	.word	0x08002bef
 8002bcc:	08002c0d 	.word	0x08002c0d
 8002bd0:	08002c0d 	.word	0x08002c0d
 8002bd4:	08002c0d 	.word	0x08002c0d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bdc:	3308      	adds	r3, #8
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fc5f 	bl	80034a4 <RCCEx_PLL2_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002bec:	e00f      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf2:	3328      	adds	r3, #40	@ 0x28
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fd06 	bl	8003608 <RCCEx_PLL3_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002c02:	e004      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c0a:	e000      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10b      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c16:	4b6c      	ldr	r3, [pc, #432]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1a:	f023 0107 	bic.w	r1, r3, #7
 8002c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c26:	4a68      	ldr	r2, [pc, #416]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c2c:	e003      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	f002 0320 	and.w	r3, r2, #32
 8002c42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c46:	2300      	movs	r3, #0
 8002c48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c50:	460b      	mov	r3, r1
 8002c52:	4313      	orrs	r3, r2
 8002c54:	d055      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c62:	d033      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c68:	d82c      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c6e:	d02f      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c74:	d826      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002c76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c7a:	d02b      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002c7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c80:	d820      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002c82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c86:	d012      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c8c:	d81a      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d022      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002c92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c96:	d115      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fbff 	bl	80034a4 <RCCEx_PLL2_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002cac:	e015      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb2:	3328      	adds	r3, #40	@ 0x28
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fca6 	bl	8003608 <RCCEx_PLL3_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002cc2:	e00a      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cca:	e006      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002ccc:	bf00      	nop
 8002cce:	e004      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002cd0:	bf00      	nop
 8002cd2:	e002      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002cd4:	bf00      	nop
 8002cd6:	e000      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10b      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ce2:	4b39      	ldr	r3, [pc, #228]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf2:	4a35      	ldr	r2, [pc, #212]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6553      	str	r3, [r2, #84]	@ 0x54
 8002cf8:	e003      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002d18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	d058      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d2a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002d2e:	d033      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002d30:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002d34:	d82c      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d3a:	d02f      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d40:	d826      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d46:	d02b      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002d48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d4c:	d820      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d52:	d012      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d58:	d81a      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d022      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d62:	d115      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d68:	3308      	adds	r3, #8
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fb99 	bl	80034a4 <RCCEx_PLL2_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002d78:	e015      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d7e:	3328      	adds	r3, #40	@ 0x28
 8002d80:	2102      	movs	r1, #2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fc40 	bl	8003608 <RCCEx_PLL3_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d96:	e006      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d98:	bf00      	nop
 8002d9a:	e004      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d9c:	bf00      	nop
 8002d9e:	e002      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002da0:	bf00      	nop
 8002da2:	e000      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10e      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dae:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dbe:	4a02      	ldr	r2, [pc, #8]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dc4:	e006      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002dc6:	bf00      	nop
 8002dc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002de0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002dee:	460b      	mov	r3, r1
 8002df0:	4313      	orrs	r3, r2
 8002df2:	d055      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002dfc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002e00:	d033      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002e02:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002e06:	d82c      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e0c:	d02f      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002e0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e12:	d826      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e14:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002e18:	d02b      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002e1a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002e1e:	d820      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e24:	d012      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002e26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e2a:	d81a      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d022      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e34:	d115      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fb30 	bl	80034a4 <RCCEx_PLL2_Config>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002e4a:	e015      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e50:	3328      	adds	r3, #40	@ 0x28
 8002e52:	2102      	movs	r1, #2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fbd7 	bl	8003608 <RCCEx_PLL3_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002e60:	e00a      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e68:	e006      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002e6a:	bf00      	nop
 8002e6c:	e004      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002e6e:	bf00      	nop
 8002e70:	e002      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10b      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002e80:	4ba1      	ldr	r3, [pc, #644]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e84:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e90:	4a9d      	ldr	r2, [pc, #628]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e92:	430b      	orrs	r3, r1
 8002e94:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e96:	e003      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	f002 0308 	and.w	r3, r2, #8
 8002eac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002eb6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	d01e      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed2:	3328      	adds	r3, #40	@ 0x28
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fb96 	bl	8003608 <RCCEx_PLL3_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002ee8:	4b87      	ldr	r3, [pc, #540]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ef8:	4a83      	ldr	r2, [pc, #524]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002efa:	430b      	orrs	r3, r1
 8002efc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	f002 0310 	and.w	r3, r2, #16
 8002f0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002f14:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	d01e      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f2a:	d10c      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f30:	3328      	adds	r3, #40	@ 0x28
 8002f32:	2102      	movs	r1, #2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fb67 	bl	8003608 <RCCEx_PLL3_Config>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f46:	4b70      	ldr	r3, [pc, #448]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f56:	4a6c      	ldr	r2, [pc, #432]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f64:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8002f68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f72:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002f76:	460b      	mov	r3, r1
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	d03e      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f88:	d022      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002f8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f8e:	d81b      	bhi.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f98:	d00b      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002f9a:	e015      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fa7d 	bl	80034a4 <RCCEx_PLL2_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002fb0:	e00f      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb6:	3328      	adds	r3, #40	@ 0x28
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fb24 	bl	8003608 <RCCEx_PLL3_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002fc6:	e004      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fce:	e000      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8002fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fda:	4b4b      	ldr	r3, [pc, #300]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fde:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fea:	4a47      	ldr	r2, [pc, #284]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff0:	e003      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003006:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003008:	2300      	movs	r3, #0
 800300a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800300c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003010:	460b      	mov	r3, r1
 8003012:	4313      	orrs	r3, r2
 8003014:	d03b      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003022:	d01f      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003024:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003028:	d818      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800302a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800302e:	d003      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003030:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003034:	d007      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003036:	e011      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003038:	4b33      	ldr	r3, [pc, #204]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	4a32      	ldr	r2, [pc, #200]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800303e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003044:	e00f      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304a:	3328      	adds	r3, #40	@ 0x28
 800304c:	2101      	movs	r1, #1
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fada 	bl	8003608 <RCCEx_PLL3_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800305a:	e004      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003062:	e000      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800306e:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003072:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	4a22      	ldr	r2, [pc, #136]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003080:	430b      	orrs	r3, r1
 8003082:	6553      	str	r3, [r2, #84]	@ 0x54
 8003084:	e003      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800308a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800308e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003096:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800309a:	673b      	str	r3, [r7, #112]	@ 0x70
 800309c:	2300      	movs	r3, #0
 800309e:	677b      	str	r3, [r7, #116]	@ 0x74
 80030a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80030a4:	460b      	mov	r3, r1
 80030a6:	4313      	orrs	r3, r2
 80030a8:	d034      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b8:	d007      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80030ba:	e011      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030bc:	4b12      	ldr	r3, [pc, #72]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	4a11      	ldr	r2, [pc, #68]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80030c8:	e00e      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ce:	3308      	adds	r3, #8
 80030d0:	2102      	movs	r1, #2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f9e6 	bl	80034a4 <RCCEx_PLL2_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80030de:	e003      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10d      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80030f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fe:	4a02      	ldr	r2, [pc, #8]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003100:	430b      	orrs	r3, r1
 8003102:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003104:	e006      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003106:	bf00      	nop
 8003108:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003110:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003120:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003122:	2300      	movs	r3, #0
 8003124:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003126:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800312a:	460b      	mov	r3, r1
 800312c:	4313      	orrs	r3, r2
 800312e:	d00c      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003134:	3328      	adds	r3, #40	@ 0x28
 8003136:	2102      	movs	r1, #2
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fa65 	bl	8003608 <RCCEx_PLL3_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800314a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003152:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003156:	663b      	str	r3, [r7, #96]	@ 0x60
 8003158:	2300      	movs	r3, #0
 800315a:	667b      	str	r3, [r7, #100]	@ 0x64
 800315c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003160:	460b      	mov	r3, r1
 8003162:	4313      	orrs	r3, r2
 8003164:	d038      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800316e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003172:	d018      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003174:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003178:	d811      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800317a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800317e:	d014      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003184:	d80b      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d011      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800318a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800318e:	d106      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003190:	4bc3      	ldr	r3, [pc, #780]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	4ac2      	ldr	r2, [pc, #776]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800319a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800319c:	e008      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031a4:	e004      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80031ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031b8:	4bb9      	ldr	r3, [pc, #740]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031bc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031c8:	4ab5      	ldr	r2, [pc, #724]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031ca:	430b      	orrs	r3, r1
 80031cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80031ce:	e003      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80031e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031e6:	2300      	movs	r3, #0
 80031e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80031ee:	460b      	mov	r3, r1
 80031f0:	4313      	orrs	r3, r2
 80031f2:	d009      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031f4:	4baa      	ldr	r3, [pc, #680]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80031fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003202:	4aa7      	ldr	r2, [pc, #668]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003204:	430b      	orrs	r3, r1
 8003206:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003214:	653b      	str	r3, [r7, #80]	@ 0x50
 8003216:	2300      	movs	r3, #0
 8003218:	657b      	str	r3, [r7, #84]	@ 0x54
 800321a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800321e:	460b      	mov	r3, r1
 8003220:	4313      	orrs	r3, r2
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003224:	4b9e      	ldr	r3, [pc, #632]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800322c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003230:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003234:	4a9a      	ldr	r2, [pc, #616]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003236:	430b      	orrs	r3, r1
 8003238:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003246:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003248:	2300      	movs	r3, #0
 800324a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800324c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003250:	460b      	mov	r3, r1
 8003252:	4313      	orrs	r3, r2
 8003254:	d009      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003256:	4b92      	ldr	r3, [pc, #584]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800325a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003264:	4a8e      	ldr	r2, [pc, #568]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003266:	430b      	orrs	r3, r1
 8003268:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003276:	643b      	str	r3, [r7, #64]	@ 0x40
 8003278:	2300      	movs	r3, #0
 800327a:	647b      	str	r3, [r7, #68]	@ 0x44
 800327c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003280:	460b      	mov	r3, r1
 8003282:	4313      	orrs	r3, r2
 8003284:	d00e      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003286:	4b86      	ldr	r3, [pc, #536]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	4a85      	ldr	r2, [pc, #532]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800328c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003290:	6113      	str	r3, [r2, #16]
 8003292:	4b83      	ldr	r3, [pc, #524]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003294:	6919      	ldr	r1, [r3, #16]
 8003296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800329e:	4a80      	ldr	r2, [pc, #512]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80032b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032b2:	2300      	movs	r3, #0
 80032b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032b6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80032ba:	460b      	mov	r3, r1
 80032bc:	4313      	orrs	r3, r2
 80032be:	d009      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80032c0:	4b77      	ldr	r3, [pc, #476]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80032c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ce:	4a74      	ldr	r2, [pc, #464]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032d0:	430b      	orrs	r3, r1
 80032d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80032e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80032e2:	2300      	movs	r3, #0
 80032e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80032e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80032ea:	460b      	mov	r3, r1
 80032ec:	4313      	orrs	r3, r2
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032f0:	4b6b      	ldr	r3, [pc, #428]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80032f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003300:	4a67      	ldr	r2, [pc, #412]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003302:	430b      	orrs	r3, r1
 8003304:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	2100      	movs	r1, #0
 8003310:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003318:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800331c:	460b      	mov	r3, r1
 800331e:	4313      	orrs	r3, r2
 8003320:	d011      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003326:	3308      	adds	r3, #8
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f8ba 	bl	80034a4 <RCCEx_PLL2_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	2100      	movs	r1, #0
 8003350:	6239      	str	r1, [r7, #32]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
 8003358:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800335c:	460b      	mov	r3, r1
 800335e:	4313      	orrs	r3, r2
 8003360:	d011      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003366:	3308      	adds	r3, #8
 8003368:	2101      	movs	r1, #1
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f89a 	bl	80034a4 <RCCEx_PLL2_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	2100      	movs	r1, #0
 8003390:	61b9      	str	r1, [r7, #24]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800339c:	460b      	mov	r3, r1
 800339e:	4313      	orrs	r3, r2
 80033a0:	d011      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a6:	3308      	adds	r3, #8
 80033a8:	2102      	movs	r1, #2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f87a 	bl	80034a4 <RCCEx_PLL2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80033b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	2100      	movs	r1, #0
 80033d0:	6139      	str	r1, [r7, #16]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80033dc:	460b      	mov	r3, r1
 80033de:	4313      	orrs	r3, r2
 80033e0:	d011      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e6:	3328      	adds	r3, #40	@ 0x28
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f90c 	bl	8003608 <RCCEx_PLL3_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80033f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	2100      	movs	r1, #0
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800341c:	460b      	mov	r3, r1
 800341e:	4313      	orrs	r3, r2
 8003420:	d011      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003426:	3328      	adds	r3, #40	@ 0x28
 8003428:	2101      	movs	r1, #1
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f8ec 	bl	8003608 <RCCEx_PLL3_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003442:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	2100      	movs	r1, #0
 8003450:	6039      	str	r1, [r7, #0]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	e9d7 1200 	ldrd	r1, r2, [r7]
 800345c:	460b      	mov	r3, r1
 800345e:	4313      	orrs	r3, r2
 8003460:	d011      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003466:	3328      	adds	r3, #40	@ 0x28
 8003468:	2102      	movs	r1, #2
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f8cc 	bl	8003608 <RCCEx_PLL3_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003486:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
}
 8003494:	4618      	mov	r0, r3
 8003496:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800349a:	46bd      	mov	sp, r7
 800349c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a0:	58024400 	.word	0x58024400

080034a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80034b2:	4b53      	ldr	r3, [pc, #332]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 80034b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d101      	bne.n	80034c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e099      	b.n	80035f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80034c2:	4b4f      	ldr	r3, [pc, #316]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a4e      	ldr	r2, [pc, #312]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 80034c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ce:	f7fd fadb 	bl	8000a88 <HAL_GetTick>
 80034d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80034d4:	e008      	b.n	80034e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80034d6:	f7fd fad7 	bl	8000a88 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e086      	b.n	80035f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80034e8:	4b45      	ldr	r3, [pc, #276]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80034f4:	4b42      	ldr	r3, [pc, #264]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	031b      	lsls	r3, r3, #12
 8003502:	493f      	ldr	r1, [pc, #252]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003504:	4313      	orrs	r3, r2
 8003506:	628b      	str	r3, [r1, #40]	@ 0x28
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	3b01      	subs	r3, #1
 800350e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	3b01      	subs	r3, #1
 8003518:	025b      	lsls	r3, r3, #9
 800351a:	b29b      	uxth	r3, r3
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	3b01      	subs	r3, #1
 8003524:	041b      	lsls	r3, r3, #16
 8003526:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	3b01      	subs	r3, #1
 8003532:	061b      	lsls	r3, r3, #24
 8003534:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003538:	4931      	ldr	r1, [pc, #196]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800353e:	4b30      	ldr	r3, [pc, #192]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	492d      	ldr	r1, [pc, #180]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 800354c:	4313      	orrs	r3, r2
 800354e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003550:	4b2b      	ldr	r3, [pc, #172]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	f023 0220 	bic.w	r2, r3, #32
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	4928      	ldr	r1, [pc, #160]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 800355e:	4313      	orrs	r3, r2
 8003560:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003562:	4b27      	ldr	r3, [pc, #156]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003566:	4a26      	ldr	r2, [pc, #152]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003568:	f023 0310 	bic.w	r3, r3, #16
 800356c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800356e:	4b24      	ldr	r3, [pc, #144]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003572:	4b24      	ldr	r3, [pc, #144]	@ (8003604 <RCCEx_PLL2_Config+0x160>)
 8003574:	4013      	ands	r3, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	69d2      	ldr	r2, [r2, #28]
 800357a:	00d2      	lsls	r2, r2, #3
 800357c:	4920      	ldr	r1, [pc, #128]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003582:	4b1f      	ldr	r3, [pc, #124]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003586:	4a1e      	ldr	r2, [pc, #120]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003588:	f043 0310 	orr.w	r3, r3, #16
 800358c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003594:	4b1a      	ldr	r3, [pc, #104]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	4a19      	ldr	r2, [pc, #100]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 800359a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800359e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80035a0:	e00f      	b.n	80035c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d106      	bne.n	80035b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80035a8:	4b15      	ldr	r3, [pc, #84]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ac:	4a14      	ldr	r2, [pc, #80]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80035b4:	e005      	b.n	80035c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80035b6:	4b12      	ldr	r3, [pc, #72]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	4a11      	ldr	r2, [pc, #68]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80035c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ce:	f7fd fa5b 	bl	8000a88 <HAL_GetTick>
 80035d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80035d4:	e008      	b.n	80035e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80035d6:	f7fd fa57 	bl	8000a88 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80035e8:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	58024400 	.word	0x58024400
 8003604:	ffff0007 	.word	0xffff0007

08003608 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003616:	4b53      	ldr	r3, [pc, #332]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 8003618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b03      	cmp	r3, #3
 8003620:	d101      	bne.n	8003626 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e099      	b.n	800375a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003626:	4b4f      	ldr	r3, [pc, #316]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4e      	ldr	r2, [pc, #312]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 800362c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003632:	f7fd fa29 	bl	8000a88 <HAL_GetTick>
 8003636:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003638:	e008      	b.n	800364c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800363a:	f7fd fa25 	bl	8000a88 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e086      	b.n	800375a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800364c:	4b45      	ldr	r3, [pc, #276]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003658:	4b42      	ldr	r3, [pc, #264]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 800365a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	051b      	lsls	r3, r3, #20
 8003666:	493f      	ldr	r1, [pc, #252]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 8003668:	4313      	orrs	r3, r2
 800366a:	628b      	str	r3, [r1, #40]	@ 0x28
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	3b01      	subs	r3, #1
 8003672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	3b01      	subs	r3, #1
 800367c:	025b      	lsls	r3, r3, #9
 800367e:	b29b      	uxth	r3, r3
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	3b01      	subs	r3, #1
 8003688:	041b      	lsls	r3, r3, #16
 800368a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	3b01      	subs	r3, #1
 8003696:	061b      	lsls	r3, r3, #24
 8003698:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800369c:	4931      	ldr	r1, [pc, #196]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80036a2:	4b30      	ldr	r3, [pc, #192]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	492d      	ldr	r1, [pc, #180]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80036b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	4928      	ldr	r1, [pc, #160]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80036c6:	4b27      	ldr	r3, [pc, #156]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ca:	4a26      	ldr	r2, [pc, #152]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80036d2:	4b24      	ldr	r3, [pc, #144]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036d6:	4b24      	ldr	r3, [pc, #144]	@ (8003768 <RCCEx_PLL3_Config+0x160>)
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	69d2      	ldr	r2, [r2, #28]
 80036de:	00d2      	lsls	r2, r2, #3
 80036e0:	4920      	ldr	r1, [pc, #128]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80036e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80036f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	4a19      	ldr	r2, [pc, #100]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003702:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003704:	e00f      	b.n	8003726 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800370c:	4b15      	ldr	r3, [pc, #84]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 800370e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003710:	4a14      	ldr	r2, [pc, #80]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 8003712:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003716:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003718:	e005      	b.n	8003726 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800371a:	4b12      	ldr	r3, [pc, #72]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	4a11      	ldr	r2, [pc, #68]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 8003720:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003724:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003726:	4b0f      	ldr	r3, [pc, #60]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a0e      	ldr	r2, [pc, #56]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 800372c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003732:	f7fd f9a9 	bl	8000a88 <HAL_GetTick>
 8003736:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003738:	e008      	b.n	800374c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800373a:	f7fd f9a5 	bl	8000a88 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e006      	b.n	800375a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800374c:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <RCCEx_PLL3_Config+0x15c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	58024400 	.word	0x58024400
 8003768:	ffff0007 	.word	0xffff0007

0800376c <ResMgr_Init>:
  * @param  SendFunct : function pointer used to send message to the other core
  * @param  Callback  : function pointer used to publish the status to user side
  * @retval Return Status
  */
ResMgr_Status_t  ResMgr_Init(ResMgrSendMsg_t SendFunct, ResMgrCallback_t Callback)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	73fb      	strb	r3, [r7, #15]
  uint32_t count = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
  /* lock table modification */
  RESMGR_TBL_LOCK(RESMGR_ID_RESMGR_TABLE);
 800377e:	201f      	movs	r0, #31
 8003780:	f7fd fc74 	bl	800106c <HAL_HSEM_FastTake>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f9      	bne.n	800377e <ResMgr_Init+0x12>

  /* Check whether the resource is free */
  if(ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State != RESMGR_STATE_TBL_INIT)
 800378a:	4b43      	ldr	r3, [pc, #268]	@ (8003898 <ResMgr_Init+0x12c>)
 800378c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 8003790:	2b5a      	cmp	r3, #90	@ 0x5a
 8003792:	d062      	beq.n	800385a <ResMgr_Init+0xee>
  {

#if defined(RESMGR_USE_DEFAULT_TBL)
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 8003794:	e05a      	b.n	800384c <ResMgr_Init+0xe0>
    {
      if(Default_ResTbl[count] != RES_DEFAULT_ASSIGN_NONE)
 8003796:	4a41      	ldr	r2, [pc, #260]	@ (800389c <ResMgr_Init+0x130>)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4413      	add	r3, r2
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d02a      	beq.n	80037f8 <ResMgr_Init+0x8c>
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_ASSIGNED;
 80037a2:	493d      	ldr	r1, [pc, #244]	@ (8003898 <ResMgr_Init+0x12c>)
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3308      	adds	r3, #8
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU1)
 80037b6:	4a39      	ldr	r2, [pc, #228]	@ (800389c <ResMgr_Init+0x130>)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4413      	add	r3, r2
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d109      	bne.n	80037d6 <ResMgr_Init+0x6a>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU1;
 80037c2:	4935      	ldr	r1, [pc, #212]	@ (8003898 <ResMgr_Init+0x12c>)
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	3304      	adds	r3, #4
 80037d2:	2208      	movs	r2, #8
 80037d4:	601a      	str	r2, [r3, #0]
        }
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU2)
 80037d6:	4a31      	ldr	r2, [pc, #196]	@ (800389c <ResMgr_Init+0x130>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4413      	add	r3, r2
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d11e      	bne.n	8003820 <ResMgr_Init+0xb4>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU2;
 80037e2:	492d      	ldr	r1, [pc, #180]	@ (8003898 <ResMgr_Init+0x12c>)
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	3304      	adds	r3, #4
 80037f2:	2210      	movs	r2, #16
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e013      	b.n	8003820 <ResMgr_Init+0xb4>
        }
      }
      else
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
 80037f8:	4927      	ldr	r1, [pc, #156]	@ (8003898 <ResMgr_Init+0x12c>)
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	3308      	adds	r3, #8
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[count].Ctx.Flags = 0;
 800380c:	4922      	ldr	r1, [pc, #136]	@ (8003898 <ResMgr_Init+0x12c>)
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	3304      	adds	r3, #4
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
      }
      ResMgr_Tbl[count].Spinlock = 0;
 8003820:	491d      	ldr	r1, [pc, #116]	@ (8003898 <ResMgr_Init+0x12c>)
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
 8003832:	4919      	ldr	r1, [pc, #100]	@ (8003898 <ResMgr_Init+0x12c>)
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	3310      	adds	r3, #16
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3301      	adds	r3, #1
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b15      	cmp	r3, #21
 8003850:	d9a1      	bls.n	8003796 <ResMgr_Init+0x2a>
      ResMgr_Tbl[count].Ctx.Flags = 0;
      ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
    }
#endif /* RESMGR_USE_DEFAULT_TBL */
    ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State = RESMGR_STATE_TBL_INIT;
 8003852:	4b11      	ldr	r3, [pc, #68]	@ (8003898 <ResMgr_Init+0x12c>)
 8003854:	225a      	movs	r2, #90	@ 0x5a
 8003856:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
  }

  RESMGR_TBL_UNLOCK(RESMGR_ID_RESMGR_TABLE);
 800385a:	2100      	movs	r1, #0
 800385c:	201f      	movs	r0, #31
 800385e:	f7fd fc1f 	bl	80010a0 <HAL_HSEM_Release>

  if((SendFunct != NULL) || (Callback != NULL))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <ResMgr_Init+0x102>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <ResMgr_Init+0x11c>
  {
    ResMgrSendMsgFunct = SendFunct;
 800386e:	4a0c      	ldr	r2, [pc, #48]	@ (80038a0 <ResMgr_Init+0x134>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct = Callback;
 8003874:	4a0b      	ldr	r2, [pc, #44]	@ (80038a4 <ResMgr_Init+0x138>)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct(RESMGR_ID_ALL, RESMGR_MSG_INIT);
 800387a:	4b0a      	ldr	r3, [pc, #40]	@ (80038a4 <ResMgr_Init+0x138>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2100      	movs	r1, #0
 8003880:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003884:	4798      	blx	r3
 8003886:	e001      	b.n	800388c <ResMgr_Init+0x120>
  }
  else
  {
    ret = RESMGR_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	24000010 	.word	0x24000010
 800389c:	08003928 	.word	0x08003928
 80038a0:	240001e8 	.word	0x240001e8
 80038a4:	240001ec 	.word	0x240001ec

080038a8 <memset>:
 80038a8:	4402      	add	r2, r0
 80038aa:	4603      	mov	r3, r0
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d100      	bne.n	80038b2 <memset+0xa>
 80038b0:	4770      	bx	lr
 80038b2:	f803 1b01 	strb.w	r1, [r3], #1
 80038b6:	e7f9      	b.n	80038ac <memset+0x4>

080038b8 <__libc_init_array>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4d0d      	ldr	r5, [pc, #52]	@ (80038f0 <__libc_init_array+0x38>)
 80038bc:	4c0d      	ldr	r4, [pc, #52]	@ (80038f4 <__libc_init_array+0x3c>)
 80038be:	1b64      	subs	r4, r4, r5
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	2600      	movs	r6, #0
 80038c4:	42a6      	cmp	r6, r4
 80038c6:	d109      	bne.n	80038dc <__libc_init_array+0x24>
 80038c8:	4d0b      	ldr	r5, [pc, #44]	@ (80038f8 <__libc_init_array+0x40>)
 80038ca:	4c0c      	ldr	r4, [pc, #48]	@ (80038fc <__libc_init_array+0x44>)
 80038cc:	f000 f818 	bl	8003900 <_init>
 80038d0:	1b64      	subs	r4, r4, r5
 80038d2:	10a4      	asrs	r4, r4, #2
 80038d4:	2600      	movs	r6, #0
 80038d6:	42a6      	cmp	r6, r4
 80038d8:	d105      	bne.n	80038e6 <__libc_init_array+0x2e>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e0:	4798      	blx	r3
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7ee      	b.n	80038c4 <__libc_init_array+0xc>
 80038e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ea:	4798      	blx	r3
 80038ec:	3601      	adds	r6, #1
 80038ee:	e7f2      	b.n	80038d6 <__libc_init_array+0x1e>
 80038f0:	08003940 	.word	0x08003940
 80038f4:	08003940 	.word	0x08003940
 80038f8:	08003940 	.word	0x08003940
 80038fc:	08003944 	.word	0x08003944

08003900 <_init>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	bf00      	nop
 8003904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003906:	bc08      	pop	{r3}
 8003908:	469e      	mov	lr, r3
 800390a:	4770      	bx	lr

0800390c <_fini>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr
