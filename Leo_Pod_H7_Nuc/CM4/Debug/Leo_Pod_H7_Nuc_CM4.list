
Leo_Pod_H7_Nuc_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011074  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  08111318  08111318  00012318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08111a4c  08111a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08111a54  08111a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  08111a5c  08111a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  10000000  08111a64  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RAM_D3       000001b8  100001dc  08111c40  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00004dc4  10000394  08111df8  00013394  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  10005158  08111df8  00014158  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00013394  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004af1d  00000000  00000000  000133c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000783e  00000000  00000000  0005e2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002320  00000000  00000000  00065b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001ae8  00000000  00000000  00067e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00043e1e  00000000  00000000  00069928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002bae1  00000000  00000000  000ad746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a3904  00000000  00000000  000d9227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0027cb2b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ab7c  00000000  00000000  0027cb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  002876ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000394 	.word	0x10000394
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081112fc 	.word	0x081112fc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000398 	.word	0x10000398
 81002dc:	081112fc 	.word	0x081112fc

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_uldivmod>:
 8100cb8:	b953      	cbnz	r3, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cba:	b94a      	cbnz	r2, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cbc:	2900      	cmp	r1, #0
 8100cbe:	bf08      	it	eq
 8100cc0:	2800      	cmpeq	r0, #0
 8100cc2:	bf1c      	itt	ne
 8100cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8100cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8100ccc:	f000 b988 	b.w	8100fe0 <__aeabi_idiv0>
 8100cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100cd8:	f000 f806 	bl	8100ce8 <__udivmoddi4>
 8100cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ce4:	b004      	add	sp, #16
 8100ce6:	4770      	bx	lr

08100ce8 <__udivmoddi4>:
 8100ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100cec:	9d08      	ldr	r5, [sp, #32]
 8100cee:	468e      	mov	lr, r1
 8100cf0:	4604      	mov	r4, r0
 8100cf2:	4688      	mov	r8, r1
 8100cf4:	2b00      	cmp	r3, #0
 8100cf6:	d14a      	bne.n	8100d8e <__udivmoddi4+0xa6>
 8100cf8:	428a      	cmp	r2, r1
 8100cfa:	4617      	mov	r7, r2
 8100cfc:	d962      	bls.n	8100dc4 <__udivmoddi4+0xdc>
 8100cfe:	fab2 f682 	clz	r6, r2
 8100d02:	b14e      	cbz	r6, 8100d18 <__udivmoddi4+0x30>
 8100d04:	f1c6 0320 	rsb	r3, r6, #32
 8100d08:	fa01 f806 	lsl.w	r8, r1, r6
 8100d0c:	fa20 f303 	lsr.w	r3, r0, r3
 8100d10:	40b7      	lsls	r7, r6
 8100d12:	ea43 0808 	orr.w	r8, r3, r8
 8100d16:	40b4      	lsls	r4, r6
 8100d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100d1c:	fa1f fc87 	uxth.w	ip, r7
 8100d20:	fbb8 f1fe 	udiv	r1, r8, lr
 8100d24:	0c23      	lsrs	r3, r4, #16
 8100d26:	fb0e 8811 	mls	r8, lr, r1, r8
 8100d2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100d2e:	fb01 f20c 	mul.w	r2, r1, ip
 8100d32:	429a      	cmp	r2, r3
 8100d34:	d909      	bls.n	8100d4a <__udivmoddi4+0x62>
 8100d36:	18fb      	adds	r3, r7, r3
 8100d38:	f101 30ff 	add.w	r0, r1, #4294967295
 8100d3c:	f080 80ea 	bcs.w	8100f14 <__udivmoddi4+0x22c>
 8100d40:	429a      	cmp	r2, r3
 8100d42:	f240 80e7 	bls.w	8100f14 <__udivmoddi4+0x22c>
 8100d46:	3902      	subs	r1, #2
 8100d48:	443b      	add	r3, r7
 8100d4a:	1a9a      	subs	r2, r3, r2
 8100d4c:	b2a3      	uxth	r3, r4
 8100d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8100d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8100d56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100d5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8100d5e:	459c      	cmp	ip, r3
 8100d60:	d909      	bls.n	8100d76 <__udivmoddi4+0x8e>
 8100d62:	18fb      	adds	r3, r7, r3
 8100d64:	f100 32ff 	add.w	r2, r0, #4294967295
 8100d68:	f080 80d6 	bcs.w	8100f18 <__udivmoddi4+0x230>
 8100d6c:	459c      	cmp	ip, r3
 8100d6e:	f240 80d3 	bls.w	8100f18 <__udivmoddi4+0x230>
 8100d72:	443b      	add	r3, r7
 8100d74:	3802      	subs	r0, #2
 8100d76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100d7a:	eba3 030c 	sub.w	r3, r3, ip
 8100d7e:	2100      	movs	r1, #0
 8100d80:	b11d      	cbz	r5, 8100d8a <__udivmoddi4+0xa2>
 8100d82:	40f3      	lsrs	r3, r6
 8100d84:	2200      	movs	r2, #0
 8100d86:	e9c5 3200 	strd	r3, r2, [r5]
 8100d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d8e:	428b      	cmp	r3, r1
 8100d90:	d905      	bls.n	8100d9e <__udivmoddi4+0xb6>
 8100d92:	b10d      	cbz	r5, 8100d98 <__udivmoddi4+0xb0>
 8100d94:	e9c5 0100 	strd	r0, r1, [r5]
 8100d98:	2100      	movs	r1, #0
 8100d9a:	4608      	mov	r0, r1
 8100d9c:	e7f5      	b.n	8100d8a <__udivmoddi4+0xa2>
 8100d9e:	fab3 f183 	clz	r1, r3
 8100da2:	2900      	cmp	r1, #0
 8100da4:	d146      	bne.n	8100e34 <__udivmoddi4+0x14c>
 8100da6:	4573      	cmp	r3, lr
 8100da8:	d302      	bcc.n	8100db0 <__udivmoddi4+0xc8>
 8100daa:	4282      	cmp	r2, r0
 8100dac:	f200 8105 	bhi.w	8100fba <__udivmoddi4+0x2d2>
 8100db0:	1a84      	subs	r4, r0, r2
 8100db2:	eb6e 0203 	sbc.w	r2, lr, r3
 8100db6:	2001      	movs	r0, #1
 8100db8:	4690      	mov	r8, r2
 8100dba:	2d00      	cmp	r5, #0
 8100dbc:	d0e5      	beq.n	8100d8a <__udivmoddi4+0xa2>
 8100dbe:	e9c5 4800 	strd	r4, r8, [r5]
 8100dc2:	e7e2      	b.n	8100d8a <__udivmoddi4+0xa2>
 8100dc4:	2a00      	cmp	r2, #0
 8100dc6:	f000 8090 	beq.w	8100eea <__udivmoddi4+0x202>
 8100dca:	fab2 f682 	clz	r6, r2
 8100dce:	2e00      	cmp	r6, #0
 8100dd0:	f040 80a4 	bne.w	8100f1c <__udivmoddi4+0x234>
 8100dd4:	1a8a      	subs	r2, r1, r2
 8100dd6:	0c03      	lsrs	r3, r0, #16
 8100dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100ddc:	b280      	uxth	r0, r0
 8100dde:	b2bc      	uxth	r4, r7
 8100de0:	2101      	movs	r1, #1
 8100de2:	fbb2 fcfe 	udiv	ip, r2, lr
 8100de6:	fb0e 221c 	mls	r2, lr, ip, r2
 8100dea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100dee:	fb04 f20c 	mul.w	r2, r4, ip
 8100df2:	429a      	cmp	r2, r3
 8100df4:	d907      	bls.n	8100e06 <__udivmoddi4+0x11e>
 8100df6:	18fb      	adds	r3, r7, r3
 8100df8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8100dfc:	d202      	bcs.n	8100e04 <__udivmoddi4+0x11c>
 8100dfe:	429a      	cmp	r2, r3
 8100e00:	f200 80e0 	bhi.w	8100fc4 <__udivmoddi4+0x2dc>
 8100e04:	46c4      	mov	ip, r8
 8100e06:	1a9b      	subs	r3, r3, r2
 8100e08:	fbb3 f2fe 	udiv	r2, r3, lr
 8100e0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8100e10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8100e14:	fb02 f404 	mul.w	r4, r2, r4
 8100e18:	429c      	cmp	r4, r3
 8100e1a:	d907      	bls.n	8100e2c <__udivmoddi4+0x144>
 8100e1c:	18fb      	adds	r3, r7, r3
 8100e1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8100e22:	d202      	bcs.n	8100e2a <__udivmoddi4+0x142>
 8100e24:	429c      	cmp	r4, r3
 8100e26:	f200 80ca 	bhi.w	8100fbe <__udivmoddi4+0x2d6>
 8100e2a:	4602      	mov	r2, r0
 8100e2c:	1b1b      	subs	r3, r3, r4
 8100e2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8100e32:	e7a5      	b.n	8100d80 <__udivmoddi4+0x98>
 8100e34:	f1c1 0620 	rsb	r6, r1, #32
 8100e38:	408b      	lsls	r3, r1
 8100e3a:	fa22 f706 	lsr.w	r7, r2, r6
 8100e3e:	431f      	orrs	r7, r3
 8100e40:	fa0e f401 	lsl.w	r4, lr, r1
 8100e44:	fa20 f306 	lsr.w	r3, r0, r6
 8100e48:	fa2e fe06 	lsr.w	lr, lr, r6
 8100e4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100e50:	4323      	orrs	r3, r4
 8100e52:	fa00 f801 	lsl.w	r8, r0, r1
 8100e56:	fa1f fc87 	uxth.w	ip, r7
 8100e5a:	fbbe f0f9 	udiv	r0, lr, r9
 8100e5e:	0c1c      	lsrs	r4, r3, #16
 8100e60:	fb09 ee10 	mls	lr, r9, r0, lr
 8100e64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100e68:	fb00 fe0c 	mul.w	lr, r0, ip
 8100e6c:	45a6      	cmp	lr, r4
 8100e6e:	fa02 f201 	lsl.w	r2, r2, r1
 8100e72:	d909      	bls.n	8100e88 <__udivmoddi4+0x1a0>
 8100e74:	193c      	adds	r4, r7, r4
 8100e76:	f100 3aff 	add.w	sl, r0, #4294967295
 8100e7a:	f080 809c 	bcs.w	8100fb6 <__udivmoddi4+0x2ce>
 8100e7e:	45a6      	cmp	lr, r4
 8100e80:	f240 8099 	bls.w	8100fb6 <__udivmoddi4+0x2ce>
 8100e84:	3802      	subs	r0, #2
 8100e86:	443c      	add	r4, r7
 8100e88:	eba4 040e 	sub.w	r4, r4, lr
 8100e8c:	fa1f fe83 	uxth.w	lr, r3
 8100e90:	fbb4 f3f9 	udiv	r3, r4, r9
 8100e94:	fb09 4413 	mls	r4, r9, r3, r4
 8100e98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8100e9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ea0:	45a4      	cmp	ip, r4
 8100ea2:	d908      	bls.n	8100eb6 <__udivmoddi4+0x1ce>
 8100ea4:	193c      	adds	r4, r7, r4
 8100ea6:	f103 3eff 	add.w	lr, r3, #4294967295
 8100eaa:	f080 8082 	bcs.w	8100fb2 <__udivmoddi4+0x2ca>
 8100eae:	45a4      	cmp	ip, r4
 8100eb0:	d97f      	bls.n	8100fb2 <__udivmoddi4+0x2ca>
 8100eb2:	3b02      	subs	r3, #2
 8100eb4:	443c      	add	r4, r7
 8100eb6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8100eba:	eba4 040c 	sub.w	r4, r4, ip
 8100ebe:	fba0 ec02 	umull	lr, ip, r0, r2
 8100ec2:	4564      	cmp	r4, ip
 8100ec4:	4673      	mov	r3, lr
 8100ec6:	46e1      	mov	r9, ip
 8100ec8:	d362      	bcc.n	8100f90 <__udivmoddi4+0x2a8>
 8100eca:	d05f      	beq.n	8100f8c <__udivmoddi4+0x2a4>
 8100ecc:	b15d      	cbz	r5, 8100ee6 <__udivmoddi4+0x1fe>
 8100ece:	ebb8 0203 	subs.w	r2, r8, r3
 8100ed2:	eb64 0409 	sbc.w	r4, r4, r9
 8100ed6:	fa04 f606 	lsl.w	r6, r4, r6
 8100eda:	fa22 f301 	lsr.w	r3, r2, r1
 8100ede:	431e      	orrs	r6, r3
 8100ee0:	40cc      	lsrs	r4, r1
 8100ee2:	e9c5 6400 	strd	r6, r4, [r5]
 8100ee6:	2100      	movs	r1, #0
 8100ee8:	e74f      	b.n	8100d8a <__udivmoddi4+0xa2>
 8100eea:	fbb1 fcf2 	udiv	ip, r1, r2
 8100eee:	0c01      	lsrs	r1, r0, #16
 8100ef0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8100ef4:	b280      	uxth	r0, r0
 8100ef6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8100efa:	463b      	mov	r3, r7
 8100efc:	4638      	mov	r0, r7
 8100efe:	463c      	mov	r4, r7
 8100f00:	46b8      	mov	r8, r7
 8100f02:	46be      	mov	lr, r7
 8100f04:	2620      	movs	r6, #32
 8100f06:	fbb1 f1f7 	udiv	r1, r1, r7
 8100f0a:	eba2 0208 	sub.w	r2, r2, r8
 8100f0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8100f12:	e766      	b.n	8100de2 <__udivmoddi4+0xfa>
 8100f14:	4601      	mov	r1, r0
 8100f16:	e718      	b.n	8100d4a <__udivmoddi4+0x62>
 8100f18:	4610      	mov	r0, r2
 8100f1a:	e72c      	b.n	8100d76 <__udivmoddi4+0x8e>
 8100f1c:	f1c6 0220 	rsb	r2, r6, #32
 8100f20:	fa2e f302 	lsr.w	r3, lr, r2
 8100f24:	40b7      	lsls	r7, r6
 8100f26:	40b1      	lsls	r1, r6
 8100f28:	fa20 f202 	lsr.w	r2, r0, r2
 8100f2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100f30:	430a      	orrs	r2, r1
 8100f32:	fbb3 f8fe 	udiv	r8, r3, lr
 8100f36:	b2bc      	uxth	r4, r7
 8100f38:	fb0e 3318 	mls	r3, lr, r8, r3
 8100f3c:	0c11      	lsrs	r1, r2, #16
 8100f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100f42:	fb08 f904 	mul.w	r9, r8, r4
 8100f46:	40b0      	lsls	r0, r6
 8100f48:	4589      	cmp	r9, r1
 8100f4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8100f4e:	b280      	uxth	r0, r0
 8100f50:	d93e      	bls.n	8100fd0 <__udivmoddi4+0x2e8>
 8100f52:	1879      	adds	r1, r7, r1
 8100f54:	f108 3cff 	add.w	ip, r8, #4294967295
 8100f58:	d201      	bcs.n	8100f5e <__udivmoddi4+0x276>
 8100f5a:	4589      	cmp	r9, r1
 8100f5c:	d81f      	bhi.n	8100f9e <__udivmoddi4+0x2b6>
 8100f5e:	eba1 0109 	sub.w	r1, r1, r9
 8100f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8100f66:	fb09 f804 	mul.w	r8, r9, r4
 8100f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8100f6e:	b292      	uxth	r2, r2
 8100f70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100f74:	4542      	cmp	r2, r8
 8100f76:	d229      	bcs.n	8100fcc <__udivmoddi4+0x2e4>
 8100f78:	18ba      	adds	r2, r7, r2
 8100f7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8100f7e:	d2c4      	bcs.n	8100f0a <__udivmoddi4+0x222>
 8100f80:	4542      	cmp	r2, r8
 8100f82:	d2c2      	bcs.n	8100f0a <__udivmoddi4+0x222>
 8100f84:	f1a9 0102 	sub.w	r1, r9, #2
 8100f88:	443a      	add	r2, r7
 8100f8a:	e7be      	b.n	8100f0a <__udivmoddi4+0x222>
 8100f8c:	45f0      	cmp	r8, lr
 8100f8e:	d29d      	bcs.n	8100ecc <__udivmoddi4+0x1e4>
 8100f90:	ebbe 0302 	subs.w	r3, lr, r2
 8100f94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8100f98:	3801      	subs	r0, #1
 8100f9a:	46e1      	mov	r9, ip
 8100f9c:	e796      	b.n	8100ecc <__udivmoddi4+0x1e4>
 8100f9e:	eba7 0909 	sub.w	r9, r7, r9
 8100fa2:	4449      	add	r1, r9
 8100fa4:	f1a8 0c02 	sub.w	ip, r8, #2
 8100fa8:	fbb1 f9fe 	udiv	r9, r1, lr
 8100fac:	fb09 f804 	mul.w	r8, r9, r4
 8100fb0:	e7db      	b.n	8100f6a <__udivmoddi4+0x282>
 8100fb2:	4673      	mov	r3, lr
 8100fb4:	e77f      	b.n	8100eb6 <__udivmoddi4+0x1ce>
 8100fb6:	4650      	mov	r0, sl
 8100fb8:	e766      	b.n	8100e88 <__udivmoddi4+0x1a0>
 8100fba:	4608      	mov	r0, r1
 8100fbc:	e6fd      	b.n	8100dba <__udivmoddi4+0xd2>
 8100fbe:	443b      	add	r3, r7
 8100fc0:	3a02      	subs	r2, #2
 8100fc2:	e733      	b.n	8100e2c <__udivmoddi4+0x144>
 8100fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8100fc8:	443b      	add	r3, r7
 8100fca:	e71c      	b.n	8100e06 <__udivmoddi4+0x11e>
 8100fcc:	4649      	mov	r1, r9
 8100fce:	e79c      	b.n	8100f0a <__udivmoddi4+0x222>
 8100fd0:	eba1 0109 	sub.w	r1, r1, r9
 8100fd4:	46c4      	mov	ip, r8
 8100fd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8100fda:	fb09 f804 	mul.w	r8, r9, r4
 8100fde:	e7c4      	b.n	8100f6a <__udivmoddi4+0x282>

08100fe0 <__aeabi_idiv0>:
 8100fe0:	4770      	bx	lr
 8100fe2:	bf00      	nop

08100fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100fe4:	b480      	push	{r7}
 8100fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100fe8:	4b09      	ldr	r3, [pc, #36]	@ (8101010 <SystemInit+0x2c>)
 8100fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100fee:	4a08      	ldr	r2, [pc, #32]	@ (8101010 <SystemInit+0x2c>)
 8100ff0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100ff4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100ff8:	4b05      	ldr	r3, [pc, #20]	@ (8101010 <SystemInit+0x2c>)
 8100ffa:	691b      	ldr	r3, [r3, #16]
 8100ffc:	4a04      	ldr	r2, [pc, #16]	@ (8101010 <SystemInit+0x2c>)
 8100ffe:	f043 0310 	orr.w	r3, r3, #16
 8101002:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101004:	bf00      	nop
 8101006:	46bd      	mov	sp, r7
 8101008:	f85d 7b04 	ldr.w	r7, [sp], #4
 810100c:	4770      	bx	lr
 810100e:	bf00      	nop
 8101010:	e000ed00 	.word	0xe000ed00

08101014 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8101014:	b480      	push	{r7}
 8101016:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8101018:	4b09      	ldr	r3, [pc, #36]	@ (8101040 <ExitRun0Mode+0x2c>)
 810101a:	68db      	ldr	r3, [r3, #12]
 810101c:	4a08      	ldr	r2, [pc, #32]	@ (8101040 <ExitRun0Mode+0x2c>)
 810101e:	f023 0302 	bic.w	r3, r3, #2
 8101022:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8101024:	bf00      	nop
 8101026:	4b06      	ldr	r3, [pc, #24]	@ (8101040 <ExitRun0Mode+0x2c>)
 8101028:	685b      	ldr	r3, [r3, #4]
 810102a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810102e:	2b00      	cmp	r3, #0
 8101030:	d0f9      	beq.n	8101026 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8101032:	bf00      	nop
 8101034:	bf00      	nop
 8101036:	46bd      	mov	sp, r7
 8101038:	f85d 7b04 	ldr.w	r7, [sp], #4
 810103c:	4770      	bx	lr
 810103e:	bf00      	nop
 8101040:	58024800 	.word	0x58024800

08101044 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8101044:	b480      	push	{r7}
 8101046:	b083      	sub	sp, #12
 8101048:	af00      	add	r7, sp, #0
 810104a:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 810104c:	687b      	ldr	r3, [r7, #4]
 810104e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8101052:	d205      	bcs.n	8101060 <_ZSt16__deque_buf_sizej+0x1c>
 8101054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8101058:	687b      	ldr	r3, [r7, #4]
 810105a:	fbb2 f3f3 	udiv	r3, r2, r3
 810105e:	e000      	b.n	8101062 <_ZSt16__deque_buf_sizej+0x1e>
 8101060:	2301      	movs	r3, #1
 8101062:	4618      	mov	r0, r3
 8101064:	370c      	adds	r7, #12
 8101066:	46bd      	mov	sp, r7
 8101068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810106c:	4770      	bx	lr

0810106e <_ZNSt5dequeIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 810106e:	b580      	push	{r7, lr}
 8101070:	b082      	sub	sp, #8
 8101072:	af00      	add	r7, sp, #0
 8101074:	6078      	str	r0, [r7, #4]
 8101076:	687b      	ldr	r3, [r7, #4]
 8101078:	4618      	mov	r0, r3
 810107a:	f000 facc 	bl	8101616 <_ZNSt11_Deque_baseIhSaIhEEC1Ev>
 810107e:	687b      	ldr	r3, [r7, #4]
 8101080:	4618      	mov	r0, r3
 8101082:	3708      	adds	r7, #8
 8101084:	46bd      	mov	sp, r7
 8101086:	bd80      	pop	{r7, pc}

08101088 <_ZN6ClientC1EP20__UART_HandleTypeDef>:
#include <cstdio>
#include "task.h"
#include "DayCam.hpp"  // Include the actual DayCam class
#include "LRX20A.hpp"

Client::Client(UART_HandleTypeDef* huart)
 8101088:	b580      	push	{r7, lr}
 810108a:	b082      	sub	sp, #8
 810108c:	af00      	add	r7, sp, #0
 810108e:	6078      	str	r0, [r7, #4]
 8101090:	6039      	str	r1, [r7, #0]
    : UartEndpoint(huart) {}
 8101092:	687b      	ldr	r3, [r7, #4]
 8101094:	6839      	ldr	r1, [r7, #0]
 8101096:	4618      	mov	r0, r3
 8101098:	f002 f828 	bl	81030ec <_ZN12UartEndpointC1EP20__UART_HandleTypeDef>
 810109c:	4a14      	ldr	r2, [pc, #80]	@ (81010f0 <_ZN6ClientC1EP20__UART_HandleTypeDef+0x68>)
 810109e:	687b      	ldr	r3, [r7, #4]
 81010a0:	601a      	str	r2, [r3, #0]
 81010a2:	687b      	ldr	r3, [r7, #4]
 81010a4:	333c      	adds	r3, #60	@ 0x3c
 81010a6:	4618      	mov	r0, r3
 81010a8:	f7ff ffe1 	bl	810106e <_ZNSt5dequeIhSaIhEEC1Ev>
 81010ac:	687b      	ldr	r3, [r7, #4]
 81010ae:	3364      	adds	r3, #100	@ 0x64
 81010b0:	4618      	mov	r0, r3
 81010b2:	f003 fc22 	bl	81048fa <_ZN4comm7MessageC1Ev>
 81010b6:	687b      	ldr	r3, [r7, #4]
 81010b8:	2200      	movs	r2, #0
 81010ba:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 81010be:	687b      	ldr	r3, [r7, #4]
 81010c0:	2200      	movs	r2, #0
 81010c2:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 81010c6:	687b      	ldr	r3, [r7, #4]
 81010c8:	2200      	movs	r2, #0
 81010ca:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
 81010ce:	687b      	ldr	r3, [r7, #4]
 81010d0:	2200      	movs	r2, #0
 81010d2:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 81010d6:	687b      	ldr	r3, [r7, #4]
 81010d8:	2200      	movs	r2, #0
 81010da:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
 81010de:	687b      	ldr	r3, [r7, #4]
 81010e0:	2200      	movs	r2, #0
 81010e2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 81010e6:	687b      	ldr	r3, [r7, #4]
 81010e8:	4618      	mov	r0, r3
 81010ea:	3708      	adds	r7, #8
 81010ec:	46bd      	mov	sp, r7
 81010ee:	bd80      	pop	{r7, pc}
 81010f0:	08111648 	.word	0x08111648

081010f4 <_ZN6Client4InitEv>:

void Client::Init() {
 81010f4:	b580      	push	{r7, lr}
 81010f6:	b082      	sub	sp, #8
 81010f8:	af00      	add	r7, sp, #0
 81010fa:	6078      	str	r0, [r7, #4]
//    static uint8_t byte;
    if (!StartReceive(&byte_, 1)) {
 81010fc:	6878      	ldr	r0, [r7, #4]
 81010fe:	687b      	ldr	r3, [r7, #4]
 8101100:	3338      	adds	r3, #56	@ 0x38
 8101102:	2201      	movs	r2, #1
 8101104:	4619      	mov	r1, r3
 8101106:	f002 f813 	bl	8103130 <_ZN12UartEndpoint12StartReceiveEPhj>
 810110a:	4603      	mov	r3, r0
 810110c:	f083 0301 	eor.w	r3, r3, #1
 8101110:	b2db      	uxtb	r3, r3
 8101112:	2b00      	cmp	r3, #0
 8101114:	d003      	beq.n	810111e <_ZN6Client4InitEv+0x2a>
        printf("❌ StartReceive failed\n");
 8101116:	4805      	ldr	r0, [pc, #20]	@ (810112c <_ZN6Client4InitEv+0x38>)
 8101118:	f00e f98e 	bl	810f438 <puts>
    }
    else printf("❌ StartReceive success\n");
}
 810111c:	e002      	b.n	8101124 <_ZN6Client4InitEv+0x30>
    else printf("❌ StartReceive success\n");
 810111e:	4804      	ldr	r0, [pc, #16]	@ (8101130 <_ZN6Client4InitEv+0x3c>)
 8101120:	f00e f98a 	bl	810f438 <puts>
}
 8101124:	bf00      	nop
 8101126:	3708      	adds	r7, #8
 8101128:	46bd      	mov	sp, r7
 810112a:	bd80      	pop	{r7, pc}
 810112c:	08111318 	.word	0x08111318
 8101130:	08111330 	.word	0x08111330

08101134 <_ZN6Client13onReceiveByteEh>:
//void Client::onReceiveByte(uint8_t byte) {
//    printf("📥 Received byte: 0x%02X\n", byte);
//    StartReceive(&byte_, 1);  // Re-arm
//}

void Client::onReceiveByte(uint8_t byte) {
 8101134:	b580      	push	{r7, lr}
 8101136:	b084      	sub	sp, #16
 8101138:	af00      	add	r7, sp, #0
 810113a:	6078      	str	r0, [r7, #4]
 810113c:	460b      	mov	r3, r1
 810113e:	70fb      	strb	r3, [r7, #3]
    const TickType_t now = xTaskGetTickCount();
 8101140:	f00c f916 	bl	810d370 <xTaskGetTickCount>
 8101144:	60f8      	str	r0, [r7, #12]

    // Start of new message
    if (!receiving_) {
 8101146:	687b      	ldr	r3, [r7, #4]
 8101148:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 810114c:	f083 0301 	eor.w	r3, r3, #1
 8101150:	b2db      	uxtb	r3, r3
 8101152:	2b00      	cmp	r3, #0
 8101154:	d013      	beq.n	810117e <_ZN6Client13onReceiveByteEh+0x4a>
        if (byte == 0xAA) { // Assume HEADER
 8101156:	78fb      	ldrb	r3, [r7, #3]
 8101158:	2baa      	cmp	r3, #170	@ 0xaa
 810115a:	d174      	bne.n	8101246 <_ZN6Client13onReceiveByteEh+0x112>
            buffer_[0] = byte;
 810115c:	687b      	ldr	r3, [r7, #4]
 810115e:	78fa      	ldrb	r2, [r7, #3]
 8101160:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            bufferIndex_ = 1;
 8101164:	687b      	ldr	r3, [r7, #4]
 8101166:	2201      	movs	r2, #1
 8101168:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            firstByteTick_ = now;
 810116c:	687b      	ldr	r3, [r7, #4]
 810116e:	68fa      	ldr	r2, [r7, #12]
 8101170:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
            receiving_ = true;
 8101174:	687b      	ldr	r3, [r7, #4]
 8101176:	2201      	movs	r2, #1
 8101178:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        }
        return;
 810117c:	e063      	b.n	8101246 <_ZN6Client13onReceiveByteEh+0x112>
    }

    // Timeout check
    if ((now - firstByteTick_) > pdMS_TO_TICKS(500)) {
 810117e:	687b      	ldr	r3, [r7, #4]
 8101180:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8101184:	68fa      	ldr	r2, [r7, #12]
 8101186:	1ad3      	subs	r3, r2, r3
 8101188:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 810118c:	d906      	bls.n	810119c <_ZN6Client13onReceiveByteEh+0x68>
        resetReception();  // Clear buffer, reset flags
 810118e:	6878      	ldr	r0, [r7, #4]
 8101190:	f000 f860 	bl	8101254 <_ZN6Client14resetReceptionEv>
        printf("Timeout/r/n");
 8101194:	482e      	ldr	r0, [pc, #184]	@ (8101250 <_ZN6Client13onReceiveByteEh+0x11c>)
 8101196:	f00e f8df 	bl	810f358 <iprintf>
        return;
 810119a:	e055      	b.n	8101248 <_ZN6Client13onReceiveByteEh+0x114>
    }

    // Accumulate byte
    if (bufferIndex_ < sizeof(buffer_)) {
 810119c:	687b      	ldr	r3, [r7, #4]
 810119e:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 81011a2:	2bff      	cmp	r3, #255	@ 0xff
 81011a4:	d811      	bhi.n	81011ca <_ZN6Client13onReceiveByteEh+0x96>
        buffer_[bufferIndex_++] = byte;
 81011a6:	687b      	ldr	r3, [r7, #4]
 81011a8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 81011ac:	1c59      	adds	r1, r3, #1
 81011ae:	687a      	ldr	r2, [r7, #4]
 81011b0:	f8c2 117c 	str.w	r1, [r2, #380]	@ 0x17c
 81011b4:	687a      	ldr	r2, [r7, #4]
 81011b6:	4413      	add	r3, r2
 81011b8:	78fa      	ldrb	r2, [r7, #3]
 81011ba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        resetReception();
        return;
    }

    // Wait until we have at least length
    if (bufferIndex_ == 6) {
 81011be:	687b      	ldr	r3, [r7, #4]
 81011c0:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 81011c4:	2b06      	cmp	r3, #6
 81011c6:	d10c      	bne.n	81011e2 <_ZN6Client13onReceiveByteEh+0xae>
 81011c8:	e003      	b.n	81011d2 <_ZN6Client13onReceiveByteEh+0x9e>
        resetReception();
 81011ca:	6878      	ldr	r0, [r7, #4]
 81011cc:	f000 f842 	bl	8101254 <_ZN6Client14resetReceptionEv>
        return;
 81011d0:	e03a      	b.n	8101248 <_ZN6Client13onReceiveByteEh+0x114>
        expectedLength_ = 6 + buffer_[5] + 2; // 6 header+meta + payload + CRC+FOOTER
 81011d2:	687b      	ldr	r3, [r7, #4]
 81011d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81011d8:	3308      	adds	r3, #8
 81011da:	461a      	mov	r2, r3
 81011dc:	687b      	ldr	r3, [r7, #4]
 81011de:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    }

    if (bufferIndex_ >= 6 && bufferIndex_ == expectedLength_) {
 81011e2:	687b      	ldr	r3, [r7, #4]
 81011e4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 81011e8:	2b05      	cmp	r3, #5
 81011ea:	d92d      	bls.n	8101248 <_ZN6Client13onReceiveByteEh+0x114>
 81011ec:	687b      	ldr	r3, [r7, #4]
 81011ee:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 81011f2:	687b      	ldr	r3, [r7, #4]
 81011f4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 81011f8:	429a      	cmp	r2, r3
 81011fa:	d125      	bne.n	8101248 <_ZN6Client13onReceiveByteEh+0x114>
        if (buffer_[expectedLength_-1] == 0x55) { // FOOTER
 81011fc:	687b      	ldr	r3, [r7, #4]
 81011fe:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8101202:	3b01      	subs	r3, #1
 8101204:	687a      	ldr	r2, [r7, #4]
 8101206:	4413      	add	r3, r2
 8101208:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 810120c:	2b55      	cmp	r3, #85	@ 0x55
 810120e:	d116      	bne.n	810123e <_ZN6Client13onReceiveByteEh+0x10a>
            if (verifyCRC(buffer_, expectedLength_)) {
 8101210:	687b      	ldr	r3, [r7, #4]
 8101212:	f103 017c 	add.w	r1, r3, #124	@ 0x7c
 8101216:	687b      	ldr	r3, [r7, #4]
 8101218:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 810121c:	461a      	mov	r2, r3
 810121e:	6878      	ldr	r0, [r7, #4]
 8101220:	f000 f9b8 	bl	8101594 <_ZN6Client9verifyCRCEPhj>
 8101224:	4603      	mov	r3, r0
 8101226:	2b00      	cmp	r3, #0
 8101228:	d009      	beq.n	810123e <_ZN6Client13onReceiveByteEh+0x10a>
                parseAndProcess(buffer_, expectedLength_);
 810122a:	687b      	ldr	r3, [r7, #4]
 810122c:	f103 017c 	add.w	r1, r3, #124	@ 0x7c
 8101230:	687b      	ldr	r3, [r7, #4]
 8101232:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8101236:	461a      	mov	r2, r3
 8101238:	6878      	ldr	r0, [r7, #4]
 810123a:	f000 f84b 	bl	81012d4 <_ZN6Client15parseAndProcessEPhj>
            }
        }
        resetReception();
 810123e:	6878      	ldr	r0, [r7, #4]
 8101240:	f000 f808 	bl	8101254 <_ZN6Client14resetReceptionEv>
 8101244:	e000      	b.n	8101248 <_ZN6Client13onReceiveByteEh+0x114>
        return;
 8101246:	bf00      	nop
    }
}
 8101248:	3710      	adds	r7, #16
 810124a:	46bd      	mov	sp, r7
 810124c:	bd80      	pop	{r7, pc}
 810124e:	bf00      	nop
 8101250:	0811134c 	.word	0x0811134c

08101254 <_ZN6Client14resetReceptionEv>:

void Client::resetReception() {
 8101254:	b480      	push	{r7}
 8101256:	b083      	sub	sp, #12
 8101258:	af00      	add	r7, sp, #0
 810125a:	6078      	str	r0, [r7, #4]
    bufferIndex_ = 0;
 810125c:	687b      	ldr	r3, [r7, #4]
 810125e:	2200      	movs	r2, #0
 8101260:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    receiving_ = false;
 8101264:	687b      	ldr	r3, [r7, #4]
 8101266:	2200      	movs	r2, #0
 8101268:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
    firstByteTick_ = 0;
 810126c:	687b      	ldr	r3, [r7, #4]
 810126e:	2200      	movs	r2, #0
 8101270:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
}
 8101274:	bf00      	nop
 8101276:	370c      	adds	r7, #12
 8101278:	46bd      	mov	sp, r7
 810127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810127e:	4770      	bx	lr

08101280 <_ZN6Client15processIncomingEv>:
////            message_.clear();  // ready for next message
//        }
//    }
//}

void Client::processIncoming() {
 8101280:	b580      	push	{r7, lr}
 8101282:	b084      	sub	sp, #16
 8101284:	af00      	add	r7, sp, #0
 8101286:	6078      	str	r0, [r7, #4]
    // Example logic (depending on your architecture)
    while (!rxQueue_.empty()) {
 8101288:	e013      	b.n	81012b2 <_ZN6Client15processIncomingEv+0x32>
        auto msg = rxQueue_.front();
 810128a:	687b      	ldr	r3, [r7, #4]
 810128c:	3310      	adds	r3, #16
 810128e:	4618      	mov	r0, r3
 8101290:	f000 f9e4 	bl	810165c <_ZNSt5dequeIhSaIhEE5frontEv>
 8101294:	4603      	mov	r3, r0
 8101296:	781b      	ldrb	r3, [r3, #0]
 8101298:	73fb      	strb	r3, [r7, #15]
        rxQueue_.pop_front();
 810129a:	687b      	ldr	r3, [r7, #4]
 810129c:	3310      	adds	r3, #16
 810129e:	4618      	mov	r0, r3
 81012a0:	f000 f9f0 	bl	8101684 <_ZNSt5dequeIhSaIhEE9pop_frontEv>
        parseAndProcess(reinterpret_cast<uint8_t*>(&msg), sizeof(comm::Message));
 81012a4:	f107 030f 	add.w	r3, r7, #15
 81012a8:	2218      	movs	r2, #24
 81012aa:	4619      	mov	r1, r3
 81012ac:	6878      	ldr	r0, [r7, #4]
 81012ae:	f000 f811 	bl	81012d4 <_ZN6Client15parseAndProcessEPhj>
    while (!rxQueue_.empty()) {
 81012b2:	687b      	ldr	r3, [r7, #4]
 81012b4:	3310      	adds	r3, #16
 81012b6:	4618      	mov	r0, r3
 81012b8:	f000 f9be 	bl	8101638 <_ZNKSt5dequeIhSaIhEE5emptyEv>
 81012bc:	4603      	mov	r3, r0
 81012be:	f083 0301 	eor.w	r3, r3, #1
 81012c2:	b2db      	uxtb	r3, r3
 81012c4:	2b00      	cmp	r3, #0
 81012c6:	d1e0      	bne.n	810128a <_ZN6Client15processIncomingEv+0xa>
    }
}
 81012c8:	bf00      	nop
 81012ca:	bf00      	nop
 81012cc:	3710      	adds	r7, #16
 81012ce:	46bd      	mov	sp, r7
 81012d0:	bd80      	pop	{r7, pc}
	...

081012d4 <_ZN6Client15parseAndProcessEPhj>:

void Client::parseAndProcess(uint8_t* msg, size_t len) {
 81012d4:	b580      	push	{r7, lr}
 81012d6:	b088      	sub	sp, #32
 81012d8:	af00      	add	r7, sp, #0
 81012da:	60f8      	str	r0, [r7, #12]
 81012dc:	60b9      	str	r1, [r7, #8]
 81012de:	607a      	str	r2, [r7, #4]
    uint8_t srcID = msg[1];
 81012e0:	68bb      	ldr	r3, [r7, #8]
 81012e2:	785b      	ldrb	r3, [r3, #1]
 81012e4:	77fb      	strb	r3, [r7, #31]
    uint8_t destID = msg[2];
 81012e6:	68bb      	ldr	r3, [r7, #8]
 81012e8:	789b      	ldrb	r3, [r3, #2]
 81012ea:	77bb      	strb	r3, [r7, #30]
    uint8_t opCode = msg[3];
 81012ec:	68bb      	ldr	r3, [r7, #8]
 81012ee:	78db      	ldrb	r3, [r3, #3]
 81012f0:	777b      	strb	r3, [r7, #29]
    uint8_t addr   = msg[4];
 81012f2:	68bb      	ldr	r3, [r7, #8]
 81012f4:	791b      	ldrb	r3, [r3, #4]
 81012f6:	773b      	strb	r3, [r7, #28]
    uint8_t length = msg[5];
 81012f8:	68bb      	ldr	r3, [r7, #8]
 81012fa:	795b      	ldrb	r3, [r3, #5]
 81012fc:	76fb      	strb	r3, [r7, #27]
    uint8_t* payload = &msg[6];
 81012fe:	68bb      	ldr	r3, [r7, #8]
 8101300:	3306      	adds	r3, #6
 8101302:	617b      	str	r3, [r7, #20]

    // You can now switch based on opCode, etc.
    switch (opCode) {
 8101304:	7f7b      	ldrb	r3, [r7, #29]
 8101306:	3b01      	subs	r3, #1
 8101308:	2b54      	cmp	r3, #84	@ 0x54
 810130a:	f200 8131 	bhi.w	8101570 <_ZN6Client15parseAndProcessEPhj+0x29c>
 810130e:	a201      	add	r2, pc, #4	@ (adr r2, 8101314 <_ZN6Client15parseAndProcessEPhj+0x40>)
 8101310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101314:	08101469 	.word	0x08101469
 8101318:	08101483 	.word	0x08101483
 810131c:	0810149b 	.word	0x0810149b
 8101320:	081014cb 	.word	0x081014cb
 8101324:	081014d9 	.word	0x081014d9
 8101328:	081014f1 	.word	0x081014f1
 810132c:	08101509 	.word	0x08101509
 8101330:	08101539 	.word	0x08101539
 8101334:	08101571 	.word	0x08101571
 8101338:	08101571 	.word	0x08101571
 810133c:	08101571 	.word	0x08101571
 8101340:	08101571 	.word	0x08101571
 8101344:	08101571 	.word	0x08101571
 8101348:	08101571 	.word	0x08101571
 810134c:	08101571 	.word	0x08101571
 8101350:	08101571 	.word	0x08101571
 8101354:	08101571 	.word	0x08101571
 8101358:	08101571 	.word	0x08101571
 810135c:	08101571 	.word	0x08101571
 8101360:	08101571 	.word	0x08101571
 8101364:	08101571 	.word	0x08101571
 8101368:	08101571 	.word	0x08101571
 810136c:	08101571 	.word	0x08101571
 8101370:	08101571 	.word	0x08101571
 8101374:	08101571 	.word	0x08101571
 8101378:	08101571 	.word	0x08101571
 810137c:	08101571 	.word	0x08101571
 8101380:	08101571 	.word	0x08101571
 8101384:	08101571 	.word	0x08101571
 8101388:	08101571 	.word	0x08101571
 810138c:	08101571 	.word	0x08101571
 8101390:	08101571 	.word	0x08101571
 8101394:	08101571 	.word	0x08101571
 8101398:	08101571 	.word	0x08101571
 810139c:	08101571 	.word	0x08101571
 81013a0:	08101571 	.word	0x08101571
 81013a4:	08101571 	.word	0x08101571
 81013a8:	08101571 	.word	0x08101571
 81013ac:	08101571 	.word	0x08101571
 81013b0:	08101571 	.word	0x08101571
 81013b4:	08101571 	.word	0x08101571
 81013b8:	08101571 	.word	0x08101571
 81013bc:	08101571 	.word	0x08101571
 81013c0:	08101571 	.word	0x08101571
 81013c4:	08101571 	.word	0x08101571
 81013c8:	08101571 	.word	0x08101571
 81013cc:	08101571 	.word	0x08101571
 81013d0:	08101571 	.word	0x08101571
 81013d4:	08101571 	.word	0x08101571
 81013d8:	08101571 	.word	0x08101571
 81013dc:	08101571 	.word	0x08101571
 81013e0:	08101571 	.word	0x08101571
 81013e4:	08101571 	.word	0x08101571
 81013e8:	08101571 	.word	0x08101571
 81013ec:	08101571 	.word	0x08101571
 81013f0:	08101571 	.word	0x08101571
 81013f4:	08101571 	.word	0x08101571
 81013f8:	08101571 	.word	0x08101571
 81013fc:	08101571 	.word	0x08101571
 8101400:	08101571 	.word	0x08101571
 8101404:	08101571 	.word	0x08101571
 8101408:	08101571 	.word	0x08101571
 810140c:	08101571 	.word	0x08101571
 8101410:	08101571 	.word	0x08101571
 8101414:	08101571 	.word	0x08101571
 8101418:	08101571 	.word	0x08101571
 810141c:	08101571 	.word	0x08101571
 8101420:	08101571 	.word	0x08101571
 8101424:	08101571 	.word	0x08101571
 8101428:	08101571 	.word	0x08101571
 810142c:	08101571 	.word	0x08101571
 8101430:	08101571 	.word	0x08101571
 8101434:	08101571 	.word	0x08101571
 8101438:	08101571 	.word	0x08101571
 810143c:	08101571 	.word	0x08101571
 8101440:	08101571 	.word	0x08101571
 8101444:	08101571 	.word	0x08101571
 8101448:	08101571 	.word	0x08101571
 810144c:	08101571 	.word	0x08101571
 8101450:	08101571 	.word	0x08101571
 8101454:	08101571 	.word	0x08101571
 8101458:	08101571 	.word	0x08101571
 810145c:	08101547 	.word	0x08101547
 8101460:	08101555 	.word	0x08101555
 8101464:	08101563 	.word	0x08101563
        case 0x01:
        	//dayCam_->SendCommand(dayCam_->zoom_teleVar, sizeof(dayCam_->zoom_teleVar));
        	if (payload != nullptr)
 8101468:	697b      	ldr	r3, [r7, #20]
 810146a:	2b00      	cmp	r3, #0
 810146c:	f000 8082 	beq.w	8101574 <_ZN6Client15parseAndProcessEPhj+0x2a0>
        		dayCam_->handleZoomIn(payload, length);
 8101470:	68fb      	ldr	r3, [r7, #12]
 8101472:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8101476:	7efa      	ldrb	r2, [r7, #27]
 8101478:	6979      	ldr	r1, [r7, #20]
 810147a:	4618      	mov	r0, r3
 810147c:	f000 fd9e 	bl	8101fbc <_ZN6DayCam12handleZoomInEPhh>
            break;
 8101480:	e078      	b.n	8101574 <_ZN6Client15parseAndProcessEPhj+0x2a0>
        case 0x02:
        	if (payload != nullptr)
 8101482:	697b      	ldr	r3, [r7, #20]
 8101484:	2b00      	cmp	r3, #0
 8101486:	d077      	beq.n	8101578 <_ZN6Client15parseAndProcessEPhj+0x2a4>
        		dayCam_->handleZoomOut(payload, length);
 8101488:	68fb      	ldr	r3, [r7, #12]
 810148a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 810148e:	7efa      	ldrb	r2, [r7, #27]
 8101490:	6979      	ldr	r1, [r7, #20]
 8101492:	4618      	mov	r0, r3
 8101494:	f000 fdc5 	bl	8102022 <_ZN6DayCam13handleZoomOutEPhh>
            break;
 8101498:	e06e      	b.n	8101578 <_ZN6Client15parseAndProcessEPhj+0x2a4>
        case 0x03:
        	if (payload != nullptr){
 810149a:	697b      	ldr	r3, [r7, #20]
 810149c:	2b00      	cmp	r3, #0
 810149e:	d06d      	beq.n	810157c <_ZN6Client15parseAndProcessEPhj+0x2a8>
        	    uint16_t position = (static_cast<uint16_t>(payload[0]) << 8) | payload[1];
 81014a0:	697b      	ldr	r3, [r7, #20]
 81014a2:	781b      	ldrb	r3, [r3, #0]
 81014a4:	b21b      	sxth	r3, r3
 81014a6:	021b      	lsls	r3, r3, #8
 81014a8:	b21a      	sxth	r2, r3
 81014aa:	697b      	ldr	r3, [r7, #20]
 81014ac:	3301      	adds	r3, #1
 81014ae:	781b      	ldrb	r3, [r3, #0]
 81014b0:	b21b      	sxth	r3, r3
 81014b2:	4313      	orrs	r3, r2
 81014b4:	b21b      	sxth	r3, r3
 81014b6:	823b      	strh	r3, [r7, #16]
        	    dayCam_->handleZoom2Position(position);
 81014b8:	68fb      	ldr	r3, [r7, #12]
 81014ba:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 81014be:	8a3a      	ldrh	r2, [r7, #16]
 81014c0:	4611      	mov	r1, r2
 81014c2:	4618      	mov	r0, r3
 81014c4:	f000 fde0 	bl	8102088 <_ZN6DayCam19handleZoom2PositionEt>
        	}
            break;
 81014c8:	e058      	b.n	810157c <_ZN6Client15parseAndProcessEPhj+0x2a8>
        case 0x04:
        	dayCam_->handleZoomStop();
 81014ca:	68fb      	ldr	r3, [r7, #12]
 81014cc:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 81014d0:	4618      	mov	r0, r3
 81014d2:	f000 fe1a 	bl	810210a <_ZN6DayCam14handleZoomStopEv>
			break;
 81014d6:	e058      	b.n	810158a <_ZN6Client15parseAndProcessEPhj+0x2b6>
        case 0x05:
        	//dayCam_->SendCommand(dayCam_->zoom_teleVar, sizeof(dayCam_->zoom_teleVar));
        	if (payload != nullptr)
 81014d8:	697b      	ldr	r3, [r7, #20]
 81014da:	2b00      	cmp	r3, #0
 81014dc:	d050      	beq.n	8101580 <_ZN6Client15parseAndProcessEPhj+0x2ac>
        		dayCam_->handleFocusNear(payload, length);
 81014de:	68fb      	ldr	r3, [r7, #12]
 81014e0:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 81014e4:	7efa      	ldrb	r2, [r7, #27]
 81014e6:	6979      	ldr	r1, [r7, #20]
 81014e8:	4618      	mov	r0, r3
 81014ea:	f000 fe50 	bl	810218e <_ZN6DayCam15handleFocusNearEPhh>
            break;
 81014ee:	e047      	b.n	8101580 <_ZN6Client15parseAndProcessEPhj+0x2ac>
        case 0x06:
        	if (payload != nullptr)
 81014f0:	697b      	ldr	r3, [r7, #20]
 81014f2:	2b00      	cmp	r3, #0
 81014f4:	d046      	beq.n	8101584 <_ZN6Client15parseAndProcessEPhj+0x2b0>
        		dayCam_->handleFocusFar(payload, length);
 81014f6:	68fb      	ldr	r3, [r7, #12]
 81014f8:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 81014fc:	7efa      	ldrb	r2, [r7, #27]
 81014fe:	6979      	ldr	r1, [r7, #20]
 8101500:	4618      	mov	r0, r3
 8101502:	f000 fe11 	bl	8102128 <_ZN6DayCam14handleFocusFarEPhh>
            break;
 8101506:	e03d      	b.n	8101584 <_ZN6Client15parseAndProcessEPhj+0x2b0>
        case 0x07:
        	if (payload != nullptr){
 8101508:	697b      	ldr	r3, [r7, #20]
 810150a:	2b00      	cmp	r3, #0
 810150c:	d03c      	beq.n	8101588 <_ZN6Client15parseAndProcessEPhj+0x2b4>
        	    uint16_t position = (static_cast<uint16_t>(payload[0]) << 8) | payload[1];
 810150e:	697b      	ldr	r3, [r7, #20]
 8101510:	781b      	ldrb	r3, [r3, #0]
 8101512:	b21b      	sxth	r3, r3
 8101514:	021b      	lsls	r3, r3, #8
 8101516:	b21a      	sxth	r2, r3
 8101518:	697b      	ldr	r3, [r7, #20]
 810151a:	3301      	adds	r3, #1
 810151c:	781b      	ldrb	r3, [r3, #0]
 810151e:	b21b      	sxth	r3, r3
 8101520:	4313      	orrs	r3, r2
 8101522:	b21b      	sxth	r3, r3
 8101524:	827b      	strh	r3, [r7, #18]
        	    dayCam_->handleFocus2Position(position);
 8101526:	68fb      	ldr	r3, [r7, #12]
 8101528:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 810152c:	8a7a      	ldrh	r2, [r7, #18]
 810152e:	4611      	mov	r1, r2
 8101530:	4618      	mov	r0, r3
 8101532:	f000 fe5f 	bl	81021f4 <_ZN6DayCam20handleFocus2PositionEt>
        	}
            break;
 8101536:	e027      	b.n	8101588 <_ZN6Client15parseAndProcessEPhj+0x2b4>
        case 0x08:
        	dayCam_->handleFocusStop();
 8101538:	68fb      	ldr	r3, [r7, #12]
 810153a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 810153e:	4618      	mov	r0, r3
 8101540:	f000 fe99 	bl	8102276 <_ZN6DayCam15handleFocusStopEv>
			break;
 8101544:	e021      	b.n	810158a <_ZN6Client15parseAndProcessEPhj+0x2b6>
			break;
        case 0x52: //LRF Enable
        	//lrx20A_->RangesDataCommand();
			break;
        case 0x53: //LRF Enable Fire
        	lrx20A_->RangesDataCommand();
 8101546:	68fb      	ldr	r3, [r7, #12]
 8101548:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 810154c:	4618      	mov	r0, r3
 810154e:	f001 fd27 	bl	8102fa0 <_ZN6LRX20A17RangesDataCommandEv>
			break;
 8101552:	e01a      	b.n	810158a <_ZN6Client15parseAndProcessEPhj+0x2b6>
        case 0x54: //LRF Set lower limit
        	lrx20A_->SetMinimumRangeCommand();
 8101554:	68fb      	ldr	r3, [r7, #12]
 8101556:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 810155a:	4618      	mov	r0, r3
 810155c:	f001 fced 	bl	8102f3a <_ZN6LRX20A22SetMinimumRangeCommandEv>
			break;
 8101560:	e013      	b.n	810158a <_ZN6Client15parseAndProcessEPhj+0x2b6>
        case 0x55: //LRF Set upper limit
        	lrx20A_->SetMaximumRangeCommand();
 8101562:	68fb      	ldr	r3, [r7, #12]
 8101564:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8101568:	4618      	mov	r0, r3
 810156a:	f001 fcff 	bl	8102f6c <_ZN6LRX20A22SetMaximumRangeCommandEv>
			break;
 810156e:	e00c      	b.n	810158a <_ZN6Client15parseAndProcessEPhj+0x2b6>


        default:
            break;
 8101570:	bf00      	nop
 8101572:	e00a      	b.n	810158a <_ZN6Client15parseAndProcessEPhj+0x2b6>
            break;
 8101574:	bf00      	nop
 8101576:	e008      	b.n	810158a <_ZN6Client15parseAndProcessEPhj+0x2b6>
            break;
 8101578:	bf00      	nop
 810157a:	e006      	b.n	810158a <_ZN6Client15parseAndProcessEPhj+0x2b6>
            break;
 810157c:	bf00      	nop
 810157e:	e004      	b.n	810158a <_ZN6Client15parseAndProcessEPhj+0x2b6>
            break;
 8101580:	bf00      	nop
 8101582:	e002      	b.n	810158a <_ZN6Client15parseAndProcessEPhj+0x2b6>
            break;
 8101584:	bf00      	nop
 8101586:	e000      	b.n	810158a <_ZN6Client15parseAndProcessEPhj+0x2b6>
            break;
 8101588:	bf00      	nop
    }
}
 810158a:	bf00      	nop
 810158c:	3720      	adds	r7, #32
 810158e:	46bd      	mov	sp, r7
 8101590:	bd80      	pop	{r7, pc}
 8101592:	bf00      	nop

08101594 <_ZN6Client9verifyCRCEPhj>:

bool Client::verifyCRC(uint8_t* msg, size_t len) {
 8101594:	b480      	push	{r7}
 8101596:	b089      	sub	sp, #36	@ 0x24
 8101598:	af00      	add	r7, sp, #0
 810159a:	60f8      	str	r0, [r7, #12]
 810159c:	60b9      	str	r1, [r7, #8]
 810159e:	607a      	str	r2, [r7, #4]
    if (len < 3) return false;  // Must have at least header + CRC + footer
 81015a0:	687b      	ldr	r3, [r7, #4]
 81015a2:	2b02      	cmp	r3, #2
 81015a4:	d801      	bhi.n	81015aa <_ZN6Client9verifyCRCEPhj+0x16>
 81015a6:	2300      	movs	r3, #0
 81015a8:	e020      	b.n	81015ec <_ZN6Client9verifyCRCEPhj+0x58>

    uint8_t crc = 0x00;  // or 0xFF depending on your protocol
 81015aa:	2300      	movs	r3, #0
 81015ac:	77fb      	strb	r3, [r7, #31]
    for (size_t i = 1; i < len - 2; ++i) { // exclude CRC and footer
 81015ae:	2301      	movs	r3, #1
 81015b0:	61bb      	str	r3, [r7, #24]
 81015b2:	e009      	b.n	81015c8 <_ZN6Client9verifyCRCEPhj+0x34>
        crc ^= msg[i];
 81015b4:	68ba      	ldr	r2, [r7, #8]
 81015b6:	69bb      	ldr	r3, [r7, #24]
 81015b8:	4413      	add	r3, r2
 81015ba:	781a      	ldrb	r2, [r3, #0]
 81015bc:	7ffb      	ldrb	r3, [r7, #31]
 81015be:	4053      	eors	r3, r2
 81015c0:	77fb      	strb	r3, [r7, #31]
    for (size_t i = 1; i < len - 2; ++i) { // exclude CRC and footer
 81015c2:	69bb      	ldr	r3, [r7, #24]
 81015c4:	3301      	adds	r3, #1
 81015c6:	61bb      	str	r3, [r7, #24]
 81015c8:	687b      	ldr	r3, [r7, #4]
 81015ca:	3b02      	subs	r3, #2
 81015cc:	69ba      	ldr	r2, [r7, #24]
 81015ce:	429a      	cmp	r2, r3
 81015d0:	d3f0      	bcc.n	81015b4 <_ZN6Client9verifyCRCEPhj+0x20>

    }

    uint8_t receivedCRC = msg[len - 2];
 81015d2:	687b      	ldr	r3, [r7, #4]
 81015d4:	3b02      	subs	r3, #2
 81015d6:	68ba      	ldr	r2, [r7, #8]
 81015d8:	4413      	add	r3, r2
 81015da:	781b      	ldrb	r3, [r3, #0]
 81015dc:	75fb      	strb	r3, [r7, #23]
    return crc == receivedCRC;
 81015de:	7ffa      	ldrb	r2, [r7, #31]
 81015e0:	7dfb      	ldrb	r3, [r7, #23]
 81015e2:	429a      	cmp	r2, r3
 81015e4:	bf0c      	ite	eq
 81015e6:	2301      	moveq	r3, #1
 81015e8:	2300      	movne	r3, #0
 81015ea:	b2db      	uxtb	r3, r3
}
 81015ec:	4618      	mov	r0, r3
 81015ee:	3724      	adds	r7, #36	@ 0x24
 81015f0:	46bd      	mov	sp, r7
 81015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015f6:	4770      	bx	lr

081015f8 <_ZN6Client9setDayCamEP6DayCam>:

void Client::setDayCam(DayCam* cam) {
 81015f8:	b480      	push	{r7}
 81015fa:	b083      	sub	sp, #12
 81015fc:	af00      	add	r7, sp, #0
 81015fe:	6078      	str	r0, [r7, #4]
 8101600:	6039      	str	r1, [r7, #0]
    dayCam_ = cam;
 8101602:	687b      	ldr	r3, [r7, #4]
 8101604:	683a      	ldr	r2, [r7, #0]
 8101606:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
}
 810160a:	bf00      	nop
 810160c:	370c      	adds	r7, #12
 810160e:	46bd      	mov	sp, r7
 8101610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101614:	4770      	bx	lr

08101616 <_ZNSt11_Deque_baseIhSaIhEEC1Ev>:
      _Deque_base()
 8101616:	b580      	push	{r7, lr}
 8101618:	b082      	sub	sp, #8
 810161a:	af00      	add	r7, sp, #0
 810161c:	6078      	str	r0, [r7, #4]
      : _M_impl()
 810161e:	687b      	ldr	r3, [r7, #4]
 8101620:	4618      	mov	r0, r3
 8101622:	f000 f88c 	bl	810173e <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8101626:	2100      	movs	r1, #0
 8101628:	6878      	ldr	r0, [r7, #4]
 810162a:	f000 f899 	bl	8101760 <_ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEj>
 810162e:	687b      	ldr	r3, [r7, #4]
 8101630:	4618      	mov	r0, r3
 8101632:	3708      	adds	r7, #8
 8101634:	46bd      	mov	sp, r7
 8101636:	bd80      	pop	{r7, pc}

08101638 <_ZNKSt5dequeIhSaIhEE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8101638:	b580      	push	{r7, lr}
 810163a:	b082      	sub	sp, #8
 810163c:	af00      	add	r7, sp, #0
 810163e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8101640:	687b      	ldr	r3, [r7, #4]
 8101642:	f103 0218 	add.w	r2, r3, #24
 8101646:	687b      	ldr	r3, [r7, #4]
 8101648:	3308      	adds	r3, #8
 810164a:	4619      	mov	r1, r3
 810164c:	4610      	mov	r0, r2
 810164e:	f000 f8e9 	bl	8101824 <_ZSteqRKSt15_Deque_iteratorIhRhPhES4_>
 8101652:	4603      	mov	r3, r0
 8101654:	4618      	mov	r0, r3
 8101656:	3708      	adds	r7, #8
 8101658:	46bd      	mov	sp, r7
 810165a:	bd80      	pop	{r7, pc}

0810165c <_ZNSt5dequeIhSaIhEE5frontEv>:
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      _GLIBCXX_NODISCARD
      reference
      front() _GLIBCXX_NOEXCEPT
 810165c:	b580      	push	{r7, lr}
 810165e:	b086      	sub	sp, #24
 8101660:	af00      	add	r7, sp, #0
 8101662:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8101664:	f107 0308 	add.w	r3, r7, #8
 8101668:	6879      	ldr	r1, [r7, #4]
 810166a:	4618      	mov	r0, r3
 810166c:	f000 f831 	bl	81016d2 <_ZNSt5dequeIhSaIhEE5beginEv>
 8101670:	f107 0308 	add.w	r3, r7, #8
 8101674:	4618      	mov	r0, r3
 8101676:	f000 f8e9 	bl	810184c <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>
 810167a:	4603      	mov	r3, r0
      }
 810167c:	4618      	mov	r0, r3
 810167e:	3718      	adds	r7, #24
 8101680:	46bd      	mov	sp, r7
 8101682:	bd80      	pop	{r7, pc}

08101684 <_ZNSt5dequeIhSaIhEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8101684:	b580      	push	{r7, lr}
 8101686:	b086      	sub	sp, #24
 8101688:	af00      	add	r7, sp, #0
 810168a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 810168c:	687b      	ldr	r3, [r7, #4]
 810168e:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8101690:	687b      	ldr	r3, [r7, #4]
 8101692:	691b      	ldr	r3, [r3, #16]
 8101694:	3b01      	subs	r3, #1
	if (this->_M_impl._M_start._M_cur
 8101696:	429a      	cmp	r2, r3
 8101698:	d014      	beq.n	81016c4 <_ZNSt5dequeIhSaIhEE9pop_frontEv+0x40>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 810169a:	687b      	ldr	r3, [r7, #4]
 810169c:	4618      	mov	r0, r3
 810169e:	f000 f827 	bl	81016f0 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 81016a2:	4602      	mov	r2, r0
 81016a4:	687b      	ldr	r3, [r7, #4]
 81016a6:	689b      	ldr	r3, [r3, #8]
 81016a8:	617a      	str	r2, [r7, #20]
 81016aa:	613b      	str	r3, [r7, #16]
 81016ac:	697b      	ldr	r3, [r7, #20]
 81016ae:	60fb      	str	r3, [r7, #12]
 81016b0:	693b      	ldr	r3, [r7, #16]
 81016b2:	60bb      	str	r3, [r7, #8]
      template<typename _Up>
	__attribute__((__always_inline__))
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 81016b4:	bf00      	nop
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
#endif
	}
 81016b6:	bf00      	nop
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 81016b8:	687b      	ldr	r3, [r7, #4]
 81016ba:	689b      	ldr	r3, [r3, #8]
 81016bc:	1c5a      	adds	r2, r3, #1
 81016be:	687b      	ldr	r3, [r7, #4]
 81016c0:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 81016c2:	e002      	b.n	81016ca <_ZNSt5dequeIhSaIhEE9pop_frontEv+0x46>
	  _M_pop_front_aux();
 81016c4:	6878      	ldr	r0, [r7, #4]
 81016c6:	f000 f8cd 	bl	8101864 <_ZNSt5dequeIhSaIhEE16_M_pop_front_auxEv>
      }
 81016ca:	bf00      	nop
 81016cc:	3718      	adds	r7, #24
 81016ce:	46bd      	mov	sp, r7
 81016d0:	bd80      	pop	{r7, pc}

081016d2 <_ZNSt5dequeIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 81016d2:	b580      	push	{r7, lr}
 81016d4:	b082      	sub	sp, #8
 81016d6:	af00      	add	r7, sp, #0
 81016d8:	6078      	str	r0, [r7, #4]
 81016da:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 81016dc:	683b      	ldr	r3, [r7, #0]
 81016de:	3308      	adds	r3, #8
 81016e0:	4619      	mov	r1, r3
 81016e2:	6878      	ldr	r0, [r7, #4]
 81016e4:	f000 f80f 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 81016e8:	6878      	ldr	r0, [r7, #4]
 81016ea:	3708      	adds	r7, #8
 81016ec:	46bd      	mov	sp, r7
 81016ee:	bd80      	pop	{r7, pc}

081016f0 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 81016f0:	b480      	push	{r7}
 81016f2:	b083      	sub	sp, #12
 81016f4:	af00      	add	r7, sp, #0
 81016f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 81016f8:	687b      	ldr	r3, [r7, #4]
 81016fa:	4618      	mov	r0, r3
 81016fc:	370c      	adds	r7, #12
 81016fe:	46bd      	mov	sp, r7
 8101700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101704:	4770      	bx	lr

08101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8101706:	b480      	push	{r7}
 8101708:	b083      	sub	sp, #12
 810170a:	af00      	add	r7, sp, #0
 810170c:	6078      	str	r0, [r7, #4]
 810170e:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8101710:	683b      	ldr	r3, [r7, #0]
 8101712:	681a      	ldr	r2, [r3, #0]
 8101714:	687b      	ldr	r3, [r7, #4]
 8101716:	601a      	str	r2, [r3, #0]
 8101718:	683b      	ldr	r3, [r7, #0]
 810171a:	685a      	ldr	r2, [r3, #4]
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8101720:	683b      	ldr	r3, [r7, #0]
 8101722:	689a      	ldr	r2, [r3, #8]
 8101724:	687b      	ldr	r3, [r7, #4]
 8101726:	609a      	str	r2, [r3, #8]
 8101728:	683b      	ldr	r3, [r7, #0]
 810172a:	68da      	ldr	r2, [r3, #12]
 810172c:	687b      	ldr	r3, [r7, #4]
 810172e:	60da      	str	r2, [r3, #12]
 8101730:	687b      	ldr	r3, [r7, #4]
 8101732:	4618      	mov	r0, r3
 8101734:	370c      	adds	r7, #12
 8101736:	46bd      	mov	sp, r7
 8101738:	f85d 7b04 	ldr.w	r7, [sp], #4
 810173c:	4770      	bx	lr

0810173e <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 810173e:	b580      	push	{r7, lr}
 8101740:	b084      	sub	sp, #16
 8101742:	af00      	add	r7, sp, #0
 8101744:	6078      	str	r0, [r7, #4]
 8101746:	687b      	ldr	r3, [r7, #4]
 8101748:	60fb      	str	r3, [r7, #12]
 810174a:	68fb      	ldr	r3, [r7, #12]
 810174c:	60bb      	str	r3, [r7, #8]
	: _Tp_alloc_type()
 810174e:	687b      	ldr	r3, [r7, #4]
 8101750:	4618      	mov	r0, r3
 8101752:	f000 f8b3 	bl	81018bc <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1Ev>
	{ }
 8101756:	687b      	ldr	r3, [r7, #4]
 8101758:	4618      	mov	r0, r3
 810175a:	3710      	adds	r7, #16
 810175c:	46bd      	mov	sp, r7
 810175e:	bd80      	pop	{r7, pc}

08101760 <_ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8101760:	b590      	push	{r4, r7, lr}
 8101762:	b089      	sub	sp, #36	@ 0x24
 8101764:	af00      	add	r7, sp, #0
 8101766:	6078      	str	r0, [r7, #4]
 8101768:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 810176a:	2001      	movs	r0, #1
 810176c:	f7ff fc6a 	bl	8101044 <_ZSt16__deque_buf_sizej>
 8101770:	4602      	mov	r2, r0
 8101772:	683b      	ldr	r3, [r7, #0]
 8101774:	fbb3 f3f2 	udiv	r3, r3, r2
 8101778:	3301      	adds	r3, #1
 810177a:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 810177c:	2308      	movs	r3, #8
 810177e:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8101780:	69fb      	ldr	r3, [r7, #28]
 8101782:	3302      	adds	r3, #2
 8101784:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8101786:	f107 0210 	add.w	r2, r7, #16
 810178a:	f107 030c 	add.w	r3, r7, #12
 810178e:	4611      	mov	r1, r2
 8101790:	4618      	mov	r0, r3
 8101792:	f000 f8ac 	bl	81018ee <_ZSt3maxIjERKT_S2_S2_>
 8101796:	4603      	mov	r3, r0
 8101798:	681a      	ldr	r2, [r3, #0]
 810179a:	687b      	ldr	r3, [r7, #4]
 810179c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 810179e:	687b      	ldr	r3, [r7, #4]
 81017a0:	685b      	ldr	r3, [r3, #4]
 81017a2:	4619      	mov	r1, r3
 81017a4:	6878      	ldr	r0, [r7, #4]
 81017a6:	f000 f8b6 	bl	8101916 <_ZNSt11_Deque_baseIhSaIhEE15_M_allocate_mapEj>
 81017aa:	4602      	mov	r2, r0
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 81017b0:	687b      	ldr	r3, [r7, #4]
 81017b2:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 81017b4:	687b      	ldr	r3, [r7, #4]
 81017b6:	6859      	ldr	r1, [r3, #4]
 81017b8:	69fb      	ldr	r3, [r7, #28]
 81017ba:	1acb      	subs	r3, r1, r3
 81017bc:	085b      	lsrs	r3, r3, #1
 81017be:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 81017c0:	4413      	add	r3, r2
 81017c2:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 81017c4:	69fb      	ldr	r3, [r7, #28]
 81017c6:	009b      	lsls	r3, r3, #2
 81017c8:	69ba      	ldr	r2, [r7, #24]
 81017ca:	4413      	add	r3, r2
 81017cc:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 81017ce:	697a      	ldr	r2, [r7, #20]
 81017d0:	69b9      	ldr	r1, [r7, #24]
 81017d2:	6878      	ldr	r0, [r7, #4]
 81017d4:	f000 f8c0 	bl	8101958 <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 81017d8:	687b      	ldr	r3, [r7, #4]
 81017da:	3308      	adds	r3, #8
 81017dc:	69b9      	ldr	r1, [r7, #24]
 81017de:	4618      	mov	r0, r3
 81017e0:	f000 f8d5 	bl	810198e <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 81017e4:	687b      	ldr	r3, [r7, #4]
 81017e6:	f103 0218 	add.w	r2, r3, #24
 81017ea:	697b      	ldr	r3, [r7, #20]
 81017ec:	3b04      	subs	r3, #4
 81017ee:	4619      	mov	r1, r3
 81017f0:	4610      	mov	r0, r2
 81017f2:	f000 f8cc 	bl	810198e <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 81017f6:	687b      	ldr	r3, [r7, #4]
 81017f8:	68da      	ldr	r2, [r3, #12]
 81017fa:	687b      	ldr	r3, [r7, #4]
 81017fc:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 81017fe:	687b      	ldr	r3, [r7, #4]
 8101800:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8101802:	2001      	movs	r0, #1
 8101804:	f7ff fc1e 	bl	8101044 <_ZSt16__deque_buf_sizej>
 8101808:	4602      	mov	r2, r0
 810180a:	683b      	ldr	r3, [r7, #0]
 810180c:	fbb3 f1f2 	udiv	r1, r3, r2
 8101810:	fb01 f202 	mul.w	r2, r1, r2
 8101814:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8101816:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8101818:	687b      	ldr	r3, [r7, #4]
 810181a:	619a      	str	r2, [r3, #24]
    }
 810181c:	bf00      	nop
 810181e:	3724      	adds	r7, #36	@ 0x24
 8101820:	46bd      	mov	sp, r7
 8101822:	bd90      	pop	{r4, r7, pc}

08101824 <_ZSteqRKSt15_Deque_iteratorIhRhPhES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8101824:	b480      	push	{r7}
 8101826:	b083      	sub	sp, #12
 8101828:	af00      	add	r7, sp, #0
 810182a:	6078      	str	r0, [r7, #4]
 810182c:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 810182e:	687b      	ldr	r3, [r7, #4]
 8101830:	681a      	ldr	r2, [r3, #0]
 8101832:	683b      	ldr	r3, [r7, #0]
 8101834:	681b      	ldr	r3, [r3, #0]
 8101836:	429a      	cmp	r2, r3
 8101838:	bf0c      	ite	eq
 810183a:	2301      	moveq	r3, #1
 810183c:	2300      	movne	r3, #0
 810183e:	b2db      	uxtb	r3, r3
 8101840:	4618      	mov	r0, r3
 8101842:	370c      	adds	r7, #12
 8101844:	46bd      	mov	sp, r7
 8101846:	f85d 7b04 	ldr.w	r7, [sp], #4
 810184a:	4770      	bx	lr

0810184c <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810184c:	b480      	push	{r7}
 810184e:	b083      	sub	sp, #12
 8101850:	af00      	add	r7, sp, #0
 8101852:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8101854:	687b      	ldr	r3, [r7, #4]
 8101856:	681b      	ldr	r3, [r3, #0]
 8101858:	4618      	mov	r0, r3
 810185a:	370c      	adds	r7, #12
 810185c:	46bd      	mov	sp, r7
 810185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101862:	4770      	bx	lr

08101864 <_ZNSt5dequeIhSaIhEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8101864:	b580      	push	{r7, lr}
 8101866:	b086      	sub	sp, #24
 8101868:	af00      	add	r7, sp, #0
 810186a:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 810186c:	687b      	ldr	r3, [r7, #4]
 810186e:	4618      	mov	r0, r3
 8101870:	f7ff ff3e 	bl	81016f0 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8101874:	4602      	mov	r2, r0
 8101876:	687b      	ldr	r3, [r7, #4]
 8101878:	689b      	ldr	r3, [r3, #8]
 810187a:	617a      	str	r2, [r7, #20]
 810187c:	613b      	str	r3, [r7, #16]
 810187e:	697b      	ldr	r3, [r7, #20]
 8101880:	60fb      	str	r3, [r7, #12]
 8101882:	693b      	ldr	r3, [r7, #16]
 8101884:	60bb      	str	r3, [r7, #8]
 8101886:	bf00      	nop
 8101888:	bf00      	nop
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 810188a:	687a      	ldr	r2, [r7, #4]
 810188c:	687b      	ldr	r3, [r7, #4]
 810188e:	68db      	ldr	r3, [r3, #12]
 8101890:	4619      	mov	r1, r3
 8101892:	4610      	mov	r0, r2
 8101894:	f000 f893 	bl	81019be <_ZNSt11_Deque_baseIhSaIhEE18_M_deallocate_nodeEPh>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8101898:	687b      	ldr	r3, [r7, #4]
 810189a:	f103 0208 	add.w	r2, r3, #8
 810189e:	687b      	ldr	r3, [r7, #4]
 81018a0:	695b      	ldr	r3, [r3, #20]
 81018a2:	3304      	adds	r3, #4
 81018a4:	4619      	mov	r1, r3
 81018a6:	4610      	mov	r0, r2
 81018a8:	f000 f871 	bl	810198e <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 81018ac:	687b      	ldr	r3, [r7, #4]
 81018ae:	68da      	ldr	r2, [r3, #12]
 81018b0:	687b      	ldr	r3, [r7, #4]
 81018b2:	609a      	str	r2, [r3, #8]
    }
 81018b4:	bf00      	nop
 81018b6:	3718      	adds	r7, #24
 81018b8:	46bd      	mov	sp, r7
 81018ba:	bd80      	pop	{r7, pc}

081018bc <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 81018bc:	b580      	push	{r7, lr}
 81018be:	b082      	sub	sp, #8
 81018c0:	af00      	add	r7, sp, #0
 81018c2:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 81018c4:	687b      	ldr	r3, [r7, #4]
 81018c6:	2200      	movs	r2, #0
 81018c8:	601a      	str	r2, [r3, #0]
 81018ca:	687b      	ldr	r3, [r7, #4]
 81018cc:	2200      	movs	r2, #0
 81018ce:	605a      	str	r2, [r3, #4]
 81018d0:	687b      	ldr	r3, [r7, #4]
 81018d2:	3308      	adds	r3, #8
 81018d4:	4618      	mov	r0, r3
 81018d6:	f000 f89d 	bl	8101a14 <_ZNSt15_Deque_iteratorIhRhPhEC1Ev>
 81018da:	687b      	ldr	r3, [r7, #4]
 81018dc:	3318      	adds	r3, #24
 81018de:	4618      	mov	r0, r3
 81018e0:	f000 f898 	bl	8101a14 <_ZNSt15_Deque_iteratorIhRhPhEC1Ev>
	{ }
 81018e4:	687b      	ldr	r3, [r7, #4]
 81018e6:	4618      	mov	r0, r3
 81018e8:	3708      	adds	r7, #8
 81018ea:	46bd      	mov	sp, r7
 81018ec:	bd80      	pop	{r7, pc}

081018ee <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 81018ee:	b480      	push	{r7}
 81018f0:	b083      	sub	sp, #12
 81018f2:	af00      	add	r7, sp, #0
 81018f4:	6078      	str	r0, [r7, #4]
 81018f6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 81018f8:	687b      	ldr	r3, [r7, #4]
 81018fa:	681a      	ldr	r2, [r3, #0]
 81018fc:	683b      	ldr	r3, [r7, #0]
 81018fe:	681b      	ldr	r3, [r3, #0]
 8101900:	429a      	cmp	r2, r3
 8101902:	d201      	bcs.n	8101908 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8101904:	683b      	ldr	r3, [r7, #0]
 8101906:	e000      	b.n	810190a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8101908:	687b      	ldr	r3, [r7, #4]
    }
 810190a:	4618      	mov	r0, r3
 810190c:	370c      	adds	r7, #12
 810190e:	46bd      	mov	sp, r7
 8101910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101914:	4770      	bx	lr

08101916 <_ZNSt11_Deque_baseIhSaIhEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8101916:	b590      	push	{r4, r7, lr}
 8101918:	b085      	sub	sp, #20
 810191a:	af00      	add	r7, sp, #0
 810191c:	6078      	str	r0, [r7, #4]
 810191e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8101920:	f107 0308 	add.w	r3, r7, #8
 8101924:	6879      	ldr	r1, [r7, #4]
 8101926:	4618      	mov	r0, r3
 8101928:	f000 f861 	bl	81019ee <_ZNKSt11_Deque_baseIhSaIhEE20_M_get_map_allocatorEv>
 810192c:	683b      	ldr	r3, [r7, #0]
 810192e:	60fb      	str	r3, [r7, #12]
      { return __a.allocate(__n); }
 8101930:	f107 0308 	add.w	r3, r7, #8
 8101934:	2200      	movs	r2, #0
 8101936:	68f9      	ldr	r1, [r7, #12]
 8101938:	4618      	mov	r0, r3
 810193a:	f000 f8b6 	bl	8101aaa <_ZNSt15__new_allocatorIPhE8allocateEjPKv>
 810193e:	4604      	mov	r4, r0
 8101940:	bf00      	nop
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8101942:	bf00      	nop

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8101944:	f107 0308 	add.w	r3, r7, #8
 8101948:	4618      	mov	r0, r3
 810194a:	f000 f8a3 	bl	8101a94 <_ZNSt15__new_allocatorIPhED1Ev>
 810194e:	4623      	mov	r3, r4
      }
 8101950:	4618      	mov	r0, r3
 8101952:	3714      	adds	r7, #20
 8101954:	46bd      	mov	sp, r7
 8101956:	bd90      	pop	{r4, r7, pc}

08101958 <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_>:
    _Deque_base<_Tp, _Alloc>::
 8101958:	b580      	push	{r7, lr}
 810195a:	b086      	sub	sp, #24
 810195c:	af00      	add	r7, sp, #0
 810195e:	60f8      	str	r0, [r7, #12]
 8101960:	60b9      	str	r1, [r7, #8]
 8101962:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8101964:	68bb      	ldr	r3, [r7, #8]
 8101966:	617b      	str	r3, [r7, #20]
 8101968:	e008      	b.n	810197c <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_+0x24>
	    *__cur = this->_M_allocate_node();
 810196a:	68f8      	ldr	r0, [r7, #12]
 810196c:	f000 f869 	bl	8101a42 <_ZNSt11_Deque_baseIhSaIhEE16_M_allocate_nodeEv>
 8101970:	4602      	mov	r2, r0
 8101972:	697b      	ldr	r3, [r7, #20]
 8101974:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8101976:	697b      	ldr	r3, [r7, #20]
 8101978:	3304      	adds	r3, #4
 810197a:	617b      	str	r3, [r7, #20]
 810197c:	697a      	ldr	r2, [r7, #20]
 810197e:	687b      	ldr	r3, [r7, #4]
 8101980:	429a      	cmp	r2, r3
 8101982:	d3f2      	bcc.n	810196a <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_+0x12>
    }
 8101984:	bf00      	nop
 8101986:	bf00      	nop
 8101988:	3718      	adds	r7, #24
 810198a:	46bd      	mov	sp, r7
 810198c:	bd80      	pop	{r7, pc}

0810198e <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 810198e:	b590      	push	{r4, r7, lr}
 8101990:	b083      	sub	sp, #12
 8101992:	af00      	add	r7, sp, #0
 8101994:	6078      	str	r0, [r7, #4]
 8101996:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8101998:	687b      	ldr	r3, [r7, #4]
 810199a:	683a      	ldr	r2, [r7, #0]
 810199c:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 810199e:	683b      	ldr	r3, [r7, #0]
 81019a0:	681a      	ldr	r2, [r3, #0]
 81019a2:	687b      	ldr	r3, [r7, #4]
 81019a4:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 81019a6:	687b      	ldr	r3, [r7, #4]
 81019a8:	685c      	ldr	r4, [r3, #4]
 81019aa:	f000 f860 	bl	8101a6e <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 81019ae:	4603      	mov	r3, r0
 81019b0:	18e2      	adds	r2, r4, r3
 81019b2:	687b      	ldr	r3, [r7, #4]
 81019b4:	609a      	str	r2, [r3, #8]
      }
 81019b6:	bf00      	nop
 81019b8:	370c      	adds	r7, #12
 81019ba:	46bd      	mov	sp, r7
 81019bc:	bd90      	pop	{r4, r7, pc}

081019be <_ZNSt11_Deque_baseIhSaIhEE18_M_deallocate_nodeEPh>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 81019be:	b590      	push	{r4, r7, lr}
 81019c0:	b087      	sub	sp, #28
 81019c2:	af00      	add	r7, sp, #0
 81019c4:	6078      	str	r0, [r7, #4]
 81019c6:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 81019c8:	687c      	ldr	r4, [r7, #4]
 81019ca:	2001      	movs	r0, #1
 81019cc:	f7ff fb3a 	bl	8101044 <_ZSt16__deque_buf_sizej>
 81019d0:	4602      	mov	r2, r0
 81019d2:	617c      	str	r4, [r7, #20]
 81019d4:	683b      	ldr	r3, [r7, #0]
 81019d6:	613b      	str	r3, [r7, #16]
 81019d8:	60fa      	str	r2, [r7, #12]
      { __a.deallocate(__p, __n); }
 81019da:	68fa      	ldr	r2, [r7, #12]
 81019dc:	6939      	ldr	r1, [r7, #16]
 81019de:	6978      	ldr	r0, [r7, #20]
 81019e0:	f000 f88c 	bl	8101afc <_ZNSt15__new_allocatorIhE10deallocateEPhj>
 81019e4:	bf00      	nop
      }
 81019e6:	bf00      	nop
 81019e8:	371c      	adds	r7, #28
 81019ea:	46bd      	mov	sp, r7
 81019ec:	bd90      	pop	{r4, r7, pc}

081019ee <_ZNKSt11_Deque_baseIhSaIhEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 81019ee:	b580      	push	{r7, lr}
 81019f0:	b086      	sub	sp, #24
 81019f2:	af00      	add	r7, sp, #0
 81019f4:	6078      	str	r0, [r7, #4]
 81019f6:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 81019f8:	6838      	ldr	r0, [r7, #0]
 81019fa:	f000 f840 	bl	8101a7e <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 81019fe:	4602      	mov	r2, r0
 8101a00:	687b      	ldr	r3, [r7, #4]
 8101a02:	617b      	str	r3, [r7, #20]
 8101a04:	613a      	str	r2, [r7, #16]
 8101a06:	697b      	ldr	r3, [r7, #20]
 8101a08:	60fb      	str	r3, [r7, #12]
 8101a0a:	bf00      	nop
 8101a0c:	6878      	ldr	r0, [r7, #4]
 8101a0e:	3718      	adds	r7, #24
 8101a10:	46bd      	mov	sp, r7
 8101a12:	bd80      	pop	{r7, pc}

08101a14 <_ZNSt15_Deque_iteratorIhRhPhEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8101a14:	b480      	push	{r7}
 8101a16:	b083      	sub	sp, #12
 8101a18:	af00      	add	r7, sp, #0
 8101a1a:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8101a1c:	687b      	ldr	r3, [r7, #4]
 8101a1e:	2200      	movs	r2, #0
 8101a20:	601a      	str	r2, [r3, #0]
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	2200      	movs	r2, #0
 8101a26:	605a      	str	r2, [r3, #4]
 8101a28:	687b      	ldr	r3, [r7, #4]
 8101a2a:	2200      	movs	r2, #0
 8101a2c:	609a      	str	r2, [r3, #8]
 8101a2e:	687b      	ldr	r3, [r7, #4]
 8101a30:	2200      	movs	r2, #0
 8101a32:	60da      	str	r2, [r3, #12]
 8101a34:	687b      	ldr	r3, [r7, #4]
 8101a36:	4618      	mov	r0, r3
 8101a38:	370c      	adds	r7, #12
 8101a3a:	46bd      	mov	sp, r7
 8101a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a40:	4770      	bx	lr

08101a42 <_ZNSt11_Deque_baseIhSaIhEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8101a42:	b590      	push	{r4, r7, lr}
 8101a44:	b085      	sub	sp, #20
 8101a46:	af00      	add	r7, sp, #0
 8101a48:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8101a4a:	687c      	ldr	r4, [r7, #4]
 8101a4c:	2001      	movs	r0, #1
 8101a4e:	f7ff faf9 	bl	8101044 <_ZSt16__deque_buf_sizej>
 8101a52:	4603      	mov	r3, r0
 8101a54:	60fc      	str	r4, [r7, #12]
 8101a56:	60bb      	str	r3, [r7, #8]
      { return __a.allocate(__n); }
 8101a58:	2200      	movs	r2, #0
 8101a5a:	68b9      	ldr	r1, [r7, #8]
 8101a5c:	68f8      	ldr	r0, [r7, #12]
 8101a5e:	f000 f85b 	bl	8101b18 <_ZNSt15__new_allocatorIhE8allocateEjPKv>
 8101a62:	4603      	mov	r3, r0
 8101a64:	bf00      	nop
      }
 8101a66:	4618      	mov	r0, r3
 8101a68:	3714      	adds	r7, #20
 8101a6a:	46bd      	mov	sp, r7
 8101a6c:	bd90      	pop	{r4, r7, pc}

08101a6e <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8101a6e:	b580      	push	{r7, lr}
 8101a70:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8101a72:	2001      	movs	r0, #1
 8101a74:	f7ff fae6 	bl	8101044 <_ZSt16__deque_buf_sizej>
 8101a78:	4603      	mov	r3, r0
 8101a7a:	4618      	mov	r0, r3
 8101a7c:	bd80      	pop	{r7, pc}

08101a7e <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8101a7e:	b480      	push	{r7}
 8101a80:	b083      	sub	sp, #12
 8101a82:	af00      	add	r7, sp, #0
 8101a84:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8101a86:	687b      	ldr	r3, [r7, #4]
 8101a88:	4618      	mov	r0, r3
 8101a8a:	370c      	adds	r7, #12
 8101a8c:	46bd      	mov	sp, r7
 8101a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a92:	4770      	bx	lr

08101a94 <_ZNSt15__new_allocatorIPhED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8101a94:	b480      	push	{r7}
 8101a96:	b083      	sub	sp, #12
 8101a98:	af00      	add	r7, sp, #0
 8101a9a:	6078      	str	r0, [r7, #4]
 8101a9c:	687b      	ldr	r3, [r7, #4]
 8101a9e:	4618      	mov	r0, r3
 8101aa0:	370c      	adds	r7, #12
 8101aa2:	46bd      	mov	sp, r7
 8101aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa8:	4770      	bx	lr

08101aaa <_ZNSt15__new_allocatorIPhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8101aaa:	b580      	push	{r7, lr}
 8101aac:	b086      	sub	sp, #24
 8101aae:	af00      	add	r7, sp, #0
 8101ab0:	60f8      	str	r0, [r7, #12]
 8101ab2:	60b9      	str	r1, [r7, #8]
 8101ab4:	607a      	str	r2, [r7, #4]
 8101ab6:	68fb      	ldr	r3, [r7, #12]
 8101ab8:	617b      	str	r3, [r7, #20]
      __attribute__((__always_inline__))
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8101aba:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8101abe:	68bb      	ldr	r3, [r7, #8]
 8101ac0:	4293      	cmp	r3, r2
 8101ac2:	bf8c      	ite	hi
 8101ac4:	2301      	movhi	r3, #1
 8101ac6:	2300      	movls	r3, #0
 8101ac8:	b2db      	uxtb	r3, r3
 8101aca:	2b00      	cmp	r3, #0
 8101acc:	bf14      	ite	ne
 8101ace:	2301      	movne	r3, #1
 8101ad0:	2300      	moveq	r3, #0
 8101ad2:	b2db      	uxtb	r3, r3
 8101ad4:	2b00      	cmp	r3, #0
 8101ad6:	d007      	beq.n	8101ae8 <_ZNSt15__new_allocatorIPhE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8101ad8:	68bb      	ldr	r3, [r7, #8]
 8101ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101ade:	d301      	bcc.n	8101ae4 <_ZNSt15__new_allocatorIPhE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8101ae0:	f00c fe4c 	bl	810e77c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8101ae4:	f00c fe47 	bl	810e776 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8101ae8:	68bb      	ldr	r3, [r7, #8]
 8101aea:	009b      	lsls	r3, r3, #2
 8101aec:	4618      	mov	r0, r3
 8101aee:	f00c fd73 	bl	810e5d8 <_Znwj>
 8101af2:	4603      	mov	r3, r0
      }
 8101af4:	4618      	mov	r0, r3
 8101af6:	3718      	adds	r7, #24
 8101af8:	46bd      	mov	sp, r7
 8101afa:	bd80      	pop	{r7, pc}

08101afc <_ZNSt15__new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8101afc:	b580      	push	{r7, lr}
 8101afe:	b084      	sub	sp, #16
 8101b00:	af00      	add	r7, sp, #0
 8101b02:	60f8      	str	r0, [r7, #12]
 8101b04:	60b9      	str	r1, [r7, #8]
 8101b06:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8101b08:	6879      	ldr	r1, [r7, #4]
 8101b0a:	68b8      	ldr	r0, [r7, #8]
 8101b0c:	f00c fd62 	bl	810e5d4 <_ZdlPvj>
      }
 8101b10:	bf00      	nop
 8101b12:	3710      	adds	r7, #16
 8101b14:	46bd      	mov	sp, r7
 8101b16:	bd80      	pop	{r7, pc}

08101b18 <_ZNSt15__new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8101b18:	b580      	push	{r7, lr}
 8101b1a:	b086      	sub	sp, #24
 8101b1c:	af00      	add	r7, sp, #0
 8101b1e:	60f8      	str	r0, [r7, #12]
 8101b20:	60b9      	str	r1, [r7, #8]
 8101b22:	607a      	str	r2, [r7, #4]
 8101b24:	68fb      	ldr	r3, [r7, #12]
 8101b26:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8101b28:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8101b2c:	68bb      	ldr	r3, [r7, #8]
 8101b2e:	4293      	cmp	r3, r2
 8101b30:	bf8c      	ite	hi
 8101b32:	2301      	movhi	r3, #1
 8101b34:	2300      	movls	r3, #0
 8101b36:	b2db      	uxtb	r3, r3
 8101b38:	2b00      	cmp	r3, #0
 8101b3a:	bf14      	ite	ne
 8101b3c:	2301      	movne	r3, #1
 8101b3e:	2300      	moveq	r3, #0
 8101b40:	b2db      	uxtb	r3, r3
 8101b42:	2b00      	cmp	r3, #0
 8101b44:	d001      	beq.n	8101b4a <_ZNSt15__new_allocatorIhE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 8101b46:	f00c fe16 	bl	810e776 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8101b4a:	68b8      	ldr	r0, [r7, #8]
 8101b4c:	f00c fd44 	bl	810e5d8 <_Znwj>
 8101b50:	4603      	mov	r3, r0
      }
 8101b52:	4618      	mov	r0, r3
 8101b54:	3718      	adds	r7, #24
 8101b56:	46bd      	mov	sp, r7
 8101b58:	bd80      	pop	{r7, pc}
	...

08101b5c <_ZN6DayCamC1EP20__UART_HandleTypeDef>:
#include <cstdio>
#include <iostream>
#include <cstring>
#include <queue>

DayCam::DayCam(UART_HandleTypeDef* huart)
 8101b5c:	b580      	push	{r7, lr}
 8101b5e:	b082      	sub	sp, #8
 8101b60:	af00      	add	r7, sp, #0
 8101b62:	6078      	str	r0, [r7, #4]
 8101b64:	6039      	str	r1, [r7, #0]
    : UartEndpoint(huart) {}
 8101b66:	687b      	ldr	r3, [r7, #4]
 8101b68:	6839      	ldr	r1, [r7, #0]
 8101b6a:	4618      	mov	r0, r3
 8101b6c:	f001 fabe 	bl	81030ec <_ZN12UartEndpointC1EP20__UART_HandleTypeDef>
 8101b70:	4a6e      	ldr	r2, [pc, #440]	@ (8101d2c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1d0>)
 8101b72:	687b      	ldr	r3, [r7, #4]
 8101b74:	601a      	str	r2, [r3, #0]
 8101b76:	687b      	ldr	r3, [r7, #4]
 8101b78:	4a6d      	ldr	r2, [pc, #436]	@ (8101d30 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1d4>)
 8101b7a:	3379      	adds	r3, #121	@ 0x79
 8101b7c:	6810      	ldr	r0, [r2, #0]
 8101b7e:	6018      	str	r0, [r3, #0]
 8101b80:	687b      	ldr	r3, [r7, #4]
 8101b82:	4a6c      	ldr	r2, [pc, #432]	@ (8101d34 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1d8>)
 8101b84:	337d      	adds	r3, #125	@ 0x7d
 8101b86:	6810      	ldr	r0, [r2, #0]
 8101b88:	6018      	str	r0, [r3, #0]
 8101b8a:	7912      	ldrb	r2, [r2, #4]
 8101b8c:	711a      	strb	r2, [r3, #4]
 8101b8e:	687b      	ldr	r3, [r7, #4]
 8101b90:	4a69      	ldr	r2, [pc, #420]	@ (8101d38 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1dc>)
 8101b92:	3382      	adds	r3, #130	@ 0x82
 8101b94:	8811      	ldrh	r1, [r2, #0]
 8101b96:	7892      	ldrb	r2, [r2, #2]
 8101b98:	8019      	strh	r1, [r3, #0]
 8101b9a:	709a      	strb	r2, [r3, #2]
 8101b9c:	687b      	ldr	r3, [r7, #4]
 8101b9e:	22fa      	movs	r2, #250	@ 0xfa
 8101ba0:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
 8101ba4:	687b      	ldr	r3, [r7, #4]
 8101ba6:	4a65      	ldr	r2, [pc, #404]	@ (8101d3c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1e0>)
 8101ba8:	3388      	adds	r3, #136	@ 0x88
 8101baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101bae:	6018      	str	r0, [r3, #0]
 8101bb0:	3304      	adds	r3, #4
 8101bb2:	8019      	strh	r1, [r3, #0]
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	4a62      	ldr	r2, [pc, #392]	@ (8101d40 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1e4>)
 8101bb8:	338e      	adds	r3, #142	@ 0x8e
 8101bba:	6810      	ldr	r0, [r2, #0]
 8101bbc:	6018      	str	r0, [r3, #0]
 8101bbe:	8892      	ldrh	r2, [r2, #4]
 8101bc0:	809a      	strh	r2, [r3, #4]
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	4a5f      	ldr	r2, [pc, #380]	@ (8101d44 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1e8>)
 8101bc6:	3394      	adds	r3, #148	@ 0x94
 8101bc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101bcc:	6018      	str	r0, [r3, #0]
 8101bce:	3304      	adds	r3, #4
 8101bd0:	8019      	strh	r1, [r3, #0]
 8101bd2:	687b      	ldr	r3, [r7, #4]
 8101bd4:	4a5c      	ldr	r2, [pc, #368]	@ (8101d48 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1ec>)
 8101bd6:	339a      	adds	r3, #154	@ 0x9a
 8101bd8:	6810      	ldr	r0, [r2, #0]
 8101bda:	6018      	str	r0, [r3, #0]
 8101bdc:	8892      	ldrh	r2, [r2, #4]
 8101bde:	809a      	strh	r2, [r3, #4]
 8101be0:	687b      	ldr	r3, [r7, #4]
 8101be2:	4a5a      	ldr	r2, [pc, #360]	@ (8101d4c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1f0>)
 8101be4:	33a0      	adds	r3, #160	@ 0xa0
 8101be6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101bea:	6018      	str	r0, [r3, #0]
 8101bec:	3304      	adds	r3, #4
 8101bee:	8019      	strh	r1, [r3, #0]
 8101bf0:	687b      	ldr	r3, [r7, #4]
 8101bf2:	4957      	ldr	r1, [pc, #348]	@ (8101d50 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1f4>)
 8101bf4:	f103 02a6 	add.w	r2, r3, #166	@ 0xa6
 8101bf8:	460b      	mov	r3, r1
 8101bfa:	cb03      	ldmia	r3!, {r0, r1}
 8101bfc:	6010      	str	r0, [r2, #0]
 8101bfe:	6051      	str	r1, [r2, #4]
 8101c00:	781b      	ldrb	r3, [r3, #0]
 8101c02:	7213      	strb	r3, [r2, #8]
 8101c04:	687b      	ldr	r3, [r7, #4]
 8101c06:	4a53      	ldr	r2, [pc, #332]	@ (8101d54 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1f8>)
 8101c08:	33af      	adds	r3, #175	@ 0xaf
 8101c0a:	6810      	ldr	r0, [r2, #0]
 8101c0c:	6018      	str	r0, [r3, #0]
 8101c0e:	8892      	ldrh	r2, [r2, #4]
 8101c10:	809a      	strh	r2, [r3, #4]
 8101c12:	687b      	ldr	r3, [r7, #4]
 8101c14:	4a49      	ldr	r2, [pc, #292]	@ (8101d3c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1e0>)
 8101c16:	33b5      	adds	r3, #181	@ 0xb5
 8101c18:	6810      	ldr	r0, [r2, #0]
 8101c1a:	6018      	str	r0, [r3, #0]
 8101c1c:	8892      	ldrh	r2, [r2, #4]
 8101c1e:	809a      	strh	r2, [r3, #4]
 8101c20:	687b      	ldr	r3, [r7, #4]
 8101c22:	4a47      	ldr	r2, [pc, #284]	@ (8101d40 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1e4>)
 8101c24:	33bb      	adds	r3, #187	@ 0xbb
 8101c26:	6810      	ldr	r0, [r2, #0]
 8101c28:	6018      	str	r0, [r3, #0]
 8101c2a:	8892      	ldrh	r2, [r2, #4]
 8101c2c:	809a      	strh	r2, [r3, #4]
 8101c2e:	687b      	ldr	r3, [r7, #4]
 8101c30:	4a49      	ldr	r2, [pc, #292]	@ (8101d58 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1fc>)
 8101c32:	33c1      	adds	r3, #193	@ 0xc1
 8101c34:	6810      	ldr	r0, [r2, #0]
 8101c36:	6018      	str	r0, [r3, #0]
 8101c38:	8892      	ldrh	r2, [r2, #4]
 8101c3a:	809a      	strh	r2, [r3, #4]
 8101c3c:	687b      	ldr	r3, [r7, #4]
 8101c3e:	4a47      	ldr	r2, [pc, #284]	@ (8101d5c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x200>)
 8101c40:	33c7      	adds	r3, #199	@ 0xc7
 8101c42:	6810      	ldr	r0, [r2, #0]
 8101c44:	6018      	str	r0, [r3, #0]
 8101c46:	8892      	ldrh	r2, [r2, #4]
 8101c48:	809a      	strh	r2, [r3, #4]
 8101c4a:	687b      	ldr	r3, [r7, #4]
 8101c4c:	4a44      	ldr	r2, [pc, #272]	@ (8101d60 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x204>)
 8101c4e:	33cd      	adds	r3, #205	@ 0xcd
 8101c50:	6810      	ldr	r0, [r2, #0]
 8101c52:	6018      	str	r0, [r3, #0]
 8101c54:	8892      	ldrh	r2, [r2, #4]
 8101c56:	809a      	strh	r2, [r3, #4]
 8101c58:	687b      	ldr	r3, [r7, #4]
 8101c5a:	4a42      	ldr	r2, [pc, #264]	@ (8101d64 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x208>)
 8101c5c:	33d3      	adds	r3, #211	@ 0xd3
 8101c5e:	6810      	ldr	r0, [r2, #0]
 8101c60:	6018      	str	r0, [r3, #0]
 8101c62:	8892      	ldrh	r2, [r2, #4]
 8101c64:	809a      	strh	r2, [r3, #4]
 8101c66:	687b      	ldr	r3, [r7, #4]
 8101c68:	4a3f      	ldr	r2, [pc, #252]	@ (8101d68 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x20c>)
 8101c6a:	33d9      	adds	r3, #217	@ 0xd9
 8101c6c:	6810      	ldr	r0, [r2, #0]
 8101c6e:	6018      	str	r0, [r3, #0]
 8101c70:	8892      	ldrh	r2, [r2, #4]
 8101c72:	809a      	strh	r2, [r3, #4]
 8101c74:	687b      	ldr	r3, [r7, #4]
 8101c76:	493d      	ldr	r1, [pc, #244]	@ (8101d6c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x210>)
 8101c78:	f103 02df 	add.w	r2, r3, #223	@ 0xdf
 8101c7c:	460b      	mov	r3, r1
 8101c7e:	cb03      	ldmia	r3!, {r0, r1}
 8101c80:	6010      	str	r0, [r2, #0]
 8101c82:	6051      	str	r1, [r2, #4]
 8101c84:	781b      	ldrb	r3, [r3, #0]
 8101c86:	7213      	strb	r3, [r2, #8]
 8101c88:	687b      	ldr	r3, [r7, #4]
 8101c8a:	4a39      	ldr	r2, [pc, #228]	@ (8101d70 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x214>)
 8101c8c:	33e8      	adds	r3, #232	@ 0xe8
 8101c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101c92:	6018      	str	r0, [r3, #0]
 8101c94:	3304      	adds	r3, #4
 8101c96:	8019      	strh	r1, [r3, #0]
 8101c98:	687b      	ldr	r3, [r7, #4]
 8101c9a:	4a36      	ldr	r2, [pc, #216]	@ (8101d74 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x218>)
 8101c9c:	33ee      	adds	r3, #238	@ 0xee
 8101c9e:	6810      	ldr	r0, [r2, #0]
 8101ca0:	6018      	str	r0, [r3, #0]
 8101ca2:	8892      	ldrh	r2, [r2, #4]
 8101ca4:	809a      	strh	r2, [r3, #4]
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	4a33      	ldr	r2, [pc, #204]	@ (8101d78 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x21c>)
 8101caa:	33f4      	adds	r3, #244	@ 0xf4
 8101cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101cb0:	6018      	str	r0, [r3, #0]
 8101cb2:	3304      	adds	r3, #4
 8101cb4:	8019      	strh	r1, [r3, #0]
 8101cb6:	687b      	ldr	r3, [r7, #4]
 8101cb8:	4a30      	ldr	r2, [pc, #192]	@ (8101d7c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x220>)
 8101cba:	33fa      	adds	r3, #250	@ 0xfa
 8101cbc:	6810      	ldr	r0, [r2, #0]
 8101cbe:	6018      	str	r0, [r3, #0]
 8101cc0:	7912      	ldrb	r2, [r2, #4]
 8101cc2:	711a      	strb	r2, [r3, #4]
 8101cc4:	687b      	ldr	r3, [r7, #4]
 8101cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8101d80 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x224>)
 8101cc8:	33ff      	adds	r3, #255	@ 0xff
 8101cca:	6810      	ldr	r0, [r2, #0]
 8101ccc:	6018      	str	r0, [r3, #0]
 8101cce:	7912      	ldrb	r2, [r2, #4]
 8101cd0:	711a      	strb	r2, [r3, #4]
 8101cd2:	687b      	ldr	r3, [r7, #4]
 8101cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8101d84 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x228>)
 8101cd6:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8101cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101cde:	6018      	str	r0, [r3, #0]
 8101ce0:	3304      	adds	r3, #4
 8101ce2:	7019      	strb	r1, [r3, #0]
 8101ce4:	687b      	ldr	r3, [r7, #4]
 8101ce6:	4a28      	ldr	r2, [pc, #160]	@ (8101d88 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x22c>)
 8101ce8:	f203 1309 	addw	r3, r3, #265	@ 0x109
 8101cec:	6810      	ldr	r0, [r2, #0]
 8101cee:	6018      	str	r0, [r3, #0]
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	4a26      	ldr	r2, [pc, #152]	@ (8101d8c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x230>)
 8101cf4:	f203 130d 	addw	r3, r3, #269	@ 0x10d
 8101cf8:	6810      	ldr	r0, [r2, #0]
 8101cfa:	6018      	str	r0, [r3, #0]
 8101cfc:	8892      	ldrh	r2, [r2, #4]
 8101cfe:	809a      	strh	r2, [r3, #4]
 8101d00:	687b      	ldr	r3, [r7, #4]
 8101d02:	4a23      	ldr	r2, [pc, #140]	@ (8101d90 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x234>)
 8101d04:	f203 1313 	addw	r3, r3, #275	@ 0x113
 8101d08:	6810      	ldr	r0, [r2, #0]
 8101d0a:	6018      	str	r0, [r3, #0]
 8101d0c:	8892      	ldrh	r2, [r2, #4]
 8101d0e:	809a      	strh	r2, [r3, #4]
 8101d10:	687b      	ldr	r3, [r7, #4]
 8101d12:	4a20      	ldr	r2, [pc, #128]	@ (8101d94 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x238>)
 8101d14:	f203 1319 	addw	r3, r3, #281	@ 0x119
 8101d18:	6810      	ldr	r0, [r2, #0]
 8101d1a:	6018      	str	r0, [r3, #0]
 8101d1c:	8892      	ldrh	r2, [r2, #4]
 8101d1e:	809a      	strh	r2, [r3, #4]
 8101d20:	687b      	ldr	r3, [r7, #4]
 8101d22:	4618      	mov	r0, r3
 8101d24:	3708      	adds	r7, #8
 8101d26:	46bd      	mov	sp, r7
 8101d28:	bd80      	pop	{r7, pc}
 8101d2a:	bf00      	nop
 8101d2c:	08111658 	.word	0x08111658
 8101d30:	08111358 	.word	0x08111358
 8101d34:	0811135c 	.word	0x0811135c
 8101d38:	08111364 	.word	0x08111364
 8101d3c:	08111368 	.word	0x08111368
 8101d40:	08111370 	.word	0x08111370
 8101d44:	08111378 	.word	0x08111378
 8101d48:	08111380 	.word	0x08111380
 8101d4c:	08111388 	.word	0x08111388
 8101d50:	08111390 	.word	0x08111390
 8101d54:	0811139c 	.word	0x0811139c
 8101d58:	081113a4 	.word	0x081113a4
 8101d5c:	081113ac 	.word	0x081113ac
 8101d60:	081113b4 	.word	0x081113b4
 8101d64:	081113bc 	.word	0x081113bc
 8101d68:	081113c4 	.word	0x081113c4
 8101d6c:	081113cc 	.word	0x081113cc
 8101d70:	081113d8 	.word	0x081113d8
 8101d74:	081113e0 	.word	0x081113e0
 8101d78:	081113e8 	.word	0x081113e8
 8101d7c:	081113f0 	.word	0x081113f0
 8101d80:	081113f8 	.word	0x081113f8
 8101d84:	08111400 	.word	0x08111400
 8101d88:	08111408 	.word	0x08111408
 8101d8c:	0811140c 	.word	0x0811140c
 8101d90:	08111414 	.word	0x08111414
 8101d94:	0811141c 	.word	0x0811141c

08101d98 <_ZN6DayCam4InitEv>:

void DayCam::Init() {
 8101d98:	b580      	push	{r7, lr}
 8101d9a:	b082      	sub	sp, #8
 8101d9c:	af00      	add	r7, sp, #0
 8101d9e:	6078      	str	r0, [r7, #4]
//    static uint8_t byte;

	setAddress();
 8101da0:	6878      	ldr	r0, [r7, #4]
 8101da2:	f000 f8ef 	bl	8101f84 <_ZN6DayCam10setAddressEv>
    if (!StartReceive(&byte_, 1)) {
 8101da6:	6878      	ldr	r0, [r7, #4]
 8101da8:	687b      	ldr	r3, [r7, #4]
 8101daa:	3378      	adds	r3, #120	@ 0x78
 8101dac:	2201      	movs	r2, #1
 8101dae:	4619      	mov	r1, r3
 8101db0:	f001 f9be 	bl	8103130 <_ZN12UartEndpoint12StartReceiveEPhj>
 8101db4:	4603      	mov	r3, r0
 8101db6:	f083 0301 	eor.w	r3, r3, #1
 8101dba:	b2db      	uxtb	r3, r3
 8101dbc:	2b00      	cmp	r3, #0
 8101dbe:	d003      	beq.n	8101dc8 <_ZN6DayCam4InitEv+0x30>
        printf("❌ StartReceive failed\n");
 8101dc0:	4805      	ldr	r0, [pc, #20]	@ (8101dd8 <_ZN6DayCam4InitEv+0x40>)
 8101dc2:	f00d fb39 	bl	810f438 <puts>
    }
    else printf("❌ StartReceive success\n");
}
 8101dc6:	e002      	b.n	8101dce <_ZN6DayCam4InitEv+0x36>
    else printf("❌ StartReceive success\n");
 8101dc8:	4804      	ldr	r0, [pc, #16]	@ (8101ddc <_ZN6DayCam4InitEv+0x44>)
 8101dca:	f00d fb35 	bl	810f438 <puts>
}
 8101dce:	bf00      	nop
 8101dd0:	3708      	adds	r7, #8
 8101dd2:	46bd      	mov	sp, r7
 8101dd4:	bd80      	pop	{r7, pc}
 8101dd6:	bf00      	nop
 8101dd8:	08111424 	.word	0x08111424
 8101ddc:	0811143c 	.word	0x0811143c

08101de0 <_ZNSt5queueIhSt5dequeIhSaIhEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8101de0:	b580      	push	{r7, lr}
 8101de2:	b082      	sub	sp, #8
 8101de4:	af00      	add	r7, sp, #0
 8101de6:	6078      	str	r0, [r7, #4]
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	4618      	mov	r0, r3
 8101dec:	f000 fa52 	bl	8102294 <_ZNSt5dequeIhSaIhEED1Ev>
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	4618      	mov	r0, r3
 8101df4:	3708      	adds	r7, #8
 8101df6:	46bd      	mov	sp, r7
 8101df8:	bd80      	pop	{r7, pc}
	...

08101dfc <_ZN6DayCam13onReceiveByteEh>:



void DayCam::onReceiveByte(uint8_t byte) {
 8101dfc:	b580      	push	{r7, lr}
 8101dfe:	b096      	sub	sp, #88	@ 0x58
 8101e00:	af00      	add	r7, sp, #0
 8101e02:	6078      	str	r0, [r7, #4]
 8101e04:	460b      	mov	r3, r1
 8101e06:	70fb      	strb	r3, [r7, #3]

	std::queue<uint8_t> tempQueue{std::deque<uint8_t>(rxQueue_)};
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	f103 0210 	add.w	r2, r3, #16
 8101e0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101e12:	4611      	mov	r1, r2
 8101e14:	4618      	mov	r0, r3
 8101e16:	f000 fa62 	bl	81022de <_ZNSt5dequeIhSaIhEEC1ERKS1_>
 8101e1a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8101e1e:	f107 0308 	add.w	r3, r7, #8
 8101e22:	4611      	mov	r1, r2
 8101e24:	4618      	mov	r0, r3
 8101e26:	f000 fabc 	bl	81023a2 <_ZNSt5queueIhSt5dequeIhSaIhEEEC1EOS2_>
 8101e2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101e2e:	4618      	mov	r0, r3
 8101e30:	f000 fa30 	bl	8102294 <_ZNSt5dequeIhSaIhEED1Ev>

//    printf("📥 Received byte: 0x%02X\n", byte);
//    rxBuffer_[rxLength_] = byte_;

	if (rxQueue_.back() == 0xff){
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	3310      	adds	r3, #16
 8101e38:	4618      	mov	r0, r3
 8101e3a:	f000 fac5 	bl	81023c8 <_ZNSt5dequeIhSaIhEE4backEv>
 8101e3e:	4603      	mov	r3, r0
 8101e40:	781b      	ldrb	r3, [r3, #0]
 8101e42:	2bff      	cmp	r3, #255	@ 0xff
 8101e44:	bf0c      	ite	eq
 8101e46:	2301      	moveq	r3, #1
 8101e48:	2300      	movne	r3, #0
 8101e4a:	b2db      	uxtb	r3, r3
 8101e4c:	2b00      	cmp	r3, #0
 8101e4e:	d021      	beq.n	8101e94 <_ZN6DayCam13onReceiveByteEh+0x98>
	    printf("rxQueue_: ");
 8101e50:	4818      	ldr	r0, [pc, #96]	@ (8101eb4 <_ZN6DayCam13onReceiveByteEh+0xb8>)
 8101e52:	f00d fa81 	bl	810f358 <iprintf>
	    while (!rxQueue_.empty()) {
 8101e56:	e00f      	b.n	8101e78 <_ZN6DayCam13onReceiveByteEh+0x7c>
	        printf("0x%02X ", rxQueue_.front());
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	3310      	adds	r3, #16
 8101e5c:	4618      	mov	r0, r3
 8101e5e:	f7ff fbfd 	bl	810165c <_ZNSt5dequeIhSaIhEE5frontEv>
 8101e62:	4603      	mov	r3, r0
 8101e64:	781b      	ldrb	r3, [r3, #0]
 8101e66:	4619      	mov	r1, r3
 8101e68:	4813      	ldr	r0, [pc, #76]	@ (8101eb8 <_ZN6DayCam13onReceiveByteEh+0xbc>)
 8101e6a:	f00d fa75 	bl	810f358 <iprintf>
	        rxQueue_.pop_front();
 8101e6e:	687b      	ldr	r3, [r7, #4]
 8101e70:	3310      	adds	r3, #16
 8101e72:	4618      	mov	r0, r3
 8101e74:	f7ff fc06 	bl	8101684 <_ZNSt5dequeIhSaIhEE9pop_frontEv>
	    while (!rxQueue_.empty()) {
 8101e78:	687b      	ldr	r3, [r7, #4]
 8101e7a:	3310      	adds	r3, #16
 8101e7c:	4618      	mov	r0, r3
 8101e7e:	f7ff fbdb 	bl	8101638 <_ZNKSt5dequeIhSaIhEE5emptyEv>
 8101e82:	4603      	mov	r3, r0
 8101e84:	f083 0301 	eor.w	r3, r3, #1
 8101e88:	b2db      	uxtb	r3, r3
 8101e8a:	2b00      	cmp	r3, #0
 8101e8c:	d1e4      	bne.n	8101e58 <_ZN6DayCam13onReceiveByteEh+0x5c>
	    }
	    printf("\n");
 8101e8e:	200a      	movs	r0, #10
 8101e90:	f00d fa74 	bl	810f37c <putchar>
	}


    StartReceive(&byte_, 1);  // Re-arm
 8101e94:	6878      	ldr	r0, [r7, #4]
 8101e96:	687b      	ldr	r3, [r7, #4]
 8101e98:	3378      	adds	r3, #120	@ 0x78
 8101e9a:	2201      	movs	r2, #1
 8101e9c:	4619      	mov	r1, r3
 8101e9e:	f001 f947 	bl	8103130 <_ZN12UartEndpoint12StartReceiveEPhj>

}
 8101ea2:	f107 0308 	add.w	r3, r7, #8
 8101ea6:	4618      	mov	r0, r3
 8101ea8:	f7ff ff9a 	bl	8101de0 <_ZNSt5queueIhSt5dequeIhSaIhEEED1Ev>
 8101eac:	3758      	adds	r7, #88	@ 0x58
 8101eae:	46bd      	mov	sp, r7
 8101eb0:	bd80      	pop	{r7, pc}
 8101eb2:	bf00      	nop
 8101eb4:	08111458 	.word	0x08111458
 8101eb8:	08111464 	.word	0x08111464

08101ebc <_ZN6DayCam15processIncomingEv>:

void DayCam::processIncoming() {
 8101ebc:	b580      	push	{r7, lr}
 8101ebe:	b08e      	sub	sp, #56	@ 0x38
 8101ec0:	af00      	add	r7, sp, #0
 8101ec2:	6078      	str	r0, [r7, #4]
    while (!rxQueue_.empty()) {
 8101ec4:	e04a      	b.n	8101f5c <_ZN6DayCam15processIncomingEv+0xa0>
        uint8_t byte = rxQueue_.front();
 8101ec6:	687b      	ldr	r3, [r7, #4]
 8101ec8:	3310      	adds	r3, #16
 8101eca:	4618      	mov	r0, r3
 8101ecc:	f7ff fbc6 	bl	810165c <_ZNSt5dequeIhSaIhEE5frontEv>
 8101ed0:	4603      	mov	r3, r0
 8101ed2:	781b      	ldrb	r3, [r3, #0]
 8101ed4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        rxQueue_.pop_front();
 8101ed8:	687b      	ldr	r3, [r7, #4]
 8101eda:	3310      	adds	r3, #16
 8101edc:	4618      	mov	r0, r3
 8101ede:	f7ff fbd1 	bl	8101684 <_ZNSt5dequeIhSaIhEE9pop_frontEv>
//        message_.push_back(byte);

        // Example: parse line-terminated message
        if (byte == '\n') {
 8101ee2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8101ee6:	2b0a      	cmp	r3, #10
 8101ee8:	d138      	bne.n	8101f5c <_ZN6DayCam15processIncomingEv+0xa0>
            printf("Client received: ");
 8101eea:	4824      	ldr	r0, [pc, #144]	@ (8101f7c <_ZN6DayCam15processIncomingEv+0xc0>)
 8101eec:	f00d fa34 	bl	810f358 <iprintf>
            for (uint8_t c : rxQueue_)
 8101ef0:	687b      	ldr	r3, [r7, #4]
 8101ef2:	3310      	adds	r3, #16
 8101ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8101ef6:	f107 031c 	add.w	r3, r7, #28
 8101efa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8101efc:	4618      	mov	r0, r3
 8101efe:	f7ff fbe8 	bl	81016d2 <_ZNSt5dequeIhSaIhEE5beginEv>
 8101f02:	f107 030c 	add.w	r3, r7, #12
 8101f06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8101f08:	4618      	mov	r0, r3
 8101f0a:	f000 fa76 	bl	81023fa <_ZNSt5dequeIhSaIhEE3endEv>
 8101f0e:	e012      	b.n	8101f36 <_ZN6DayCam15processIncomingEv+0x7a>
 8101f10:	f107 031c 	add.w	r3, r7, #28
 8101f14:	4618      	mov	r0, r3
 8101f16:	f7ff fc99 	bl	810184c <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>
 8101f1a:	4603      	mov	r3, r0
 8101f1c:	781b      	ldrb	r3, [r3, #0]
 8101f1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                printf("%c", c);
 8101f22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8101f26:	4618      	mov	r0, r3
 8101f28:	f00d fa28 	bl	810f37c <putchar>
            for (uint8_t c : rxQueue_)
 8101f2c:	f107 031c 	add.w	r3, r7, #28
 8101f30:	4618      	mov	r0, r3
 8101f32:	f000 fa82 	bl	810243a <_ZNSt15_Deque_iteratorIhRhPhEppEv>
 8101f36:	f107 020c 	add.w	r2, r7, #12
 8101f3a:	f107 031c 	add.w	r3, r7, #28
 8101f3e:	4611      	mov	r1, r2
 8101f40:	4618      	mov	r0, r3
 8101f42:	f000 fa69 	bl	8102418 <_ZStneRKSt15_Deque_iteratorIhRhPhES4_>
 8101f46:	4603      	mov	r3, r0
 8101f48:	2b00      	cmp	r3, #0
 8101f4a:	d1e1      	bne.n	8101f10 <_ZN6DayCam15processIncomingEv+0x54>
            printf("\r\n");
 8101f4c:	480c      	ldr	r0, [pc, #48]	@ (8101f80 <_ZN6DayCam15processIncomingEv+0xc4>)
 8101f4e:	f00d fa73 	bl	810f438 <puts>

            rxQueue_.clear();  // ready for next message
 8101f52:	687b      	ldr	r3, [r7, #4]
 8101f54:	3310      	adds	r3, #16
 8101f56:	4618      	mov	r0, r3
 8101f58:	f000 fa8e 	bl	8102478 <_ZNSt5dequeIhSaIhEE5clearEv>
    while (!rxQueue_.empty()) {
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	3310      	adds	r3, #16
 8101f60:	4618      	mov	r0, r3
 8101f62:	f7ff fb69 	bl	8101638 <_ZNKSt5dequeIhSaIhEE5emptyEv>
 8101f66:	4603      	mov	r3, r0
 8101f68:	f083 0301 	eor.w	r3, r3, #1
 8101f6c:	b2db      	uxtb	r3, r3
 8101f6e:	2b00      	cmp	r3, #0
 8101f70:	d1a9      	bne.n	8101ec6 <_ZN6DayCam15processIncomingEv+0xa>
        }
    }
}
 8101f72:	bf00      	nop
 8101f74:	bf00      	nop
 8101f76:	3738      	adds	r7, #56	@ 0x38
 8101f78:	46bd      	mov	sp, r7
 8101f7a:	bd80      	pop	{r7, pc}
 8101f7c:	0811146c 	.word	0x0811146c
 8101f80:	08111480 	.word	0x08111480

08101f84 <_ZN6DayCam10setAddressEv>:

void DayCam::setAddress() {
 8101f84:	b580      	push	{r7, lr}
 8101f86:	b084      	sub	sp, #16
 8101f88:	af00      	add	r7, sp, #0
 8101f8a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 8101f8c:	2300      	movs	r3, #0
 8101f8e:	60fb      	str	r3, [r7, #12]
 8101f90:	e00c      	b.n	8101fac <_ZN6DayCam10setAddressEv+0x28>
    	SendCommand(&address_command[i],4);
 8101f92:	6878      	ldr	r0, [r7, #4]
 8101f94:	68fb      	ldr	r3, [r7, #12]
 8101f96:	3378      	adds	r3, #120	@ 0x78
 8101f98:	687a      	ldr	r2, [r7, #4]
 8101f9a:	4413      	add	r3, r2
 8101f9c:	3301      	adds	r3, #1
 8101f9e:	2204      	movs	r2, #4
 8101fa0:	4619      	mov	r1, r3
 8101fa2:	f001 f8e5 	bl	8103170 <_ZN12UartEndpoint11SendCommandEPKhj>
    for (int i = 0; i < 4; i++) {
 8101fa6:	68fb      	ldr	r3, [r7, #12]
 8101fa8:	3301      	adds	r3, #1
 8101faa:	60fb      	str	r3, [r7, #12]
 8101fac:	68fb      	ldr	r3, [r7, #12]
 8101fae:	2b03      	cmp	r3, #3
 8101fb0:	ddef      	ble.n	8101f92 <_ZN6DayCam10setAddressEv+0xe>
    }
}
 8101fb2:	bf00      	nop
 8101fb4:	bf00      	nop
 8101fb6:	3710      	adds	r7, #16
 8101fb8:	46bd      	mov	sp, r7
 8101fba:	bd80      	pop	{r7, pc}

08101fbc <_ZN6DayCam12handleZoomInEPhh>:

void DayCam::handleZoomIn(uint8_t* speed, uint8_t length){
 8101fbc:	b580      	push	{r7, lr}
 8101fbe:	b086      	sub	sp, #24
 8101fc0:	af00      	add	r7, sp, #0
 8101fc2:	60f8      	str	r0, [r7, #12]
 8101fc4:	60b9      	str	r1, [r7, #8]
 8101fc6:	4613      	mov	r3, r2
 8101fc8:	71fb      	strb	r3, [r7, #7]

	uint8_t temp_buff[sizeof(zoom_teleVar)] = {0};
 8101fca:	f107 0310 	add.w	r3, r7, #16
 8101fce:	2200      	movs	r2, #0
 8101fd0:	601a      	str	r2, [r3, #0]
 8101fd2:	809a      	strh	r2, [r3, #4]

	memcpy(temp_buff,zoom_teleVar,sizeof(zoom_teleVar));
 8101fd4:	68fb      	ldr	r3, [r7, #12]
 8101fd6:	f103 0294 	add.w	r2, r3, #148	@ 0x94
 8101fda:	f107 0310 	add.w	r3, r7, #16
 8101fde:	6810      	ldr	r0, [r2, #0]
 8101fe0:	6018      	str	r0, [r3, #0]
 8101fe2:	8892      	ldrh	r2, [r2, #4]
 8101fe4:	809a      	strh	r2, [r3, #4]

	if (speed[0] > 0 && speed[0] < 8)
 8101fe6:	68bb      	ldr	r3, [r7, #8]
 8101fe8:	781b      	ldrb	r3, [r3, #0]
 8101fea:	2b00      	cmp	r3, #0
 8101fec:	d016      	beq.n	810201c <_ZN6DayCam12handleZoomInEPhh+0x60>
 8101fee:	68bb      	ldr	r3, [r7, #8]
 8101ff0:	781b      	ldrb	r3, [r3, #0]
 8101ff2:	2b07      	cmp	r3, #7
 8101ff4:	d812      	bhi.n	810201c <_ZN6DayCam12handleZoomInEPhh+0x60>
		temp_buff [4] = (temp_buff [4] & 0xF0 | (speed[0] & 0x0f));
 8101ff6:	7d3b      	ldrb	r3, [r7, #20]
 8101ff8:	f023 030f 	bic.w	r3, r3, #15
 8101ffc:	b2da      	uxtb	r2, r3
 8101ffe:	68bb      	ldr	r3, [r7, #8]
 8102000:	781b      	ldrb	r3, [r3, #0]
 8102002:	f003 030f 	and.w	r3, r3, #15
 8102006:	b2db      	uxtb	r3, r3
 8102008:	4313      	orrs	r3, r2
 810200a:	b2db      	uxtb	r3, r3
 810200c:	753b      	strb	r3, [r7, #20]
	else
		return;

	SendCommand(temp_buff, sizeof(temp_buff));
 810200e:	68fb      	ldr	r3, [r7, #12]
 8102010:	f107 0110 	add.w	r1, r7, #16
 8102014:	2206      	movs	r2, #6
 8102016:	4618      	mov	r0, r3
 8102018:	f001 f8aa 	bl	8103170 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 810201c:	3718      	adds	r7, #24
 810201e:	46bd      	mov	sp, r7
 8102020:	bd80      	pop	{r7, pc}

08102022 <_ZN6DayCam13handleZoomOutEPhh>:

void DayCam::handleZoomOut(uint8_t* speed, uint8_t length){
 8102022:	b580      	push	{r7, lr}
 8102024:	b086      	sub	sp, #24
 8102026:	af00      	add	r7, sp, #0
 8102028:	60f8      	str	r0, [r7, #12]
 810202a:	60b9      	str	r1, [r7, #8]
 810202c:	4613      	mov	r3, r2
 810202e:	71fb      	strb	r3, [r7, #7]

	uint8_t temp_buff[sizeof(zoom_teleVar)] = {0};
 8102030:	f107 0310 	add.w	r3, r7, #16
 8102034:	2200      	movs	r2, #0
 8102036:	601a      	str	r2, [r3, #0]
 8102038:	809a      	strh	r2, [r3, #4]

	memcpy(temp_buff,zoom_wideVar,sizeof(zoom_teleVar));
 810203a:	68fb      	ldr	r3, [r7, #12]
 810203c:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 8102040:	f107 0310 	add.w	r3, r7, #16
 8102044:	6810      	ldr	r0, [r2, #0]
 8102046:	6018      	str	r0, [r3, #0]
 8102048:	8892      	ldrh	r2, [r2, #4]
 810204a:	809a      	strh	r2, [r3, #4]

	if (speed[0] > 0 && speed[0] < 8)
 810204c:	68bb      	ldr	r3, [r7, #8]
 810204e:	781b      	ldrb	r3, [r3, #0]
 8102050:	2b00      	cmp	r3, #0
 8102052:	d016      	beq.n	8102082 <_ZN6DayCam13handleZoomOutEPhh+0x60>
 8102054:	68bb      	ldr	r3, [r7, #8]
 8102056:	781b      	ldrb	r3, [r3, #0]
 8102058:	2b07      	cmp	r3, #7
 810205a:	d812      	bhi.n	8102082 <_ZN6DayCam13handleZoomOutEPhh+0x60>
		temp_buff [4] = (temp_buff [4] & 0xF0 | (speed[0] & 0x0f));
 810205c:	7d3b      	ldrb	r3, [r7, #20]
 810205e:	f023 030f 	bic.w	r3, r3, #15
 8102062:	b2da      	uxtb	r2, r3
 8102064:	68bb      	ldr	r3, [r7, #8]
 8102066:	781b      	ldrb	r3, [r3, #0]
 8102068:	f003 030f 	and.w	r3, r3, #15
 810206c:	b2db      	uxtb	r3, r3
 810206e:	4313      	orrs	r3, r2
 8102070:	b2db      	uxtb	r3, r3
 8102072:	753b      	strb	r3, [r7, #20]
	else
		return;

	SendCommand(temp_buff, sizeof(temp_buff));
 8102074:	68fb      	ldr	r3, [r7, #12]
 8102076:	f107 0110 	add.w	r1, r7, #16
 810207a:	2206      	movs	r2, #6
 810207c:	4618      	mov	r0, r3
 810207e:	f001 f877 	bl	8103170 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 8102082:	3718      	adds	r7, #24
 8102084:	46bd      	mov	sp, r7
 8102086:	bd80      	pop	{r7, pc}

08102088 <_ZN6DayCam19handleZoom2PositionEt>:

void DayCam::handleZoom2Position(uint16_t position){
 8102088:	b580      	push	{r7, lr}
 810208a:	b086      	sub	sp, #24
 810208c:	af00      	add	r7, sp, #0
 810208e:	6078      	str	r0, [r7, #4]
 8102090:	460b      	mov	r3, r1
 8102092:	807b      	strh	r3, [r7, #2]

	uint8_t temp_buff[sizeof(zoom2Position)] = {0};
 8102094:	f107 030c 	add.w	r3, r7, #12
 8102098:	2200      	movs	r2, #0
 810209a:	601a      	str	r2, [r3, #0]
 810209c:	605a      	str	r2, [r3, #4]
 810209e:	721a      	strb	r2, [r3, #8]

	memcpy(temp_buff,zoom2Position,sizeof(zoom2Position));
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	f103 02a6 	add.w	r2, r3, #166	@ 0xa6
 81020a6:	f107 030c 	add.w	r3, r7, #12
 81020aa:	6810      	ldr	r0, [r2, #0]
 81020ac:	6851      	ldr	r1, [r2, #4]
 81020ae:	c303      	stmia	r3!, {r0, r1}
 81020b0:	7a12      	ldrb	r2, [r2, #8]
 81020b2:	701a      	strb	r2, [r3, #0]

	if (position <= 0x4000){
 81020b4:	887b      	ldrh	r3, [r7, #2]
 81020b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81020ba:	d822      	bhi.n	8102102 <_ZN6DayCam19handleZoom2PositionEt+0x7a>
		temp_buff[4] = (position & 0xF000) >> 12;
 81020bc:	887b      	ldrh	r3, [r7, #2]
 81020be:	0b1b      	lsrs	r3, r3, #12
 81020c0:	b29b      	uxth	r3, r3
 81020c2:	b2db      	uxtb	r3, r3
 81020c4:	743b      	strb	r3, [r7, #16]
		temp_buff[5] = (position & 0x0F00) >> 8;
 81020c6:	887b      	ldrh	r3, [r7, #2]
 81020c8:	0a1b      	lsrs	r3, r3, #8
 81020ca:	b29b      	uxth	r3, r3
 81020cc:	b2db      	uxtb	r3, r3
 81020ce:	f003 030f 	and.w	r3, r3, #15
 81020d2:	b2db      	uxtb	r3, r3
 81020d4:	747b      	strb	r3, [r7, #17]
		temp_buff[6] = (position & 0x00F0) >> 4;
 81020d6:	887b      	ldrh	r3, [r7, #2]
 81020d8:	091b      	lsrs	r3, r3, #4
 81020da:	b29b      	uxth	r3, r3
 81020dc:	b2db      	uxtb	r3, r3
 81020de:	f003 030f 	and.w	r3, r3, #15
 81020e2:	b2db      	uxtb	r3, r3
 81020e4:	74bb      	strb	r3, [r7, #18]
		temp_buff[7] = (position & 0x000F) ;
 81020e6:	887b      	ldrh	r3, [r7, #2]
 81020e8:	b2db      	uxtb	r3, r3
 81020ea:	f003 030f 	and.w	r3, r3, #15
 81020ee:	b2db      	uxtb	r3, r3
 81020f0:	74fb      	strb	r3, [r7, #19]
	}
	else
		return;
	SendCommand(temp_buff, sizeof(temp_buff));
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	f107 010c 	add.w	r1, r7, #12
 81020f8:	2209      	movs	r2, #9
 81020fa:	4618      	mov	r0, r3
 81020fc:	f001 f838 	bl	8103170 <_ZN12UartEndpoint11SendCommandEPKhj>
 8102100:	e000      	b.n	8102104 <_ZN6DayCam19handleZoom2PositionEt+0x7c>
		return;
 8102102:	bf00      	nop

}
 8102104:	3718      	adds	r7, #24
 8102106:	46bd      	mov	sp, r7
 8102108:	bd80      	pop	{r7, pc}

0810210a <_ZN6DayCam14handleZoomStopEv>:

void DayCam::handleZoomStop(){
 810210a:	b580      	push	{r7, lr}
 810210c:	b082      	sub	sp, #8
 810210e:	af00      	add	r7, sp, #0
 8102110:	6078      	str	r0, [r7, #4]
	SendCommand(zoom_stop, sizeof(zoom_stop));
 8102112:	6878      	ldr	r0, [r7, #4]
 8102114:	687b      	ldr	r3, [r7, #4]
 8102116:	33a0      	adds	r3, #160	@ 0xa0
 8102118:	2206      	movs	r2, #6
 810211a:	4619      	mov	r1, r3
 810211c:	f001 f828 	bl	8103170 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 8102120:	bf00      	nop
 8102122:	3708      	adds	r7, #8
 8102124:	46bd      	mov	sp, r7
 8102126:	bd80      	pop	{r7, pc}

08102128 <_ZN6DayCam14handleFocusFarEPhh>:

void DayCam::handleFocusFar(uint8_t* speed, uint8_t length){
 8102128:	b580      	push	{r7, lr}
 810212a:	b086      	sub	sp, #24
 810212c:	af00      	add	r7, sp, #0
 810212e:	60f8      	str	r0, [r7, #12]
 8102130:	60b9      	str	r1, [r7, #8]
 8102132:	4613      	mov	r3, r2
 8102134:	71fb      	strb	r3, [r7, #7]

	uint8_t temp_buff[sizeof(focus_farVar)] = {0};
 8102136:	f107 0310 	add.w	r3, r7, #16
 810213a:	2200      	movs	r2, #0
 810213c:	601a      	str	r2, [r3, #0]
 810213e:	809a      	strh	r2, [r3, #4]

	memcpy(temp_buff,focus_farVar,sizeof(focus_farVar));
 8102140:	68fb      	ldr	r3, [r7, #12]
 8102142:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 8102146:	f107 0310 	add.w	r3, r7, #16
 810214a:	6810      	ldr	r0, [r2, #0]
 810214c:	6018      	str	r0, [r3, #0]
 810214e:	8892      	ldrh	r2, [r2, #4]
 8102150:	809a      	strh	r2, [r3, #4]

	if (speed[0] > 0 && speed[0] < 8)
 8102152:	68bb      	ldr	r3, [r7, #8]
 8102154:	781b      	ldrb	r3, [r3, #0]
 8102156:	2b00      	cmp	r3, #0
 8102158:	d016      	beq.n	8102188 <_ZN6DayCam14handleFocusFarEPhh+0x60>
 810215a:	68bb      	ldr	r3, [r7, #8]
 810215c:	781b      	ldrb	r3, [r3, #0]
 810215e:	2b07      	cmp	r3, #7
 8102160:	d812      	bhi.n	8102188 <_ZN6DayCam14handleFocusFarEPhh+0x60>
		temp_buff [4] = (temp_buff [4] & 0xF0 | (speed[0] & 0x0f));
 8102162:	7d3b      	ldrb	r3, [r7, #20]
 8102164:	f023 030f 	bic.w	r3, r3, #15
 8102168:	b2da      	uxtb	r2, r3
 810216a:	68bb      	ldr	r3, [r7, #8]
 810216c:	781b      	ldrb	r3, [r3, #0]
 810216e:	f003 030f 	and.w	r3, r3, #15
 8102172:	b2db      	uxtb	r3, r3
 8102174:	4313      	orrs	r3, r2
 8102176:	b2db      	uxtb	r3, r3
 8102178:	753b      	strb	r3, [r7, #20]
	else
		return;

	SendCommand(temp_buff, sizeof(temp_buff));
 810217a:	68fb      	ldr	r3, [r7, #12]
 810217c:	f107 0110 	add.w	r1, r7, #16
 8102180:	2206      	movs	r2, #6
 8102182:	4618      	mov	r0, r3
 8102184:	f000 fff4 	bl	8103170 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 8102188:	3718      	adds	r7, #24
 810218a:	46bd      	mov	sp, r7
 810218c:	bd80      	pop	{r7, pc}

0810218e <_ZN6DayCam15handleFocusNearEPhh>:

void DayCam::handleFocusNear(uint8_t* speed, uint8_t length){
 810218e:	b580      	push	{r7, lr}
 8102190:	b086      	sub	sp, #24
 8102192:	af00      	add	r7, sp, #0
 8102194:	60f8      	str	r0, [r7, #12]
 8102196:	60b9      	str	r1, [r7, #8]
 8102198:	4613      	mov	r3, r2
 810219a:	71fb      	strb	r3, [r7, #7]

	uint8_t temp_buff[sizeof(focus_nearVar)] = {0};
 810219c:	f107 0310 	add.w	r3, r7, #16
 81021a0:	2200      	movs	r2, #0
 81021a2:	601a      	str	r2, [r3, #0]
 81021a4:	809a      	strh	r2, [r3, #4]

	memcpy(temp_buff,focus_nearVar,sizeof(focus_nearVar));
 81021a6:	68fb      	ldr	r3, [r7, #12]
 81021a8:	f103 02d3 	add.w	r2, r3, #211	@ 0xd3
 81021ac:	f107 0310 	add.w	r3, r7, #16
 81021b0:	6810      	ldr	r0, [r2, #0]
 81021b2:	6018      	str	r0, [r3, #0]
 81021b4:	8892      	ldrh	r2, [r2, #4]
 81021b6:	809a      	strh	r2, [r3, #4]

	if (speed[0] > 0 && speed[0] < 8)
 81021b8:	68bb      	ldr	r3, [r7, #8]
 81021ba:	781b      	ldrb	r3, [r3, #0]
 81021bc:	2b00      	cmp	r3, #0
 81021be:	d016      	beq.n	81021ee <_ZN6DayCam15handleFocusNearEPhh+0x60>
 81021c0:	68bb      	ldr	r3, [r7, #8]
 81021c2:	781b      	ldrb	r3, [r3, #0]
 81021c4:	2b07      	cmp	r3, #7
 81021c6:	d812      	bhi.n	81021ee <_ZN6DayCam15handleFocusNearEPhh+0x60>
		temp_buff [4] = (temp_buff [4] & 0xF0 | (speed[0] & 0x0f));
 81021c8:	7d3b      	ldrb	r3, [r7, #20]
 81021ca:	f023 030f 	bic.w	r3, r3, #15
 81021ce:	b2da      	uxtb	r2, r3
 81021d0:	68bb      	ldr	r3, [r7, #8]
 81021d2:	781b      	ldrb	r3, [r3, #0]
 81021d4:	f003 030f 	and.w	r3, r3, #15
 81021d8:	b2db      	uxtb	r3, r3
 81021da:	4313      	orrs	r3, r2
 81021dc:	b2db      	uxtb	r3, r3
 81021de:	753b      	strb	r3, [r7, #20]
	else
		return;

	SendCommand(temp_buff, sizeof(temp_buff));
 81021e0:	68fb      	ldr	r3, [r7, #12]
 81021e2:	f107 0110 	add.w	r1, r7, #16
 81021e6:	2206      	movs	r2, #6
 81021e8:	4618      	mov	r0, r3
 81021ea:	f000 ffc1 	bl	8103170 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 81021ee:	3718      	adds	r7, #24
 81021f0:	46bd      	mov	sp, r7
 81021f2:	bd80      	pop	{r7, pc}

081021f4 <_ZN6DayCam20handleFocus2PositionEt>:

void DayCam::handleFocus2Position(uint16_t position){
 81021f4:	b580      	push	{r7, lr}
 81021f6:	b086      	sub	sp, #24
 81021f8:	af00      	add	r7, sp, #0
 81021fa:	6078      	str	r0, [r7, #4]
 81021fc:	460b      	mov	r3, r1
 81021fe:	807b      	strh	r3, [r7, #2]

	uint8_t temp_buff[sizeof(focus2Position)] = {0};
 8102200:	f107 030c 	add.w	r3, r7, #12
 8102204:	2200      	movs	r2, #0
 8102206:	601a      	str	r2, [r3, #0]
 8102208:	605a      	str	r2, [r3, #4]
 810220a:	721a      	strb	r2, [r3, #8]

	memcpy(temp_buff,focus2Position,sizeof(focus2Position));
 810220c:	687b      	ldr	r3, [r7, #4]
 810220e:	f103 02df 	add.w	r2, r3, #223	@ 0xdf
 8102212:	f107 030c 	add.w	r3, r7, #12
 8102216:	6810      	ldr	r0, [r2, #0]
 8102218:	6851      	ldr	r1, [r2, #4]
 810221a:	c303      	stmia	r3!, {r0, r1}
 810221c:	7a12      	ldrb	r2, [r2, #8]
 810221e:	701a      	strb	r2, [r3, #0]

	if (position <= 0x4000){
 8102220:	887b      	ldrh	r3, [r7, #2]
 8102222:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102226:	d822      	bhi.n	810226e <_ZN6DayCam20handleFocus2PositionEt+0x7a>
		temp_buff[4] = (position & 0xF000) >> 12;
 8102228:	887b      	ldrh	r3, [r7, #2]
 810222a:	0b1b      	lsrs	r3, r3, #12
 810222c:	b29b      	uxth	r3, r3
 810222e:	b2db      	uxtb	r3, r3
 8102230:	743b      	strb	r3, [r7, #16]
		temp_buff[5] = (position & 0x0F00) >> 8;
 8102232:	887b      	ldrh	r3, [r7, #2]
 8102234:	0a1b      	lsrs	r3, r3, #8
 8102236:	b29b      	uxth	r3, r3
 8102238:	b2db      	uxtb	r3, r3
 810223a:	f003 030f 	and.w	r3, r3, #15
 810223e:	b2db      	uxtb	r3, r3
 8102240:	747b      	strb	r3, [r7, #17]
		temp_buff[6] = (position & 0x00F0) >> 4;
 8102242:	887b      	ldrh	r3, [r7, #2]
 8102244:	091b      	lsrs	r3, r3, #4
 8102246:	b29b      	uxth	r3, r3
 8102248:	b2db      	uxtb	r3, r3
 810224a:	f003 030f 	and.w	r3, r3, #15
 810224e:	b2db      	uxtb	r3, r3
 8102250:	74bb      	strb	r3, [r7, #18]
		temp_buff[7] = (position & 0x000F) ;
 8102252:	887b      	ldrh	r3, [r7, #2]
 8102254:	b2db      	uxtb	r3, r3
 8102256:	f003 030f 	and.w	r3, r3, #15
 810225a:	b2db      	uxtb	r3, r3
 810225c:	74fb      	strb	r3, [r7, #19]
	}
	else
		return;
	SendCommand(temp_buff, sizeof(temp_buff));
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	f107 010c 	add.w	r1, r7, #12
 8102264:	2209      	movs	r2, #9
 8102266:	4618      	mov	r0, r3
 8102268:	f000 ff82 	bl	8103170 <_ZN12UartEndpoint11SendCommandEPKhj>
 810226c:	e000      	b.n	8102270 <_ZN6DayCam20handleFocus2PositionEt+0x7c>
		return;
 810226e:	bf00      	nop

}
 8102270:	3718      	adds	r7, #24
 8102272:	46bd      	mov	sp, r7
 8102274:	bd80      	pop	{r7, pc}

08102276 <_ZN6DayCam15handleFocusStopEv>:

void DayCam::handleFocusStop(){
 8102276:	b580      	push	{r7, lr}
 8102278:	b082      	sub	sp, #8
 810227a:	af00      	add	r7, sp, #0
 810227c:	6078      	str	r0, [r7, #4]
	SendCommand(focus_stop, sizeof(focus_stop));
 810227e:	6878      	ldr	r0, [r7, #4]
 8102280:	687b      	ldr	r3, [r7, #4]
 8102282:	33d9      	adds	r3, #217	@ 0xd9
 8102284:	2206      	movs	r2, #6
 8102286:	4619      	mov	r1, r3
 8102288:	f000 ff72 	bl	8103170 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 810228c:	bf00      	nop
 810228e:	3708      	adds	r7, #8
 8102290:	46bd      	mov	sp, r7
 8102292:	bd80      	pop	{r7, pc}

08102294 <_ZNSt5dequeIhSaIhEED1Ev>:
      ~deque()
 8102294:	b580      	push	{r7, lr}
 8102296:	b08a      	sub	sp, #40	@ 0x28
 8102298:	af00      	add	r7, sp, #0
 810229a:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 810229c:	f107 0308 	add.w	r3, r7, #8
 81022a0:	6879      	ldr	r1, [r7, #4]
 81022a2:	4618      	mov	r0, r3
 81022a4:	f7ff fa15 	bl	81016d2 <_ZNSt5dequeIhSaIhEE5beginEv>
 81022a8:	f107 0318 	add.w	r3, r7, #24
 81022ac:	6879      	ldr	r1, [r7, #4]
 81022ae:	4618      	mov	r0, r3
 81022b0:	f000 f8a3 	bl	81023fa <_ZNSt5dequeIhSaIhEE3endEv>
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	4618      	mov	r0, r3
 81022b8:	f7ff fa1a 	bl	81016f0 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 81022bc:	4603      	mov	r3, r0
 81022be:	f107 0218 	add.w	r2, r7, #24
 81022c2:	f107 0108 	add.w	r1, r7, #8
 81022c6:	6878      	ldr	r0, [r7, #4]
 81022c8:	f000 f91a 	bl	8102500 <_ZNSt5dequeIhSaIhEE15_M_destroy_dataESt15_Deque_iteratorIhRhPhES5_RKS0_>
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	4618      	mov	r0, r3
 81022d0:	f000 f8f4 	bl	81024bc <_ZNSt11_Deque_baseIhSaIhEED1Ev>
 81022d4:	687b      	ldr	r3, [r7, #4]
 81022d6:	4618      	mov	r0, r3
 81022d8:	3728      	adds	r7, #40	@ 0x28
 81022da:	46bd      	mov	sp, r7
 81022dc:	bd80      	pop	{r7, pc}

081022de <_ZNSt5dequeIhSaIhEEC1ERKS1_>:
      deque(const deque& __x)
 81022de:	b590      	push	{r4, r7, lr}
 81022e0:	b09d      	sub	sp, #116	@ 0x74
 81022e2:	af02      	add	r7, sp, #8
 81022e4:	6078      	str	r0, [r7, #4]
 81022e6:	6039      	str	r1, [r7, #0]
	      __x.size())
 81022e8:	687c      	ldr	r4, [r7, #4]
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
 81022ea:	683b      	ldr	r3, [r7, #0]
 81022ec:	4618      	mov	r0, r3
 81022ee:	f7ff fbc6 	bl	8101a7e <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 81022f2:	4603      	mov	r3, r0
 81022f4:	667b      	str	r3, [r7, #100]	@ 0x64
 81022f6:	f107 030c 	add.w	r3, r7, #12
 81022fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 81022fc:	663a      	str	r2, [r7, #96]	@ 0x60
 81022fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8102300:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8102302:	65bb      	str	r3, [r7, #88]	@ 0x58
 8102304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8102306:	657b      	str	r3, [r7, #84]	@ 0x54
 8102308:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810230a:	653b      	str	r3, [r7, #80]	@ 0x50
       *  @return @c __rhs
      */
      [[__gnu__::__always_inline__]]
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
 810230c:	bf00      	nop
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    [[__gnu__::__always_inline__]]
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }
 810230e:	bf00      	nop
	      __x.size())
 8102310:	6838      	ldr	r0, [r7, #0]
 8102312:	f000 f902 	bl	810251a <_ZNKSt5dequeIhSaIhEE4sizeEv>
 8102316:	4602      	mov	r2, r0
 8102318:	f107 030c 	add.w	r3, r7, #12
 810231c:	4619      	mov	r1, r3
 810231e:	4620      	mov	r0, r4
 8102320:	f000 f90d 	bl	810253e <_ZNSt11_Deque_baseIhSaIhEEC1ERKS0_j>
 8102324:	f107 030c 	add.w	r3, r7, #12
 8102328:	4618      	mov	r0, r3
 810232a:	f000 fa3a 	bl	81027a2 <_ZNSt15__new_allocatorIhED1Ev>
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 810232e:	f107 0320 	add.w	r3, r7, #32
 8102332:	6839      	ldr	r1, [r7, #0]
 8102334:	4618      	mov	r0, r3
 8102336:	f000 f916 	bl	8102566 <_ZNKSt5dequeIhSaIhEE5beginEv>
 810233a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810233e:	6839      	ldr	r1, [r7, #0]
 8102340:	4618      	mov	r0, r3
 8102342:	f000 f91f 	bl	8102584 <_ZNKSt5dequeIhSaIhEE3endEv>
				    this->_M_impl._M_start,
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	f103 0208 	add.w	r2, r3, #8
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 810234c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8102350:	4611      	mov	r1, r2
 8102352:	4618      	mov	r0, r3
 8102354:	f7ff f9d7 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
				    _M_get_Tp_allocator()); }
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	4618      	mov	r0, r3
 810235c:	f7ff f9c8 	bl	81016f0 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8102360:	4604      	mov	r4, r0
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8102362:	f107 0010 	add.w	r0, r7, #16
 8102366:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 810236a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 810236e:	f107 0120 	add.w	r1, r7, #32
 8102372:	9400      	str	r4, [sp, #0]
 8102374:	f000 f931 	bl	81025da <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEhET0_T_S9_S8_RSaIT1_E>
				    _M_get_Tp_allocator()); }
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	4618      	mov	r0, r3
 810237c:	376c      	adds	r7, #108	@ 0x6c
 810237e:	46bd      	mov	sp, r7
 8102380:	bd90      	pop	{r4, r7, pc}

08102382 <_ZNSt5dequeIhSaIhEEC1EOS1_>:
      deque(deque&&) = default;
 8102382:	b580      	push	{r7, lr}
 8102384:	b082      	sub	sp, #8
 8102386:	af00      	add	r7, sp, #0
 8102388:	6078      	str	r0, [r7, #4]
 810238a:	6039      	str	r1, [r7, #0]
 810238c:	687b      	ldr	r3, [r7, #4]
 810238e:	683a      	ldr	r2, [r7, #0]
 8102390:	4611      	mov	r1, r2
 8102392:	4618      	mov	r0, r3
 8102394:	f000 f952 	bl	810263c <_ZNSt11_Deque_baseIhSaIhEEC1EOS1_>
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	4618      	mov	r0, r3
 810239c:	3708      	adds	r7, #8
 810239e:	46bd      	mov	sp, r7
 81023a0:	bd80      	pop	{r7, pc}

081023a2 <_ZNSt5queueIhSt5dequeIhSaIhEEEC1EOS2_>:
      explicit
      queue(const _Sequence& __c)
      : c(__c) { }

      explicit
      queue(_Sequence&& __c)
 81023a2:	b590      	push	{r4, r7, lr}
 81023a4:	b083      	sub	sp, #12
 81023a6:	af00      	add	r7, sp, #0
 81023a8:	6078      	str	r0, [r7, #4]
 81023aa:	6039      	str	r1, [r7, #0]
      : c(std::move(__c)) { }
 81023ac:	687c      	ldr	r4, [r7, #4]
 81023ae:	6838      	ldr	r0, [r7, #0]
 81023b0:	f000 f939 	bl	8102626 <_ZSt4moveIRSt5dequeIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 81023b4:	4603      	mov	r3, r0
 81023b6:	4619      	mov	r1, r3
 81023b8:	4620      	mov	r0, r4
 81023ba:	f7ff ffe2 	bl	8102382 <_ZNSt5dequeIhSaIhEEC1EOS1_>
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	4618      	mov	r0, r3
 81023c2:	370c      	adds	r7, #12
 81023c4:	46bd      	mov	sp, r7
 81023c6:	bd90      	pop	{r4, r7, pc}

081023c8 <_ZNSt5dequeIhSaIhEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 81023c8:	b580      	push	{r7, lr}
 81023ca:	b086      	sub	sp, #24
 81023cc:	af00      	add	r7, sp, #0
 81023ce:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 81023d0:	f107 0308 	add.w	r3, r7, #8
 81023d4:	6879      	ldr	r1, [r7, #4]
 81023d6:	4618      	mov	r0, r3
 81023d8:	f000 f80f 	bl	81023fa <_ZNSt5dequeIhSaIhEE3endEv>
	--__tmp;
 81023dc:	f107 0308 	add.w	r3, r7, #8
 81023e0:	4618      	mov	r0, r3
 81023e2:	f000 f950 	bl	8102686 <_ZNSt15_Deque_iteratorIhRhPhEmmEv>
	return *__tmp;
 81023e6:	f107 0308 	add.w	r3, r7, #8
 81023ea:	4618      	mov	r0, r3
 81023ec:	f7ff fa2e 	bl	810184c <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>
 81023f0:	4603      	mov	r3, r0
      }
 81023f2:	4618      	mov	r0, r3
 81023f4:	3718      	adds	r7, #24
 81023f6:	46bd      	mov	sp, r7
 81023f8:	bd80      	pop	{r7, pc}

081023fa <_ZNSt5dequeIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81023fa:	b580      	push	{r7, lr}
 81023fc:	b082      	sub	sp, #8
 81023fe:	af00      	add	r7, sp, #0
 8102400:	6078      	str	r0, [r7, #4]
 8102402:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8102404:	683b      	ldr	r3, [r7, #0]
 8102406:	3318      	adds	r3, #24
 8102408:	4619      	mov	r1, r3
 810240a:	6878      	ldr	r0, [r7, #4]
 810240c:	f7ff f97b 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102410:	6878      	ldr	r0, [r7, #4]
 8102412:	3708      	adds	r7, #8
 8102414:	46bd      	mov	sp, r7
 8102416:	bd80      	pop	{r7, pc}

08102418 <_ZStneRKSt15_Deque_iteratorIhRhPhES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8102418:	b580      	push	{r7, lr}
 810241a:	b082      	sub	sp, #8
 810241c:	af00      	add	r7, sp, #0
 810241e:	6078      	str	r0, [r7, #4]
 8102420:	6039      	str	r1, [r7, #0]
      { return !(__x == __y); }
 8102422:	6839      	ldr	r1, [r7, #0]
 8102424:	6878      	ldr	r0, [r7, #4]
 8102426:	f7ff f9fd 	bl	8101824 <_ZSteqRKSt15_Deque_iteratorIhRhPhES4_>
 810242a:	4603      	mov	r3, r0
 810242c:	f083 0301 	eor.w	r3, r3, #1
 8102430:	b2db      	uxtb	r3, r3
 8102432:	4618      	mov	r0, r3
 8102434:	3708      	adds	r7, #8
 8102436:	46bd      	mov	sp, r7
 8102438:	bd80      	pop	{r7, pc}

0810243a <_ZNSt15_Deque_iteratorIhRhPhEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810243a:	b580      	push	{r7, lr}
 810243c:	b082      	sub	sp, #8
 810243e:	af00      	add	r7, sp, #0
 8102440:	6078      	str	r0, [r7, #4]
	++_M_cur;
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	681b      	ldr	r3, [r3, #0]
 8102446:	1c5a      	adds	r2, r3, #1
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	681a      	ldr	r2, [r3, #0]
 8102450:	687b      	ldr	r3, [r7, #4]
 8102452:	689b      	ldr	r3, [r3, #8]
 8102454:	429a      	cmp	r2, r3
 8102456:	d10a      	bne.n	810246e <_ZNSt15_Deque_iteratorIhRhPhEppEv+0x34>
	    _M_set_node(_M_node + 1);
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	68db      	ldr	r3, [r3, #12]
 810245c:	3304      	adds	r3, #4
 810245e:	4619      	mov	r1, r3
 8102460:	6878      	ldr	r0, [r7, #4]
 8102462:	f7ff fa94 	bl	810198e <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	685a      	ldr	r2, [r3, #4]
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	601a      	str	r2, [r3, #0]
	return *this;
 810246e:	687b      	ldr	r3, [r7, #4]
      }
 8102470:	4618      	mov	r0, r3
 8102472:	3708      	adds	r7, #8
 8102474:	46bd      	mov	sp, r7
 8102476:	bd80      	pop	{r7, pc}

08102478 <_ZNSt5dequeIhSaIhEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8102478:	b580      	push	{r7, lr}
 810247a:	b086      	sub	sp, #24
 810247c:	af00      	add	r7, sp, #0
 810247e:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8102480:	f107 0308 	add.w	r3, r7, #8
 8102484:	6879      	ldr	r1, [r7, #4]
 8102486:	4618      	mov	r0, r3
 8102488:	f7ff f923 	bl	81016d2 <_ZNSt5dequeIhSaIhEE5beginEv>
 810248c:	f107 0308 	add.w	r3, r7, #8
 8102490:	4619      	mov	r1, r3
 8102492:	6878      	ldr	r0, [r7, #4]
 8102494:	f000 f916 	bl	81026c4 <_ZNSt5dequeIhSaIhEE15_M_erase_at_endESt15_Deque_iteratorIhRhPhE>
 8102498:	bf00      	nop
 810249a:	3718      	adds	r7, #24
 810249c:	46bd      	mov	sp, r7
 810249e:	bd80      	pop	{r7, pc}

081024a0 <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implD1Ev>:
      struct _Deque_impl
 81024a0:	b580      	push	{r7, lr}
 81024a2:	b084      	sub	sp, #16
 81024a4:	af00      	add	r7, sp, #0
 81024a6:	6078      	str	r0, [r7, #4]
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	60fb      	str	r3, [r7, #12]
 81024ac:	68f8      	ldr	r0, [r7, #12]
 81024ae:	f000 f978 	bl	81027a2 <_ZNSt15__new_allocatorIhED1Ev>
 81024b2:	687b      	ldr	r3, [r7, #4]
 81024b4:	4618      	mov	r0, r3
 81024b6:	3710      	adds	r7, #16
 81024b8:	46bd      	mov	sp, r7
 81024ba:	bd80      	pop	{r7, pc}

081024bc <_ZNSt11_Deque_baseIhSaIhEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 81024bc:	b580      	push	{r7, lr}
 81024be:	b082      	sub	sp, #8
 81024c0:	af00      	add	r7, sp, #0
 81024c2:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	681b      	ldr	r3, [r3, #0]
 81024c8:	2b00      	cmp	r3, #0
 81024ca:	d010      	beq.n	81024ee <_ZNSt11_Deque_baseIhSaIhEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 81024cc:	687b      	ldr	r3, [r7, #4]
 81024ce:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 81024d0:	687b      	ldr	r3, [r7, #4]
 81024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 81024d4:	3304      	adds	r3, #4
 81024d6:	461a      	mov	r2, r3
 81024d8:	6878      	ldr	r0, [r7, #4]
 81024da:	f000 f926 	bl	810272a <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 81024de:	687b      	ldr	r3, [r7, #4]
 81024e0:	6819      	ldr	r1, [r3, #0]
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	685b      	ldr	r3, [r3, #4]
 81024e6:	461a      	mov	r2, r3
 81024e8:	6878      	ldr	r0, [r7, #4]
 81024ea:	f000 f939 	bl	8102760 <_ZNSt11_Deque_baseIhSaIhEE17_M_deallocate_mapEPPhj>
    }
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	4618      	mov	r0, r3
 81024f2:	f7ff ffd5 	bl	81024a0 <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implD1Ev>
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	4618      	mov	r0, r3
 81024fa:	3708      	adds	r7, #8
 81024fc:	46bd      	mov	sp, r7
 81024fe:	bd80      	pop	{r7, pc}

08102500 <_ZNSt5dequeIhSaIhEE15_M_destroy_dataESt15_Deque_iteratorIhRhPhES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8102500:	b480      	push	{r7}
 8102502:	b08d      	sub	sp, #52	@ 0x34
 8102504:	af00      	add	r7, sp, #0
 8102506:	60f8      	str	r0, [r7, #12]
 8102508:	60b9      	str	r1, [r7, #8]
 810250a:	607a      	str	r2, [r7, #4]
 810250c:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 810250e:	bf00      	nop
 8102510:	3734      	adds	r7, #52	@ 0x34
 8102512:	46bd      	mov	sp, r7
 8102514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102518:	4770      	bx	lr

0810251a <_ZNKSt5dequeIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 810251a:	b580      	push	{r7, lr}
 810251c:	b082      	sub	sp, #8
 810251e:	af00      	add	r7, sp, #0
 8102520:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8102522:	687b      	ldr	r3, [r7, #4]
 8102524:	f103 0218 	add.w	r2, r3, #24
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	3308      	adds	r3, #8
 810252c:	4619      	mov	r1, r3
 810252e:	4610      	mov	r0, r2
 8102530:	f000 f942 	bl	81027b8 <_ZStmiRKSt15_Deque_iteratorIhRhPhES4_>
 8102534:	4603      	mov	r3, r0
 8102536:	4618      	mov	r0, r3
 8102538:	3708      	adds	r7, #8
 810253a:	46bd      	mov	sp, r7
 810253c:	bd80      	pop	{r7, pc}

0810253e <_ZNSt11_Deque_baseIhSaIhEEC1ERKS0_j>:
      _Deque_base(const allocator_type& __a, size_t __num_elements)
 810253e:	b580      	push	{r7, lr}
 8102540:	b084      	sub	sp, #16
 8102542:	af00      	add	r7, sp, #0
 8102544:	60f8      	str	r0, [r7, #12]
 8102546:	60b9      	str	r1, [r7, #8]
 8102548:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 810254a:	68fb      	ldr	r3, [r7, #12]
 810254c:	68b9      	ldr	r1, [r7, #8]
 810254e:	4618      	mov	r0, r3
 8102550:	f000 f95c 	bl	810280c <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1ERKS0_>
      { _M_initialize_map(__num_elements); }
 8102554:	6879      	ldr	r1, [r7, #4]
 8102556:	68f8      	ldr	r0, [r7, #12]
 8102558:	f7ff f902 	bl	8101760 <_ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEj>
 810255c:	68fb      	ldr	r3, [r7, #12]
 810255e:	4618      	mov	r0, r3
 8102560:	3710      	adds	r7, #16
 8102562:	46bd      	mov	sp, r7
 8102564:	bd80      	pop	{r7, pc}

08102566 <_ZNKSt5dequeIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8102566:	b580      	push	{r7, lr}
 8102568:	b082      	sub	sp, #8
 810256a:	af00      	add	r7, sp, #0
 810256c:	6078      	str	r0, [r7, #4]
 810256e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8102570:	683b      	ldr	r3, [r7, #0]
 8102572:	3308      	adds	r3, #8
 8102574:	4619      	mov	r1, r3
 8102576:	6878      	ldr	r0, [r7, #4]
 8102578:	f000 f95e 	bl	8102838 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1IS_IhRhPhEvEERKT_>
 810257c:	6878      	ldr	r0, [r7, #4]
 810257e:	3708      	adds	r7, #8
 8102580:	46bd      	mov	sp, r7
 8102582:	bd80      	pop	{r7, pc}

08102584 <_ZNKSt5dequeIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8102584:	b580      	push	{r7, lr}
 8102586:	b082      	sub	sp, #8
 8102588:	af00      	add	r7, sp, #0
 810258a:	6078      	str	r0, [r7, #4]
 810258c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 810258e:	683b      	ldr	r3, [r7, #0]
 8102590:	3318      	adds	r3, #24
 8102592:	4619      	mov	r1, r3
 8102594:	6878      	ldr	r0, [r7, #4]
 8102596:	f000 f94f 	bl	8102838 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1IS_IhRhPhEvEERKT_>
 810259a:	6878      	ldr	r0, [r7, #4]
 810259c:	3708      	adds	r7, #8
 810259e:	46bd      	mov	sp, r7
 81025a0:	bd80      	pop	{r7, pc}

081025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 81025a2:	b480      	push	{r7}
 81025a4:	b083      	sub	sp, #12
 81025a6:	af00      	add	r7, sp, #0
 81025a8:	6078      	str	r0, [r7, #4]
 81025aa:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 81025ac:	683b      	ldr	r3, [r7, #0]
 81025ae:	681a      	ldr	r2, [r3, #0]
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	601a      	str	r2, [r3, #0]
 81025b4:	683b      	ldr	r3, [r7, #0]
 81025b6:	685a      	ldr	r2, [r3, #4]
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 81025bc:	683b      	ldr	r3, [r7, #0]
 81025be:	689a      	ldr	r2, [r3, #8]
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	609a      	str	r2, [r3, #8]
 81025c4:	683b      	ldr	r3, [r7, #0]
 81025c6:	68da      	ldr	r2, [r3, #12]
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	60da      	str	r2, [r3, #12]
 81025cc:	687b      	ldr	r3, [r7, #4]
 81025ce:	4618      	mov	r0, r3
 81025d0:	370c      	adds	r7, #12
 81025d2:	46bd      	mov	sp, r7
 81025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025d8:	4770      	bx	lr

081025da <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEhET0_T_S9_S8_RSaIT1_E>:

#if _GLIBCXX_HOSTED
  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 81025da:	b580      	push	{r7, lr}
 81025dc:	b090      	sub	sp, #64	@ 0x40
 81025de:	af00      	add	r7, sp, #0
 81025e0:	60f8      	str	r0, [r7, #12]
 81025e2:	60b9      	str	r1, [r7, #8]
 81025e4:	607a      	str	r2, [r7, #4]
 81025e6:	603b      	str	r3, [r7, #0]
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return std::__do_uninit_copy(__first, __last, __result);
#endif
      return std::uninitialized_copy(__first, __last, __result);
 81025e8:	f107 0310 	add.w	r3, r7, #16
 81025ec:	68b9      	ldr	r1, [r7, #8]
 81025ee:	4618      	mov	r0, r3
 81025f0:	f7ff ffd7 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 81025f4:	f107 0320 	add.w	r3, r7, #32
 81025f8:	6879      	ldr	r1, [r7, #4]
 81025fa:	4618      	mov	r0, r3
 81025fc:	f7ff ffd1 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102600:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102604:	6839      	ldr	r1, [r7, #0]
 8102606:	4618      	mov	r0, r3
 8102608:	f7ff f87d 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 810260c:	68f8      	ldr	r0, [r7, #12]
 810260e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102612:	f107 0220 	add.w	r2, r7, #32
 8102616:	f107 0110 	add.w	r1, r7, #16
 810261a:	f000 f929 	bl	8102870 <_ZSt18uninitialized_copyISt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEET0_T_S9_S8_>
    }
 810261e:	68f8      	ldr	r0, [r7, #12]
 8102620:	3740      	adds	r7, #64	@ 0x40
 8102622:	46bd      	mov	sp, r7
 8102624:	bd80      	pop	{r7, pc}

08102626 <_ZSt4moveIRSt5dequeIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8102626:	b480      	push	{r7}
 8102628:	b083      	sub	sp, #12
 810262a:	af00      	add	r7, sp, #0
 810262c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	4618      	mov	r0, r3
 8102632:	370c      	adds	r7, #12
 8102634:	46bd      	mov	sp, r7
 8102636:	f85d 7b04 	ldr.w	r7, [sp], #4
 810263a:	4770      	bx	lr

0810263c <_ZNSt11_Deque_baseIhSaIhEEC1EOS1_>:
      _Deque_base(_Deque_base&& __x)
 810263c:	b590      	push	{r4, r7, lr}
 810263e:	b083      	sub	sp, #12
 8102640:	af00      	add	r7, sp, #0
 8102642:	6078      	str	r0, [r7, #4]
 8102644:	6039      	str	r1, [r7, #0]
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
 8102646:	687c      	ldr	r4, [r7, #4]
 8102648:	6838      	ldr	r0, [r7, #0]
 810264a:	f7ff f851 	bl	81016f0 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 810264e:	4603      	mov	r3, r0
 8102650:	4618      	mov	r0, r3
 8102652:	f000 f939 	bl	81028c8 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8102656:	4603      	mov	r3, r0
 8102658:	4619      	mov	r1, r3
 810265a:	4620      	mov	r0, r4
 810265c:	f000 f93f 	bl	81028de <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1EOS0_>
	_M_initialize_map(0);
 8102660:	2100      	movs	r1, #0
 8102662:	6878      	ldr	r0, [r7, #4]
 8102664:	f7ff f87c 	bl	8101760 <_ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEj>
	if (__x._M_impl._M_map)
 8102668:	683b      	ldr	r3, [r7, #0]
 810266a:	681b      	ldr	r3, [r3, #0]
 810266c:	2b00      	cmp	r3, #0
 810266e:	d005      	beq.n	810267c <_ZNSt11_Deque_baseIhSaIhEEC1EOS1_+0x40>
	  this->_M_impl._M_swap_data(__x._M_impl);
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	683a      	ldr	r2, [r7, #0]
 8102674:	4611      	mov	r1, r2
 8102676:	4618      	mov	r0, r3
 8102678:	f000 f94a 	bl	8102910 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_data12_M_swap_dataERS2_>
      }
 810267c:	687b      	ldr	r3, [r7, #4]
 810267e:	4618      	mov	r0, r3
 8102680:	370c      	adds	r7, #12
 8102682:	46bd      	mov	sp, r7
 8102684:	bd90      	pop	{r4, r7, pc}

08102686 <_ZNSt15_Deque_iteratorIhRhPhEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8102686:	b580      	push	{r7, lr}
 8102688:	b082      	sub	sp, #8
 810268a:	af00      	add	r7, sp, #0
 810268c:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	681a      	ldr	r2, [r3, #0]
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	685b      	ldr	r3, [r3, #4]
 8102696:	429a      	cmp	r2, r3
 8102698:	d10a      	bne.n	81026b0 <_ZNSt15_Deque_iteratorIhRhPhEmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	68db      	ldr	r3, [r3, #12]
 810269e:	3b04      	subs	r3, #4
 81026a0:	4619      	mov	r1, r3
 81026a2:	6878      	ldr	r0, [r7, #4]
 81026a4:	f7ff f973 	bl	810198e <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
	    _M_cur = _M_last;
 81026a8:	687b      	ldr	r3, [r7, #4]
 81026aa:	689a      	ldr	r2, [r3, #8]
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	601a      	str	r2, [r3, #0]
	--_M_cur;
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	1e5a      	subs	r2, r3, #1
 81026b6:	687b      	ldr	r3, [r7, #4]
 81026b8:	601a      	str	r2, [r3, #0]
	return *this;
 81026ba:	687b      	ldr	r3, [r7, #4]
      }
 81026bc:	4618      	mov	r0, r3
 81026be:	3708      	adds	r7, #8
 81026c0:	46bd      	mov	sp, r7
 81026c2:	bd80      	pop	{r7, pc}

081026c4 <_ZNSt5dequeIhSaIhEE15_M_erase_at_endESt15_Deque_iteratorIhRhPhE>:
      }

      // Called by erase(q1, q2), resize(), clear(), _M_assign_aux,
      // _M_fill_assign, operator=.
      void
      _M_erase_at_end(iterator __pos)
 81026c4:	b590      	push	{r4, r7, lr}
 81026c6:	b08b      	sub	sp, #44	@ 0x2c
 81026c8:	af00      	add	r7, sp, #0
 81026ca:	6078      	str	r0, [r7, #4]
 81026cc:	6039      	str	r1, [r7, #0]
      {
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 81026ce:	f107 0308 	add.w	r3, r7, #8
 81026d2:	6839      	ldr	r1, [r7, #0]
 81026d4:	4618      	mov	r0, r3
 81026d6:	f7ff f816 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 81026da:	f107 0318 	add.w	r3, r7, #24
 81026de:	6879      	ldr	r1, [r7, #4]
 81026e0:	4618      	mov	r0, r3
 81026e2:	f7ff fe8a 	bl	81023fa <_ZNSt5dequeIhSaIhEE3endEv>
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	4618      	mov	r0, r3
 81026ea:	f7ff f801 	bl	81016f0 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 81026ee:	4603      	mov	r3, r0
 81026f0:	f107 0218 	add.w	r2, r7, #24
 81026f4:	f107 0108 	add.w	r1, r7, #8
 81026f8:	6878      	ldr	r0, [r7, #4]
 81026fa:	f7ff ff01 	bl	8102500 <_ZNSt5dequeIhSaIhEE15_M_destroy_dataESt15_Deque_iteratorIhRhPhES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 81026fe:	6878      	ldr	r0, [r7, #4]
 8102700:	683b      	ldr	r3, [r7, #0]
 8102702:	68db      	ldr	r3, [r3, #12]
 8102704:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 810270a:	3304      	adds	r3, #4
 810270c:	461a      	mov	r2, r3
 810270e:	f000 f80c 	bl	810272a <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_>
	this->_M_impl._M_finish = __pos;
 8102712:	687b      	ldr	r3, [r7, #4]
 8102714:	683a      	ldr	r2, [r7, #0]
 8102716:	f103 0418 	add.w	r4, r3, #24
 810271a:	4613      	mov	r3, r2
 810271c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810271e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8102722:	bf00      	nop
 8102724:	372c      	adds	r7, #44	@ 0x2c
 8102726:	46bd      	mov	sp, r7
 8102728:	bd90      	pop	{r4, r7, pc}

0810272a <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_>:
    _Deque_base<_Tp, _Alloc>::
 810272a:	b580      	push	{r7, lr}
 810272c:	b086      	sub	sp, #24
 810272e:	af00      	add	r7, sp, #0
 8102730:	60f8      	str	r0, [r7, #12]
 8102732:	60b9      	str	r1, [r7, #8]
 8102734:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8102736:	68bb      	ldr	r3, [r7, #8]
 8102738:	617b      	str	r3, [r7, #20]
 810273a:	e008      	b.n	810274e <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_+0x24>
	_M_deallocate_node(*__n);
 810273c:	697b      	ldr	r3, [r7, #20]
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	4619      	mov	r1, r3
 8102742:	68f8      	ldr	r0, [r7, #12]
 8102744:	f7ff f93b 	bl	81019be <_ZNSt11_Deque_baseIhSaIhEE18_M_deallocate_nodeEPh>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8102748:	697b      	ldr	r3, [r7, #20]
 810274a:	3304      	adds	r3, #4
 810274c:	617b      	str	r3, [r7, #20]
 810274e:	697a      	ldr	r2, [r7, #20]
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	429a      	cmp	r2, r3
 8102754:	d3f2      	bcc.n	810273c <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_+0x12>
    }
 8102756:	bf00      	nop
 8102758:	bf00      	nop
 810275a:	3718      	adds	r7, #24
 810275c:	46bd      	mov	sp, r7
 810275e:	bd80      	pop	{r7, pc}

08102760 <_ZNSt11_Deque_baseIhSaIhEE17_M_deallocate_mapEPPhj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8102760:	b580      	push	{r7, lr}
 8102762:	b088      	sub	sp, #32
 8102764:	af00      	add	r7, sp, #0
 8102766:	60f8      	str	r0, [r7, #12]
 8102768:	60b9      	str	r1, [r7, #8]
 810276a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 810276c:	f107 0314 	add.w	r3, r7, #20
 8102770:	68f9      	ldr	r1, [r7, #12]
 8102772:	4618      	mov	r0, r3
 8102774:	f7ff f93b 	bl	81019ee <_ZNKSt11_Deque_baseIhSaIhEE20_M_get_map_allocatorEv>
 8102778:	68bb      	ldr	r3, [r7, #8]
 810277a:	61fb      	str	r3, [r7, #28]
 810277c:	687b      	ldr	r3, [r7, #4]
 810277e:	61bb      	str	r3, [r7, #24]
      { __a.deallocate(__p, __n); }
 8102780:	f107 0314 	add.w	r3, r7, #20
 8102784:	69ba      	ldr	r2, [r7, #24]
 8102786:	69f9      	ldr	r1, [r7, #28]
 8102788:	4618      	mov	r0, r3
 810278a:	f000 f927 	bl	81029dc <_ZNSt15__new_allocatorIPhE10deallocateEPS0_j>
 810278e:	bf00      	nop
 8102790:	f107 0314 	add.w	r3, r7, #20
 8102794:	4618      	mov	r0, r3
 8102796:	f7ff f97d 	bl	8101a94 <_ZNSt15__new_allocatorIPhED1Ev>
      }
 810279a:	bf00      	nop
 810279c:	3720      	adds	r7, #32
 810279e:	46bd      	mov	sp, r7
 81027a0:	bd80      	pop	{r7, pc}

081027a2 <_ZNSt15__new_allocatorIhED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 81027a2:	b480      	push	{r7}
 81027a4:	b083      	sub	sp, #12
 81027a6:	af00      	add	r7, sp, #0
 81027a8:	6078      	str	r0, [r7, #4]
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	4618      	mov	r0, r3
 81027ae:	370c      	adds	r7, #12
 81027b0:	46bd      	mov	sp, r7
 81027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027b6:	4770      	bx	lr

081027b8 <_ZStmiRKSt15_Deque_iteratorIhRhPhES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 81027b8:	b580      	push	{r7, lr}
 81027ba:	b082      	sub	sp, #8
 81027bc:	af00      	add	r7, sp, #0
 81027be:	6078      	str	r0, [r7, #4]
 81027c0:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 81027c2:	f7ff f954 	bl	8101a6e <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 81027c6:	4603      	mov	r3, r0
 81027c8:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	68da      	ldr	r2, [r3, #12]
 81027ce:	683b      	ldr	r3, [r7, #0]
 81027d0:	68db      	ldr	r3, [r3, #12]
 81027d2:	1ad3      	subs	r3, r2, r3
 81027d4:	109b      	asrs	r3, r3, #2
 81027d6:	461a      	mov	r2, r3
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	68db      	ldr	r3, [r3, #12]
 81027dc:	2b00      	cmp	r3, #0
 81027de:	bf14      	ite	ne
 81027e0:	2301      	movne	r3, #1
 81027e2:	2300      	moveq	r3, #0
 81027e4:	b2db      	uxtb	r3, r3
 81027e6:	1ad3      	subs	r3, r2, r3
 81027e8:	fb03 f201 	mul.w	r2, r3, r1
	  + (__x._M_cur - __x._M_first)
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	6819      	ldr	r1, [r3, #0]
 81027f0:	687b      	ldr	r3, [r7, #4]
 81027f2:	685b      	ldr	r3, [r3, #4]
 81027f4:	1acb      	subs	r3, r1, r3
 81027f6:	441a      	add	r2, r3
	  + (__y._M_last - __y._M_cur);
 81027f8:	683b      	ldr	r3, [r7, #0]
 81027fa:	6899      	ldr	r1, [r3, #8]
 81027fc:	683b      	ldr	r3, [r7, #0]
 81027fe:	681b      	ldr	r3, [r3, #0]
 8102800:	1acb      	subs	r3, r1, r3
 8102802:	4413      	add	r3, r2
      }
 8102804:	4618      	mov	r0, r3
 8102806:	3708      	adds	r7, #8
 8102808:	46bd      	mov	sp, r7
 810280a:	bd80      	pop	{r7, pc}

0810280c <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1ERKS0_>:
	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 810280c:	b580      	push	{r7, lr}
 810280e:	b086      	sub	sp, #24
 8102810:	af00      	add	r7, sp, #0
 8102812:	6078      	str	r0, [r7, #4]
 8102814:	6039      	str	r1, [r7, #0]
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	617b      	str	r3, [r7, #20]
 810281a:	683b      	ldr	r3, [r7, #0]
 810281c:	613b      	str	r3, [r7, #16]
 810281e:	697b      	ldr	r3, [r7, #20]
 8102820:	60fb      	str	r3, [r7, #12]
 8102822:	693b      	ldr	r3, [r7, #16]
 8102824:	60bb      	str	r3, [r7, #8]
	: _Tp_alloc_type(__a)
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	4618      	mov	r0, r3
 810282a:	f7ff f847 	bl	81018bc <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1Ev>
	{ }
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	4618      	mov	r0, r3
 8102832:	3718      	adds	r7, #24
 8102834:	46bd      	mov	sp, r7
 8102836:	bd80      	pop	{r7, pc}

08102838 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1IS_IhRhPhEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8102838:	b480      	push	{r7}
 810283a:	b083      	sub	sp, #12
 810283c:	af00      	add	r7, sp, #0
 810283e:	6078      	str	r0, [r7, #4]
 8102840:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8102842:	683b      	ldr	r3, [r7, #0]
 8102844:	681a      	ldr	r2, [r3, #0]
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	601a      	str	r2, [r3, #0]
 810284a:	683b      	ldr	r3, [r7, #0]
 810284c:	685a      	ldr	r2, [r3, #4]
 810284e:	687b      	ldr	r3, [r7, #4]
 8102850:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8102852:	683b      	ldr	r3, [r7, #0]
 8102854:	689a      	ldr	r2, [r3, #8]
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	609a      	str	r2, [r3, #8]
 810285a:	683b      	ldr	r3, [r7, #0]
 810285c:	68da      	ldr	r2, [r3, #12]
 810285e:	687b      	ldr	r3, [r7, #4]
 8102860:	60da      	str	r2, [r3, #12]
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	4618      	mov	r0, r3
 8102866:	370c      	adds	r7, #12
 8102868:	46bd      	mov	sp, r7
 810286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810286e:	4770      	bx	lr

08102870 <_ZSt18uninitialized_copyISt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8102870:	b580      	push	{r7, lr}
 8102872:	b092      	sub	sp, #72	@ 0x48
 8102874:	af00      	add	r7, sp, #0
 8102876:	60f8      	str	r0, [r7, #12]
 8102878:	60b9      	str	r1, [r7, #8]
 810287a:	607a      	str	r2, [r7, #4]
 810287c:	603b      	str	r3, [r7, #0]
      const bool __can_memmove = __is_trivial(_ValueType1);
 810287e:	2301      	movs	r3, #1
 8102880:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      const bool __assignable
 8102884:	2301      	movs	r3, #1
 8102886:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	__uninit_copy(__first, __last, __result);
 810288a:	f107 0314 	add.w	r3, r7, #20
 810288e:	68b9      	ldr	r1, [r7, #8]
 8102890:	4618      	mov	r0, r3
 8102892:	f7ff fe86 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810289a:	6879      	ldr	r1, [r7, #4]
 810289c:	4618      	mov	r0, r3
 810289e:	f7ff fe80 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 81028a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 81028a6:	6839      	ldr	r1, [r7, #0]
 81028a8:	4618      	mov	r0, r3
 81028aa:	f7fe ff2c 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 81028ae:	68f8      	ldr	r0, [r7, #12]
 81028b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 81028b4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 81028b8:	f107 0114 	add.w	r1, r7, #20
 81028bc:	f000 f835 	bl	810292a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIhRKhPS3_ES2_IhRhPhEEET0_T_SB_SA_>
    }
 81028c0:	68f8      	ldr	r0, [r7, #12]
 81028c2:	3748      	adds	r7, #72	@ 0x48
 81028c4:	46bd      	mov	sp, r7
 81028c6:	bd80      	pop	{r7, pc}

081028c8 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 81028c8:	b480      	push	{r7}
 81028ca:	b083      	sub	sp, #12
 81028cc:	af00      	add	r7, sp, #0
 81028ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81028d0:	687b      	ldr	r3, [r7, #4]
 81028d2:	4618      	mov	r0, r3
 81028d4:	370c      	adds	r7, #12
 81028d6:	46bd      	mov	sp, r7
 81028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028dc:	4770      	bx	lr

081028de <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1EOS0_>:
	_Deque_impl(_Tp_alloc_type&& __a) noexcept
 81028de:	b580      	push	{r7, lr}
 81028e0:	b086      	sub	sp, #24
 81028e2:	af00      	add	r7, sp, #0
 81028e4:	6078      	str	r0, [r7, #4]
 81028e6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__a))
 81028e8:	6838      	ldr	r0, [r7, #0]
 81028ea:	f7ff ffed 	bl	81028c8 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 81028ee:	4602      	mov	r2, r0
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	617b      	str	r3, [r7, #20]
 81028f4:	613a      	str	r2, [r7, #16]
 81028f6:	697b      	ldr	r3, [r7, #20]
 81028f8:	60fb      	str	r3, [r7, #12]
 81028fa:	693b      	ldr	r3, [r7, #16]
 81028fc:	60bb      	str	r3, [r7, #8]
 81028fe:	687b      	ldr	r3, [r7, #4]
 8102900:	4618      	mov	r0, r3
 8102902:	f7fe ffdb 	bl	81018bc <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1Ev>
	{ }
 8102906:	687b      	ldr	r3, [r7, #4]
 8102908:	4618      	mov	r0, r3
 810290a:	3718      	adds	r7, #24
 810290c:	46bd      	mov	sp, r7
 810290e:	bd80      	pop	{r7, pc}

08102910 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8102910:	b580      	push	{r7, lr}
 8102912:	b082      	sub	sp, #8
 8102914:	af00      	add	r7, sp, #0
 8102916:	6078      	str	r0, [r7, #4]
 8102918:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 810291a:	6839      	ldr	r1, [r7, #0]
 810291c:	6878      	ldr	r0, [r7, #4]
 810291e:	f000 f82a 	bl	8102976 <_ZSt4swapINSt11_Deque_baseIhSaIhEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 8102922:	bf00      	nop
 8102924:	3708      	adds	r7, #8
 8102926:	46bd      	mov	sp, r7
 8102928:	bd80      	pop	{r7, pc}

0810292a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIhRKhPS3_ES2_IhRhPhEEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 810292a:	b580      	push	{r7, lr}
 810292c:	b090      	sub	sp, #64	@ 0x40
 810292e:	af00      	add	r7, sp, #0
 8102930:	60f8      	str	r0, [r7, #12]
 8102932:	60b9      	str	r1, [r7, #8]
 8102934:	607a      	str	r2, [r7, #4]
 8102936:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8102938:	f107 0310 	add.w	r3, r7, #16
 810293c:	68b9      	ldr	r1, [r7, #8]
 810293e:	4618      	mov	r0, r3
 8102940:	f7ff fe2f 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102944:	f107 0320 	add.w	r3, r7, #32
 8102948:	6879      	ldr	r1, [r7, #4]
 810294a:	4618      	mov	r0, r3
 810294c:	f7ff fe29 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102950:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102954:	6839      	ldr	r1, [r7, #0]
 8102956:	4618      	mov	r0, r3
 8102958:	f7fe fed5 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 810295c:	68f8      	ldr	r0, [r7, #12]
 810295e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102962:	f107 0220 	add.w	r2, r7, #32
 8102966:	f107 0110 	add.w	r1, r7, #16
 810296a:	f000 f847 	bl	81029fc <_ZSt4copyISt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEET0_T_S9_S8_>
 810296e:	68f8      	ldr	r0, [r7, #12]
 8102970:	3740      	adds	r7, #64	@ 0x40
 8102972:	46bd      	mov	sp, r7
 8102974:	bd80      	pop	{r7, pc}

08102976 <_ZSt4swapINSt11_Deque_baseIhSaIhEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8102976:	b5b0      	push	{r4, r5, r7, lr}
 8102978:	b08c      	sub	sp, #48	@ 0x30
 810297a:	af00      	add	r7, sp, #0
 810297c:	6078      	str	r0, [r7, #4]
 810297e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8102980:	6878      	ldr	r0, [r7, #4]
 8102982:	f000 f871 	bl	8102a68 <_ZSt4moveIRNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8102986:	4602      	mov	r2, r0
 8102988:	f107 0308 	add.w	r3, r7, #8
 810298c:	4611      	mov	r1, r2
 810298e:	4618      	mov	r0, r3
 8102990:	f000 f899 	bl	8102ac6 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 8102994:	6838      	ldr	r0, [r7, #0]
 8102996:	f000 f867 	bl	8102a68 <_ZSt4moveIRNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 810299a:	4602      	mov	r2, r0
 810299c:	687b      	ldr	r3, [r7, #4]
 810299e:	461c      	mov	r4, r3
 81029a0:	4615      	mov	r5, r2
 81029a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81029a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81029a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81029a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81029aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 81029ae:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 81029b2:	f107 0308 	add.w	r3, r7, #8
 81029b6:	4618      	mov	r0, r3
 81029b8:	f000 f856 	bl	8102a68 <_ZSt4moveIRNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 81029bc:	4602      	mov	r2, r0
 81029be:	683b      	ldr	r3, [r7, #0]
 81029c0:	461c      	mov	r4, r3
 81029c2:	4615      	mov	r5, r2
 81029c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81029c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81029c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81029ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81029cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 81029d0:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 81029d4:	bf00      	nop
 81029d6:	3730      	adds	r7, #48	@ 0x30
 81029d8:	46bd      	mov	sp, r7
 81029da:	bdb0      	pop	{r4, r5, r7, pc}

081029dc <_ZNSt15__new_allocatorIPhE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 81029dc:	b580      	push	{r7, lr}
 81029de:	b084      	sub	sp, #16
 81029e0:	af00      	add	r7, sp, #0
 81029e2:	60f8      	str	r0, [r7, #12]
 81029e4:	60b9      	str	r1, [r7, #8]
 81029e6:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	009b      	lsls	r3, r3, #2
 81029ec:	4619      	mov	r1, r3
 81029ee:	68b8      	ldr	r0, [r7, #8]
 81029f0:	f00b fdf0 	bl	810e5d4 <_ZdlPvj>
      }
 81029f4:	bf00      	nop
 81029f6:	3710      	adds	r7, #16
 81029f8:	46bd      	mov	sp, r7
 81029fa:	bd80      	pop	{r7, pc}

081029fc <_ZSt4copyISt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 81029fc:	b580      	push	{r7, lr}
 81029fe:	b098      	sub	sp, #96	@ 0x60
 8102a00:	af00      	add	r7, sp, #0
 8102a02:	60f8      	str	r0, [r7, #12]
 8102a04:	60b9      	str	r1, [r7, #8]
 8102a06:	607a      	str	r2, [r7, #4]
 8102a08:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8102a0a:	f107 0320 	add.w	r3, r7, #32
 8102a0e:	68b9      	ldr	r1, [r7, #8]
 8102a10:	4618      	mov	r0, r3
 8102a12:	f7ff fdc6 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102a16:	f107 0310 	add.w	r3, r7, #16
 8102a1a:	f107 0220 	add.w	r2, r7, #32
 8102a1e:	4611      	mov	r1, r2
 8102a20:	4618      	mov	r0, r3
 8102a22:	f000 f870 	bl	8102b06 <_ZSt12__miter_baseISt15_Deque_iteratorIhRKhPS1_EET_S5_>
 8102a26:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8102a2a:	6879      	ldr	r1, [r7, #4]
 8102a2c:	4618      	mov	r0, r3
 8102a2e:	f7ff fdb8 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102a32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102a36:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8102a3a:	4611      	mov	r1, r2
 8102a3c:	4618      	mov	r0, r3
 8102a3e:	f000 f862 	bl	8102b06 <_ZSt12__miter_baseISt15_Deque_iteratorIhRKhPS1_EET_S5_>
 8102a42:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8102a46:	6839      	ldr	r1, [r7, #0]
 8102a48:	4618      	mov	r0, r3
 8102a4a:	f7fe fe5c 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102a4e:	68f8      	ldr	r0, [r7, #12]
 8102a50:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8102a54:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8102a58:	f107 0110 	add.w	r1, r7, #16
 8102a5c:	f000 f860 	bl	8102b20 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEET1_T0_S9_S8_>
    }
 8102a60:	68f8      	ldr	r0, [r7, #12]
 8102a62:	3760      	adds	r7, #96	@ 0x60
 8102a64:	46bd      	mov	sp, r7
 8102a66:	bd80      	pop	{r7, pc}

08102a68 <_ZSt4moveIRNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8102a68:	b480      	push	{r7}
 8102a6a:	b083      	sub	sp, #12
 8102a6c:	af00      	add	r7, sp, #0
 8102a6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8102a70:	687b      	ldr	r3, [r7, #4]
 8102a72:	4618      	mov	r0, r3
 8102a74:	370c      	adds	r7, #12
 8102a76:	46bd      	mov	sp, r7
 8102a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a7c:	4770      	bx	lr

08102a7e <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8102a7e:	b580      	push	{r7, lr}
 8102a80:	b082      	sub	sp, #8
 8102a82:	af00      	add	r7, sp, #0
 8102a84:	6078      	str	r0, [r7, #4]
 8102a86:	6039      	str	r1, [r7, #0]
 8102a88:	683b      	ldr	r3, [r7, #0]
 8102a8a:	681a      	ldr	r2, [r3, #0]
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	601a      	str	r2, [r3, #0]
 8102a90:	683b      	ldr	r3, [r7, #0]
 8102a92:	685a      	ldr	r2, [r3, #4]
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	605a      	str	r2, [r3, #4]
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	f103 0208 	add.w	r2, r3, #8
 8102a9e:	683b      	ldr	r3, [r7, #0]
 8102aa0:	3308      	adds	r3, #8
 8102aa2:	4619      	mov	r1, r3
 8102aa4:	4610      	mov	r0, r2
 8102aa6:	f7fe fe2e 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102aaa:	687b      	ldr	r3, [r7, #4]
 8102aac:	f103 0218 	add.w	r2, r3, #24
 8102ab0:	683b      	ldr	r3, [r7, #0]
 8102ab2:	3318      	adds	r3, #24
 8102ab4:	4619      	mov	r1, r3
 8102ab6:	4610      	mov	r0, r2
 8102ab8:	f7fe fe25 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102abc:	687b      	ldr	r3, [r7, #4]
 8102abe:	4618      	mov	r0, r3
 8102ac0:	3708      	adds	r7, #8
 8102ac2:	46bd      	mov	sp, r7
 8102ac4:	bd80      	pop	{r7, pc}

08102ac6 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8102ac6:	b5b0      	push	{r4, r5, r7, lr}
 8102ac8:	b08c      	sub	sp, #48	@ 0x30
 8102aca:	af00      	add	r7, sp, #0
 8102acc:	6078      	str	r0, [r7, #4]
 8102ace:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8102ad0:	6839      	ldr	r1, [r7, #0]
 8102ad2:	6878      	ldr	r0, [r7, #4]
 8102ad4:	f7ff ffd3 	bl	8102a7e <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 8102ad8:	f107 0308 	add.w	r3, r7, #8
 8102adc:	4618      	mov	r0, r3
 8102ade:	f7fe feed 	bl	81018bc <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1Ev>
 8102ae2:	f107 0308 	add.w	r3, r7, #8
 8102ae6:	683a      	ldr	r2, [r7, #0]
 8102ae8:	4614      	mov	r4, r2
 8102aea:	461d      	mov	r5, r3
 8102aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102af4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8102af8:	e884 0003 	stmia.w	r4, {r0, r1}
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	4618      	mov	r0, r3
 8102b00:	3730      	adds	r7, #48	@ 0x30
 8102b02:	46bd      	mov	sp, r7
 8102b04:	bdb0      	pop	{r4, r5, r7, pc}

08102b06 <_ZSt12__miter_baseISt15_Deque_iteratorIhRKhPS1_EET_S5_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8102b06:	b580      	push	{r7, lr}
 8102b08:	b082      	sub	sp, #8
 8102b0a:	af00      	add	r7, sp, #0
 8102b0c:	6078      	str	r0, [r7, #4]
 8102b0e:	6039      	str	r1, [r7, #0]
    { return __it; }
 8102b10:	6839      	ldr	r1, [r7, #0]
 8102b12:	6878      	ldr	r0, [r7, #4]
 8102b14:	f7ff fd45 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102b18:	6878      	ldr	r0, [r7, #4]
 8102b1a:	3708      	adds	r7, #8
 8102b1c:	46bd      	mov	sp, r7
 8102b1e:	bd80      	pop	{r7, pc}

08102b20 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8102b20:	b580      	push	{r7, lr}
 8102b22:	b0a0      	sub	sp, #128	@ 0x80
 8102b24:	af00      	add	r7, sp, #0
 8102b26:	60f8      	str	r0, [r7, #12]
 8102b28:	60b9      	str	r1, [r7, #8]
 8102b2a:	607a      	str	r2, [r7, #4]
 8102b2c:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8102b2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102b32:	68b9      	ldr	r1, [r7, #8]
 8102b34:	4618      	mov	r0, r3
 8102b36:	f7ff fd34 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102b3a:	f107 0320 	add.w	r3, r7, #32
 8102b3e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8102b42:	4611      	mov	r1, r2
 8102b44:	4618      	mov	r0, r3
 8102b46:	f000 f831 	bl	8102bac <_ZSt12__niter_baseISt15_Deque_iteratorIhRKhPS1_EET_S5_>
 8102b4a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8102b4e:	6879      	ldr	r1, [r7, #4]
 8102b50:	4618      	mov	r0, r3
 8102b52:	f7ff fd26 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102b56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8102b5a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8102b5e:	4611      	mov	r1, r2
 8102b60:	4618      	mov	r0, r3
 8102b62:	f000 f823 	bl	8102bac <_ZSt12__niter_baseISt15_Deque_iteratorIhRKhPS1_EET_S5_>
 8102b66:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8102b6a:	6839      	ldr	r1, [r7, #0]
 8102b6c:	4618      	mov	r0, r3
 8102b6e:	f7fe fdca 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102b72:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8102b76:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8102b7a:	4611      	mov	r1, r2
 8102b7c:	4618      	mov	r0, r3
 8102b7e:	f000 f822 	bl	8102bc6 <_ZSt12__niter_baseISt15_Deque_iteratorIhRhPhEET_S4_>
 8102b82:	f107 0010 	add.w	r0, r7, #16
 8102b86:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8102b8a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8102b8e:	f107 0120 	add.w	r1, r7, #32
 8102b92:	f000 f825 	bl	8102be0 <_ZSt14__copy_move_a1ILb0EhRKhPS0_hESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 8102b96:	68fb      	ldr	r3, [r7, #12]
 8102b98:	f107 0210 	add.w	r2, r7, #16
 8102b9c:	6839      	ldr	r1, [r7, #0]
 8102b9e:	4618      	mov	r0, r3
 8102ba0:	f000 f844 	bl	8102c2c <_ZSt12__niter_wrapISt15_Deque_iteratorIhRhPhEET_RKS4_S4_>
    }
 8102ba4:	68f8      	ldr	r0, [r7, #12]
 8102ba6:	3780      	adds	r7, #128	@ 0x80
 8102ba8:	46bd      	mov	sp, r7
 8102baa:	bd80      	pop	{r7, pc}

08102bac <_ZSt12__niter_baseISt15_Deque_iteratorIhRKhPS1_EET_S5_>:
    __niter_base(_Iterator __it)
 8102bac:	b580      	push	{r7, lr}
 8102bae:	b082      	sub	sp, #8
 8102bb0:	af00      	add	r7, sp, #0
 8102bb2:	6078      	str	r0, [r7, #4]
 8102bb4:	6039      	str	r1, [r7, #0]
    { return __it; }
 8102bb6:	6839      	ldr	r1, [r7, #0]
 8102bb8:	6878      	ldr	r0, [r7, #4]
 8102bba:	f7ff fcf2 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102bbe:	6878      	ldr	r0, [r7, #4]
 8102bc0:	3708      	adds	r7, #8
 8102bc2:	46bd      	mov	sp, r7
 8102bc4:	bd80      	pop	{r7, pc}

08102bc6 <_ZSt12__niter_baseISt15_Deque_iteratorIhRhPhEET_S4_>:
    __niter_base(_Iterator __it)
 8102bc6:	b580      	push	{r7, lr}
 8102bc8:	b082      	sub	sp, #8
 8102bca:	af00      	add	r7, sp, #0
 8102bcc:	6078      	str	r0, [r7, #4]
 8102bce:	6039      	str	r1, [r7, #0]
    { return __it; }
 8102bd0:	6839      	ldr	r1, [r7, #0]
 8102bd2:	6878      	ldr	r0, [r7, #4]
 8102bd4:	f7fe fd97 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102bd8:	6878      	ldr	r0, [r7, #4]
 8102bda:	3708      	adds	r7, #8
 8102bdc:	46bd      	mov	sp, r7
 8102bde:	bd80      	pop	{r7, pc}

08102be0 <_ZSt14__copy_move_a1ILb0EhRKhPS0_hESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8102be0:	b580      	push	{r7, lr}
 8102be2:	b090      	sub	sp, #64	@ 0x40
 8102be4:	af00      	add	r7, sp, #0
 8102be6:	60f8      	str	r0, [r7, #12]
 8102be8:	60b9      	str	r1, [r7, #8]
 8102bea:	607a      	str	r2, [r7, #4]
 8102bec:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8102bee:	f107 0310 	add.w	r3, r7, #16
 8102bf2:	68b9      	ldr	r1, [r7, #8]
 8102bf4:	4618      	mov	r0, r3
 8102bf6:	f7ff fcd4 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102bfa:	f107 0320 	add.w	r3, r7, #32
 8102bfe:	6879      	ldr	r1, [r7, #4]
 8102c00:	4618      	mov	r0, r3
 8102c02:	f7ff fcce 	bl	81025a2 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102c06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102c0a:	6839      	ldr	r1, [r7, #0]
 8102c0c:	4618      	mov	r0, r3
 8102c0e:	f7fe fd7a 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102c12:	68f8      	ldr	r0, [r7, #12]
 8102c14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102c18:	f107 0220 	add.w	r2, r7, #32
 8102c1c:	f107 0110 	add.w	r1, r7, #16
 8102c20:	f000 f812 	bl	8102c48 <_ZSt15__copy_move_ditILb0EhRKhPS0_St15_Deque_iteratorIhRhPhEET3_S3_IT0_T1_T2_ESB_S7_>
 8102c24:	68f8      	ldr	r0, [r7, #12]
 8102c26:	3740      	adds	r7, #64	@ 0x40
 8102c28:	46bd      	mov	sp, r7
 8102c2a:	bd80      	pop	{r7, pc}

08102c2c <_ZSt12__niter_wrapISt15_Deque_iteratorIhRhPhEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8102c2c:	b580      	push	{r7, lr}
 8102c2e:	b084      	sub	sp, #16
 8102c30:	af00      	add	r7, sp, #0
 8102c32:	60f8      	str	r0, [r7, #12]
 8102c34:	60b9      	str	r1, [r7, #8]
 8102c36:	607a      	str	r2, [r7, #4]
    { return __res; }
 8102c38:	6879      	ldr	r1, [r7, #4]
 8102c3a:	68f8      	ldr	r0, [r7, #12]
 8102c3c:	f7fe fd63 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102c40:	68f8      	ldr	r0, [r7, #12]
 8102c42:	3710      	adds	r7, #16
 8102c44:	46bd      	mov	sp, r7
 8102c46:	bd80      	pop	{r7, pc}

08102c48 <_ZSt15__copy_move_ditILb0EhRKhPS0_St15_Deque_iteratorIhRhPhEET3_S3_IT0_T1_T2_ESB_S7_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 8102c48:	b5b0      	push	{r4, r5, r7, lr}
 8102c4a:	b09e      	sub	sp, #120	@ 0x78
 8102c4c:	af00      	add	r7, sp, #0
 8102c4e:	60f8      	str	r0, [r7, #12]
 8102c50:	60b9      	str	r1, [r7, #8]
 8102c52:	607a      	str	r2, [r7, #4]
 8102c54:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8102c56:	68bb      	ldr	r3, [r7, #8]
 8102c58:	68da      	ldr	r2, [r3, #12]
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	68db      	ldr	r3, [r3, #12]
 8102c5e:	429a      	cmp	r2, r3
 8102c60:	d054      	beq.n	8102d0c <_ZSt15__copy_move_ditILb0EhRKhPS0_St15_Deque_iteratorIhRhPhEET3_S3_IT0_T1_T2_ESB_S7_+0xc4>
	  __result
 8102c62:	68bb      	ldr	r3, [r7, #8]
 8102c64:	681c      	ldr	r4, [r3, #0]
 8102c66:	68bb      	ldr	r3, [r7, #8]
 8102c68:	689d      	ldr	r5, [r3, #8]
 8102c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102c6e:	6839      	ldr	r1, [r7, #0]
 8102c70:	4618      	mov	r0, r3
 8102c72:	f7fe fd48 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102c76:	f107 0014 	add.w	r0, r7, #20
 8102c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102c7e:	462a      	mov	r2, r5
 8102c80:	4621      	mov	r1, r4
 8102c82:	f000 f86c 	bl	8102d5e <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
 8102c86:	f107 0314 	add.w	r3, r7, #20
 8102c8a:	683a      	ldr	r2, [r7, #0]
 8102c8c:	4614      	mov	r4, r2
 8102c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8102c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8102c94:	68bb      	ldr	r3, [r7, #8]
 8102c96:	68db      	ldr	r3, [r3, #12]
 8102c98:	3304      	adds	r3, #4
 8102c9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8102c9c:	e01f      	b.n	8102cde <_ZSt15__copy_move_ditILb0EhRKhPS0_St15_Deque_iteratorIhRhPhEET3_S3_IT0_T1_T2_ESB_S7_+0x96>
	    __result
 8102c9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8102ca0:	681d      	ldr	r5, [r3, #0]
 8102ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8102ca4:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 8102ca6:	f000 f897 	bl	8102dd8 <_ZNSt15_Deque_iteratorIhRKhPS0_E14_S_buffer_sizeEv>
 8102caa:	4603      	mov	r3, r0
	    __result
 8102cac:	441c      	add	r4, r3
 8102cae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8102cb2:	6839      	ldr	r1, [r7, #0]
 8102cb4:	4618      	mov	r0, r3
 8102cb6:	f7fe fd26 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102cba:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8102cbe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8102cc2:	4622      	mov	r2, r4
 8102cc4:	4629      	mov	r1, r5
 8102cc6:	f000 f84a 	bl	8102d5e <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
 8102cca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8102cce:	683a      	ldr	r2, [r7, #0]
 8102cd0:	4614      	mov	r4, r2
 8102cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8102cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8102cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8102cda:	3304      	adds	r3, #4
 8102cdc:	677b      	str	r3, [r7, #116]	@ 0x74
	       __node != __last._M_node; ++__node)
 8102cde:	687b      	ldr	r3, [r7, #4]
 8102ce0:	68db      	ldr	r3, [r3, #12]
 8102ce2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8102ce4:	429a      	cmp	r2, r3
 8102ce6:	d1da      	bne.n	8102c9e <_ZSt15__copy_move_ditILb0EhRKhPS0_St15_Deque_iteratorIhRhPhEET3_S3_IT0_T1_T2_ESB_S7_+0x56>
					      __result);
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	685c      	ldr	r4, [r3, #4]
 8102cec:	687b      	ldr	r3, [r7, #4]
 8102cee:	681d      	ldr	r5, [r3, #0]
 8102cf0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8102cf4:	6839      	ldr	r1, [r7, #0]
 8102cf6:	4618      	mov	r0, r3
 8102cf8:	f7fe fd05 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102cfc:	68f8      	ldr	r0, [r7, #12]
 8102cfe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8102d02:	462a      	mov	r2, r5
 8102d04:	4621      	mov	r1, r4
 8102d06:	f000 f82a 	bl	8102d5e <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
 8102d0a:	e010      	b.n	8102d2e <_ZSt15__copy_move_ditILb0EhRKhPS0_St15_Deque_iteratorIhRhPhEET3_S3_IT0_T1_T2_ESB_S7_+0xe6>
					  __result);
 8102d0c:	68bb      	ldr	r3, [r7, #8]
 8102d0e:	681c      	ldr	r4, [r3, #0]
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	681d      	ldr	r5, [r3, #0]
 8102d14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8102d18:	6839      	ldr	r1, [r7, #0]
 8102d1a:	4618      	mov	r0, r3
 8102d1c:	f7fe fcf3 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102d20:	68f8      	ldr	r0, [r7, #12]
 8102d22:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8102d26:	462a      	mov	r2, r5
 8102d28:	4621      	mov	r1, r4
 8102d2a:	f000 f818 	bl	8102d5e <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
    }
 8102d2e:	68f8      	ldr	r0, [r7, #12]
 8102d30:	3778      	adds	r7, #120	@ 0x78
 8102d32:	46bd      	mov	sp, r7
 8102d34:	bdb0      	pop	{r4, r5, r7, pc}

08102d36 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8102d36:	b480      	push	{r7}
 8102d38:	b083      	sub	sp, #12
 8102d3a:	af00      	add	r7, sp, #0
 8102d3c:	6078      	str	r0, [r7, #4]
 8102d3e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8102d40:	683b      	ldr	r3, [r7, #0]
 8102d42:	681a      	ldr	r2, [r3, #0]
 8102d44:	687b      	ldr	r3, [r7, #4]
 8102d46:	681b      	ldr	r3, [r3, #0]
 8102d48:	429a      	cmp	r2, r3
 8102d4a:	da01      	bge.n	8102d50 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8102d4c:	683b      	ldr	r3, [r7, #0]
 8102d4e:	e000      	b.n	8102d52 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8102d50:	687b      	ldr	r3, [r7, #4]
    }
 8102d52:	4618      	mov	r0, r3
 8102d54:	370c      	adds	r7, #12
 8102d56:	46bd      	mov	sp, r7
 8102d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d5c:	4770      	bx	lr

08102d5e <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8102d5e:	b580      	push	{r7, lr}
 8102d60:	b088      	sub	sp, #32
 8102d62:	af00      	add	r7, sp, #0
 8102d64:	60f8      	str	r0, [r7, #12]
 8102d66:	60b9      	str	r1, [r7, #8]
 8102d68:	607a      	str	r2, [r7, #4]
 8102d6a:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8102d6c:	687a      	ldr	r2, [r7, #4]
 8102d6e:	68bb      	ldr	r3, [r7, #8]
 8102d70:	1ad3      	subs	r3, r2, r3
 8102d72:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8102d74:	e025      	b.n	8102dc2 <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_+0x64>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 8102d76:	683b      	ldr	r3, [r7, #0]
 8102d78:	689a      	ldr	r2, [r3, #8]
 8102d7a:	683b      	ldr	r3, [r7, #0]
 8102d7c:	681b      	ldr	r3, [r3, #0]
 8102d7e:	1ad3      	subs	r3, r2, r3
 8102d80:	61bb      	str	r3, [r7, #24]
 8102d82:	f107 0218 	add.w	r2, r7, #24
 8102d86:	f107 0314 	add.w	r3, r7, #20
 8102d8a:	4611      	mov	r1, r2
 8102d8c:	4618      	mov	r0, r3
 8102d8e:	f7ff ffd2 	bl	8102d36 <_ZSt3minIiERKT_S2_S2_>
 8102d92:	4603      	mov	r3, r0
	  const difference_type __clen
 8102d94:	681b      	ldr	r3, [r3, #0]
 8102d96:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8102d98:	69fb      	ldr	r3, [r7, #28]
 8102d9a:	68ba      	ldr	r2, [r7, #8]
 8102d9c:	18d1      	adds	r1, r2, r3
 8102d9e:	683b      	ldr	r3, [r7, #0]
 8102da0:	681b      	ldr	r3, [r3, #0]
 8102da2:	461a      	mov	r2, r3
 8102da4:	68b8      	ldr	r0, [r7, #8]
 8102da6:	f000 f81f 	bl	8102de8 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
				       __result._M_cur);

	  __first += __clen;
 8102daa:	69fb      	ldr	r3, [r7, #28]
 8102dac:	68ba      	ldr	r2, [r7, #8]
 8102dae:	4413      	add	r3, r2
 8102db0:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8102db2:	69f9      	ldr	r1, [r7, #28]
 8102db4:	6838      	ldr	r0, [r7, #0]
 8102db6:	f000 f827 	bl	8102e08 <_ZNSt15_Deque_iteratorIhRhPhEpLEi>
	  __len -= __clen;
 8102dba:	697a      	ldr	r2, [r7, #20]
 8102dbc:	69fb      	ldr	r3, [r7, #28]
 8102dbe:	1ad3      	subs	r3, r2, r3
 8102dc0:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8102dc2:	697b      	ldr	r3, [r7, #20]
 8102dc4:	2b00      	cmp	r3, #0
 8102dc6:	dcd6      	bgt.n	8102d76 <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_+0x18>
	}

      return __result;
 8102dc8:	6839      	ldr	r1, [r7, #0]
 8102dca:	68f8      	ldr	r0, [r7, #12]
 8102dcc:	f7fe fc9b 	bl	8101706 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
    }
 8102dd0:	68f8      	ldr	r0, [r7, #12]
 8102dd2:	3720      	adds	r7, #32
 8102dd4:	46bd      	mov	sp, r7
 8102dd6:	bd80      	pop	{r7, pc}

08102dd8 <_ZNSt15_Deque_iteratorIhRKhPS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8102dd8:	b580      	push	{r7, lr}
 8102dda:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8102ddc:	2001      	movs	r0, #1
 8102dde:	f7fe f931 	bl	8101044 <_ZSt16__deque_buf_sizej>
 8102de2:	4603      	mov	r3, r0
 8102de4:	4618      	mov	r0, r3
 8102de6:	bd80      	pop	{r7, pc}

08102de8 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8102de8:	b580      	push	{r7, lr}
 8102dea:	b084      	sub	sp, #16
 8102dec:	af00      	add	r7, sp, #0
 8102dee:	60f8      	str	r0, [r7, #12]
 8102df0:	60b9      	str	r1, [r7, #8]
 8102df2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8102df4:	687a      	ldr	r2, [r7, #4]
 8102df6:	68b9      	ldr	r1, [r7, #8]
 8102df8:	68f8      	ldr	r0, [r7, #12]
 8102dfa:	f000 f858 	bl	8102eae <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8102dfe:	4603      	mov	r3, r0
 8102e00:	4618      	mov	r0, r3
 8102e02:	3710      	adds	r7, #16
 8102e04:	46bd      	mov	sp, r7
 8102e06:	bd80      	pop	{r7, pc}

08102e08 <_ZNSt15_Deque_iteratorIhRhPhEpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8102e08:	b590      	push	{r4, r7, lr}
 8102e0a:	b085      	sub	sp, #20
 8102e0c:	af00      	add	r7, sp, #0
 8102e0e:	6078      	str	r0, [r7, #4]
 8102e10:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	681a      	ldr	r2, [r3, #0]
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	685b      	ldr	r3, [r3, #4]
 8102e1a:	1ad3      	subs	r3, r2, r3
 8102e1c:	683a      	ldr	r2, [r7, #0]
 8102e1e:	4413      	add	r3, r2
 8102e20:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8102e22:	68fb      	ldr	r3, [r7, #12]
 8102e24:	2b00      	cmp	r3, #0
 8102e26:	db08      	blt.n	8102e3a <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x32>
 8102e28:	f7fe fe21 	bl	8101a6e <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 8102e2c:	4603      	mov	r3, r0
 8102e2e:	461a      	mov	r2, r3
 8102e30:	68fb      	ldr	r3, [r7, #12]
 8102e32:	4293      	cmp	r3, r2
 8102e34:	da01      	bge.n	8102e3a <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x32>
 8102e36:	2301      	movs	r3, #1
 8102e38:	e000      	b.n	8102e3c <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x34>
 8102e3a:	2300      	movs	r3, #0
 8102e3c:	2b00      	cmp	r3, #0
 8102e3e:	d006      	beq.n	8102e4e <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x46>
	  _M_cur += __n;
 8102e40:	687b      	ldr	r3, [r7, #4]
 8102e42:	681a      	ldr	r2, [r3, #0]
 8102e44:	683b      	ldr	r3, [r7, #0]
 8102e46:	441a      	add	r2, r3
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	601a      	str	r2, [r3, #0]
 8102e4c:	e02a      	b.n	8102ea4 <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x9c>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8102e4e:	68fb      	ldr	r3, [r7, #12]
 8102e50:	2b00      	cmp	r3, #0
 8102e52:	dd07      	ble.n	8102e64 <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x5c>
 8102e54:	f7fe fe0b 	bl	8101a6e <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 8102e58:	4603      	mov	r3, r0
 8102e5a:	461a      	mov	r2, r3
 8102e5c:	68fb      	ldr	r3, [r7, #12]
 8102e5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8102e62:	e007      	b.n	8102e74 <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x6c>
			   : -difference_type((-__offset - 1)
 8102e64:	68fb      	ldr	r3, [r7, #12]
 8102e66:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8102e68:	f7fe fe01 	bl	8101a6e <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 8102e6c:	4603      	mov	r3, r0
 8102e6e:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8102e72:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8102e74:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	68da      	ldr	r2, [r3, #12]
 8102e7a:	68bb      	ldr	r3, [r7, #8]
 8102e7c:	009b      	lsls	r3, r3, #2
 8102e7e:	4413      	add	r3, r2
 8102e80:	4619      	mov	r1, r3
 8102e82:	6878      	ldr	r0, [r7, #4]
 8102e84:	f7fe fd83 	bl	810198e <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
	    _M_cur = _M_first + (__offset - __node_offset
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8102e8c:	f7fe fdef 	bl	8101a6e <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 8102e90:	4603      	mov	r3, r0
 8102e92:	461a      	mov	r2, r3
 8102e94:	68bb      	ldr	r3, [r7, #8]
 8102e96:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8102e9a:	68fa      	ldr	r2, [r7, #12]
 8102e9c:	1ad3      	subs	r3, r2, r3
 8102e9e:	18e2      	adds	r2, r4, r3
 8102ea0:	687b      	ldr	r3, [r7, #4]
 8102ea2:	601a      	str	r2, [r3, #0]
	return *this;
 8102ea4:	687b      	ldr	r3, [r7, #4]
      }
 8102ea6:	4618      	mov	r0, r3
 8102ea8:	3714      	adds	r7, #20
 8102eaa:	46bd      	mov	sp, r7
 8102eac:	bd90      	pop	{r4, r7, pc}

08102eae <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8102eae:	b580      	push	{r7, lr}
 8102eb0:	b084      	sub	sp, #16
 8102eb2:	af00      	add	r7, sp, #0
 8102eb4:	60f8      	str	r0, [r7, #12]
 8102eb6:	60b9      	str	r1, [r7, #8]
 8102eb8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8102eba:	687a      	ldr	r2, [r7, #4]
 8102ebc:	68b9      	ldr	r1, [r7, #8]
 8102ebe:	68f8      	ldr	r0, [r7, #12]
 8102ec0:	f000 f805 	bl	8102ece <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_>
 8102ec4:	4603      	mov	r3, r0
    }
 8102ec6:	4618      	mov	r0, r3
 8102ec8:	3710      	adds	r7, #16
 8102eca:	46bd      	mov	sp, r7
 8102ecc:	bd80      	pop	{r7, pc}

08102ece <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_>:
	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
 8102ece:	b580      	push	{r7, lr}
 8102ed0:	b086      	sub	sp, #24
 8102ed2:	af00      	add	r7, sp, #0
 8102ed4:	60f8      	str	r0, [r7, #12]
 8102ed6:	60b9      	str	r1, [r7, #8]
 8102ed8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8102eda:	68ba      	ldr	r2, [r7, #8]
 8102edc:	68fb      	ldr	r3, [r7, #12]
 8102ede:	1ad3      	subs	r3, r2, r3
 8102ee0:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 8102ee2:	697b      	ldr	r3, [r7, #20]
 8102ee4:	2b01      	cmp	r3, #1
 8102ee6:	bfcc      	ite	gt
 8102ee8:	2301      	movgt	r3, #1
 8102eea:	2300      	movle	r3, #0
 8102eec:	b2db      	uxtb	r3, r3
 8102eee:	2b00      	cmp	r3, #0
 8102ef0:	d006      	beq.n	8102f00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x32>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8102ef2:	697b      	ldr	r3, [r7, #20]
 8102ef4:	461a      	mov	r2, r3
 8102ef6:	68f9      	ldr	r1, [r7, #12]
 8102ef8:	6878      	ldr	r0, [r7, #4]
 8102efa:	f00c fb7d 	bl	810f5f8 <memmove>
 8102efe:	e006      	b.n	8102f0e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x40>
	  else if (_Num == 1)
 8102f00:	697b      	ldr	r3, [r7, #20]
 8102f02:	2b01      	cmp	r3, #1
 8102f04:	d103      	bne.n	8102f0e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x40>
	      __assign_one(__result, __first);
 8102f06:	68f9      	ldr	r1, [r7, #12]
 8102f08:	6878      	ldr	r0, [r7, #4]
 8102f0a:	f000 f807 	bl	8102f1c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIhhEEvPT_PT0_>
	  return __result + _Num;
 8102f0e:	697b      	ldr	r3, [r7, #20]
 8102f10:	687a      	ldr	r2, [r7, #4]
 8102f12:	4413      	add	r3, r2
	}
 8102f14:	4618      	mov	r0, r3
 8102f16:	3718      	adds	r7, #24
 8102f18:	46bd      	mov	sp, r7
 8102f1a:	bd80      	pop	{r7, pc}

08102f1c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIhhEEvPT_PT0_>:
	__assign_one(_Tp* __to, _Up* __from)
 8102f1c:	b480      	push	{r7}
 8102f1e:	b083      	sub	sp, #12
 8102f20:	af00      	add	r7, sp, #0
 8102f22:	6078      	str	r0, [r7, #4]
 8102f24:	6039      	str	r1, [r7, #0]
	{ *__to = *__from; }
 8102f26:	683b      	ldr	r3, [r7, #0]
 8102f28:	781a      	ldrb	r2, [r3, #0]
 8102f2a:	687b      	ldr	r3, [r7, #4]
 8102f2c:	701a      	strb	r2, [r3, #0]
 8102f2e:	bf00      	nop
 8102f30:	370c      	adds	r7, #12
 8102f32:	46bd      	mov	sp, r7
 8102f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f38:	4770      	bx	lr

08102f3a <_ZN6LRX20A22SetMinimumRangeCommandEv>:
	}
}
//============================================================================================
//  Minimum Range Command
void LRX20A::SetMinimumRangeCommand()
{
 8102f3a:	b580      	push	{r7, lr}
 8102f3c:	b084      	sub	sp, #16
 8102f3e:	af00      	add	r7, sp, #0
 8102f40:	6078      	str	r0, [r7, #4]
	// Send "Get distance" command
	const char cmd[] = { (char)SET_MIN_RANGE_CMD, (char)MIN_RANGE, (char)0x00, (char)0x00 };
 8102f42:	f641 1331 	movw	r3, #6449	@ 0x1931
 8102f46:	60fb      	str	r3, [r7, #12]
	UpdateCRC((char*)&cmd, (uint8_t)sizeof(cmd));
 8102f48:	f107 030c 	add.w	r3, r7, #12
 8102f4c:	2204      	movs	r2, #4
 8102f4e:	4619      	mov	r1, r3
 8102f50:	6878      	ldr	r0, [r7, #4]
 8102f52:	f000 f843 	bl	8102fdc <_ZN6LRX20A9UpdateCRCEPch>
	SendCommand((uint8_t*)&cmd, sizeof(cmd));
 8102f56:	687b      	ldr	r3, [r7, #4]
 8102f58:	f107 010c 	add.w	r1, r7, #12
 8102f5c:	2204      	movs	r2, #4
 8102f5e:	4618      	mov	r0, r3
 8102f60:	f000 f906 	bl	8103170 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 8102f64:	bf00      	nop
 8102f66:	3710      	adds	r7, #16
 8102f68:	46bd      	mov	sp, r7
 8102f6a:	bd80      	pop	{r7, pc}

08102f6c <_ZN6LRX20A22SetMaximumRangeCommandEv>:
//============================================================================================
//  Maximum Range Command
void LRX20A::SetMaximumRangeCommand()
{
 8102f6c:	b580      	push	{r7, lr}
 8102f6e:	b084      	sub	sp, #16
 8102f70:	af00      	add	r7, sp, #0
 8102f72:	6078      	str	r0, [r7, #4]
	// Send "Get distance" command
	const char cmd[] = { (char)SET_MAX_RANGE_CMD, (char)MAX_RANGE_LSB, (char)MAX_RANGE_MSB, (char)0x00 };
 8102f74:	4b09      	ldr	r3, [pc, #36]	@ (8102f9c <_ZN6LRX20A22SetMaximumRangeCommandEv+0x30>)
 8102f76:	60fb      	str	r3, [r7, #12]
	UpdateCRC((char*)&cmd, (uint8_t)sizeof(cmd));
 8102f78:	f107 030c 	add.w	r3, r7, #12
 8102f7c:	2204      	movs	r2, #4
 8102f7e:	4619      	mov	r1, r3
 8102f80:	6878      	ldr	r0, [r7, #4]
 8102f82:	f000 f82b 	bl	8102fdc <_ZN6LRX20A9UpdateCRCEPch>
	SendCommand((uint8_t*)&cmd, sizeof(cmd));
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	f107 010c 	add.w	r1, r7, #12
 8102f8c:	2204      	movs	r2, #4
 8102f8e:	4618      	mov	r0, r3
 8102f90:	f000 f8ee 	bl	8103170 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 8102f94:	bf00      	nop
 8102f96:	3710      	adds	r7, #16
 8102f98:	46bd      	mov	sp, r7
 8102f9a:	bd80      	pop	{r7, pc}
 8102f9c:	007d6432 	.word	0x007d6432

08102fa0 <_ZN6LRX20A17RangesDataCommandEv>:
}
//------------------------------------------------------------------------------
//================================================================================
// Ranges Command
bool LRX20A::RangesDataCommand()
{
 8102fa0:	b580      	push	{r7, lr}
 8102fa2:	b084      	sub	sp, #16
 8102fa4:	af00      	add	r7, sp, #0
 8102fa6:	6078      	str	r0, [r7, #4]
	eRangesState = ERangesState::eRangesUpdating;
 8102fa8:	687b      	ldr	r3, [r7, #4]
 8102faa:	2201      	movs	r2, #1
 8102fac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	const uint8_t getDistanceCmd[] = { (char)EXEC_RANGE_MEASURE, (char)MEASURE_MODE_SSM, (char)BIT_RESERVED, (char)BIT_RESERVED, (char)0x9C };
 8102fb0:	4a09      	ldr	r2, [pc, #36]	@ (8102fd8 <_ZN6LRX20A17RangesDataCommandEv+0x38>)
 8102fb2:	f107 0308 	add.w	r3, r7, #8
 8102fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8102fba:	6018      	str	r0, [r3, #0]
 8102fbc:	3304      	adds	r3, #4
 8102fbe:	7019      	strb	r1, [r3, #0]
	SendCommand(getDistanceCmd, sizeof(getDistanceCmd));
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	f107 0108 	add.w	r1, r7, #8
 8102fc6:	2205      	movs	r2, #5
 8102fc8:	4618      	mov	r0, r3
 8102fca:	f000 f8d1 	bl	8103170 <_ZN12UartEndpoint11SendCommandEPKhj>
	return 0;
 8102fce:	2300      	movs	r3, #0
}
 8102fd0:	4618      	mov	r0, r3
 8102fd2:	3710      	adds	r7, #16
 8102fd4:	46bd      	mov	sp, r7
 8102fd6:	bd80      	pop	{r7, pc}
 8102fd8:	08111488 	.word	0x08111488

08102fdc <_ZN6LRX20A9UpdateCRCEPch>:
	return true;
}

//------------------------------------------------------------------------------
void LRX20A::UpdateCRC(char* pbyBuff, uint8_t size)
{
 8102fdc:	b480      	push	{r7}
 8102fde:	b087      	sub	sp, #28
 8102fe0:	af00      	add	r7, sp, #0
 8102fe2:	60f8      	str	r0, [r7, #12]
 8102fe4:	60b9      	str	r1, [r7, #8]
 8102fe6:	4613      	mov	r3, r2
 8102fe8:	71fb      	strb	r3, [r7, #7]
	long ii;
	char byXorSum;
	byXorSum = 0;
 8102fea:	2300      	movs	r3, #0
 8102fec:	74fb      	strb	r3, [r7, #19]
	for (ii = 0; ii < size - 1; ++ii) {
 8102fee:	2300      	movs	r3, #0
 8102ff0:	617b      	str	r3, [r7, #20]
 8102ff2:	e009      	b.n	8103008 <_ZN6LRX20A9UpdateCRCEPch+0x2c>
		byXorSum = byXorSum ^ pbyBuff[ii];
 8102ff4:	697b      	ldr	r3, [r7, #20]
 8102ff6:	68ba      	ldr	r2, [r7, #8]
 8102ff8:	4413      	add	r3, r2
 8102ffa:	781a      	ldrb	r2, [r3, #0]
 8102ffc:	7cfb      	ldrb	r3, [r7, #19]
 8102ffe:	4053      	eors	r3, r2
 8103000:	74fb      	strb	r3, [r7, #19]
	for (ii = 0; ii < size - 1; ++ii) {
 8103002:	697b      	ldr	r3, [r7, #20]
 8103004:	3301      	adds	r3, #1
 8103006:	617b      	str	r3, [r7, #20]
 8103008:	79fb      	ldrb	r3, [r7, #7]
 810300a:	3b01      	subs	r3, #1
 810300c:	697a      	ldr	r2, [r7, #20]
 810300e:	429a      	cmp	r2, r3
 8103010:	dbf0      	blt.n	8102ff4 <_ZN6LRX20A9UpdateCRCEPch+0x18>
	}
	pbyBuff[size - 1] = byXorSum;
 8103012:	79fb      	ldrb	r3, [r7, #7]
 8103014:	3b01      	subs	r3, #1
 8103016:	68ba      	ldr	r2, [r7, #8]
 8103018:	4413      	add	r3, r2
 810301a:	7cfa      	ldrb	r2, [r7, #19]
 810301c:	701a      	strb	r2, [r3, #0]
}
 810301e:	bf00      	nop
 8103020:	371c      	adds	r7, #28
 8103022:	46bd      	mov	sp, r7
 8103024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103028:	4770      	bx	lr

0810302a <__is_constant_evaluated>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 810302a:	b480      	push	{r7}
 810302c:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 810302e:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8103030:	4618      	mov	r0, r3
 8103032:	46bd      	mov	sp, r7
 8103034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103038:	4770      	bx	lr

0810303a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 810303a:	b480      	push	{r7}
 810303c:	b083      	sub	sp, #12
 810303e:	af00      	add	r7, sp, #0
 8103040:	6078      	str	r0, [r7, #4]
 8103042:	6039      	str	r1, [r7, #0]
 8103044:	683b      	ldr	r3, [r7, #0]
 8103046:	4618      	mov	r0, r3
 8103048:	370c      	adds	r7, #12
 810304a:	46bd      	mov	sp, r7
 810304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103050:	4770      	bx	lr

08103052 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8103052:	b580      	push	{r7, lr}
 8103054:	b082      	sub	sp, #8
 8103056:	af00      	add	r7, sp, #0
 8103058:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 810305a:	687b      	ldr	r3, [r7, #4]
 810305c:	2200      	movs	r2, #0
 810305e:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8103060:	6878      	ldr	r0, [r7, #4]
 8103062:	f000 f805 	bl	8103070 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	4618      	mov	r0, r3
 810306a:	3708      	adds	r7, #8
 810306c:	46bd      	mov	sp, r7
 810306e:	bd80      	pop	{r7, pc}

08103070 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8103070:	b480      	push	{r7}
 8103072:	b083      	sub	sp, #12
 8103074:	af00      	add	r7, sp, #0
 8103076:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	2200      	movs	r2, #0
 810307c:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 810307e:	687a      	ldr	r2, [r7, #4]
 8103080:	687b      	ldr	r3, [r7, #4]
 8103082:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8103084:	687a      	ldr	r2, [r7, #4]
 8103086:	687b      	ldr	r3, [r7, #4]
 8103088:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 810308a:	687b      	ldr	r3, [r7, #4]
 810308c:	2200      	movs	r2, #0
 810308e:	611a      	str	r2, [r3, #16]
    }
 8103090:	bf00      	nop
 8103092:	370c      	adds	r7, #12
 8103094:	46bd      	mov	sp, r7
 8103096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810309a:	4770      	bx	lr

0810309c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 810309c:	b580      	push	{r7, lr}
 810309e:	b084      	sub	sp, #16
 81030a0:	af00      	add	r7, sp, #0
 81030a2:	6078      	str	r0, [r7, #4]
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	60fb      	str	r3, [r7, #12]
 81030a8:	68f8      	ldr	r0, [r7, #12]
 81030aa:	f000 f9ee 	bl	810348a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEED1Ev>
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	4618      	mov	r0, r3
 81030b2:	3710      	adds	r7, #16
 81030b4:	46bd      	mov	sp, r7
 81030b6:	bd80      	pop	{r7, pc}

081030b8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 81030b8:	b580      	push	{r7, lr}
 81030ba:	b082      	sub	sp, #8
 81030bc:	af00      	add	r7, sp, #0
 81030be:	6078      	str	r0, [r7, #4]
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	4618      	mov	r0, r3
 81030c4:	f000 f8d7 	bl	8103276 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	4618      	mov	r0, r3
 81030cc:	3708      	adds	r7, #8
 81030ce:	46bd      	mov	sp, r7
 81030d0:	bd80      	pop	{r7, pc}

081030d2 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 81030d2:	b580      	push	{r7, lr}
 81030d4:	b082      	sub	sp, #8
 81030d6:	af00      	add	r7, sp, #0
 81030d8:	6078      	str	r0, [r7, #4]
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	4618      	mov	r0, r3
 81030de:	f7ff ffeb 	bl	81030b8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	4618      	mov	r0, r3
 81030e6:	3708      	adds	r7, #8
 81030e8:	46bd      	mov	sp, r7
 81030ea:	bd80      	pop	{r7, pc}

081030ec <_ZN12UartEndpointC1EP20__UART_HandleTypeDef>:
#include "UartEndpoint.hpp"
#include <map>

std::map<UART_HandleTypeDef*, UartEndpoint*> UartEndpoint::instanceMap;

UartEndpoint::UartEndpoint(UART_HandleTypeDef* huart) : huart_(huart) {
 81030ec:	b580      	push	{r7, lr}
 81030ee:	b082      	sub	sp, #8
 81030f0:	af00      	add	r7, sp, #0
 81030f2:	6078      	str	r0, [r7, #4]
 81030f4:	6039      	str	r1, [r7, #0]
 81030f6:	4a0c      	ldr	r2, [pc, #48]	@ (8103128 <_ZN12UartEndpointC1EP20__UART_HandleTypeDef+0x3c>)
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	601a      	str	r2, [r3, #0]
 81030fc:	683a      	ldr	r2, [r7, #0]
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	605a      	str	r2, [r3, #4]
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	3310      	adds	r3, #16
 8103106:	4618      	mov	r0, r3
 8103108:	f7fd ffb1 	bl	810106e <_ZNSt5dequeIhSaIhEEC1Ev>
    instanceMap[huart] = this;
 810310c:	463b      	mov	r3, r7
 810310e:	4619      	mov	r1, r3
 8103110:	4806      	ldr	r0, [pc, #24]	@ (810312c <_ZN12UartEndpointC1EP20__UART_HandleTypeDef+0x40>)
 8103112:	f000 f8db 	bl	81032cc <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8103116:	4602      	mov	r2, r0
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	6013      	str	r3, [r2, #0]
}
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	4618      	mov	r0, r3
 8103120:	3708      	adds	r7, #8
 8103122:	46bd      	mov	sp, r7
 8103124:	bd80      	pop	{r7, pc}
 8103126:	bf00      	nop
 8103128:	0811166c 	.word	0x0811166c
 810312c:	100003b0 	.word	0x100003b0

08103130 <_ZN12UartEndpoint12StartReceiveEPhj>:

bool UartEndpoint::StartReceive(uint8_t* buffer, size_t len) {
 8103130:	b580      	push	{r7, lr}
 8103132:	b084      	sub	sp, #16
 8103134:	af00      	add	r7, sp, #0
 8103136:	60f8      	str	r0, [r7, #12]
 8103138:	60b9      	str	r1, [r7, #8]
 810313a:	607a      	str	r2, [r7, #4]
    rxBuffer_ = buffer;
 810313c:	68fb      	ldr	r3, [r7, #12]
 810313e:	68ba      	ldr	r2, [r7, #8]
 8103140:	609a      	str	r2, [r3, #8]
    rxLength_ = len;
 8103142:	68fb      	ldr	r3, [r7, #12]
 8103144:	687a      	ldr	r2, [r7, #4]
 8103146:	60da      	str	r2, [r3, #12]
    return HAL_UART_Receive_IT(huart_, rxBuffer_, rxLength_) == HAL_OK;
 8103148:	68fb      	ldr	r3, [r7, #12]
 810314a:	6858      	ldr	r0, [r3, #4]
 810314c:	68fb      	ldr	r3, [r7, #12]
 810314e:	6899      	ldr	r1, [r3, #8]
 8103150:	68fb      	ldr	r3, [r7, #12]
 8103152:	68db      	ldr	r3, [r3, #12]
 8103154:	b29b      	uxth	r3, r3
 8103156:	461a      	mov	r2, r3
 8103158:	f005 ff32 	bl	8108fc0 <HAL_UART_Receive_IT>
 810315c:	4603      	mov	r3, r0
 810315e:	2b00      	cmp	r3, #0
 8103160:	bf0c      	ite	eq
 8103162:	2301      	moveq	r3, #1
 8103164:	2300      	movne	r3, #0
 8103166:	b2db      	uxtb	r3, r3
}
 8103168:	4618      	mov	r0, r3
 810316a:	3710      	adds	r7, #16
 810316c:	46bd      	mov	sp, r7
 810316e:	bd80      	pop	{r7, pc}

08103170 <_ZN12UartEndpoint11SendCommandEPKhj>:

uint16_t UartEndpoint::SendCommand(const uint8_t* command, size_t length)
{
 8103170:	b580      	push	{r7, lr}
 8103172:	b084      	sub	sp, #16
 8103174:	af00      	add	r7, sp, #0
 8103176:	60f8      	str	r0, [r7, #12]
 8103178:	60b9      	str	r1, [r7, #8]
 810317a:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit(huart_, command, length,500) == HAL_OK)
 810317c:	68fb      	ldr	r3, [r7, #12]
 810317e:	6858      	ldr	r0, [r3, #4]
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	b29a      	uxth	r2, r3
 8103184:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8103188:	68b9      	ldr	r1, [r7, #8]
 810318a:	f005 fe8a 	bl	8108ea2 <HAL_UART_Transmit>
 810318e:	4603      	mov	r3, r0
 8103190:	2b00      	cmp	r3, #0
 8103192:	bf0c      	ite	eq
 8103194:	2301      	moveq	r3, #1
 8103196:	2300      	movne	r3, #0
 8103198:	b2db      	uxtb	r3, r3
 810319a:	2b00      	cmp	r3, #0
 810319c:	d002      	beq.n	81031a4 <_ZN12UartEndpoint11SendCommandEPKhj+0x34>
		return length;
 810319e:	687b      	ldr	r3, [r7, #4]
 81031a0:	b29b      	uxth	r3, r3
 81031a2:	e000      	b.n	81031a6 <_ZN12UartEndpoint11SendCommandEPKhj+0x36>
	else
		return 0;
 81031a4:	2300      	movs	r3, #0
}
 81031a6:	4618      	mov	r0, r3
 81031a8:	3710      	adds	r7, #16
 81031aa:	46bd      	mov	sp, r7
 81031ac:	bd80      	pop	{r7, pc}
	...

081031b0 <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef>:

void UartEndpoint::DispatchRxComplete(UART_HandleTypeDef* huart) {
 81031b0:	b580      	push	{r7, lr}
 81031b2:	b086      	sub	sp, #24
 81031b4:	af00      	add	r7, sp, #0
 81031b6:	6078      	str	r0, [r7, #4]
    auto it = instanceMap.find(huart);
 81031b8:	1d3b      	adds	r3, r7, #4
 81031ba:	4619      	mov	r1, r3
 81031bc:	4822      	ldr	r0, [pc, #136]	@ (8103248 <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef+0x98>)
 81031be:	f000 f8e3 	bl	8103388 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 81031c2:	4603      	mov	r3, r0
 81031c4:	60fb      	str	r3, [r7, #12]
    if (it != instanceMap.end()) {
 81031c6:	4820      	ldr	r0, [pc, #128]	@ (8103248 <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef+0x98>)
 81031c8:	f000 f8ed 	bl	81033a6 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81031cc:	4603      	mov	r3, r0
 81031ce:	613b      	str	r3, [r7, #16]
 81031d0:	f107 0210 	add.w	r2, r7, #16
 81031d4:	f107 030c 	add.w	r3, r7, #12
 81031d8:	4611      	mov	r1, r2
 81031da:	4618      	mov	r0, r3
 81031dc:	f000 f8f0 	bl	81033c0 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEES9_>
 81031e0:	4603      	mov	r3, r0
 81031e2:	2b00      	cmp	r3, #0
 81031e4:	d02b      	beq.n	810323e <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef+0x8e>
        UartEndpoint* instance = it->second;
 81031e6:	f107 030c 	add.w	r3, r7, #12
 81031ea:	4618      	mov	r0, r3
 81031ec:	f000 f8fc 	bl	81033e8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEptEv>
 81031f0:	4603      	mov	r3, r0
 81031f2:	685b      	ldr	r3, [r3, #4]
 81031f4:	617b      	str	r3, [r7, #20]
        if (instance && instance->rxBuffer_) {
 81031f6:	697b      	ldr	r3, [r7, #20]
 81031f8:	2b00      	cmp	r3, #0
 81031fa:	d020      	beq.n	810323e <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef+0x8e>
 81031fc:	697b      	ldr	r3, [r7, #20]
 81031fe:	689b      	ldr	r3, [r3, #8]
 8103200:	2b00      	cmp	r3, #0
 8103202:	d01c      	beq.n	810323e <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef+0x8e>
            uint8_t byte = instance->rxBuffer_[0];
 8103204:	697b      	ldr	r3, [r7, #20]
 8103206:	689b      	ldr	r3, [r3, #8]
 8103208:	781b      	ldrb	r3, [r3, #0]
 810320a:	72fb      	strb	r3, [r7, #11]

            // ✅ Push byte into the queue immediately
            instance->rxQueue_.push_back(byte);
 810320c:	697b      	ldr	r3, [r7, #20]
 810320e:	3310      	adds	r3, #16
 8103210:	f107 020b 	add.w	r2, r7, #11
 8103214:	4611      	mov	r1, r2
 8103216:	4618      	mov	r0, r3
 8103218:	f000 f8f4 	bl	8103404 <_ZNSt5dequeIhSaIhEE9push_backERKh>

            // Re-arm UART receive
            HAL_UART_Receive_IT(instance->huart_, instance->rxBuffer_, instance->rxLength_);
 810321c:	697b      	ldr	r3, [r7, #20]
 810321e:	6858      	ldr	r0, [r3, #4]
 8103220:	697b      	ldr	r3, [r7, #20]
 8103222:	6899      	ldr	r1, [r3, #8]
 8103224:	697b      	ldr	r3, [r7, #20]
 8103226:	68db      	ldr	r3, [r3, #12]
 8103228:	b29b      	uxth	r3, r3
 810322a:	461a      	mov	r2, r3
 810322c:	f005 fec8 	bl	8108fc0 <HAL_UART_Receive_IT>

            // Let derived class process the queue
            instance->onReceiveByte(byte);
 8103230:	697b      	ldr	r3, [r7, #20]
 8103232:	681b      	ldr	r3, [r3, #0]
 8103234:	681b      	ldr	r3, [r3, #0]
 8103236:	7afa      	ldrb	r2, [r7, #11]
 8103238:	4611      	mov	r1, r2
 810323a:	6978      	ldr	r0, [r7, #20]
 810323c:	4798      	blx	r3
        }
    }
}
 810323e:	bf00      	nop
 8103240:	3718      	adds	r7, #24
 8103242:	46bd      	mov	sp, r7
 8103244:	bd80      	pop	{r7, pc}
 8103246:	bf00      	nop
 8103248:	100003b0 	.word	0x100003b0

0810324c <_ZN12UartEndpoint15processIncomingEv>:

void UartEndpoint::onReceiveByte(uint8_t byte) {
    // no longer queues here
}

void UartEndpoint::processIncoming() {
 810324c:	b480      	push	{r7}
 810324e:	b083      	sub	sp, #12
 8103250:	af00      	add	r7, sp, #0
 8103252:	6078      	str	r0, [r7, #4]
    // Base class: do nothing
}
 8103254:	bf00      	nop
 8103256:	370c      	adds	r7, #12
 8103258:	46bd      	mov	sp, r7
 810325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810325e:	4770      	bx	lr

08103260 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8103260:	b580      	push	{r7, lr}
 8103262:	b082      	sub	sp, #8
 8103264:	af00      	add	r7, sp, #0
 8103266:	6078      	str	r0, [r7, #4]
    UartEndpoint::DispatchRxComplete(huart);
 8103268:	6878      	ldr	r0, [r7, #4]
 810326a:	f7ff ffa1 	bl	81031b0 <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef>
}
 810326e:	bf00      	nop
 8103270:	3708      	adds	r7, #8
 8103272:	46bd      	mov	sp, r7
 8103274:	bd80      	pop	{r7, pc}

08103276 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8103276:	b580      	push	{r7, lr}
 8103278:	b084      	sub	sp, #16
 810327a:	af00      	add	r7, sp, #0
 810327c:	6078      	str	r0, [r7, #4]
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	60fb      	str	r3, [r7, #12]
 8103282:	68fb      	ldr	r3, [r7, #12]
 8103284:	60bb      	str	r3, [r7, #8]
	  : _Node_allocator()
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	4618      	mov	r0, r3
 810328a:	f000 f8f3 	bl	8103474 <_ZNSt20_Rb_tree_key_compareISt4lessIP20__UART_HandleTypeDefEEC1Ev>
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	3304      	adds	r3, #4
 8103292:	4618      	mov	r0, r3
 8103294:	f7ff fedd 	bl	8103052 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	4618      	mov	r0, r3
 810329c:	3710      	adds	r7, #16
 810329e:	46bd      	mov	sp, r7
 81032a0:	bd80      	pop	{r7, pc}

081032a2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 81032a2:	b580      	push	{r7, lr}
 81032a4:	b082      	sub	sp, #8
 81032a6:	af00      	add	r7, sp, #0
 81032a8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 81032aa:	6878      	ldr	r0, [r7, #4]
 81032ac:	f000 f918 	bl	81034e0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 81032b0:	4603      	mov	r3, r0
 81032b2:	4619      	mov	r1, r3
 81032b4:	6878      	ldr	r0, [r7, #4]
 81032b6:	f000 f8f3 	bl	81034a0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	4618      	mov	r0, r3
 81032be:	f7ff feed 	bl	810309c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	4618      	mov	r0, r3
 81032c6:	3708      	adds	r7, #8
 81032c8:	46bd      	mov	sp, r7
 81032ca:	bd80      	pop	{r7, pc}

081032cc <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 81032cc:	b590      	push	{r4, r7, lr}
 81032ce:	b08b      	sub	sp, #44	@ 0x2c
 81032d0:	af02      	add	r7, sp, #8
 81032d2:	6078      	str	r0, [r7, #4]
 81032d4:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 81032d6:	6839      	ldr	r1, [r7, #0]
 81032d8:	6878      	ldr	r0, [r7, #4]
 81032da:	f000 f90d 	bl	81034f8 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 81032de:	4603      	mov	r3, r0
 81032e0:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 81032e2:	6878      	ldr	r0, [r7, #4]
 81032e4:	f000 f85f 	bl	81033a6 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81032e8:	4603      	mov	r3, r0
 81032ea:	60fb      	str	r3, [r7, #12]
 81032ec:	f107 020c 	add.w	r2, r7, #12
 81032f0:	f107 0308 	add.w	r3, r7, #8
 81032f4:	4611      	mov	r1, r2
 81032f6:	4618      	mov	r0, r3
 81032f8:	f000 f90d 	bl	8103516 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEES9_>
 81032fc:	4603      	mov	r3, r0
 81032fe:	2b00      	cmp	r3, #0
 8103300:	d114      	bne.n	810332c <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8103302:	6878      	ldr	r0, [r7, #4]
 8103304:	f000 f91b 	bl	810353e <_ZNKSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8103308:	683b      	ldr	r3, [r7, #0]
 810330a:	681c      	ldr	r4, [r3, #0]
 810330c:	f107 0308 	add.w	r3, r7, #8
 8103310:	4618      	mov	r0, r3
 8103312:	f000 f921 	bl	8103558 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEdeEv>
 8103316:	4603      	mov	r3, r0
 8103318:	681a      	ldr	r2, [r3, #0]
 810331a:	f107 0310 	add.w	r3, r7, #16
 810331e:	4621      	mov	r1, r4
 8103320:	4618      	mov	r0, r3
 8103322:	f000 f927 	bl	8103574 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 8103326:	4603      	mov	r3, r0
 8103328:	2b00      	cmp	r3, #0
 810332a:	d001      	beq.n	8103330 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 810332c:	2301      	movs	r3, #1
 810332e:	e000      	b.n	8103332 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8103330:	2300      	movs	r3, #0
 8103332:	2b00      	cmp	r3, #0
 8103334:	d01b      	beq.n	810336e <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8103336:	687c      	ldr	r4, [r7, #4]
 8103338:	f107 0208 	add.w	r2, r7, #8
 810333c:	f107 0314 	add.w	r3, r7, #20
 8103340:	4611      	mov	r1, r2
 8103342:	4618      	mov	r0, r3
 8103344:	f000 f943 	bl	81035ce <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8103348:	f107 0318 	add.w	r3, r7, #24
 810334c:	6839      	ldr	r1, [r7, #0]
 810334e:	4618      	mov	r0, r3
 8103350:	f000 f92e 	bl	81035b0 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8103354:	f107 0218 	add.w	r2, r7, #24
 8103358:	f107 031c 	add.w	r3, r7, #28
 810335c:	9300      	str	r3, [sp, #0]
 810335e:	4613      	mov	r3, r2
 8103360:	4a08      	ldr	r2, [pc, #32]	@ (8103384 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8103362:	6979      	ldr	r1, [r7, #20]
 8103364:	4620      	mov	r0, r4
 8103366:	f000 f942 	bl	81035ee <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 810336a:	4603      	mov	r3, r0
 810336c:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 810336e:	f107 0308 	add.w	r3, r7, #8
 8103372:	4618      	mov	r0, r3
 8103374:	f000 f8f0 	bl	8103558 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEdeEv>
 8103378:	4603      	mov	r3, r0
 810337a:	3304      	adds	r3, #4
      }
 810337c:	4618      	mov	r0, r3
 810337e:	3724      	adds	r7, #36	@ 0x24
 8103380:	46bd      	mov	sp, r7
 8103382:	bd90      	pop	{r4, r7, pc}
 8103384:	08111660 	.word	0x08111660

08103388 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8103388:	b580      	push	{r7, lr}
 810338a:	b082      	sub	sp, #8
 810338c:	af00      	add	r7, sp, #0
 810338e:	6078      	str	r0, [r7, #4]
 8103390:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	6839      	ldr	r1, [r7, #0]
 8103396:	4618      	mov	r0, r3
 8103398:	f000 f96f 	bl	810367a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 810339c:	4603      	mov	r3, r0
 810339e:	4618      	mov	r0, r3
 81033a0:	3708      	adds	r7, #8
 81033a2:	46bd      	mov	sp, r7
 81033a4:	bd80      	pop	{r7, pc}

081033a6 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81033a6:	b580      	push	{r7, lr}
 81033a8:	b082      	sub	sp, #8
 81033aa:	af00      	add	r7, sp, #0
 81033ac:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	4618      	mov	r0, r3
 81033b2:	f000 f9a1 	bl	81036f8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81033b6:	4603      	mov	r3, r0
 81033b8:	4618      	mov	r0, r3
 81033ba:	3708      	adds	r7, #8
 81033bc:	46bd      	mov	sp, r7
 81033be:	bd80      	pop	{r7, pc}

081033c0 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 81033c0:	b480      	push	{r7}
 81033c2:	b083      	sub	sp, #12
 81033c4:	af00      	add	r7, sp, #0
 81033c6:	6078      	str	r0, [r7, #4]
 81033c8:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 81033ca:	687b      	ldr	r3, [r7, #4]
 81033cc:	681a      	ldr	r2, [r3, #0]
 81033ce:	683b      	ldr	r3, [r7, #0]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	429a      	cmp	r2, r3
 81033d4:	bf14      	ite	ne
 81033d6:	2301      	movne	r3, #1
 81033d8:	2300      	moveq	r3, #0
 81033da:	b2db      	uxtb	r3, r3
 81033dc:	4618      	mov	r0, r3
 81033de:	370c      	adds	r7, #12
 81033e0:	46bd      	mov	sp, r7
 81033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033e6:	4770      	bx	lr

081033e8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 81033e8:	b580      	push	{r7, lr}
 81033ea:	b082      	sub	sp, #8
 81033ec:	af00      	add	r7, sp, #0
 81033ee:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 81033f0:	687b      	ldr	r3, [r7, #4]
 81033f2:	681b      	ldr	r3, [r3, #0]
 81033f4:	4618      	mov	r0, r3
 81033f6:	f000 f990 	bl	810371a <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>
 81033fa:	4603      	mov	r3, r0
 81033fc:	4618      	mov	r0, r3
 81033fe:	3708      	adds	r7, #8
 8103400:	46bd      	mov	sp, r7
 8103402:	bd80      	pop	{r7, pc}

08103404 <_ZNSt5dequeIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 8103404:	b590      	push	{r4, r7, lr}
 8103406:	b089      	sub	sp, #36	@ 0x24
 8103408:	af00      	add	r7, sp, #0
 810340a:	6078      	str	r0, [r7, #4]
 810340c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8103412:	687b      	ldr	r3, [r7, #4]
 8103414:	6a1b      	ldr	r3, [r3, #32]
 8103416:	3b01      	subs	r3, #1
	if (this->_M_impl._M_finish._M_cur
 8103418:	429a      	cmp	r2, r3
 810341a:	d023      	beq.n	8103464 <_ZNSt5dequeIhSaIhEE9push_backERKh+0x60>
	    _Alloc_traits::construct(this->_M_impl,
 810341c:	687a      	ldr	r2, [r7, #4]
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	699b      	ldr	r3, [r3, #24]
 8103422:	61fa      	str	r2, [r7, #28]
 8103424:	61bb      	str	r3, [r7, #24]
 8103426:	683b      	ldr	r3, [r7, #0]
 8103428:	617b      	str	r3, [r7, #20]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 810342a:	6978      	ldr	r0, [r7, #20]
 810342c:	f000 fc59 	bl	8103ce2 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8103430:	4602      	mov	r2, r0
 8103432:	69fb      	ldr	r3, [r7, #28]
 8103434:	613b      	str	r3, [r7, #16]
 8103436:	69bb      	ldr	r3, [r7, #24]
 8103438:	60fb      	str	r3, [r7, #12]
 810343a:	60ba      	str	r2, [r7, #8]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 810343c:	68fb      	ldr	r3, [r7, #12]
 810343e:	4619      	mov	r1, r3
 8103440:	2001      	movs	r0, #1
 8103442:	f7ff fdfa 	bl	810303a <_ZnwjPv>
 8103446:	4604      	mov	r4, r0
 8103448:	68b8      	ldr	r0, [r7, #8]
 810344a:	f000 fc4a 	bl	8103ce2 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 810344e:	4603      	mov	r3, r0
 8103450:	781b      	ldrb	r3, [r3, #0]
 8103452:	7023      	strb	r3, [r4, #0]
 8103454:	bf00      	nop
	}
 8103456:	bf00      	nop
	    ++this->_M_impl._M_finish._M_cur;
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	699b      	ldr	r3, [r3, #24]
 810345c:	1c5a      	adds	r2, r3, #1
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	619a      	str	r2, [r3, #24]
      }
 8103462:	e003      	b.n	810346c <_ZNSt5dequeIhSaIhEE9push_backERKh+0x68>
	  _M_push_back_aux(__x);
 8103464:	6839      	ldr	r1, [r7, #0]
 8103466:	6878      	ldr	r0, [r7, #4]
 8103468:	f000 f966 	bl	8103738 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJRKhEEEvDpOT_>
      }
 810346c:	bf00      	nop
 810346e:	3724      	adds	r7, #36	@ 0x24
 8103470:	46bd      	mov	sp, r7
 8103472:	bd90      	pop	{r4, r7, pc}

08103474 <_ZNSt20_Rb_tree_key_compareISt4lessIP20__UART_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8103474:	b480      	push	{r7}
 8103476:	b083      	sub	sp, #12
 8103478:	af00      	add	r7, sp, #0
 810347a:	6078      	str	r0, [r7, #4]
      { }
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	4618      	mov	r0, r3
 8103480:	370c      	adds	r7, #12
 8103482:	46bd      	mov	sp, r7
 8103484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103488:	4770      	bx	lr

0810348a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 810348a:	b480      	push	{r7}
 810348c:	b083      	sub	sp, #12
 810348e:	af00      	add	r7, sp, #0
 8103490:	6078      	str	r0, [r7, #4]
 8103492:	687b      	ldr	r3, [r7, #4]
 8103494:	4618      	mov	r0, r3
 8103496:	370c      	adds	r7, #12
 8103498:	46bd      	mov	sp, r7
 810349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810349e:	4770      	bx	lr

081034a0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81034a0:	b580      	push	{r7, lr}
 81034a2:	b084      	sub	sp, #16
 81034a4:	af00      	add	r7, sp, #0
 81034a6:	6078      	str	r0, [r7, #4]
 81034a8:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 81034aa:	e011      	b.n	81034d0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x30>
	{
	  _M_erase(_S_right(__x));
 81034ac:	6838      	ldr	r0, [r7, #0]
 81034ae:	f000 f99d 	bl	81037ec <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81034b2:	4603      	mov	r3, r0
 81034b4:	4619      	mov	r1, r3
 81034b6:	6878      	ldr	r0, [r7, #4]
 81034b8:	f7ff fff2 	bl	81034a0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 81034bc:	6838      	ldr	r0, [r7, #0]
 81034be:	f000 f9a1 	bl	8103804 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 81034c2:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 81034c4:	6839      	ldr	r1, [r7, #0]
 81034c6:	6878      	ldr	r0, [r7, #4]
 81034c8:	f000 f9a8 	bl	810381c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 81034cc:	68fb      	ldr	r3, [r7, #12]
 81034ce:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 81034d0:	683b      	ldr	r3, [r7, #0]
 81034d2:	2b00      	cmp	r3, #0
 81034d4:	d1ea      	bne.n	81034ac <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xc>
	}
    }
 81034d6:	bf00      	nop
 81034d8:	bf00      	nop
 81034da:	3710      	adds	r7, #16
 81034dc:	46bd      	mov	sp, r7
 81034de:	bd80      	pop	{r7, pc}

081034e0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 81034e0:	b580      	push	{r7, lr}
 81034e2:	b082      	sub	sp, #8
 81034e4:	af00      	add	r7, sp, #0
 81034e6:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 81034e8:	6878      	ldr	r0, [r7, #4]
 81034ea:	f000 f9a8 	bl	810383e <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 81034ee:	4603      	mov	r3, r0
 81034f0:	4618      	mov	r0, r3
 81034f2:	3708      	adds	r7, #8
 81034f4:	46bd      	mov	sp, r7
 81034f6:	bd80      	pop	{r7, pc}

081034f8 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 81034f8:	b580      	push	{r7, lr}
 81034fa:	b082      	sub	sp, #8
 81034fc:	af00      	add	r7, sp, #0
 81034fe:	6078      	str	r0, [r7, #4]
 8103500:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8103502:	687b      	ldr	r3, [r7, #4]
 8103504:	6839      	ldr	r1, [r7, #0]
 8103506:	4618      	mov	r0, r3
 8103508:	f000 f9a5 	bl	8103856 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 810350c:	4603      	mov	r3, r0
 810350e:	4618      	mov	r0, r3
 8103510:	3708      	adds	r7, #8
 8103512:	46bd      	mov	sp, r7
 8103514:	bd80      	pop	{r7, pc}

08103516 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8103516:	b480      	push	{r7}
 8103518:	b083      	sub	sp, #12
 810351a:	af00      	add	r7, sp, #0
 810351c:	6078      	str	r0, [r7, #4]
 810351e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	681a      	ldr	r2, [r3, #0]
 8103524:	683b      	ldr	r3, [r7, #0]
 8103526:	681b      	ldr	r3, [r3, #0]
 8103528:	429a      	cmp	r2, r3
 810352a:	bf0c      	ite	eq
 810352c:	2301      	moveq	r3, #1
 810352e:	2300      	movne	r3, #0
 8103530:	b2db      	uxtb	r3, r3
 8103532:	4618      	mov	r0, r3
 8103534:	370c      	adds	r7, #12
 8103536:	46bd      	mov	sp, r7
 8103538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810353c:	4770      	bx	lr

0810353e <_ZNKSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 810353e:	b590      	push	{r4, r7, lr}
 8103540:	b083      	sub	sp, #12
 8103542:	af00      	add	r7, sp, #0
 8103544:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	4618      	mov	r0, r3
 810354a:	f000 f99b 	bl	8103884 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 810354e:	bf00      	nop
 8103550:	4620      	mov	r0, r4
 8103552:	370c      	adds	r7, #12
 8103554:	46bd      	mov	sp, r7
 8103556:	bd90      	pop	{r4, r7, pc}

08103558 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8103558:	b580      	push	{r7, lr}
 810355a:	b082      	sub	sp, #8
 810355c:	af00      	add	r7, sp, #0
 810355e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8103560:	687b      	ldr	r3, [r7, #4]
 8103562:	681b      	ldr	r3, [r3, #0]
 8103564:	4618      	mov	r0, r3
 8103566:	f000 f8d8 	bl	810371a <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>
 810356a:	4603      	mov	r3, r0
 810356c:	4618      	mov	r0, r3
 810356e:	3708      	adds	r7, #8
 8103570:	46bd      	mov	sp, r7
 8103572:	bd80      	pop	{r7, pc}

08103574 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8103574:	b580      	push	{r7, lr}
 8103576:	b084      	sub	sp, #16
 8103578:	af00      	add	r7, sp, #0
 810357a:	60f8      	str	r0, [r7, #12]
 810357c:	60b9      	str	r1, [r7, #8]
 810357e:	607a      	str	r2, [r7, #4]
      {
#if __cplusplus >= 201402L
	if (std::__is_constant_evaluated())
 8103580:	f7ff fd53 	bl	810302a <__is_constant_evaluated>
 8103584:	4603      	mov	r3, r0
 8103586:	2b00      	cmp	r3, #0
 8103588:	d007      	beq.n	810359a <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_+0x26>
	  return __x < __y;
 810358a:	68ba      	ldr	r2, [r7, #8]
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	429a      	cmp	r2, r3
 8103590:	bf34      	ite	cc
 8103592:	2301      	movcc	r3, #1
 8103594:	2300      	movcs	r3, #0
 8103596:	b2db      	uxtb	r3, r3
 8103598:	e006      	b.n	81035a8 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_+0x34>
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 810359a:	68ba      	ldr	r2, [r7, #8]
 810359c:	687b      	ldr	r3, [r7, #4]
 810359e:	429a      	cmp	r2, r3
 81035a0:	bf34      	ite	cc
 81035a2:	2301      	movcc	r3, #1
 81035a4:	2300      	movcs	r3, #0
 81035a6:	b2db      	uxtb	r3, r3
      }
 81035a8:	4618      	mov	r0, r3
 81035aa:	3710      	adds	r7, #16
 81035ac:	46bd      	mov	sp, r7
 81035ae:	bd80      	pop	{r7, pc}

081035b0 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 81035b0:	b580      	push	{r7, lr}
 81035b2:	b082      	sub	sp, #8
 81035b4:	af00      	add	r7, sp, #0
 81035b6:	6078      	str	r0, [r7, #4]
 81035b8:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	6839      	ldr	r1, [r7, #0]
 81035be:	4618      	mov	r0, r3
 81035c0:	f000 f96b 	bl	810389a <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1ES3_>
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	4618      	mov	r0, r3
 81035c8:	3708      	adds	r7, #8
 81035ca:	46bd      	mov	sp, r7
 81035cc:	bd80      	pop	{r7, pc}

081035ce <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 81035ce:	b480      	push	{r7}
 81035d0:	b083      	sub	sp, #12
 81035d2:	af00      	add	r7, sp, #0
 81035d4:	6078      	str	r0, [r7, #4]
 81035d6:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 81035d8:	683b      	ldr	r3, [r7, #0]
 81035da:	681a      	ldr	r2, [r3, #0]
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	601a      	str	r2, [r3, #0]
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	4618      	mov	r0, r3
 81035e4:	370c      	adds	r7, #12
 81035e6:	46bd      	mov	sp, r7
 81035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035ec:	4770      	bx	lr

081035ee <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81035ee:	b5b0      	push	{r4, r5, r7, lr}
 81035f0:	b08c      	sub	sp, #48	@ 0x30
 81035f2:	af02      	add	r7, sp, #8
 81035f4:	60f8      	str	r0, [r7, #12]
 81035f6:	60b9      	str	r1, [r7, #8]
 81035f8:	607a      	str	r2, [r7, #4]
 81035fa:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 81035fc:	6878      	ldr	r0, [r7, #4]
 81035fe:	f000 f95b 	bl	81038b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103602:	4604      	mov	r4, r0
 8103604:	6838      	ldr	r0, [r7, #0]
 8103606:	f000 f962 	bl	81038ce <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810360a:	4605      	mov	r5, r0
 810360c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810360e:	f000 f969 	bl	81038e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103612:	4603      	mov	r3, r0
 8103614:	f107 001c 	add.w	r0, r7, #28
 8103618:	9300      	str	r3, [sp, #0]
 810361a:	462b      	mov	r3, r5
 810361c:	4622      	mov	r2, r4
 810361e:	68f9      	ldr	r1, [r7, #12]
 8103620:	f000 f96b 	bl	81038fa <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8103624:	f107 031c 	add.w	r3, r7, #28
 8103628:	4618      	mov	r0, r3
 810362a:	f000 facd 	bl	8103bc8 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 810362e:	4603      	mov	r3, r0
 8103630:	f107 0014 	add.w	r0, r7, #20
 8103634:	68ba      	ldr	r2, [r7, #8]
 8103636:	68f9      	ldr	r1, [r7, #12]
 8103638:	f000 f997 	bl	810396a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 810363c:	69bb      	ldr	r3, [r7, #24]
 810363e:	2b00      	cmp	r3, #0
 8103640:	d009      	beq.n	8103656 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8103642:	f107 001c 	add.w	r0, r7, #28
 8103646:	f107 0314 	add.w	r3, r7, #20
 810364a:	e893 0006 	ldmia.w	r3, {r1, r2}
 810364e:	f000 fac9 	bl	8103be4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8103652:	4604      	mov	r4, r0
 8103654:	e007      	b.n	8103666 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8103656:	697a      	ldr	r2, [r7, #20]
 8103658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810365c:	4611      	mov	r1, r2
 810365e:	4618      	mov	r0, r3
 8103660:	f000 fad9 	bl	8103c16 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
 8103664:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8103666:	f107 031c 	add.w	r3, r7, #28
 810366a:	4618      	mov	r0, r3
 810366c:	f000 f968 	bl	8103940 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8103670:	4623      	mov	r3, r4
 8103672:	4618      	mov	r0, r3
 8103674:	3728      	adds	r7, #40	@ 0x28
 8103676:	46bd      	mov	sp, r7
 8103678:	bdb0      	pop	{r4, r5, r7, pc}

0810367a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810367a:	b5b0      	push	{r4, r5, r7, lr}
 810367c:	b084      	sub	sp, #16
 810367e:	af00      	add	r7, sp, #0
 8103680:	6078      	str	r0, [r7, #4]
 8103682:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8103684:	6878      	ldr	r0, [r7, #4]
 8103686:	f7ff ff2b 	bl	81034e0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 810368a:	4604      	mov	r4, r0
 810368c:	6878      	ldr	r0, [r7, #4]
 810368e:	f000 fad1 	bl	8103c34 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8103692:	4602      	mov	r2, r0
 8103694:	683b      	ldr	r3, [r7, #0]
 8103696:	4621      	mov	r1, r4
 8103698:	6878      	ldr	r0, [r7, #4]
 810369a:	f000 fad7 	bl	8103c4c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 810369e:	4603      	mov	r3, r0
 81036a0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 81036a2:	6878      	ldr	r0, [r7, #4]
 81036a4:	f000 f828 	bl	81036f8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81036a8:	4603      	mov	r3, r0
 81036aa:	60fb      	str	r3, [r7, #12]
 81036ac:	f107 020c 	add.w	r2, r7, #12
 81036b0:	f107 0308 	add.w	r3, r7, #8
 81036b4:	4611      	mov	r1, r2
 81036b6:	4618      	mov	r0, r3
 81036b8:	f7ff ff2d 	bl	8103516 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEES9_>
 81036bc:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 81036be:	2b00      	cmp	r3, #0
 81036c0:	d110      	bne.n	81036e4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 81036c2:	687c      	ldr	r4, [r7, #4]
 81036c4:	683b      	ldr	r3, [r7, #0]
 81036c6:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 81036c8:	68bb      	ldr	r3, [r7, #8]
 81036ca:	4618      	mov	r0, r3
 81036cc:	f000 faf1 	bl	8103cb2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81036d0:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	461a      	mov	r2, r3
 81036d6:	4629      	mov	r1, r5
 81036d8:	4620      	mov	r0, r4
 81036da:	f7ff ff4b 	bl	8103574 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 81036de:	4603      	mov	r3, r0
 81036e0:	2b00      	cmp	r3, #0
 81036e2:	d004      	beq.n	81036ee <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 81036e4:	6878      	ldr	r0, [r7, #4]
 81036e6:	f000 f807 	bl	81036f8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81036ea:	4603      	mov	r3, r0
 81036ec:	e000      	b.n	81036f0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 81036ee:	68bb      	ldr	r3, [r7, #8]
    }
 81036f0:	4618      	mov	r0, r3
 81036f2:	3710      	adds	r7, #16
 81036f4:	46bd      	mov	sp, r7
 81036f6:	bdb0      	pop	{r4, r5, r7, pc}

081036f8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81036f8:	b580      	push	{r7, lr}
 81036fa:	b084      	sub	sp, #16
 81036fc:	af00      	add	r7, sp, #0
 81036fe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8103700:	687b      	ldr	r3, [r7, #4]
 8103702:	1d1a      	adds	r2, r3, #4
 8103704:	f107 030c 	add.w	r3, r7, #12
 8103708:	4611      	mov	r1, r2
 810370a:	4618      	mov	r0, r3
 810370c:	f000 fa83 	bl	8103c16 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
 8103710:	68fb      	ldr	r3, [r7, #12]
 8103712:	4618      	mov	r0, r3
 8103714:	3710      	adds	r7, #16
 8103716:	46bd      	mov	sp, r7
 8103718:	bd80      	pop	{r7, pc}

0810371a <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>:
      _M_valptr()
 810371a:	b580      	push	{r7, lr}
 810371c:	b082      	sub	sp, #8
 810371e:	af00      	add	r7, sp, #0
 8103720:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8103722:	687b      	ldr	r3, [r7, #4]
 8103724:	3310      	adds	r3, #16
 8103726:	4618      	mov	r0, r3
 8103728:	f000 facf 	bl	8103cca <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE6_M_ptrEv>
 810372c:	4603      	mov	r3, r0
 810372e:	4618      	mov	r0, r3
 8103730:	3708      	adds	r7, #8
 8103732:	46bd      	mov	sp, r7
 8103734:	bd80      	pop	{r7, pc}
	...

08103738 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJRKhEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8103738:	b5b0      	push	{r4, r5, r7, lr}
 810373a:	b088      	sub	sp, #32
 810373c:	af00      	add	r7, sp, #0
 810373e:	6078      	str	r0, [r7, #4]
 8103740:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8103742:	6878      	ldr	r0, [r7, #4]
 8103744:	f7fe fee9 	bl	810251a <_ZNKSt5dequeIhSaIhEE4sizeEv>
 8103748:	4604      	mov	r4, r0
 810374a:	6878      	ldr	r0, [r7, #4]
 810374c:	f000 fad4 	bl	8103cf8 <_ZNKSt5dequeIhSaIhEE8max_sizeEv>
 8103750:	4603      	mov	r3, r0
 8103752:	429c      	cmp	r4, r3
 8103754:	bf0c      	ite	eq
 8103756:	2301      	moveq	r3, #1
 8103758:	2300      	movne	r3, #0
 810375a:	b2db      	uxtb	r3, r3
 810375c:	2b00      	cmp	r3, #0
 810375e:	d002      	beq.n	8103766 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJRKhEEEvDpOT_+0x2e>
	  __throw_length_error(
 8103760:	4821      	ldr	r0, [pc, #132]	@ (81037e8 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJRKhEEEvDpOT_+0xb0>)
 8103762:	f00b f80e 	bl	810e782 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8103766:	2101      	movs	r1, #1
 8103768:	6878      	ldr	r0, [r7, #4]
 810376a:	f000 fad6 	bl	8103d1a <_ZNSt5dequeIhSaIhEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 810376e:	687a      	ldr	r2, [r7, #4]
 8103770:	687b      	ldr	r3, [r7, #4]
 8103772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103774:	1d1c      	adds	r4, r3, #4
 8103776:	4610      	mov	r0, r2
 8103778:	f7fe f963 	bl	8101a42 <_ZNSt11_Deque_baseIhSaIhEE16_M_allocate_nodeEv>
 810377c:	4603      	mov	r3, r0
 810377e:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8103780:	687d      	ldr	r5, [r7, #4]
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	699c      	ldr	r4, [r3, #24]
 8103786:	6838      	ldr	r0, [r7, #0]
 8103788:	f000 faab 	bl	8103ce2 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 810378c:	4603      	mov	r3, r0
 810378e:	61fd      	str	r5, [r7, #28]
 8103790:	61bc      	str	r4, [r7, #24]
 8103792:	617b      	str	r3, [r7, #20]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8103794:	6978      	ldr	r0, [r7, #20]
 8103796:	f000 faa4 	bl	8103ce2 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 810379a:	4602      	mov	r2, r0
 810379c:	69fb      	ldr	r3, [r7, #28]
 810379e:	613b      	str	r3, [r7, #16]
 81037a0:	69bb      	ldr	r3, [r7, #24]
 81037a2:	60fb      	str	r3, [r7, #12]
 81037a4:	60ba      	str	r2, [r7, #8]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 81037a6:	68fb      	ldr	r3, [r7, #12]
 81037a8:	4619      	mov	r1, r3
 81037aa:	2001      	movs	r0, #1
 81037ac:	f7ff fc45 	bl	810303a <_ZnwjPv>
 81037b0:	4604      	mov	r4, r0
 81037b2:	68b8      	ldr	r0, [r7, #8]
 81037b4:	f000 fa95 	bl	8103ce2 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 81037b8:	4603      	mov	r3, r0
 81037ba:	781b      	ldrb	r3, [r3, #0]
 81037bc:	7023      	strb	r3, [r4, #0]
 81037be:	bf00      	nop
	}
 81037c0:	bf00      	nop
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	f103 0218 	add.w	r2, r3, #24
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81037cc:	3304      	adds	r3, #4
 81037ce:	4619      	mov	r1, r3
 81037d0:	4610      	mov	r0, r2
 81037d2:	f7fe f8dc 	bl	810198e <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	69da      	ldr	r2, [r3, #28]
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	619a      	str	r2, [r3, #24]
      }
 81037de:	bf00      	nop
 81037e0:	3720      	adds	r7, #32
 81037e2:	46bd      	mov	sp, r7
 81037e4:	bdb0      	pop	{r4, r5, r7, pc}
 81037e6:	bf00      	nop
 81037e8:	081114a8 	.word	0x081114a8

081037ec <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 81037ec:	b480      	push	{r7}
 81037ee:	b083      	sub	sp, #12
 81037f0:	af00      	add	r7, sp, #0
 81037f2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	68db      	ldr	r3, [r3, #12]
 81037f8:	4618      	mov	r0, r3
 81037fa:	370c      	adds	r7, #12
 81037fc:	46bd      	mov	sp, r7
 81037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103802:	4770      	bx	lr

08103804 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8103804:	b480      	push	{r7}
 8103806:	b083      	sub	sp, #12
 8103808:	af00      	add	r7, sp, #0
 810380a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 810380c:	687b      	ldr	r3, [r7, #4]
 810380e:	689b      	ldr	r3, [r3, #8]
 8103810:	4618      	mov	r0, r3
 8103812:	370c      	adds	r7, #12
 8103814:	46bd      	mov	sp, r7
 8103816:	f85d 7b04 	ldr.w	r7, [sp], #4
 810381a:	4770      	bx	lr

0810381c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 810381c:	b580      	push	{r7, lr}
 810381e:	b082      	sub	sp, #8
 8103820:	af00      	add	r7, sp, #0
 8103822:	6078      	str	r0, [r7, #4]
 8103824:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8103826:	6839      	ldr	r1, [r7, #0]
 8103828:	6878      	ldr	r0, [r7, #4]
 810382a:	f000 fa91 	bl	8103d50 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 810382e:	6839      	ldr	r1, [r7, #0]
 8103830:	6878      	ldr	r0, [r7, #4]
 8103832:	f000 faa6 	bl	8103d82 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8103836:	bf00      	nop
 8103838:	3708      	adds	r7, #8
 810383a:	46bd      	mov	sp, r7
 810383c:	bd80      	pop	{r7, pc}

0810383e <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 810383e:	b480      	push	{r7}
 8103840:	b083      	sub	sp, #12
 8103842:	af00      	add	r7, sp, #0
 8103844:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8103846:	687b      	ldr	r3, [r7, #4]
 8103848:	689b      	ldr	r3, [r3, #8]
 810384a:	4618      	mov	r0, r3
 810384c:	370c      	adds	r7, #12
 810384e:	46bd      	mov	sp, r7
 8103850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103854:	4770      	bx	lr

08103856 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8103856:	b590      	push	{r4, r7, lr}
 8103858:	b083      	sub	sp, #12
 810385a:	af00      	add	r7, sp, #0
 810385c:	6078      	str	r0, [r7, #4]
 810385e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8103860:	6878      	ldr	r0, [r7, #4]
 8103862:	f7ff fe3d 	bl	81034e0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8103866:	4604      	mov	r4, r0
 8103868:	6878      	ldr	r0, [r7, #4]
 810386a:	f000 f9e3 	bl	8103c34 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810386e:	4602      	mov	r2, r0
 8103870:	683b      	ldr	r3, [r7, #0]
 8103872:	4621      	mov	r1, r4
 8103874:	6878      	ldr	r0, [r7, #4]
 8103876:	f000 f9e9 	bl	8103c4c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 810387a:	4603      	mov	r3, r0
 810387c:	4618      	mov	r0, r3
 810387e:	370c      	adds	r7, #12
 8103880:	46bd      	mov	sp, r7
 8103882:	bd90      	pop	{r4, r7, pc}

08103884 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8103884:	b480      	push	{r7}
 8103886:	b083      	sub	sp, #12
 8103888:	af00      	add	r7, sp, #0
 810388a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 810388c:	bf00      	nop
 810388e:	4618      	mov	r0, r3
 8103890:	370c      	adds	r7, #12
 8103892:	46bd      	mov	sp, r7
 8103894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103898:	4770      	bx	lr

0810389a <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 810389a:	b580      	push	{r7, lr}
 810389c:	b082      	sub	sp, #8
 810389e:	af00      	add	r7, sp, #0
 81038a0:	6078      	str	r0, [r7, #4]
 81038a2:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	6839      	ldr	r1, [r7, #0]
 81038a8:	4618      	mov	r0, r3
 81038aa:	f000 fa82 	bl	8103db2 <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EEC1ES3_>
      { }
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	4618      	mov	r0, r3
 81038b2:	3708      	adds	r7, #8
 81038b4:	46bd      	mov	sp, r7
 81038b6:	bd80      	pop	{r7, pc}

081038b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81038b8:	b480      	push	{r7}
 81038ba:	b083      	sub	sp, #12
 81038bc:	af00      	add	r7, sp, #0
 81038be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	4618      	mov	r0, r3
 81038c4:	370c      	adds	r7, #12
 81038c6:	46bd      	mov	sp, r7
 81038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038cc:	4770      	bx	lr

081038ce <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81038ce:	b480      	push	{r7}
 81038d0:	b083      	sub	sp, #12
 81038d2:	af00      	add	r7, sp, #0
 81038d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	4618      	mov	r0, r3
 81038da:	370c      	adds	r7, #12
 81038dc:	46bd      	mov	sp, r7
 81038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038e2:	4770      	bx	lr

081038e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81038e4:	b480      	push	{r7}
 81038e6:	b083      	sub	sp, #12
 81038e8:	af00      	add	r7, sp, #0
 81038ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81038ec:	687b      	ldr	r3, [r7, #4]
 81038ee:	4618      	mov	r0, r3
 81038f0:	370c      	adds	r7, #12
 81038f2:	46bd      	mov	sp, r7
 81038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038f8:	4770      	bx	lr

081038fa <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 81038fa:	b5b0      	push	{r4, r5, r7, lr}
 81038fc:	b084      	sub	sp, #16
 81038fe:	af00      	add	r7, sp, #0
 8103900:	60f8      	str	r0, [r7, #12]
 8103902:	60b9      	str	r1, [r7, #8]
 8103904:	607a      	str	r2, [r7, #4]
 8103906:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8103908:	68fb      	ldr	r3, [r7, #12]
 810390a:	68ba      	ldr	r2, [r7, #8]
 810390c:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 810390e:	6878      	ldr	r0, [r7, #4]
 8103910:	f7ff ffd2 	bl	81038b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103914:	4604      	mov	r4, r0
 8103916:	6838      	ldr	r0, [r7, #0]
 8103918:	f7ff ffd9 	bl	81038ce <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810391c:	4605      	mov	r5, r0
 810391e:	6a38      	ldr	r0, [r7, #32]
 8103920:	f7ff ffe0 	bl	81038e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103924:	4603      	mov	r3, r0
 8103926:	462a      	mov	r2, r5
 8103928:	4621      	mov	r1, r4
 810392a:	68b8      	ldr	r0, [r7, #8]
 810392c:	f000 fa50 	bl	8103dd0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8103930:	4602      	mov	r2, r0
 8103932:	68fb      	ldr	r3, [r7, #12]
 8103934:	605a      	str	r2, [r3, #4]
	  { }
 8103936:	68fb      	ldr	r3, [r7, #12]
 8103938:	4618      	mov	r0, r3
 810393a:	3710      	adds	r7, #16
 810393c:	46bd      	mov	sp, r7
 810393e:	bdb0      	pop	{r4, r5, r7, pc}

08103940 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8103940:	b580      	push	{r7, lr}
 8103942:	b082      	sub	sp, #8
 8103944:	af00      	add	r7, sp, #0
 8103946:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	685b      	ldr	r3, [r3, #4]
 810394c:	2b00      	cmp	r3, #0
 810394e:	d007      	beq.n	8103960 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	681a      	ldr	r2, [r3, #0]
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	685b      	ldr	r3, [r3, #4]
 8103958:	4619      	mov	r1, r3
 810395a:	4610      	mov	r0, r2
 810395c:	f7ff ff5e 	bl	810381c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	4618      	mov	r0, r3
 8103964:	3708      	adds	r7, #8
 8103966:	46bd      	mov	sp, r7
 8103968:	bd80      	pop	{r7, pc}

0810396a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810396a:	b5b0      	push	{r4, r5, r7, lr}
 810396c:	b08c      	sub	sp, #48	@ 0x30
 810396e:	af00      	add	r7, sp, #0
 8103970:	60f8      	str	r0, [r7, #12]
 8103972:	60b9      	str	r1, [r7, #8]
 8103974:	607a      	str	r2, [r7, #4]
 8103976:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8103978:	1d3b      	adds	r3, r7, #4
 810397a:	4618      	mov	r0, r3
 810397c:	f000 fa4b 	bl	8103e16 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE13_M_const_castEv>
 8103980:	4603      	mov	r3, r0
 8103982:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8103984:	69bc      	ldr	r4, [r7, #24]
 8103986:	68b8      	ldr	r0, [r7, #8]
 8103988:	f000 f954 	bl	8103c34 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810398c:	4603      	mov	r3, r0
 810398e:	429c      	cmp	r4, r3
 8103990:	bf0c      	ite	eq
 8103992:	2301      	moveq	r3, #1
 8103994:	2300      	movne	r3, #0
 8103996:	b2db      	uxtb	r3, r3
 8103998:	2b00      	cmp	r3, #0
 810399a:	d032      	beq.n	8103a02 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 810399c:	68b8      	ldr	r0, [r7, #8]
 810399e:	f000 fa4b 	bl	8103e38 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 81039a2:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 81039a4:	2b00      	cmp	r3, #0
 81039a6:	d015      	beq.n	81039d4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 81039a8:	68bc      	ldr	r4, [r7, #8]
 81039aa:	68b8      	ldr	r0, [r7, #8]
 81039ac:	f000 fa50 	bl	8103e50 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81039b0:	4603      	mov	r3, r0
 81039b2:	681b      	ldr	r3, [r3, #0]
 81039b4:	4618      	mov	r0, r3
 81039b6:	f000 f97c 	bl	8103cb2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81039ba:	4603      	mov	r3, r0
 81039bc:	6819      	ldr	r1, [r3, #0]
 81039be:	683b      	ldr	r3, [r7, #0]
 81039c0:	681b      	ldr	r3, [r3, #0]
 81039c2:	461a      	mov	r2, r3
 81039c4:	4620      	mov	r0, r4
 81039c6:	f7ff fdd5 	bl	8103574 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 81039ca:	4603      	mov	r3, r0
 81039cc:	2b00      	cmp	r3, #0
 81039ce:	d001      	beq.n	81039d4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 81039d0:	2301      	movs	r3, #1
 81039d2:	e000      	b.n	81039d6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 81039d4:	2300      	movs	r3, #0
	  if (size() > 0
 81039d6:	2b00      	cmp	r3, #0
 81039d8:	d00c      	beq.n	81039f4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 81039da:	2300      	movs	r3, #0
 81039dc:	61fb      	str	r3, [r7, #28]
 81039de:	68b8      	ldr	r0, [r7, #8]
 81039e0:	f000 fa36 	bl	8103e50 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81039e4:	4602      	mov	r2, r0
 81039e6:	f107 031c 	add.w	r3, r7, #28
 81039ea:	4619      	mov	r1, r3
 81039ec:	68f8      	ldr	r0, [r7, #12]
 81039ee:	f000 fa3b 	bl	8103e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
 81039f2:	e0e5      	b.n	8103bc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 81039f4:	68fb      	ldr	r3, [r7, #12]
 81039f6:	683a      	ldr	r2, [r7, #0]
 81039f8:	68b9      	ldr	r1, [r7, #8]
 81039fa:	4618      	mov	r0, r3
 81039fc:	f000 fa49 	bl	8103e92 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8103a00:	e0de      	b.n	8103bc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8103a02:	68bc      	ldr	r4, [r7, #8]
 8103a04:	683b      	ldr	r3, [r7, #0]
 8103a06:	681d      	ldr	r5, [r3, #0]
 8103a08:	69bb      	ldr	r3, [r7, #24]
 8103a0a:	4618      	mov	r0, r3
 8103a0c:	f000 f951 	bl	8103cb2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8103a10:	4603      	mov	r3, r0
 8103a12:	681b      	ldr	r3, [r3, #0]
 8103a14:	461a      	mov	r2, r3
 8103a16:	4629      	mov	r1, r5
 8103a18:	4620      	mov	r0, r4
 8103a1a:	f7ff fdab 	bl	8103574 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 8103a1e:	4603      	mov	r3, r0
 8103a20:	2b00      	cmp	r3, #0
 8103a22:	d059      	beq.n	8103ad8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8103a24:	69bb      	ldr	r3, [r7, #24]
 8103a26:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8103a28:	69bc      	ldr	r4, [r7, #24]
 8103a2a:	68b8      	ldr	r0, [r7, #8]
 8103a2c:	f000 fabb 	bl	8103fa6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8103a30:	4603      	mov	r3, r0
 8103a32:	681b      	ldr	r3, [r3, #0]
 8103a34:	429c      	cmp	r4, r3
 8103a36:	bf0c      	ite	eq
 8103a38:	2301      	moveq	r3, #1
 8103a3a:	2300      	movne	r3, #0
 8103a3c:	b2db      	uxtb	r3, r3
 8103a3e:	2b00      	cmp	r3, #0
 8103a40:	d00d      	beq.n	8103a5e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8103a42:	68b8      	ldr	r0, [r7, #8]
 8103a44:	f000 faaf 	bl	8103fa6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8103a48:	4604      	mov	r4, r0
 8103a4a:	68b8      	ldr	r0, [r7, #8]
 8103a4c:	f000 faab 	bl	8103fa6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8103a50:	4603      	mov	r3, r0
 8103a52:	461a      	mov	r2, r3
 8103a54:	4621      	mov	r1, r4
 8103a56:	68f8      	ldr	r0, [r7, #12]
 8103a58:	f000 fab1 	bl	8103fbe <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8103a5c:	e0b0      	b.n	8103bc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8103a5e:	68bc      	ldr	r4, [r7, #8]
 8103a60:	f107 0314 	add.w	r3, r7, #20
 8103a64:	4618      	mov	r0, r3
 8103a66:	f000 fac3 	bl	8103ff0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEmmEv>
 8103a6a:	4603      	mov	r3, r0
 8103a6c:	681b      	ldr	r3, [r3, #0]
 8103a6e:	4618      	mov	r0, r3
 8103a70:	f000 f91f 	bl	8103cb2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8103a74:	4603      	mov	r3, r0
 8103a76:	6819      	ldr	r1, [r3, #0]
 8103a78:	683b      	ldr	r3, [r7, #0]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	461a      	mov	r2, r3
 8103a7e:	4620      	mov	r0, r4
 8103a80:	f7ff fd78 	bl	8103574 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 8103a84:	4603      	mov	r3, r0
 8103a86:	2b00      	cmp	r3, #0
 8103a88:	d01f      	beq.n	8103aca <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8103a8a:	697b      	ldr	r3, [r7, #20]
 8103a8c:	4618      	mov	r0, r3
 8103a8e:	f7ff fead 	bl	81037ec <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8103a92:	4603      	mov	r3, r0
 8103a94:	2b00      	cmp	r3, #0
 8103a96:	bf0c      	ite	eq
 8103a98:	2301      	moveq	r3, #1
 8103a9a:	2300      	movne	r3, #0
 8103a9c:	b2db      	uxtb	r3, r3
 8103a9e:	2b00      	cmp	r3, #0
 8103aa0:	d00a      	beq.n	8103ab8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8103aa2:	2300      	movs	r3, #0
 8103aa4:	623b      	str	r3, [r7, #32]
 8103aa6:	f107 0214 	add.w	r2, r7, #20
 8103aaa:	f107 0320 	add.w	r3, r7, #32
 8103aae:	4619      	mov	r1, r3
 8103ab0:	68f8      	ldr	r0, [r7, #12]
 8103ab2:	f000 f9d9 	bl	8103e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8103ab6:	e083      	b.n	8103bc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8103ab8:	f107 0218 	add.w	r2, r7, #24
 8103abc:	f107 0318 	add.w	r3, r7, #24
 8103ac0:	4619      	mov	r1, r3
 8103ac2:	68f8      	ldr	r0, [r7, #12]
 8103ac4:	f000 fa7b 	bl	8103fbe <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8103ac8:	e07a      	b.n	8103bc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8103aca:	68fb      	ldr	r3, [r7, #12]
 8103acc:	683a      	ldr	r2, [r7, #0]
 8103ace:	68b9      	ldr	r1, [r7, #8]
 8103ad0:	4618      	mov	r0, r3
 8103ad2:	f000 f9de 	bl	8103e92 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8103ad6:	e073      	b.n	8103bc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8103ad8:	68bc      	ldr	r4, [r7, #8]
 8103ada:	69bb      	ldr	r3, [r7, #24]
 8103adc:	4618      	mov	r0, r3
 8103ade:	f000 f8e8 	bl	8103cb2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8103ae2:	4603      	mov	r3, r0
 8103ae4:	6819      	ldr	r1, [r3, #0]
 8103ae6:	683b      	ldr	r3, [r7, #0]
 8103ae8:	681b      	ldr	r3, [r3, #0]
 8103aea:	461a      	mov	r2, r3
 8103aec:	4620      	mov	r0, r4
 8103aee:	f7ff fd41 	bl	8103574 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 8103af2:	4603      	mov	r3, r0
 8103af4:	2b00      	cmp	r3, #0
 8103af6:	d059      	beq.n	8103bac <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8103af8:	69bb      	ldr	r3, [r7, #24]
 8103afa:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8103afc:	69bc      	ldr	r4, [r7, #24]
 8103afe:	68b8      	ldr	r0, [r7, #8]
 8103b00:	f000 f9a6 	bl	8103e50 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8103b04:	4603      	mov	r3, r0
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	429c      	cmp	r4, r3
 8103b0a:	bf0c      	ite	eq
 8103b0c:	2301      	moveq	r3, #1
 8103b0e:	2300      	movne	r3, #0
 8103b10:	b2db      	uxtb	r3, r3
 8103b12:	2b00      	cmp	r3, #0
 8103b14:	d00c      	beq.n	8103b30 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8103b16:	2300      	movs	r3, #0
 8103b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8103b1a:	68b8      	ldr	r0, [r7, #8]
 8103b1c:	f000 f998 	bl	8103e50 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8103b20:	4602      	mov	r2, r0
 8103b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103b26:	4619      	mov	r1, r3
 8103b28:	68f8      	ldr	r0, [r7, #12]
 8103b2a:	f000 f99d 	bl	8103e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
 8103b2e:	e047      	b.n	8103bc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8103b30:	68bc      	ldr	r4, [r7, #8]
 8103b32:	683b      	ldr	r3, [r7, #0]
 8103b34:	681d      	ldr	r5, [r3, #0]
 8103b36:	f107 0310 	add.w	r3, r7, #16
 8103b3a:	4618      	mov	r0, r3
 8103b3c:	f000 fa69 	bl	8104012 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEppEv>
 8103b40:	4603      	mov	r3, r0
 8103b42:	681b      	ldr	r3, [r3, #0]
 8103b44:	4618      	mov	r0, r3
 8103b46:	f000 f8b4 	bl	8103cb2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8103b4a:	4603      	mov	r3, r0
 8103b4c:	681b      	ldr	r3, [r3, #0]
 8103b4e:	461a      	mov	r2, r3
 8103b50:	4629      	mov	r1, r5
 8103b52:	4620      	mov	r0, r4
 8103b54:	f7ff fd0e 	bl	8103574 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 8103b58:	4603      	mov	r3, r0
 8103b5a:	2b00      	cmp	r3, #0
 8103b5c:	d01f      	beq.n	8103b9e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8103b5e:	69bb      	ldr	r3, [r7, #24]
 8103b60:	4618      	mov	r0, r3
 8103b62:	f7ff fe43 	bl	81037ec <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8103b66:	4603      	mov	r3, r0
 8103b68:	2b00      	cmp	r3, #0
 8103b6a:	bf0c      	ite	eq
 8103b6c:	2301      	moveq	r3, #1
 8103b6e:	2300      	movne	r3, #0
 8103b70:	b2db      	uxtb	r3, r3
 8103b72:	2b00      	cmp	r3, #0
 8103b74:	d00a      	beq.n	8103b8c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8103b76:	2300      	movs	r3, #0
 8103b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8103b7a:	f107 0218 	add.w	r2, r7, #24
 8103b7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8103b82:	4619      	mov	r1, r3
 8103b84:	68f8      	ldr	r0, [r7, #12]
 8103b86:	f000 f96f 	bl	8103e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8103b8a:	e019      	b.n	8103bc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8103b8c:	f107 0210 	add.w	r2, r7, #16
 8103b90:	f107 0310 	add.w	r3, r7, #16
 8103b94:	4619      	mov	r1, r3
 8103b96:	68f8      	ldr	r0, [r7, #12]
 8103b98:	f000 fa11 	bl	8103fbe <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8103b9c:	e010      	b.n	8103bc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8103b9e:	68fb      	ldr	r3, [r7, #12]
 8103ba0:	683a      	ldr	r2, [r7, #0]
 8103ba2:	68b9      	ldr	r1, [r7, #8]
 8103ba4:	4618      	mov	r0, r3
 8103ba6:	f000 f974 	bl	8103e92 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8103baa:	e009      	b.n	8103bc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8103bac:	2300      	movs	r3, #0
 8103bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8103bb0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8103bb4:	f107 0318 	add.w	r3, r7, #24
 8103bb8:	4619      	mov	r1, r3
 8103bba:	68f8      	ldr	r0, [r7, #12]
 8103bbc:	f000 f954 	bl	8103e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8103bc0:	68f8      	ldr	r0, [r7, #12]
 8103bc2:	3730      	adds	r7, #48	@ 0x30
 8103bc4:	46bd      	mov	sp, r7
 8103bc6:	bdb0      	pop	{r4, r5, r7, pc}

08103bc8 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 8103bc8:	b580      	push	{r7, lr}
 8103bca:	b082      	sub	sp, #8
 8103bcc:	af00      	add	r7, sp, #0
 8103bce:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	685b      	ldr	r3, [r3, #4]
 8103bd4:	4618      	mov	r0, r3
 8103bd6:	f000 fa2d 	bl	8104034 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8103bda:	4603      	mov	r3, r0
 8103bdc:	4618      	mov	r0, r3
 8103bde:	3708      	adds	r7, #8
 8103be0:	46bd      	mov	sp, r7
 8103be2:	bd80      	pop	{r7, pc}

08103be4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8103be4:	b580      	push	{r7, lr}
 8103be6:	b086      	sub	sp, #24
 8103be8:	af00      	add	r7, sp, #0
 8103bea:	60f8      	str	r0, [r7, #12]
 8103bec:	1d3b      	adds	r3, r7, #4
 8103bee:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8103bf2:	68fb      	ldr	r3, [r7, #12]
 8103bf4:	6818      	ldr	r0, [r3, #0]
 8103bf6:	6879      	ldr	r1, [r7, #4]
 8103bf8:	68ba      	ldr	r2, [r7, #8]
 8103bfa:	68fb      	ldr	r3, [r7, #12]
 8103bfc:	685b      	ldr	r3, [r3, #4]
 8103bfe:	f000 fa2c 	bl	810405a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8103c02:	4603      	mov	r3, r0
 8103c04:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 8103c06:	68fb      	ldr	r3, [r7, #12]
 8103c08:	2200      	movs	r2, #0
 8103c0a:	605a      	str	r2, [r3, #4]
	  return __it;
 8103c0c:	697b      	ldr	r3, [r7, #20]
	}
 8103c0e:	4618      	mov	r0, r3
 8103c10:	3718      	adds	r7, #24
 8103c12:	46bd      	mov	sp, r7
 8103c14:	bd80      	pop	{r7, pc}

08103c16 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8103c16:	b480      	push	{r7}
 8103c18:	b083      	sub	sp, #12
 8103c1a:	af00      	add	r7, sp, #0
 8103c1c:	6078      	str	r0, [r7, #4]
 8103c1e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8103c20:	687b      	ldr	r3, [r7, #4]
 8103c22:	683a      	ldr	r2, [r7, #0]
 8103c24:	601a      	str	r2, [r3, #0]
 8103c26:	687b      	ldr	r3, [r7, #4]
 8103c28:	4618      	mov	r0, r3
 8103c2a:	370c      	adds	r7, #12
 8103c2c:	46bd      	mov	sp, r7
 8103c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c32:	4770      	bx	lr

08103c34 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8103c34:	b480      	push	{r7}
 8103c36:	b083      	sub	sp, #12
 8103c38:	af00      	add	r7, sp, #0
 8103c3a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8103c3c:	687b      	ldr	r3, [r7, #4]
 8103c3e:	3304      	adds	r3, #4
 8103c40:	4618      	mov	r0, r3
 8103c42:	370c      	adds	r7, #12
 8103c44:	46bd      	mov	sp, r7
 8103c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c4a:	4770      	bx	lr

08103c4c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8103c4c:	b590      	push	{r4, r7, lr}
 8103c4e:	b087      	sub	sp, #28
 8103c50:	af00      	add	r7, sp, #0
 8103c52:	60f8      	str	r0, [r7, #12]
 8103c54:	60b9      	str	r1, [r7, #8]
 8103c56:	607a      	str	r2, [r7, #4]
 8103c58:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8103c5a:	e01c      	b.n	8103c96 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x4a>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8103c5c:	68fc      	ldr	r4, [r7, #12]
 8103c5e:	68b8      	ldr	r0, [r7, #8]
 8103c60:	f000 f9e8 	bl	8104034 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8103c64:	4603      	mov	r3, r0
 8103c66:	6819      	ldr	r1, [r3, #0]
 8103c68:	683b      	ldr	r3, [r7, #0]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	461a      	mov	r2, r3
 8103c6e:	4620      	mov	r0, r4
 8103c70:	f7ff fc80 	bl	8103574 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 8103c74:	4603      	mov	r3, r0
 8103c76:	f083 0301 	eor.w	r3, r3, #1
 8103c7a:	b2db      	uxtb	r3, r3
 8103c7c:	2b00      	cmp	r3, #0
 8103c7e:	d006      	beq.n	8103c8e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x42>
	  __y = __x, __x = _S_left(__x);
 8103c80:	68bb      	ldr	r3, [r7, #8]
 8103c82:	607b      	str	r3, [r7, #4]
 8103c84:	68b8      	ldr	r0, [r7, #8]
 8103c86:	f7ff fdbd 	bl	8103804 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8103c8a:	60b8      	str	r0, [r7, #8]
 8103c8c:	e003      	b.n	8103c96 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x4a>
	  __x = _S_right(__x);
 8103c8e:	68b8      	ldr	r0, [r7, #8]
 8103c90:	f7ff fdac 	bl	81037ec <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8103c94:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8103c96:	68bb      	ldr	r3, [r7, #8]
 8103c98:	2b00      	cmp	r3, #0
 8103c9a:	d1df      	bne.n	8103c5c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 8103c9c:	f107 0314 	add.w	r3, r7, #20
 8103ca0:	6879      	ldr	r1, [r7, #4]
 8103ca2:	4618      	mov	r0, r3
 8103ca4:	f7ff ffb7 	bl	8103c16 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
 8103ca8:	697b      	ldr	r3, [r7, #20]
    }
 8103caa:	4618      	mov	r0, r3
 8103cac:	371c      	adds	r7, #28
 8103cae:	46bd      	mov	sp, r7
 8103cb0:	bd90      	pop	{r4, r7, pc}

08103cb2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8103cb2:	b580      	push	{r7, lr}
 8103cb4:	b082      	sub	sp, #8
 8103cb6:	af00      	add	r7, sp, #0
 8103cb8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8103cba:	6878      	ldr	r0, [r7, #4]
 8103cbc:	f000 f9ba 	bl	8104034 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8103cc0:	4603      	mov	r3, r0
 8103cc2:	4618      	mov	r0, r3
 8103cc4:	3708      	adds	r7, #8
 8103cc6:	46bd      	mov	sp, r7
 8103cc8:	bd80      	pop	{r7, pc}

08103cca <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8103cca:	b580      	push	{r7, lr}
 8103ccc:	b082      	sub	sp, #8
 8103cce:	af00      	add	r7, sp, #0
 8103cd0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8103cd2:	6878      	ldr	r0, [r7, #4]
 8103cd4:	f000 fa00 	bl	81040d8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE7_M_addrEv>
 8103cd8:	4603      	mov	r3, r0
 8103cda:	4618      	mov	r0, r3
 8103cdc:	3708      	adds	r7, #8
 8103cde:	46bd      	mov	sp, r7
 8103ce0:	bd80      	pop	{r7, pc}

08103ce2 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103ce2:	b480      	push	{r7}
 8103ce4:	b083      	sub	sp, #12
 8103ce6:	af00      	add	r7, sp, #0
 8103ce8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	4618      	mov	r0, r3
 8103cee:	370c      	adds	r7, #12
 8103cf0:	46bd      	mov	sp, r7
 8103cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cf6:	4770      	bx	lr

08103cf8 <_ZNKSt5dequeIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8103cf8:	b580      	push	{r7, lr}
 8103cfa:	b082      	sub	sp, #8
 8103cfc:	af00      	add	r7, sp, #0
 8103cfe:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8103d00:	687b      	ldr	r3, [r7, #4]
 8103d02:	4618      	mov	r0, r3
 8103d04:	f7fd febb 	bl	8101a7e <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8103d08:	4603      	mov	r3, r0
 8103d0a:	4618      	mov	r0, r3
 8103d0c:	f000 f9ef 	bl	81040ee <_ZNSt5dequeIhSaIhEE11_S_max_sizeERKS0_>
 8103d10:	4603      	mov	r3, r0
 8103d12:	4618      	mov	r0, r3
 8103d14:	3708      	adds	r7, #8
 8103d16:	46bd      	mov	sp, r7
 8103d18:	bd80      	pop	{r7, pc}

08103d1a <_ZNSt5dequeIhSaIhEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8103d1a:	b580      	push	{r7, lr}
 8103d1c:	b082      	sub	sp, #8
 8103d1e:	af00      	add	r7, sp, #0
 8103d20:	6078      	str	r0, [r7, #4]
 8103d22:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8103d24:	683b      	ldr	r3, [r7, #0]
 8103d26:	1c5a      	adds	r2, r3, #1
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8103d2c:	6879      	ldr	r1, [r7, #4]
 8103d2e:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 8103d30:	6879      	ldr	r1, [r7, #4]
 8103d32:	6809      	ldr	r1, [r1, #0]
 8103d34:	1a41      	subs	r1, r0, r1
 8103d36:	1089      	asrs	r1, r1, #2
 8103d38:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8103d3a:	429a      	cmp	r2, r3
 8103d3c:	d904      	bls.n	8103d48 <_ZNSt5dequeIhSaIhEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8103d3e:	2200      	movs	r2, #0
 8103d40:	6839      	ldr	r1, [r7, #0]
 8103d42:	6878      	ldr	r0, [r7, #4]
 8103d44:	f000 f9f3 	bl	810412e <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb>
      }
 8103d48:	bf00      	nop
 8103d4a:	3708      	adds	r7, #8
 8103d4c:	46bd      	mov	sp, r7
 8103d4e:	bd80      	pop	{r7, pc}

08103d50 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8103d50:	b590      	push	{r4, r7, lr}
 8103d52:	b087      	sub	sp, #28
 8103d54:	af00      	add	r7, sp, #0
 8103d56:	6078      	str	r0, [r7, #4]
 8103d58:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8103d5a:	6878      	ldr	r0, [r7, #4]
 8103d5c:	f000 fa81 	bl	8104262 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8103d60:	4604      	mov	r4, r0
 8103d62:	6838      	ldr	r0, [r7, #0]
 8103d64:	f7ff fcd9 	bl	810371a <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>
 8103d68:	4603      	mov	r3, r0
 8103d6a:	617c      	str	r4, [r7, #20]
 8103d6c:	613b      	str	r3, [r7, #16]
 8103d6e:	697b      	ldr	r3, [r7, #20]
 8103d70:	60fb      	str	r3, [r7, #12]
 8103d72:	693b      	ldr	r3, [r7, #16]
 8103d74:	60bb      	str	r3, [r7, #8]
	{ __p->~_Up(); }
 8103d76:	bf00      	nop
	}
 8103d78:	bf00      	nop
      }
 8103d7a:	bf00      	nop
 8103d7c:	371c      	adds	r7, #28
 8103d7e:	46bd      	mov	sp, r7
 8103d80:	bd90      	pop	{r4, r7, pc}

08103d82 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8103d82:	b580      	push	{r7, lr}
 8103d84:	b086      	sub	sp, #24
 8103d86:	af00      	add	r7, sp, #0
 8103d88:	6078      	str	r0, [r7, #4]
 8103d8a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8103d8c:	6878      	ldr	r0, [r7, #4]
 8103d8e:	f000 fa68 	bl	8104262 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8103d92:	4603      	mov	r3, r0
 8103d94:	617b      	str	r3, [r7, #20]
 8103d96:	683b      	ldr	r3, [r7, #0]
 8103d98:	613b      	str	r3, [r7, #16]
 8103d9a:	2301      	movs	r3, #1
 8103d9c:	60fb      	str	r3, [r7, #12]
      { __a.deallocate(__p, __n); }
 8103d9e:	68fa      	ldr	r2, [r7, #12]
 8103da0:	6939      	ldr	r1, [r7, #16]
 8103da2:	6978      	ldr	r0, [r7, #20]
 8103da4:	f000 fb6f 	bl	8104486 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE10deallocateEPS8_j>
 8103da8:	bf00      	nop
 8103daa:	bf00      	nop
 8103dac:	3718      	adds	r7, #24
 8103dae:	46bd      	mov	sp, r7
 8103db0:	bd80      	pop	{r7, pc}

08103db2 <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8103db2:	b480      	push	{r7}
 8103db4:	b083      	sub	sp, #12
 8103db6:	af00      	add	r7, sp, #0
 8103db8:	6078      	str	r0, [r7, #4]
 8103dba:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	683a      	ldr	r2, [r7, #0]
 8103dc0:	601a      	str	r2, [r3, #0]
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	4618      	mov	r0, r3
 8103dc6:	370c      	adds	r7, #12
 8103dc8:	46bd      	mov	sp, r7
 8103dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dce:	4770      	bx	lr

08103dd0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8103dd0:	b5b0      	push	{r4, r5, r7, lr}
 8103dd2:	b088      	sub	sp, #32
 8103dd4:	af02      	add	r7, sp, #8
 8103dd6:	60f8      	str	r0, [r7, #12]
 8103dd8:	60b9      	str	r1, [r7, #8]
 8103dda:	607a      	str	r2, [r7, #4]
 8103ddc:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8103dde:	68f8      	ldr	r0, [r7, #12]
 8103de0:	f000 fa4a 	bl	8104278 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8103de4:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8103de6:	68b8      	ldr	r0, [r7, #8]
 8103de8:	f7ff fd66 	bl	81038b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103dec:	4604      	mov	r4, r0
 8103dee:	6878      	ldr	r0, [r7, #4]
 8103df0:	f7ff fd6d 	bl	81038ce <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8103df4:	4605      	mov	r5, r0
 8103df6:	6838      	ldr	r0, [r7, #0]
 8103df8:	f7ff fd74 	bl	81038e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103dfc:	4603      	mov	r3, r0
 8103dfe:	9300      	str	r3, [sp, #0]
 8103e00:	462b      	mov	r3, r5
 8103e02:	4622      	mov	r2, r4
 8103e04:	6979      	ldr	r1, [r7, #20]
 8103e06:	68f8      	ldr	r0, [r7, #12]
 8103e08:	f000 fa4c 	bl	81042a4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8103e0c:	697b      	ldr	r3, [r7, #20]
	}
 8103e0e:	4618      	mov	r0, r3
 8103e10:	3718      	adds	r7, #24
 8103e12:	46bd      	mov	sp, r7
 8103e14:	bdb0      	pop	{r4, r5, r7, pc}

08103e16 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8103e16:	b580      	push	{r7, lr}
 8103e18:	b084      	sub	sp, #16
 8103e1a:	af00      	add	r7, sp, #0
 8103e1c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	681a      	ldr	r2, [r3, #0]
 8103e22:	f107 030c 	add.w	r3, r7, #12
 8103e26:	4611      	mov	r1, r2
 8103e28:	4618      	mov	r0, r3
 8103e2a:	f7ff fef4 	bl	8103c16 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
 8103e2e:	68fb      	ldr	r3, [r7, #12]
 8103e30:	4618      	mov	r0, r3
 8103e32:	3710      	adds	r7, #16
 8103e34:	46bd      	mov	sp, r7
 8103e36:	bd80      	pop	{r7, pc}

08103e38 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8103e38:	b480      	push	{r7}
 8103e3a:	b083      	sub	sp, #12
 8103e3c:	af00      	add	r7, sp, #0
 8103e3e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	695b      	ldr	r3, [r3, #20]
 8103e44:	4618      	mov	r0, r3
 8103e46:	370c      	adds	r7, #12
 8103e48:	46bd      	mov	sp, r7
 8103e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e4e:	4770      	bx	lr

08103e50 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8103e50:	b480      	push	{r7}
 8103e52:	b083      	sub	sp, #12
 8103e54:	af00      	add	r7, sp, #0
 8103e56:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8103e58:	687b      	ldr	r3, [r7, #4]
 8103e5a:	3310      	adds	r3, #16
 8103e5c:	4618      	mov	r0, r3
 8103e5e:	370c      	adds	r7, #12
 8103e60:	46bd      	mov	sp, r7
 8103e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e66:	4770      	bx	lr

08103e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
	       enable_if<_PCCP::template
			   _ConstructiblePair<_U1, _U2>()
	                 && _PCCP::template
			   _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
 8103e68:	b480      	push	{r7}
 8103e6a:	b085      	sub	sp, #20
 8103e6c:	af00      	add	r7, sp, #0
 8103e6e:	60f8      	str	r0, [r7, #12]
 8103e70:	60b9      	str	r1, [r7, #8]
 8103e72:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8103e74:	68bb      	ldr	r3, [r7, #8]
 8103e76:	681a      	ldr	r2, [r3, #0]
 8103e78:	68fb      	ldr	r3, [r7, #12]
 8103e7a:	601a      	str	r2, [r3, #0]
 8103e7c:	687b      	ldr	r3, [r7, #4]
 8103e7e:	681a      	ldr	r2, [r3, #0]
 8103e80:	68fb      	ldr	r3, [r7, #12]
 8103e82:	605a      	str	r2, [r3, #4]
 8103e84:	68fb      	ldr	r3, [r7, #12]
 8103e86:	4618      	mov	r0, r3
 8103e88:	3714      	adds	r7, #20
 8103e8a:	46bd      	mov	sp, r7
 8103e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e90:	4770      	bx	lr

08103e92 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8103e92:	b5b0      	push	{r4, r5, r7, lr}
 8103e94:	b08a      	sub	sp, #40	@ 0x28
 8103e96:	af00      	add	r7, sp, #0
 8103e98:	60f8      	str	r0, [r7, #12]
 8103e9a:	60b9      	str	r1, [r7, #8]
 8103e9c:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8103e9e:	68b8      	ldr	r0, [r7, #8]
 8103ea0:	f7ff fb1e 	bl	81034e0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8103ea4:	4603      	mov	r3, r0
 8103ea6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8103ea8:	68b8      	ldr	r0, [r7, #8]
 8103eaa:	f7ff fec3 	bl	8103c34 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8103eae:	4603      	mov	r3, r0
 8103eb0:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8103eb2:	2301      	movs	r3, #1
 8103eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8103eb8:	e022      	b.n	8103f00 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 8103eba:	69bb      	ldr	r3, [r7, #24]
 8103ebc:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8103ebe:	68bc      	ldr	r4, [r7, #8]
 8103ec0:	687b      	ldr	r3, [r7, #4]
 8103ec2:	681d      	ldr	r5, [r3, #0]
 8103ec4:	69bb      	ldr	r3, [r7, #24]
 8103ec6:	4618      	mov	r0, r3
 8103ec8:	f000 f8b4 	bl	8104034 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8103ecc:	4603      	mov	r3, r0
 8103ece:	681b      	ldr	r3, [r3, #0]
 8103ed0:	461a      	mov	r2, r3
 8103ed2:	4629      	mov	r1, r5
 8103ed4:	4620      	mov	r0, r4
 8103ed6:	f7ff fb4d 	bl	8103574 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 8103eda:	4603      	mov	r3, r0
 8103edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8103ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8103ee4:	2b00      	cmp	r3, #0
 8103ee6:	d005      	beq.n	8103ef4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x62>
 8103ee8:	69bb      	ldr	r3, [r7, #24]
 8103eea:	4618      	mov	r0, r3
 8103eec:	f7ff fc8a 	bl	8103804 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8103ef0:	4603      	mov	r3, r0
 8103ef2:	e004      	b.n	8103efe <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6c>
 8103ef4:	69bb      	ldr	r3, [r7, #24]
 8103ef6:	4618      	mov	r0, r3
 8103ef8:	f7ff fc78 	bl	81037ec <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8103efc:	4603      	mov	r3, r0
 8103efe:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8103f00:	69bb      	ldr	r3, [r7, #24]
 8103f02:	2b00      	cmp	r3, #0
 8103f04:	d1d9      	bne.n	8103eba <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 8103f06:	697a      	ldr	r2, [r7, #20]
 8103f08:	f107 0310 	add.w	r3, r7, #16
 8103f0c:	4611      	mov	r1, r2
 8103f0e:	4618      	mov	r0, r3
 8103f10:	f7ff fe81 	bl	8103c16 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8103f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8103f18:	2b00      	cmp	r3, #0
 8103f1a:	d01d      	beq.n	8103f58 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8103f1c:	68b8      	ldr	r0, [r7, #8]
 8103f1e:	f000 fa1f 	bl	8104360 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8103f22:	4603      	mov	r3, r0
 8103f24:	61fb      	str	r3, [r7, #28]
 8103f26:	f107 021c 	add.w	r2, r7, #28
 8103f2a:	f107 0310 	add.w	r3, r7, #16
 8103f2e:	4611      	mov	r1, r2
 8103f30:	4618      	mov	r0, r3
 8103f32:	f7ff faf0 	bl	8103516 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEES9_>
 8103f36:	4603      	mov	r3, r0
 8103f38:	2b00      	cmp	r3, #0
 8103f3a:	d008      	beq.n	8103f4e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8103f3c:	f107 0214 	add.w	r2, r7, #20
 8103f40:	f107 0318 	add.w	r3, r7, #24
 8103f44:	4619      	mov	r1, r3
 8103f46:	68f8      	ldr	r0, [r7, #12]
 8103f48:	f000 fa1b 	bl	8104382 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP20__UART_HandleTypeDefP12UartEndpointEERS1_Lb1EEEOT_OT0_>
 8103f4c:	e027      	b.n	8103f9e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8103f4e:	f107 0310 	add.w	r3, r7, #16
 8103f52:	4618      	mov	r0, r3
 8103f54:	f000 f84c 	bl	8103ff0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8103f58:	68bc      	ldr	r4, [r7, #8]
 8103f5a:	693b      	ldr	r3, [r7, #16]
 8103f5c:	4618      	mov	r0, r3
 8103f5e:	f7ff fea8 	bl	8103cb2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8103f62:	4603      	mov	r3, r0
 8103f64:	6819      	ldr	r1, [r3, #0]
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	681b      	ldr	r3, [r3, #0]
 8103f6a:	461a      	mov	r2, r3
 8103f6c:	4620      	mov	r0, r4
 8103f6e:	f7ff fb01 	bl	8103574 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 8103f72:	4603      	mov	r3, r0
 8103f74:	2b00      	cmp	r3, #0
 8103f76:	d008      	beq.n	8103f8a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8103f78:	f107 0214 	add.w	r2, r7, #20
 8103f7c:	f107 0318 	add.w	r3, r7, #24
 8103f80:	4619      	mov	r1, r3
 8103f82:	68f8      	ldr	r0, [r7, #12]
 8103f84:	f000 f9fd 	bl	8104382 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP20__UART_HandleTypeDefP12UartEndpointEERS1_Lb1EEEOT_OT0_>
 8103f88:	e009      	b.n	8103f9e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8103f8a:	2300      	movs	r3, #0
 8103f8c:	623b      	str	r3, [r7, #32]
 8103f8e:	f107 0220 	add.w	r2, r7, #32
 8103f92:	f107 0310 	add.w	r3, r7, #16
 8103f96:	4619      	mov	r1, r3
 8103f98:	68f8      	ldr	r0, [r7, #12]
 8103f9a:	f7ff ff65 	bl	8103e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8103f9e:	68f8      	ldr	r0, [r7, #12]
 8103fa0:	3728      	adds	r7, #40	@ 0x28
 8103fa2:	46bd      	mov	sp, r7
 8103fa4:	bdb0      	pop	{r4, r5, r7, pc}

08103fa6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8103fa6:	b480      	push	{r7}
 8103fa8:	b083      	sub	sp, #12
 8103faa:	af00      	add	r7, sp, #0
 8103fac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	330c      	adds	r3, #12
 8103fb2:	4618      	mov	r0, r3
 8103fb4:	370c      	adds	r7, #12
 8103fb6:	46bd      	mov	sp, r7
 8103fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fbc:	4770      	bx	lr

08103fbe <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8103fbe:	b580      	push	{r7, lr}
 8103fc0:	b084      	sub	sp, #16
 8103fc2:	af00      	add	r7, sp, #0
 8103fc4:	60f8      	str	r0, [r7, #12]
 8103fc6:	60b9      	str	r1, [r7, #8]
 8103fc8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8103fca:	68b8      	ldr	r0, [r7, #8]
 8103fcc:	f000 f9f2 	bl	81043b4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8103fd0:	4603      	mov	r3, r0
 8103fd2:	681a      	ldr	r2, [r3, #0]
 8103fd4:	68fb      	ldr	r3, [r7, #12]
 8103fd6:	601a      	str	r2, [r3, #0]
 8103fd8:	6878      	ldr	r0, [r7, #4]
 8103fda:	f000 f9eb 	bl	81043b4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8103fde:	4603      	mov	r3, r0
 8103fe0:	681a      	ldr	r2, [r3, #0]
 8103fe2:	68fb      	ldr	r3, [r7, #12]
 8103fe4:	605a      	str	r2, [r3, #4]
	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 8103fe6:	68fb      	ldr	r3, [r7, #12]
 8103fe8:	4618      	mov	r0, r3
 8103fea:	3710      	adds	r7, #16
 8103fec:	46bd      	mov	sp, r7
 8103fee:	bd80      	pop	{r7, pc}

08103ff0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8103ff0:	b580      	push	{r7, lr}
 8103ff2:	b082      	sub	sp, #8
 8103ff4:	af00      	add	r7, sp, #0
 8103ff6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	4618      	mov	r0, r3
 8103ffe:	f00a fb54 	bl	810e6aa <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8104002:	4602      	mov	r2, r0
 8104004:	687b      	ldr	r3, [r7, #4]
 8104006:	601a      	str	r2, [r3, #0]
	return *this;
 8104008:	687b      	ldr	r3, [r7, #4]
      }
 810400a:	4618      	mov	r0, r3
 810400c:	3708      	adds	r7, #8
 810400e:	46bd      	mov	sp, r7
 8104010:	bd80      	pop	{r7, pc}

08104012 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8104012:	b580      	push	{r7, lr}
 8104014:	b082      	sub	sp, #8
 8104016:	af00      	add	r7, sp, #0
 8104018:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 810401a:	687b      	ldr	r3, [r7, #4]
 810401c:	681b      	ldr	r3, [r3, #0]
 810401e:	4618      	mov	r0, r3
 8104020:	f00a fb41 	bl	810e6a6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8104024:	4602      	mov	r2, r0
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	601a      	str	r2, [r3, #0]
	return *this;
 810402a:	687b      	ldr	r3, [r7, #4]
      }
 810402c:	4618      	mov	r0, r3
 810402e:	3708      	adds	r7, #8
 8104030:	46bd      	mov	sp, r7
 8104032:	bd80      	pop	{r7, pc}

08104034 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8104034:	b580      	push	{r7, lr}
 8104036:	b084      	sub	sp, #16
 8104038:	af00      	add	r7, sp, #0
 810403a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 810403c:	6878      	ldr	r0, [r7, #4]
 810403e:	f000 f9c4 	bl	81043ca <_ZNKSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>
 8104042:	4602      	mov	r2, r0
 8104044:	f107 030c 	add.w	r3, r7, #12
 8104048:	4611      	mov	r1, r2
 810404a:	4618      	mov	r0, r3
 810404c:	f000 f9cb 	bl	81043e6 <_ZNKSt10_Select1stISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEclERKS6_>
 8104050:	4603      	mov	r3, r0
      }
 8104052:	4618      	mov	r0, r3
 8104054:	3710      	adds	r7, #16
 8104056:	46bd      	mov	sp, r7
 8104058:	bd80      	pop	{r7, pc}

0810405a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810405a:	b5b0      	push	{r4, r5, r7, lr}
 810405c:	b086      	sub	sp, #24
 810405e:	af00      	add	r7, sp, #0
 8104060:	60f8      	str	r0, [r7, #12]
 8104062:	60b9      	str	r1, [r7, #8]
 8104064:	607a      	str	r2, [r7, #4]
 8104066:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8104068:	68bb      	ldr	r3, [r7, #8]
 810406a:	2b00      	cmp	r3, #0
 810406c:	d119      	bne.n	81040a2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 810406e:	68f8      	ldr	r0, [r7, #12]
 8104070:	f7ff fde0 	bl	8103c34 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8104074:	4602      	mov	r2, r0
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	4293      	cmp	r3, r2
 810407a:	d012      	beq.n	81040a2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 810407c:	68fc      	ldr	r4, [r7, #12]
 810407e:	6838      	ldr	r0, [r7, #0]
 8104080:	f7ff ffd8 	bl	8104034 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8104084:	4603      	mov	r3, r0
 8104086:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8104088:	6878      	ldr	r0, [r7, #4]
 810408a:	f7ff fe12 	bl	8103cb2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810408e:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8104090:	681b      	ldr	r3, [r3, #0]
 8104092:	461a      	mov	r2, r3
 8104094:	4629      	mov	r1, r5
 8104096:	4620      	mov	r0, r4
 8104098:	f7ff fa6c 	bl	8103574 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 810409c:	4603      	mov	r3, r0
 810409e:	2b00      	cmp	r3, #0
 81040a0:	d001      	beq.n	81040a6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 81040a2:	2301      	movs	r3, #1
 81040a4:	e000      	b.n	81040a8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 81040a6:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 81040a8:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 81040aa:	68fb      	ldr	r3, [r7, #12]
 81040ac:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 81040ae:	7df8      	ldrb	r0, [r7, #23]
 81040b0:	687a      	ldr	r2, [r7, #4]
 81040b2:	6839      	ldr	r1, [r7, #0]
 81040b4:	f00a fafb 	bl	810e6ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 81040b8:	68fb      	ldr	r3, [r7, #12]
 81040ba:	695b      	ldr	r3, [r3, #20]
 81040bc:	1c5a      	adds	r2, r3, #1
 81040be:	68fb      	ldr	r3, [r7, #12]
 81040c0:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 81040c2:	f107 0310 	add.w	r3, r7, #16
 81040c6:	6839      	ldr	r1, [r7, #0]
 81040c8:	4618      	mov	r0, r3
 81040ca:	f7ff fda4 	bl	8103c16 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
 81040ce:	693b      	ldr	r3, [r7, #16]
    }
 81040d0:	4618      	mov	r0, r3
 81040d2:	3718      	adds	r7, #24
 81040d4:	46bd      	mov	sp, r7
 81040d6:	bdb0      	pop	{r4, r5, r7, pc}

081040d8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE7_M_addrEv>:
      _M_addr() noexcept
 81040d8:	b480      	push	{r7}
 81040da:	b083      	sub	sp, #12
 81040dc:	af00      	add	r7, sp, #0
 81040de:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 81040e0:	687b      	ldr	r3, [r7, #4]
 81040e2:	4618      	mov	r0, r3
 81040e4:	370c      	adds	r7, #12
 81040e6:	46bd      	mov	sp, r7
 81040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040ec:	4770      	bx	lr

081040ee <_ZNSt5dequeIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 81040ee:	b580      	push	{r7, lr}
 81040f0:	b088      	sub	sp, #32
 81040f2:	af00      	add	r7, sp, #0
 81040f4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 81040f6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 81040fa:	613b      	str	r3, [r7, #16]
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	61fb      	str	r3, [r7, #28]
 8104100:	69fb      	ldr	r3, [r7, #28]
 8104102:	61bb      	str	r3, [r7, #24]
 8104104:	69bb      	ldr	r3, [r7, #24]
 8104106:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8104108:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
      { return _M_max_size(); }
 810410c:	bf00      	nop
	return __a.max_size();
 810410e:	bf00      	nop
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8104110:	60fb      	str	r3, [r7, #12]
	return (std::min)(__diffmax, __allocmax);
 8104112:	f107 020c 	add.w	r2, r7, #12
 8104116:	f107 0310 	add.w	r3, r7, #16
 810411a:	4611      	mov	r1, r2
 810411c:	4618      	mov	r0, r3
 810411e:	f000 f96e 	bl	81043fe <_ZSt3minIjERKT_S2_S2_>
 8104122:	4603      	mov	r3, r0
 8104124:	681b      	ldr	r3, [r3, #0]
      }
 8104126:	4618      	mov	r0, r3
 8104128:	3720      	adds	r7, #32
 810412a:	46bd      	mov	sp, r7
 810412c:	bd80      	pop	{r7, pc}

0810412e <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 810412e:	b590      	push	{r4, r7, lr}
 8104130:	b08b      	sub	sp, #44	@ 0x2c
 8104132:	af00      	add	r7, sp, #0
 8104134:	60f8      	str	r0, [r7, #12]
 8104136:	60b9      	str	r1, [r7, #8]
 8104138:	4613      	mov	r3, r2
 810413a:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 810413c:	68fb      	ldr	r3, [r7, #12]
 810413e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8104140:	68fb      	ldr	r3, [r7, #12]
 8104142:	695b      	ldr	r3, [r3, #20]
 8104144:	1ad3      	subs	r3, r2, r3
 8104146:	109b      	asrs	r3, r3, #2
 8104148:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 810414a:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 810414c:	68bb      	ldr	r3, [r7, #8]
 810414e:	6a3a      	ldr	r2, [r7, #32]
 8104150:	4413      	add	r3, r2
 8104152:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8104154:	68fb      	ldr	r3, [r7, #12]
 8104156:	685a      	ldr	r2, [r3, #4]
 8104158:	69fb      	ldr	r3, [r7, #28]
 810415a:	005b      	lsls	r3, r3, #1
 810415c:	429a      	cmp	r2, r3
 810415e:	d92d      	bls.n	81041bc <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8104160:	68fb      	ldr	r3, [r7, #12]
 8104162:	681a      	ldr	r2, [r3, #0]
 8104164:	68fb      	ldr	r3, [r7, #12]
 8104166:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8104168:	69fb      	ldr	r3, [r7, #28]
 810416a:	1acb      	subs	r3, r1, r3
 810416c:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 810416e:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8104170:	79fb      	ldrb	r3, [r7, #7]
 8104172:	2b00      	cmp	r3, #0
 8104174:	d002      	beq.n	810417c <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x4e>
 8104176:	68bb      	ldr	r3, [r7, #8]
 8104178:	009b      	lsls	r3, r3, #2
 810417a:	e000      	b.n	810417e <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x50>
 810417c:	2300      	movs	r3, #0
 810417e:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8104180:	4413      	add	r3, r2
 8104182:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8104184:	68fb      	ldr	r3, [r7, #12]
 8104186:	695b      	ldr	r3, [r3, #20]
 8104188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810418a:	429a      	cmp	r2, r3
 810418c:	d209      	bcs.n	81041a2 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 810418e:	68fb      	ldr	r3, [r7, #12]
 8104190:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8104192:	68fb      	ldr	r3, [r7, #12]
 8104194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8104196:	3304      	adds	r3, #4
 8104198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810419a:	4619      	mov	r1, r3
 810419c:	f000 f943 	bl	8104426 <_ZSt4copyIPPhS1_ET0_T_S3_S2_>
 81041a0:	e048      	b.n	8104234 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 81041a2:	68fb      	ldr	r3, [r7, #12]
 81041a4:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 81041a6:	68fb      	ldr	r3, [r7, #12]
 81041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 81041aa:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 81041ac:	6a3b      	ldr	r3, [r7, #32]
 81041ae:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 81041b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81041b2:	4413      	add	r3, r2
 81041b4:	461a      	mov	r2, r3
 81041b6:	f000 f94e 	bl	8104456 <_ZSt13copy_backwardIPPhS1_ET0_T_S3_S2_>
 81041ba:	e03b      	b.n	8104234 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 81041bc:	68fb      	ldr	r3, [r7, #12]
 81041be:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 81041c0:	68fb      	ldr	r3, [r7, #12]
 81041c2:	3304      	adds	r3, #4
 81041c4:	f107 0208 	add.w	r2, r7, #8
 81041c8:	4611      	mov	r1, r2
 81041ca:	4618      	mov	r0, r3
 81041cc:	f7fd fb8f 	bl	81018ee <_ZSt3maxIjERKT_S2_S2_>
 81041d0:	4603      	mov	r3, r0
 81041d2:	681b      	ldr	r3, [r3, #0]
 81041d4:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 81041d6:	3302      	adds	r3, #2
 81041d8:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 81041da:	68fb      	ldr	r3, [r7, #12]
 81041dc:	69b9      	ldr	r1, [r7, #24]
 81041de:	4618      	mov	r0, r3
 81041e0:	f7fd fb99 	bl	8101916 <_ZNSt11_Deque_baseIhSaIhEE15_M_allocate_mapEj>
 81041e4:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 81041e6:	69ba      	ldr	r2, [r7, #24]
 81041e8:	69fb      	ldr	r3, [r7, #28]
 81041ea:	1ad3      	subs	r3, r2, r3
 81041ec:	085b      	lsrs	r3, r3, #1
 81041ee:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 81041f0:	79fb      	ldrb	r3, [r7, #7]
 81041f2:	2b00      	cmp	r3, #0
 81041f4:	d002      	beq.n	81041fc <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0xce>
 81041f6:	68bb      	ldr	r3, [r7, #8]
 81041f8:	009b      	lsls	r3, r3, #2
 81041fa:	e000      	b.n	81041fe <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0xd0>
 81041fc:	2300      	movs	r3, #0
 81041fe:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8104200:	697a      	ldr	r2, [r7, #20]
 8104202:	4413      	add	r3, r2
 8104204:	627b      	str	r3, [r7, #36]	@ 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8104206:	68fb      	ldr	r3, [r7, #12]
 8104208:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 810420a:	68fb      	ldr	r3, [r7, #12]
 810420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 810420e:	3304      	adds	r3, #4
 8104210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104212:	4619      	mov	r1, r3
 8104214:	f000 f907 	bl	8104426 <_ZSt4copyIPPhS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8104218:	68f8      	ldr	r0, [r7, #12]
 810421a:	68fb      	ldr	r3, [r7, #12]
 810421c:	6819      	ldr	r1, [r3, #0]
 810421e:	68fb      	ldr	r3, [r7, #12]
 8104220:	685b      	ldr	r3, [r3, #4]
 8104222:	461a      	mov	r2, r3
 8104224:	f7fe fa9c 	bl	8102760 <_ZNSt11_Deque_baseIhSaIhEE17_M_deallocate_mapEPPhj>
	  this->_M_impl._M_map = __new_map;
 8104228:	68fb      	ldr	r3, [r7, #12]
 810422a:	697a      	ldr	r2, [r7, #20]
 810422c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 810422e:	68fb      	ldr	r3, [r7, #12]
 8104230:	69ba      	ldr	r2, [r7, #24]
 8104232:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	3308      	adds	r3, #8
 8104238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810423a:	4618      	mov	r0, r3
 810423c:	f7fd fba7 	bl	810198e <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8104240:	68fb      	ldr	r3, [r7, #12]
 8104242:	f103 0018 	add.w	r0, r3, #24
 8104246:	6a3b      	ldr	r3, [r7, #32]
 8104248:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810424c:	3b01      	subs	r3, #1
 810424e:	009b      	lsls	r3, r3, #2
 8104250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104252:	4413      	add	r3, r2
 8104254:	4619      	mov	r1, r3
 8104256:	f7fd fb9a 	bl	810198e <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
    }
 810425a:	bf00      	nop
 810425c:	372c      	adds	r7, #44	@ 0x2c
 810425e:	46bd      	mov	sp, r7
 8104260:	bd90      	pop	{r4, r7, pc}

08104262 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8104262:	b480      	push	{r7}
 8104264:	b083      	sub	sp, #12
 8104266:	af00      	add	r7, sp, #0
 8104268:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	4618      	mov	r0, r3
 810426e:	370c      	adds	r7, #12
 8104270:	46bd      	mov	sp, r7
 8104272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104276:	4770      	bx	lr

08104278 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8104278:	b580      	push	{r7, lr}
 810427a:	b084      	sub	sp, #16
 810427c:	af00      	add	r7, sp, #0
 810427e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8104280:	6878      	ldr	r0, [r7, #4]
 8104282:	f7ff ffee 	bl	8104262 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8104286:	4603      	mov	r3, r0
 8104288:	60fb      	str	r3, [r7, #12]
 810428a:	2301      	movs	r3, #1
 810428c:	60bb      	str	r3, [r7, #8]
      { return __a.allocate(__n); }
 810428e:	2200      	movs	r2, #0
 8104290:	68b9      	ldr	r1, [r7, #8]
 8104292:	68f8      	ldr	r0, [r7, #12]
 8104294:	f000 f972 	bl	810457c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE8allocateEjPKv>
 8104298:	4603      	mov	r3, r0
 810429a:	bf00      	nop
 810429c:	4618      	mov	r0, r3
 810429e:	3710      	adds	r7, #16
 81042a0:	46bd      	mov	sp, r7
 81042a2:	bd80      	pop	{r7, pc}

081042a4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 81042a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81042a8:	b093      	sub	sp, #76	@ 0x4c
 81042aa:	af00      	add	r7, sp, #0
 81042ac:	6178      	str	r0, [r7, #20]
 81042ae:	6139      	str	r1, [r7, #16]
 81042b0:	60fa      	str	r2, [r7, #12]
 81042b2:	60bb      	str	r3, [r7, #8]
	      ::new(__node) _Rb_tree_node<_Val>;
 81042b4:	693b      	ldr	r3, [r7, #16]
 81042b6:	4619      	mov	r1, r3
 81042b8:	2018      	movs	r0, #24
 81042ba:	f7fe febe 	bl	810303a <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 81042be:	6978      	ldr	r0, [r7, #20]
 81042c0:	f7ff ffcf 	bl	8104262 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81042c4:	6078      	str	r0, [r7, #4]
 81042c6:	6938      	ldr	r0, [r7, #16]
 81042c8:	f7ff fa27 	bl	810371a <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>
 81042cc:	4606      	mov	r6, r0
 81042ce:	68f8      	ldr	r0, [r7, #12]
 81042d0:	f7ff faf2 	bl	81038b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81042d4:	4605      	mov	r5, r0
 81042d6:	68b8      	ldr	r0, [r7, #8]
 81042d8:	f7ff faf9 	bl	81038ce <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81042dc:	4604      	mov	r4, r0
 81042de:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 81042e0:	f7ff fb00 	bl	81038e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81042e4:	4603      	mov	r3, r0
 81042e6:	687a      	ldr	r2, [r7, #4]
 81042e8:	647a      	str	r2, [r7, #68]	@ 0x44
 81042ea:	643e      	str	r6, [r7, #64]	@ 0x40
 81042ec:	63fd      	str	r5, [r7, #60]	@ 0x3c
 81042ee:	63bc      	str	r4, [r7, #56]	@ 0x38
 81042f0:	637b      	str	r3, [r7, #52]	@ 0x34
	  __a.construct(__p, std::forward<_Args>(__args)...);
 81042f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 81042f4:	f7ff fae0 	bl	81038b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81042f8:	4605      	mov	r5, r0
 81042fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 81042fc:	f7ff fae7 	bl	81038ce <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8104300:	4604      	mov	r4, r0
 8104302:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8104304:	f7ff faee 	bl	81038e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8104308:	4602      	mov	r2, r0
 810430a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810430c:	633b      	str	r3, [r7, #48]	@ 0x30
 810430e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104312:	62bd      	str	r5, [r7, #40]	@ 0x28
 8104314:	627c      	str	r4, [r7, #36]	@ 0x24
 8104316:	623a      	str	r2, [r7, #32]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8104318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810431a:	4619      	mov	r1, r3
 810431c:	2008      	movs	r0, #8
 810431e:	f7fe fe8c 	bl	810303a <_ZnwjPv>
 8104322:	4604      	mov	r4, r0
 8104324:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8104326:	f7ff fac7 	bl	81038b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810432a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810432c:	f7ff facf 	bl	81038ce <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8104330:	4602      	mov	r2, r0
 8104332:	f107 031c 	add.w	r3, r7, #28
 8104336:	4611      	mov	r1, r2
 8104338:	4618      	mov	r0, r3
 810433a:	f000 f94f 	bl	81045dc <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1EOS4_>
 810433e:	6a38      	ldr	r0, [r7, #32]
 8104340:	f7ff fad0 	bl	81038e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8104344:	f107 021c 	add.w	r2, r7, #28
 8104348:	464b      	mov	r3, r9
 810434a:	4641      	mov	r1, r8
 810434c:	4620      	mov	r0, r4
 810434e:	f000 f9a7 	bl	81046a0 <_ZNSt4pairIKP20__UART_HandleTypeDefP12UartEndpointEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8104352:	bf00      	nop
	}
 8104354:	bf00      	nop
	}
 8104356:	bf00      	nop
 8104358:	374c      	adds	r7, #76	@ 0x4c
 810435a:	46bd      	mov	sp, r7
 810435c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08104360 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8104360:	b580      	push	{r7, lr}
 8104362:	b084      	sub	sp, #16
 8104364:	af00      	add	r7, sp, #0
 8104366:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8104368:	687b      	ldr	r3, [r7, #4]
 810436a:	68da      	ldr	r2, [r3, #12]
 810436c:	f107 030c 	add.w	r3, r7, #12
 8104370:	4611      	mov	r1, r2
 8104372:	4618      	mov	r0, r3
 8104374:	f7ff fc4f 	bl	8103c16 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
 8104378:	68fb      	ldr	r3, [r7, #12]
 810437a:	4618      	mov	r0, r3
 810437c:	3710      	adds	r7, #16
 810437e:	46bd      	mov	sp, r7
 8104380:	bd80      	pop	{r7, pc}

08104382 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP20__UART_HandleTypeDefP12UartEndpointEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8104382:	b580      	push	{r7, lr}
 8104384:	b084      	sub	sp, #16
 8104386:	af00      	add	r7, sp, #0
 8104388:	60f8      	str	r0, [r7, #12]
 810438a:	60b9      	str	r1, [r7, #8]
 810438c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 810438e:	68b8      	ldr	r0, [r7, #8]
 8104390:	f000 f88c 	bl	81044ac <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEEOT_RNSt16remove_referenceISB_E4typeE>
 8104394:	4603      	mov	r3, r0
 8104396:	681a      	ldr	r2, [r3, #0]
 8104398:	68fb      	ldr	r3, [r7, #12]
 810439a:	601a      	str	r2, [r3, #0]
 810439c:	6878      	ldr	r0, [r7, #4]
 810439e:	f000 f809 	bl	81043b4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 81043a2:	4603      	mov	r3, r0
 81043a4:	681a      	ldr	r2, [r3, #0]
 81043a6:	68fb      	ldr	r3, [r7, #12]
 81043a8:	605a      	str	r2, [r3, #4]
	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 81043aa:	68fb      	ldr	r3, [r7, #12]
 81043ac:	4618      	mov	r0, r3
 81043ae:	3710      	adds	r7, #16
 81043b0:	46bd      	mov	sp, r7
 81043b2:	bd80      	pop	{r7, pc}

081043b4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81043b4:	b480      	push	{r7}
 81043b6:	b083      	sub	sp, #12
 81043b8:	af00      	add	r7, sp, #0
 81043ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	4618      	mov	r0, r3
 81043c0:	370c      	adds	r7, #12
 81043c2:	46bd      	mov	sp, r7
 81043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043c8:	4770      	bx	lr

081043ca <_ZNKSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>:
      _M_valptr() const
 81043ca:	b580      	push	{r7, lr}
 81043cc:	b082      	sub	sp, #8
 81043ce:	af00      	add	r7, sp, #0
 81043d0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	3310      	adds	r3, #16
 81043d6:	4618      	mov	r0, r3
 81043d8:	f000 f873 	bl	81044c2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE6_M_ptrEv>
 81043dc:	4603      	mov	r3, r0
 81043de:	4618      	mov	r0, r3
 81043e0:	3708      	adds	r7, #8
 81043e2:	46bd      	mov	sp, r7
 81043e4:	bd80      	pop	{r7, pc}

081043e6 <_ZNKSt10_Select1stISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 81043e6:	b480      	push	{r7}
 81043e8:	b083      	sub	sp, #12
 81043ea:	af00      	add	r7, sp, #0
 81043ec:	6078      	str	r0, [r7, #4]
 81043ee:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 81043f0:	683b      	ldr	r3, [r7, #0]
 81043f2:	4618      	mov	r0, r3
 81043f4:	370c      	adds	r7, #12
 81043f6:	46bd      	mov	sp, r7
 81043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043fc:	4770      	bx	lr

081043fe <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 81043fe:	b480      	push	{r7}
 8104400:	b083      	sub	sp, #12
 8104402:	af00      	add	r7, sp, #0
 8104404:	6078      	str	r0, [r7, #4]
 8104406:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8104408:	683b      	ldr	r3, [r7, #0]
 810440a:	681a      	ldr	r2, [r3, #0]
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	429a      	cmp	r2, r3
 8104412:	d201      	bcs.n	8104418 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8104414:	683b      	ldr	r3, [r7, #0]
 8104416:	e000      	b.n	810441a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8104418:	687b      	ldr	r3, [r7, #4]
    }
 810441a:	4618      	mov	r0, r3
 810441c:	370c      	adds	r7, #12
 810441e:	46bd      	mov	sp, r7
 8104420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104424:	4770      	bx	lr

08104426 <_ZSt4copyIPPhS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8104426:	b590      	push	{r4, r7, lr}
 8104428:	b085      	sub	sp, #20
 810442a:	af00      	add	r7, sp, #0
 810442c:	60f8      	str	r0, [r7, #12]
 810442e:	60b9      	str	r1, [r7, #8]
 8104430:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8104432:	68f8      	ldr	r0, [r7, #12]
 8104434:	f000 f851 	bl	81044da <_ZSt12__miter_baseIPPhET_S2_>
 8104438:	4604      	mov	r4, r0
 810443a:	68b8      	ldr	r0, [r7, #8]
 810443c:	f000 f84d 	bl	81044da <_ZSt12__miter_baseIPPhET_S2_>
 8104440:	4603      	mov	r3, r0
 8104442:	687a      	ldr	r2, [r7, #4]
 8104444:	4619      	mov	r1, r3
 8104446:	4620      	mov	r0, r4
 8104448:	f000 f852 	bl	81044f0 <_ZSt13__copy_move_aILb0EPPhS1_ET1_T0_S3_S2_>
 810444c:	4603      	mov	r3, r0
    }
 810444e:	4618      	mov	r0, r3
 8104450:	3714      	adds	r7, #20
 8104452:	46bd      	mov	sp, r7
 8104454:	bd90      	pop	{r4, r7, pc}

08104456 <_ZSt13copy_backwardIPPhS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8104456:	b590      	push	{r4, r7, lr}
 8104458:	b085      	sub	sp, #20
 810445a:	af00      	add	r7, sp, #0
 810445c:	60f8      	str	r0, [r7, #12]
 810445e:	60b9      	str	r1, [r7, #8]
 8104460:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_BI2,
	    typename iterator_traits<_BI1>::reference>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8104462:	68f8      	ldr	r0, [r7, #12]
 8104464:	f000 f839 	bl	81044da <_ZSt12__miter_baseIPPhET_S2_>
 8104468:	4604      	mov	r4, r0
 810446a:	68b8      	ldr	r0, [r7, #8]
 810446c:	f000 f835 	bl	81044da <_ZSt12__miter_baseIPPhET_S2_>
 8104470:	4603      	mov	r3, r0
 8104472:	687a      	ldr	r2, [r7, #4]
 8104474:	4619      	mov	r1, r3
 8104476:	4620      	mov	r0, r4
 8104478:	f000 f85d 	bl	8104536 <_ZSt22__copy_move_backward_aILb0EPPhS1_ET1_T0_S3_S2_>
 810447c:	4603      	mov	r3, r0
    }
 810447e:	4618      	mov	r0, r3
 8104480:	3714      	adds	r7, #20
 8104482:	46bd      	mov	sp, r7
 8104484:	bd90      	pop	{r4, r7, pc}

08104486 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8104486:	b580      	push	{r7, lr}
 8104488:	b084      	sub	sp, #16
 810448a:	af00      	add	r7, sp, #0
 810448c:	60f8      	str	r0, [r7, #12]
 810448e:	60b9      	str	r1, [r7, #8]
 8104490:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8104492:	687a      	ldr	r2, [r7, #4]
 8104494:	4613      	mov	r3, r2
 8104496:	005b      	lsls	r3, r3, #1
 8104498:	4413      	add	r3, r2
 810449a:	00db      	lsls	r3, r3, #3
 810449c:	4619      	mov	r1, r3
 810449e:	68b8      	ldr	r0, [r7, #8]
 81044a0:	f00a f898 	bl	810e5d4 <_ZdlPvj>
      }
 81044a4:	bf00      	nop
 81044a6:	3710      	adds	r7, #16
 81044a8:	46bd      	mov	sp, r7
 81044aa:	bd80      	pop	{r7, pc}

081044ac <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81044ac:	b480      	push	{r7}
 81044ae:	b083      	sub	sp, #12
 81044b0:	af00      	add	r7, sp, #0
 81044b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81044b4:	687b      	ldr	r3, [r7, #4]
 81044b6:	4618      	mov	r0, r3
 81044b8:	370c      	adds	r7, #12
 81044ba:	46bd      	mov	sp, r7
 81044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044c0:	4770      	bx	lr

081044c2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 81044c2:	b580      	push	{r7, lr}
 81044c4:	b082      	sub	sp, #8
 81044c6:	af00      	add	r7, sp, #0
 81044c8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 81044ca:	6878      	ldr	r0, [r7, #4]
 81044cc:	f000 f896 	bl	81045fc <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE7_M_addrEv>
 81044d0:	4603      	mov	r3, r0
 81044d2:	4618      	mov	r0, r3
 81044d4:	3708      	adds	r7, #8
 81044d6:	46bd      	mov	sp, r7
 81044d8:	bd80      	pop	{r7, pc}

081044da <_ZSt12__miter_baseIPPhET_S2_>:
    __miter_base(_Iterator __it)
 81044da:	b480      	push	{r7}
 81044dc:	b083      	sub	sp, #12
 81044de:	af00      	add	r7, sp, #0
 81044e0:	6078      	str	r0, [r7, #4]
    { return __it; }
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	4618      	mov	r0, r3
 81044e6:	370c      	adds	r7, #12
 81044e8:	46bd      	mov	sp, r7
 81044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044ee:	4770      	bx	lr

081044f0 <_ZSt13__copy_move_aILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 81044f0:	b5b0      	push	{r4, r5, r7, lr}
 81044f2:	b084      	sub	sp, #16
 81044f4:	af00      	add	r7, sp, #0
 81044f6:	60f8      	str	r0, [r7, #12]
 81044f8:	60b9      	str	r1, [r7, #8]
 81044fa:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 81044fc:	68f8      	ldr	r0, [r7, #12]
 81044fe:	f000 f888 	bl	8104612 <_ZSt12__niter_baseIPPhET_S2_>
 8104502:	4604      	mov	r4, r0
 8104504:	68b8      	ldr	r0, [r7, #8]
 8104506:	f000 f884 	bl	8104612 <_ZSt12__niter_baseIPPhET_S2_>
 810450a:	4605      	mov	r5, r0
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	4618      	mov	r0, r3
 8104510:	f000 f87f 	bl	8104612 <_ZSt12__niter_baseIPPhET_S2_>
 8104514:	4603      	mov	r3, r0
 8104516:	461a      	mov	r2, r3
 8104518:	4629      	mov	r1, r5
 810451a:	4620      	mov	r0, r4
 810451c:	f000 f884 	bl	8104628 <_ZSt14__copy_move_a1ILb0EPPhS1_ET1_T0_S3_S2_>
 8104520:	4602      	mov	r2, r0
 8104522:	1d3b      	adds	r3, r7, #4
 8104524:	4611      	mov	r1, r2
 8104526:	4618      	mov	r0, r3
 8104528:	f000 f88e 	bl	8104648 <_ZSt12__niter_wrapIPPhET_RKS2_S2_>
 810452c:	4603      	mov	r3, r0
    }
 810452e:	4618      	mov	r0, r3
 8104530:	3710      	adds	r7, #16
 8104532:	46bd      	mov	sp, r7
 8104534:	bdb0      	pop	{r4, r5, r7, pc}

08104536 <_ZSt22__copy_move_backward_aILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8104536:	b5b0      	push	{r4, r5, r7, lr}
 8104538:	b084      	sub	sp, #16
 810453a:	af00      	add	r7, sp, #0
 810453c:	60f8      	str	r0, [r7, #12]
 810453e:	60b9      	str	r1, [r7, #8]
 8104540:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8104542:	68f8      	ldr	r0, [r7, #12]
 8104544:	f000 f865 	bl	8104612 <_ZSt12__niter_baseIPPhET_S2_>
 8104548:	4604      	mov	r4, r0
 810454a:	68b8      	ldr	r0, [r7, #8]
 810454c:	f000 f861 	bl	8104612 <_ZSt12__niter_baseIPPhET_S2_>
 8104550:	4605      	mov	r5, r0
 8104552:	687b      	ldr	r3, [r7, #4]
 8104554:	4618      	mov	r0, r3
 8104556:	f000 f85c 	bl	8104612 <_ZSt12__niter_baseIPPhET_S2_>
 810455a:	4603      	mov	r3, r0
 810455c:	461a      	mov	r2, r3
 810455e:	4629      	mov	r1, r5
 8104560:	4620      	mov	r0, r4
 8104562:	f000 f87d 	bl	8104660 <_ZSt23__copy_move_backward_a1ILb0EPPhS1_ET1_T0_S3_S2_>
 8104566:	4602      	mov	r2, r0
 8104568:	1d3b      	adds	r3, r7, #4
 810456a:	4611      	mov	r1, r2
 810456c:	4618      	mov	r0, r3
 810456e:	f000 f86b 	bl	8104648 <_ZSt12__niter_wrapIPPhET_RKS2_S2_>
 8104572:	4603      	mov	r3, r0
    }
 8104574:	4618      	mov	r0, r3
 8104576:	3710      	adds	r7, #16
 8104578:	46bd      	mov	sp, r7
 810457a:	bdb0      	pop	{r4, r5, r7, pc}

0810457c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 810457c:	b580      	push	{r7, lr}
 810457e:	b086      	sub	sp, #24
 8104580:	af00      	add	r7, sp, #0
 8104582:	60f8      	str	r0, [r7, #12]
 8104584:	60b9      	str	r1, [r7, #8]
 8104586:	607a      	str	r2, [r7, #4]
 8104588:	68fb      	ldr	r3, [r7, #12]
 810458a:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 810458c:	4a11      	ldr	r2, [pc, #68]	@ (81045d4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE8allocateEjPKv+0x58>)
	if (__builtin_expect(__n > this->_M_max_size(), false))
 810458e:	68bb      	ldr	r3, [r7, #8]
 8104590:	4293      	cmp	r3, r2
 8104592:	bf8c      	ite	hi
 8104594:	2301      	movhi	r3, #1
 8104596:	2300      	movls	r3, #0
 8104598:	b2db      	uxtb	r3, r3
 810459a:	2b00      	cmp	r3, #0
 810459c:	bf14      	ite	ne
 810459e:	2301      	movne	r3, #1
 81045a0:	2300      	moveq	r3, #0
 81045a2:	b2db      	uxtb	r3, r3
 81045a4:	2b00      	cmp	r3, #0
 81045a6:	d007      	beq.n	81045b8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE8allocateEjPKv+0x3c>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 81045a8:	68bb      	ldr	r3, [r7, #8]
 81045aa:	4a0b      	ldr	r2, [pc, #44]	@ (81045d8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE8allocateEjPKv+0x5c>)
 81045ac:	4293      	cmp	r3, r2
 81045ae:	d901      	bls.n	81045b4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE8allocateEjPKv+0x38>
	      std::__throw_bad_array_new_length();
 81045b0:	f00a f8e4 	bl	810e77c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 81045b4:	f00a f8df 	bl	810e776 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 81045b8:	68ba      	ldr	r2, [r7, #8]
 81045ba:	4613      	mov	r3, r2
 81045bc:	005b      	lsls	r3, r3, #1
 81045be:	4413      	add	r3, r2
 81045c0:	00db      	lsls	r3, r3, #3
 81045c2:	4618      	mov	r0, r3
 81045c4:	f00a f808 	bl	810e5d8 <_Znwj>
 81045c8:	4603      	mov	r3, r0
      }
 81045ca:	4618      	mov	r0, r3
 81045cc:	3718      	adds	r7, #24
 81045ce:	46bd      	mov	sp, r7
 81045d0:	bd80      	pop	{r7, pc}
 81045d2:	bf00      	nop
 81045d4:	05555555 	.word	0x05555555
 81045d8:	0aaaaaaa 	.word	0x0aaaaaaa

081045dc <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 81045dc:	b580      	push	{r7, lr}
 81045de:	b082      	sub	sp, #8
 81045e0:	af00      	add	r7, sp, #0
 81045e2:	6078      	str	r0, [r7, #4]
 81045e4:	6039      	str	r1, [r7, #0]
 81045e6:	687b      	ldr	r3, [r7, #4]
 81045e8:	683a      	ldr	r2, [r7, #0]
 81045ea:	4611      	mov	r1, r2
 81045ec:	4618      	mov	r0, r3
 81045ee:	f000 f847 	bl	8104680 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1EOS4_>
 81045f2:	687b      	ldr	r3, [r7, #4]
 81045f4:	4618      	mov	r0, r3
 81045f6:	3708      	adds	r7, #8
 81045f8:	46bd      	mov	sp, r7
 81045fa:	bd80      	pop	{r7, pc}

081045fc <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE7_M_addrEv>:
      _M_addr() const noexcept
 81045fc:	b480      	push	{r7}
 81045fe:	b083      	sub	sp, #12
 8104600:	af00      	add	r7, sp, #0
 8104602:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	4618      	mov	r0, r3
 8104608:	370c      	adds	r7, #12
 810460a:	46bd      	mov	sp, r7
 810460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104610:	4770      	bx	lr

08104612 <_ZSt12__niter_baseIPPhET_S2_>:
    __niter_base(_Iterator __it)
 8104612:	b480      	push	{r7}
 8104614:	b083      	sub	sp, #12
 8104616:	af00      	add	r7, sp, #0
 8104618:	6078      	str	r0, [r7, #4]
    { return __it; }
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	4618      	mov	r0, r3
 810461e:	370c      	adds	r7, #12
 8104620:	46bd      	mov	sp, r7
 8104622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104626:	4770      	bx	lr

08104628 <_ZSt14__copy_move_a1ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8104628:	b580      	push	{r7, lr}
 810462a:	b084      	sub	sp, #16
 810462c:	af00      	add	r7, sp, #0
 810462e:	60f8      	str	r0, [r7, #12]
 8104630:	60b9      	str	r1, [r7, #8]
 8104632:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8104634:	687a      	ldr	r2, [r7, #4]
 8104636:	68b9      	ldr	r1, [r7, #8]
 8104638:	68f8      	ldr	r0, [r7, #12]
 810463a:	f000 f845 	bl	81046c8 <_ZSt14__copy_move_a2ILb0EPPhS1_ET1_T0_S3_S2_>
 810463e:	4603      	mov	r3, r0
 8104640:	4618      	mov	r0, r3
 8104642:	3710      	adds	r7, #16
 8104644:	46bd      	mov	sp, r7
 8104646:	bd80      	pop	{r7, pc}

08104648 <_ZSt12__niter_wrapIPPhET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8104648:	b480      	push	{r7}
 810464a:	b083      	sub	sp, #12
 810464c:	af00      	add	r7, sp, #0
 810464e:	6078      	str	r0, [r7, #4]
 8104650:	6039      	str	r1, [r7, #0]
    { return __res; }
 8104652:	683b      	ldr	r3, [r7, #0]
 8104654:	4618      	mov	r0, r3
 8104656:	370c      	adds	r7, #12
 8104658:	46bd      	mov	sp, r7
 810465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810465e:	4770      	bx	lr

08104660 <_ZSt23__copy_move_backward_a1ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8104660:	b580      	push	{r7, lr}
 8104662:	b084      	sub	sp, #16
 8104664:	af00      	add	r7, sp, #0
 8104666:	60f8      	str	r0, [r7, #12]
 8104668:	60b9      	str	r1, [r7, #8]
 810466a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 810466c:	687a      	ldr	r2, [r7, #4]
 810466e:	68b9      	ldr	r1, [r7, #8]
 8104670:	68f8      	ldr	r0, [r7, #12]
 8104672:	f000 f839 	bl	81046e8 <_ZSt23__copy_move_backward_a2ILb0EPPhS1_ET1_T0_S3_S2_>
 8104676:	4603      	mov	r3, r0
 8104678:	4618      	mov	r0, r3
 810467a:	3710      	adds	r7, #16
 810467c:	46bd      	mov	sp, r7
 810467e:	bd80      	pop	{r7, pc}

08104680 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8104680:	b480      	push	{r7}
 8104682:	b083      	sub	sp, #12
 8104684:	af00      	add	r7, sp, #0
 8104686:	6078      	str	r0, [r7, #4]
 8104688:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	683a      	ldr	r2, [r7, #0]
 810468e:	6812      	ldr	r2, [r2, #0]
 8104690:	601a      	str	r2, [r3, #0]
      { }
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	4618      	mov	r0, r3
 8104696:	370c      	adds	r7, #12
 8104698:	46bd      	mov	sp, r7
 810469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810469e:	4770      	bx	lr

081046a0 <_ZNSt4pairIKP20__UART_HandleTypeDefP12UartEndpointEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 81046a0:	b5b0      	push	{r4, r5, r7, lr}
 81046a2:	b086      	sub	sp, #24
 81046a4:	af02      	add	r7, sp, #8
 81046a6:	60f8      	str	r0, [r7, #12]
 81046a8:	7239      	strb	r1, [r7, #8]
 81046aa:	607a      	str	r2, [r7, #4]
 81046ac:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 81046ae:	463a      	mov	r2, r7
 81046b0:	f88d 4000 	strb.w	r4, [sp]
 81046b4:	462b      	mov	r3, r5
 81046b6:	6879      	ldr	r1, [r7, #4]
 81046b8:	68f8      	ldr	r0, [r7, #12]
 81046ba:	f000 f825 	bl	8104708 <_ZNSt4pairIKP20__UART_HandleTypeDefP12UartEndpointEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 81046be:	68fb      	ldr	r3, [r7, #12]
 81046c0:	4618      	mov	r0, r3
 81046c2:	3710      	adds	r7, #16
 81046c4:	46bd      	mov	sp, r7
 81046c6:	bdb0      	pop	{r4, r5, r7, pc}

081046c8 <_ZSt14__copy_move_a2ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 81046c8:	b580      	push	{r7, lr}
 81046ca:	b084      	sub	sp, #16
 81046cc:	af00      	add	r7, sp, #0
 81046ce:	60f8      	str	r0, [r7, #12]
 81046d0:	60b9      	str	r1, [r7, #8]
 81046d2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 81046d4:	687a      	ldr	r2, [r7, #4]
 81046d6:	68b9      	ldr	r1, [r7, #8]
 81046d8:	68f8      	ldr	r0, [r7, #12]
 81046da:	f000 f82f 	bl	810473c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhS3_EEPT0_PT_S7_S5_>
 81046de:	4603      	mov	r3, r0
    }
 81046e0:	4618      	mov	r0, r3
 81046e2:	3710      	adds	r7, #16
 81046e4:	46bd      	mov	sp, r7
 81046e6:	bd80      	pop	{r7, pc}

081046e8 <_ZSt23__copy_move_backward_a2ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 81046e8:	b580      	push	{r7, lr}
 81046ea:	b084      	sub	sp, #16
 81046ec:	af00      	add	r7, sp, #0
 81046ee:	60f8      	str	r0, [r7, #12]
 81046f0:	60b9      	str	r1, [r7, #8]
 81046f2:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 81046f4:	687a      	ldr	r2, [r7, #4]
 81046f6:	68b9      	ldr	r1, [r7, #8]
 81046f8:	68f8      	ldr	r0, [r7, #12]
 81046fa:	f000 f849 	bl	8104790 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EEPT0_PT_S7_S5_>
 81046fe:	4603      	mov	r3, r0
    }
 8104700:	4618      	mov	r0, r3
 8104702:	3710      	adds	r7, #16
 8104704:	46bd      	mov	sp, r7
 8104706:	bd80      	pop	{r7, pc}

08104708 <_ZNSt4pairIKP20__UART_HandleTypeDefP12UartEndpointEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8104708:	b580      	push	{r7, lr}
 810470a:	b084      	sub	sp, #16
 810470c:	af00      	add	r7, sp, #0
 810470e:	60f8      	str	r0, [r7, #12]
 8104710:	60b9      	str	r1, [r7, #8]
 8104712:	607a      	str	r2, [r7, #4]
 8104714:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8104716:	68b8      	ldr	r0, [r7, #8]
 8104718:	f000 f86b 	bl	81047f2 <_ZSt3getILj0EJRKP20__UART_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810471c:	4603      	mov	r3, r0
 810471e:	4618      	mov	r0, r3
 8104720:	f000 f874 	bl	810480c <_ZSt7forwardIRKP20__UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8104724:	4603      	mov	r3, r0
 8104726:	681a      	ldr	r2, [r3, #0]
 8104728:	68fb      	ldr	r3, [r7, #12]
 810472a:	601a      	str	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 810472c:	68fb      	ldr	r3, [r7, #12]
 810472e:	2200      	movs	r2, #0
 8104730:	605a      	str	r2, [r3, #4]
      { }
 8104732:	68fb      	ldr	r3, [r7, #12]
 8104734:	4618      	mov	r0, r3
 8104736:	3710      	adds	r7, #16
 8104738:	46bd      	mov	sp, r7
 810473a:	bd80      	pop	{r7, pc}

0810473c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhS3_EEPT0_PT_S7_S5_>:
	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
 810473c:	b580      	push	{r7, lr}
 810473e:	b086      	sub	sp, #24
 8104740:	af00      	add	r7, sp, #0
 8104742:	60f8      	str	r0, [r7, #12]
 8104744:	60b9      	str	r1, [r7, #8]
 8104746:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8104748:	68ba      	ldr	r2, [r7, #8]
 810474a:	68fb      	ldr	r3, [r7, #12]
 810474c:	1ad3      	subs	r3, r2, r3
 810474e:	109b      	asrs	r3, r3, #2
 8104750:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 8104752:	697b      	ldr	r3, [r7, #20]
 8104754:	2b01      	cmp	r3, #1
 8104756:	bfcc      	ite	gt
 8104758:	2301      	movgt	r3, #1
 810475a:	2300      	movle	r3, #0
 810475c:	b2db      	uxtb	r3, r3
 810475e:	2b00      	cmp	r3, #0
 8104760:	d007      	beq.n	8104772 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhS3_EEPT0_PT_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8104762:	697b      	ldr	r3, [r7, #20]
 8104764:	009b      	lsls	r3, r3, #2
 8104766:	461a      	mov	r2, r3
 8104768:	68f9      	ldr	r1, [r7, #12]
 810476a:	6878      	ldr	r0, [r7, #4]
 810476c:	f00a ff44 	bl	810f5f8 <memmove>
 8104770:	e006      	b.n	8104780 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhS3_EEPT0_PT_S7_S5_+0x44>
	  else if (_Num == 1)
 8104772:	697b      	ldr	r3, [r7, #20]
 8104774:	2b01      	cmp	r3, #1
 8104776:	d103      	bne.n	8104780 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhS3_EEPT0_PT_S7_S5_+0x44>
	      __assign_one(__result, __first);
 8104778:	68f9      	ldr	r1, [r7, #12]
 810477a:	6878      	ldr	r0, [r7, #4]
 810477c:	f000 f851 	bl	8104822 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIPhS3_EEvPT_PT0_>
	  return __result + _Num;
 8104780:	697b      	ldr	r3, [r7, #20]
 8104782:	009b      	lsls	r3, r3, #2
 8104784:	687a      	ldr	r2, [r7, #4]
 8104786:	4413      	add	r3, r2
	}
 8104788:	4618      	mov	r0, r3
 810478a:	3718      	adds	r7, #24
 810478c:	46bd      	mov	sp, r7
 810478e:	bd80      	pop	{r7, pc}

08104790 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EEPT0_PT_S7_S5_>:
	__copy_move_b(_Tp* __first, _Tp* __last, _Up* __result)
 8104790:	b580      	push	{r7, lr}
 8104792:	b086      	sub	sp, #24
 8104794:	af00      	add	r7, sp, #0
 8104796:	60f8      	str	r0, [r7, #12]
 8104798:	60b9      	str	r1, [r7, #8]
 810479a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 810479c:	68ba      	ldr	r2, [r7, #8]
 810479e:	68fb      	ldr	r3, [r7, #12]
 81047a0:	1ad3      	subs	r3, r2, r3
 81047a2:	109b      	asrs	r3, r3, #2
 81047a4:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 81047a6:	697b      	ldr	r3, [r7, #20]
 81047a8:	2b01      	cmp	r3, #1
 81047aa:	bfcc      	ite	gt
 81047ac:	2301      	movgt	r3, #1
 81047ae:	2300      	movle	r3, #0
 81047b0:	b2db      	uxtb	r3, r3
 81047b2:	2b00      	cmp	r3, #0
 81047b4:	d00b      	beq.n	81047ce <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EEPT0_PT_S7_S5_+0x3e>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 81047b6:	697b      	ldr	r3, [r7, #20]
 81047b8:	009b      	lsls	r3, r3, #2
 81047ba:	425b      	negs	r3, r3
 81047bc:	687a      	ldr	r2, [r7, #4]
 81047be:	18d0      	adds	r0, r2, r3
 81047c0:	697b      	ldr	r3, [r7, #20]
 81047c2:	009b      	lsls	r3, r3, #2
 81047c4:	461a      	mov	r2, r3
 81047c6:	68f9      	ldr	r1, [r7, #12]
 81047c8:	f00a ff16 	bl	810f5f8 <memmove>
 81047cc:	e008      	b.n	81047e0 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EEPT0_PT_S7_S5_+0x50>
	  else if (_Num == 1)
 81047ce:	697b      	ldr	r3, [r7, #20]
 81047d0:	2b01      	cmp	r3, #1
 81047d2:	d105      	bne.n	81047e0 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EEPT0_PT_S7_S5_+0x50>
	      __assign_one(__result - 1, __first);
 81047d4:	687b      	ldr	r3, [r7, #4]
 81047d6:	3b04      	subs	r3, #4
 81047d8:	68f9      	ldr	r1, [r7, #12]
 81047da:	4618      	mov	r0, r3
 81047dc:	f000 f821 	bl	8104822 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIPhS3_EEvPT_PT0_>
	  return __result - _Num;
 81047e0:	697b      	ldr	r3, [r7, #20]
 81047e2:	009b      	lsls	r3, r3, #2
 81047e4:	425b      	negs	r3, r3
 81047e6:	687a      	ldr	r2, [r7, #4]
 81047e8:	4413      	add	r3, r2
	}
 81047ea:	4618      	mov	r0, r3
 81047ec:	3718      	adds	r7, #24
 81047ee:	46bd      	mov	sp, r7
 81047f0:	bd80      	pop	{r7, pc}

081047f2 <_ZSt3getILj0EJRKP20__UART_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 81047f2:	b580      	push	{r7, lr}
 81047f4:	b082      	sub	sp, #8
 81047f6:	af00      	add	r7, sp, #0
 81047f8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	4618      	mov	r0, r3
 81047fe:	f000 f81f 	bl	8104840 <_ZSt12__get_helperILj0ERKP20__UART_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8104802:	4603      	mov	r3, r0
 8104804:	4618      	mov	r0, r3
 8104806:	3708      	adds	r7, #8
 8104808:	46bd      	mov	sp, r7
 810480a:	bd80      	pop	{r7, pc}

0810480c <_ZSt7forwardIRKP20__UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810480c:	b480      	push	{r7}
 810480e:	b083      	sub	sp, #12
 8104810:	af00      	add	r7, sp, #0
 8104812:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104814:	687b      	ldr	r3, [r7, #4]
 8104816:	4618      	mov	r0, r3
 8104818:	370c      	adds	r7, #12
 810481a:	46bd      	mov	sp, r7
 810481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104820:	4770      	bx	lr

08104822 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIPhS3_EEvPT_PT0_>:
	__assign_one(_Tp* __to, _Up* __from)
 8104822:	b480      	push	{r7}
 8104824:	b083      	sub	sp, #12
 8104826:	af00      	add	r7, sp, #0
 8104828:	6078      	str	r0, [r7, #4]
 810482a:	6039      	str	r1, [r7, #0]
	{ *__to = *__from; }
 810482c:	683b      	ldr	r3, [r7, #0]
 810482e:	681a      	ldr	r2, [r3, #0]
 8104830:	687b      	ldr	r3, [r7, #4]
 8104832:	601a      	str	r2, [r3, #0]
 8104834:	bf00      	nop
 8104836:	370c      	adds	r7, #12
 8104838:	46bd      	mov	sp, r7
 810483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810483e:	4770      	bx	lr

08104840 <_ZSt12__get_helperILj0ERKP20__UART_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8104840:	b580      	push	{r7, lr}
 8104842:	b082      	sub	sp, #8
 8104844:	af00      	add	r7, sp, #0
 8104846:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8104848:	6878      	ldr	r0, [r7, #4]
 810484a:	f000 f805 	bl	8104858 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEE7_M_headERS4_>
 810484e:	4603      	mov	r3, r0
 8104850:	4618      	mov	r0, r3
 8104852:	3708      	adds	r7, #8
 8104854:	46bd      	mov	sp, r7
 8104856:	bd80      	pop	{r7, pc}

08104858 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8104858:	b580      	push	{r7, lr}
 810485a:	b082      	sub	sp, #8
 810485c:	af00      	add	r7, sp, #0
 810485e:	6078      	str	r0, [r7, #4]
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	4618      	mov	r0, r3
 8104864:	f000 f805 	bl	8104872 <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EE7_M_headERS4_>
 8104868:	4603      	mov	r3, r0
 810486a:	4618      	mov	r0, r3
 810486c:	3708      	adds	r7, #8
 810486e:	46bd      	mov	sp, r7
 8104870:	bd80      	pop	{r7, pc}

08104872 <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8104872:	b480      	push	{r7}
 8104874:	b083      	sub	sp, #12
 8104876:	af00      	add	r7, sp, #0
 8104878:	6078      	str	r0, [r7, #4]
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	681b      	ldr	r3, [r3, #0]
 810487e:	4618      	mov	r0, r3
 8104880:	370c      	adds	r7, #12
 8104882:	46bd      	mov	sp, r7
 8104884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104888:	4770      	bx	lr
	...

0810488c <_Z41__static_initialization_and_destruction_0v>:
 810488c:	b580      	push	{r7, lr}
 810488e:	af00      	add	r7, sp, #0
std::map<UART_HandleTypeDef*, UartEndpoint*> UartEndpoint::instanceMap;
 8104890:	4802      	ldr	r0, [pc, #8]	@ (810489c <_Z41__static_initialization_and_destruction_0v+0x10>)
 8104892:	f7fe fc1e 	bl	81030d2 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
}
 8104896:	bf00      	nop
 8104898:	bd80      	pop	{r7, pc}
 810489a:	bf00      	nop
 810489c:	100003b0 	.word	0x100003b0

081048a0 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 81048a0:	b580      	push	{r7, lr}
 81048a2:	b082      	sub	sp, #8
 81048a4:	af00      	add	r7, sp, #0
 81048a6:	6078      	str	r0, [r7, #4]
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	4618      	mov	r0, r3
 81048ac:	f7fe fcf9 	bl	81032a2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 81048b0:	687b      	ldr	r3, [r7, #4]
 81048b2:	4618      	mov	r0, r3
 81048b4:	3708      	adds	r7, #8
 81048b6:	46bd      	mov	sp, r7
 81048b8:	bd80      	pop	{r7, pc}
	...

081048bc <_Z41__static_initialization_and_destruction_1v>:
 81048bc:	b580      	push	{r7, lr}
 81048be:	af00      	add	r7, sp, #0
std::map<UART_HandleTypeDef*, UartEndpoint*> UartEndpoint::instanceMap;
 81048c0:	4802      	ldr	r0, [pc, #8]	@ (81048cc <_Z41__static_initialization_and_destruction_1v+0x10>)
 81048c2:	f7ff ffed 	bl	81048a0 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
}
 81048c6:	bf00      	nop
 81048c8:	bd80      	pop	{r7, pc}
 81048ca:	bf00      	nop
 81048cc:	100003b0 	.word	0x100003b0

081048d0 <_GLOBAL__sub_I__ZN12UartEndpoint11instanceMapE>:
 81048d0:	b580      	push	{r7, lr}
 81048d2:	af00      	add	r7, sp, #0
 81048d4:	f7ff ffda 	bl	810488c <_Z41__static_initialization_and_destruction_0v>
 81048d8:	bd80      	pop	{r7, pc}

081048da <_GLOBAL__sub_D__ZN12UartEndpoint11instanceMapE>:
 81048da:	b580      	push	{r7, lr}
 81048dc:	af00      	add	r7, sp, #0
 81048de:	f7ff ffed 	bl	81048bc <_Z41__static_initialization_and_destruction_1v>
 81048e2:	bd80      	pop	{r7, pc}

081048e4 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 81048e4:	b480      	push	{r7}
 81048e6:	b083      	sub	sp, #12
 81048e8:	af00      	add	r7, sp, #0
 81048ea:	6078      	str	r0, [r7, #4]
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	4618      	mov	r0, r3
 81048f0:	370c      	adds	r7, #12
 81048f2:	46bd      	mov	sp, r7
 81048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048f8:	4770      	bx	lr

081048fa <_ZN4comm7MessageC1Ev>:

namespace comm {

	//extern uint8_t MY_ID;// = 0x00;

	Message::Message()
 81048fa:	b580      	push	{r7, lr}
 81048fc:	b084      	sub	sp, #16
 81048fe:	af00      	add	r7, sp, #0
 8104900:	6078      	str	r0, [r7, #4]
	:
		m_Header(0),
 8104902:	687b      	ldr	r3, [r7, #4]
 8104904:	2200      	movs	r2, #0
 8104906:	701a      	strb	r2, [r3, #0]
		m_srcID(0),
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	2200      	movs	r2, #0
 810490c:	705a      	strb	r2, [r3, #1]
		m_destID(0),
 810490e:	687b      	ldr	r3, [r7, #4]
 8104910:	2200      	movs	r2, #0
 8104912:	709a      	strb	r2, [r3, #2]
		m_opCode(0),
 8104914:	687b      	ldr	r3, [r7, #4]
 8104916:	2200      	movs	r2, #0
 8104918:	70da      	strb	r2, [r3, #3]
		m_addr(0),
 810491a:	687b      	ldr	r3, [r7, #4]
 810491c:	2200      	movs	r2, #0
 810491e:	711a      	strb	r2, [r3, #4]
		m_length(0),
 8104920:	687b      	ldr	r3, [r7, #4]
 8104922:	2200      	movs	r2, #0
 8104924:	715a      	strb	r2, [r3, #5]
		m_payload(0),
 8104926:	687b      	ldr	r3, [r7, #4]
 8104928:	f103 0008 	add.w	r0, r3, #8
 810492c:	f107 0308 	add.w	r3, r7, #8
 8104930:	60fb      	str	r3, [r7, #12]
 8104932:	f107 0308 	add.w	r3, r7, #8
 8104936:	461a      	mov	r2, r3
 8104938:	2100      	movs	r1, #0
 810493a:	f000 f810 	bl	810495e <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
 810493e:	f107 0308 	add.w	r3, r7, #8
 8104942:	4618      	mov	r0, r3
 8104944:	f7fd ff2d 	bl	81027a2 <_ZNSt15__new_allocatorIhED1Ev>
		m_dataCRC(0),
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	2200      	movs	r2, #0
 810494c:	751a      	strb	r2, [r3, #20]
		m_Footer(0)
 810494e:	687b      	ldr	r3, [r7, #4]
 8104950:	2200      	movs	r2, #0
 8104952:	755a      	strb	r2, [r3, #21]
	{}
 8104954:	687b      	ldr	r3, [r7, #4]
 8104956:	4618      	mov	r0, r3
 8104958:	3710      	adds	r7, #16
 810495a:	46bd      	mov	sp, r7
 810495c:	bd80      	pop	{r7, pc}

0810495e <_ZNSt6vectorIhSaIhEEC1EjRKS0_>:
       *  This constructor fills the %vector with @a __n default
       *  constructed elements.
       */
      explicit
      _GLIBCXX20_CONSTEXPR
      vector(size_type __n, const allocator_type& __a = allocator_type())
 810495e:	b590      	push	{r4, r7, lr}
 8104960:	b085      	sub	sp, #20
 8104962:	af00      	add	r7, sp, #0
 8104964:	60f8      	str	r0, [r7, #12]
 8104966:	60b9      	str	r1, [r7, #8]
 8104968:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 810496a:	68fc      	ldr	r4, [r7, #12]
 810496c:	6879      	ldr	r1, [r7, #4]
 810496e:	68b8      	ldr	r0, [r7, #8]
 8104970:	f000 f810 	bl	8104994 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>
 8104974:	4603      	mov	r3, r0
 8104976:	687a      	ldr	r2, [r7, #4]
 8104978:	4619      	mov	r1, r3
 810497a:	4620      	mov	r0, r4
 810497c:	f000 f834 	bl	81049e8 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
      { _M_default_initialize(__n); }
 8104980:	68b9      	ldr	r1, [r7, #8]
 8104982:	68f8      	ldr	r0, [r7, #12]
 8104984:	f000 f844 	bl	8104a10 <_ZNSt6vectorIhSaIhEE21_M_default_initializeEj>
 8104988:	68fb      	ldr	r3, [r7, #12]
 810498a:	4618      	mov	r0, r3
 810498c:	3714      	adds	r7, #20
 810498e:	46bd      	mov	sp, r7
 8104990:	bd90      	pop	{r4, r7, pc}
	...

08104994 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8104994:	b590      	push	{r4, r7, lr}
 8104996:	b087      	sub	sp, #28
 8104998:	af00      	add	r7, sp, #0
 810499a:	6078      	str	r0, [r7, #4]
 810499c:	6039      	str	r1, [r7, #0]
 810499e:	683b      	ldr	r3, [r7, #0]
 81049a0:	617b      	str	r3, [r7, #20]
 81049a2:	f107 0308 	add.w	r3, r7, #8
 81049a6:	613b      	str	r3, [r7, #16]
 81049a8:	697b      	ldr	r3, [r7, #20]
 81049aa:	60fb      	str	r3, [r7, #12]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 81049ac:	f107 0308 	add.w	r3, r7, #8
 81049b0:	4618      	mov	r0, r3
 81049b2:	f000 f850 	bl	8104a56 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 81049b6:	4602      	mov	r2, r0
 81049b8:	687b      	ldr	r3, [r7, #4]
 81049ba:	4293      	cmp	r3, r2
 81049bc:	bf8c      	ite	hi
 81049be:	2301      	movhi	r3, #1
 81049c0:	2300      	movls	r3, #0
 81049c2:	b2dc      	uxtb	r4, r3
 81049c4:	f107 0308 	add.w	r3, r7, #8
 81049c8:	4618      	mov	r0, r3
 81049ca:	f7fd feea 	bl	81027a2 <_ZNSt15__new_allocatorIhED1Ev>
 81049ce:	2c00      	cmp	r4, #0
 81049d0:	d002      	beq.n	81049d8 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x44>
	  __throw_length_error(
 81049d2:	4804      	ldr	r0, [pc, #16]	@ (81049e4 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x50>)
 81049d4:	f009 fed5 	bl	810e782 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 81049d8:	687b      	ldr	r3, [r7, #4]
      }
 81049da:	4618      	mov	r0, r3
 81049dc:	371c      	adds	r7, #28
 81049de:	46bd      	mov	sp, r7
 81049e0:	bd90      	pop	{r4, r7, pc}
 81049e2:	bf00      	nop
 81049e4:	081114d8 	.word	0x081114d8

081049e8 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 81049e8:	b580      	push	{r7, lr}
 81049ea:	b084      	sub	sp, #16
 81049ec:	af00      	add	r7, sp, #0
 81049ee:	60f8      	str	r0, [r7, #12]
 81049f0:	60b9      	str	r1, [r7, #8]
 81049f2:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 81049f4:	68fb      	ldr	r3, [r7, #12]
 81049f6:	6879      	ldr	r1, [r7, #4]
 81049f8:	4618      	mov	r0, r3
 81049fa:	f000 f84c 	bl	8104a96 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 81049fe:	68b9      	ldr	r1, [r7, #8]
 8104a00:	68f8      	ldr	r0, [r7, #12]
 8104a02:	f000 f85e 	bl	8104ac2 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 8104a06:	68fb      	ldr	r3, [r7, #12]
 8104a08:	4618      	mov	r0, r3
 8104a0a:	3710      	adds	r7, #16
 8104a0c:	46bd      	mov	sp, r7
 8104a0e:	bd80      	pop	{r7, pc}

08104a10 <_ZNSt6vectorIhSaIhEE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8104a10:	b590      	push	{r4, r7, lr}
 8104a12:	b083      	sub	sp, #12
 8104a14:	af00      	add	r7, sp, #0
 8104a16:	6078      	str	r0, [r7, #4]
 8104a18:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8104a1a:	687b      	ldr	r3, [r7, #4]
 8104a1c:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 8104a1e:	687b      	ldr	r3, [r7, #4]
 8104a20:	4618      	mov	r0, r3
 8104a22:	f000 f80d 	bl	8104a40 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8104a26:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8104a28:	461a      	mov	r2, r3
 8104a2a:	6839      	ldr	r1, [r7, #0]
 8104a2c:	4620      	mov	r0, r4
 8104a2e:	f000 f862 	bl	8104af6 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 8104a32:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8104a34:	687b      	ldr	r3, [r7, #4]
 8104a36:	605a      	str	r2, [r3, #4]
      }
 8104a38:	bf00      	nop
 8104a3a:	370c      	adds	r7, #12
 8104a3c:	46bd      	mov	sp, r7
 8104a3e:	bd90      	pop	{r4, r7, pc}

08104a40 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8104a40:	b480      	push	{r7}
 8104a42:	b083      	sub	sp, #12
 8104a44:	af00      	add	r7, sp, #0
 8104a46:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	4618      	mov	r0, r3
 8104a4c:	370c      	adds	r7, #12
 8104a4e:	46bd      	mov	sp, r7
 8104a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a54:	4770      	bx	lr

08104a56 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8104a56:	b580      	push	{r7, lr}
 8104a58:	b088      	sub	sp, #32
 8104a5a:	af00      	add	r7, sp, #0
 8104a5c:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8104a5e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8104a62:	613b      	str	r3, [r7, #16]
 8104a64:	687b      	ldr	r3, [r7, #4]
 8104a66:	61fb      	str	r3, [r7, #28]
 8104a68:	69fb      	ldr	r3, [r7, #28]
 8104a6a:	61bb      	str	r3, [r7, #24]
 8104a6c:	69bb      	ldr	r3, [r7, #24]
 8104a6e:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8104a70:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
      { return _M_max_size(); }
 8104a74:	bf00      	nop
	return __a.max_size();
 8104a76:	bf00      	nop
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8104a78:	60fb      	str	r3, [r7, #12]
	return (std::min)(__diffmax, __allocmax);
 8104a7a:	f107 020c 	add.w	r2, r7, #12
 8104a7e:	f107 0310 	add.w	r3, r7, #16
 8104a82:	4611      	mov	r1, r2
 8104a84:	4618      	mov	r0, r3
 8104a86:	f7ff fcba 	bl	81043fe <_ZSt3minIjERKT_S2_S2_>
 8104a8a:	4603      	mov	r3, r0
 8104a8c:	681b      	ldr	r3, [r3, #0]
      }
 8104a8e:	4618      	mov	r0, r3
 8104a90:	3720      	adds	r7, #32
 8104a92:	46bd      	mov	sp, r7
 8104a94:	bd80      	pop	{r7, pc}

08104a96 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8104a96:	b580      	push	{r7, lr}
 8104a98:	b086      	sub	sp, #24
 8104a9a:	af00      	add	r7, sp, #0
 8104a9c:	6078      	str	r0, [r7, #4]
 8104a9e:	6039      	str	r1, [r7, #0]
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	617b      	str	r3, [r7, #20]
 8104aa4:	683b      	ldr	r3, [r7, #0]
 8104aa6:	613b      	str	r3, [r7, #16]
 8104aa8:	697b      	ldr	r3, [r7, #20]
 8104aaa:	60fb      	str	r3, [r7, #12]
 8104aac:	693b      	ldr	r3, [r7, #16]
 8104aae:	60bb      	str	r3, [r7, #8]
	: _Tp_alloc_type(__a)
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	4618      	mov	r0, r3
 8104ab4:	f000 f847 	bl	8104b46 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8104ab8:	687b      	ldr	r3, [r7, #4]
 8104aba:	4618      	mov	r0, r3
 8104abc:	3718      	adds	r7, #24
 8104abe:	46bd      	mov	sp, r7
 8104ac0:	bd80      	pop	{r7, pc}

08104ac2 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8104ac2:	b580      	push	{r7, lr}
 8104ac4:	b082      	sub	sp, #8
 8104ac6:	af00      	add	r7, sp, #0
 8104ac8:	6078      	str	r0, [r7, #4]
 8104aca:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8104acc:	6839      	ldr	r1, [r7, #0]
 8104ace:	6878      	ldr	r0, [r7, #4]
 8104ad0:	f000 f820 	bl	8104b14 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8104ad4:	4602      	mov	r2, r0
 8104ad6:	687b      	ldr	r3, [r7, #4]
 8104ad8:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	681a      	ldr	r2, [r3, #0]
 8104ade:	687b      	ldr	r3, [r7, #4]
 8104ae0:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8104ae2:	687b      	ldr	r3, [r7, #4]
 8104ae4:	681a      	ldr	r2, [r3, #0]
 8104ae6:	683b      	ldr	r3, [r7, #0]
 8104ae8:	441a      	add	r2, r3
 8104aea:	687b      	ldr	r3, [r7, #4]
 8104aec:	609a      	str	r2, [r3, #8]
      }
 8104aee:	bf00      	nop
 8104af0:	3708      	adds	r7, #8
 8104af2:	46bd      	mov	sp, r7
 8104af4:	bd80      	pop	{r7, pc}

08104af6 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
  // __uninitialized_default_n_a specialization for std::allocator,
  // which ignores the allocator and value-initializes the elements.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 8104af6:	b580      	push	{r7, lr}
 8104af8:	b084      	sub	sp, #16
 8104afa:	af00      	add	r7, sp, #0
 8104afc:	60f8      	str	r0, [r7, #12]
 8104afe:	60b9      	str	r1, [r7, #8]
 8104b00:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8104b02:	68b9      	ldr	r1, [r7, #8]
 8104b04:	68f8      	ldr	r0, [r7, #12]
 8104b06:	f000 f832 	bl	8104b6e <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8104b0a:	4603      	mov	r3, r0
 8104b0c:	4618      	mov	r0, r3
 8104b0e:	3710      	adds	r7, #16
 8104b10:	46bd      	mov	sp, r7
 8104b12:	bd80      	pop	{r7, pc}

08104b14 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8104b14:	b580      	push	{r7, lr}
 8104b16:	b084      	sub	sp, #16
 8104b18:	af00      	add	r7, sp, #0
 8104b1a:	6078      	str	r0, [r7, #4]
 8104b1c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8104b1e:	683b      	ldr	r3, [r7, #0]
 8104b20:	2b00      	cmp	r3, #0
 8104b22:	d00b      	beq.n	8104b3c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x28>
 8104b24:	687b      	ldr	r3, [r7, #4]
 8104b26:	60fb      	str	r3, [r7, #12]
 8104b28:	683b      	ldr	r3, [r7, #0]
 8104b2a:	60bb      	str	r3, [r7, #8]
      { return __a.allocate(__n); }
 8104b2c:	2200      	movs	r2, #0
 8104b2e:	68b9      	ldr	r1, [r7, #8]
 8104b30:	68f8      	ldr	r0, [r7, #12]
 8104b32:	f7fc fff1 	bl	8101b18 <_ZNSt15__new_allocatorIhE8allocateEjPKv>
 8104b36:	4603      	mov	r3, r0
 8104b38:	bf00      	nop
 8104b3a:	e000      	b.n	8104b3e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x2a>
 8104b3c:	2300      	movs	r3, #0
      }
 8104b3e:	4618      	mov	r0, r3
 8104b40:	3710      	adds	r7, #16
 8104b42:	46bd      	mov	sp, r7
 8104b44:	bd80      	pop	{r7, pc}

08104b46 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8104b46:	b480      	push	{r7}
 8104b48:	b083      	sub	sp, #12
 8104b4a:	af00      	add	r7, sp, #0
 8104b4c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	2200      	movs	r2, #0
 8104b52:	601a      	str	r2, [r3, #0]
 8104b54:	687b      	ldr	r3, [r7, #4]
 8104b56:	2200      	movs	r2, #0
 8104b58:	605a      	str	r2, [r3, #4]
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	2200      	movs	r2, #0
 8104b5e:	609a      	str	r2, [r3, #8]
	{ }
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	4618      	mov	r0, r3
 8104b64:	370c      	adds	r7, #12
 8104b66:	46bd      	mov	sp, r7
 8104b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b6c:	4770      	bx	lr

08104b6e <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8104b6e:	b580      	push	{r7, lr}
 8104b70:	b084      	sub	sp, #16
 8104b72:	af00      	add	r7, sp, #0
 8104b74:	6078      	str	r0, [r7, #4]
 8104b76:	6039      	str	r1, [r7, #0]
      constexpr bool __can_fill
 8104b78:	2301      	movs	r3, #1
 8104b7a:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8104b7c:	6839      	ldr	r1, [r7, #0]
 8104b7e:	6878      	ldr	r0, [r7, #4]
 8104b80:	f000 f805 	bl	8104b8e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 8104b84:	4603      	mov	r3, r0
    }
 8104b86:	4618      	mov	r0, r3
 8104b88:	3710      	adds	r7, #16
 8104b8a:	46bd      	mov	sp, r7
 8104b8c:	bd80      	pop	{r7, pc}

08104b8e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8104b8e:	b580      	push	{r7, lr}
 8104b90:	b084      	sub	sp, #16
 8104b92:	af00      	add	r7, sp, #0
 8104b94:	6078      	str	r0, [r7, #4]
 8104b96:	6039      	str	r1, [r7, #0]
	  if (__n > 0)
 8104b98:	683b      	ldr	r3, [r7, #0]
 8104b9a:	2b00      	cmp	r3, #0
 8104b9c:	d011      	beq.n	8104bc2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_+0x34>
		= std::__addressof(*__first);
 8104b9e:	6878      	ldr	r0, [r7, #4]
 8104ba0:	f000 f814 	bl	8104bcc <_ZSt11__addressofIhEPT_RS0_>
 8104ba4:	60f8      	str	r0, [r7, #12]
	      std::_Construct(__val);
 8104ba6:	68f8      	ldr	r0, [r7, #12]
 8104ba8:	f000 f81b 	bl	8104be2 <_ZSt10_ConstructIhJEEvPT_DpOT0_>
	      ++__first;
 8104bac:	687b      	ldr	r3, [r7, #4]
 8104bae:	3301      	adds	r3, #1
 8104bb0:	607b      	str	r3, [r7, #4]
	      __first = std::fill_n(__first, __n - 1, *__val);
 8104bb2:	683b      	ldr	r3, [r7, #0]
 8104bb4:	3b01      	subs	r3, #1
 8104bb6:	68fa      	ldr	r2, [r7, #12]
 8104bb8:	4619      	mov	r1, r3
 8104bba:	6878      	ldr	r0, [r7, #4]
 8104bbc:	f000 f821 	bl	8104c02 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8104bc0:	6078      	str	r0, [r7, #4]
	  return __first;
 8104bc2:	687b      	ldr	r3, [r7, #4]
	}
 8104bc4:	4618      	mov	r0, r3
 8104bc6:	3710      	adds	r7, #16
 8104bc8:	46bd      	mov	sp, r7
 8104bca:	bd80      	pop	{r7, pc}

08104bcc <_ZSt11__addressofIhEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8104bcc:	b480      	push	{r7}
 8104bce:	b083      	sub	sp, #12
 8104bd0:	af00      	add	r7, sp, #0
 8104bd2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	4618      	mov	r0, r3
 8104bd8:	370c      	adds	r7, #12
 8104bda:	46bd      	mov	sp, r7
 8104bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104be0:	4770      	bx	lr

08104be2 <_ZSt10_ConstructIhJEEvPT_DpOT0_>:
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
 8104be2:	b580      	push	{r7, lr}
 8104be4:	b082      	sub	sp, #8
 8104be6:	af00      	add	r7, sp, #0
 8104be8:	6078      	str	r0, [r7, #4]
	  // Allow std::_Construct to be used in constant expressions.
	  std::construct_at(__p, std::forward<_Args>(__args)...);
	  return;
	}
#endif
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8104bea:	687b      	ldr	r3, [r7, #4]
 8104bec:	4619      	mov	r1, r3
 8104bee:	2001      	movs	r0, #1
 8104bf0:	f7fe fa23 	bl	810303a <_ZnwjPv>
 8104bf4:	4603      	mov	r3, r0
 8104bf6:	2200      	movs	r2, #0
 8104bf8:	701a      	strb	r2, [r3, #0]
    }
 8104bfa:	bf00      	nop
 8104bfc:	3708      	adds	r7, #8
 8104bfe:	46bd      	mov	sp, r7
 8104c00:	bd80      	pop	{r7, pc}

08104c02 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8104c02:	b5b0      	push	{r4, r5, r7, lr}
 8104c04:	b084      	sub	sp, #16
 8104c06:	af00      	add	r7, sp, #0
 8104c08:	60f8      	str	r0, [r7, #12]
 8104c0a:	60b9      	str	r1, [r7, #8]
 8104c0c:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8104c0e:	68fc      	ldr	r4, [r7, #12]
 8104c10:	68b8      	ldr	r0, [r7, #8]
 8104c12:	f7ff fe67 	bl	81048e4 <_ZSt17__size_to_integerj>
 8104c16:	4601      	mov	r1, r0
  template<typename _Iter>
    __attribute__((__always_inline__))
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8104c18:	bf00      	nop
 8104c1a:	462b      	mov	r3, r5
 8104c1c:	687a      	ldr	r2, [r7, #4]
 8104c1e:	4620      	mov	r0, r4
 8104c20:	f000 f805 	bl	8104c2e <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 8104c24:	4603      	mov	r3, r0
			       std::__iterator_category(__first));
    }
 8104c26:	4618      	mov	r0, r3
 8104c28:	3710      	adds	r7, #16
 8104c2a:	46bd      	mov	sp, r7
 8104c2c:	bdb0      	pop	{r4, r5, r7, pc}

08104c2e <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8104c2e:	b580      	push	{r7, lr}
 8104c30:	b084      	sub	sp, #16
 8104c32:	af00      	add	r7, sp, #0
 8104c34:	60f8      	str	r0, [r7, #12]
 8104c36:	60b9      	str	r1, [r7, #8]
 8104c38:	607a      	str	r2, [r7, #4]
 8104c3a:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8104c3c:	68bb      	ldr	r3, [r7, #8]
 8104c3e:	2b00      	cmp	r3, #0
 8104c40:	d101      	bne.n	8104c46 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8104c42:	68fb      	ldr	r3, [r7, #12]
 8104c44:	e00a      	b.n	8104c5c <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8104c46:	68fa      	ldr	r2, [r7, #12]
 8104c48:	68bb      	ldr	r3, [r7, #8]
 8104c4a:	4413      	add	r3, r2
 8104c4c:	687a      	ldr	r2, [r7, #4]
 8104c4e:	4619      	mov	r1, r3
 8104c50:	68f8      	ldr	r0, [r7, #12]
 8104c52:	f000 f807 	bl	8104c64 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 8104c56:	68fa      	ldr	r2, [r7, #12]
 8104c58:	68bb      	ldr	r3, [r7, #8]
 8104c5a:	4413      	add	r3, r2
    }
 8104c5c:	4618      	mov	r0, r3
 8104c5e:	3710      	adds	r7, #16
 8104c60:	46bd      	mov	sp, r7
 8104c62:	bd80      	pop	{r7, pc}

08104c64 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8104c64:	b580      	push	{r7, lr}
 8104c66:	b084      	sub	sp, #16
 8104c68:	af00      	add	r7, sp, #0
 8104c6a:	60f8      	str	r0, [r7, #12]
 8104c6c:	60b9      	str	r1, [r7, #8]
 8104c6e:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8104c70:	687a      	ldr	r2, [r7, #4]
 8104c72:	68b9      	ldr	r1, [r7, #8]
 8104c74:	68f8      	ldr	r0, [r7, #12]
 8104c76:	f000 f804 	bl	8104c82 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8104c7a:	bf00      	nop
 8104c7c:	3710      	adds	r7, #16
 8104c7e:	46bd      	mov	sp, r7
 8104c80:	bd80      	pop	{r7, pc}

08104c82 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 8104c82:	b580      	push	{r7, lr}
 8104c84:	b086      	sub	sp, #24
 8104c86:	af00      	add	r7, sp, #0
 8104c88:	60f8      	str	r0, [r7, #12]
 8104c8a:	60b9      	str	r1, [r7, #8]
 8104c8c:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8104c8e:	687b      	ldr	r3, [r7, #4]
 8104c90:	781b      	ldrb	r3, [r3, #0]
 8104c92:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 8104c94:	68ba      	ldr	r2, [r7, #8]
 8104c96:	68fb      	ldr	r3, [r7, #12]
 8104c98:	1ad3      	subs	r3, r2, r3
 8104c9a:	613b      	str	r3, [r7, #16]
 8104c9c:	693b      	ldr	r3, [r7, #16]
 8104c9e:	2b00      	cmp	r3, #0
 8104ca0:	d005      	beq.n	8104cae <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8104ca2:	7dfb      	ldrb	r3, [r7, #23]
 8104ca4:	693a      	ldr	r2, [r7, #16]
 8104ca6:	4619      	mov	r1, r3
 8104ca8:	68f8      	ldr	r0, [r7, #12]
 8104caa:	f00a fcbf 	bl	810f62c <memset>
    }
 8104cae:	bf00      	nop
 8104cb0:	3718      	adds	r7, #24
 8104cb2:	46bd      	mov	sp, r7
 8104cb4:	bd80      	pop	{r7, pc}
	...

08104cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8104cb8:	b580      	push	{r7, lr}
 8104cba:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8104cbc:	f000 fe24 	bl	8105908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Resource Manager Utility initialisation ---------------------------------*/
  MX_RESMGR_UTILITY_Init();
 8104cc0:	f000 fa2c 	bl	810511c <MX_RESMGR_UTILITY_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8104cc4:	f000 f984 	bl	8104fd0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8104cc8:	f000 f87a 	bl	8104dc0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8104ccc:	f000 f928 	bl	8104f20 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8104cd0:	f000 f8ce 	bl	8104e70 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8104cd4:	f000 f814 	bl	8104d00 <MX_SPI2_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8104cd8:	f006 fd12 	bl	810b700 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8104cdc:	4a05      	ldr	r2, [pc, #20]	@ (8104cf4 <main+0x3c>)
 8104cde:	2100      	movs	r1, #0
 8104ce0:	4805      	ldr	r0, [pc, #20]	@ (8104cf8 <main+0x40>)
 8104ce2:	f006 fd57 	bl	810b794 <osThreadNew>
 8104ce6:	4603      	mov	r3, r0
 8104ce8:	4a04      	ldr	r2, [pc, #16]	@ (8104cfc <main+0x44>)
 8104cea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8104cec:	f006 fd2c 	bl	810b748 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8104cf0:	bf00      	nop
 8104cf2:	e7fd      	b.n	8104cf0 <main+0x38>
 8104cf4:	08111674 	.word	0x08111674
 8104cf8:	081050d1 	.word	0x081050d1
 8104cfc:	1000060c 	.word	0x1000060c

08104d00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8104d00:	b580      	push	{r7, lr}
 8104d02:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_SPI2, RESMGR_FLAGS_ACCESS_NORMAL | \
 8104d04:	2300      	movs	r3, #0
 8104d06:	2200      	movs	r2, #0
 8104d08:	2112      	movs	r1, #18
 8104d0a:	200d      	movs	r0, #13
 8104d0c:	f009 fb52 	bl	810e3b4 <ResMgr_Request>
 8104d10:	4603      	mov	r3, r0
 8104d12:	2b00      	cmp	r3, #0
 8104d14:	d001      	beq.n	8104d1a <MX_SPI2_Init+0x1a>
                  RESMGR_FLAGS_CPU2 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_SPI2 */
    Error_Handler();
 8104d16:	f000 f9fb 	bl	8105110 <Error_Handler>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8104d1a:	4b27      	ldr	r3, [pc, #156]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d1c:	4a27      	ldr	r2, [pc, #156]	@ (8104dbc <MX_SPI2_Init+0xbc>)
 8104d1e:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8104d20:	4b25      	ldr	r3, [pc, #148]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d22:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8104d26:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8104d28:	4b23      	ldr	r3, [pc, #140]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d2a:	2200      	movs	r2, #0
 8104d2c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8104d2e:	4b22      	ldr	r3, [pc, #136]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d30:	2203      	movs	r2, #3
 8104d32:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8104d34:	4b20      	ldr	r3, [pc, #128]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d36:	2200      	movs	r2, #0
 8104d38:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8104d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d3c:	2200      	movs	r2, #0
 8104d3e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8104d40:	4b1d      	ldr	r3, [pc, #116]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d42:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8104d46:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8104d48:	4b1b      	ldr	r3, [pc, #108]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d4a:	2200      	movs	r2, #0
 8104d4c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8104d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d50:	2200      	movs	r2, #0
 8104d52:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8104d54:	4b18      	ldr	r3, [pc, #96]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d56:	2200      	movs	r2, #0
 8104d58:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8104d5a:	4b17      	ldr	r3, [pc, #92]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d5c:	2200      	movs	r2, #0
 8104d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8104d60:	4b15      	ldr	r3, [pc, #84]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d62:	2200      	movs	r2, #0
 8104d64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8104d66:	4b14      	ldr	r3, [pc, #80]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8104d6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8104d6e:	4b12      	ldr	r3, [pc, #72]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d70:	2200      	movs	r2, #0
 8104d72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8104d74:	4b10      	ldr	r3, [pc, #64]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d76:	2200      	movs	r2, #0
 8104d78:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8104d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d7c:	2200      	movs	r2, #0
 8104d7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8104d80:	4b0d      	ldr	r3, [pc, #52]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d82:	2200      	movs	r2, #0
 8104d84:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8104d86:	4b0c      	ldr	r3, [pc, #48]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d88:	2200      	movs	r2, #0
 8104d8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8104d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d8e:	2200      	movs	r2, #0
 8104d90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8104d92:	4b09      	ldr	r3, [pc, #36]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d94:	2200      	movs	r2, #0
 8104d96:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8104d98:	4b07      	ldr	r3, [pc, #28]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104d9a:	2200      	movs	r2, #0
 8104d9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8104d9e:	4b06      	ldr	r3, [pc, #24]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104da0:	2200      	movs	r2, #0
 8104da2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8104da4:	4804      	ldr	r0, [pc, #16]	@ (8104db8 <MX_SPI2_Init+0xb8>)
 8104da6:	f003 feed 	bl	8108b84 <HAL_SPI_Init>
 8104daa:	4603      	mov	r3, r0
 8104dac:	2b00      	cmp	r3, #0
 8104dae:	d001      	beq.n	8104db4 <MX_SPI2_Init+0xb4>
  {
    Error_Handler();
 8104db0:	f000 f9ae 	bl	8105110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8104db4:	bf00      	nop
 8104db6:	bd80      	pop	{r7, pc}
 8104db8:	100003c8 	.word	0x100003c8
 8104dbc:	40003800 	.word	0x40003800

08104dc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8104dc0:	b580      	push	{r7, lr}
 8104dc2:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_USART1, RESMGR_FLAGS_ACCESS_NORMAL | \
 8104dc4:	2300      	movs	r3, #0
 8104dc6:	2200      	movs	r2, #0
 8104dc8:	2112      	movs	r1, #18
 8104dca:	200f      	movs	r0, #15
 8104dcc:	f009 faf2 	bl	810e3b4 <ResMgr_Request>
 8104dd0:	4603      	mov	r3, r0
 8104dd2:	2b00      	cmp	r3, #0
 8104dd4:	d001      	beq.n	8104dda <MX_USART1_UART_Init+0x1a>
                  RESMGR_FLAGS_CPU2 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_USART1 */
    Error_Handler();
 8104dd6:	f000 f99b 	bl	8105110 <Error_Handler>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8104dda:	4b23      	ldr	r3, [pc, #140]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104ddc:	4a23      	ldr	r2, [pc, #140]	@ (8104e6c <MX_USART1_UART_Init+0xac>)
 8104dde:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8104de0:	4b21      	ldr	r3, [pc, #132]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104de2:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8104de6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8104de8:	4b1f      	ldr	r3, [pc, #124]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104dea:	2200      	movs	r2, #0
 8104dec:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8104dee:	4b1e      	ldr	r3, [pc, #120]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104df0:	2200      	movs	r2, #0
 8104df2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8104df4:	4b1c      	ldr	r3, [pc, #112]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104df6:	2200      	movs	r2, #0
 8104df8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8104dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104dfc:	220c      	movs	r2, #12
 8104dfe:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8104e00:	4b19      	ldr	r3, [pc, #100]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104e02:	2200      	movs	r2, #0
 8104e04:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8104e06:	4b18      	ldr	r3, [pc, #96]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104e08:	2200      	movs	r2, #0
 8104e0a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8104e0c:	4b16      	ldr	r3, [pc, #88]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104e0e:	2200      	movs	r2, #0
 8104e10:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8104e12:	4b15      	ldr	r3, [pc, #84]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104e14:	2200      	movs	r2, #0
 8104e16:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8104e18:	4b13      	ldr	r3, [pc, #76]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104e1a:	2200      	movs	r2, #0
 8104e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8104e1e:	4812      	ldr	r0, [pc, #72]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104e20:	f003 ffef 	bl	8108e02 <HAL_UART_Init>
 8104e24:	4603      	mov	r3, r0
 8104e26:	2b00      	cmp	r3, #0
 8104e28:	d001      	beq.n	8104e2e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8104e2a:	f000 f971 	bl	8105110 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104e2e:	2100      	movs	r1, #0
 8104e30:	480d      	ldr	r0, [pc, #52]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104e32:	f006 fb66 	bl	810b502 <HAL_UARTEx_SetTxFifoThreshold>
 8104e36:	4603      	mov	r3, r0
 8104e38:	2b00      	cmp	r3, #0
 8104e3a:	d001      	beq.n	8104e40 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8104e3c:	f000 f968 	bl	8105110 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104e40:	2100      	movs	r1, #0
 8104e42:	4809      	ldr	r0, [pc, #36]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104e44:	f006 fb9b 	bl	810b57e <HAL_UARTEx_SetRxFifoThreshold>
 8104e48:	4603      	mov	r3, r0
 8104e4a:	2b00      	cmp	r3, #0
 8104e4c:	d001      	beq.n	8104e52 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8104e4e:	f000 f95f 	bl	8105110 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8104e52:	4805      	ldr	r0, [pc, #20]	@ (8104e68 <MX_USART1_UART_Init+0xa8>)
 8104e54:	f006 fb1c 	bl	810b490 <HAL_UARTEx_DisableFifoMode>
 8104e58:	4603      	mov	r3, r0
 8104e5a:	2b00      	cmp	r3, #0
 8104e5c:	d001      	beq.n	8104e62 <MX_USART1_UART_Init+0xa2>
  {
    Error_Handler();
 8104e5e:	f000 f957 	bl	8105110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8104e62:	bf00      	nop
 8104e64:	bd80      	pop	{r7, pc}
 8104e66:	bf00      	nop
 8104e68:	10000450 	.word	0x10000450
 8104e6c:	40011000 	.word	0x40011000

08104e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8104e70:	b580      	push	{r7, lr}
 8104e72:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_USART2, RESMGR_FLAGS_ACCESS_NORMAL | \
 8104e74:	2300      	movs	r3, #0
 8104e76:	2200      	movs	r2, #0
 8104e78:	2112      	movs	r1, #18
 8104e7a:	2010      	movs	r0, #16
 8104e7c:	f009 fa9a 	bl	810e3b4 <ResMgr_Request>
 8104e80:	4603      	mov	r3, r0
 8104e82:	2b00      	cmp	r3, #0
 8104e84:	d001      	beq.n	8104e8a <MX_USART2_UART_Init+0x1a>
                  RESMGR_FLAGS_CPU2 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_USART2 */
    Error_Handler();
 8104e86:	f000 f943 	bl	8105110 <Error_Handler>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8104e8a:	4b23      	ldr	r3, [pc, #140]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104e8c:	4a23      	ldr	r2, [pc, #140]	@ (8104f1c <MX_USART2_UART_Init+0xac>)
 8104e8e:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8104e90:	4b21      	ldr	r3, [pc, #132]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104e92:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8104e96:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8104e98:	4b1f      	ldr	r3, [pc, #124]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104e9a:	2200      	movs	r2, #0
 8104e9c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8104e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104ea0:	2200      	movs	r2, #0
 8104ea2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8104ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104ea6:	2200      	movs	r2, #0
 8104ea8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8104eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104eac:	220c      	movs	r2, #12
 8104eae:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8104eb0:	4b19      	ldr	r3, [pc, #100]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104eb2:	2200      	movs	r2, #0
 8104eb4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8104eb6:	4b18      	ldr	r3, [pc, #96]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104eb8:	2200      	movs	r2, #0
 8104eba:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8104ebc:	4b16      	ldr	r3, [pc, #88]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104ebe:	2200      	movs	r2, #0
 8104ec0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8104ec2:	4b15      	ldr	r3, [pc, #84]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104ec4:	2200      	movs	r2, #0
 8104ec6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8104ec8:	4b13      	ldr	r3, [pc, #76]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104eca:	2200      	movs	r2, #0
 8104ecc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8104ece:	4812      	ldr	r0, [pc, #72]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104ed0:	f003 ff97 	bl	8108e02 <HAL_UART_Init>
 8104ed4:	4603      	mov	r3, r0
 8104ed6:	2b00      	cmp	r3, #0
 8104ed8:	d001      	beq.n	8104ede <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8104eda:	f000 f919 	bl	8105110 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104ede:	2100      	movs	r1, #0
 8104ee0:	480d      	ldr	r0, [pc, #52]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104ee2:	f006 fb0e 	bl	810b502 <HAL_UARTEx_SetTxFifoThreshold>
 8104ee6:	4603      	mov	r3, r0
 8104ee8:	2b00      	cmp	r3, #0
 8104eea:	d001      	beq.n	8104ef0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8104eec:	f000 f910 	bl	8105110 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104ef0:	2100      	movs	r1, #0
 8104ef2:	4809      	ldr	r0, [pc, #36]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104ef4:	f006 fb43 	bl	810b57e <HAL_UARTEx_SetRxFifoThreshold>
 8104ef8:	4603      	mov	r3, r0
 8104efa:	2b00      	cmp	r3, #0
 8104efc:	d001      	beq.n	8104f02 <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 8104efe:	f000 f907 	bl	8105110 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8104f02:	4805      	ldr	r0, [pc, #20]	@ (8104f18 <MX_USART2_UART_Init+0xa8>)
 8104f04:	f006 fac4 	bl	810b490 <HAL_UARTEx_DisableFifoMode>
 8104f08:	4603      	mov	r3, r0
 8104f0a:	2b00      	cmp	r3, #0
 8104f0c:	d001      	beq.n	8104f12 <MX_USART2_UART_Init+0xa2>
  {
    Error_Handler();
 8104f0e:	f000 f8ff 	bl	8105110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8104f12:	bf00      	nop
 8104f14:	bd80      	pop	{r7, pc}
 8104f16:	bf00      	nop
 8104f18:	100004e4 	.word	0x100004e4
 8104f1c:	40004400 	.word	0x40004400

08104f20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8104f20:	b580      	push	{r7, lr}
 8104f22:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_USART3, RESMGR_FLAGS_ACCESS_NORMAL | \
 8104f24:	2300      	movs	r3, #0
 8104f26:	2200      	movs	r2, #0
 8104f28:	2112      	movs	r1, #18
 8104f2a:	2011      	movs	r0, #17
 8104f2c:	f009 fa42 	bl	810e3b4 <ResMgr_Request>
 8104f30:	4603      	mov	r3, r0
 8104f32:	2b00      	cmp	r3, #0
 8104f34:	d001      	beq.n	8104f3a <MX_USART3_UART_Init+0x1a>
                  RESMGR_FLAGS_CPU2 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_USART3 */
    Error_Handler();
 8104f36:	f000 f8eb 	bl	8105110 <Error_Handler>
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8104f3a:	4b23      	ldr	r3, [pc, #140]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f3c:	4a23      	ldr	r2, [pc, #140]	@ (8104fcc <MX_USART3_UART_Init+0xac>)
 8104f3e:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8104f40:	4b21      	ldr	r3, [pc, #132]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f42:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8104f46:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8104f48:	4b1f      	ldr	r3, [pc, #124]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f4a:	2200      	movs	r2, #0
 8104f4c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8104f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f50:	2200      	movs	r2, #0
 8104f52:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8104f54:	4b1c      	ldr	r3, [pc, #112]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f56:	2200      	movs	r2, #0
 8104f58:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8104f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f5c:	220c      	movs	r2, #12
 8104f5e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8104f60:	4b19      	ldr	r3, [pc, #100]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f62:	2200      	movs	r2, #0
 8104f64:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8104f66:	4b18      	ldr	r3, [pc, #96]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f68:	2200      	movs	r2, #0
 8104f6a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8104f6c:	4b16      	ldr	r3, [pc, #88]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f6e:	2200      	movs	r2, #0
 8104f70:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8104f72:	4b15      	ldr	r3, [pc, #84]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f74:	2200      	movs	r2, #0
 8104f76:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8104f78:	4b13      	ldr	r3, [pc, #76]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f7a:	2200      	movs	r2, #0
 8104f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8104f7e:	4812      	ldr	r0, [pc, #72]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f80:	f003 ff3f 	bl	8108e02 <HAL_UART_Init>
 8104f84:	4603      	mov	r3, r0
 8104f86:	2b00      	cmp	r3, #0
 8104f88:	d001      	beq.n	8104f8e <MX_USART3_UART_Init+0x6e>
  {
    Error_Handler();
 8104f8a:	f000 f8c1 	bl	8105110 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104f8e:	2100      	movs	r1, #0
 8104f90:	480d      	ldr	r0, [pc, #52]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104f92:	f006 fab6 	bl	810b502 <HAL_UARTEx_SetTxFifoThreshold>
 8104f96:	4603      	mov	r3, r0
 8104f98:	2b00      	cmp	r3, #0
 8104f9a:	d001      	beq.n	8104fa0 <MX_USART3_UART_Init+0x80>
  {
    Error_Handler();
 8104f9c:	f000 f8b8 	bl	8105110 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104fa0:	2100      	movs	r1, #0
 8104fa2:	4809      	ldr	r0, [pc, #36]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104fa4:	f006 faeb 	bl	810b57e <HAL_UARTEx_SetRxFifoThreshold>
 8104fa8:	4603      	mov	r3, r0
 8104faa:	2b00      	cmp	r3, #0
 8104fac:	d001      	beq.n	8104fb2 <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8104fae:	f000 f8af 	bl	8105110 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8104fb2:	4805      	ldr	r0, [pc, #20]	@ (8104fc8 <MX_USART3_UART_Init+0xa8>)
 8104fb4:	f006 fa6c 	bl	810b490 <HAL_UARTEx_DisableFifoMode>
 8104fb8:	4603      	mov	r3, r0
 8104fba:	2b00      	cmp	r3, #0
 8104fbc:	d001      	beq.n	8104fc2 <MX_USART3_UART_Init+0xa2>
  {
    Error_Handler();
 8104fbe:	f000 f8a7 	bl	8105110 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8104fc2:	bf00      	nop
 8104fc4:	bd80      	pop	{r7, pc}
 8104fc6:	bf00      	nop
 8104fc8:	10000578 	.word	0x10000578
 8104fcc:	40004800 	.word	0x40004800

08104fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8104fd0:	b580      	push	{r7, lr}
 8104fd2:	b08a      	sub	sp, #40	@ 0x28
 8104fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104fd6:	f107 0314 	add.w	r3, r7, #20
 8104fda:	2200      	movs	r2, #0
 8104fdc:	601a      	str	r2, [r3, #0]
 8104fde:	605a      	str	r2, [r3, #4]
 8104fe0:	609a      	str	r2, [r3, #8]
 8104fe2:	60da      	str	r2, [r3, #12]
 8104fe4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8104fe6:	4b37      	ldr	r3, [pc, #220]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8104fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104fec:	4a35      	ldr	r2, [pc, #212]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8104fee:	f043 0301 	orr.w	r3, r3, #1
 8104ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104ff6:	4b33      	ldr	r3, [pc, #204]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8104ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104ffc:	f003 0301 	and.w	r3, r3, #1
 8105000:	613b      	str	r3, [r7, #16]
 8105002:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8105004:	4b2f      	ldr	r3, [pc, #188]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8105006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810500a:	4a2e      	ldr	r2, [pc, #184]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 810500c:	f043 0302 	orr.w	r3, r3, #2
 8105010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8105014:	4b2b      	ldr	r3, [pc, #172]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8105016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810501a:	f003 0302 	and.w	r3, r3, #2
 810501e:	60fb      	str	r3, [r7, #12]
 8105020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8105022:	4b28      	ldr	r3, [pc, #160]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8105024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105028:	4a26      	ldr	r2, [pc, #152]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 810502a:	f043 0308 	orr.w	r3, r3, #8
 810502e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8105032:	4b24      	ldr	r3, [pc, #144]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8105034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105038:	f003 0308 	and.w	r3, r3, #8
 810503c:	60bb      	str	r3, [r7, #8]
 810503e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8105040:	4b20      	ldr	r3, [pc, #128]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8105042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105046:	4a1f      	ldr	r2, [pc, #124]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8105048:	f043 0304 	orr.w	r3, r3, #4
 810504c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8105050:	4b1c      	ldr	r3, [pc, #112]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8105052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105056:	f003 0304 	and.w	r3, r3, #4
 810505a:	607b      	str	r3, [r7, #4]
 810505c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810505e:	4b19      	ldr	r3, [pc, #100]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8105060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105064:	4a17      	ldr	r2, [pc, #92]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8105066:	f043 0310 	orr.w	r3, r3, #16
 810506a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810506e:	4b15      	ldr	r3, [pc, #84]	@ (81050c4 <MX_GPIO_Init+0xf4>)
 8105070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105074:	f003 0310 	and.w	r3, r3, #16
 8105078:	603b      	str	r3, [r7, #0]
 810507a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED2_GPIO_Port, USER_LED2_Pin, GPIO_PIN_RESET);
 810507c:	2200      	movs	r2, #0
 810507e:	2102      	movs	r1, #2
 8105080:	4811      	ldr	r0, [pc, #68]	@ (81050c8 <MX_GPIO_Init+0xf8>)
 8105082:	f001 fd19 	bl	8106ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_FOCUS_NEAR_Pin BTN_FOCUS_FAR_Pin BTN_ZOOM_OUT_Pin BTN_ZOOM_IN_Pin */
  GPIO_InitStruct.Pin = BTN_FOCUS_NEAR_Pin|BTN_FOCUS_FAR_Pin|BTN_ZOOM_OUT_Pin|BTN_ZOOM_IN_Pin;
 8105086:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 810508a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810508c:	2300      	movs	r3, #0
 810508e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8105090:	2302      	movs	r3, #2
 8105092:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8105094:	f107 0314 	add.w	r3, r7, #20
 8105098:	4619      	mov	r1, r3
 810509a:	480c      	ldr	r0, [pc, #48]	@ (81050cc <MX_GPIO_Init+0xfc>)
 810509c:	f001 fb5c 	bl	8106758 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED2_Pin;
 81050a0:	2302      	movs	r3, #2
 81050a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81050a4:	2301      	movs	r3, #1
 81050a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81050a8:	2300      	movs	r3, #0
 81050aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81050ac:	2300      	movs	r3, #0
 81050ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED2_GPIO_Port, &GPIO_InitStruct);
 81050b0:	f107 0314 	add.w	r3, r7, #20
 81050b4:	4619      	mov	r1, r3
 81050b6:	4804      	ldr	r0, [pc, #16]	@ (81050c8 <MX_GPIO_Init+0xf8>)
 81050b8:	f001 fb4e 	bl	8106758 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81050bc:	bf00      	nop
 81050be:	3728      	adds	r7, #40	@ 0x28
 81050c0:	46bd      	mov	sp, r7
 81050c2:	bd80      	pop	{r7, pc}
 81050c4:	58024400 	.word	0x58024400
 81050c8:	58021000 	.word	0x58021000
 81050cc:	58020800 	.word	0x58020800

081050d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 81050d0:	b580      	push	{r7, lr}
 81050d2:	b082      	sub	sp, #8
 81050d4:	af00      	add	r7, sp, #0
 81050d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("Before App Free heap: %u bytes\n", xPortGetFreeHeapSize());
 81050d8:	f006 fd70 	bl	810bbbc <xPortGetFreeHeapSize>
 81050dc:	4603      	mov	r3, r0
 81050de:	4619      	mov	r1, r3
 81050e0:	4808      	ldr	r0, [pc, #32]	@ (8105104 <StartDefaultTask+0x34>)
 81050e2:	f00a f939 	bl	810f358 <iprintf>

	  // ✅ Call the C++ application entry point

	  cpp_app_main();
 81050e6:	f000 f8ad 	bl	8105244 <cpp_app_main>

		printf("Application ended");
 81050ea:	4807      	ldr	r0, [pc, #28]	@ (8105108 <StartDefaultTask+0x38>)
 81050ec:	f00a f934 	bl	810f358 <iprintf>
	//osThreadExit();

  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 81050f0:	2102      	movs	r1, #2
 81050f2:	4806      	ldr	r0, [pc, #24]	@ (810510c <StartDefaultTask+0x3c>)
 81050f4:	f001 fcf9 	bl	8106aea <HAL_GPIO_TogglePin>
    osDelay(2000);
 81050f8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 81050fc:	f006 fbdc 	bl	810b8b8 <osDelay>
    HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 8105100:	bf00      	nop
 8105102:	e7f5      	b.n	81050f0 <StartDefaultTask+0x20>
 8105104:	08111518 	.word	0x08111518
 8105108:	08111538 	.word	0x08111538
 810510c:	58021000 	.word	0x58021000

08105110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8105110:	b480      	push	{r7}
 8105112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8105114:	b672      	cpsid	i
}
 8105116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8105118:	bf00      	nop
 810511a:	e7fd      	b.n	8105118 <Error_Handler+0x8>

0810511c <MX_RESMGR_UTILITY_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* RESMGR_UTILITY init function */
void MX_RESMGR_UTILITY_Init(void)
{
 810511c:	b580      	push	{r7, lr}
 810511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  if (ResMgr_Init(MX_RESMGR_UTILITY_SendMsg, MX_RESMGR_UTILITY_Callback) != RESMGR_OK)
 8105120:	4905      	ldr	r1, [pc, #20]	@ (8105138 <MX_RESMGR_UTILITY_Init+0x1c>)
 8105122:	4806      	ldr	r0, [pc, #24]	@ (810513c <MX_RESMGR_UTILITY_Init+0x20>)
 8105124:	f009 f8a8 	bl	810e278 <ResMgr_Init>
 8105128:	4603      	mov	r3, r0
 810512a:	2b00      	cmp	r3, #0
 810512c:	d001      	beq.n	8105132 <MX_RESMGR_UTILITY_Init+0x16>
  {
    Error_Handler();
 810512e:	f7ff ffef 	bl	8105110 <Error_Handler>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8105132:	bf00      	nop
 8105134:	bd80      	pop	{r7, pc}
 8105136:	bf00      	nop
 8105138:	0810518d 	.word	0x0810518d
 810513c:	08105141 	.word	0x08105141

08105140 <MX_RESMGR_UTILITY_SendMsg>:

/* Resource Manager send message function */
__weak void MX_RESMGR_UTILITY_SendMsg(uint32_t id, uint32_t msg)
{
 8105140:	b480      	push	{r7}
 8105142:	b083      	sub	sp, #12
 8105144:	af00      	add	r7, sp, #0
 8105146:	6078      	str	r0, [r7, #4]
 8105148:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 4 */
    switch (msg)
 810514a:	683b      	ldr	r3, [r7, #0]
 810514c:	2b05      	cmp	r3, #5
 810514e:	d811      	bhi.n	8105174 <MX_RESMGR_UTILITY_SendMsg+0x34>
 8105150:	683b      	ldr	r3, [r7, #0]
 8105152:	2b05      	cmp	r3, #5
 8105154:	d811      	bhi.n	810517a <MX_RESMGR_UTILITY_SendMsg+0x3a>
 8105156:	a201      	add	r2, pc, #4	@ (adr r2, 810515c <MX_RESMGR_UTILITY_SendMsg+0x1c>)
 8105158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810515c:	0810517b 	.word	0x0810517b
 8105160:	0810517b 	.word	0x0810517b
 8105164:	0810517b 	.word	0x0810517b
 8105168:	0810517b 	.word	0x0810517b
 810516c:	0810517b 	.word	0x0810517b
 8105170:	0810517b 	.word	0x0810517b
 8105174:	683b      	ldr	r3, [r7, #0]
 8105176:	2bff      	cmp	r3, #255	@ 0xff
 8105178:	d001      	beq.n	810517e <MX_RESMGR_UTILITY_SendMsg+0x3e>
        case RESMGR_MSG_REJECT:
            //User Code
            break;

        default:
            break;
 810517a:	bf00      	nop
 810517c:	e000      	b.n	8105180 <MX_RESMGR_UTILITY_SendMsg+0x40>
            break;
 810517e:	bf00      	nop
    }
      /* USER CODE END 4 */

    return;
 8105180:	bf00      	nop
}
 8105182:	370c      	adds	r7, #12
 8105184:	46bd      	mov	sp, r7
 8105186:	f85d 7b04 	ldr.w	r7, [sp], #4
 810518a:	4770      	bx	lr

0810518c <MX_RESMGR_UTILITY_Callback>:

/* Resource Manager callback function */
__weak void MX_RESMGR_UTILITY_Callback(uint32_t id, uint32_t msg)
{
 810518c:	b480      	push	{r7}
 810518e:	b083      	sub	sp, #12
 8105190:	af00      	add	r7, sp, #0
 8105192:	6078      	str	r0, [r7, #4]
 8105194:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 5 */
    switch (msg)
 8105196:	683b      	ldr	r3, [r7, #0]
 8105198:	2b15      	cmp	r3, #21
 810519a:	d831      	bhi.n	8105200 <MX_RESMGR_UTILITY_Callback+0x74>
 810519c:	683b      	ldr	r3, [r7, #0]
 810519e:	2b15      	cmp	r3, #21
 81051a0:	d831      	bhi.n	8105206 <MX_RESMGR_UTILITY_Callback+0x7a>
 81051a2:	a201      	add	r2, pc, #4	@ (adr r2, 81051a8 <MX_RESMGR_UTILITY_Callback+0x1c>)
 81051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81051a8:	08105207 	.word	0x08105207
 81051ac:	08105207 	.word	0x08105207
 81051b0:	08105207 	.word	0x08105207
 81051b4:	08105207 	.word	0x08105207
 81051b8:	08105207 	.word	0x08105207
 81051bc:	08105207 	.word	0x08105207
 81051c0:	08105207 	.word	0x08105207
 81051c4:	08105207 	.word	0x08105207
 81051c8:	08105207 	.word	0x08105207
 81051cc:	08105207 	.word	0x08105207
 81051d0:	08105207 	.word	0x08105207
 81051d4:	08105207 	.word	0x08105207
 81051d8:	08105207 	.word	0x08105207
 81051dc:	08105207 	.word	0x08105207
 81051e0:	08105207 	.word	0x08105207
 81051e4:	08105207 	.word	0x08105207
 81051e8:	08105207 	.word	0x08105207
 81051ec:	08105207 	.word	0x08105207
 81051f0:	08105207 	.word	0x08105207
 81051f4:	08105207 	.word	0x08105207
 81051f8:	08105207 	.word	0x08105207
 81051fc:	08105207 	.word	0x08105207
 8105200:	683b      	ldr	r3, [r7, #0]
 8105202:	2bff      	cmp	r3, #255	@ 0xff
 8105204:	d001      	beq.n	810520a <MX_RESMGR_UTILITY_Callback+0x7e>
        case RESMGR_MSG_REJECTED:
            //User Code
            break;

        default:
            break;
 8105206:	bf00      	nop
 8105208:	e000      	b.n	810520c <MX_RESMGR_UTILITY_Callback+0x80>
            break;
 810520a:	bf00      	nop
    }
      /* USER CODE END 5 */

    return;
 810520c:	bf00      	nop
}
 810520e:	370c      	adds	r7, #12
 8105210:	46bd      	mov	sp, r7
 8105212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105216:	4770      	bx	lr

08105218 <_write>:

extern "C" void cpp_app_main(void);
extern "C" void MyTaskFunction(void *argument);  // Forward declaration

// Provide _write syscall for printf redirection
extern "C" int _write(int file, char *ptr, int len) {
 8105218:	b580      	push	{r7, lr}
 810521a:	b084      	sub	sp, #16
 810521c:	af00      	add	r7, sp, #0
 810521e:	60f8      	str	r0, [r7, #12]
 8105220:	60b9      	str	r1, [r7, #8]
 8105222:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8105224:	687b      	ldr	r3, [r7, #4]
 8105226:	b29a      	uxth	r2, r3
 8105228:	f04f 33ff 	mov.w	r3, #4294967295
 810522c:	68b9      	ldr	r1, [r7, #8]
 810522e:	4804      	ldr	r0, [pc, #16]	@ (8105240 <_write+0x28>)
 8105230:	f003 fe37 	bl	8108ea2 <HAL_UART_Transmit>
    return len;
 8105234:	687b      	ldr	r3, [r7, #4]
}
 8105236:	4618      	mov	r0, r3
 8105238:	3710      	adds	r7, #16
 810523a:	46bd      	mov	sp, r7
 810523c:	bd80      	pop	{r7, pc}
 810523e:	bf00      	nop
 8105240:	10000578 	.word	0x10000578

08105244 <cpp_app_main>:



// 🚀 Application entry point called from StartDefaultTask
extern "C" void cpp_app_main(void)
{
 8105244:	b580      	push	{r7, lr}
 8105246:	b08a      	sub	sp, #40	@ 0x28
 8105248:	af00      	add	r7, sp, #0
    printf("🔧 cpp_app_main started\n");
 810524a:	4812      	ldr	r0, [pc, #72]	@ (8105294 <cpp_app_main+0x50>)
 810524c:	f00a f8f4 	bl	810f438 <puts>

    // Create a new task
    const osThreadAttr_t myTask_attributes = {
 8105250:	463b      	mov	r3, r7
 8105252:	2224      	movs	r2, #36	@ 0x24
 8105254:	2100      	movs	r1, #0
 8105256:	4618      	mov	r0, r3
 8105258:	f00a f9e8 	bl	810f62c <memset>
 810525c:	4b0e      	ldr	r3, [pc, #56]	@ (8105298 <cpp_app_main+0x54>)
 810525e:	603b      	str	r3, [r7, #0]
 8105260:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105264:	617b      	str	r3, [r7, #20]
 8105266:	2318      	movs	r3, #24
 8105268:	61bb      	str	r3, [r7, #24]
        .name = "myTask",
        .stack_size = 512 * 4,  // 2KB stack
        .priority = (osPriority_t) osPriorityNormal,
    };

    osThreadId_t myTaskHandle = osThreadNew(MyTaskFunction, nullptr, &myTask_attributes);
 810526a:	463b      	mov	r3, r7
 810526c:	461a      	mov	r2, r3
 810526e:	2100      	movs	r1, #0
 8105270:	480a      	ldr	r0, [pc, #40]	@ (810529c <cpp_app_main+0x58>)
 8105272:	f006 fa8f 	bl	810b794 <osThreadNew>
 8105276:	6278      	str	r0, [r7, #36]	@ 0x24
    if (myTaskHandle == nullptr) {
 8105278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810527a:	2b00      	cmp	r3, #0
 810527c:	d103      	bne.n	8105286 <cpp_app_main+0x42>
        printf("❌ Failed to create MyTaskFunction\n");
 810527e:	4808      	ldr	r0, [pc, #32]	@ (81052a0 <cpp_app_main+0x5c>)
 8105280:	f00a f8da 	bl	810f438 <puts>
        printf("✅ MyTaskFunction created successfully\n");
    }

    // You can return here — or sleep forever if this is the main task
    // osDelay(osWaitForever); // Optional if not returning
}
 8105284:	e002      	b.n	810528c <cpp_app_main+0x48>
        printf("✅ MyTaskFunction created successfully\n");
 8105286:	4807      	ldr	r0, [pc, #28]	@ (81052a4 <cpp_app_main+0x60>)
 8105288:	f00a f8d6 	bl	810f438 <puts>
}
 810528c:	bf00      	nop
 810528e:	3728      	adds	r7, #40	@ 0x28
 8105290:	46bd      	mov	sp, r7
 8105292:	bd80      	pop	{r7, pc}
 8105294:	0811154c 	.word	0x0811154c
 8105298:	08111568 	.word	0x08111568
 810529c:	081052a9 	.word	0x081052a9
 81052a0:	08111570 	.word	0x08111570
 81052a4:	08111594 	.word	0x08111594

081052a8 <MyTaskFunction>:

extern  void MyTaskFunction(void *argument)
{
 81052a8:	b590      	push	{r4, r7, lr}
 81052aa:	b0e9      	sub	sp, #420	@ 0x1a4
 81052ac:	af00      	add	r7, sp, #0
 81052ae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 81052b2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 81052b6:	6018      	str	r0, [r3, #0]


	DayCam* dayCam = new DayCam(&huart1);
 81052b8:	f44f 7090 	mov.w	r0, #288	@ 0x120
 81052bc:	f009 f98c 	bl	810e5d8 <_Znwj>
 81052c0:	4603      	mov	r3, r0
 81052c2:	461c      	mov	r4, r3
 81052c4:	4912      	ldr	r1, [pc, #72]	@ (8105310 <MyTaskFunction+0x68>)
 81052c6:	4620      	mov	r0, r4
 81052c8:	f7fc fc48 	bl	8101b5c <_ZN6DayCamC1EP20__UART_HandleTypeDef>
 81052cc:	f8c7 419c 	str.w	r4, [r7, #412]	@ 0x19c
	Client client(&huart3);
 81052d0:	f107 0308 	add.w	r3, r7, #8
 81052d4:	490f      	ldr	r1, [pc, #60]	@ (8105314 <MyTaskFunction+0x6c>)
 81052d6:	4618      	mov	r0, r3
 81052d8:	f7fb fed6 	bl	8101088 <_ZN6ClientC1EP20__UART_HandleTypeDef>
//	LRX20A* lrx20A = new LRX20A(&huart1);

//   IRay iRay(&huart1);
    client.Init();
 81052dc:	f107 0308 	add.w	r3, r7, #8
 81052e0:	4618      	mov	r0, r3
 81052e2:	f7fb ff07 	bl	81010f4 <_ZN6Client4InitEv>
//   iRay.Init();


    client.setDayCam(dayCam);
 81052e6:	f107 0308 	add.w	r3, r7, #8
 81052ea:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 81052ee:	4618      	mov	r0, r3
 81052f0:	f7fc f982 	bl	81015f8 <_ZN6Client9setDayCamEP6DayCam>

 //   client.setLRF(lrx20A);

    dayCam->Init();
 81052f4:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 81052f8:	f7fc fd4e 	bl	8101d98 <_ZN6DayCam4InitEv>
  //  dayCam->address_command;

    for (;;)
    {
    //    printf("📣 Hello from MyTaskFunction!\r\n");
        HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);  // Optional
 81052fc:	2102      	movs	r1, #2
 81052fe:	4806      	ldr	r0, [pc, #24]	@ (8105318 <MyTaskFunction+0x70>)
 8105300:	f001 fbf3 	bl	8106aea <HAL_GPIO_TogglePin>
        osDelay(1000);  // delay 1 second
 8105304:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8105308:	f006 fad6 	bl	810b8b8 <osDelay>
        HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);  // Optional
 810530c:	bf00      	nop
 810530e:	e7f5      	b.n	81052fc <MyTaskFunction+0x54>
 8105310:	10000450 	.word	0x10000450
 8105314:	10000578 	.word	0x10000578
 8105318:	58021000 	.word	0x58021000

0810531c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810531c:	b580      	push	{r7, lr}
 810531e:	b082      	sub	sp, #8
 8105320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105322:	4b0c      	ldr	r3, [pc, #48]	@ (8105354 <HAL_MspInit+0x38>)
 8105324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105328:	4a0a      	ldr	r2, [pc, #40]	@ (8105354 <HAL_MspInit+0x38>)
 810532a:	f043 0302 	orr.w	r3, r3, #2
 810532e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8105332:	4b08      	ldr	r3, [pc, #32]	@ (8105354 <HAL_MspInit+0x38>)
 8105334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105338:	f003 0302 	and.w	r3, r3, #2
 810533c:	607b      	str	r3, [r7, #4]
 810533e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8105340:	2200      	movs	r2, #0
 8105342:	210f      	movs	r1, #15
 8105344:	f06f 0001 	mvn.w	r0, #1
 8105348:	f000 fc6d 	bl	8105c26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810534c:	bf00      	nop
 810534e:	3708      	adds	r7, #8
 8105350:	46bd      	mov	sp, r7
 8105352:	bd80      	pop	{r7, pc}
 8105354:	58024400 	.word	0x58024400

08105358 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8105358:	b580      	push	{r7, lr}
 810535a:	b0ba      	sub	sp, #232	@ 0xe8
 810535c:	af00      	add	r7, sp, #0
 810535e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8105360:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8105364:	2200      	movs	r2, #0
 8105366:	601a      	str	r2, [r3, #0]
 8105368:	605a      	str	r2, [r3, #4]
 810536a:	609a      	str	r2, [r3, #8]
 810536c:	60da      	str	r2, [r3, #12]
 810536e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8105370:	f107 0310 	add.w	r3, r7, #16
 8105374:	22c0      	movs	r2, #192	@ 0xc0
 8105376:	2100      	movs	r1, #0
 8105378:	4618      	mov	r0, r3
 810537a:	f00a f957 	bl	810f62c <memset>
  if(hspi->Instance==SPI2)
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	681b      	ldr	r3, [r3, #0]
 8105382:	4a26      	ldr	r2, [pc, #152]	@ (810541c <HAL_SPI_MspInit+0xc4>)
 8105384:	4293      	cmp	r3, r2
 8105386:	d145      	bne.n	8105414 <HAL_SPI_MspInit+0xbc>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8105388:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 810538c:	f04f 0300 	mov.w	r3, #0
 8105390:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8105394:	2300      	movs	r3, #0
 8105396:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8105398:	f107 0310 	add.w	r3, r7, #16
 810539c:	4618      	mov	r0, r3
 810539e:	f001 fdc5 	bl	8106f2c <HAL_RCCEx_PeriphCLKConfig>
 81053a2:	4603      	mov	r3, r0
 81053a4:	2b00      	cmp	r3, #0
 81053a6:	d001      	beq.n	81053ac <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 81053a8:	f7ff feb2 	bl	8105110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 81053ac:	4b1c      	ldr	r3, [pc, #112]	@ (8105420 <HAL_SPI_MspInit+0xc8>)
 81053ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81053b2:	4a1b      	ldr	r2, [pc, #108]	@ (8105420 <HAL_SPI_MspInit+0xc8>)
 81053b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81053b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81053bc:	4b18      	ldr	r3, [pc, #96]	@ (8105420 <HAL_SPI_MspInit+0xc8>)
 81053be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81053c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81053c6:	60fb      	str	r3, [r7, #12]
 81053c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81053ca:	4b15      	ldr	r3, [pc, #84]	@ (8105420 <HAL_SPI_MspInit+0xc8>)
 81053cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81053d0:	4a13      	ldr	r2, [pc, #76]	@ (8105420 <HAL_SPI_MspInit+0xc8>)
 81053d2:	f043 0302 	orr.w	r3, r3, #2
 81053d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81053da:	4b11      	ldr	r3, [pc, #68]	@ (8105420 <HAL_SPI_MspInit+0xc8>)
 81053dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81053e0:	f003 0302 	and.w	r3, r3, #2
 81053e4:	60bb      	str	r3, [r7, #8]
 81053e6:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 81053e8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 81053ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81053f0:	2302      	movs	r3, #2
 81053f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81053f6:	2300      	movs	r3, #0
 81053f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81053fc:	2300      	movs	r3, #0
 81053fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8105402:	2305      	movs	r3, #5
 8105404:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8105408:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810540c:	4619      	mov	r1, r3
 810540e:	4805      	ldr	r0, [pc, #20]	@ (8105424 <HAL_SPI_MspInit+0xcc>)
 8105410:	f001 f9a2 	bl	8106758 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8105414:	bf00      	nop
 8105416:	37e8      	adds	r7, #232	@ 0xe8
 8105418:	46bd      	mov	sp, r7
 810541a:	bd80      	pop	{r7, pc}
 810541c:	40003800 	.word	0x40003800
 8105420:	58024400 	.word	0x58024400
 8105424:	58020400 	.word	0x58020400

08105428 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8105428:	b580      	push	{r7, lr}
 810542a:	b0be      	sub	sp, #248	@ 0xf8
 810542c:	af00      	add	r7, sp, #0
 810542e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8105430:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8105434:	2200      	movs	r2, #0
 8105436:	601a      	str	r2, [r3, #0]
 8105438:	605a      	str	r2, [r3, #4]
 810543a:	609a      	str	r2, [r3, #8]
 810543c:	60da      	str	r2, [r3, #12]
 810543e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8105440:	f107 0320 	add.w	r3, r7, #32
 8105444:	22c0      	movs	r2, #192	@ 0xc0
 8105446:	2100      	movs	r1, #0
 8105448:	4618      	mov	r0, r3
 810544a:	f00a f8ef 	bl	810f62c <memset>
  if(huart->Instance==USART1)
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	681b      	ldr	r3, [r3, #0]
 8105452:	4a7f      	ldr	r2, [pc, #508]	@ (8105650 <HAL_UART_MspInit+0x228>)
 8105454:	4293      	cmp	r3, r2
 8105456:	d14e      	bne.n	81054f6 <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8105458:	f04f 0201 	mov.w	r2, #1
 810545c:	f04f 0300 	mov.w	r3, #0
 8105460:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8105464:	2300      	movs	r3, #0
 8105466:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810546a:	f107 0320 	add.w	r3, r7, #32
 810546e:	4618      	mov	r0, r3
 8105470:	f001 fd5c 	bl	8106f2c <HAL_RCCEx_PeriphCLKConfig>
 8105474:	4603      	mov	r3, r0
 8105476:	2b00      	cmp	r3, #0
 8105478:	d001      	beq.n	810547e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 810547a:	f7ff fe49 	bl	8105110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 810547e:	4b75      	ldr	r3, [pc, #468]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 8105480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105484:	4a73      	ldr	r2, [pc, #460]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 8105486:	f043 0310 	orr.w	r3, r3, #16
 810548a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810548e:	4b71      	ldr	r3, [pc, #452]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 8105490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105494:	f003 0310 	and.w	r3, r3, #16
 8105498:	61fb      	str	r3, [r7, #28]
 810549a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810549c:	4b6d      	ldr	r3, [pc, #436]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 810549e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81054a2:	4a6c      	ldr	r2, [pc, #432]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 81054a4:	f043 0302 	orr.w	r3, r3, #2
 81054a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81054ac:	4b69      	ldr	r3, [pc, #420]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 81054ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81054b2:	f003 0302 	and.w	r3, r3, #2
 81054b6:	61bb      	str	r3, [r7, #24]
 81054b8:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81054ba:	23c0      	movs	r3, #192	@ 0xc0
 81054bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81054c0:	2302      	movs	r3, #2
 81054c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81054c6:	2300      	movs	r3, #0
 81054c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81054cc:	2300      	movs	r3, #0
 81054ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 81054d2:	2307      	movs	r3, #7
 81054d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81054d8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81054dc:	4619      	mov	r1, r3
 81054de:	485e      	ldr	r0, [pc, #376]	@ (8105658 <HAL_UART_MspInit+0x230>)
 81054e0:	f001 f93a 	bl	8106758 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 81054e4:	2200      	movs	r2, #0
 81054e6:	2105      	movs	r1, #5
 81054e8:	2025      	movs	r0, #37	@ 0x25
 81054ea:	f000 fb9c 	bl	8105c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 81054ee:	2025      	movs	r0, #37	@ 0x25
 81054f0:	f000 fbb3 	bl	8105c5a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 81054f4:	e0a7      	b.n	8105646 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART2)
 81054f6:	687b      	ldr	r3, [r7, #4]
 81054f8:	681b      	ldr	r3, [r3, #0]
 81054fa:	4a58      	ldr	r2, [pc, #352]	@ (810565c <HAL_UART_MspInit+0x234>)
 81054fc:	4293      	cmp	r3, r2
 81054fe:	d14e      	bne.n	810559e <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8105500:	f04f 0202 	mov.w	r2, #2
 8105504:	f04f 0300 	mov.w	r3, #0
 8105508:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810550c:	2300      	movs	r3, #0
 810550e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8105512:	f107 0320 	add.w	r3, r7, #32
 8105516:	4618      	mov	r0, r3
 8105518:	f001 fd08 	bl	8106f2c <HAL_RCCEx_PeriphCLKConfig>
 810551c:	4603      	mov	r3, r0
 810551e:	2b00      	cmp	r3, #0
 8105520:	d001      	beq.n	8105526 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8105522:	f7ff fdf5 	bl	8105110 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8105526:	4b4b      	ldr	r3, [pc, #300]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 8105528:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810552c:	4a49      	ldr	r2, [pc, #292]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 810552e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105532:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8105536:	4b47      	ldr	r3, [pc, #284]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 8105538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810553c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105540:	617b      	str	r3, [r7, #20]
 8105542:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8105544:	4b43      	ldr	r3, [pc, #268]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 8105546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810554a:	4a42      	ldr	r2, [pc, #264]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 810554c:	f043 0301 	orr.w	r3, r3, #1
 8105550:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8105554:	4b3f      	ldr	r3, [pc, #252]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 8105556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810555a:	f003 0301 	and.w	r3, r3, #1
 810555e:	613b      	str	r3, [r7, #16]
 8105560:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8105562:	230c      	movs	r3, #12
 8105564:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8105568:	2302      	movs	r3, #2
 810556a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810556e:	2300      	movs	r3, #0
 8105570:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8105574:	2300      	movs	r3, #0
 8105576:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 810557a:	2307      	movs	r3, #7
 810557c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8105580:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8105584:	4619      	mov	r1, r3
 8105586:	4836      	ldr	r0, [pc, #216]	@ (8105660 <HAL_UART_MspInit+0x238>)
 8105588:	f001 f8e6 	bl	8106758 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 810558c:	2200      	movs	r2, #0
 810558e:	2105      	movs	r1, #5
 8105590:	2026      	movs	r0, #38	@ 0x26
 8105592:	f000 fb48 	bl	8105c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8105596:	2026      	movs	r0, #38	@ 0x26
 8105598:	f000 fb5f 	bl	8105c5a <HAL_NVIC_EnableIRQ>
}
 810559c:	e053      	b.n	8105646 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	681b      	ldr	r3, [r3, #0]
 81055a2:	4a30      	ldr	r2, [pc, #192]	@ (8105664 <HAL_UART_MspInit+0x23c>)
 81055a4:	4293      	cmp	r3, r2
 81055a6:	d14e      	bne.n	8105646 <HAL_UART_MspInit+0x21e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81055a8:	f04f 0202 	mov.w	r2, #2
 81055ac:	f04f 0300 	mov.w	r3, #0
 81055b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81055b4:	2300      	movs	r3, #0
 81055b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81055ba:	f107 0320 	add.w	r3, r7, #32
 81055be:	4618      	mov	r0, r3
 81055c0:	f001 fcb4 	bl	8106f2c <HAL_RCCEx_PeriphCLKConfig>
 81055c4:	4603      	mov	r3, r0
 81055c6:	2b00      	cmp	r3, #0
 81055c8:	d001      	beq.n	81055ce <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 81055ca:	f7ff fda1 	bl	8105110 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 81055ce:	4b21      	ldr	r3, [pc, #132]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 81055d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81055d4:	4a1f      	ldr	r2, [pc, #124]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 81055d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81055da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81055de:	4b1d      	ldr	r3, [pc, #116]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 81055e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81055e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81055e8:	60fb      	str	r3, [r7, #12]
 81055ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81055ec:	4b19      	ldr	r3, [pc, #100]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 81055ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81055f2:	4a18      	ldr	r2, [pc, #96]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 81055f4:	f043 0308 	orr.w	r3, r3, #8
 81055f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81055fc:	4b15      	ldr	r3, [pc, #84]	@ (8105654 <HAL_UART_MspInit+0x22c>)
 81055fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105602:	f003 0308 	and.w	r3, r3, #8
 8105606:	60bb      	str	r3, [r7, #8]
 8105608:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 810560a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810560e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8105612:	2302      	movs	r3, #2
 8105614:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8105618:	2300      	movs	r3, #0
 810561a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810561e:	2300      	movs	r3, #0
 8105620:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8105624:	2307      	movs	r3, #7
 8105626:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810562a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810562e:	4619      	mov	r1, r3
 8105630:	480d      	ldr	r0, [pc, #52]	@ (8105668 <HAL_UART_MspInit+0x240>)
 8105632:	f001 f891 	bl	8106758 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8105636:	2200      	movs	r2, #0
 8105638:	2105      	movs	r1, #5
 810563a:	2027      	movs	r0, #39	@ 0x27
 810563c:	f000 faf3 	bl	8105c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8105640:	2027      	movs	r0, #39	@ 0x27
 8105642:	f000 fb0a 	bl	8105c5a <HAL_NVIC_EnableIRQ>
}
 8105646:	bf00      	nop
 8105648:	37f8      	adds	r7, #248	@ 0xf8
 810564a:	46bd      	mov	sp, r7
 810564c:	bd80      	pop	{r7, pc}
 810564e:	bf00      	nop
 8105650:	40011000 	.word	0x40011000
 8105654:	58024400 	.word	0x58024400
 8105658:	58020400 	.word	0x58020400
 810565c:	40004400 	.word	0x40004400
 8105660:	58020000 	.word	0x58020000
 8105664:	40004800 	.word	0x40004800
 8105668:	58020c00 	.word	0x58020c00

0810566c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810566c:	b480      	push	{r7}
 810566e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8105670:	bf00      	nop
 8105672:	e7fd      	b.n	8105670 <NMI_Handler+0x4>

08105674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8105674:	b580      	push	{r7, lr}
 8105676:	b086      	sub	sp, #24
 8105678:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN HardFault_IRQn 0 */

    __asm volatile (
 810567a:	f01e 0f04 	tst.w	lr, #4
 810567e:	bf0c      	ite	eq
 8105680:	f3ef 8008 	mrseq	r0, MSP
 8105684:	f3ef 8009 	mrsne	r0, PSP
 8105688:	f000 b81a 	b.w	81056c0 <hard_fault_handler_c>
        "MRSEQ r0, MSP \n"
        "MRSNE r0, PSP \n"
        "B hard_fault_handler_c \n"
    );

	    uint32_t hfsr = SCB->HFSR;
 810568c:	4b0a      	ldr	r3, [pc, #40]	@ (81056b8 <HardFault_Handler+0x44>)
 810568e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105690:	60fb      	str	r3, [r7, #12]
	    uint32_t cfsr = SCB->CFSR;
 8105692:	4b09      	ldr	r3, [pc, #36]	@ (81056b8 <HardFault_Handler+0x44>)
 8105694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105696:	60bb      	str	r3, [r7, #8]
	    uint32_t mmfar = SCB->MMFAR;
 8105698:	4b07      	ldr	r3, [pc, #28]	@ (81056b8 <HardFault_Handler+0x44>)
 810569a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810569c:	607b      	str	r3, [r7, #4]
	    uint32_t bfar = SCB->BFAR;
 810569e:	4b06      	ldr	r3, [pc, #24]	@ (81056b8 <HardFault_Handler+0x44>)
 81056a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81056a2:	603b      	str	r3, [r7, #0]

	    printf(" HardFault! HFSR=0x%08lx CFSR=0x%08lx MMFAR=0x%08lx BFAR=0x%08lx\n",
 81056a4:	683b      	ldr	r3, [r7, #0]
 81056a6:	9300      	str	r3, [sp, #0]
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	68ba      	ldr	r2, [r7, #8]
 81056ac:	68f9      	ldr	r1, [r7, #12]
 81056ae:	4803      	ldr	r0, [pc, #12]	@ (81056bc <HardFault_Handler+0x48>)
 81056b0:	f009 fe52 	bl	810f358 <iprintf>
	           hfsr, cfsr, mmfar, bfar);
	    while (1);
 81056b4:	bf00      	nop
 81056b6:	e7fd      	b.n	81056b4 <HardFault_Handler+0x40>
 81056b8:	e000ed00 	.word	0xe000ed00
 81056bc:	081115bc 	.word	0x081115bc

081056c0 <hard_fault_handler_c>:
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
void hard_fault_handler_c(uint32_t* stack) {
 81056c0:	b580      	push	{r7, lr}
 81056c2:	b082      	sub	sp, #8
 81056c4:	af00      	add	r7, sp, #0
 81056c6:	6078      	str	r0, [r7, #4]
    printf("HardFault! PC=0x%08lx\n", stack[6]);
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	3318      	adds	r3, #24
 81056cc:	681b      	ldr	r3, [r3, #0]
 81056ce:	4619      	mov	r1, r3
 81056d0:	4802      	ldr	r0, [pc, #8]	@ (81056dc <hard_fault_handler_c+0x1c>)
 81056d2:	f009 fe41 	bl	810f358 <iprintf>
    while (1);
 81056d6:	bf00      	nop
 81056d8:	e7fd      	b.n	81056d6 <hard_fault_handler_c+0x16>
 81056da:	bf00      	nop
 81056dc:	08111600 	.word	0x08111600

081056e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81056e0:	b480      	push	{r7}
 81056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81056e4:	bf00      	nop
 81056e6:	e7fd      	b.n	81056e4 <MemManage_Handler+0x4>

081056e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81056e8:	b480      	push	{r7}
 81056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81056ec:	bf00      	nop
 81056ee:	e7fd      	b.n	81056ec <BusFault_Handler+0x4>

081056f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81056f0:	b480      	push	{r7}
 81056f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81056f4:	bf00      	nop
 81056f6:	e7fd      	b.n	81056f4 <UsageFault_Handler+0x4>

081056f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81056f8:	b480      	push	{r7}
 81056fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81056fc:	bf00      	nop
 81056fe:	46bd      	mov	sp, r7
 8105700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105704:	4770      	bx	lr

08105706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8105706:	b580      	push	{r7, lr}
 8105708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810570a:	f000 f991 	bl	8105a30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 810570e:	f008 f977 	bl	810da00 <xTaskGetSchedulerState>
 8105712:	4603      	mov	r3, r0
 8105714:	2b01      	cmp	r3, #1
 8105716:	d001      	beq.n	810571c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8105718:	f006 fd8e 	bl	810c238 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810571c:	bf00      	nop
 810571e:	bd80      	pop	{r7, pc}

08105720 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8105720:	b580      	push	{r7, lr}
 8105722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8105724:	4802      	ldr	r0, [pc, #8]	@ (8105730 <USART1_IRQHandler+0x10>)
 8105726:	f003 fc97 	bl	8109058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 810572a:	bf00      	nop
 810572c:	bd80      	pop	{r7, pc}
 810572e:	bf00      	nop
 8105730:	10000450 	.word	0x10000450

08105734 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8105734:	b580      	push	{r7, lr}
 8105736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8105738:	4802      	ldr	r0, [pc, #8]	@ (8105744 <USART2_IRQHandler+0x10>)
 810573a:	f003 fc8d 	bl	8109058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 810573e:	bf00      	nop
 8105740:	bd80      	pop	{r7, pc}
 8105742:	bf00      	nop
 8105744:	100004e4 	.word	0x100004e4

08105748 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8105748:	b580      	push	{r7, lr}
 810574a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 810574c:	4802      	ldr	r0, [pc, #8]	@ (8105758 <USART3_IRQHandler+0x10>)
 810574e:	f003 fc83 	bl	8109058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8105752:	bf00      	nop
 8105754:	bd80      	pop	{r7, pc}
 8105756:	bf00      	nop
 8105758:	10000578 	.word	0x10000578

0810575c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 810575c:	b480      	push	{r7}
 810575e:	af00      	add	r7, sp, #0
  return 1;
 8105760:	2301      	movs	r3, #1
}
 8105762:	4618      	mov	r0, r3
 8105764:	46bd      	mov	sp, r7
 8105766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810576a:	4770      	bx	lr

0810576c <_kill>:

int _kill(int pid, int sig)
{
 810576c:	b580      	push	{r7, lr}
 810576e:	b082      	sub	sp, #8
 8105770:	af00      	add	r7, sp, #0
 8105772:	6078      	str	r0, [r7, #4]
 8105774:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8105776:	f00a f85d 	bl	810f834 <__errno>
 810577a:	4603      	mov	r3, r0
 810577c:	2216      	movs	r2, #22
 810577e:	601a      	str	r2, [r3, #0]
  return -1;
 8105780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8105784:	4618      	mov	r0, r3
 8105786:	3708      	adds	r7, #8
 8105788:	46bd      	mov	sp, r7
 810578a:	bd80      	pop	{r7, pc}

0810578c <_exit>:

void _exit (int status)
{
 810578c:	b580      	push	{r7, lr}
 810578e:	b082      	sub	sp, #8
 8105790:	af00      	add	r7, sp, #0
 8105792:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8105794:	f04f 31ff 	mov.w	r1, #4294967295
 8105798:	6878      	ldr	r0, [r7, #4]
 810579a:	f7ff ffe7 	bl	810576c <_kill>
  while (1) {}    /* Make sure we hang here */
 810579e:	bf00      	nop
 81057a0:	e7fd      	b.n	810579e <_exit+0x12>

081057a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81057a2:	b580      	push	{r7, lr}
 81057a4:	b086      	sub	sp, #24
 81057a6:	af00      	add	r7, sp, #0
 81057a8:	60f8      	str	r0, [r7, #12]
 81057aa:	60b9      	str	r1, [r7, #8]
 81057ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81057ae:	2300      	movs	r3, #0
 81057b0:	617b      	str	r3, [r7, #20]
 81057b2:	e00a      	b.n	81057ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 81057b4:	f3af 8000 	nop.w
 81057b8:	4601      	mov	r1, r0
 81057ba:	68bb      	ldr	r3, [r7, #8]
 81057bc:	1c5a      	adds	r2, r3, #1
 81057be:	60ba      	str	r2, [r7, #8]
 81057c0:	b2ca      	uxtb	r2, r1
 81057c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81057c4:	697b      	ldr	r3, [r7, #20]
 81057c6:	3301      	adds	r3, #1
 81057c8:	617b      	str	r3, [r7, #20]
 81057ca:	697a      	ldr	r2, [r7, #20]
 81057cc:	687b      	ldr	r3, [r7, #4]
 81057ce:	429a      	cmp	r2, r3
 81057d0:	dbf0      	blt.n	81057b4 <_read+0x12>
  }

  return len;
 81057d2:	687b      	ldr	r3, [r7, #4]
}
 81057d4:	4618      	mov	r0, r3
 81057d6:	3718      	adds	r7, #24
 81057d8:	46bd      	mov	sp, r7
 81057da:	bd80      	pop	{r7, pc}

081057dc <_close>:
  }
  return len;
}

int _close(int file)
{
 81057dc:	b480      	push	{r7}
 81057de:	b083      	sub	sp, #12
 81057e0:	af00      	add	r7, sp, #0
 81057e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81057e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81057e8:	4618      	mov	r0, r3
 81057ea:	370c      	adds	r7, #12
 81057ec:	46bd      	mov	sp, r7
 81057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057f2:	4770      	bx	lr

081057f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81057f4:	b480      	push	{r7}
 81057f6:	b083      	sub	sp, #12
 81057f8:	af00      	add	r7, sp, #0
 81057fa:	6078      	str	r0, [r7, #4]
 81057fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81057fe:	683b      	ldr	r3, [r7, #0]
 8105800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8105804:	605a      	str	r2, [r3, #4]
  return 0;
 8105806:	2300      	movs	r3, #0
}
 8105808:	4618      	mov	r0, r3
 810580a:	370c      	adds	r7, #12
 810580c:	46bd      	mov	sp, r7
 810580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105812:	4770      	bx	lr

08105814 <_isatty>:

int _isatty(int file)
{
 8105814:	b480      	push	{r7}
 8105816:	b083      	sub	sp, #12
 8105818:	af00      	add	r7, sp, #0
 810581a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 810581c:	2301      	movs	r3, #1
}
 810581e:	4618      	mov	r0, r3
 8105820:	370c      	adds	r7, #12
 8105822:	46bd      	mov	sp, r7
 8105824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105828:	4770      	bx	lr

0810582a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 810582a:	b480      	push	{r7}
 810582c:	b085      	sub	sp, #20
 810582e:	af00      	add	r7, sp, #0
 8105830:	60f8      	str	r0, [r7, #12]
 8105832:	60b9      	str	r1, [r7, #8]
 8105834:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8105836:	2300      	movs	r3, #0
}
 8105838:	4618      	mov	r0, r3
 810583a:	3714      	adds	r7, #20
 810583c:	46bd      	mov	sp, r7
 810583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105842:	4770      	bx	lr

08105844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8105844:	b580      	push	{r7, lr}
 8105846:	b086      	sub	sp, #24
 8105848:	af00      	add	r7, sp, #0
 810584a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810584c:	4a14      	ldr	r2, [pc, #80]	@ (81058a0 <_sbrk+0x5c>)
 810584e:	4b15      	ldr	r3, [pc, #84]	@ (81058a4 <_sbrk+0x60>)
 8105850:	1ad3      	subs	r3, r2, r3
 8105852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8105854:	697b      	ldr	r3, [r7, #20]
 8105856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8105858:	4b13      	ldr	r3, [pc, #76]	@ (81058a8 <_sbrk+0x64>)
 810585a:	681b      	ldr	r3, [r3, #0]
 810585c:	2b00      	cmp	r3, #0
 810585e:	d102      	bne.n	8105866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8105860:	4b11      	ldr	r3, [pc, #68]	@ (81058a8 <_sbrk+0x64>)
 8105862:	4a12      	ldr	r2, [pc, #72]	@ (81058ac <_sbrk+0x68>)
 8105864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8105866:	4b10      	ldr	r3, [pc, #64]	@ (81058a8 <_sbrk+0x64>)
 8105868:	681a      	ldr	r2, [r3, #0]
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	4413      	add	r3, r2
 810586e:	693a      	ldr	r2, [r7, #16]
 8105870:	429a      	cmp	r2, r3
 8105872:	d207      	bcs.n	8105884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8105874:	f009 ffde 	bl	810f834 <__errno>
 8105878:	4603      	mov	r3, r0
 810587a:	220c      	movs	r2, #12
 810587c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810587e:	f04f 33ff 	mov.w	r3, #4294967295
 8105882:	e009      	b.n	8105898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8105884:	4b08      	ldr	r3, [pc, #32]	@ (81058a8 <_sbrk+0x64>)
 8105886:	681b      	ldr	r3, [r3, #0]
 8105888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810588a:	4b07      	ldr	r3, [pc, #28]	@ (81058a8 <_sbrk+0x64>)
 810588c:	681a      	ldr	r2, [r3, #0]
 810588e:	687b      	ldr	r3, [r7, #4]
 8105890:	4413      	add	r3, r2
 8105892:	4a05      	ldr	r2, [pc, #20]	@ (81058a8 <_sbrk+0x64>)
 8105894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8105896:	68fb      	ldr	r3, [r7, #12]
}
 8105898:	4618      	mov	r0, r3
 810589a:	3718      	adds	r7, #24
 810589c:	46bd      	mov	sp, r7
 810589e:	bd80      	pop	{r7, pc}
 81058a0:	10048000 	.word	0x10048000
 81058a4:	00000400 	.word	0x00000400
 81058a8:	10000610 	.word	0x10000610
 81058ac:	10005158 	.word	0x10005158

081058b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81058b0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81058ec <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 81058b4:	f7fb fbae 	bl	8101014 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 81058b8:	f7fb fb94 	bl	8100fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81058bc:	480c      	ldr	r0, [pc, #48]	@ (81058f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81058be:	490d      	ldr	r1, [pc, #52]	@ (81058f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81058c0:	4a0d      	ldr	r2, [pc, #52]	@ (81058f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81058c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81058c4:	e002      	b.n	81058cc <LoopCopyDataInit>

081058c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81058c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81058c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81058ca:	3304      	adds	r3, #4

081058cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81058cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81058ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81058d0:	d3f9      	bcc.n	81058c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81058d2:	4a0a      	ldr	r2, [pc, #40]	@ (81058fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81058d4:	4c0a      	ldr	r4, [pc, #40]	@ (8105900 <LoopFillZerobss+0x22>)
  movs r3, #0
 81058d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81058d8:	e001      	b.n	81058de <LoopFillZerobss>

081058da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81058da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81058dc:	3204      	adds	r2, #4

081058de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81058de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81058e0:	d3fb      	bcc.n	81058da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81058e2:	f009 ffad 	bl	810f840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81058e6:	f7ff f9e7 	bl	8104cb8 <main>
  bx  lr
 81058ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81058ec:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81058f0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81058f4:	100001dc 	.word	0x100001dc
  ldr r2, =_sidata
 81058f8:	08111a64 	.word	0x08111a64
  ldr r2, =_sbss
 81058fc:	10000394 	.word	0x10000394
  ldr r4, =_ebss
 8105900:	10005158 	.word	0x10005158

08105904 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8105904:	e7fe      	b.n	8105904 <ADC3_IRQHandler>
	...

08105908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8105908:	b580      	push	{r7, lr}
 810590a:	b082      	sub	sp, #8
 810590c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810590e:	4b28      	ldr	r3, [pc, #160]	@ (81059b0 <HAL_Init+0xa8>)
 8105910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8105914:	4a26      	ldr	r2, [pc, #152]	@ (81059b0 <HAL_Init+0xa8>)
 8105916:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810591a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810591e:	4b24      	ldr	r3, [pc, #144]	@ (81059b0 <HAL_Init+0xa8>)
 8105920:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8105924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8105928:	603b      	str	r3, [r7, #0]
 810592a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810592c:	4b21      	ldr	r3, [pc, #132]	@ (81059b4 <HAL_Init+0xac>)
 810592e:	681b      	ldr	r3, [r3, #0]
 8105930:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8105934:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8105938:	4a1e      	ldr	r2, [pc, #120]	@ (81059b4 <HAL_Init+0xac>)
 810593a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810593e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8105940:	4b1c      	ldr	r3, [pc, #112]	@ (81059b4 <HAL_Init+0xac>)
 8105942:	681b      	ldr	r3, [r3, #0]
 8105944:	4a1b      	ldr	r2, [pc, #108]	@ (81059b4 <HAL_Init+0xac>)
 8105946:	f043 0301 	orr.w	r3, r3, #1
 810594a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810594c:	2003      	movs	r0, #3
 810594e:	f000 f95f 	bl	8105c10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8105952:	f001 f913 	bl	8106b7c <HAL_RCC_GetSysClockFreq>
 8105956:	4602      	mov	r2, r0
 8105958:	4b15      	ldr	r3, [pc, #84]	@ (81059b0 <HAL_Init+0xa8>)
 810595a:	699b      	ldr	r3, [r3, #24]
 810595c:	0a1b      	lsrs	r3, r3, #8
 810595e:	f003 030f 	and.w	r3, r3, #15
 8105962:	4915      	ldr	r1, [pc, #84]	@ (81059b8 <HAL_Init+0xb0>)
 8105964:	5ccb      	ldrb	r3, [r1, r3]
 8105966:	f003 031f 	and.w	r3, r3, #31
 810596a:	fa22 f303 	lsr.w	r3, r2, r3
 810596e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105970:	4b0f      	ldr	r3, [pc, #60]	@ (81059b0 <HAL_Init+0xa8>)
 8105972:	699b      	ldr	r3, [r3, #24]
 8105974:	f003 030f 	and.w	r3, r3, #15
 8105978:	4a0f      	ldr	r2, [pc, #60]	@ (81059b8 <HAL_Init+0xb0>)
 810597a:	5cd3      	ldrb	r3, [r2, r3]
 810597c:	f003 031f 	and.w	r3, r3, #31
 8105980:	687a      	ldr	r2, [r7, #4]
 8105982:	fa22 f303 	lsr.w	r3, r2, r3
 8105986:	4a0d      	ldr	r2, [pc, #52]	@ (81059bc <HAL_Init+0xb4>)
 8105988:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810598a:	4b0c      	ldr	r3, [pc, #48]	@ (81059bc <HAL_Init+0xb4>)
 810598c:	681b      	ldr	r3, [r3, #0]
 810598e:	4a0c      	ldr	r2, [pc, #48]	@ (81059c0 <HAL_Init+0xb8>)
 8105990:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8105992:	200f      	movs	r0, #15
 8105994:	f000 f816 	bl	81059c4 <HAL_InitTick>
 8105998:	4603      	mov	r3, r0
 810599a:	2b00      	cmp	r3, #0
 810599c:	d001      	beq.n	81059a2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810599e:	2301      	movs	r3, #1
 81059a0:	e002      	b.n	81059a8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81059a2:	f7ff fcbb 	bl	810531c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81059a6:	2300      	movs	r3, #0
}
 81059a8:	4618      	mov	r0, r3
 81059aa:	3708      	adds	r7, #8
 81059ac:	46bd      	mov	sp, r7
 81059ae:	bd80      	pop	{r7, pc}
 81059b0:	58024400 	.word	0x58024400
 81059b4:	40024400 	.word	0x40024400
 81059b8:	08111630 	.word	0x08111630
 81059bc:	10000004 	.word	0x10000004
 81059c0:	10000000 	.word	0x10000000

081059c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81059c4:	b580      	push	{r7, lr}
 81059c6:	b082      	sub	sp, #8
 81059c8:	af00      	add	r7, sp, #0
 81059ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81059cc:	4b15      	ldr	r3, [pc, #84]	@ (8105a24 <HAL_InitTick+0x60>)
 81059ce:	781b      	ldrb	r3, [r3, #0]
 81059d0:	2b00      	cmp	r3, #0
 81059d2:	d101      	bne.n	81059d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81059d4:	2301      	movs	r3, #1
 81059d6:	e021      	b.n	8105a1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81059d8:	4b13      	ldr	r3, [pc, #76]	@ (8105a28 <HAL_InitTick+0x64>)
 81059da:	681a      	ldr	r2, [r3, #0]
 81059dc:	4b11      	ldr	r3, [pc, #68]	@ (8105a24 <HAL_InitTick+0x60>)
 81059de:	781b      	ldrb	r3, [r3, #0]
 81059e0:	4619      	mov	r1, r3
 81059e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81059e6:	fbb3 f3f1 	udiv	r3, r3, r1
 81059ea:	fbb2 f3f3 	udiv	r3, r2, r3
 81059ee:	4618      	mov	r0, r3
 81059f0:	f000 f941 	bl	8105c76 <HAL_SYSTICK_Config>
 81059f4:	4603      	mov	r3, r0
 81059f6:	2b00      	cmp	r3, #0
 81059f8:	d001      	beq.n	81059fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81059fa:	2301      	movs	r3, #1
 81059fc:	e00e      	b.n	8105a1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81059fe:	687b      	ldr	r3, [r7, #4]
 8105a00:	2b0f      	cmp	r3, #15
 8105a02:	d80a      	bhi.n	8105a1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8105a04:	2200      	movs	r2, #0
 8105a06:	6879      	ldr	r1, [r7, #4]
 8105a08:	f04f 30ff 	mov.w	r0, #4294967295
 8105a0c:	f000 f90b 	bl	8105c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8105a10:	4a06      	ldr	r2, [pc, #24]	@ (8105a2c <HAL_InitTick+0x68>)
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8105a16:	2300      	movs	r3, #0
 8105a18:	e000      	b.n	8105a1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8105a1a:	2301      	movs	r3, #1
}
 8105a1c:	4618      	mov	r0, r3
 8105a1e:	3708      	adds	r7, #8
 8105a20:	46bd      	mov	sp, r7
 8105a22:	bd80      	pop	{r7, pc}
 8105a24:	1000000c 	.word	0x1000000c
 8105a28:	10000000 	.word	0x10000000
 8105a2c:	10000008 	.word	0x10000008

08105a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8105a30:	b480      	push	{r7}
 8105a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8105a34:	4b06      	ldr	r3, [pc, #24]	@ (8105a50 <HAL_IncTick+0x20>)
 8105a36:	781b      	ldrb	r3, [r3, #0]
 8105a38:	461a      	mov	r2, r3
 8105a3a:	4b06      	ldr	r3, [pc, #24]	@ (8105a54 <HAL_IncTick+0x24>)
 8105a3c:	681b      	ldr	r3, [r3, #0]
 8105a3e:	4413      	add	r3, r2
 8105a40:	4a04      	ldr	r2, [pc, #16]	@ (8105a54 <HAL_IncTick+0x24>)
 8105a42:	6013      	str	r3, [r2, #0]
}
 8105a44:	bf00      	nop
 8105a46:	46bd      	mov	sp, r7
 8105a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a4c:	4770      	bx	lr
 8105a4e:	bf00      	nop
 8105a50:	1000000c 	.word	0x1000000c
 8105a54:	10000614 	.word	0x10000614

08105a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8105a58:	b480      	push	{r7}
 8105a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8105a5c:	4b03      	ldr	r3, [pc, #12]	@ (8105a6c <HAL_GetTick+0x14>)
 8105a5e:	681b      	ldr	r3, [r3, #0]
}
 8105a60:	4618      	mov	r0, r3
 8105a62:	46bd      	mov	sp, r7
 8105a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a68:	4770      	bx	lr
 8105a6a:	bf00      	nop
 8105a6c:	10000614 	.word	0x10000614

08105a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105a70:	b480      	push	{r7}
 8105a72:	b085      	sub	sp, #20
 8105a74:	af00      	add	r7, sp, #0
 8105a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	f003 0307 	and.w	r3, r3, #7
 8105a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8105a80:	4b0c      	ldr	r3, [pc, #48]	@ (8105ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8105a82:	68db      	ldr	r3, [r3, #12]
 8105a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8105a86:	68ba      	ldr	r2, [r7, #8]
 8105a88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8105a8c:	4013      	ands	r3, r2
 8105a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8105a90:	68fb      	ldr	r3, [r7, #12]
 8105a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8105a94:	68bb      	ldr	r3, [r7, #8]
 8105a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8105a98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8105a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8105aa2:	4a04      	ldr	r2, [pc, #16]	@ (8105ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8105aa4:	68bb      	ldr	r3, [r7, #8]
 8105aa6:	60d3      	str	r3, [r2, #12]
}
 8105aa8:	bf00      	nop
 8105aaa:	3714      	adds	r7, #20
 8105aac:	46bd      	mov	sp, r7
 8105aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ab2:	4770      	bx	lr
 8105ab4:	e000ed00 	.word	0xe000ed00

08105ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8105ab8:	b480      	push	{r7}
 8105aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8105abc:	4b04      	ldr	r3, [pc, #16]	@ (8105ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8105abe:	68db      	ldr	r3, [r3, #12]
 8105ac0:	0a1b      	lsrs	r3, r3, #8
 8105ac2:	f003 0307 	and.w	r3, r3, #7
}
 8105ac6:	4618      	mov	r0, r3
 8105ac8:	46bd      	mov	sp, r7
 8105aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ace:	4770      	bx	lr
 8105ad0:	e000ed00 	.word	0xe000ed00

08105ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105ad4:	b480      	push	{r7}
 8105ad6:	b083      	sub	sp, #12
 8105ad8:	af00      	add	r7, sp, #0
 8105ada:	4603      	mov	r3, r0
 8105adc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105ae2:	2b00      	cmp	r3, #0
 8105ae4:	db0b      	blt.n	8105afe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8105ae6:	88fb      	ldrh	r3, [r7, #6]
 8105ae8:	f003 021f 	and.w	r2, r3, #31
 8105aec:	4907      	ldr	r1, [pc, #28]	@ (8105b0c <__NVIC_EnableIRQ+0x38>)
 8105aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105af2:	095b      	lsrs	r3, r3, #5
 8105af4:	2001      	movs	r0, #1
 8105af6:	fa00 f202 	lsl.w	r2, r0, r2
 8105afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8105afe:	bf00      	nop
 8105b00:	370c      	adds	r7, #12
 8105b02:	46bd      	mov	sp, r7
 8105b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b08:	4770      	bx	lr
 8105b0a:	bf00      	nop
 8105b0c:	e000e100 	.word	0xe000e100

08105b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8105b10:	b480      	push	{r7}
 8105b12:	b083      	sub	sp, #12
 8105b14:	af00      	add	r7, sp, #0
 8105b16:	4603      	mov	r3, r0
 8105b18:	6039      	str	r1, [r7, #0]
 8105b1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105b20:	2b00      	cmp	r3, #0
 8105b22:	db0a      	blt.n	8105b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105b24:	683b      	ldr	r3, [r7, #0]
 8105b26:	b2da      	uxtb	r2, r3
 8105b28:	490c      	ldr	r1, [pc, #48]	@ (8105b5c <__NVIC_SetPriority+0x4c>)
 8105b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105b2e:	0112      	lsls	r2, r2, #4
 8105b30:	b2d2      	uxtb	r2, r2
 8105b32:	440b      	add	r3, r1
 8105b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8105b38:	e00a      	b.n	8105b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105b3a:	683b      	ldr	r3, [r7, #0]
 8105b3c:	b2da      	uxtb	r2, r3
 8105b3e:	4908      	ldr	r1, [pc, #32]	@ (8105b60 <__NVIC_SetPriority+0x50>)
 8105b40:	88fb      	ldrh	r3, [r7, #6]
 8105b42:	f003 030f 	and.w	r3, r3, #15
 8105b46:	3b04      	subs	r3, #4
 8105b48:	0112      	lsls	r2, r2, #4
 8105b4a:	b2d2      	uxtb	r2, r2
 8105b4c:	440b      	add	r3, r1
 8105b4e:	761a      	strb	r2, [r3, #24]
}
 8105b50:	bf00      	nop
 8105b52:	370c      	adds	r7, #12
 8105b54:	46bd      	mov	sp, r7
 8105b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b5a:	4770      	bx	lr
 8105b5c:	e000e100 	.word	0xe000e100
 8105b60:	e000ed00 	.word	0xe000ed00

08105b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105b64:	b480      	push	{r7}
 8105b66:	b089      	sub	sp, #36	@ 0x24
 8105b68:	af00      	add	r7, sp, #0
 8105b6a:	60f8      	str	r0, [r7, #12]
 8105b6c:	60b9      	str	r1, [r7, #8]
 8105b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8105b70:	68fb      	ldr	r3, [r7, #12]
 8105b72:	f003 0307 	and.w	r3, r3, #7
 8105b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8105b78:	69fb      	ldr	r3, [r7, #28]
 8105b7a:	f1c3 0307 	rsb	r3, r3, #7
 8105b7e:	2b04      	cmp	r3, #4
 8105b80:	bf28      	it	cs
 8105b82:	2304      	movcs	r3, #4
 8105b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8105b86:	69fb      	ldr	r3, [r7, #28]
 8105b88:	3304      	adds	r3, #4
 8105b8a:	2b06      	cmp	r3, #6
 8105b8c:	d902      	bls.n	8105b94 <NVIC_EncodePriority+0x30>
 8105b8e:	69fb      	ldr	r3, [r7, #28]
 8105b90:	3b03      	subs	r3, #3
 8105b92:	e000      	b.n	8105b96 <NVIC_EncodePriority+0x32>
 8105b94:	2300      	movs	r3, #0
 8105b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105b98:	f04f 32ff 	mov.w	r2, #4294967295
 8105b9c:	69bb      	ldr	r3, [r7, #24]
 8105b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8105ba2:	43da      	mvns	r2, r3
 8105ba4:	68bb      	ldr	r3, [r7, #8]
 8105ba6:	401a      	ands	r2, r3
 8105ba8:	697b      	ldr	r3, [r7, #20]
 8105baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8105bac:	f04f 31ff 	mov.w	r1, #4294967295
 8105bb0:	697b      	ldr	r3, [r7, #20]
 8105bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8105bb6:	43d9      	mvns	r1, r3
 8105bb8:	687b      	ldr	r3, [r7, #4]
 8105bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105bbc:	4313      	orrs	r3, r2
         );
}
 8105bbe:	4618      	mov	r0, r3
 8105bc0:	3724      	adds	r7, #36	@ 0x24
 8105bc2:	46bd      	mov	sp, r7
 8105bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bc8:	4770      	bx	lr
	...

08105bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8105bcc:	b580      	push	{r7, lr}
 8105bce:	b082      	sub	sp, #8
 8105bd0:	af00      	add	r7, sp, #0
 8105bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8105bd4:	687b      	ldr	r3, [r7, #4]
 8105bd6:	3b01      	subs	r3, #1
 8105bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105bdc:	d301      	bcc.n	8105be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8105bde:	2301      	movs	r3, #1
 8105be0:	e00f      	b.n	8105c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8105be2:	4a0a      	ldr	r2, [pc, #40]	@ (8105c0c <SysTick_Config+0x40>)
 8105be4:	687b      	ldr	r3, [r7, #4]
 8105be6:	3b01      	subs	r3, #1
 8105be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8105bea:	210f      	movs	r1, #15
 8105bec:	f04f 30ff 	mov.w	r0, #4294967295
 8105bf0:	f7ff ff8e 	bl	8105b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8105bf4:	4b05      	ldr	r3, [pc, #20]	@ (8105c0c <SysTick_Config+0x40>)
 8105bf6:	2200      	movs	r2, #0
 8105bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8105bfa:	4b04      	ldr	r3, [pc, #16]	@ (8105c0c <SysTick_Config+0x40>)
 8105bfc:	2207      	movs	r2, #7
 8105bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8105c00:	2300      	movs	r3, #0
}
 8105c02:	4618      	mov	r0, r3
 8105c04:	3708      	adds	r7, #8
 8105c06:	46bd      	mov	sp, r7
 8105c08:	bd80      	pop	{r7, pc}
 8105c0a:	bf00      	nop
 8105c0c:	e000e010 	.word	0xe000e010

08105c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105c10:	b580      	push	{r7, lr}
 8105c12:	b082      	sub	sp, #8
 8105c14:	af00      	add	r7, sp, #0
 8105c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8105c18:	6878      	ldr	r0, [r7, #4]
 8105c1a:	f7ff ff29 	bl	8105a70 <__NVIC_SetPriorityGrouping>
}
 8105c1e:	bf00      	nop
 8105c20:	3708      	adds	r7, #8
 8105c22:	46bd      	mov	sp, r7
 8105c24:	bd80      	pop	{r7, pc}

08105c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105c26:	b580      	push	{r7, lr}
 8105c28:	b086      	sub	sp, #24
 8105c2a:	af00      	add	r7, sp, #0
 8105c2c:	4603      	mov	r3, r0
 8105c2e:	60b9      	str	r1, [r7, #8]
 8105c30:	607a      	str	r2, [r7, #4]
 8105c32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8105c34:	f7ff ff40 	bl	8105ab8 <__NVIC_GetPriorityGrouping>
 8105c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8105c3a:	687a      	ldr	r2, [r7, #4]
 8105c3c:	68b9      	ldr	r1, [r7, #8]
 8105c3e:	6978      	ldr	r0, [r7, #20]
 8105c40:	f7ff ff90 	bl	8105b64 <NVIC_EncodePriority>
 8105c44:	4602      	mov	r2, r0
 8105c46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8105c4a:	4611      	mov	r1, r2
 8105c4c:	4618      	mov	r0, r3
 8105c4e:	f7ff ff5f 	bl	8105b10 <__NVIC_SetPriority>
}
 8105c52:	bf00      	nop
 8105c54:	3718      	adds	r7, #24
 8105c56:	46bd      	mov	sp, r7
 8105c58:	bd80      	pop	{r7, pc}

08105c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105c5a:	b580      	push	{r7, lr}
 8105c5c:	b082      	sub	sp, #8
 8105c5e:	af00      	add	r7, sp, #0
 8105c60:	4603      	mov	r3, r0
 8105c62:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8105c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105c68:	4618      	mov	r0, r3
 8105c6a:	f7ff ff33 	bl	8105ad4 <__NVIC_EnableIRQ>
}
 8105c6e:	bf00      	nop
 8105c70:	3708      	adds	r7, #8
 8105c72:	46bd      	mov	sp, r7
 8105c74:	bd80      	pop	{r7, pc}

08105c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8105c76:	b580      	push	{r7, lr}
 8105c78:	b082      	sub	sp, #8
 8105c7a:	af00      	add	r7, sp, #0
 8105c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8105c7e:	6878      	ldr	r0, [r7, #4]
 8105c80:	f7ff ffa4 	bl	8105bcc <SysTick_Config>
 8105c84:	4603      	mov	r3, r0
}
 8105c86:	4618      	mov	r0, r3
 8105c88:	3708      	adds	r7, #8
 8105c8a:	46bd      	mov	sp, r7
 8105c8c:	bd80      	pop	{r7, pc}
	...

08105c90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8105c90:	b580      	push	{r7, lr}
 8105c92:	b086      	sub	sp, #24
 8105c94:	af00      	add	r7, sp, #0
 8105c96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8105c98:	f7ff fede 	bl	8105a58 <HAL_GetTick>
 8105c9c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8105c9e:	687b      	ldr	r3, [r7, #4]
 8105ca0:	2b00      	cmp	r3, #0
 8105ca2:	d101      	bne.n	8105ca8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8105ca4:	2301      	movs	r3, #1
 8105ca6:	e2dc      	b.n	8106262 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8105ca8:	687b      	ldr	r3, [r7, #4]
 8105caa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8105cae:	b2db      	uxtb	r3, r3
 8105cb0:	2b02      	cmp	r3, #2
 8105cb2:	d008      	beq.n	8105cc6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8105cb4:	687b      	ldr	r3, [r7, #4]
 8105cb6:	2280      	movs	r2, #128	@ 0x80
 8105cb8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	2200      	movs	r2, #0
 8105cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8105cc2:	2301      	movs	r3, #1
 8105cc4:	e2cd      	b.n	8106262 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105cc6:	687b      	ldr	r3, [r7, #4]
 8105cc8:	681b      	ldr	r3, [r3, #0]
 8105cca:	4a76      	ldr	r2, [pc, #472]	@ (8105ea4 <HAL_DMA_Abort+0x214>)
 8105ccc:	4293      	cmp	r3, r2
 8105cce:	d04a      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105cd0:	687b      	ldr	r3, [r7, #4]
 8105cd2:	681b      	ldr	r3, [r3, #0]
 8105cd4:	4a74      	ldr	r2, [pc, #464]	@ (8105ea8 <HAL_DMA_Abort+0x218>)
 8105cd6:	4293      	cmp	r3, r2
 8105cd8:	d045      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105cda:	687b      	ldr	r3, [r7, #4]
 8105cdc:	681b      	ldr	r3, [r3, #0]
 8105cde:	4a73      	ldr	r2, [pc, #460]	@ (8105eac <HAL_DMA_Abort+0x21c>)
 8105ce0:	4293      	cmp	r3, r2
 8105ce2:	d040      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105ce4:	687b      	ldr	r3, [r7, #4]
 8105ce6:	681b      	ldr	r3, [r3, #0]
 8105ce8:	4a71      	ldr	r2, [pc, #452]	@ (8105eb0 <HAL_DMA_Abort+0x220>)
 8105cea:	4293      	cmp	r3, r2
 8105cec:	d03b      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105cee:	687b      	ldr	r3, [r7, #4]
 8105cf0:	681b      	ldr	r3, [r3, #0]
 8105cf2:	4a70      	ldr	r2, [pc, #448]	@ (8105eb4 <HAL_DMA_Abort+0x224>)
 8105cf4:	4293      	cmp	r3, r2
 8105cf6:	d036      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	681b      	ldr	r3, [r3, #0]
 8105cfc:	4a6e      	ldr	r2, [pc, #440]	@ (8105eb8 <HAL_DMA_Abort+0x228>)
 8105cfe:	4293      	cmp	r3, r2
 8105d00:	d031      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105d02:	687b      	ldr	r3, [r7, #4]
 8105d04:	681b      	ldr	r3, [r3, #0]
 8105d06:	4a6d      	ldr	r2, [pc, #436]	@ (8105ebc <HAL_DMA_Abort+0x22c>)
 8105d08:	4293      	cmp	r3, r2
 8105d0a:	d02c      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105d0c:	687b      	ldr	r3, [r7, #4]
 8105d0e:	681b      	ldr	r3, [r3, #0]
 8105d10:	4a6b      	ldr	r2, [pc, #428]	@ (8105ec0 <HAL_DMA_Abort+0x230>)
 8105d12:	4293      	cmp	r3, r2
 8105d14:	d027      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105d16:	687b      	ldr	r3, [r7, #4]
 8105d18:	681b      	ldr	r3, [r3, #0]
 8105d1a:	4a6a      	ldr	r2, [pc, #424]	@ (8105ec4 <HAL_DMA_Abort+0x234>)
 8105d1c:	4293      	cmp	r3, r2
 8105d1e:	d022      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105d20:	687b      	ldr	r3, [r7, #4]
 8105d22:	681b      	ldr	r3, [r3, #0]
 8105d24:	4a68      	ldr	r2, [pc, #416]	@ (8105ec8 <HAL_DMA_Abort+0x238>)
 8105d26:	4293      	cmp	r3, r2
 8105d28:	d01d      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105d2a:	687b      	ldr	r3, [r7, #4]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	4a67      	ldr	r2, [pc, #412]	@ (8105ecc <HAL_DMA_Abort+0x23c>)
 8105d30:	4293      	cmp	r3, r2
 8105d32:	d018      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105d34:	687b      	ldr	r3, [r7, #4]
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	4a65      	ldr	r2, [pc, #404]	@ (8105ed0 <HAL_DMA_Abort+0x240>)
 8105d3a:	4293      	cmp	r3, r2
 8105d3c:	d013      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105d3e:	687b      	ldr	r3, [r7, #4]
 8105d40:	681b      	ldr	r3, [r3, #0]
 8105d42:	4a64      	ldr	r2, [pc, #400]	@ (8105ed4 <HAL_DMA_Abort+0x244>)
 8105d44:	4293      	cmp	r3, r2
 8105d46:	d00e      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105d48:	687b      	ldr	r3, [r7, #4]
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	4a62      	ldr	r2, [pc, #392]	@ (8105ed8 <HAL_DMA_Abort+0x248>)
 8105d4e:	4293      	cmp	r3, r2
 8105d50:	d009      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105d52:	687b      	ldr	r3, [r7, #4]
 8105d54:	681b      	ldr	r3, [r3, #0]
 8105d56:	4a61      	ldr	r2, [pc, #388]	@ (8105edc <HAL_DMA_Abort+0x24c>)
 8105d58:	4293      	cmp	r3, r2
 8105d5a:	d004      	beq.n	8105d66 <HAL_DMA_Abort+0xd6>
 8105d5c:	687b      	ldr	r3, [r7, #4]
 8105d5e:	681b      	ldr	r3, [r3, #0]
 8105d60:	4a5f      	ldr	r2, [pc, #380]	@ (8105ee0 <HAL_DMA_Abort+0x250>)
 8105d62:	4293      	cmp	r3, r2
 8105d64:	d101      	bne.n	8105d6a <HAL_DMA_Abort+0xda>
 8105d66:	2301      	movs	r3, #1
 8105d68:	e000      	b.n	8105d6c <HAL_DMA_Abort+0xdc>
 8105d6a:	2300      	movs	r3, #0
 8105d6c:	2b00      	cmp	r3, #0
 8105d6e:	d013      	beq.n	8105d98 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8105d70:	687b      	ldr	r3, [r7, #4]
 8105d72:	681b      	ldr	r3, [r3, #0]
 8105d74:	681a      	ldr	r2, [r3, #0]
 8105d76:	687b      	ldr	r3, [r7, #4]
 8105d78:	681b      	ldr	r3, [r3, #0]
 8105d7a:	f022 021e 	bic.w	r2, r2, #30
 8105d7e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8105d80:	687b      	ldr	r3, [r7, #4]
 8105d82:	681b      	ldr	r3, [r3, #0]
 8105d84:	695a      	ldr	r2, [r3, #20]
 8105d86:	687b      	ldr	r3, [r7, #4]
 8105d88:	681b      	ldr	r3, [r3, #0]
 8105d8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8105d8e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8105d90:	687b      	ldr	r3, [r7, #4]
 8105d92:	681b      	ldr	r3, [r3, #0]
 8105d94:	617b      	str	r3, [r7, #20]
 8105d96:	e00a      	b.n	8105dae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8105d98:	687b      	ldr	r3, [r7, #4]
 8105d9a:	681b      	ldr	r3, [r3, #0]
 8105d9c:	681a      	ldr	r2, [r3, #0]
 8105d9e:	687b      	ldr	r3, [r7, #4]
 8105da0:	681b      	ldr	r3, [r3, #0]
 8105da2:	f022 020e 	bic.w	r2, r2, #14
 8105da6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8105da8:	687b      	ldr	r3, [r7, #4]
 8105daa:	681b      	ldr	r3, [r3, #0]
 8105dac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	681b      	ldr	r3, [r3, #0]
 8105db2:	4a3c      	ldr	r2, [pc, #240]	@ (8105ea4 <HAL_DMA_Abort+0x214>)
 8105db4:	4293      	cmp	r3, r2
 8105db6:	d072      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	681b      	ldr	r3, [r3, #0]
 8105dbc:	4a3a      	ldr	r2, [pc, #232]	@ (8105ea8 <HAL_DMA_Abort+0x218>)
 8105dbe:	4293      	cmp	r3, r2
 8105dc0:	d06d      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	681b      	ldr	r3, [r3, #0]
 8105dc6:	4a39      	ldr	r2, [pc, #228]	@ (8105eac <HAL_DMA_Abort+0x21c>)
 8105dc8:	4293      	cmp	r3, r2
 8105dca:	d068      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	681b      	ldr	r3, [r3, #0]
 8105dd0:	4a37      	ldr	r2, [pc, #220]	@ (8105eb0 <HAL_DMA_Abort+0x220>)
 8105dd2:	4293      	cmp	r3, r2
 8105dd4:	d063      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105dd6:	687b      	ldr	r3, [r7, #4]
 8105dd8:	681b      	ldr	r3, [r3, #0]
 8105dda:	4a36      	ldr	r2, [pc, #216]	@ (8105eb4 <HAL_DMA_Abort+0x224>)
 8105ddc:	4293      	cmp	r3, r2
 8105dde:	d05e      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105de0:	687b      	ldr	r3, [r7, #4]
 8105de2:	681b      	ldr	r3, [r3, #0]
 8105de4:	4a34      	ldr	r2, [pc, #208]	@ (8105eb8 <HAL_DMA_Abort+0x228>)
 8105de6:	4293      	cmp	r3, r2
 8105de8:	d059      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	681b      	ldr	r3, [r3, #0]
 8105dee:	4a33      	ldr	r2, [pc, #204]	@ (8105ebc <HAL_DMA_Abort+0x22c>)
 8105df0:	4293      	cmp	r3, r2
 8105df2:	d054      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105df4:	687b      	ldr	r3, [r7, #4]
 8105df6:	681b      	ldr	r3, [r3, #0]
 8105df8:	4a31      	ldr	r2, [pc, #196]	@ (8105ec0 <HAL_DMA_Abort+0x230>)
 8105dfa:	4293      	cmp	r3, r2
 8105dfc:	d04f      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105dfe:	687b      	ldr	r3, [r7, #4]
 8105e00:	681b      	ldr	r3, [r3, #0]
 8105e02:	4a30      	ldr	r2, [pc, #192]	@ (8105ec4 <HAL_DMA_Abort+0x234>)
 8105e04:	4293      	cmp	r3, r2
 8105e06:	d04a      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e08:	687b      	ldr	r3, [r7, #4]
 8105e0a:	681b      	ldr	r3, [r3, #0]
 8105e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8105ec8 <HAL_DMA_Abort+0x238>)
 8105e0e:	4293      	cmp	r3, r2
 8105e10:	d045      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e12:	687b      	ldr	r3, [r7, #4]
 8105e14:	681b      	ldr	r3, [r3, #0]
 8105e16:	4a2d      	ldr	r2, [pc, #180]	@ (8105ecc <HAL_DMA_Abort+0x23c>)
 8105e18:	4293      	cmp	r3, r2
 8105e1a:	d040      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	681b      	ldr	r3, [r3, #0]
 8105e20:	4a2b      	ldr	r2, [pc, #172]	@ (8105ed0 <HAL_DMA_Abort+0x240>)
 8105e22:	4293      	cmp	r3, r2
 8105e24:	d03b      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e26:	687b      	ldr	r3, [r7, #4]
 8105e28:	681b      	ldr	r3, [r3, #0]
 8105e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8105ed4 <HAL_DMA_Abort+0x244>)
 8105e2c:	4293      	cmp	r3, r2
 8105e2e:	d036      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e30:	687b      	ldr	r3, [r7, #4]
 8105e32:	681b      	ldr	r3, [r3, #0]
 8105e34:	4a28      	ldr	r2, [pc, #160]	@ (8105ed8 <HAL_DMA_Abort+0x248>)
 8105e36:	4293      	cmp	r3, r2
 8105e38:	d031      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e3a:	687b      	ldr	r3, [r7, #4]
 8105e3c:	681b      	ldr	r3, [r3, #0]
 8105e3e:	4a27      	ldr	r2, [pc, #156]	@ (8105edc <HAL_DMA_Abort+0x24c>)
 8105e40:	4293      	cmp	r3, r2
 8105e42:	d02c      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e44:	687b      	ldr	r3, [r7, #4]
 8105e46:	681b      	ldr	r3, [r3, #0]
 8105e48:	4a25      	ldr	r2, [pc, #148]	@ (8105ee0 <HAL_DMA_Abort+0x250>)
 8105e4a:	4293      	cmp	r3, r2
 8105e4c:	d027      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e4e:	687b      	ldr	r3, [r7, #4]
 8105e50:	681b      	ldr	r3, [r3, #0]
 8105e52:	4a24      	ldr	r2, [pc, #144]	@ (8105ee4 <HAL_DMA_Abort+0x254>)
 8105e54:	4293      	cmp	r3, r2
 8105e56:	d022      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e58:	687b      	ldr	r3, [r7, #4]
 8105e5a:	681b      	ldr	r3, [r3, #0]
 8105e5c:	4a22      	ldr	r2, [pc, #136]	@ (8105ee8 <HAL_DMA_Abort+0x258>)
 8105e5e:	4293      	cmp	r3, r2
 8105e60:	d01d      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e62:	687b      	ldr	r3, [r7, #4]
 8105e64:	681b      	ldr	r3, [r3, #0]
 8105e66:	4a21      	ldr	r2, [pc, #132]	@ (8105eec <HAL_DMA_Abort+0x25c>)
 8105e68:	4293      	cmp	r3, r2
 8105e6a:	d018      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e6c:	687b      	ldr	r3, [r7, #4]
 8105e6e:	681b      	ldr	r3, [r3, #0]
 8105e70:	4a1f      	ldr	r2, [pc, #124]	@ (8105ef0 <HAL_DMA_Abort+0x260>)
 8105e72:	4293      	cmp	r3, r2
 8105e74:	d013      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e76:	687b      	ldr	r3, [r7, #4]
 8105e78:	681b      	ldr	r3, [r3, #0]
 8105e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8105ef4 <HAL_DMA_Abort+0x264>)
 8105e7c:	4293      	cmp	r3, r2
 8105e7e:	d00e      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e80:	687b      	ldr	r3, [r7, #4]
 8105e82:	681b      	ldr	r3, [r3, #0]
 8105e84:	4a1c      	ldr	r2, [pc, #112]	@ (8105ef8 <HAL_DMA_Abort+0x268>)
 8105e86:	4293      	cmp	r3, r2
 8105e88:	d009      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e8a:	687b      	ldr	r3, [r7, #4]
 8105e8c:	681b      	ldr	r3, [r3, #0]
 8105e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8105efc <HAL_DMA_Abort+0x26c>)
 8105e90:	4293      	cmp	r3, r2
 8105e92:	d004      	beq.n	8105e9e <HAL_DMA_Abort+0x20e>
 8105e94:	687b      	ldr	r3, [r7, #4]
 8105e96:	681b      	ldr	r3, [r3, #0]
 8105e98:	4a19      	ldr	r2, [pc, #100]	@ (8105f00 <HAL_DMA_Abort+0x270>)
 8105e9a:	4293      	cmp	r3, r2
 8105e9c:	d132      	bne.n	8105f04 <HAL_DMA_Abort+0x274>
 8105e9e:	2301      	movs	r3, #1
 8105ea0:	e031      	b.n	8105f06 <HAL_DMA_Abort+0x276>
 8105ea2:	bf00      	nop
 8105ea4:	40020010 	.word	0x40020010
 8105ea8:	40020028 	.word	0x40020028
 8105eac:	40020040 	.word	0x40020040
 8105eb0:	40020058 	.word	0x40020058
 8105eb4:	40020070 	.word	0x40020070
 8105eb8:	40020088 	.word	0x40020088
 8105ebc:	400200a0 	.word	0x400200a0
 8105ec0:	400200b8 	.word	0x400200b8
 8105ec4:	40020410 	.word	0x40020410
 8105ec8:	40020428 	.word	0x40020428
 8105ecc:	40020440 	.word	0x40020440
 8105ed0:	40020458 	.word	0x40020458
 8105ed4:	40020470 	.word	0x40020470
 8105ed8:	40020488 	.word	0x40020488
 8105edc:	400204a0 	.word	0x400204a0
 8105ee0:	400204b8 	.word	0x400204b8
 8105ee4:	58025408 	.word	0x58025408
 8105ee8:	5802541c 	.word	0x5802541c
 8105eec:	58025430 	.word	0x58025430
 8105ef0:	58025444 	.word	0x58025444
 8105ef4:	58025458 	.word	0x58025458
 8105ef8:	5802546c 	.word	0x5802546c
 8105efc:	58025480 	.word	0x58025480
 8105f00:	58025494 	.word	0x58025494
 8105f04:	2300      	movs	r3, #0
 8105f06:	2b00      	cmp	r3, #0
 8105f08:	d007      	beq.n	8105f1a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105f0e:	681a      	ldr	r2, [r3, #0]
 8105f10:	687b      	ldr	r3, [r7, #4]
 8105f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105f14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8105f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	681b      	ldr	r3, [r3, #0]
 8105f1e:	4a6d      	ldr	r2, [pc, #436]	@ (81060d4 <HAL_DMA_Abort+0x444>)
 8105f20:	4293      	cmp	r3, r2
 8105f22:	d04a      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f24:	687b      	ldr	r3, [r7, #4]
 8105f26:	681b      	ldr	r3, [r3, #0]
 8105f28:	4a6b      	ldr	r2, [pc, #428]	@ (81060d8 <HAL_DMA_Abort+0x448>)
 8105f2a:	4293      	cmp	r3, r2
 8105f2c:	d045      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f2e:	687b      	ldr	r3, [r7, #4]
 8105f30:	681b      	ldr	r3, [r3, #0]
 8105f32:	4a6a      	ldr	r2, [pc, #424]	@ (81060dc <HAL_DMA_Abort+0x44c>)
 8105f34:	4293      	cmp	r3, r2
 8105f36:	d040      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f38:	687b      	ldr	r3, [r7, #4]
 8105f3a:	681b      	ldr	r3, [r3, #0]
 8105f3c:	4a68      	ldr	r2, [pc, #416]	@ (81060e0 <HAL_DMA_Abort+0x450>)
 8105f3e:	4293      	cmp	r3, r2
 8105f40:	d03b      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	681b      	ldr	r3, [r3, #0]
 8105f46:	4a67      	ldr	r2, [pc, #412]	@ (81060e4 <HAL_DMA_Abort+0x454>)
 8105f48:	4293      	cmp	r3, r2
 8105f4a:	d036      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f4c:	687b      	ldr	r3, [r7, #4]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	4a65      	ldr	r2, [pc, #404]	@ (81060e8 <HAL_DMA_Abort+0x458>)
 8105f52:	4293      	cmp	r3, r2
 8105f54:	d031      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f56:	687b      	ldr	r3, [r7, #4]
 8105f58:	681b      	ldr	r3, [r3, #0]
 8105f5a:	4a64      	ldr	r2, [pc, #400]	@ (81060ec <HAL_DMA_Abort+0x45c>)
 8105f5c:	4293      	cmp	r3, r2
 8105f5e:	d02c      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f60:	687b      	ldr	r3, [r7, #4]
 8105f62:	681b      	ldr	r3, [r3, #0]
 8105f64:	4a62      	ldr	r2, [pc, #392]	@ (81060f0 <HAL_DMA_Abort+0x460>)
 8105f66:	4293      	cmp	r3, r2
 8105f68:	d027      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f6a:	687b      	ldr	r3, [r7, #4]
 8105f6c:	681b      	ldr	r3, [r3, #0]
 8105f6e:	4a61      	ldr	r2, [pc, #388]	@ (81060f4 <HAL_DMA_Abort+0x464>)
 8105f70:	4293      	cmp	r3, r2
 8105f72:	d022      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	681b      	ldr	r3, [r3, #0]
 8105f78:	4a5f      	ldr	r2, [pc, #380]	@ (81060f8 <HAL_DMA_Abort+0x468>)
 8105f7a:	4293      	cmp	r3, r2
 8105f7c:	d01d      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f7e:	687b      	ldr	r3, [r7, #4]
 8105f80:	681b      	ldr	r3, [r3, #0]
 8105f82:	4a5e      	ldr	r2, [pc, #376]	@ (81060fc <HAL_DMA_Abort+0x46c>)
 8105f84:	4293      	cmp	r3, r2
 8105f86:	d018      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f88:	687b      	ldr	r3, [r7, #4]
 8105f8a:	681b      	ldr	r3, [r3, #0]
 8105f8c:	4a5c      	ldr	r2, [pc, #368]	@ (8106100 <HAL_DMA_Abort+0x470>)
 8105f8e:	4293      	cmp	r3, r2
 8105f90:	d013      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	681b      	ldr	r3, [r3, #0]
 8105f96:	4a5b      	ldr	r2, [pc, #364]	@ (8106104 <HAL_DMA_Abort+0x474>)
 8105f98:	4293      	cmp	r3, r2
 8105f9a:	d00e      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105f9c:	687b      	ldr	r3, [r7, #4]
 8105f9e:	681b      	ldr	r3, [r3, #0]
 8105fa0:	4a59      	ldr	r2, [pc, #356]	@ (8106108 <HAL_DMA_Abort+0x478>)
 8105fa2:	4293      	cmp	r3, r2
 8105fa4:	d009      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105fa6:	687b      	ldr	r3, [r7, #4]
 8105fa8:	681b      	ldr	r3, [r3, #0]
 8105faa:	4a58      	ldr	r2, [pc, #352]	@ (810610c <HAL_DMA_Abort+0x47c>)
 8105fac:	4293      	cmp	r3, r2
 8105fae:	d004      	beq.n	8105fba <HAL_DMA_Abort+0x32a>
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	681b      	ldr	r3, [r3, #0]
 8105fb4:	4a56      	ldr	r2, [pc, #344]	@ (8106110 <HAL_DMA_Abort+0x480>)
 8105fb6:	4293      	cmp	r3, r2
 8105fb8:	d108      	bne.n	8105fcc <HAL_DMA_Abort+0x33c>
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	681b      	ldr	r3, [r3, #0]
 8105fbe:	681a      	ldr	r2, [r3, #0]
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	f022 0201 	bic.w	r2, r2, #1
 8105fc8:	601a      	str	r2, [r3, #0]
 8105fca:	e007      	b.n	8105fdc <HAL_DMA_Abort+0x34c>
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	681b      	ldr	r3, [r3, #0]
 8105fd0:	681a      	ldr	r2, [r3, #0]
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	681b      	ldr	r3, [r3, #0]
 8105fd6:	f022 0201 	bic.w	r2, r2, #1
 8105fda:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8105fdc:	e013      	b.n	8106006 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8105fde:	f7ff fd3b 	bl	8105a58 <HAL_GetTick>
 8105fe2:	4602      	mov	r2, r0
 8105fe4:	693b      	ldr	r3, [r7, #16]
 8105fe6:	1ad3      	subs	r3, r2, r3
 8105fe8:	2b05      	cmp	r3, #5
 8105fea:	d90c      	bls.n	8106006 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	2220      	movs	r2, #32
 8105ff0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8105ff2:	687b      	ldr	r3, [r7, #4]
 8105ff4:	2203      	movs	r2, #3
 8105ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8105ffa:	687b      	ldr	r3, [r7, #4]
 8105ffc:	2200      	movs	r2, #0
 8105ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8106002:	2301      	movs	r3, #1
 8106004:	e12d      	b.n	8106262 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8106006:	697b      	ldr	r3, [r7, #20]
 8106008:	681b      	ldr	r3, [r3, #0]
 810600a:	f003 0301 	and.w	r3, r3, #1
 810600e:	2b00      	cmp	r3, #0
 8106010:	d1e5      	bne.n	8105fde <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106012:	687b      	ldr	r3, [r7, #4]
 8106014:	681b      	ldr	r3, [r3, #0]
 8106016:	4a2f      	ldr	r2, [pc, #188]	@ (81060d4 <HAL_DMA_Abort+0x444>)
 8106018:	4293      	cmp	r3, r2
 810601a:	d04a      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 810601c:	687b      	ldr	r3, [r7, #4]
 810601e:	681b      	ldr	r3, [r3, #0]
 8106020:	4a2d      	ldr	r2, [pc, #180]	@ (81060d8 <HAL_DMA_Abort+0x448>)
 8106022:	4293      	cmp	r3, r2
 8106024:	d045      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	681b      	ldr	r3, [r3, #0]
 810602a:	4a2c      	ldr	r2, [pc, #176]	@ (81060dc <HAL_DMA_Abort+0x44c>)
 810602c:	4293      	cmp	r3, r2
 810602e:	d040      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	681b      	ldr	r3, [r3, #0]
 8106034:	4a2a      	ldr	r2, [pc, #168]	@ (81060e0 <HAL_DMA_Abort+0x450>)
 8106036:	4293      	cmp	r3, r2
 8106038:	d03b      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 810603a:	687b      	ldr	r3, [r7, #4]
 810603c:	681b      	ldr	r3, [r3, #0]
 810603e:	4a29      	ldr	r2, [pc, #164]	@ (81060e4 <HAL_DMA_Abort+0x454>)
 8106040:	4293      	cmp	r3, r2
 8106042:	d036      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	681b      	ldr	r3, [r3, #0]
 8106048:	4a27      	ldr	r2, [pc, #156]	@ (81060e8 <HAL_DMA_Abort+0x458>)
 810604a:	4293      	cmp	r3, r2
 810604c:	d031      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 810604e:	687b      	ldr	r3, [r7, #4]
 8106050:	681b      	ldr	r3, [r3, #0]
 8106052:	4a26      	ldr	r2, [pc, #152]	@ (81060ec <HAL_DMA_Abort+0x45c>)
 8106054:	4293      	cmp	r3, r2
 8106056:	d02c      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 8106058:	687b      	ldr	r3, [r7, #4]
 810605a:	681b      	ldr	r3, [r3, #0]
 810605c:	4a24      	ldr	r2, [pc, #144]	@ (81060f0 <HAL_DMA_Abort+0x460>)
 810605e:	4293      	cmp	r3, r2
 8106060:	d027      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 8106062:	687b      	ldr	r3, [r7, #4]
 8106064:	681b      	ldr	r3, [r3, #0]
 8106066:	4a23      	ldr	r2, [pc, #140]	@ (81060f4 <HAL_DMA_Abort+0x464>)
 8106068:	4293      	cmp	r3, r2
 810606a:	d022      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	681b      	ldr	r3, [r3, #0]
 8106070:	4a21      	ldr	r2, [pc, #132]	@ (81060f8 <HAL_DMA_Abort+0x468>)
 8106072:	4293      	cmp	r3, r2
 8106074:	d01d      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 8106076:	687b      	ldr	r3, [r7, #4]
 8106078:	681b      	ldr	r3, [r3, #0]
 810607a:	4a20      	ldr	r2, [pc, #128]	@ (81060fc <HAL_DMA_Abort+0x46c>)
 810607c:	4293      	cmp	r3, r2
 810607e:	d018      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 8106080:	687b      	ldr	r3, [r7, #4]
 8106082:	681b      	ldr	r3, [r3, #0]
 8106084:	4a1e      	ldr	r2, [pc, #120]	@ (8106100 <HAL_DMA_Abort+0x470>)
 8106086:	4293      	cmp	r3, r2
 8106088:	d013      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 810608a:	687b      	ldr	r3, [r7, #4]
 810608c:	681b      	ldr	r3, [r3, #0]
 810608e:	4a1d      	ldr	r2, [pc, #116]	@ (8106104 <HAL_DMA_Abort+0x474>)
 8106090:	4293      	cmp	r3, r2
 8106092:	d00e      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 8106094:	687b      	ldr	r3, [r7, #4]
 8106096:	681b      	ldr	r3, [r3, #0]
 8106098:	4a1b      	ldr	r2, [pc, #108]	@ (8106108 <HAL_DMA_Abort+0x478>)
 810609a:	4293      	cmp	r3, r2
 810609c:	d009      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 810609e:	687b      	ldr	r3, [r7, #4]
 81060a0:	681b      	ldr	r3, [r3, #0]
 81060a2:	4a1a      	ldr	r2, [pc, #104]	@ (810610c <HAL_DMA_Abort+0x47c>)
 81060a4:	4293      	cmp	r3, r2
 81060a6:	d004      	beq.n	81060b2 <HAL_DMA_Abort+0x422>
 81060a8:	687b      	ldr	r3, [r7, #4]
 81060aa:	681b      	ldr	r3, [r3, #0]
 81060ac:	4a18      	ldr	r2, [pc, #96]	@ (8106110 <HAL_DMA_Abort+0x480>)
 81060ae:	4293      	cmp	r3, r2
 81060b0:	d101      	bne.n	81060b6 <HAL_DMA_Abort+0x426>
 81060b2:	2301      	movs	r3, #1
 81060b4:	e000      	b.n	81060b8 <HAL_DMA_Abort+0x428>
 81060b6:	2300      	movs	r3, #0
 81060b8:	2b00      	cmp	r3, #0
 81060ba:	d02b      	beq.n	8106114 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81060bc:	687b      	ldr	r3, [r7, #4]
 81060be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81060c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81060c2:	687b      	ldr	r3, [r7, #4]
 81060c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81060c6:	f003 031f 	and.w	r3, r3, #31
 81060ca:	223f      	movs	r2, #63	@ 0x3f
 81060cc:	409a      	lsls	r2, r3
 81060ce:	68bb      	ldr	r3, [r7, #8]
 81060d0:	609a      	str	r2, [r3, #8]
 81060d2:	e02a      	b.n	810612a <HAL_DMA_Abort+0x49a>
 81060d4:	40020010 	.word	0x40020010
 81060d8:	40020028 	.word	0x40020028
 81060dc:	40020040 	.word	0x40020040
 81060e0:	40020058 	.word	0x40020058
 81060e4:	40020070 	.word	0x40020070
 81060e8:	40020088 	.word	0x40020088
 81060ec:	400200a0 	.word	0x400200a0
 81060f0:	400200b8 	.word	0x400200b8
 81060f4:	40020410 	.word	0x40020410
 81060f8:	40020428 	.word	0x40020428
 81060fc:	40020440 	.word	0x40020440
 8106100:	40020458 	.word	0x40020458
 8106104:	40020470 	.word	0x40020470
 8106108:	40020488 	.word	0x40020488
 810610c:	400204a0 	.word	0x400204a0
 8106110:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106114:	687b      	ldr	r3, [r7, #4]
 8106116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106118:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810611e:	f003 031f 	and.w	r3, r3, #31
 8106122:	2201      	movs	r2, #1
 8106124:	409a      	lsls	r2, r3
 8106126:	68fb      	ldr	r3, [r7, #12]
 8106128:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	681b      	ldr	r3, [r3, #0]
 810612e:	4a4f      	ldr	r2, [pc, #316]	@ (810626c <HAL_DMA_Abort+0x5dc>)
 8106130:	4293      	cmp	r3, r2
 8106132:	d072      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 8106134:	687b      	ldr	r3, [r7, #4]
 8106136:	681b      	ldr	r3, [r3, #0]
 8106138:	4a4d      	ldr	r2, [pc, #308]	@ (8106270 <HAL_DMA_Abort+0x5e0>)
 810613a:	4293      	cmp	r3, r2
 810613c:	d06d      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	681b      	ldr	r3, [r3, #0]
 8106142:	4a4c      	ldr	r2, [pc, #304]	@ (8106274 <HAL_DMA_Abort+0x5e4>)
 8106144:	4293      	cmp	r3, r2
 8106146:	d068      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 8106148:	687b      	ldr	r3, [r7, #4]
 810614a:	681b      	ldr	r3, [r3, #0]
 810614c:	4a4a      	ldr	r2, [pc, #296]	@ (8106278 <HAL_DMA_Abort+0x5e8>)
 810614e:	4293      	cmp	r3, r2
 8106150:	d063      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 8106152:	687b      	ldr	r3, [r7, #4]
 8106154:	681b      	ldr	r3, [r3, #0]
 8106156:	4a49      	ldr	r2, [pc, #292]	@ (810627c <HAL_DMA_Abort+0x5ec>)
 8106158:	4293      	cmp	r3, r2
 810615a:	d05e      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 810615c:	687b      	ldr	r3, [r7, #4]
 810615e:	681b      	ldr	r3, [r3, #0]
 8106160:	4a47      	ldr	r2, [pc, #284]	@ (8106280 <HAL_DMA_Abort+0x5f0>)
 8106162:	4293      	cmp	r3, r2
 8106164:	d059      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 8106166:	687b      	ldr	r3, [r7, #4]
 8106168:	681b      	ldr	r3, [r3, #0]
 810616a:	4a46      	ldr	r2, [pc, #280]	@ (8106284 <HAL_DMA_Abort+0x5f4>)
 810616c:	4293      	cmp	r3, r2
 810616e:	d054      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 8106170:	687b      	ldr	r3, [r7, #4]
 8106172:	681b      	ldr	r3, [r3, #0]
 8106174:	4a44      	ldr	r2, [pc, #272]	@ (8106288 <HAL_DMA_Abort+0x5f8>)
 8106176:	4293      	cmp	r3, r2
 8106178:	d04f      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 810617a:	687b      	ldr	r3, [r7, #4]
 810617c:	681b      	ldr	r3, [r3, #0]
 810617e:	4a43      	ldr	r2, [pc, #268]	@ (810628c <HAL_DMA_Abort+0x5fc>)
 8106180:	4293      	cmp	r3, r2
 8106182:	d04a      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 8106184:	687b      	ldr	r3, [r7, #4]
 8106186:	681b      	ldr	r3, [r3, #0]
 8106188:	4a41      	ldr	r2, [pc, #260]	@ (8106290 <HAL_DMA_Abort+0x600>)
 810618a:	4293      	cmp	r3, r2
 810618c:	d045      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 810618e:	687b      	ldr	r3, [r7, #4]
 8106190:	681b      	ldr	r3, [r3, #0]
 8106192:	4a40      	ldr	r2, [pc, #256]	@ (8106294 <HAL_DMA_Abort+0x604>)
 8106194:	4293      	cmp	r3, r2
 8106196:	d040      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 8106198:	687b      	ldr	r3, [r7, #4]
 810619a:	681b      	ldr	r3, [r3, #0]
 810619c:	4a3e      	ldr	r2, [pc, #248]	@ (8106298 <HAL_DMA_Abort+0x608>)
 810619e:	4293      	cmp	r3, r2
 81061a0:	d03b      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	681b      	ldr	r3, [r3, #0]
 81061a6:	4a3d      	ldr	r2, [pc, #244]	@ (810629c <HAL_DMA_Abort+0x60c>)
 81061a8:	4293      	cmp	r3, r2
 81061aa:	d036      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 81061ac:	687b      	ldr	r3, [r7, #4]
 81061ae:	681b      	ldr	r3, [r3, #0]
 81061b0:	4a3b      	ldr	r2, [pc, #236]	@ (81062a0 <HAL_DMA_Abort+0x610>)
 81061b2:	4293      	cmp	r3, r2
 81061b4:	d031      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	4a3a      	ldr	r2, [pc, #232]	@ (81062a4 <HAL_DMA_Abort+0x614>)
 81061bc:	4293      	cmp	r3, r2
 81061be:	d02c      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 81061c0:	687b      	ldr	r3, [r7, #4]
 81061c2:	681b      	ldr	r3, [r3, #0]
 81061c4:	4a38      	ldr	r2, [pc, #224]	@ (81062a8 <HAL_DMA_Abort+0x618>)
 81061c6:	4293      	cmp	r3, r2
 81061c8:	d027      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 81061ca:	687b      	ldr	r3, [r7, #4]
 81061cc:	681b      	ldr	r3, [r3, #0]
 81061ce:	4a37      	ldr	r2, [pc, #220]	@ (81062ac <HAL_DMA_Abort+0x61c>)
 81061d0:	4293      	cmp	r3, r2
 81061d2:	d022      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	681b      	ldr	r3, [r3, #0]
 81061d8:	4a35      	ldr	r2, [pc, #212]	@ (81062b0 <HAL_DMA_Abort+0x620>)
 81061da:	4293      	cmp	r3, r2
 81061dc:	d01d      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 81061de:	687b      	ldr	r3, [r7, #4]
 81061e0:	681b      	ldr	r3, [r3, #0]
 81061e2:	4a34      	ldr	r2, [pc, #208]	@ (81062b4 <HAL_DMA_Abort+0x624>)
 81061e4:	4293      	cmp	r3, r2
 81061e6:	d018      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	681b      	ldr	r3, [r3, #0]
 81061ec:	4a32      	ldr	r2, [pc, #200]	@ (81062b8 <HAL_DMA_Abort+0x628>)
 81061ee:	4293      	cmp	r3, r2
 81061f0:	d013      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 81061f2:	687b      	ldr	r3, [r7, #4]
 81061f4:	681b      	ldr	r3, [r3, #0]
 81061f6:	4a31      	ldr	r2, [pc, #196]	@ (81062bc <HAL_DMA_Abort+0x62c>)
 81061f8:	4293      	cmp	r3, r2
 81061fa:	d00e      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 81061fc:	687b      	ldr	r3, [r7, #4]
 81061fe:	681b      	ldr	r3, [r3, #0]
 8106200:	4a2f      	ldr	r2, [pc, #188]	@ (81062c0 <HAL_DMA_Abort+0x630>)
 8106202:	4293      	cmp	r3, r2
 8106204:	d009      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 8106206:	687b      	ldr	r3, [r7, #4]
 8106208:	681b      	ldr	r3, [r3, #0]
 810620a:	4a2e      	ldr	r2, [pc, #184]	@ (81062c4 <HAL_DMA_Abort+0x634>)
 810620c:	4293      	cmp	r3, r2
 810620e:	d004      	beq.n	810621a <HAL_DMA_Abort+0x58a>
 8106210:	687b      	ldr	r3, [r7, #4]
 8106212:	681b      	ldr	r3, [r3, #0]
 8106214:	4a2c      	ldr	r2, [pc, #176]	@ (81062c8 <HAL_DMA_Abort+0x638>)
 8106216:	4293      	cmp	r3, r2
 8106218:	d101      	bne.n	810621e <HAL_DMA_Abort+0x58e>
 810621a:	2301      	movs	r3, #1
 810621c:	e000      	b.n	8106220 <HAL_DMA_Abort+0x590>
 810621e:	2300      	movs	r3, #0
 8106220:	2b00      	cmp	r3, #0
 8106222:	d015      	beq.n	8106250 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106224:	687b      	ldr	r3, [r7, #4]
 8106226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106228:	687a      	ldr	r2, [r7, #4]
 810622a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 810622c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 810622e:	687b      	ldr	r3, [r7, #4]
 8106230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106232:	2b00      	cmp	r3, #0
 8106234:	d00c      	beq.n	8106250 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8106236:	687b      	ldr	r3, [r7, #4]
 8106238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810623a:	681a      	ldr	r2, [r3, #0]
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106240:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106244:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106246:	687b      	ldr	r3, [r7, #4]
 8106248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810624a:	687a      	ldr	r2, [r7, #4]
 810624c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 810624e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	2201      	movs	r2, #1
 8106254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8106258:	687b      	ldr	r3, [r7, #4]
 810625a:	2200      	movs	r2, #0
 810625c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8106260:	2300      	movs	r3, #0
}
 8106262:	4618      	mov	r0, r3
 8106264:	3718      	adds	r7, #24
 8106266:	46bd      	mov	sp, r7
 8106268:	bd80      	pop	{r7, pc}
 810626a:	bf00      	nop
 810626c:	40020010 	.word	0x40020010
 8106270:	40020028 	.word	0x40020028
 8106274:	40020040 	.word	0x40020040
 8106278:	40020058 	.word	0x40020058
 810627c:	40020070 	.word	0x40020070
 8106280:	40020088 	.word	0x40020088
 8106284:	400200a0 	.word	0x400200a0
 8106288:	400200b8 	.word	0x400200b8
 810628c:	40020410 	.word	0x40020410
 8106290:	40020428 	.word	0x40020428
 8106294:	40020440 	.word	0x40020440
 8106298:	40020458 	.word	0x40020458
 810629c:	40020470 	.word	0x40020470
 81062a0:	40020488 	.word	0x40020488
 81062a4:	400204a0 	.word	0x400204a0
 81062a8:	400204b8 	.word	0x400204b8
 81062ac:	58025408 	.word	0x58025408
 81062b0:	5802541c 	.word	0x5802541c
 81062b4:	58025430 	.word	0x58025430
 81062b8:	58025444 	.word	0x58025444
 81062bc:	58025458 	.word	0x58025458
 81062c0:	5802546c 	.word	0x5802546c
 81062c4:	58025480 	.word	0x58025480
 81062c8:	58025494 	.word	0x58025494

081062cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81062cc:	b580      	push	{r7, lr}
 81062ce:	b084      	sub	sp, #16
 81062d0:	af00      	add	r7, sp, #0
 81062d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81062d4:	687b      	ldr	r3, [r7, #4]
 81062d6:	2b00      	cmp	r3, #0
 81062d8:	d101      	bne.n	81062de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81062da:	2301      	movs	r3, #1
 81062dc:	e237      	b.n	810674e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81062e4:	b2db      	uxtb	r3, r3
 81062e6:	2b02      	cmp	r3, #2
 81062e8:	d004      	beq.n	81062f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81062ea:	687b      	ldr	r3, [r7, #4]
 81062ec:	2280      	movs	r2, #128	@ 0x80
 81062ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 81062f0:	2301      	movs	r3, #1
 81062f2:	e22c      	b.n	810674e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81062f4:	687b      	ldr	r3, [r7, #4]
 81062f6:	681b      	ldr	r3, [r3, #0]
 81062f8:	4a5c      	ldr	r2, [pc, #368]	@ (810646c <HAL_DMA_Abort_IT+0x1a0>)
 81062fa:	4293      	cmp	r3, r2
 81062fc:	d04a      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	681b      	ldr	r3, [r3, #0]
 8106302:	4a5b      	ldr	r2, [pc, #364]	@ (8106470 <HAL_DMA_Abort_IT+0x1a4>)
 8106304:	4293      	cmp	r3, r2
 8106306:	d045      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 8106308:	687b      	ldr	r3, [r7, #4]
 810630a:	681b      	ldr	r3, [r3, #0]
 810630c:	4a59      	ldr	r2, [pc, #356]	@ (8106474 <HAL_DMA_Abort_IT+0x1a8>)
 810630e:	4293      	cmp	r3, r2
 8106310:	d040      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	681b      	ldr	r3, [r3, #0]
 8106316:	4a58      	ldr	r2, [pc, #352]	@ (8106478 <HAL_DMA_Abort_IT+0x1ac>)
 8106318:	4293      	cmp	r3, r2
 810631a:	d03b      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	4a56      	ldr	r2, [pc, #344]	@ (810647c <HAL_DMA_Abort_IT+0x1b0>)
 8106322:	4293      	cmp	r3, r2
 8106324:	d036      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 8106326:	687b      	ldr	r3, [r7, #4]
 8106328:	681b      	ldr	r3, [r3, #0]
 810632a:	4a55      	ldr	r2, [pc, #340]	@ (8106480 <HAL_DMA_Abort_IT+0x1b4>)
 810632c:	4293      	cmp	r3, r2
 810632e:	d031      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 8106330:	687b      	ldr	r3, [r7, #4]
 8106332:	681b      	ldr	r3, [r3, #0]
 8106334:	4a53      	ldr	r2, [pc, #332]	@ (8106484 <HAL_DMA_Abort_IT+0x1b8>)
 8106336:	4293      	cmp	r3, r2
 8106338:	d02c      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 810633a:	687b      	ldr	r3, [r7, #4]
 810633c:	681b      	ldr	r3, [r3, #0]
 810633e:	4a52      	ldr	r2, [pc, #328]	@ (8106488 <HAL_DMA_Abort_IT+0x1bc>)
 8106340:	4293      	cmp	r3, r2
 8106342:	d027      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	4a50      	ldr	r2, [pc, #320]	@ (810648c <HAL_DMA_Abort_IT+0x1c0>)
 810634a:	4293      	cmp	r3, r2
 810634c:	d022      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	681b      	ldr	r3, [r3, #0]
 8106352:	4a4f      	ldr	r2, [pc, #316]	@ (8106490 <HAL_DMA_Abort_IT+0x1c4>)
 8106354:	4293      	cmp	r3, r2
 8106356:	d01d      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	681b      	ldr	r3, [r3, #0]
 810635c:	4a4d      	ldr	r2, [pc, #308]	@ (8106494 <HAL_DMA_Abort_IT+0x1c8>)
 810635e:	4293      	cmp	r3, r2
 8106360:	d018      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	4a4c      	ldr	r2, [pc, #304]	@ (8106498 <HAL_DMA_Abort_IT+0x1cc>)
 8106368:	4293      	cmp	r3, r2
 810636a:	d013      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	681b      	ldr	r3, [r3, #0]
 8106370:	4a4a      	ldr	r2, [pc, #296]	@ (810649c <HAL_DMA_Abort_IT+0x1d0>)
 8106372:	4293      	cmp	r3, r2
 8106374:	d00e      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	681b      	ldr	r3, [r3, #0]
 810637a:	4a49      	ldr	r2, [pc, #292]	@ (81064a0 <HAL_DMA_Abort_IT+0x1d4>)
 810637c:	4293      	cmp	r3, r2
 810637e:	d009      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	681b      	ldr	r3, [r3, #0]
 8106384:	4a47      	ldr	r2, [pc, #284]	@ (81064a4 <HAL_DMA_Abort_IT+0x1d8>)
 8106386:	4293      	cmp	r3, r2
 8106388:	d004      	beq.n	8106394 <HAL_DMA_Abort_IT+0xc8>
 810638a:	687b      	ldr	r3, [r7, #4]
 810638c:	681b      	ldr	r3, [r3, #0]
 810638e:	4a46      	ldr	r2, [pc, #280]	@ (81064a8 <HAL_DMA_Abort_IT+0x1dc>)
 8106390:	4293      	cmp	r3, r2
 8106392:	d101      	bne.n	8106398 <HAL_DMA_Abort_IT+0xcc>
 8106394:	2301      	movs	r3, #1
 8106396:	e000      	b.n	810639a <HAL_DMA_Abort_IT+0xce>
 8106398:	2300      	movs	r3, #0
 810639a:	2b00      	cmp	r3, #0
 810639c:	f000 8086 	beq.w	81064ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81063a0:	687b      	ldr	r3, [r7, #4]
 81063a2:	2204      	movs	r2, #4
 81063a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81063a8:	687b      	ldr	r3, [r7, #4]
 81063aa:	681b      	ldr	r3, [r3, #0]
 81063ac:	4a2f      	ldr	r2, [pc, #188]	@ (810646c <HAL_DMA_Abort_IT+0x1a0>)
 81063ae:	4293      	cmp	r3, r2
 81063b0:	d04a      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	681b      	ldr	r3, [r3, #0]
 81063b6:	4a2e      	ldr	r2, [pc, #184]	@ (8106470 <HAL_DMA_Abort_IT+0x1a4>)
 81063b8:	4293      	cmp	r3, r2
 81063ba:	d045      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	681b      	ldr	r3, [r3, #0]
 81063c0:	4a2c      	ldr	r2, [pc, #176]	@ (8106474 <HAL_DMA_Abort_IT+0x1a8>)
 81063c2:	4293      	cmp	r3, r2
 81063c4:	d040      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	681b      	ldr	r3, [r3, #0]
 81063ca:	4a2b      	ldr	r2, [pc, #172]	@ (8106478 <HAL_DMA_Abort_IT+0x1ac>)
 81063cc:	4293      	cmp	r3, r2
 81063ce:	d03b      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	681b      	ldr	r3, [r3, #0]
 81063d4:	4a29      	ldr	r2, [pc, #164]	@ (810647c <HAL_DMA_Abort_IT+0x1b0>)
 81063d6:	4293      	cmp	r3, r2
 81063d8:	d036      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 81063da:	687b      	ldr	r3, [r7, #4]
 81063dc:	681b      	ldr	r3, [r3, #0]
 81063de:	4a28      	ldr	r2, [pc, #160]	@ (8106480 <HAL_DMA_Abort_IT+0x1b4>)
 81063e0:	4293      	cmp	r3, r2
 81063e2:	d031      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 81063e4:	687b      	ldr	r3, [r7, #4]
 81063e6:	681b      	ldr	r3, [r3, #0]
 81063e8:	4a26      	ldr	r2, [pc, #152]	@ (8106484 <HAL_DMA_Abort_IT+0x1b8>)
 81063ea:	4293      	cmp	r3, r2
 81063ec:	d02c      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	681b      	ldr	r3, [r3, #0]
 81063f2:	4a25      	ldr	r2, [pc, #148]	@ (8106488 <HAL_DMA_Abort_IT+0x1bc>)
 81063f4:	4293      	cmp	r3, r2
 81063f6:	d027      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 81063f8:	687b      	ldr	r3, [r7, #4]
 81063fa:	681b      	ldr	r3, [r3, #0]
 81063fc:	4a23      	ldr	r2, [pc, #140]	@ (810648c <HAL_DMA_Abort_IT+0x1c0>)
 81063fe:	4293      	cmp	r3, r2
 8106400:	d022      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 8106402:	687b      	ldr	r3, [r7, #4]
 8106404:	681b      	ldr	r3, [r3, #0]
 8106406:	4a22      	ldr	r2, [pc, #136]	@ (8106490 <HAL_DMA_Abort_IT+0x1c4>)
 8106408:	4293      	cmp	r3, r2
 810640a:	d01d      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	681b      	ldr	r3, [r3, #0]
 8106410:	4a20      	ldr	r2, [pc, #128]	@ (8106494 <HAL_DMA_Abort_IT+0x1c8>)
 8106412:	4293      	cmp	r3, r2
 8106414:	d018      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 8106416:	687b      	ldr	r3, [r7, #4]
 8106418:	681b      	ldr	r3, [r3, #0]
 810641a:	4a1f      	ldr	r2, [pc, #124]	@ (8106498 <HAL_DMA_Abort_IT+0x1cc>)
 810641c:	4293      	cmp	r3, r2
 810641e:	d013      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	681b      	ldr	r3, [r3, #0]
 8106424:	4a1d      	ldr	r2, [pc, #116]	@ (810649c <HAL_DMA_Abort_IT+0x1d0>)
 8106426:	4293      	cmp	r3, r2
 8106428:	d00e      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 810642a:	687b      	ldr	r3, [r7, #4]
 810642c:	681b      	ldr	r3, [r3, #0]
 810642e:	4a1c      	ldr	r2, [pc, #112]	@ (81064a0 <HAL_DMA_Abort_IT+0x1d4>)
 8106430:	4293      	cmp	r3, r2
 8106432:	d009      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	681b      	ldr	r3, [r3, #0]
 8106438:	4a1a      	ldr	r2, [pc, #104]	@ (81064a4 <HAL_DMA_Abort_IT+0x1d8>)
 810643a:	4293      	cmp	r3, r2
 810643c:	d004      	beq.n	8106448 <HAL_DMA_Abort_IT+0x17c>
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	681b      	ldr	r3, [r3, #0]
 8106442:	4a19      	ldr	r2, [pc, #100]	@ (81064a8 <HAL_DMA_Abort_IT+0x1dc>)
 8106444:	4293      	cmp	r3, r2
 8106446:	d108      	bne.n	810645a <HAL_DMA_Abort_IT+0x18e>
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	681a      	ldr	r2, [r3, #0]
 810644e:	687b      	ldr	r3, [r7, #4]
 8106450:	681b      	ldr	r3, [r3, #0]
 8106452:	f022 0201 	bic.w	r2, r2, #1
 8106456:	601a      	str	r2, [r3, #0]
 8106458:	e178      	b.n	810674c <HAL_DMA_Abort_IT+0x480>
 810645a:	687b      	ldr	r3, [r7, #4]
 810645c:	681b      	ldr	r3, [r3, #0]
 810645e:	681a      	ldr	r2, [r3, #0]
 8106460:	687b      	ldr	r3, [r7, #4]
 8106462:	681b      	ldr	r3, [r3, #0]
 8106464:	f022 0201 	bic.w	r2, r2, #1
 8106468:	601a      	str	r2, [r3, #0]
 810646a:	e16f      	b.n	810674c <HAL_DMA_Abort_IT+0x480>
 810646c:	40020010 	.word	0x40020010
 8106470:	40020028 	.word	0x40020028
 8106474:	40020040 	.word	0x40020040
 8106478:	40020058 	.word	0x40020058
 810647c:	40020070 	.word	0x40020070
 8106480:	40020088 	.word	0x40020088
 8106484:	400200a0 	.word	0x400200a0
 8106488:	400200b8 	.word	0x400200b8
 810648c:	40020410 	.word	0x40020410
 8106490:	40020428 	.word	0x40020428
 8106494:	40020440 	.word	0x40020440
 8106498:	40020458 	.word	0x40020458
 810649c:	40020470 	.word	0x40020470
 81064a0:	40020488 	.word	0x40020488
 81064a4:	400204a0 	.word	0x400204a0
 81064a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	681a      	ldr	r2, [r3, #0]
 81064b2:	687b      	ldr	r3, [r7, #4]
 81064b4:	681b      	ldr	r3, [r3, #0]
 81064b6:	f022 020e 	bic.w	r2, r2, #14
 81064ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 81064bc:	687b      	ldr	r3, [r7, #4]
 81064be:	681b      	ldr	r3, [r3, #0]
 81064c0:	4a6c      	ldr	r2, [pc, #432]	@ (8106674 <HAL_DMA_Abort_IT+0x3a8>)
 81064c2:	4293      	cmp	r3, r2
 81064c4:	d04a      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	681b      	ldr	r3, [r3, #0]
 81064ca:	4a6b      	ldr	r2, [pc, #428]	@ (8106678 <HAL_DMA_Abort_IT+0x3ac>)
 81064cc:	4293      	cmp	r3, r2
 81064ce:	d045      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	681b      	ldr	r3, [r3, #0]
 81064d4:	4a69      	ldr	r2, [pc, #420]	@ (810667c <HAL_DMA_Abort_IT+0x3b0>)
 81064d6:	4293      	cmp	r3, r2
 81064d8:	d040      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 81064da:	687b      	ldr	r3, [r7, #4]
 81064dc:	681b      	ldr	r3, [r3, #0]
 81064de:	4a68      	ldr	r2, [pc, #416]	@ (8106680 <HAL_DMA_Abort_IT+0x3b4>)
 81064e0:	4293      	cmp	r3, r2
 81064e2:	d03b      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	681b      	ldr	r3, [r3, #0]
 81064e8:	4a66      	ldr	r2, [pc, #408]	@ (8106684 <HAL_DMA_Abort_IT+0x3b8>)
 81064ea:	4293      	cmp	r3, r2
 81064ec:	d036      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	681b      	ldr	r3, [r3, #0]
 81064f2:	4a65      	ldr	r2, [pc, #404]	@ (8106688 <HAL_DMA_Abort_IT+0x3bc>)
 81064f4:	4293      	cmp	r3, r2
 81064f6:	d031      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 81064f8:	687b      	ldr	r3, [r7, #4]
 81064fa:	681b      	ldr	r3, [r3, #0]
 81064fc:	4a63      	ldr	r2, [pc, #396]	@ (810668c <HAL_DMA_Abort_IT+0x3c0>)
 81064fe:	4293      	cmp	r3, r2
 8106500:	d02c      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	681b      	ldr	r3, [r3, #0]
 8106506:	4a62      	ldr	r2, [pc, #392]	@ (8106690 <HAL_DMA_Abort_IT+0x3c4>)
 8106508:	4293      	cmp	r3, r2
 810650a:	d027      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 810650c:	687b      	ldr	r3, [r7, #4]
 810650e:	681b      	ldr	r3, [r3, #0]
 8106510:	4a60      	ldr	r2, [pc, #384]	@ (8106694 <HAL_DMA_Abort_IT+0x3c8>)
 8106512:	4293      	cmp	r3, r2
 8106514:	d022      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 8106516:	687b      	ldr	r3, [r7, #4]
 8106518:	681b      	ldr	r3, [r3, #0]
 810651a:	4a5f      	ldr	r2, [pc, #380]	@ (8106698 <HAL_DMA_Abort_IT+0x3cc>)
 810651c:	4293      	cmp	r3, r2
 810651e:	d01d      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	681b      	ldr	r3, [r3, #0]
 8106524:	4a5d      	ldr	r2, [pc, #372]	@ (810669c <HAL_DMA_Abort_IT+0x3d0>)
 8106526:	4293      	cmp	r3, r2
 8106528:	d018      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	681b      	ldr	r3, [r3, #0]
 810652e:	4a5c      	ldr	r2, [pc, #368]	@ (81066a0 <HAL_DMA_Abort_IT+0x3d4>)
 8106530:	4293      	cmp	r3, r2
 8106532:	d013      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 8106534:	687b      	ldr	r3, [r7, #4]
 8106536:	681b      	ldr	r3, [r3, #0]
 8106538:	4a5a      	ldr	r2, [pc, #360]	@ (81066a4 <HAL_DMA_Abort_IT+0x3d8>)
 810653a:	4293      	cmp	r3, r2
 810653c:	d00e      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 810653e:	687b      	ldr	r3, [r7, #4]
 8106540:	681b      	ldr	r3, [r3, #0]
 8106542:	4a59      	ldr	r2, [pc, #356]	@ (81066a8 <HAL_DMA_Abort_IT+0x3dc>)
 8106544:	4293      	cmp	r3, r2
 8106546:	d009      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 8106548:	687b      	ldr	r3, [r7, #4]
 810654a:	681b      	ldr	r3, [r3, #0]
 810654c:	4a57      	ldr	r2, [pc, #348]	@ (81066ac <HAL_DMA_Abort_IT+0x3e0>)
 810654e:	4293      	cmp	r3, r2
 8106550:	d004      	beq.n	810655c <HAL_DMA_Abort_IT+0x290>
 8106552:	687b      	ldr	r3, [r7, #4]
 8106554:	681b      	ldr	r3, [r3, #0]
 8106556:	4a56      	ldr	r2, [pc, #344]	@ (81066b0 <HAL_DMA_Abort_IT+0x3e4>)
 8106558:	4293      	cmp	r3, r2
 810655a:	d108      	bne.n	810656e <HAL_DMA_Abort_IT+0x2a2>
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	681b      	ldr	r3, [r3, #0]
 8106560:	681a      	ldr	r2, [r3, #0]
 8106562:	687b      	ldr	r3, [r7, #4]
 8106564:	681b      	ldr	r3, [r3, #0]
 8106566:	f022 0201 	bic.w	r2, r2, #1
 810656a:	601a      	str	r2, [r3, #0]
 810656c:	e007      	b.n	810657e <HAL_DMA_Abort_IT+0x2b2>
 810656e:	687b      	ldr	r3, [r7, #4]
 8106570:	681b      	ldr	r3, [r3, #0]
 8106572:	681a      	ldr	r2, [r3, #0]
 8106574:	687b      	ldr	r3, [r7, #4]
 8106576:	681b      	ldr	r3, [r3, #0]
 8106578:	f022 0201 	bic.w	r2, r2, #1
 810657c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810657e:	687b      	ldr	r3, [r7, #4]
 8106580:	681b      	ldr	r3, [r3, #0]
 8106582:	4a3c      	ldr	r2, [pc, #240]	@ (8106674 <HAL_DMA_Abort_IT+0x3a8>)
 8106584:	4293      	cmp	r3, r2
 8106586:	d072      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 8106588:	687b      	ldr	r3, [r7, #4]
 810658a:	681b      	ldr	r3, [r3, #0]
 810658c:	4a3a      	ldr	r2, [pc, #232]	@ (8106678 <HAL_DMA_Abort_IT+0x3ac>)
 810658e:	4293      	cmp	r3, r2
 8106590:	d06d      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 8106592:	687b      	ldr	r3, [r7, #4]
 8106594:	681b      	ldr	r3, [r3, #0]
 8106596:	4a39      	ldr	r2, [pc, #228]	@ (810667c <HAL_DMA_Abort_IT+0x3b0>)
 8106598:	4293      	cmp	r3, r2
 810659a:	d068      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 810659c:	687b      	ldr	r3, [r7, #4]
 810659e:	681b      	ldr	r3, [r3, #0]
 81065a0:	4a37      	ldr	r2, [pc, #220]	@ (8106680 <HAL_DMA_Abort_IT+0x3b4>)
 81065a2:	4293      	cmp	r3, r2
 81065a4:	d063      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	681b      	ldr	r3, [r3, #0]
 81065aa:	4a36      	ldr	r2, [pc, #216]	@ (8106684 <HAL_DMA_Abort_IT+0x3b8>)
 81065ac:	4293      	cmp	r3, r2
 81065ae:	d05e      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 81065b0:	687b      	ldr	r3, [r7, #4]
 81065b2:	681b      	ldr	r3, [r3, #0]
 81065b4:	4a34      	ldr	r2, [pc, #208]	@ (8106688 <HAL_DMA_Abort_IT+0x3bc>)
 81065b6:	4293      	cmp	r3, r2
 81065b8:	d059      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 81065ba:	687b      	ldr	r3, [r7, #4]
 81065bc:	681b      	ldr	r3, [r3, #0]
 81065be:	4a33      	ldr	r2, [pc, #204]	@ (810668c <HAL_DMA_Abort_IT+0x3c0>)
 81065c0:	4293      	cmp	r3, r2
 81065c2:	d054      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	681b      	ldr	r3, [r3, #0]
 81065c8:	4a31      	ldr	r2, [pc, #196]	@ (8106690 <HAL_DMA_Abort_IT+0x3c4>)
 81065ca:	4293      	cmp	r3, r2
 81065cc:	d04f      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	681b      	ldr	r3, [r3, #0]
 81065d2:	4a30      	ldr	r2, [pc, #192]	@ (8106694 <HAL_DMA_Abort_IT+0x3c8>)
 81065d4:	4293      	cmp	r3, r2
 81065d6:	d04a      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 81065d8:	687b      	ldr	r3, [r7, #4]
 81065da:	681b      	ldr	r3, [r3, #0]
 81065dc:	4a2e      	ldr	r2, [pc, #184]	@ (8106698 <HAL_DMA_Abort_IT+0x3cc>)
 81065de:	4293      	cmp	r3, r2
 81065e0:	d045      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 81065e2:	687b      	ldr	r3, [r7, #4]
 81065e4:	681b      	ldr	r3, [r3, #0]
 81065e6:	4a2d      	ldr	r2, [pc, #180]	@ (810669c <HAL_DMA_Abort_IT+0x3d0>)
 81065e8:	4293      	cmp	r3, r2
 81065ea:	d040      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	681b      	ldr	r3, [r3, #0]
 81065f0:	4a2b      	ldr	r2, [pc, #172]	@ (81066a0 <HAL_DMA_Abort_IT+0x3d4>)
 81065f2:	4293      	cmp	r3, r2
 81065f4:	d03b      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	681b      	ldr	r3, [r3, #0]
 81065fa:	4a2a      	ldr	r2, [pc, #168]	@ (81066a4 <HAL_DMA_Abort_IT+0x3d8>)
 81065fc:	4293      	cmp	r3, r2
 81065fe:	d036      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 8106600:	687b      	ldr	r3, [r7, #4]
 8106602:	681b      	ldr	r3, [r3, #0]
 8106604:	4a28      	ldr	r2, [pc, #160]	@ (81066a8 <HAL_DMA_Abort_IT+0x3dc>)
 8106606:	4293      	cmp	r3, r2
 8106608:	d031      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	681b      	ldr	r3, [r3, #0]
 810660e:	4a27      	ldr	r2, [pc, #156]	@ (81066ac <HAL_DMA_Abort_IT+0x3e0>)
 8106610:	4293      	cmp	r3, r2
 8106612:	d02c      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 8106614:	687b      	ldr	r3, [r7, #4]
 8106616:	681b      	ldr	r3, [r3, #0]
 8106618:	4a25      	ldr	r2, [pc, #148]	@ (81066b0 <HAL_DMA_Abort_IT+0x3e4>)
 810661a:	4293      	cmp	r3, r2
 810661c:	d027      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 810661e:	687b      	ldr	r3, [r7, #4]
 8106620:	681b      	ldr	r3, [r3, #0]
 8106622:	4a24      	ldr	r2, [pc, #144]	@ (81066b4 <HAL_DMA_Abort_IT+0x3e8>)
 8106624:	4293      	cmp	r3, r2
 8106626:	d022      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	4a22      	ldr	r2, [pc, #136]	@ (81066b8 <HAL_DMA_Abort_IT+0x3ec>)
 810662e:	4293      	cmp	r3, r2
 8106630:	d01d      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 8106632:	687b      	ldr	r3, [r7, #4]
 8106634:	681b      	ldr	r3, [r3, #0]
 8106636:	4a21      	ldr	r2, [pc, #132]	@ (81066bc <HAL_DMA_Abort_IT+0x3f0>)
 8106638:	4293      	cmp	r3, r2
 810663a:	d018      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	4a1f      	ldr	r2, [pc, #124]	@ (81066c0 <HAL_DMA_Abort_IT+0x3f4>)
 8106642:	4293      	cmp	r3, r2
 8106644:	d013      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 8106646:	687b      	ldr	r3, [r7, #4]
 8106648:	681b      	ldr	r3, [r3, #0]
 810664a:	4a1e      	ldr	r2, [pc, #120]	@ (81066c4 <HAL_DMA_Abort_IT+0x3f8>)
 810664c:	4293      	cmp	r3, r2
 810664e:	d00e      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	681b      	ldr	r3, [r3, #0]
 8106654:	4a1c      	ldr	r2, [pc, #112]	@ (81066c8 <HAL_DMA_Abort_IT+0x3fc>)
 8106656:	4293      	cmp	r3, r2
 8106658:	d009      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	681b      	ldr	r3, [r3, #0]
 810665e:	4a1b      	ldr	r2, [pc, #108]	@ (81066cc <HAL_DMA_Abort_IT+0x400>)
 8106660:	4293      	cmp	r3, r2
 8106662:	d004      	beq.n	810666e <HAL_DMA_Abort_IT+0x3a2>
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	681b      	ldr	r3, [r3, #0]
 8106668:	4a19      	ldr	r2, [pc, #100]	@ (81066d0 <HAL_DMA_Abort_IT+0x404>)
 810666a:	4293      	cmp	r3, r2
 810666c:	d132      	bne.n	81066d4 <HAL_DMA_Abort_IT+0x408>
 810666e:	2301      	movs	r3, #1
 8106670:	e031      	b.n	81066d6 <HAL_DMA_Abort_IT+0x40a>
 8106672:	bf00      	nop
 8106674:	40020010 	.word	0x40020010
 8106678:	40020028 	.word	0x40020028
 810667c:	40020040 	.word	0x40020040
 8106680:	40020058 	.word	0x40020058
 8106684:	40020070 	.word	0x40020070
 8106688:	40020088 	.word	0x40020088
 810668c:	400200a0 	.word	0x400200a0
 8106690:	400200b8 	.word	0x400200b8
 8106694:	40020410 	.word	0x40020410
 8106698:	40020428 	.word	0x40020428
 810669c:	40020440 	.word	0x40020440
 81066a0:	40020458 	.word	0x40020458
 81066a4:	40020470 	.word	0x40020470
 81066a8:	40020488 	.word	0x40020488
 81066ac:	400204a0 	.word	0x400204a0
 81066b0:	400204b8 	.word	0x400204b8
 81066b4:	58025408 	.word	0x58025408
 81066b8:	5802541c 	.word	0x5802541c
 81066bc:	58025430 	.word	0x58025430
 81066c0:	58025444 	.word	0x58025444
 81066c4:	58025458 	.word	0x58025458
 81066c8:	5802546c 	.word	0x5802546c
 81066cc:	58025480 	.word	0x58025480
 81066d0:	58025494 	.word	0x58025494
 81066d4:	2300      	movs	r3, #0
 81066d6:	2b00      	cmp	r3, #0
 81066d8:	d028      	beq.n	810672c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81066da:	687b      	ldr	r3, [r7, #4]
 81066dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81066de:	681a      	ldr	r2, [r3, #0]
 81066e0:	687b      	ldr	r3, [r7, #4]
 81066e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81066e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81066e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81066ea:	687b      	ldr	r3, [r7, #4]
 81066ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81066ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81066f0:	687b      	ldr	r3, [r7, #4]
 81066f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81066f4:	f003 031f 	and.w	r3, r3, #31
 81066f8:	2201      	movs	r2, #1
 81066fa:	409a      	lsls	r2, r3
 81066fc:	68fb      	ldr	r3, [r7, #12]
 81066fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106704:	687a      	ldr	r2, [r7, #4]
 8106706:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8106708:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810670a:	687b      	ldr	r3, [r7, #4]
 810670c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810670e:	2b00      	cmp	r3, #0
 8106710:	d00c      	beq.n	810672c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8106712:	687b      	ldr	r3, [r7, #4]
 8106714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106716:	681a      	ldr	r2, [r3, #0]
 8106718:	687b      	ldr	r3, [r7, #4]
 810671a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810671c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106720:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106722:	687b      	ldr	r3, [r7, #4]
 8106724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106726:	687a      	ldr	r2, [r7, #4]
 8106728:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 810672a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810672c:	687b      	ldr	r3, [r7, #4]
 810672e:	2201      	movs	r2, #1
 8106730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8106734:	687b      	ldr	r3, [r7, #4]
 8106736:	2200      	movs	r2, #0
 8106738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 810673c:	687b      	ldr	r3, [r7, #4]
 810673e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106740:	2b00      	cmp	r3, #0
 8106742:	d003      	beq.n	810674c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106748:	6878      	ldr	r0, [r7, #4]
 810674a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 810674c:	2300      	movs	r3, #0
}
 810674e:	4618      	mov	r0, r3
 8106750:	3710      	adds	r7, #16
 8106752:	46bd      	mov	sp, r7
 8106754:	bd80      	pop	{r7, pc}
 8106756:	bf00      	nop

08106758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8106758:	b480      	push	{r7}
 810675a:	b089      	sub	sp, #36	@ 0x24
 810675c:	af00      	add	r7, sp, #0
 810675e:	6078      	str	r0, [r7, #4]
 8106760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106762:	2300      	movs	r3, #0
 8106764:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106766:	4b89      	ldr	r3, [pc, #548]	@ (810698c <HAL_GPIO_Init+0x234>)
 8106768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810676a:	e194      	b.n	8106a96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810676c:	683b      	ldr	r3, [r7, #0]
 810676e:	681a      	ldr	r2, [r3, #0]
 8106770:	2101      	movs	r1, #1
 8106772:	69fb      	ldr	r3, [r7, #28]
 8106774:	fa01 f303 	lsl.w	r3, r1, r3
 8106778:	4013      	ands	r3, r2
 810677a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810677c:	693b      	ldr	r3, [r7, #16]
 810677e:	2b00      	cmp	r3, #0
 8106780:	f000 8186 	beq.w	8106a90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8106784:	683b      	ldr	r3, [r7, #0]
 8106786:	685b      	ldr	r3, [r3, #4]
 8106788:	f003 0303 	and.w	r3, r3, #3
 810678c:	2b01      	cmp	r3, #1
 810678e:	d005      	beq.n	810679c <HAL_GPIO_Init+0x44>
 8106790:	683b      	ldr	r3, [r7, #0]
 8106792:	685b      	ldr	r3, [r3, #4]
 8106794:	f003 0303 	and.w	r3, r3, #3
 8106798:	2b02      	cmp	r3, #2
 810679a:	d130      	bne.n	81067fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810679c:	687b      	ldr	r3, [r7, #4]
 810679e:	689b      	ldr	r3, [r3, #8]
 81067a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81067a2:	69fb      	ldr	r3, [r7, #28]
 81067a4:	005b      	lsls	r3, r3, #1
 81067a6:	2203      	movs	r2, #3
 81067a8:	fa02 f303 	lsl.w	r3, r2, r3
 81067ac:	43db      	mvns	r3, r3
 81067ae:	69ba      	ldr	r2, [r7, #24]
 81067b0:	4013      	ands	r3, r2
 81067b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81067b4:	683b      	ldr	r3, [r7, #0]
 81067b6:	68da      	ldr	r2, [r3, #12]
 81067b8:	69fb      	ldr	r3, [r7, #28]
 81067ba:	005b      	lsls	r3, r3, #1
 81067bc:	fa02 f303 	lsl.w	r3, r2, r3
 81067c0:	69ba      	ldr	r2, [r7, #24]
 81067c2:	4313      	orrs	r3, r2
 81067c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81067c6:	687b      	ldr	r3, [r7, #4]
 81067c8:	69ba      	ldr	r2, [r7, #24]
 81067ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81067cc:	687b      	ldr	r3, [r7, #4]
 81067ce:	685b      	ldr	r3, [r3, #4]
 81067d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81067d2:	2201      	movs	r2, #1
 81067d4:	69fb      	ldr	r3, [r7, #28]
 81067d6:	fa02 f303 	lsl.w	r3, r2, r3
 81067da:	43db      	mvns	r3, r3
 81067dc:	69ba      	ldr	r2, [r7, #24]
 81067de:	4013      	ands	r3, r2
 81067e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81067e2:	683b      	ldr	r3, [r7, #0]
 81067e4:	685b      	ldr	r3, [r3, #4]
 81067e6:	091b      	lsrs	r3, r3, #4
 81067e8:	f003 0201 	and.w	r2, r3, #1
 81067ec:	69fb      	ldr	r3, [r7, #28]
 81067ee:	fa02 f303 	lsl.w	r3, r2, r3
 81067f2:	69ba      	ldr	r2, [r7, #24]
 81067f4:	4313      	orrs	r3, r2
 81067f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81067f8:	687b      	ldr	r3, [r7, #4]
 81067fa:	69ba      	ldr	r2, [r7, #24]
 81067fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81067fe:	683b      	ldr	r3, [r7, #0]
 8106800:	685b      	ldr	r3, [r3, #4]
 8106802:	f003 0303 	and.w	r3, r3, #3
 8106806:	2b03      	cmp	r3, #3
 8106808:	d017      	beq.n	810683a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810680a:	687b      	ldr	r3, [r7, #4]
 810680c:	68db      	ldr	r3, [r3, #12]
 810680e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8106810:	69fb      	ldr	r3, [r7, #28]
 8106812:	005b      	lsls	r3, r3, #1
 8106814:	2203      	movs	r2, #3
 8106816:	fa02 f303 	lsl.w	r3, r2, r3
 810681a:	43db      	mvns	r3, r3
 810681c:	69ba      	ldr	r2, [r7, #24]
 810681e:	4013      	ands	r3, r2
 8106820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8106822:	683b      	ldr	r3, [r7, #0]
 8106824:	689a      	ldr	r2, [r3, #8]
 8106826:	69fb      	ldr	r3, [r7, #28]
 8106828:	005b      	lsls	r3, r3, #1
 810682a:	fa02 f303 	lsl.w	r3, r2, r3
 810682e:	69ba      	ldr	r2, [r7, #24]
 8106830:	4313      	orrs	r3, r2
 8106832:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106834:	687b      	ldr	r3, [r7, #4]
 8106836:	69ba      	ldr	r2, [r7, #24]
 8106838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810683a:	683b      	ldr	r3, [r7, #0]
 810683c:	685b      	ldr	r3, [r3, #4]
 810683e:	f003 0303 	and.w	r3, r3, #3
 8106842:	2b02      	cmp	r3, #2
 8106844:	d123      	bne.n	810688e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106846:	69fb      	ldr	r3, [r7, #28]
 8106848:	08da      	lsrs	r2, r3, #3
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	3208      	adds	r2, #8
 810684e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106854:	69fb      	ldr	r3, [r7, #28]
 8106856:	f003 0307 	and.w	r3, r3, #7
 810685a:	009b      	lsls	r3, r3, #2
 810685c:	220f      	movs	r2, #15
 810685e:	fa02 f303 	lsl.w	r3, r2, r3
 8106862:	43db      	mvns	r3, r3
 8106864:	69ba      	ldr	r2, [r7, #24]
 8106866:	4013      	ands	r3, r2
 8106868:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810686a:	683b      	ldr	r3, [r7, #0]
 810686c:	691a      	ldr	r2, [r3, #16]
 810686e:	69fb      	ldr	r3, [r7, #28]
 8106870:	f003 0307 	and.w	r3, r3, #7
 8106874:	009b      	lsls	r3, r3, #2
 8106876:	fa02 f303 	lsl.w	r3, r2, r3
 810687a:	69ba      	ldr	r2, [r7, #24]
 810687c:	4313      	orrs	r3, r2
 810687e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106880:	69fb      	ldr	r3, [r7, #28]
 8106882:	08da      	lsrs	r2, r3, #3
 8106884:	687b      	ldr	r3, [r7, #4]
 8106886:	3208      	adds	r2, #8
 8106888:	69b9      	ldr	r1, [r7, #24]
 810688a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810688e:	687b      	ldr	r3, [r7, #4]
 8106890:	681b      	ldr	r3, [r3, #0]
 8106892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106894:	69fb      	ldr	r3, [r7, #28]
 8106896:	005b      	lsls	r3, r3, #1
 8106898:	2203      	movs	r2, #3
 810689a:	fa02 f303 	lsl.w	r3, r2, r3
 810689e:	43db      	mvns	r3, r3
 81068a0:	69ba      	ldr	r2, [r7, #24]
 81068a2:	4013      	ands	r3, r2
 81068a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81068a6:	683b      	ldr	r3, [r7, #0]
 81068a8:	685b      	ldr	r3, [r3, #4]
 81068aa:	f003 0203 	and.w	r2, r3, #3
 81068ae:	69fb      	ldr	r3, [r7, #28]
 81068b0:	005b      	lsls	r3, r3, #1
 81068b2:	fa02 f303 	lsl.w	r3, r2, r3
 81068b6:	69ba      	ldr	r2, [r7, #24]
 81068b8:	4313      	orrs	r3, r2
 81068ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	69ba      	ldr	r2, [r7, #24]
 81068c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81068c2:	683b      	ldr	r3, [r7, #0]
 81068c4:	685b      	ldr	r3, [r3, #4]
 81068c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81068ca:	2b00      	cmp	r3, #0
 81068cc:	f000 80e0 	beq.w	8106a90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81068d0:	4b2f      	ldr	r3, [pc, #188]	@ (8106990 <HAL_GPIO_Init+0x238>)
 81068d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81068d6:	4a2e      	ldr	r2, [pc, #184]	@ (8106990 <HAL_GPIO_Init+0x238>)
 81068d8:	f043 0302 	orr.w	r3, r3, #2
 81068dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81068e0:	4b2b      	ldr	r3, [pc, #172]	@ (8106990 <HAL_GPIO_Init+0x238>)
 81068e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81068e6:	f003 0302 	and.w	r3, r3, #2
 81068ea:	60fb      	str	r3, [r7, #12]
 81068ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81068ee:	4a29      	ldr	r2, [pc, #164]	@ (8106994 <HAL_GPIO_Init+0x23c>)
 81068f0:	69fb      	ldr	r3, [r7, #28]
 81068f2:	089b      	lsrs	r3, r3, #2
 81068f4:	3302      	adds	r3, #2
 81068f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81068fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81068fc:	69fb      	ldr	r3, [r7, #28]
 81068fe:	f003 0303 	and.w	r3, r3, #3
 8106902:	009b      	lsls	r3, r3, #2
 8106904:	220f      	movs	r2, #15
 8106906:	fa02 f303 	lsl.w	r3, r2, r3
 810690a:	43db      	mvns	r3, r3
 810690c:	69ba      	ldr	r2, [r7, #24]
 810690e:	4013      	ands	r3, r2
 8106910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8106912:	687b      	ldr	r3, [r7, #4]
 8106914:	4a20      	ldr	r2, [pc, #128]	@ (8106998 <HAL_GPIO_Init+0x240>)
 8106916:	4293      	cmp	r3, r2
 8106918:	d052      	beq.n	81069c0 <HAL_GPIO_Init+0x268>
 810691a:	687b      	ldr	r3, [r7, #4]
 810691c:	4a1f      	ldr	r2, [pc, #124]	@ (810699c <HAL_GPIO_Init+0x244>)
 810691e:	4293      	cmp	r3, r2
 8106920:	d031      	beq.n	8106986 <HAL_GPIO_Init+0x22e>
 8106922:	687b      	ldr	r3, [r7, #4]
 8106924:	4a1e      	ldr	r2, [pc, #120]	@ (81069a0 <HAL_GPIO_Init+0x248>)
 8106926:	4293      	cmp	r3, r2
 8106928:	d02b      	beq.n	8106982 <HAL_GPIO_Init+0x22a>
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	4a1d      	ldr	r2, [pc, #116]	@ (81069a4 <HAL_GPIO_Init+0x24c>)
 810692e:	4293      	cmp	r3, r2
 8106930:	d025      	beq.n	810697e <HAL_GPIO_Init+0x226>
 8106932:	687b      	ldr	r3, [r7, #4]
 8106934:	4a1c      	ldr	r2, [pc, #112]	@ (81069a8 <HAL_GPIO_Init+0x250>)
 8106936:	4293      	cmp	r3, r2
 8106938:	d01f      	beq.n	810697a <HAL_GPIO_Init+0x222>
 810693a:	687b      	ldr	r3, [r7, #4]
 810693c:	4a1b      	ldr	r2, [pc, #108]	@ (81069ac <HAL_GPIO_Init+0x254>)
 810693e:	4293      	cmp	r3, r2
 8106940:	d019      	beq.n	8106976 <HAL_GPIO_Init+0x21e>
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	4a1a      	ldr	r2, [pc, #104]	@ (81069b0 <HAL_GPIO_Init+0x258>)
 8106946:	4293      	cmp	r3, r2
 8106948:	d013      	beq.n	8106972 <HAL_GPIO_Init+0x21a>
 810694a:	687b      	ldr	r3, [r7, #4]
 810694c:	4a19      	ldr	r2, [pc, #100]	@ (81069b4 <HAL_GPIO_Init+0x25c>)
 810694e:	4293      	cmp	r3, r2
 8106950:	d00d      	beq.n	810696e <HAL_GPIO_Init+0x216>
 8106952:	687b      	ldr	r3, [r7, #4]
 8106954:	4a18      	ldr	r2, [pc, #96]	@ (81069b8 <HAL_GPIO_Init+0x260>)
 8106956:	4293      	cmp	r3, r2
 8106958:	d007      	beq.n	810696a <HAL_GPIO_Init+0x212>
 810695a:	687b      	ldr	r3, [r7, #4]
 810695c:	4a17      	ldr	r2, [pc, #92]	@ (81069bc <HAL_GPIO_Init+0x264>)
 810695e:	4293      	cmp	r3, r2
 8106960:	d101      	bne.n	8106966 <HAL_GPIO_Init+0x20e>
 8106962:	2309      	movs	r3, #9
 8106964:	e02d      	b.n	81069c2 <HAL_GPIO_Init+0x26a>
 8106966:	230a      	movs	r3, #10
 8106968:	e02b      	b.n	81069c2 <HAL_GPIO_Init+0x26a>
 810696a:	2308      	movs	r3, #8
 810696c:	e029      	b.n	81069c2 <HAL_GPIO_Init+0x26a>
 810696e:	2307      	movs	r3, #7
 8106970:	e027      	b.n	81069c2 <HAL_GPIO_Init+0x26a>
 8106972:	2306      	movs	r3, #6
 8106974:	e025      	b.n	81069c2 <HAL_GPIO_Init+0x26a>
 8106976:	2305      	movs	r3, #5
 8106978:	e023      	b.n	81069c2 <HAL_GPIO_Init+0x26a>
 810697a:	2304      	movs	r3, #4
 810697c:	e021      	b.n	81069c2 <HAL_GPIO_Init+0x26a>
 810697e:	2303      	movs	r3, #3
 8106980:	e01f      	b.n	81069c2 <HAL_GPIO_Init+0x26a>
 8106982:	2302      	movs	r3, #2
 8106984:	e01d      	b.n	81069c2 <HAL_GPIO_Init+0x26a>
 8106986:	2301      	movs	r3, #1
 8106988:	e01b      	b.n	81069c2 <HAL_GPIO_Init+0x26a>
 810698a:	bf00      	nop
 810698c:	580000c0 	.word	0x580000c0
 8106990:	58024400 	.word	0x58024400
 8106994:	58000400 	.word	0x58000400
 8106998:	58020000 	.word	0x58020000
 810699c:	58020400 	.word	0x58020400
 81069a0:	58020800 	.word	0x58020800
 81069a4:	58020c00 	.word	0x58020c00
 81069a8:	58021000 	.word	0x58021000
 81069ac:	58021400 	.word	0x58021400
 81069b0:	58021800 	.word	0x58021800
 81069b4:	58021c00 	.word	0x58021c00
 81069b8:	58022000 	.word	0x58022000
 81069bc:	58022400 	.word	0x58022400
 81069c0:	2300      	movs	r3, #0
 81069c2:	69fa      	ldr	r2, [r7, #28]
 81069c4:	f002 0203 	and.w	r2, r2, #3
 81069c8:	0092      	lsls	r2, r2, #2
 81069ca:	4093      	lsls	r3, r2
 81069cc:	69ba      	ldr	r2, [r7, #24]
 81069ce:	4313      	orrs	r3, r2
 81069d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81069d2:	4938      	ldr	r1, [pc, #224]	@ (8106ab4 <HAL_GPIO_Init+0x35c>)
 81069d4:	69fb      	ldr	r3, [r7, #28]
 81069d6:	089b      	lsrs	r3, r3, #2
 81069d8:	3302      	adds	r3, #2
 81069da:	69ba      	ldr	r2, [r7, #24]
 81069dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81069e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81069e4:	681b      	ldr	r3, [r3, #0]
 81069e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81069e8:	693b      	ldr	r3, [r7, #16]
 81069ea:	43db      	mvns	r3, r3
 81069ec:	69ba      	ldr	r2, [r7, #24]
 81069ee:	4013      	ands	r3, r2
 81069f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81069f2:	683b      	ldr	r3, [r7, #0]
 81069f4:	685b      	ldr	r3, [r3, #4]
 81069f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81069fa:	2b00      	cmp	r3, #0
 81069fc:	d003      	beq.n	8106a06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81069fe:	69ba      	ldr	r2, [r7, #24]
 8106a00:	693b      	ldr	r3, [r7, #16]
 8106a02:	4313      	orrs	r3, r2
 8106a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8106a06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106a0a:	69bb      	ldr	r3, [r7, #24]
 8106a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106a12:	685b      	ldr	r3, [r3, #4]
 8106a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106a16:	693b      	ldr	r3, [r7, #16]
 8106a18:	43db      	mvns	r3, r3
 8106a1a:	69ba      	ldr	r2, [r7, #24]
 8106a1c:	4013      	ands	r3, r2
 8106a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8106a20:	683b      	ldr	r3, [r7, #0]
 8106a22:	685b      	ldr	r3, [r3, #4]
 8106a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8106a28:	2b00      	cmp	r3, #0
 8106a2a:	d003      	beq.n	8106a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8106a2c:	69ba      	ldr	r2, [r7, #24]
 8106a2e:	693b      	ldr	r3, [r7, #16]
 8106a30:	4313      	orrs	r3, r2
 8106a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106a38:	69bb      	ldr	r3, [r7, #24]
 8106a3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8106a3c:	697b      	ldr	r3, [r7, #20]
 8106a3e:	685b      	ldr	r3, [r3, #4]
 8106a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106a42:	693b      	ldr	r3, [r7, #16]
 8106a44:	43db      	mvns	r3, r3
 8106a46:	69ba      	ldr	r2, [r7, #24]
 8106a48:	4013      	ands	r3, r2
 8106a4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8106a4c:	683b      	ldr	r3, [r7, #0]
 8106a4e:	685b      	ldr	r3, [r3, #4]
 8106a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106a54:	2b00      	cmp	r3, #0
 8106a56:	d003      	beq.n	8106a60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8106a58:	69ba      	ldr	r2, [r7, #24]
 8106a5a:	693b      	ldr	r3, [r7, #16]
 8106a5c:	4313      	orrs	r3, r2
 8106a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8106a60:	697b      	ldr	r3, [r7, #20]
 8106a62:	69ba      	ldr	r2, [r7, #24]
 8106a64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8106a66:	697b      	ldr	r3, [r7, #20]
 8106a68:	681b      	ldr	r3, [r3, #0]
 8106a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106a6c:	693b      	ldr	r3, [r7, #16]
 8106a6e:	43db      	mvns	r3, r3
 8106a70:	69ba      	ldr	r2, [r7, #24]
 8106a72:	4013      	ands	r3, r2
 8106a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8106a76:	683b      	ldr	r3, [r7, #0]
 8106a78:	685b      	ldr	r3, [r3, #4]
 8106a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106a7e:	2b00      	cmp	r3, #0
 8106a80:	d003      	beq.n	8106a8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8106a82:	69ba      	ldr	r2, [r7, #24]
 8106a84:	693b      	ldr	r3, [r7, #16]
 8106a86:	4313      	orrs	r3, r2
 8106a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8106a8a:	697b      	ldr	r3, [r7, #20]
 8106a8c:	69ba      	ldr	r2, [r7, #24]
 8106a8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8106a90:	69fb      	ldr	r3, [r7, #28]
 8106a92:	3301      	adds	r3, #1
 8106a94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106a96:	683b      	ldr	r3, [r7, #0]
 8106a98:	681a      	ldr	r2, [r3, #0]
 8106a9a:	69fb      	ldr	r3, [r7, #28]
 8106a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8106aa0:	2b00      	cmp	r3, #0
 8106aa2:	f47f ae63 	bne.w	810676c <HAL_GPIO_Init+0x14>
  }
}
 8106aa6:	bf00      	nop
 8106aa8:	bf00      	nop
 8106aaa:	3724      	adds	r7, #36	@ 0x24
 8106aac:	46bd      	mov	sp, r7
 8106aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ab2:	4770      	bx	lr
 8106ab4:	58000400 	.word	0x58000400

08106ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8106ab8:	b480      	push	{r7}
 8106aba:	b083      	sub	sp, #12
 8106abc:	af00      	add	r7, sp, #0
 8106abe:	6078      	str	r0, [r7, #4]
 8106ac0:	460b      	mov	r3, r1
 8106ac2:	807b      	strh	r3, [r7, #2]
 8106ac4:	4613      	mov	r3, r2
 8106ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8106ac8:	787b      	ldrb	r3, [r7, #1]
 8106aca:	2b00      	cmp	r3, #0
 8106acc:	d003      	beq.n	8106ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8106ace:	887a      	ldrh	r2, [r7, #2]
 8106ad0:	687b      	ldr	r3, [r7, #4]
 8106ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8106ad4:	e003      	b.n	8106ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8106ad6:	887b      	ldrh	r3, [r7, #2]
 8106ad8:	041a      	lsls	r2, r3, #16
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	619a      	str	r2, [r3, #24]
}
 8106ade:	bf00      	nop
 8106ae0:	370c      	adds	r7, #12
 8106ae2:	46bd      	mov	sp, r7
 8106ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ae8:	4770      	bx	lr

08106aea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8106aea:	b480      	push	{r7}
 8106aec:	b085      	sub	sp, #20
 8106aee:	af00      	add	r7, sp, #0
 8106af0:	6078      	str	r0, [r7, #4]
 8106af2:	460b      	mov	r3, r1
 8106af4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8106af6:	687b      	ldr	r3, [r7, #4]
 8106af8:	695b      	ldr	r3, [r3, #20]
 8106afa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8106afc:	887a      	ldrh	r2, [r7, #2]
 8106afe:	68fb      	ldr	r3, [r7, #12]
 8106b00:	4013      	ands	r3, r2
 8106b02:	041a      	lsls	r2, r3, #16
 8106b04:	68fb      	ldr	r3, [r7, #12]
 8106b06:	43d9      	mvns	r1, r3
 8106b08:	887b      	ldrh	r3, [r7, #2]
 8106b0a:	400b      	ands	r3, r1
 8106b0c:	431a      	orrs	r2, r3
 8106b0e:	687b      	ldr	r3, [r7, #4]
 8106b10:	619a      	str	r2, [r3, #24]
}
 8106b12:	bf00      	nop
 8106b14:	3714      	adds	r7, #20
 8106b16:	46bd      	mov	sp, r7
 8106b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b1c:	4770      	bx	lr
	...

08106b20 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8106b20:	b480      	push	{r7}
 8106b22:	b083      	sub	sp, #12
 8106b24:	af00      	add	r7, sp, #0
 8106b26:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8106b28:	4a08      	ldr	r2, [pc, #32]	@ (8106b4c <HAL_HSEM_FastTake+0x2c>)
 8106b2a:	687b      	ldr	r3, [r7, #4]
 8106b2c:	3320      	adds	r3, #32
 8106b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106b32:	4a07      	ldr	r2, [pc, #28]	@ (8106b50 <HAL_HSEM_FastTake+0x30>)
 8106b34:	4293      	cmp	r3, r2
 8106b36:	d101      	bne.n	8106b3c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8106b38:	2300      	movs	r3, #0
 8106b3a:	e000      	b.n	8106b3e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8106b3c:	2301      	movs	r3, #1
}
 8106b3e:	4618      	mov	r0, r3
 8106b40:	370c      	adds	r7, #12
 8106b42:	46bd      	mov	sp, r7
 8106b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b48:	4770      	bx	lr
 8106b4a:	bf00      	nop
 8106b4c:	58026400 	.word	0x58026400
 8106b50:	80000100 	.word	0x80000100

08106b54 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8106b54:	b480      	push	{r7}
 8106b56:	b083      	sub	sp, #12
 8106b58:	af00      	add	r7, sp, #0
 8106b5a:	6078      	str	r0, [r7, #4]
 8106b5c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8106b5e:	4906      	ldr	r1, [pc, #24]	@ (8106b78 <HAL_HSEM_Release+0x24>)
 8106b60:	683b      	ldr	r3, [r7, #0]
 8106b62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8106b66:	687b      	ldr	r3, [r7, #4]
 8106b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8106b6c:	bf00      	nop
 8106b6e:	370c      	adds	r7, #12
 8106b70:	46bd      	mov	sp, r7
 8106b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b76:	4770      	bx	lr
 8106b78:	58026400 	.word	0x58026400

08106b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8106b7c:	b480      	push	{r7}
 8106b7e:	b089      	sub	sp, #36	@ 0x24
 8106b80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106b82:	4bb3      	ldr	r3, [pc, #716]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b84:	691b      	ldr	r3, [r3, #16]
 8106b86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8106b8a:	2b18      	cmp	r3, #24
 8106b8c:	f200 8155 	bhi.w	8106e3a <HAL_RCC_GetSysClockFreq+0x2be>
 8106b90:	a201      	add	r2, pc, #4	@ (adr r2, 8106b98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8106b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106b96:	bf00      	nop
 8106b98:	08106bfd 	.word	0x08106bfd
 8106b9c:	08106e3b 	.word	0x08106e3b
 8106ba0:	08106e3b 	.word	0x08106e3b
 8106ba4:	08106e3b 	.word	0x08106e3b
 8106ba8:	08106e3b 	.word	0x08106e3b
 8106bac:	08106e3b 	.word	0x08106e3b
 8106bb0:	08106e3b 	.word	0x08106e3b
 8106bb4:	08106e3b 	.word	0x08106e3b
 8106bb8:	08106c23 	.word	0x08106c23
 8106bbc:	08106e3b 	.word	0x08106e3b
 8106bc0:	08106e3b 	.word	0x08106e3b
 8106bc4:	08106e3b 	.word	0x08106e3b
 8106bc8:	08106e3b 	.word	0x08106e3b
 8106bcc:	08106e3b 	.word	0x08106e3b
 8106bd0:	08106e3b 	.word	0x08106e3b
 8106bd4:	08106e3b 	.word	0x08106e3b
 8106bd8:	08106c29 	.word	0x08106c29
 8106bdc:	08106e3b 	.word	0x08106e3b
 8106be0:	08106e3b 	.word	0x08106e3b
 8106be4:	08106e3b 	.word	0x08106e3b
 8106be8:	08106e3b 	.word	0x08106e3b
 8106bec:	08106e3b 	.word	0x08106e3b
 8106bf0:	08106e3b 	.word	0x08106e3b
 8106bf4:	08106e3b 	.word	0x08106e3b
 8106bf8:	08106c2f 	.word	0x08106c2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106bfc:	4b94      	ldr	r3, [pc, #592]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106bfe:	681b      	ldr	r3, [r3, #0]
 8106c00:	f003 0320 	and.w	r3, r3, #32
 8106c04:	2b00      	cmp	r3, #0
 8106c06:	d009      	beq.n	8106c1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106c08:	4b91      	ldr	r3, [pc, #580]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c0a:	681b      	ldr	r3, [r3, #0]
 8106c0c:	08db      	lsrs	r3, r3, #3
 8106c0e:	f003 0303 	and.w	r3, r3, #3
 8106c12:	4a90      	ldr	r2, [pc, #576]	@ (8106e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106c14:	fa22 f303 	lsr.w	r3, r2, r3
 8106c18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8106c1a:	e111      	b.n	8106e40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106c1c:	4b8d      	ldr	r3, [pc, #564]	@ (8106e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106c1e:	61bb      	str	r3, [r7, #24]
      break;
 8106c20:	e10e      	b.n	8106e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8106c22:	4b8d      	ldr	r3, [pc, #564]	@ (8106e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106c24:	61bb      	str	r3, [r7, #24]
      break;
 8106c26:	e10b      	b.n	8106e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8106c28:	4b8c      	ldr	r3, [pc, #560]	@ (8106e5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8106c2a:	61bb      	str	r3, [r7, #24]
      break;
 8106c2c:	e108      	b.n	8106e40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106c2e:	4b88      	ldr	r3, [pc, #544]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106c32:	f003 0303 	and.w	r3, r3, #3
 8106c36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8106c38:	4b85      	ldr	r3, [pc, #532]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106c3c:	091b      	lsrs	r3, r3, #4
 8106c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106c42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8106c44:	4b82      	ldr	r3, [pc, #520]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106c48:	f003 0301 	and.w	r3, r3, #1
 8106c4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8106c4e:	4b80      	ldr	r3, [pc, #512]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106c52:	08db      	lsrs	r3, r3, #3
 8106c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106c58:	68fa      	ldr	r2, [r7, #12]
 8106c5a:	fb02 f303 	mul.w	r3, r2, r3
 8106c5e:	ee07 3a90 	vmov	s15, r3
 8106c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8106c6a:	693b      	ldr	r3, [r7, #16]
 8106c6c:	2b00      	cmp	r3, #0
 8106c6e:	f000 80e1 	beq.w	8106e34 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8106c72:	697b      	ldr	r3, [r7, #20]
 8106c74:	2b02      	cmp	r3, #2
 8106c76:	f000 8083 	beq.w	8106d80 <HAL_RCC_GetSysClockFreq+0x204>
 8106c7a:	697b      	ldr	r3, [r7, #20]
 8106c7c:	2b02      	cmp	r3, #2
 8106c7e:	f200 80a1 	bhi.w	8106dc4 <HAL_RCC_GetSysClockFreq+0x248>
 8106c82:	697b      	ldr	r3, [r7, #20]
 8106c84:	2b00      	cmp	r3, #0
 8106c86:	d003      	beq.n	8106c90 <HAL_RCC_GetSysClockFreq+0x114>
 8106c88:	697b      	ldr	r3, [r7, #20]
 8106c8a:	2b01      	cmp	r3, #1
 8106c8c:	d056      	beq.n	8106d3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8106c8e:	e099      	b.n	8106dc4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106c90:	4b6f      	ldr	r3, [pc, #444]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c92:	681b      	ldr	r3, [r3, #0]
 8106c94:	f003 0320 	and.w	r3, r3, #32
 8106c98:	2b00      	cmp	r3, #0
 8106c9a:	d02d      	beq.n	8106cf8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c9e:	681b      	ldr	r3, [r3, #0]
 8106ca0:	08db      	lsrs	r3, r3, #3
 8106ca2:	f003 0303 	and.w	r3, r3, #3
 8106ca6:	4a6b      	ldr	r2, [pc, #428]	@ (8106e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8106cac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106cae:	687b      	ldr	r3, [r7, #4]
 8106cb0:	ee07 3a90 	vmov	s15, r3
 8106cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106cb8:	693b      	ldr	r3, [r7, #16]
 8106cba:	ee07 3a90 	vmov	s15, r3
 8106cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106cc6:	4b62      	ldr	r3, [pc, #392]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106cce:	ee07 3a90 	vmov	s15, r3
 8106cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8106cda:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8106e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8106cf6:	e087      	b.n	8106e08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106cf8:	693b      	ldr	r3, [r7, #16]
 8106cfa:	ee07 3a90 	vmov	s15, r3
 8106cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8106e64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8106d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d0a:	4b51      	ldr	r3, [pc, #324]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d12:	ee07 3a90 	vmov	s15, r3
 8106d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8106d1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8106e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106d3a:	e065      	b.n	8106e08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106d3c:	693b      	ldr	r3, [r7, #16]
 8106d3e:	ee07 3a90 	vmov	s15, r3
 8106d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8106e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d4e:	4b40      	ldr	r3, [pc, #256]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d56:	ee07 3a90 	vmov	s15, r3
 8106d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106d62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8106e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106d7e:	e043      	b.n	8106e08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106d80:	693b      	ldr	r3, [r7, #16]
 8106d82:	ee07 3a90 	vmov	s15, r3
 8106d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8106e6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8106d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d92:	4b2f      	ldr	r3, [pc, #188]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d9a:	ee07 3a90 	vmov	s15, r3
 8106d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8106da6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8106e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106dc2:	e021      	b.n	8106e08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106dc4:	693b      	ldr	r3, [r7, #16]
 8106dc6:	ee07 3a90 	vmov	s15, r3
 8106dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106dce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8106e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106dde:	ee07 3a90 	vmov	s15, r3
 8106de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8106dea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8106e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106e06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8106e08:	4b11      	ldr	r3, [pc, #68]	@ (8106e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106e0c:	0a5b      	lsrs	r3, r3, #9
 8106e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106e12:	3301      	adds	r3, #1
 8106e14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8106e16:	683b      	ldr	r3, [r7, #0]
 8106e18:	ee07 3a90 	vmov	s15, r3
 8106e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106e20:	edd7 6a07 	vldr	s13, [r7, #28]
 8106e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106e2c:	ee17 3a90 	vmov	r3, s15
 8106e30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8106e32:	e005      	b.n	8106e40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8106e34:	2300      	movs	r3, #0
 8106e36:	61bb      	str	r3, [r7, #24]
      break;
 8106e38:	e002      	b.n	8106e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8106e3a:	4b07      	ldr	r3, [pc, #28]	@ (8106e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106e3c:	61bb      	str	r3, [r7, #24]
      break;
 8106e3e:	bf00      	nop
  }

  return sysclockfreq;
 8106e40:	69bb      	ldr	r3, [r7, #24]
}
 8106e42:	4618      	mov	r0, r3
 8106e44:	3724      	adds	r7, #36	@ 0x24
 8106e46:	46bd      	mov	sp, r7
 8106e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e4c:	4770      	bx	lr
 8106e4e:	bf00      	nop
 8106e50:	58024400 	.word	0x58024400
 8106e54:	03d09000 	.word	0x03d09000
 8106e58:	003d0900 	.word	0x003d0900
 8106e5c:	017d7840 	.word	0x017d7840
 8106e60:	46000000 	.word	0x46000000
 8106e64:	4c742400 	.word	0x4c742400
 8106e68:	4a742400 	.word	0x4a742400
 8106e6c:	4bbebc20 	.word	0x4bbebc20

08106e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106e70:	b580      	push	{r7, lr}
 8106e72:	b082      	sub	sp, #8
 8106e74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106e76:	f7ff fe81 	bl	8106b7c <HAL_RCC_GetSysClockFreq>
 8106e7a:	4602      	mov	r2, r0
 8106e7c:	4b11      	ldr	r3, [pc, #68]	@ (8106ec4 <HAL_RCC_GetHCLKFreq+0x54>)
 8106e7e:	699b      	ldr	r3, [r3, #24]
 8106e80:	0a1b      	lsrs	r3, r3, #8
 8106e82:	f003 030f 	and.w	r3, r3, #15
 8106e86:	4910      	ldr	r1, [pc, #64]	@ (8106ec8 <HAL_RCC_GetHCLKFreq+0x58>)
 8106e88:	5ccb      	ldrb	r3, [r1, r3]
 8106e8a:	f003 031f 	and.w	r3, r3, #31
 8106e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8106e92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106e94:	4b0b      	ldr	r3, [pc, #44]	@ (8106ec4 <HAL_RCC_GetHCLKFreq+0x54>)
 8106e96:	699b      	ldr	r3, [r3, #24]
 8106e98:	f003 030f 	and.w	r3, r3, #15
 8106e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8106ec8 <HAL_RCC_GetHCLKFreq+0x58>)
 8106e9e:	5cd3      	ldrb	r3, [r2, r3]
 8106ea0:	f003 031f 	and.w	r3, r3, #31
 8106ea4:	687a      	ldr	r2, [r7, #4]
 8106ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8106eaa:	4a08      	ldr	r2, [pc, #32]	@ (8106ecc <HAL_RCC_GetHCLKFreq+0x5c>)
 8106eac:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106eae:	4b07      	ldr	r3, [pc, #28]	@ (8106ecc <HAL_RCC_GetHCLKFreq+0x5c>)
 8106eb0:	681b      	ldr	r3, [r3, #0]
 8106eb2:	4a07      	ldr	r2, [pc, #28]	@ (8106ed0 <HAL_RCC_GetHCLKFreq+0x60>)
 8106eb4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8106eb6:	4b05      	ldr	r3, [pc, #20]	@ (8106ecc <HAL_RCC_GetHCLKFreq+0x5c>)
 8106eb8:	681b      	ldr	r3, [r3, #0]
}
 8106eba:	4618      	mov	r0, r3
 8106ebc:	3708      	adds	r7, #8
 8106ebe:	46bd      	mov	sp, r7
 8106ec0:	bd80      	pop	{r7, pc}
 8106ec2:	bf00      	nop
 8106ec4:	58024400 	.word	0x58024400
 8106ec8:	08111630 	.word	0x08111630
 8106ecc:	10000004 	.word	0x10000004
 8106ed0:	10000000 	.word	0x10000000

08106ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106ed4:	b580      	push	{r7, lr}
 8106ed6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106ed8:	f7ff ffca 	bl	8106e70 <HAL_RCC_GetHCLKFreq>
 8106edc:	4602      	mov	r2, r0
 8106ede:	4b06      	ldr	r3, [pc, #24]	@ (8106ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106ee0:	69db      	ldr	r3, [r3, #28]
 8106ee2:	091b      	lsrs	r3, r3, #4
 8106ee4:	f003 0307 	and.w	r3, r3, #7
 8106ee8:	4904      	ldr	r1, [pc, #16]	@ (8106efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8106eea:	5ccb      	ldrb	r3, [r1, r3]
 8106eec:	f003 031f 	and.w	r3, r3, #31
 8106ef0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106ef4:	4618      	mov	r0, r3
 8106ef6:	bd80      	pop	{r7, pc}
 8106ef8:	58024400 	.word	0x58024400
 8106efc:	08111630 	.word	0x08111630

08106f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106f00:	b580      	push	{r7, lr}
 8106f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106f04:	f7ff ffb4 	bl	8106e70 <HAL_RCC_GetHCLKFreq>
 8106f08:	4602      	mov	r2, r0
 8106f0a:	4b06      	ldr	r3, [pc, #24]	@ (8106f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8106f0c:	69db      	ldr	r3, [r3, #28]
 8106f0e:	0a1b      	lsrs	r3, r3, #8
 8106f10:	f003 0307 	and.w	r3, r3, #7
 8106f14:	4904      	ldr	r1, [pc, #16]	@ (8106f28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8106f16:	5ccb      	ldrb	r3, [r1, r3]
 8106f18:	f003 031f 	and.w	r3, r3, #31
 8106f1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106f20:	4618      	mov	r0, r3
 8106f22:	bd80      	pop	{r7, pc}
 8106f24:	58024400 	.word	0x58024400
 8106f28:	08111630 	.word	0x08111630

08106f2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8106f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106f30:	b0ca      	sub	sp, #296	@ 0x128
 8106f32:	af00      	add	r7, sp, #0
 8106f34:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8106f38:	2300      	movs	r3, #0
 8106f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8106f3e:	2300      	movs	r3, #0
 8106f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8106f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8106f50:	2500      	movs	r5, #0
 8106f52:	ea54 0305 	orrs.w	r3, r4, r5
 8106f56:	d049      	beq.n	8106fec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8106f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106f5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106f62:	d02f      	beq.n	8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8106f64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106f68:	d828      	bhi.n	8106fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106f6e:	d01a      	beq.n	8106fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8106f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106f74:	d822      	bhi.n	8106fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106f76:	2b00      	cmp	r3, #0
 8106f78:	d003      	beq.n	8106f82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8106f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106f7e:	d007      	beq.n	8106f90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106f80:	e01c      	b.n	8106fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106f82:	4bb8      	ldr	r3, [pc, #736]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106f86:	4ab7      	ldr	r2, [pc, #732]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106f8e:	e01a      	b.n	8106fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f94:	3308      	adds	r3, #8
 8106f96:	2102      	movs	r1, #2
 8106f98:	4618      	mov	r0, r3
 8106f9a:	f001 fc8f 	bl	81088bc <RCCEx_PLL2_Config>
 8106f9e:	4603      	mov	r3, r0
 8106fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106fa4:	e00f      	b.n	8106fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106faa:	3328      	adds	r3, #40	@ 0x28
 8106fac:	2102      	movs	r1, #2
 8106fae:	4618      	mov	r0, r3
 8106fb0:	f001 fd36 	bl	8108a20 <RCCEx_PLL3_Config>
 8106fb4:	4603      	mov	r3, r0
 8106fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106fba:	e004      	b.n	8106fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106fbc:	2301      	movs	r3, #1
 8106fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106fc2:	e000      	b.n	8106fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8106fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106fca:	2b00      	cmp	r3, #0
 8106fcc:	d10a      	bne.n	8106fe4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8106fce:	4ba5      	ldr	r3, [pc, #660]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106fd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8106fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106fdc:	4aa1      	ldr	r2, [pc, #644]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106fde:	430b      	orrs	r3, r1
 8106fe0:	6513      	str	r3, [r2, #80]	@ 0x50
 8106fe2:	e003      	b.n	8106fec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106fe8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8106fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ff4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8106ff8:	f04f 0900 	mov.w	r9, #0
 8106ffc:	ea58 0309 	orrs.w	r3, r8, r9
 8107000:	d047      	beq.n	8107092 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8107002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107008:	2b04      	cmp	r3, #4
 810700a:	d82a      	bhi.n	8107062 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810700c:	a201      	add	r2, pc, #4	@ (adr r2, 8107014 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810700e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107012:	bf00      	nop
 8107014:	08107029 	.word	0x08107029
 8107018:	08107037 	.word	0x08107037
 810701c:	0810704d 	.word	0x0810704d
 8107020:	0810706b 	.word	0x0810706b
 8107024:	0810706b 	.word	0x0810706b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107028:	4b8e      	ldr	r3, [pc, #568]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810702a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810702c:	4a8d      	ldr	r2, [pc, #564]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810702e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107034:	e01a      	b.n	810706c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810703a:	3308      	adds	r3, #8
 810703c:	2100      	movs	r1, #0
 810703e:	4618      	mov	r0, r3
 8107040:	f001 fc3c 	bl	81088bc <RCCEx_PLL2_Config>
 8107044:	4603      	mov	r3, r0
 8107046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810704a:	e00f      	b.n	810706c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810704c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107050:	3328      	adds	r3, #40	@ 0x28
 8107052:	2100      	movs	r1, #0
 8107054:	4618      	mov	r0, r3
 8107056:	f001 fce3 	bl	8108a20 <RCCEx_PLL3_Config>
 810705a:	4603      	mov	r3, r0
 810705c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107060:	e004      	b.n	810706c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107062:	2301      	movs	r3, #1
 8107064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107068:	e000      	b.n	810706c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810706a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810706c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107070:	2b00      	cmp	r3, #0
 8107072:	d10a      	bne.n	810708a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8107074:	4b7b      	ldr	r3, [pc, #492]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107078:	f023 0107 	bic.w	r1, r3, #7
 810707c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107082:	4a78      	ldr	r2, [pc, #480]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107084:	430b      	orrs	r3, r1
 8107086:	6513      	str	r3, [r2, #80]	@ 0x50
 8107088:	e003      	b.n	8107092 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810708a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810708e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8107092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107096:	e9d3 2300 	ldrd	r2, r3, [r3]
 810709a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810709e:	f04f 0b00 	mov.w	fp, #0
 81070a2:	ea5a 030b 	orrs.w	r3, sl, fp
 81070a6:	d04c      	beq.n	8107142 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81070a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81070ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81070b2:	d030      	beq.n	8107116 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81070b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81070b8:	d829      	bhi.n	810710e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81070ba:	2bc0      	cmp	r3, #192	@ 0xc0
 81070bc:	d02d      	beq.n	810711a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81070be:	2bc0      	cmp	r3, #192	@ 0xc0
 81070c0:	d825      	bhi.n	810710e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81070c2:	2b80      	cmp	r3, #128	@ 0x80
 81070c4:	d018      	beq.n	81070f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81070c6:	2b80      	cmp	r3, #128	@ 0x80
 81070c8:	d821      	bhi.n	810710e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81070ca:	2b00      	cmp	r3, #0
 81070cc:	d002      	beq.n	81070d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81070ce:	2b40      	cmp	r3, #64	@ 0x40
 81070d0:	d007      	beq.n	81070e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81070d2:	e01c      	b.n	810710e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81070d4:	4b63      	ldr	r3, [pc, #396]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81070d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81070d8:	4a62      	ldr	r2, [pc, #392]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81070da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81070de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81070e0:	e01c      	b.n	810711c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81070e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070e6:	3308      	adds	r3, #8
 81070e8:	2100      	movs	r1, #0
 81070ea:	4618      	mov	r0, r3
 81070ec:	f001 fbe6 	bl	81088bc <RCCEx_PLL2_Config>
 81070f0:	4603      	mov	r3, r0
 81070f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81070f6:	e011      	b.n	810711c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81070f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070fc:	3328      	adds	r3, #40	@ 0x28
 81070fe:	2100      	movs	r1, #0
 8107100:	4618      	mov	r0, r3
 8107102:	f001 fc8d 	bl	8108a20 <RCCEx_PLL3_Config>
 8107106:	4603      	mov	r3, r0
 8107108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810710c:	e006      	b.n	810711c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810710e:	2301      	movs	r3, #1
 8107110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107114:	e002      	b.n	810711c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8107116:	bf00      	nop
 8107118:	e000      	b.n	810711c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810711a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810711c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107120:	2b00      	cmp	r3, #0
 8107122:	d10a      	bne.n	810713a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8107124:	4b4f      	ldr	r3, [pc, #316]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107128:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107132:	4a4c      	ldr	r2, [pc, #304]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107134:	430b      	orrs	r3, r1
 8107136:	6513      	str	r3, [r2, #80]	@ 0x50
 8107138:	e003      	b.n	8107142 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810713a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810713e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8107142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107146:	e9d3 2300 	ldrd	r2, r3, [r3]
 810714a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810714e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8107152:	2300      	movs	r3, #0
 8107154:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8107158:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810715c:	460b      	mov	r3, r1
 810715e:	4313      	orrs	r3, r2
 8107160:	d053      	beq.n	810720a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8107162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107166:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810716a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810716e:	d035      	beq.n	81071dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8107170:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107174:	d82e      	bhi.n	81071d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8107176:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810717a:	d031      	beq.n	81071e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810717c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107180:	d828      	bhi.n	81071d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8107182:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107186:	d01a      	beq.n	81071be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8107188:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810718c:	d822      	bhi.n	81071d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810718e:	2b00      	cmp	r3, #0
 8107190:	d003      	beq.n	810719a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8107192:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107196:	d007      	beq.n	81071a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8107198:	e01c      	b.n	81071d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810719a:	4b32      	ldr	r3, [pc, #200]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810719c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810719e:	4a31      	ldr	r2, [pc, #196]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81071a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81071a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81071a6:	e01c      	b.n	81071e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81071a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071ac:	3308      	adds	r3, #8
 81071ae:	2100      	movs	r1, #0
 81071b0:	4618      	mov	r0, r3
 81071b2:	f001 fb83 	bl	81088bc <RCCEx_PLL2_Config>
 81071b6:	4603      	mov	r3, r0
 81071b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81071bc:	e011      	b.n	81071e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81071be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071c2:	3328      	adds	r3, #40	@ 0x28
 81071c4:	2100      	movs	r1, #0
 81071c6:	4618      	mov	r0, r3
 81071c8:	f001 fc2a 	bl	8108a20 <RCCEx_PLL3_Config>
 81071cc:	4603      	mov	r3, r0
 81071ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81071d2:	e006      	b.n	81071e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81071d4:	2301      	movs	r3, #1
 81071d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81071da:	e002      	b.n	81071e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81071dc:	bf00      	nop
 81071de:	e000      	b.n	81071e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81071e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81071e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81071e6:	2b00      	cmp	r3, #0
 81071e8:	d10b      	bne.n	8107202 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81071ea:	4b1e      	ldr	r3, [pc, #120]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81071ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81071ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81071f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81071fa:	4a1a      	ldr	r2, [pc, #104]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81071fc:	430b      	orrs	r3, r1
 81071fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8107200:	e003      	b.n	810720a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107212:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8107216:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810721a:	2300      	movs	r3, #0
 810721c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8107220:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8107224:	460b      	mov	r3, r1
 8107226:	4313      	orrs	r3, r2
 8107228:	d056      	beq.n	81072d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810722a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810722e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8107232:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107236:	d038      	beq.n	81072aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8107238:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810723c:	d831      	bhi.n	81072a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810723e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107242:	d034      	beq.n	81072ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8107244:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107248:	d82b      	bhi.n	81072a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810724a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810724e:	d01d      	beq.n	810728c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8107250:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107254:	d825      	bhi.n	81072a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107256:	2b00      	cmp	r3, #0
 8107258:	d006      	beq.n	8107268 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810725a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810725e:	d00a      	beq.n	8107276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8107260:	e01f      	b.n	81072a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107262:	bf00      	nop
 8107264:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107268:	4ba2      	ldr	r3, [pc, #648]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810726a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810726c:	4aa1      	ldr	r2, [pc, #644]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810726e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107274:	e01c      	b.n	81072b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810727a:	3308      	adds	r3, #8
 810727c:	2100      	movs	r1, #0
 810727e:	4618      	mov	r0, r3
 8107280:	f001 fb1c 	bl	81088bc <RCCEx_PLL2_Config>
 8107284:	4603      	mov	r3, r0
 8107286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810728a:	e011      	b.n	81072b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810728c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107290:	3328      	adds	r3, #40	@ 0x28
 8107292:	2100      	movs	r1, #0
 8107294:	4618      	mov	r0, r3
 8107296:	f001 fbc3 	bl	8108a20 <RCCEx_PLL3_Config>
 810729a:	4603      	mov	r3, r0
 810729c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81072a0:	e006      	b.n	81072b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81072a2:	2301      	movs	r3, #1
 81072a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81072a8:	e002      	b.n	81072b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81072aa:	bf00      	nop
 81072ac:	e000      	b.n	81072b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81072ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 81072b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81072b4:	2b00      	cmp	r3, #0
 81072b6:	d10b      	bne.n	81072d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81072b8:	4b8e      	ldr	r3, [pc, #568]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81072ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81072bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81072c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81072c8:	4a8a      	ldr	r2, [pc, #552]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81072ca:	430b      	orrs	r3, r1
 81072cc:	6593      	str	r3, [r2, #88]	@ 0x58
 81072ce:	e003      	b.n	81072d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81072d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81072d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81072e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81072e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81072e8:	2300      	movs	r3, #0
 81072ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81072ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81072f2:	460b      	mov	r3, r1
 81072f4:	4313      	orrs	r3, r2
 81072f6:	d03a      	beq.n	810736e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81072fe:	2b30      	cmp	r3, #48	@ 0x30
 8107300:	d01f      	beq.n	8107342 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8107302:	2b30      	cmp	r3, #48	@ 0x30
 8107304:	d819      	bhi.n	810733a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8107306:	2b20      	cmp	r3, #32
 8107308:	d00c      	beq.n	8107324 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810730a:	2b20      	cmp	r3, #32
 810730c:	d815      	bhi.n	810733a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810730e:	2b00      	cmp	r3, #0
 8107310:	d019      	beq.n	8107346 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8107312:	2b10      	cmp	r3, #16
 8107314:	d111      	bne.n	810733a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107316:	4b77      	ldr	r3, [pc, #476]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810731a:	4a76      	ldr	r2, [pc, #472]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810731c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107320:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8107322:	e011      	b.n	8107348 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107328:	3308      	adds	r3, #8
 810732a:	2102      	movs	r1, #2
 810732c:	4618      	mov	r0, r3
 810732e:	f001 fac5 	bl	81088bc <RCCEx_PLL2_Config>
 8107332:	4603      	mov	r3, r0
 8107334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8107338:	e006      	b.n	8107348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810733a:	2301      	movs	r3, #1
 810733c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107340:	e002      	b.n	8107348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8107342:	bf00      	nop
 8107344:	e000      	b.n	8107348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8107346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810734c:	2b00      	cmp	r3, #0
 810734e:	d10a      	bne.n	8107366 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8107350:	4b68      	ldr	r3, [pc, #416]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107354:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8107358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810735c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810735e:	4a65      	ldr	r2, [pc, #404]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107360:	430b      	orrs	r3, r1
 8107362:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8107364:	e003      	b.n	810736e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810736a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107376:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810737a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810737e:	2300      	movs	r3, #0
 8107380:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8107384:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8107388:	460b      	mov	r3, r1
 810738a:	4313      	orrs	r3, r2
 810738c:	d051      	beq.n	8107432 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810738e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8107394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107398:	d035      	beq.n	8107406 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810739a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810739e:	d82e      	bhi.n	81073fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81073a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81073a4:	d031      	beq.n	810740a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81073a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81073aa:	d828      	bhi.n	81073fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81073ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81073b0:	d01a      	beq.n	81073e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81073b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81073b6:	d822      	bhi.n	81073fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81073b8:	2b00      	cmp	r3, #0
 81073ba:	d003      	beq.n	81073c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81073bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81073c0:	d007      	beq.n	81073d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81073c2:	e01c      	b.n	81073fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81073c4:	4b4b      	ldr	r3, [pc, #300]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81073c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81073c8:	4a4a      	ldr	r2, [pc, #296]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81073ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81073ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81073d0:	e01c      	b.n	810740c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81073d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073d6:	3308      	adds	r3, #8
 81073d8:	2100      	movs	r1, #0
 81073da:	4618      	mov	r0, r3
 81073dc:	f001 fa6e 	bl	81088bc <RCCEx_PLL2_Config>
 81073e0:	4603      	mov	r3, r0
 81073e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81073e6:	e011      	b.n	810740c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81073e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073ec:	3328      	adds	r3, #40	@ 0x28
 81073ee:	2100      	movs	r1, #0
 81073f0:	4618      	mov	r0, r3
 81073f2:	f001 fb15 	bl	8108a20 <RCCEx_PLL3_Config>
 81073f6:	4603      	mov	r3, r0
 81073f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81073fc:	e006      	b.n	810740c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81073fe:	2301      	movs	r3, #1
 8107400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107404:	e002      	b.n	810740c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8107406:	bf00      	nop
 8107408:	e000      	b.n	810740c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810740a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810740c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107410:	2b00      	cmp	r3, #0
 8107412:	d10a      	bne.n	810742a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8107414:	4b37      	ldr	r3, [pc, #220]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107418:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810741c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8107422:	4a34      	ldr	r2, [pc, #208]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107424:	430b      	orrs	r3, r1
 8107426:	6513      	str	r3, [r2, #80]	@ 0x50
 8107428:	e003      	b.n	8107432 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810742a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810742e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8107432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107436:	e9d3 2300 	ldrd	r2, r3, [r3]
 810743a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810743e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8107442:	2300      	movs	r3, #0
 8107444:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8107448:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810744c:	460b      	mov	r3, r1
 810744e:	4313      	orrs	r3, r2
 8107450:	d056      	beq.n	8107500 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8107452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810745c:	d033      	beq.n	81074c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810745e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107462:	d82c      	bhi.n	81074be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107464:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107468:	d02f      	beq.n	81074ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810746a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810746e:	d826      	bhi.n	81074be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107470:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107474:	d02b      	beq.n	81074ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8107476:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810747a:	d820      	bhi.n	81074be <HAL_RCCEx_PeriphCLKConfig+0x592>
 810747c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107480:	d012      	beq.n	81074a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8107482:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107486:	d81a      	bhi.n	81074be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107488:	2b00      	cmp	r3, #0
 810748a:	d022      	beq.n	81074d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810748c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107490:	d115      	bne.n	81074be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107496:	3308      	adds	r3, #8
 8107498:	2101      	movs	r1, #1
 810749a:	4618      	mov	r0, r3
 810749c:	f001 fa0e 	bl	81088bc <RCCEx_PLL2_Config>
 81074a0:	4603      	mov	r3, r0
 81074a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81074a6:	e015      	b.n	81074d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074ac:	3328      	adds	r3, #40	@ 0x28
 81074ae:	2101      	movs	r1, #1
 81074b0:	4618      	mov	r0, r3
 81074b2:	f001 fab5 	bl	8108a20 <RCCEx_PLL3_Config>
 81074b6:	4603      	mov	r3, r0
 81074b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81074bc:	e00a      	b.n	81074d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81074be:	2301      	movs	r3, #1
 81074c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81074c4:	e006      	b.n	81074d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81074c6:	bf00      	nop
 81074c8:	e004      	b.n	81074d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81074ca:	bf00      	nop
 81074cc:	e002      	b.n	81074d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81074ce:	bf00      	nop
 81074d0:	e000      	b.n	81074d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81074d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81074d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074d8:	2b00      	cmp	r3, #0
 81074da:	d10d      	bne.n	81074f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81074dc:	4b05      	ldr	r3, [pc, #20]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81074de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81074e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81074ea:	4a02      	ldr	r2, [pc, #8]	@ (81074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81074ec:	430b      	orrs	r3, r1
 81074ee:	6513      	str	r3, [r2, #80]	@ 0x50
 81074f0:	e006      	b.n	8107500 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81074f2:	bf00      	nop
 81074f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81074f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8107500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107508:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810750c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8107510:	2300      	movs	r3, #0
 8107512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8107516:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810751a:	460b      	mov	r3, r1
 810751c:	4313      	orrs	r3, r2
 810751e:	d055      	beq.n	81075cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8107520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8107528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810752c:	d033      	beq.n	8107596 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810752e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107532:	d82c      	bhi.n	810758e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107538:	d02f      	beq.n	810759a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810753a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810753e:	d826      	bhi.n	810758e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107540:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107544:	d02b      	beq.n	810759e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8107546:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810754a:	d820      	bhi.n	810758e <HAL_RCCEx_PeriphCLKConfig+0x662>
 810754c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107550:	d012      	beq.n	8107578 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8107552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107556:	d81a      	bhi.n	810758e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107558:	2b00      	cmp	r3, #0
 810755a:	d022      	beq.n	81075a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810755c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107560:	d115      	bne.n	810758e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107566:	3308      	adds	r3, #8
 8107568:	2101      	movs	r1, #1
 810756a:	4618      	mov	r0, r3
 810756c:	f001 f9a6 	bl	81088bc <RCCEx_PLL2_Config>
 8107570:	4603      	mov	r3, r0
 8107572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8107576:	e015      	b.n	81075a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810757c:	3328      	adds	r3, #40	@ 0x28
 810757e:	2101      	movs	r1, #1
 8107580:	4618      	mov	r0, r3
 8107582:	f001 fa4d 	bl	8108a20 <RCCEx_PLL3_Config>
 8107586:	4603      	mov	r3, r0
 8107588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810758c:	e00a      	b.n	81075a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810758e:	2301      	movs	r3, #1
 8107590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107594:	e006      	b.n	81075a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8107596:	bf00      	nop
 8107598:	e004      	b.n	81075a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810759a:	bf00      	nop
 810759c:	e002      	b.n	81075a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810759e:	bf00      	nop
 81075a0:	e000      	b.n	81075a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81075a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81075a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075a8:	2b00      	cmp	r3, #0
 81075aa:	d10b      	bne.n	81075c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81075ac:	4ba4      	ldr	r3, [pc, #656]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81075ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81075b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81075bc:	4aa0      	ldr	r2, [pc, #640]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81075be:	430b      	orrs	r3, r1
 81075c0:	6593      	str	r3, [r2, #88]	@ 0x58
 81075c2:	e003      	b.n	81075cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81075c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81075d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81075d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81075dc:	2300      	movs	r3, #0
 81075de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81075e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81075e6:	460b      	mov	r3, r1
 81075e8:	4313      	orrs	r3, r2
 81075ea:	d037      	beq.n	810765c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81075ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81075f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81075f6:	d00e      	beq.n	8107616 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81075f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81075fc:	d816      	bhi.n	810762c <HAL_RCCEx_PeriphCLKConfig+0x700>
 81075fe:	2b00      	cmp	r3, #0
 8107600:	d018      	beq.n	8107634 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8107602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107606:	d111      	bne.n	810762c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107608:	4b8d      	ldr	r3, [pc, #564]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810760a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810760c:	4a8c      	ldr	r2, [pc, #560]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810760e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8107614:	e00f      	b.n	8107636 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810761a:	3308      	adds	r3, #8
 810761c:	2101      	movs	r1, #1
 810761e:	4618      	mov	r0, r3
 8107620:	f001 f94c 	bl	81088bc <RCCEx_PLL2_Config>
 8107624:	4603      	mov	r3, r0
 8107626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810762a:	e004      	b.n	8107636 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810762c:	2301      	movs	r3, #1
 810762e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107632:	e000      	b.n	8107636 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8107634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810763a:	2b00      	cmp	r3, #0
 810763c:	d10a      	bne.n	8107654 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810763e:	4b80      	ldr	r3, [pc, #512]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107642:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8107646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810764a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810764c:	4a7c      	ldr	r2, [pc, #496]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810764e:	430b      	orrs	r3, r1
 8107650:	6513      	str	r3, [r2, #80]	@ 0x50
 8107652:	e003      	b.n	810765c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107658:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810765c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107664:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8107668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810766c:	2300      	movs	r3, #0
 810766e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8107672:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8107676:	460b      	mov	r3, r1
 8107678:	4313      	orrs	r3, r2
 810767a:	d039      	beq.n	81076f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810767c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8107682:	2b03      	cmp	r3, #3
 8107684:	d81c      	bhi.n	81076c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8107686:	a201      	add	r2, pc, #4	@ (adr r2, 810768c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8107688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810768c:	081076c9 	.word	0x081076c9
 8107690:	0810769d 	.word	0x0810769d
 8107694:	081076ab 	.word	0x081076ab
 8107698:	081076c9 	.word	0x081076c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810769c:	4b68      	ldr	r3, [pc, #416]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81076a0:	4a67      	ldr	r2, [pc, #412]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81076a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81076a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81076a8:	e00f      	b.n	81076ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81076aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076ae:	3308      	adds	r3, #8
 81076b0:	2102      	movs	r1, #2
 81076b2:	4618      	mov	r0, r3
 81076b4:	f001 f902 	bl	81088bc <RCCEx_PLL2_Config>
 81076b8:	4603      	mov	r3, r0
 81076ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81076be:	e004      	b.n	81076ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81076c0:	2301      	movs	r3, #1
 81076c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81076c6:	e000      	b.n	81076ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81076c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81076ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81076ce:	2b00      	cmp	r3, #0
 81076d0:	d10a      	bne.n	81076e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81076d2:	4b5b      	ldr	r3, [pc, #364]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81076d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81076d6:	f023 0103 	bic.w	r1, r3, #3
 81076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81076e0:	4a57      	ldr	r2, [pc, #348]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81076e2:	430b      	orrs	r3, r1
 81076e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81076e6:	e003      	b.n	81076f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81076e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81076ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81076f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81076f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81076fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8107700:	2300      	movs	r3, #0
 8107702:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8107706:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810770a:	460b      	mov	r3, r1
 810770c:	4313      	orrs	r3, r2
 810770e:	f000 809f 	beq.w	8107850 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8107712:	4b4c      	ldr	r3, [pc, #304]	@ (8107844 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8107714:	681b      	ldr	r3, [r3, #0]
 8107716:	4a4b      	ldr	r2, [pc, #300]	@ (8107844 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8107718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810771c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810771e:	f7fe f99b 	bl	8105a58 <HAL_GetTick>
 8107722:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8107726:	e00b      	b.n	8107740 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8107728:	f7fe f996 	bl	8105a58 <HAL_GetTick>
 810772c:	4602      	mov	r2, r0
 810772e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8107732:	1ad3      	subs	r3, r2, r3
 8107734:	2b64      	cmp	r3, #100	@ 0x64
 8107736:	d903      	bls.n	8107740 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8107738:	2303      	movs	r3, #3
 810773a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810773e:	e005      	b.n	810774c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8107740:	4b40      	ldr	r3, [pc, #256]	@ (8107844 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8107742:	681b      	ldr	r3, [r3, #0]
 8107744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107748:	2b00      	cmp	r3, #0
 810774a:	d0ed      	beq.n	8107728 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 810774c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107750:	2b00      	cmp	r3, #0
 8107752:	d179      	bne.n	8107848 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8107754:	4b3a      	ldr	r3, [pc, #232]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107756:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8107758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810775c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107760:	4053      	eors	r3, r2
 8107762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8107766:	2b00      	cmp	r3, #0
 8107768:	d015      	beq.n	8107796 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810776a:	4b35      	ldr	r3, [pc, #212]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810776c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810776e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107772:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8107776:	4b32      	ldr	r3, [pc, #200]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810777a:	4a31      	ldr	r2, [pc, #196]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810777c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8107780:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8107782:	4b2f      	ldr	r3, [pc, #188]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107786:	4a2e      	ldr	r2, [pc, #184]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810778c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810778e:	4a2c      	ldr	r2, [pc, #176]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107790:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107794:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8107796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810779a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810779e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81077a2:	d118      	bne.n	81077d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81077a4:	f7fe f958 	bl	8105a58 <HAL_GetTick>
 81077a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81077ac:	e00d      	b.n	81077ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81077ae:	f7fe f953 	bl	8105a58 <HAL_GetTick>
 81077b2:	4602      	mov	r2, r0
 81077b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81077b8:	1ad2      	subs	r2, r2, r3
 81077ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 81077be:	429a      	cmp	r2, r3
 81077c0:	d903      	bls.n	81077ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81077c2:	2303      	movs	r3, #3
 81077c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 81077c8:	e005      	b.n	81077d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81077ca:	4b1d      	ldr	r3, [pc, #116]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81077cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81077ce:	f003 0302 	and.w	r3, r3, #2
 81077d2:	2b00      	cmp	r3, #0
 81077d4:	d0eb      	beq.n	81077ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81077d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81077da:	2b00      	cmp	r3, #0
 81077dc:	d12b      	bne.n	8107836 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81077e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81077ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81077ee:	d110      	bne.n	8107812 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81077f0:	4b13      	ldr	r3, [pc, #76]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81077f2:	691b      	ldr	r3, [r3, #16]
 81077f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81077f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107800:	091b      	lsrs	r3, r3, #4
 8107802:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8107806:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810780a:	4a0d      	ldr	r2, [pc, #52]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810780c:	430b      	orrs	r3, r1
 810780e:	6113      	str	r3, [r2, #16]
 8107810:	e005      	b.n	810781e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8107812:	4b0b      	ldr	r3, [pc, #44]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107814:	691b      	ldr	r3, [r3, #16]
 8107816:	4a0a      	ldr	r2, [pc, #40]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107818:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810781c:	6113      	str	r3, [r2, #16]
 810781e:	4b08      	ldr	r3, [pc, #32]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107820:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8107822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107826:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810782a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810782e:	4a04      	ldr	r2, [pc, #16]	@ (8107840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107830:	430b      	orrs	r3, r1
 8107832:	6713      	str	r3, [r2, #112]	@ 0x70
 8107834:	e00c      	b.n	8107850 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8107836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810783a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 810783e:	e007      	b.n	8107850 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8107840:	58024400 	.word	0x58024400
 8107844:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810784c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8107850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107858:	f002 0301 	and.w	r3, r2, #1
 810785c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8107860:	2300      	movs	r3, #0
 8107862:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8107866:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810786a:	460b      	mov	r3, r1
 810786c:	4313      	orrs	r3, r2
 810786e:	f000 8089 	beq.w	8107984 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8107872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107876:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8107878:	2b28      	cmp	r3, #40	@ 0x28
 810787a:	d86b      	bhi.n	8107954 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 810787c:	a201      	add	r2, pc, #4	@ (adr r2, 8107884 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107882:	bf00      	nop
 8107884:	0810795d 	.word	0x0810795d
 8107888:	08107955 	.word	0x08107955
 810788c:	08107955 	.word	0x08107955
 8107890:	08107955 	.word	0x08107955
 8107894:	08107955 	.word	0x08107955
 8107898:	08107955 	.word	0x08107955
 810789c:	08107955 	.word	0x08107955
 81078a0:	08107955 	.word	0x08107955
 81078a4:	08107929 	.word	0x08107929
 81078a8:	08107955 	.word	0x08107955
 81078ac:	08107955 	.word	0x08107955
 81078b0:	08107955 	.word	0x08107955
 81078b4:	08107955 	.word	0x08107955
 81078b8:	08107955 	.word	0x08107955
 81078bc:	08107955 	.word	0x08107955
 81078c0:	08107955 	.word	0x08107955
 81078c4:	0810793f 	.word	0x0810793f
 81078c8:	08107955 	.word	0x08107955
 81078cc:	08107955 	.word	0x08107955
 81078d0:	08107955 	.word	0x08107955
 81078d4:	08107955 	.word	0x08107955
 81078d8:	08107955 	.word	0x08107955
 81078dc:	08107955 	.word	0x08107955
 81078e0:	08107955 	.word	0x08107955
 81078e4:	0810795d 	.word	0x0810795d
 81078e8:	08107955 	.word	0x08107955
 81078ec:	08107955 	.word	0x08107955
 81078f0:	08107955 	.word	0x08107955
 81078f4:	08107955 	.word	0x08107955
 81078f8:	08107955 	.word	0x08107955
 81078fc:	08107955 	.word	0x08107955
 8107900:	08107955 	.word	0x08107955
 8107904:	0810795d 	.word	0x0810795d
 8107908:	08107955 	.word	0x08107955
 810790c:	08107955 	.word	0x08107955
 8107910:	08107955 	.word	0x08107955
 8107914:	08107955 	.word	0x08107955
 8107918:	08107955 	.word	0x08107955
 810791c:	08107955 	.word	0x08107955
 8107920:	08107955 	.word	0x08107955
 8107924:	0810795d 	.word	0x0810795d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810792c:	3308      	adds	r3, #8
 810792e:	2101      	movs	r1, #1
 8107930:	4618      	mov	r0, r3
 8107932:	f000 ffc3 	bl	81088bc <RCCEx_PLL2_Config>
 8107936:	4603      	mov	r3, r0
 8107938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810793c:	e00f      	b.n	810795e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107942:	3328      	adds	r3, #40	@ 0x28
 8107944:	2101      	movs	r1, #1
 8107946:	4618      	mov	r0, r3
 8107948:	f001 f86a 	bl	8108a20 <RCCEx_PLL3_Config>
 810794c:	4603      	mov	r3, r0
 810794e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8107952:	e004      	b.n	810795e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107954:	2301      	movs	r3, #1
 8107956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810795a:	e000      	b.n	810795e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 810795c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810795e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107962:	2b00      	cmp	r3, #0
 8107964:	d10a      	bne.n	810797c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8107966:	4bbf      	ldr	r3, [pc, #764]	@ (8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810796a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810796e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107972:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8107974:	4abb      	ldr	r2, [pc, #748]	@ (8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107976:	430b      	orrs	r3, r1
 8107978:	6553      	str	r3, [r2, #84]	@ 0x54
 810797a:	e003      	b.n	8107984 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810797c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8107984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107988:	e9d3 2300 	ldrd	r2, r3, [r3]
 810798c:	f002 0302 	and.w	r3, r2, #2
 8107990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8107994:	2300      	movs	r3, #0
 8107996:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810799a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810799e:	460b      	mov	r3, r1
 81079a0:	4313      	orrs	r3, r2
 81079a2:	d041      	beq.n	8107a28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81079a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81079aa:	2b05      	cmp	r3, #5
 81079ac:	d824      	bhi.n	81079f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81079ae:	a201      	add	r2, pc, #4	@ (adr r2, 81079b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81079b4:	08107a01 	.word	0x08107a01
 81079b8:	081079cd 	.word	0x081079cd
 81079bc:	081079e3 	.word	0x081079e3
 81079c0:	08107a01 	.word	0x08107a01
 81079c4:	08107a01 	.word	0x08107a01
 81079c8:	08107a01 	.word	0x08107a01
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81079cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079d0:	3308      	adds	r3, #8
 81079d2:	2101      	movs	r1, #1
 81079d4:	4618      	mov	r0, r3
 81079d6:	f000 ff71 	bl	81088bc <RCCEx_PLL2_Config>
 81079da:	4603      	mov	r3, r0
 81079dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81079e0:	e00f      	b.n	8107a02 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079e6:	3328      	adds	r3, #40	@ 0x28
 81079e8:	2101      	movs	r1, #1
 81079ea:	4618      	mov	r0, r3
 81079ec:	f001 f818 	bl	8108a20 <RCCEx_PLL3_Config>
 81079f0:	4603      	mov	r3, r0
 81079f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81079f6:	e004      	b.n	8107a02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81079f8:	2301      	movs	r3, #1
 81079fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81079fe:	e000      	b.n	8107a02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8107a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a06:	2b00      	cmp	r3, #0
 8107a08:	d10a      	bne.n	8107a20 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8107a0a:	4b96      	ldr	r3, [pc, #600]	@ (8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107a0e:	f023 0107 	bic.w	r1, r3, #7
 8107a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8107a18:	4a92      	ldr	r2, [pc, #584]	@ (8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107a1a:	430b      	orrs	r3, r1
 8107a1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8107a1e:	e003      	b.n	8107a28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8107a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a30:	f002 0304 	and.w	r3, r2, #4
 8107a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8107a38:	2300      	movs	r3, #0
 8107a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8107a3e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8107a42:	460b      	mov	r3, r1
 8107a44:	4313      	orrs	r3, r2
 8107a46:	d044      	beq.n	8107ad2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8107a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8107a50:	2b05      	cmp	r3, #5
 8107a52:	d825      	bhi.n	8107aa0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8107a54:	a201      	add	r2, pc, #4	@ (adr r2, 8107a5c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8107a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107a5a:	bf00      	nop
 8107a5c:	08107aa9 	.word	0x08107aa9
 8107a60:	08107a75 	.word	0x08107a75
 8107a64:	08107a8b 	.word	0x08107a8b
 8107a68:	08107aa9 	.word	0x08107aa9
 8107a6c:	08107aa9 	.word	0x08107aa9
 8107a70:	08107aa9 	.word	0x08107aa9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a78:	3308      	adds	r3, #8
 8107a7a:	2101      	movs	r1, #1
 8107a7c:	4618      	mov	r0, r3
 8107a7e:	f000 ff1d 	bl	81088bc <RCCEx_PLL2_Config>
 8107a82:	4603      	mov	r3, r0
 8107a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107a88:	e00f      	b.n	8107aaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a8e:	3328      	adds	r3, #40	@ 0x28
 8107a90:	2101      	movs	r1, #1
 8107a92:	4618      	mov	r0, r3
 8107a94:	f000 ffc4 	bl	8108a20 <RCCEx_PLL3_Config>
 8107a98:	4603      	mov	r3, r0
 8107a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107a9e:	e004      	b.n	8107aaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107aa0:	2301      	movs	r3, #1
 8107aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107aa6:	e000      	b.n	8107aaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8107aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107aae:	2b00      	cmp	r3, #0
 8107ab0:	d10b      	bne.n	8107aca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8107ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107ab6:	f023 0107 	bic.w	r1, r3, #7
 8107aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8107ac2:	4a68      	ldr	r2, [pc, #416]	@ (8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107ac4:	430b      	orrs	r3, r1
 8107ac6:	6593      	str	r3, [r2, #88]	@ 0x58
 8107ac8:	e003      	b.n	8107ad2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8107ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ada:	f002 0320 	and.w	r3, r2, #32
 8107ade:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8107ae2:	2300      	movs	r3, #0
 8107ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8107ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8107aec:	460b      	mov	r3, r1
 8107aee:	4313      	orrs	r3, r2
 8107af0:	d055      	beq.n	8107b9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8107af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107afe:	d033      	beq.n	8107b68 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8107b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107b04:	d82c      	bhi.n	8107b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107b0a:	d02f      	beq.n	8107b6c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8107b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107b10:	d826      	bhi.n	8107b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107b12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107b16:	d02b      	beq.n	8107b70 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8107b18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107b1c:	d820      	bhi.n	8107b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107b22:	d012      	beq.n	8107b4a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8107b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107b28:	d81a      	bhi.n	8107b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107b2a:	2b00      	cmp	r3, #0
 8107b2c:	d022      	beq.n	8107b74 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8107b2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107b32:	d115      	bne.n	8107b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b38:	3308      	adds	r3, #8
 8107b3a:	2100      	movs	r1, #0
 8107b3c:	4618      	mov	r0, r3
 8107b3e:	f000 febd 	bl	81088bc <RCCEx_PLL2_Config>
 8107b42:	4603      	mov	r3, r0
 8107b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8107b48:	e015      	b.n	8107b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b4e:	3328      	adds	r3, #40	@ 0x28
 8107b50:	2102      	movs	r1, #2
 8107b52:	4618      	mov	r0, r3
 8107b54:	f000 ff64 	bl	8108a20 <RCCEx_PLL3_Config>
 8107b58:	4603      	mov	r3, r0
 8107b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8107b5e:	e00a      	b.n	8107b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107b60:	2301      	movs	r3, #1
 8107b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107b66:	e006      	b.n	8107b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8107b68:	bf00      	nop
 8107b6a:	e004      	b.n	8107b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8107b6c:	bf00      	nop
 8107b6e:	e002      	b.n	8107b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8107b70:	bf00      	nop
 8107b72:	e000      	b.n	8107b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8107b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107b7a:	2b00      	cmp	r3, #0
 8107b7c:	d10b      	bne.n	8107b96 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8107b7e:	4b39      	ldr	r3, [pc, #228]	@ (8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107b82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8107b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107b8e:	4a35      	ldr	r2, [pc, #212]	@ (8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107b90:	430b      	orrs	r3, r1
 8107b92:	6553      	str	r3, [r2, #84]	@ 0x54
 8107b94:	e003      	b.n	8107b9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107b9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8107b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ba6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8107baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8107bae:	2300      	movs	r3, #0
 8107bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8107bb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8107bb8:	460b      	mov	r3, r1
 8107bba:	4313      	orrs	r3, r2
 8107bbc:	d058      	beq.n	8107c70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8107bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107bc6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107bca:	d033      	beq.n	8107c34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8107bcc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107bd0:	d82c      	bhi.n	8107c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107bd6:	d02f      	beq.n	8107c38 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8107bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107bdc:	d826      	bhi.n	8107c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107bde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107be2:	d02b      	beq.n	8107c3c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8107be4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107be8:	d820      	bhi.n	8107c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107bee:	d012      	beq.n	8107c16 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8107bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107bf4:	d81a      	bhi.n	8107c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107bf6:	2b00      	cmp	r3, #0
 8107bf8:	d022      	beq.n	8107c40 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8107bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8107bfe:	d115      	bne.n	8107c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c04:	3308      	adds	r3, #8
 8107c06:	2100      	movs	r1, #0
 8107c08:	4618      	mov	r0, r3
 8107c0a:	f000 fe57 	bl	81088bc <RCCEx_PLL2_Config>
 8107c0e:	4603      	mov	r3, r0
 8107c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8107c14:	e015      	b.n	8107c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c1a:	3328      	adds	r3, #40	@ 0x28
 8107c1c:	2102      	movs	r1, #2
 8107c1e:	4618      	mov	r0, r3
 8107c20:	f000 fefe 	bl	8108a20 <RCCEx_PLL3_Config>
 8107c24:	4603      	mov	r3, r0
 8107c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8107c2a:	e00a      	b.n	8107c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107c2c:	2301      	movs	r3, #1
 8107c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107c32:	e006      	b.n	8107c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107c34:	bf00      	nop
 8107c36:	e004      	b.n	8107c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107c38:	bf00      	nop
 8107c3a:	e002      	b.n	8107c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107c3c:	bf00      	nop
 8107c3e:	e000      	b.n	8107c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107c46:	2b00      	cmp	r3, #0
 8107c48:	d10e      	bne.n	8107c68 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8107c4a:	4b06      	ldr	r3, [pc, #24]	@ (8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107c4e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8107c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107c5a:	4a02      	ldr	r2, [pc, #8]	@ (8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107c5c:	430b      	orrs	r3, r1
 8107c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8107c60:	e006      	b.n	8107c70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8107c62:	bf00      	nop
 8107c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8107c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107c78:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8107c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8107c80:	2300      	movs	r3, #0
 8107c82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8107c86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8107c8a:	460b      	mov	r3, r1
 8107c8c:	4313      	orrs	r3, r2
 8107c8e:	d055      	beq.n	8107d3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8107c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8107c98:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107c9c:	d033      	beq.n	8107d06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8107c9e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107ca2:	d82c      	bhi.n	8107cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107ca8:	d02f      	beq.n	8107d0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8107caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107cae:	d826      	bhi.n	8107cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107cb0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107cb4:	d02b      	beq.n	8107d0e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8107cb6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107cba:	d820      	bhi.n	8107cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107cc0:	d012      	beq.n	8107ce8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8107cc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107cc6:	d81a      	bhi.n	8107cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107cc8:	2b00      	cmp	r3, #0
 8107cca:	d022      	beq.n	8107d12 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8107ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107cd0:	d115      	bne.n	8107cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107cd6:	3308      	adds	r3, #8
 8107cd8:	2100      	movs	r1, #0
 8107cda:	4618      	mov	r0, r3
 8107cdc:	f000 fdee 	bl	81088bc <RCCEx_PLL2_Config>
 8107ce0:	4603      	mov	r3, r0
 8107ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107ce6:	e015      	b.n	8107d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107cec:	3328      	adds	r3, #40	@ 0x28
 8107cee:	2102      	movs	r1, #2
 8107cf0:	4618      	mov	r0, r3
 8107cf2:	f000 fe95 	bl	8108a20 <RCCEx_PLL3_Config>
 8107cf6:	4603      	mov	r3, r0
 8107cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107cfc:	e00a      	b.n	8107d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107cfe:	2301      	movs	r3, #1
 8107d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107d04:	e006      	b.n	8107d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107d06:	bf00      	nop
 8107d08:	e004      	b.n	8107d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107d0a:	bf00      	nop
 8107d0c:	e002      	b.n	8107d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107d0e:	bf00      	nop
 8107d10:	e000      	b.n	8107d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107d18:	2b00      	cmp	r3, #0
 8107d1a:	d10b      	bne.n	8107d34 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8107d1c:	4ba1      	ldr	r3, [pc, #644]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107d20:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8107d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8107d2c:	4a9d      	ldr	r2, [pc, #628]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107d2e:	430b      	orrs	r3, r1
 8107d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8107d32:	e003      	b.n	8107d3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8107d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107d44:	f002 0308 	and.w	r3, r2, #8
 8107d48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8107d4c:	2300      	movs	r3, #0
 8107d4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8107d52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8107d56:	460b      	mov	r3, r1
 8107d58:	4313      	orrs	r3, r2
 8107d5a:	d01e      	beq.n	8107d9a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8107d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107d68:	d10c      	bne.n	8107d84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d6e:	3328      	adds	r3, #40	@ 0x28
 8107d70:	2102      	movs	r1, #2
 8107d72:	4618      	mov	r0, r3
 8107d74:	f000 fe54 	bl	8108a20 <RCCEx_PLL3_Config>
 8107d78:	4603      	mov	r3, r0
 8107d7a:	2b00      	cmp	r3, #0
 8107d7c:	d002      	beq.n	8107d84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8107d7e:	2301      	movs	r3, #1
 8107d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8107d84:	4b87      	ldr	r3, [pc, #540]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107d88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8107d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107d94:	4a83      	ldr	r2, [pc, #524]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107d96:	430b      	orrs	r3, r1
 8107d98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8107d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107da2:	f002 0310 	and.w	r3, r2, #16
 8107da6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8107daa:	2300      	movs	r3, #0
 8107dac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8107db0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8107db4:	460b      	mov	r3, r1
 8107db6:	4313      	orrs	r3, r2
 8107db8:	d01e      	beq.n	8107df8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8107dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107dc6:	d10c      	bne.n	8107de2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107dcc:	3328      	adds	r3, #40	@ 0x28
 8107dce:	2102      	movs	r1, #2
 8107dd0:	4618      	mov	r0, r3
 8107dd2:	f000 fe25 	bl	8108a20 <RCCEx_PLL3_Config>
 8107dd6:	4603      	mov	r3, r0
 8107dd8:	2b00      	cmp	r3, #0
 8107dda:	d002      	beq.n	8107de2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8107ddc:	2301      	movs	r3, #1
 8107dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8107de2:	4b70      	ldr	r3, [pc, #448]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107de6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8107dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107df2:	4a6c      	ldr	r2, [pc, #432]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107df4:	430b      	orrs	r3, r1
 8107df6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8107df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107e00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8107e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8107e08:	2300      	movs	r3, #0
 8107e0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8107e0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8107e12:	460b      	mov	r3, r1
 8107e14:	4313      	orrs	r3, r2
 8107e16:	d03e      	beq.n	8107e96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8107e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8107e20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107e24:	d022      	beq.n	8107e6c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8107e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107e2a:	d81b      	bhi.n	8107e64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8107e2c:	2b00      	cmp	r3, #0
 8107e2e:	d003      	beq.n	8107e38 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8107e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107e34:	d00b      	beq.n	8107e4e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8107e36:	e015      	b.n	8107e64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e3c:	3308      	adds	r3, #8
 8107e3e:	2100      	movs	r1, #0
 8107e40:	4618      	mov	r0, r3
 8107e42:	f000 fd3b 	bl	81088bc <RCCEx_PLL2_Config>
 8107e46:	4603      	mov	r3, r0
 8107e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107e4c:	e00f      	b.n	8107e6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e52:	3328      	adds	r3, #40	@ 0x28
 8107e54:	2102      	movs	r1, #2
 8107e56:	4618      	mov	r0, r3
 8107e58:	f000 fde2 	bl	8108a20 <RCCEx_PLL3_Config>
 8107e5c:	4603      	mov	r3, r0
 8107e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107e62:	e004      	b.n	8107e6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107e64:	2301      	movs	r3, #1
 8107e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107e6a:	e000      	b.n	8107e6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8107e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107e72:	2b00      	cmp	r3, #0
 8107e74:	d10b      	bne.n	8107e8e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8107e76:	4b4b      	ldr	r3, [pc, #300]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107e7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8107e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8107e86:	4a47      	ldr	r2, [pc, #284]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107e88:	430b      	orrs	r3, r1
 8107e8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8107e8c:	e003      	b.n	8107e96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8107e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107e9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8107ea2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8107ea4:	2300      	movs	r3, #0
 8107ea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8107ea8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8107eac:	460b      	mov	r3, r1
 8107eae:	4313      	orrs	r3, r2
 8107eb0:	d03b      	beq.n	8107f2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8107eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107eba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107ebe:	d01f      	beq.n	8107f00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8107ec0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107ec4:	d818      	bhi.n	8107ef8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8107ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107eca:	d003      	beq.n	8107ed4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8107ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107ed0:	d007      	beq.n	8107ee2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8107ed2:	e011      	b.n	8107ef8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107ed4:	4b33      	ldr	r3, [pc, #204]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107ed8:	4a32      	ldr	r2, [pc, #200]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8107ee0:	e00f      	b.n	8107f02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ee6:	3328      	adds	r3, #40	@ 0x28
 8107ee8:	2101      	movs	r1, #1
 8107eea:	4618      	mov	r0, r3
 8107eec:	f000 fd98 	bl	8108a20 <RCCEx_PLL3_Config>
 8107ef0:	4603      	mov	r3, r0
 8107ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8107ef6:	e004      	b.n	8107f02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107ef8:	2301      	movs	r3, #1
 8107efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107efe:	e000      	b.n	8107f02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8107f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107f06:	2b00      	cmp	r3, #0
 8107f08:	d10b      	bne.n	8107f22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8107f0a:	4b26      	ldr	r3, [pc, #152]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107f0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8107f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107f1a:	4a22      	ldr	r2, [pc, #136]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107f1c:	430b      	orrs	r3, r1
 8107f1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8107f20:	e003      	b.n	8107f2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8107f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107f32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8107f36:	673b      	str	r3, [r7, #112]	@ 0x70
 8107f38:	2300      	movs	r3, #0
 8107f3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8107f3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8107f40:	460b      	mov	r3, r1
 8107f42:	4313      	orrs	r3, r2
 8107f44:	d034      	beq.n	8107fb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8107f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107f4c:	2b00      	cmp	r3, #0
 8107f4e:	d003      	beq.n	8107f58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8107f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107f54:	d007      	beq.n	8107f66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8107f56:	e011      	b.n	8107f7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107f58:	4b12      	ldr	r3, [pc, #72]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107f5c:	4a11      	ldr	r2, [pc, #68]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8107f64:	e00e      	b.n	8107f84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f6a:	3308      	adds	r3, #8
 8107f6c:	2102      	movs	r1, #2
 8107f6e:	4618      	mov	r0, r3
 8107f70:	f000 fca4 	bl	81088bc <RCCEx_PLL2_Config>
 8107f74:	4603      	mov	r3, r0
 8107f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8107f7a:	e003      	b.n	8107f84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8107f7c:	2301      	movs	r3, #1
 8107f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107f88:	2b00      	cmp	r3, #0
 8107f8a:	d10d      	bne.n	8107fa8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8107f8c:	4b05      	ldr	r3, [pc, #20]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107f90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8107f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107f9a:	4a02      	ldr	r2, [pc, #8]	@ (8107fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107f9c:	430b      	orrs	r3, r1
 8107f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8107fa0:	e006      	b.n	8107fb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8107fa2:	bf00      	nop
 8107fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8107fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107fb8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8107fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8107fbe:	2300      	movs	r3, #0
 8107fc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8107fc2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8107fc6:	460b      	mov	r3, r1
 8107fc8:	4313      	orrs	r3, r2
 8107fca:	d00c      	beq.n	8107fe6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fd0:	3328      	adds	r3, #40	@ 0x28
 8107fd2:	2102      	movs	r1, #2
 8107fd4:	4618      	mov	r0, r3
 8107fd6:	f000 fd23 	bl	8108a20 <RCCEx_PLL3_Config>
 8107fda:	4603      	mov	r3, r0
 8107fdc:	2b00      	cmp	r3, #0
 8107fde:	d002      	beq.n	8107fe6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8107fe0:	2301      	movs	r3, #1
 8107fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8107fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107fee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8107ff2:	663b      	str	r3, [r7, #96]	@ 0x60
 8107ff4:	2300      	movs	r3, #0
 8107ff6:	667b      	str	r3, [r7, #100]	@ 0x64
 8107ff8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8107ffc:	460b      	mov	r3, r1
 8107ffe:	4313      	orrs	r3, r2
 8108000:	d038      	beq.n	8108074 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8108002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810800a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810800e:	d018      	beq.n	8108042 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8108010:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8108014:	d811      	bhi.n	810803a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8108016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810801a:	d014      	beq.n	8108046 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 810801c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108020:	d80b      	bhi.n	810803a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8108022:	2b00      	cmp	r3, #0
 8108024:	d011      	beq.n	810804a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8108026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810802a:	d106      	bne.n	810803a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810802c:	4bc3      	ldr	r3, [pc, #780]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810802e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108030:	4ac2      	ldr	r2, [pc, #776]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8108038:	e008      	b.n	810804c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810803a:	2301      	movs	r3, #1
 810803c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108040:	e004      	b.n	810804c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8108042:	bf00      	nop
 8108044:	e002      	b.n	810804c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8108046:	bf00      	nop
 8108048:	e000      	b.n	810804c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810804a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810804c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108050:	2b00      	cmp	r3, #0
 8108052:	d10b      	bne.n	810806c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8108054:	4bb9      	ldr	r3, [pc, #740]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108058:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810805c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108064:	4ab5      	ldr	r2, [pc, #724]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108066:	430b      	orrs	r3, r1
 8108068:	6553      	str	r3, [r2, #84]	@ 0x54
 810806a:	e003      	b.n	8108074 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810806c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108070:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8108074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108078:	e9d3 2300 	ldrd	r2, r3, [r3]
 810807c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8108080:	65bb      	str	r3, [r7, #88]	@ 0x58
 8108082:	2300      	movs	r3, #0
 8108084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8108086:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810808a:	460b      	mov	r3, r1
 810808c:	4313      	orrs	r3, r2
 810808e:	d009      	beq.n	81080a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8108090:	4baa      	ldr	r3, [pc, #680]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108094:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8108098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810809c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810809e:	4aa7      	ldr	r2, [pc, #668]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81080a0:	430b      	orrs	r3, r1
 81080a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81080a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81080ac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81080b0:	653b      	str	r3, [r7, #80]	@ 0x50
 81080b2:	2300      	movs	r3, #0
 81080b4:	657b      	str	r3, [r7, #84]	@ 0x54
 81080b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81080ba:	460b      	mov	r3, r1
 81080bc:	4313      	orrs	r3, r2
 81080be:	d00a      	beq.n	81080d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81080c0:	4b9e      	ldr	r3, [pc, #632]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81080c2:	691b      	ldr	r3, [r3, #16]
 81080c4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81080c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81080d0:	4a9a      	ldr	r2, [pc, #616]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81080d2:	430b      	orrs	r3, r1
 81080d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81080de:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81080e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 81080e4:	2300      	movs	r3, #0
 81080e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81080e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81080ec:	460b      	mov	r3, r1
 81080ee:	4313      	orrs	r3, r2
 81080f0:	d009      	beq.n	8108106 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81080f2:	4b92      	ldr	r3, [pc, #584]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81080f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81080f6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81080fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108100:	4a8e      	ldr	r2, [pc, #568]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108102:	430b      	orrs	r3, r1
 8108104:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8108106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810810e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8108112:	643b      	str	r3, [r7, #64]	@ 0x40
 8108114:	2300      	movs	r3, #0
 8108116:	647b      	str	r3, [r7, #68]	@ 0x44
 8108118:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810811c:	460b      	mov	r3, r1
 810811e:	4313      	orrs	r3, r2
 8108120:	d00e      	beq.n	8108140 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8108122:	4b86      	ldr	r3, [pc, #536]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108124:	691b      	ldr	r3, [r3, #16]
 8108126:	4a85      	ldr	r2, [pc, #532]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108128:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810812c:	6113      	str	r3, [r2, #16]
 810812e:	4b83      	ldr	r3, [pc, #524]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108130:	6919      	ldr	r1, [r3, #16]
 8108132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108136:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810813a:	4a80      	ldr	r2, [pc, #512]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810813c:	430b      	orrs	r3, r1
 810813e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8108140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108148:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810814c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810814e:	2300      	movs	r3, #0
 8108150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108152:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8108156:	460b      	mov	r3, r1
 8108158:	4313      	orrs	r3, r2
 810815a:	d009      	beq.n	8108170 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810815c:	4b77      	ldr	r3, [pc, #476]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810815e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108160:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8108164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810816a:	4a74      	ldr	r2, [pc, #464]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810816c:	430b      	orrs	r3, r1
 810816e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8108170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108178:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810817c:	633b      	str	r3, [r7, #48]	@ 0x30
 810817e:	2300      	movs	r3, #0
 8108180:	637b      	str	r3, [r7, #52]	@ 0x34
 8108182:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8108186:	460b      	mov	r3, r1
 8108188:	4313      	orrs	r3, r2
 810818a:	d00a      	beq.n	81081a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810818c:	4b6b      	ldr	r3, [pc, #428]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810818e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108190:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8108194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810819c:	4a67      	ldr	r2, [pc, #412]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810819e:	430b      	orrs	r3, r1
 81081a0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81081aa:	2100      	movs	r1, #0
 81081ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 81081ae:	f003 0301 	and.w	r3, r3, #1
 81081b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81081b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81081b8:	460b      	mov	r3, r1
 81081ba:	4313      	orrs	r3, r2
 81081bc:	d011      	beq.n	81081e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81081be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081c2:	3308      	adds	r3, #8
 81081c4:	2100      	movs	r1, #0
 81081c6:	4618      	mov	r0, r3
 81081c8:	f000 fb78 	bl	81088bc <RCCEx_PLL2_Config>
 81081cc:	4603      	mov	r3, r0
 81081ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81081d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81081d6:	2b00      	cmp	r3, #0
 81081d8:	d003      	beq.n	81081e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81081da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81081de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81081e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81081ea:	2100      	movs	r1, #0
 81081ec:	6239      	str	r1, [r7, #32]
 81081ee:	f003 0302 	and.w	r3, r3, #2
 81081f2:	627b      	str	r3, [r7, #36]	@ 0x24
 81081f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81081f8:	460b      	mov	r3, r1
 81081fa:	4313      	orrs	r3, r2
 81081fc:	d011      	beq.n	8108222 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81081fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108202:	3308      	adds	r3, #8
 8108204:	2101      	movs	r1, #1
 8108206:	4618      	mov	r0, r3
 8108208:	f000 fb58 	bl	81088bc <RCCEx_PLL2_Config>
 810820c:	4603      	mov	r3, r0
 810820e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8108212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108216:	2b00      	cmp	r3, #0
 8108218:	d003      	beq.n	8108222 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810821a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810821e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8108222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108226:	e9d3 2300 	ldrd	r2, r3, [r3]
 810822a:	2100      	movs	r1, #0
 810822c:	61b9      	str	r1, [r7, #24]
 810822e:	f003 0304 	and.w	r3, r3, #4
 8108232:	61fb      	str	r3, [r7, #28]
 8108234:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8108238:	460b      	mov	r3, r1
 810823a:	4313      	orrs	r3, r2
 810823c:	d011      	beq.n	8108262 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108242:	3308      	adds	r3, #8
 8108244:	2102      	movs	r1, #2
 8108246:	4618      	mov	r0, r3
 8108248:	f000 fb38 	bl	81088bc <RCCEx_PLL2_Config>
 810824c:	4603      	mov	r3, r0
 810824e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8108252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108256:	2b00      	cmp	r3, #0
 8108258:	d003      	beq.n	8108262 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810825a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810825e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8108262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108266:	e9d3 2300 	ldrd	r2, r3, [r3]
 810826a:	2100      	movs	r1, #0
 810826c:	6139      	str	r1, [r7, #16]
 810826e:	f003 0308 	and.w	r3, r3, #8
 8108272:	617b      	str	r3, [r7, #20]
 8108274:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8108278:	460b      	mov	r3, r1
 810827a:	4313      	orrs	r3, r2
 810827c:	d011      	beq.n	81082a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810827e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108282:	3328      	adds	r3, #40	@ 0x28
 8108284:	2100      	movs	r1, #0
 8108286:	4618      	mov	r0, r3
 8108288:	f000 fbca 	bl	8108a20 <RCCEx_PLL3_Config>
 810828c:	4603      	mov	r3, r0
 810828e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8108292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108296:	2b00      	cmp	r3, #0
 8108298:	d003      	beq.n	81082a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810829a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810829e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81082a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81082aa:	2100      	movs	r1, #0
 81082ac:	60b9      	str	r1, [r7, #8]
 81082ae:	f003 0310 	and.w	r3, r3, #16
 81082b2:	60fb      	str	r3, [r7, #12]
 81082b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81082b8:	460b      	mov	r3, r1
 81082ba:	4313      	orrs	r3, r2
 81082bc:	d011      	beq.n	81082e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81082be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082c2:	3328      	adds	r3, #40	@ 0x28
 81082c4:	2101      	movs	r1, #1
 81082c6:	4618      	mov	r0, r3
 81082c8:	f000 fbaa 	bl	8108a20 <RCCEx_PLL3_Config>
 81082cc:	4603      	mov	r3, r0
 81082ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81082d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81082d6:	2b00      	cmp	r3, #0
 81082d8:	d003      	beq.n	81082e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81082da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81082de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81082e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81082ea:	2100      	movs	r1, #0
 81082ec:	6039      	str	r1, [r7, #0]
 81082ee:	f003 0320 	and.w	r3, r3, #32
 81082f2:	607b      	str	r3, [r7, #4]
 81082f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 81082f8:	460b      	mov	r3, r1
 81082fa:	4313      	orrs	r3, r2
 81082fc:	d011      	beq.n	8108322 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81082fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108302:	3328      	adds	r3, #40	@ 0x28
 8108304:	2102      	movs	r1, #2
 8108306:	4618      	mov	r0, r3
 8108308:	f000 fb8a 	bl	8108a20 <RCCEx_PLL3_Config>
 810830c:	4603      	mov	r3, r0
 810830e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8108312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108316:	2b00      	cmp	r3, #0
 8108318:	d003      	beq.n	8108322 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810831a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810831e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8108322:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8108326:	2b00      	cmp	r3, #0
 8108328:	d101      	bne.n	810832e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810832a:	2300      	movs	r3, #0
 810832c:	e000      	b.n	8108330 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 810832e:	2301      	movs	r3, #1
}
 8108330:	4618      	mov	r0, r3
 8108332:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8108336:	46bd      	mov	sp, r7
 8108338:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810833c:	58024400 	.word	0x58024400

08108340 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8108340:	b580      	push	{r7, lr}
 8108342:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8108344:	f7fe fd94 	bl	8106e70 <HAL_RCC_GetHCLKFreq>
 8108348:	4602      	mov	r2, r0
 810834a:	4b06      	ldr	r3, [pc, #24]	@ (8108364 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810834c:	6a1b      	ldr	r3, [r3, #32]
 810834e:	091b      	lsrs	r3, r3, #4
 8108350:	f003 0307 	and.w	r3, r3, #7
 8108354:	4904      	ldr	r1, [pc, #16]	@ (8108368 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8108356:	5ccb      	ldrb	r3, [r1, r3]
 8108358:	f003 031f 	and.w	r3, r3, #31
 810835c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8108360:	4618      	mov	r0, r3
 8108362:	bd80      	pop	{r7, pc}
 8108364:	58024400 	.word	0x58024400
 8108368:	08111630 	.word	0x08111630

0810836c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810836c:	b480      	push	{r7}
 810836e:	b089      	sub	sp, #36	@ 0x24
 8108370:	af00      	add	r7, sp, #0
 8108372:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108374:	4ba1      	ldr	r3, [pc, #644]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108378:	f003 0303 	and.w	r3, r3, #3
 810837c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810837e:	4b9f      	ldr	r3, [pc, #636]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108382:	0b1b      	lsrs	r3, r3, #12
 8108384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108388:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810838a:	4b9c      	ldr	r3, [pc, #624]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810838c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810838e:	091b      	lsrs	r3, r3, #4
 8108390:	f003 0301 	and.w	r3, r3, #1
 8108394:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8108396:	4b99      	ldr	r3, [pc, #612]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810839a:	08db      	lsrs	r3, r3, #3
 810839c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81083a0:	693a      	ldr	r2, [r7, #16]
 81083a2:	fb02 f303 	mul.w	r3, r2, r3
 81083a6:	ee07 3a90 	vmov	s15, r3
 81083aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81083ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81083b2:	697b      	ldr	r3, [r7, #20]
 81083b4:	2b00      	cmp	r3, #0
 81083b6:	f000 8111 	beq.w	81085dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81083ba:	69bb      	ldr	r3, [r7, #24]
 81083bc:	2b02      	cmp	r3, #2
 81083be:	f000 8083 	beq.w	81084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81083c2:	69bb      	ldr	r3, [r7, #24]
 81083c4:	2b02      	cmp	r3, #2
 81083c6:	f200 80a1 	bhi.w	810850c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81083ca:	69bb      	ldr	r3, [r7, #24]
 81083cc:	2b00      	cmp	r3, #0
 81083ce:	d003      	beq.n	81083d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81083d0:	69bb      	ldr	r3, [r7, #24]
 81083d2:	2b01      	cmp	r3, #1
 81083d4:	d056      	beq.n	8108484 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81083d6:	e099      	b.n	810850c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81083d8:	4b88      	ldr	r3, [pc, #544]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81083da:	681b      	ldr	r3, [r3, #0]
 81083dc:	f003 0320 	and.w	r3, r3, #32
 81083e0:	2b00      	cmp	r3, #0
 81083e2:	d02d      	beq.n	8108440 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81083e4:	4b85      	ldr	r3, [pc, #532]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81083e6:	681b      	ldr	r3, [r3, #0]
 81083e8:	08db      	lsrs	r3, r3, #3
 81083ea:	f003 0303 	and.w	r3, r3, #3
 81083ee:	4a84      	ldr	r2, [pc, #528]	@ (8108600 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81083f0:	fa22 f303 	lsr.w	r3, r2, r3
 81083f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81083f6:	68bb      	ldr	r3, [r7, #8]
 81083f8:	ee07 3a90 	vmov	s15, r3
 81083fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108400:	697b      	ldr	r3, [r7, #20]
 8108402:	ee07 3a90 	vmov	s15, r3
 8108406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810840a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810840e:	4b7b      	ldr	r3, [pc, #492]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108416:	ee07 3a90 	vmov	s15, r3
 810841a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810841e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108422:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8108604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810842a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810842e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108436:	ee67 7a27 	vmul.f32	s15, s14, s15
 810843a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810843e:	e087      	b.n	8108550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108440:	697b      	ldr	r3, [r7, #20]
 8108442:	ee07 3a90 	vmov	s15, r3
 8108446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810844a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108608 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810844e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108452:	4b6a      	ldr	r3, [pc, #424]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810845a:	ee07 3a90 	vmov	s15, r3
 810845e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108462:	ed97 6a03 	vldr	s12, [r7, #12]
 8108466:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8108604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810846a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810846e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810847a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810847e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108482:	e065      	b.n	8108550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108484:	697b      	ldr	r3, [r7, #20]
 8108486:	ee07 3a90 	vmov	s15, r3
 810848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810848e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810860c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8108492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108496:	4b59      	ldr	r3, [pc, #356]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810849a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810849e:	ee07 3a90 	vmov	s15, r3
 81084a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81084a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81084aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8108604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81084ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81084b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81084b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81084ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81084be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81084c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81084c6:	e043      	b.n	8108550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81084c8:	697b      	ldr	r3, [r7, #20]
 81084ca:	ee07 3a90 	vmov	s15, r3
 81084ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81084d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81084da:	4b48      	ldr	r3, [pc, #288]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81084dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81084de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81084e2:	ee07 3a90 	vmov	s15, r3
 81084e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81084ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81084ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8108604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81084f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81084f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81084fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81084fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810850a:	e021      	b.n	8108550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810850c:	697b      	ldr	r3, [r7, #20]
 810850e:	ee07 3a90 	vmov	s15, r3
 8108512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108516:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810860c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810851a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810851e:	4b37      	ldr	r3, [pc, #220]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108526:	ee07 3a90 	vmov	s15, r3
 810852a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810852e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108532:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8108604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810853a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810853e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108546:	ee67 7a27 	vmul.f32	s15, s14, s15
 810854a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810854e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8108550:	4b2a      	ldr	r3, [pc, #168]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108554:	0a5b      	lsrs	r3, r3, #9
 8108556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810855a:	ee07 3a90 	vmov	s15, r3
 810855e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108562:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108566:	ee37 7a87 	vadd.f32	s14, s15, s14
 810856a:	edd7 6a07 	vldr	s13, [r7, #28]
 810856e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108576:	ee17 2a90 	vmov	r2, s15
 810857a:	687b      	ldr	r3, [r7, #4]
 810857c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810857e:	4b1f      	ldr	r3, [pc, #124]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108582:	0c1b      	lsrs	r3, r3, #16
 8108584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108588:	ee07 3a90 	vmov	s15, r3
 810858c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108594:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108598:	edd7 6a07 	vldr	s13, [r7, #28]
 810859c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81085a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81085a4:	ee17 2a90 	vmov	r2, s15
 81085a8:	687b      	ldr	r3, [r7, #4]
 81085aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81085ac:	4b13      	ldr	r3, [pc, #76]	@ (81085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81085ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81085b0:	0e1b      	lsrs	r3, r3, #24
 81085b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81085b6:	ee07 3a90 	vmov	s15, r3
 81085ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81085be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81085c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81085c6:	edd7 6a07 	vldr	s13, [r7, #28]
 81085ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81085ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81085d2:	ee17 2a90 	vmov	r2, s15
 81085d6:	687b      	ldr	r3, [r7, #4]
 81085d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81085da:	e008      	b.n	81085ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81085dc:	687b      	ldr	r3, [r7, #4]
 81085de:	2200      	movs	r2, #0
 81085e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81085e2:	687b      	ldr	r3, [r7, #4]
 81085e4:	2200      	movs	r2, #0
 81085e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81085e8:	687b      	ldr	r3, [r7, #4]
 81085ea:	2200      	movs	r2, #0
 81085ec:	609a      	str	r2, [r3, #8]
}
 81085ee:	bf00      	nop
 81085f0:	3724      	adds	r7, #36	@ 0x24
 81085f2:	46bd      	mov	sp, r7
 81085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085f8:	4770      	bx	lr
 81085fa:	bf00      	nop
 81085fc:	58024400 	.word	0x58024400
 8108600:	03d09000 	.word	0x03d09000
 8108604:	46000000 	.word	0x46000000
 8108608:	4c742400 	.word	0x4c742400
 810860c:	4a742400 	.word	0x4a742400
 8108610:	4bbebc20 	.word	0x4bbebc20

08108614 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8108614:	b480      	push	{r7}
 8108616:	b089      	sub	sp, #36	@ 0x24
 8108618:	af00      	add	r7, sp, #0
 810861a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810861c:	4ba1      	ldr	r3, [pc, #644]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810861e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108620:	f003 0303 	and.w	r3, r3, #3
 8108624:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8108626:	4b9f      	ldr	r3, [pc, #636]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810862a:	0d1b      	lsrs	r3, r3, #20
 810862c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108630:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8108632:	4b9c      	ldr	r3, [pc, #624]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108636:	0a1b      	lsrs	r3, r3, #8
 8108638:	f003 0301 	and.w	r3, r3, #1
 810863c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810863e:	4b99      	ldr	r3, [pc, #612]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108642:	08db      	lsrs	r3, r3, #3
 8108644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108648:	693a      	ldr	r2, [r7, #16]
 810864a:	fb02 f303 	mul.w	r3, r2, r3
 810864e:	ee07 3a90 	vmov	s15, r3
 8108652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108656:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810865a:	697b      	ldr	r3, [r7, #20]
 810865c:	2b00      	cmp	r3, #0
 810865e:	f000 8111 	beq.w	8108884 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8108662:	69bb      	ldr	r3, [r7, #24]
 8108664:	2b02      	cmp	r3, #2
 8108666:	f000 8083 	beq.w	8108770 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810866a:	69bb      	ldr	r3, [r7, #24]
 810866c:	2b02      	cmp	r3, #2
 810866e:	f200 80a1 	bhi.w	81087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8108672:	69bb      	ldr	r3, [r7, #24]
 8108674:	2b00      	cmp	r3, #0
 8108676:	d003      	beq.n	8108680 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8108678:	69bb      	ldr	r3, [r7, #24]
 810867a:	2b01      	cmp	r3, #1
 810867c:	d056      	beq.n	810872c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810867e:	e099      	b.n	81087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108680:	4b88      	ldr	r3, [pc, #544]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108682:	681b      	ldr	r3, [r3, #0]
 8108684:	f003 0320 	and.w	r3, r3, #32
 8108688:	2b00      	cmp	r3, #0
 810868a:	d02d      	beq.n	81086e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810868c:	4b85      	ldr	r3, [pc, #532]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810868e:	681b      	ldr	r3, [r3, #0]
 8108690:	08db      	lsrs	r3, r3, #3
 8108692:	f003 0303 	and.w	r3, r3, #3
 8108696:	4a84      	ldr	r2, [pc, #528]	@ (81088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8108698:	fa22 f303 	lsr.w	r3, r2, r3
 810869c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810869e:	68bb      	ldr	r3, [r7, #8]
 81086a0:	ee07 3a90 	vmov	s15, r3
 81086a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81086a8:	697b      	ldr	r3, [r7, #20]
 81086aa:	ee07 3a90 	vmov	s15, r3
 81086ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81086b6:	4b7b      	ldr	r3, [pc, #492]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81086b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81086ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81086be:	ee07 3a90 	vmov	s15, r3
 81086c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81086c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81086ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81088ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81086ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81086d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81086d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81086da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81086de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81086e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81086e6:	e087      	b.n	81087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81086e8:	697b      	ldr	r3, [r7, #20]
 81086ea:	ee07 3a90 	vmov	s15, r3
 81086ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81086f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81086fa:	4b6a      	ldr	r3, [pc, #424]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81086fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108702:	ee07 3a90 	vmov	s15, r3
 8108706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810870a:	ed97 6a03 	vldr	s12, [r7, #12]
 810870e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81088ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810871a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810871e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810872a:	e065      	b.n	81087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810872c:	697b      	ldr	r3, [r7, #20]
 810872e:	ee07 3a90 	vmov	s15, r3
 8108732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108736:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810873e:	4b59      	ldr	r3, [pc, #356]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108746:	ee07 3a90 	vmov	s15, r3
 810874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810874e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108752:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81088ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810875e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108766:	ee67 7a27 	vmul.f32	s15, s14, s15
 810876a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810876e:	e043      	b.n	81087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108770:	697b      	ldr	r3, [r7, #20]
 8108772:	ee07 3a90 	vmov	s15, r3
 8108776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810877a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81088b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108782:	4b48      	ldr	r3, [pc, #288]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810878a:	ee07 3a90 	vmov	s15, r3
 810878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108792:	ed97 6a03 	vldr	s12, [r7, #12]
 8108796:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81088ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81087a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81087ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81087b2:	e021      	b.n	81087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81087b4:	697b      	ldr	r3, [r7, #20]
 81087b6:	ee07 3a90 	vmov	s15, r3
 81087ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81087c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81087c6:	4b37      	ldr	r3, [pc, #220]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81087c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81087ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81087ce:	ee07 3a90 	vmov	s15, r3
 81087d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81087da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81088ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81087de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81087e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81087e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81087ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81087ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81087f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81087f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81087f8:	4b2a      	ldr	r3, [pc, #168]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81087fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81087fc:	0a5b      	lsrs	r3, r3, #9
 81087fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108802:	ee07 3a90 	vmov	s15, r3
 8108806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810880a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810880e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108812:	edd7 6a07 	vldr	s13, [r7, #28]
 8108816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810881a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810881e:	ee17 2a90 	vmov	r2, s15
 8108822:	687b      	ldr	r3, [r7, #4]
 8108824:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8108826:	4b1f      	ldr	r3, [pc, #124]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810882a:	0c1b      	lsrs	r3, r3, #16
 810882c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108830:	ee07 3a90 	vmov	s15, r3
 8108834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108838:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810883c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108840:	edd7 6a07 	vldr	s13, [r7, #28]
 8108844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810884c:	ee17 2a90 	vmov	r2, s15
 8108850:	687b      	ldr	r3, [r7, #4]
 8108852:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8108854:	4b13      	ldr	r3, [pc, #76]	@ (81088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108858:	0e1b      	lsrs	r3, r3, #24
 810885a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810885e:	ee07 3a90 	vmov	s15, r3
 8108862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810886a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810886e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810887a:	ee17 2a90 	vmov	r2, s15
 810887e:	687b      	ldr	r3, [r7, #4]
 8108880:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8108882:	e008      	b.n	8108896 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8108884:	687b      	ldr	r3, [r7, #4]
 8108886:	2200      	movs	r2, #0
 8108888:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810888a:	687b      	ldr	r3, [r7, #4]
 810888c:	2200      	movs	r2, #0
 810888e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8108890:	687b      	ldr	r3, [r7, #4]
 8108892:	2200      	movs	r2, #0
 8108894:	609a      	str	r2, [r3, #8]
}
 8108896:	bf00      	nop
 8108898:	3724      	adds	r7, #36	@ 0x24
 810889a:	46bd      	mov	sp, r7
 810889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088a0:	4770      	bx	lr
 81088a2:	bf00      	nop
 81088a4:	58024400 	.word	0x58024400
 81088a8:	03d09000 	.word	0x03d09000
 81088ac:	46000000 	.word	0x46000000
 81088b0:	4c742400 	.word	0x4c742400
 81088b4:	4a742400 	.word	0x4a742400
 81088b8:	4bbebc20 	.word	0x4bbebc20

081088bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81088bc:	b580      	push	{r7, lr}
 81088be:	b084      	sub	sp, #16
 81088c0:	af00      	add	r7, sp, #0
 81088c2:	6078      	str	r0, [r7, #4]
 81088c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81088c6:	2300      	movs	r3, #0
 81088c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81088ca:	4b54      	ldr	r3, [pc, #336]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81088cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81088ce:	f003 0303 	and.w	r3, r3, #3
 81088d2:	2b03      	cmp	r3, #3
 81088d4:	d101      	bne.n	81088da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81088d6:	2301      	movs	r3, #1
 81088d8:	e09b      	b.n	8108a12 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81088da:	4b50      	ldr	r3, [pc, #320]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81088dc:	681b      	ldr	r3, [r3, #0]
 81088de:	4a4f      	ldr	r2, [pc, #316]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81088e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81088e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81088e6:	f7fd f8b7 	bl	8105a58 <HAL_GetTick>
 81088ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81088ec:	e008      	b.n	8108900 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81088ee:	f7fd f8b3 	bl	8105a58 <HAL_GetTick>
 81088f2:	4602      	mov	r2, r0
 81088f4:	68bb      	ldr	r3, [r7, #8]
 81088f6:	1ad3      	subs	r3, r2, r3
 81088f8:	2b02      	cmp	r3, #2
 81088fa:	d901      	bls.n	8108900 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81088fc:	2303      	movs	r3, #3
 81088fe:	e088      	b.n	8108a12 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108900:	4b46      	ldr	r3, [pc, #280]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 8108902:	681b      	ldr	r3, [r3, #0]
 8108904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108908:	2b00      	cmp	r3, #0
 810890a:	d1f0      	bne.n	81088ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810890c:	4b43      	ldr	r3, [pc, #268]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 810890e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108910:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108914:	687b      	ldr	r3, [r7, #4]
 8108916:	681b      	ldr	r3, [r3, #0]
 8108918:	031b      	lsls	r3, r3, #12
 810891a:	4940      	ldr	r1, [pc, #256]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 810891c:	4313      	orrs	r3, r2
 810891e:	628b      	str	r3, [r1, #40]	@ 0x28
 8108920:	687b      	ldr	r3, [r7, #4]
 8108922:	685b      	ldr	r3, [r3, #4]
 8108924:	3b01      	subs	r3, #1
 8108926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810892a:	687b      	ldr	r3, [r7, #4]
 810892c:	689b      	ldr	r3, [r3, #8]
 810892e:	3b01      	subs	r3, #1
 8108930:	025b      	lsls	r3, r3, #9
 8108932:	b29b      	uxth	r3, r3
 8108934:	431a      	orrs	r2, r3
 8108936:	687b      	ldr	r3, [r7, #4]
 8108938:	68db      	ldr	r3, [r3, #12]
 810893a:	3b01      	subs	r3, #1
 810893c:	041b      	lsls	r3, r3, #16
 810893e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108942:	431a      	orrs	r2, r3
 8108944:	687b      	ldr	r3, [r7, #4]
 8108946:	691b      	ldr	r3, [r3, #16]
 8108948:	3b01      	subs	r3, #1
 810894a:	061b      	lsls	r3, r3, #24
 810894c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108950:	4932      	ldr	r1, [pc, #200]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 8108952:	4313      	orrs	r3, r2
 8108954:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108956:	4b31      	ldr	r3, [pc, #196]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 8108958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810895a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810895e:	687b      	ldr	r3, [r7, #4]
 8108960:	695b      	ldr	r3, [r3, #20]
 8108962:	492e      	ldr	r1, [pc, #184]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 8108964:	4313      	orrs	r3, r2
 8108966:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108968:	4b2c      	ldr	r3, [pc, #176]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 810896a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810896c:	f023 0220 	bic.w	r2, r3, #32
 8108970:	687b      	ldr	r3, [r7, #4]
 8108972:	699b      	ldr	r3, [r3, #24]
 8108974:	4929      	ldr	r1, [pc, #164]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 8108976:	4313      	orrs	r3, r2
 8108978:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810897a:	4b28      	ldr	r3, [pc, #160]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 810897c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810897e:	4a27      	ldr	r2, [pc, #156]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 8108980:	f023 0310 	bic.w	r3, r3, #16
 8108984:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108986:	4b25      	ldr	r3, [pc, #148]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 8108988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810898a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810898e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108992:	687a      	ldr	r2, [r7, #4]
 8108994:	69d2      	ldr	r2, [r2, #28]
 8108996:	00d2      	lsls	r2, r2, #3
 8108998:	4920      	ldr	r1, [pc, #128]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 810899a:	4313      	orrs	r3, r2
 810899c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810899e:	4b1f      	ldr	r3, [pc, #124]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81089a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81089a2:	4a1e      	ldr	r2, [pc, #120]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81089a4:	f043 0310 	orr.w	r3, r3, #16
 81089a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81089aa:	683b      	ldr	r3, [r7, #0]
 81089ac:	2b00      	cmp	r3, #0
 81089ae:	d106      	bne.n	81089be <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81089b0:	4b1a      	ldr	r3, [pc, #104]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81089b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81089b4:	4a19      	ldr	r2, [pc, #100]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81089b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81089ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81089bc:	e00f      	b.n	81089de <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81089be:	683b      	ldr	r3, [r7, #0]
 81089c0:	2b01      	cmp	r3, #1
 81089c2:	d106      	bne.n	81089d2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81089c4:	4b15      	ldr	r3, [pc, #84]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81089c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81089c8:	4a14      	ldr	r2, [pc, #80]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81089ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81089ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81089d0:	e005      	b.n	81089de <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81089d2:	4b12      	ldr	r3, [pc, #72]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81089d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81089d6:	4a11      	ldr	r2, [pc, #68]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81089d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81089dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81089de:	4b0f      	ldr	r3, [pc, #60]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81089e0:	681b      	ldr	r3, [r3, #0]
 81089e2:	4a0e      	ldr	r2, [pc, #56]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 81089e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81089e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81089ea:	f7fd f835 	bl	8105a58 <HAL_GetTick>
 81089ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81089f0:	e008      	b.n	8108a04 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81089f2:	f7fd f831 	bl	8105a58 <HAL_GetTick>
 81089f6:	4602      	mov	r2, r0
 81089f8:	68bb      	ldr	r3, [r7, #8]
 81089fa:	1ad3      	subs	r3, r2, r3
 81089fc:	2b02      	cmp	r3, #2
 81089fe:	d901      	bls.n	8108a04 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108a00:	2303      	movs	r3, #3
 8108a02:	e006      	b.n	8108a12 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108a04:	4b05      	ldr	r3, [pc, #20]	@ (8108a1c <RCCEx_PLL2_Config+0x160>)
 8108a06:	681b      	ldr	r3, [r3, #0]
 8108a08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108a0c:	2b00      	cmp	r3, #0
 8108a0e:	d0f0      	beq.n	81089f2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8108a12:	4618      	mov	r0, r3
 8108a14:	3710      	adds	r7, #16
 8108a16:	46bd      	mov	sp, r7
 8108a18:	bd80      	pop	{r7, pc}
 8108a1a:	bf00      	nop
 8108a1c:	58024400 	.word	0x58024400

08108a20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108a20:	b580      	push	{r7, lr}
 8108a22:	b084      	sub	sp, #16
 8108a24:	af00      	add	r7, sp, #0
 8108a26:	6078      	str	r0, [r7, #4]
 8108a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108a2a:	2300      	movs	r3, #0
 8108a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108a2e:	4b54      	ldr	r3, [pc, #336]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108a32:	f003 0303 	and.w	r3, r3, #3
 8108a36:	2b03      	cmp	r3, #3
 8108a38:	d101      	bne.n	8108a3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108a3a:	2301      	movs	r3, #1
 8108a3c:	e09b      	b.n	8108b76 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8108a3e:	4b50      	ldr	r3, [pc, #320]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108a40:	681b      	ldr	r3, [r3, #0]
 8108a42:	4a4f      	ldr	r2, [pc, #316]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108a4a:	f7fd f805 	bl	8105a58 <HAL_GetTick>
 8108a4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108a50:	e008      	b.n	8108a64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108a52:	f7fd f801 	bl	8105a58 <HAL_GetTick>
 8108a56:	4602      	mov	r2, r0
 8108a58:	68bb      	ldr	r3, [r7, #8]
 8108a5a:	1ad3      	subs	r3, r2, r3
 8108a5c:	2b02      	cmp	r3, #2
 8108a5e:	d901      	bls.n	8108a64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108a60:	2303      	movs	r3, #3
 8108a62:	e088      	b.n	8108b76 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108a64:	4b46      	ldr	r3, [pc, #280]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108a66:	681b      	ldr	r3, [r3, #0]
 8108a68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108a6c:	2b00      	cmp	r3, #0
 8108a6e:	d1f0      	bne.n	8108a52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108a70:	4b43      	ldr	r3, [pc, #268]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108a74:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108a78:	687b      	ldr	r3, [r7, #4]
 8108a7a:	681b      	ldr	r3, [r3, #0]
 8108a7c:	051b      	lsls	r3, r3, #20
 8108a7e:	4940      	ldr	r1, [pc, #256]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108a80:	4313      	orrs	r3, r2
 8108a82:	628b      	str	r3, [r1, #40]	@ 0x28
 8108a84:	687b      	ldr	r3, [r7, #4]
 8108a86:	685b      	ldr	r3, [r3, #4]
 8108a88:	3b01      	subs	r3, #1
 8108a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108a8e:	687b      	ldr	r3, [r7, #4]
 8108a90:	689b      	ldr	r3, [r3, #8]
 8108a92:	3b01      	subs	r3, #1
 8108a94:	025b      	lsls	r3, r3, #9
 8108a96:	b29b      	uxth	r3, r3
 8108a98:	431a      	orrs	r2, r3
 8108a9a:	687b      	ldr	r3, [r7, #4]
 8108a9c:	68db      	ldr	r3, [r3, #12]
 8108a9e:	3b01      	subs	r3, #1
 8108aa0:	041b      	lsls	r3, r3, #16
 8108aa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108aa6:	431a      	orrs	r2, r3
 8108aa8:	687b      	ldr	r3, [r7, #4]
 8108aaa:	691b      	ldr	r3, [r3, #16]
 8108aac:	3b01      	subs	r3, #1
 8108aae:	061b      	lsls	r3, r3, #24
 8108ab0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108ab4:	4932      	ldr	r1, [pc, #200]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108ab6:	4313      	orrs	r3, r2
 8108ab8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8108aba:	4b31      	ldr	r3, [pc, #196]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108abe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8108ac2:	687b      	ldr	r3, [r7, #4]
 8108ac4:	695b      	ldr	r3, [r3, #20]
 8108ac6:	492e      	ldr	r1, [pc, #184]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108ac8:	4313      	orrs	r3, r2
 8108aca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8108acc:	4b2c      	ldr	r3, [pc, #176]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ad0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8108ad4:	687b      	ldr	r3, [r7, #4]
 8108ad6:	699b      	ldr	r3, [r3, #24]
 8108ad8:	4929      	ldr	r1, [pc, #164]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108ada:	4313      	orrs	r3, r2
 8108adc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8108ade:	4b28      	ldr	r3, [pc, #160]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ae2:	4a27      	ldr	r2, [pc, #156]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8108ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8108aea:	4b25      	ldr	r3, [pc, #148]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108aee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108af2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108af6:	687a      	ldr	r2, [r7, #4]
 8108af8:	69d2      	ldr	r2, [r2, #28]
 8108afa:	00d2      	lsls	r2, r2, #3
 8108afc:	4920      	ldr	r1, [pc, #128]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108afe:	4313      	orrs	r3, r2
 8108b00:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8108b02:	4b1f      	ldr	r3, [pc, #124]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b06:	4a1e      	ldr	r2, [pc, #120]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8108b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108b0e:	683b      	ldr	r3, [r7, #0]
 8108b10:	2b00      	cmp	r3, #0
 8108b12:	d106      	bne.n	8108b22 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8108b14:	4b1a      	ldr	r3, [pc, #104]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b18:	4a19      	ldr	r2, [pc, #100]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108b1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8108b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108b20:	e00f      	b.n	8108b42 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108b22:	683b      	ldr	r3, [r7, #0]
 8108b24:	2b01      	cmp	r3, #1
 8108b26:	d106      	bne.n	8108b36 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8108b28:	4b15      	ldr	r3, [pc, #84]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b2c:	4a14      	ldr	r2, [pc, #80]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108b2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8108b32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108b34:	e005      	b.n	8108b42 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8108b36:	4b12      	ldr	r3, [pc, #72]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b3a:	4a11      	ldr	r2, [pc, #68]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108b3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8108b40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8108b42:	4b0f      	ldr	r3, [pc, #60]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108b44:	681b      	ldr	r3, [r3, #0]
 8108b46:	4a0e      	ldr	r2, [pc, #56]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8108b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108b4e:	f7fc ff83 	bl	8105a58 <HAL_GetTick>
 8108b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108b54:	e008      	b.n	8108b68 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108b56:	f7fc ff7f 	bl	8105a58 <HAL_GetTick>
 8108b5a:	4602      	mov	r2, r0
 8108b5c:	68bb      	ldr	r3, [r7, #8]
 8108b5e:	1ad3      	subs	r3, r2, r3
 8108b60:	2b02      	cmp	r3, #2
 8108b62:	d901      	bls.n	8108b68 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108b64:	2303      	movs	r3, #3
 8108b66:	e006      	b.n	8108b76 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108b68:	4b05      	ldr	r3, [pc, #20]	@ (8108b80 <RCCEx_PLL3_Config+0x160>)
 8108b6a:	681b      	ldr	r3, [r3, #0]
 8108b6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108b70:	2b00      	cmp	r3, #0
 8108b72:	d0f0      	beq.n	8108b56 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8108b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8108b76:	4618      	mov	r0, r3
 8108b78:	3710      	adds	r7, #16
 8108b7a:	46bd      	mov	sp, r7
 8108b7c:	bd80      	pop	{r7, pc}
 8108b7e:	bf00      	nop
 8108b80:	58024400 	.word	0x58024400

08108b84 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8108b84:	b580      	push	{r7, lr}
 8108b86:	b084      	sub	sp, #16
 8108b88:	af00      	add	r7, sp, #0
 8108b8a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8108b8c:	687b      	ldr	r3, [r7, #4]
 8108b8e:	2b00      	cmp	r3, #0
 8108b90:	d101      	bne.n	8108b96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8108b92:	2301      	movs	r3, #1
 8108b94:	e10f      	b.n	8108db6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8108b96:	687b      	ldr	r3, [r7, #4]
 8108b98:	2200      	movs	r2, #0
 8108b9a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8108b9c:	687b      	ldr	r3, [r7, #4]
 8108b9e:	681b      	ldr	r3, [r3, #0]
 8108ba0:	4a87      	ldr	r2, [pc, #540]	@ (8108dc0 <HAL_SPI_Init+0x23c>)
 8108ba2:	4293      	cmp	r3, r2
 8108ba4:	d00f      	beq.n	8108bc6 <HAL_SPI_Init+0x42>
 8108ba6:	687b      	ldr	r3, [r7, #4]
 8108ba8:	681b      	ldr	r3, [r3, #0]
 8108baa:	4a86      	ldr	r2, [pc, #536]	@ (8108dc4 <HAL_SPI_Init+0x240>)
 8108bac:	4293      	cmp	r3, r2
 8108bae:	d00a      	beq.n	8108bc6 <HAL_SPI_Init+0x42>
 8108bb0:	687b      	ldr	r3, [r7, #4]
 8108bb2:	681b      	ldr	r3, [r3, #0]
 8108bb4:	4a84      	ldr	r2, [pc, #528]	@ (8108dc8 <HAL_SPI_Init+0x244>)
 8108bb6:	4293      	cmp	r3, r2
 8108bb8:	d005      	beq.n	8108bc6 <HAL_SPI_Init+0x42>
 8108bba:	687b      	ldr	r3, [r7, #4]
 8108bbc:	68db      	ldr	r3, [r3, #12]
 8108bbe:	2b0f      	cmp	r3, #15
 8108bc0:	d901      	bls.n	8108bc6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8108bc2:	2301      	movs	r3, #1
 8108bc4:	e0f7      	b.n	8108db6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8108bc6:	6878      	ldr	r0, [r7, #4]
 8108bc8:	f000 f900 	bl	8108dcc <SPI_GetPacketSize>
 8108bcc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8108bce:	687b      	ldr	r3, [r7, #4]
 8108bd0:	681b      	ldr	r3, [r3, #0]
 8108bd2:	4a7b      	ldr	r2, [pc, #492]	@ (8108dc0 <HAL_SPI_Init+0x23c>)
 8108bd4:	4293      	cmp	r3, r2
 8108bd6:	d00c      	beq.n	8108bf2 <HAL_SPI_Init+0x6e>
 8108bd8:	687b      	ldr	r3, [r7, #4]
 8108bda:	681b      	ldr	r3, [r3, #0]
 8108bdc:	4a79      	ldr	r2, [pc, #484]	@ (8108dc4 <HAL_SPI_Init+0x240>)
 8108bde:	4293      	cmp	r3, r2
 8108be0:	d007      	beq.n	8108bf2 <HAL_SPI_Init+0x6e>
 8108be2:	687b      	ldr	r3, [r7, #4]
 8108be4:	681b      	ldr	r3, [r3, #0]
 8108be6:	4a78      	ldr	r2, [pc, #480]	@ (8108dc8 <HAL_SPI_Init+0x244>)
 8108be8:	4293      	cmp	r3, r2
 8108bea:	d002      	beq.n	8108bf2 <HAL_SPI_Init+0x6e>
 8108bec:	68fb      	ldr	r3, [r7, #12]
 8108bee:	2b08      	cmp	r3, #8
 8108bf0:	d811      	bhi.n	8108c16 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8108bf2:	687b      	ldr	r3, [r7, #4]
 8108bf4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8108bf6:	4a72      	ldr	r2, [pc, #456]	@ (8108dc0 <HAL_SPI_Init+0x23c>)
 8108bf8:	4293      	cmp	r3, r2
 8108bfa:	d009      	beq.n	8108c10 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8108bfc:	687b      	ldr	r3, [r7, #4]
 8108bfe:	681b      	ldr	r3, [r3, #0]
 8108c00:	4a70      	ldr	r2, [pc, #448]	@ (8108dc4 <HAL_SPI_Init+0x240>)
 8108c02:	4293      	cmp	r3, r2
 8108c04:	d004      	beq.n	8108c10 <HAL_SPI_Init+0x8c>
 8108c06:	687b      	ldr	r3, [r7, #4]
 8108c08:	681b      	ldr	r3, [r3, #0]
 8108c0a:	4a6f      	ldr	r2, [pc, #444]	@ (8108dc8 <HAL_SPI_Init+0x244>)
 8108c0c:	4293      	cmp	r3, r2
 8108c0e:	d104      	bne.n	8108c1a <HAL_SPI_Init+0x96>
 8108c10:	68fb      	ldr	r3, [r7, #12]
 8108c12:	2b10      	cmp	r3, #16
 8108c14:	d901      	bls.n	8108c1a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8108c16:	2301      	movs	r3, #1
 8108c18:	e0cd      	b.n	8108db6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8108c20:	b2db      	uxtb	r3, r3
 8108c22:	2b00      	cmp	r3, #0
 8108c24:	d106      	bne.n	8108c34 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8108c26:	687b      	ldr	r3, [r7, #4]
 8108c28:	2200      	movs	r2, #0
 8108c2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8108c2e:	6878      	ldr	r0, [r7, #4]
 8108c30:	f7fc fb92 	bl	8105358 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8108c34:	687b      	ldr	r3, [r7, #4]
 8108c36:	2202      	movs	r2, #2
 8108c38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8108c3c:	687b      	ldr	r3, [r7, #4]
 8108c3e:	681b      	ldr	r3, [r3, #0]
 8108c40:	681a      	ldr	r2, [r3, #0]
 8108c42:	687b      	ldr	r3, [r7, #4]
 8108c44:	681b      	ldr	r3, [r3, #0]
 8108c46:	f022 0201 	bic.w	r2, r2, #1
 8108c4a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8108c4c:	687b      	ldr	r3, [r7, #4]
 8108c4e:	681b      	ldr	r3, [r3, #0]
 8108c50:	689b      	ldr	r3, [r3, #8]
 8108c52:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8108c56:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8108c58:	687b      	ldr	r3, [r7, #4]
 8108c5a:	699b      	ldr	r3, [r3, #24]
 8108c5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8108c60:	d119      	bne.n	8108c96 <HAL_SPI_Init+0x112>
 8108c62:	687b      	ldr	r3, [r7, #4]
 8108c64:	685b      	ldr	r3, [r3, #4]
 8108c66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8108c6a:	d103      	bne.n	8108c74 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8108c6c:	687b      	ldr	r3, [r7, #4]
 8108c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8108c70:	2b00      	cmp	r3, #0
 8108c72:	d008      	beq.n	8108c86 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8108c74:	687b      	ldr	r3, [r7, #4]
 8108c76:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8108c78:	2b00      	cmp	r3, #0
 8108c7a:	d10c      	bne.n	8108c96 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8108c7c:	687b      	ldr	r3, [r7, #4]
 8108c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8108c80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108c84:	d107      	bne.n	8108c96 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8108c86:	687b      	ldr	r3, [r7, #4]
 8108c88:	681b      	ldr	r3, [r3, #0]
 8108c8a:	681a      	ldr	r2, [r3, #0]
 8108c8c:	687b      	ldr	r3, [r7, #4]
 8108c8e:	681b      	ldr	r3, [r3, #0]
 8108c90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8108c94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8108c96:	687b      	ldr	r3, [r7, #4]
 8108c98:	685b      	ldr	r3, [r3, #4]
 8108c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8108c9e:	2b00      	cmp	r3, #0
 8108ca0:	d00f      	beq.n	8108cc2 <HAL_SPI_Init+0x13e>
 8108ca2:	687b      	ldr	r3, [r7, #4]
 8108ca4:	68db      	ldr	r3, [r3, #12]
 8108ca6:	2b06      	cmp	r3, #6
 8108ca8:	d90b      	bls.n	8108cc2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8108caa:	687b      	ldr	r3, [r7, #4]
 8108cac:	681b      	ldr	r3, [r3, #0]
 8108cae:	681b      	ldr	r3, [r3, #0]
 8108cb0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8108cb4:	687b      	ldr	r3, [r7, #4]
 8108cb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8108cb8:	687b      	ldr	r3, [r7, #4]
 8108cba:	681b      	ldr	r3, [r3, #0]
 8108cbc:	430a      	orrs	r2, r1
 8108cbe:	601a      	str	r2, [r3, #0]
 8108cc0:	e007      	b.n	8108cd2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8108cc2:	687b      	ldr	r3, [r7, #4]
 8108cc4:	681b      	ldr	r3, [r3, #0]
 8108cc6:	681a      	ldr	r2, [r3, #0]
 8108cc8:	687b      	ldr	r3, [r7, #4]
 8108cca:	681b      	ldr	r3, [r3, #0]
 8108ccc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8108cd0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8108cd2:	687b      	ldr	r3, [r7, #4]
 8108cd4:	69da      	ldr	r2, [r3, #28]
 8108cd6:	687b      	ldr	r3, [r7, #4]
 8108cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108cda:	431a      	orrs	r2, r3
 8108cdc:	68bb      	ldr	r3, [r7, #8]
 8108cde:	431a      	orrs	r2, r3
 8108ce0:	687b      	ldr	r3, [r7, #4]
 8108ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108ce4:	ea42 0103 	orr.w	r1, r2, r3
 8108ce8:	687b      	ldr	r3, [r7, #4]
 8108cea:	68da      	ldr	r2, [r3, #12]
 8108cec:	687b      	ldr	r3, [r7, #4]
 8108cee:	681b      	ldr	r3, [r3, #0]
 8108cf0:	430a      	orrs	r2, r1
 8108cf2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8108cf4:	687b      	ldr	r3, [r7, #4]
 8108cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108cf8:	687b      	ldr	r3, [r7, #4]
 8108cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108cfc:	431a      	orrs	r2, r3
 8108cfe:	687b      	ldr	r3, [r7, #4]
 8108d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108d02:	431a      	orrs	r2, r3
 8108d04:	687b      	ldr	r3, [r7, #4]
 8108d06:	699b      	ldr	r3, [r3, #24]
 8108d08:	431a      	orrs	r2, r3
 8108d0a:	687b      	ldr	r3, [r7, #4]
 8108d0c:	691b      	ldr	r3, [r3, #16]
 8108d0e:	431a      	orrs	r2, r3
 8108d10:	687b      	ldr	r3, [r7, #4]
 8108d12:	695b      	ldr	r3, [r3, #20]
 8108d14:	431a      	orrs	r2, r3
 8108d16:	687b      	ldr	r3, [r7, #4]
 8108d18:	6a1b      	ldr	r3, [r3, #32]
 8108d1a:	431a      	orrs	r2, r3
 8108d1c:	687b      	ldr	r3, [r7, #4]
 8108d1e:	685b      	ldr	r3, [r3, #4]
 8108d20:	431a      	orrs	r2, r3
 8108d22:	687b      	ldr	r3, [r7, #4]
 8108d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108d26:	431a      	orrs	r2, r3
 8108d28:	687b      	ldr	r3, [r7, #4]
 8108d2a:	689b      	ldr	r3, [r3, #8]
 8108d2c:	431a      	orrs	r2, r3
 8108d2e:	687b      	ldr	r3, [r7, #4]
 8108d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8108d32:	ea42 0103 	orr.w	r1, r2, r3
 8108d36:	687b      	ldr	r3, [r7, #4]
 8108d38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8108d3a:	687b      	ldr	r3, [r7, #4]
 8108d3c:	681b      	ldr	r3, [r3, #0]
 8108d3e:	430a      	orrs	r2, r1
 8108d40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8108d42:	687b      	ldr	r3, [r7, #4]
 8108d44:	685b      	ldr	r3, [r3, #4]
 8108d46:	2b00      	cmp	r3, #0
 8108d48:	d113      	bne.n	8108d72 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8108d4a:	687b      	ldr	r3, [r7, #4]
 8108d4c:	681b      	ldr	r3, [r3, #0]
 8108d4e:	689b      	ldr	r3, [r3, #8]
 8108d50:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8108d54:	687b      	ldr	r3, [r7, #4]
 8108d56:	681b      	ldr	r3, [r3, #0]
 8108d58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8108d5c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8108d5e:	687b      	ldr	r3, [r7, #4]
 8108d60:	681b      	ldr	r3, [r3, #0]
 8108d62:	689b      	ldr	r3, [r3, #8]
 8108d64:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8108d68:	687b      	ldr	r3, [r7, #4]
 8108d6a:	681b      	ldr	r3, [r3, #0]
 8108d6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8108d70:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8108d72:	687b      	ldr	r3, [r7, #4]
 8108d74:	681b      	ldr	r3, [r3, #0]
 8108d76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8108d78:	687b      	ldr	r3, [r7, #4]
 8108d7a:	681b      	ldr	r3, [r3, #0]
 8108d7c:	f022 0201 	bic.w	r2, r2, #1
 8108d80:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8108d82:	687b      	ldr	r3, [r7, #4]
 8108d84:	685b      	ldr	r3, [r3, #4]
 8108d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8108d8a:	2b00      	cmp	r3, #0
 8108d8c:	d00a      	beq.n	8108da4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8108d8e:	687b      	ldr	r3, [r7, #4]
 8108d90:	681b      	ldr	r3, [r3, #0]
 8108d92:	68db      	ldr	r3, [r3, #12]
 8108d94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8108d98:	687b      	ldr	r3, [r7, #4]
 8108d9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8108d9c:	687b      	ldr	r3, [r7, #4]
 8108d9e:	681b      	ldr	r3, [r3, #0]
 8108da0:	430a      	orrs	r2, r1
 8108da2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8108da4:	687b      	ldr	r3, [r7, #4]
 8108da6:	2200      	movs	r2, #0
 8108da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8108dac:	687b      	ldr	r3, [r7, #4]
 8108dae:	2201      	movs	r2, #1
 8108db0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8108db4:	2300      	movs	r3, #0
}
 8108db6:	4618      	mov	r0, r3
 8108db8:	3710      	adds	r7, #16
 8108dba:	46bd      	mov	sp, r7
 8108dbc:	bd80      	pop	{r7, pc}
 8108dbe:	bf00      	nop
 8108dc0:	40013000 	.word	0x40013000
 8108dc4:	40003800 	.word	0x40003800
 8108dc8:	40003c00 	.word	0x40003c00

08108dcc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8108dcc:	b480      	push	{r7}
 8108dce:	b085      	sub	sp, #20
 8108dd0:	af00      	add	r7, sp, #0
 8108dd2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8108dd4:	687b      	ldr	r3, [r7, #4]
 8108dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108dd8:	095b      	lsrs	r3, r3, #5
 8108dda:	3301      	adds	r3, #1
 8108ddc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8108dde:	687b      	ldr	r3, [r7, #4]
 8108de0:	68db      	ldr	r3, [r3, #12]
 8108de2:	3301      	adds	r3, #1
 8108de4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8108de6:	68bb      	ldr	r3, [r7, #8]
 8108de8:	3307      	adds	r3, #7
 8108dea:	08db      	lsrs	r3, r3, #3
 8108dec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8108dee:	68bb      	ldr	r3, [r7, #8]
 8108df0:	68fa      	ldr	r2, [r7, #12]
 8108df2:	fb02 f303 	mul.w	r3, r2, r3
}
 8108df6:	4618      	mov	r0, r3
 8108df8:	3714      	adds	r7, #20
 8108dfa:	46bd      	mov	sp, r7
 8108dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e00:	4770      	bx	lr

08108e02 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8108e02:	b580      	push	{r7, lr}
 8108e04:	b082      	sub	sp, #8
 8108e06:	af00      	add	r7, sp, #0
 8108e08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8108e0a:	687b      	ldr	r3, [r7, #4]
 8108e0c:	2b00      	cmp	r3, #0
 8108e0e:	d101      	bne.n	8108e14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8108e10:	2301      	movs	r3, #1
 8108e12:	e042      	b.n	8108e9a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8108e14:	687b      	ldr	r3, [r7, #4]
 8108e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108e1a:	2b00      	cmp	r3, #0
 8108e1c:	d106      	bne.n	8108e2c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8108e1e:	687b      	ldr	r3, [r7, #4]
 8108e20:	2200      	movs	r2, #0
 8108e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8108e26:	6878      	ldr	r0, [r7, #4]
 8108e28:	f7fc fafe 	bl	8105428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8108e2c:	687b      	ldr	r3, [r7, #4]
 8108e2e:	2224      	movs	r2, #36	@ 0x24
 8108e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8108e34:	687b      	ldr	r3, [r7, #4]
 8108e36:	681b      	ldr	r3, [r3, #0]
 8108e38:	681a      	ldr	r2, [r3, #0]
 8108e3a:	687b      	ldr	r3, [r7, #4]
 8108e3c:	681b      	ldr	r3, [r3, #0]
 8108e3e:	f022 0201 	bic.w	r2, r2, #1
 8108e42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8108e44:	687b      	ldr	r3, [r7, #4]
 8108e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108e48:	2b00      	cmp	r3, #0
 8108e4a:	d002      	beq.n	8108e52 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8108e4c:	6878      	ldr	r0, [r7, #4]
 8108e4e:	f001 fa61 	bl	810a314 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8108e52:	6878      	ldr	r0, [r7, #4]
 8108e54:	f000 fcf6 	bl	8109844 <UART_SetConfig>
 8108e58:	4603      	mov	r3, r0
 8108e5a:	2b01      	cmp	r3, #1
 8108e5c:	d101      	bne.n	8108e62 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8108e5e:	2301      	movs	r3, #1
 8108e60:	e01b      	b.n	8108e9a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8108e62:	687b      	ldr	r3, [r7, #4]
 8108e64:	681b      	ldr	r3, [r3, #0]
 8108e66:	685a      	ldr	r2, [r3, #4]
 8108e68:	687b      	ldr	r3, [r7, #4]
 8108e6a:	681b      	ldr	r3, [r3, #0]
 8108e6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8108e70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	681b      	ldr	r3, [r3, #0]
 8108e76:	689a      	ldr	r2, [r3, #8]
 8108e78:	687b      	ldr	r3, [r7, #4]
 8108e7a:	681b      	ldr	r3, [r3, #0]
 8108e7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8108e80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8108e82:	687b      	ldr	r3, [r7, #4]
 8108e84:	681b      	ldr	r3, [r3, #0]
 8108e86:	681a      	ldr	r2, [r3, #0]
 8108e88:	687b      	ldr	r3, [r7, #4]
 8108e8a:	681b      	ldr	r3, [r3, #0]
 8108e8c:	f042 0201 	orr.w	r2, r2, #1
 8108e90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8108e92:	6878      	ldr	r0, [r7, #4]
 8108e94:	f001 fae0 	bl	810a458 <UART_CheckIdleState>
 8108e98:	4603      	mov	r3, r0
}
 8108e9a:	4618      	mov	r0, r3
 8108e9c:	3708      	adds	r7, #8
 8108e9e:	46bd      	mov	sp, r7
 8108ea0:	bd80      	pop	{r7, pc}

08108ea2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8108ea2:	b580      	push	{r7, lr}
 8108ea4:	b08a      	sub	sp, #40	@ 0x28
 8108ea6:	af02      	add	r7, sp, #8
 8108ea8:	60f8      	str	r0, [r7, #12]
 8108eaa:	60b9      	str	r1, [r7, #8]
 8108eac:	603b      	str	r3, [r7, #0]
 8108eae:	4613      	mov	r3, r2
 8108eb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8108eb2:	68fb      	ldr	r3, [r7, #12]
 8108eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108eb8:	2b20      	cmp	r3, #32
 8108eba:	d17b      	bne.n	8108fb4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8108ebc:	68bb      	ldr	r3, [r7, #8]
 8108ebe:	2b00      	cmp	r3, #0
 8108ec0:	d002      	beq.n	8108ec8 <HAL_UART_Transmit+0x26>
 8108ec2:	88fb      	ldrh	r3, [r7, #6]
 8108ec4:	2b00      	cmp	r3, #0
 8108ec6:	d101      	bne.n	8108ecc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8108ec8:	2301      	movs	r3, #1
 8108eca:	e074      	b.n	8108fb6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108ecc:	68fb      	ldr	r3, [r7, #12]
 8108ece:	2200      	movs	r2, #0
 8108ed0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108ed4:	68fb      	ldr	r3, [r7, #12]
 8108ed6:	2221      	movs	r2, #33	@ 0x21
 8108ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8108edc:	f7fc fdbc 	bl	8105a58 <HAL_GetTick>
 8108ee0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8108ee2:	68fb      	ldr	r3, [r7, #12]
 8108ee4:	88fa      	ldrh	r2, [r7, #6]
 8108ee6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8108eea:	68fb      	ldr	r3, [r7, #12]
 8108eec:	88fa      	ldrh	r2, [r7, #6]
 8108eee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8108ef2:	68fb      	ldr	r3, [r7, #12]
 8108ef4:	689b      	ldr	r3, [r3, #8]
 8108ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108efa:	d108      	bne.n	8108f0e <HAL_UART_Transmit+0x6c>
 8108efc:	68fb      	ldr	r3, [r7, #12]
 8108efe:	691b      	ldr	r3, [r3, #16]
 8108f00:	2b00      	cmp	r3, #0
 8108f02:	d104      	bne.n	8108f0e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8108f04:	2300      	movs	r3, #0
 8108f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8108f08:	68bb      	ldr	r3, [r7, #8]
 8108f0a:	61bb      	str	r3, [r7, #24]
 8108f0c:	e003      	b.n	8108f16 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8108f0e:	68bb      	ldr	r3, [r7, #8]
 8108f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8108f12:	2300      	movs	r3, #0
 8108f14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8108f16:	e030      	b.n	8108f7a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8108f18:	683b      	ldr	r3, [r7, #0]
 8108f1a:	9300      	str	r3, [sp, #0]
 8108f1c:	697b      	ldr	r3, [r7, #20]
 8108f1e:	2200      	movs	r2, #0
 8108f20:	2180      	movs	r1, #128	@ 0x80
 8108f22:	68f8      	ldr	r0, [r7, #12]
 8108f24:	f001 fb42 	bl	810a5ac <UART_WaitOnFlagUntilTimeout>
 8108f28:	4603      	mov	r3, r0
 8108f2a:	2b00      	cmp	r3, #0
 8108f2c:	d005      	beq.n	8108f3a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8108f2e:	68fb      	ldr	r3, [r7, #12]
 8108f30:	2220      	movs	r2, #32
 8108f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8108f36:	2303      	movs	r3, #3
 8108f38:	e03d      	b.n	8108fb6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8108f3a:	69fb      	ldr	r3, [r7, #28]
 8108f3c:	2b00      	cmp	r3, #0
 8108f3e:	d10b      	bne.n	8108f58 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8108f40:	69bb      	ldr	r3, [r7, #24]
 8108f42:	881b      	ldrh	r3, [r3, #0]
 8108f44:	461a      	mov	r2, r3
 8108f46:	68fb      	ldr	r3, [r7, #12]
 8108f48:	681b      	ldr	r3, [r3, #0]
 8108f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108f4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8108f50:	69bb      	ldr	r3, [r7, #24]
 8108f52:	3302      	adds	r3, #2
 8108f54:	61bb      	str	r3, [r7, #24]
 8108f56:	e007      	b.n	8108f68 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8108f58:	69fb      	ldr	r3, [r7, #28]
 8108f5a:	781a      	ldrb	r2, [r3, #0]
 8108f5c:	68fb      	ldr	r3, [r7, #12]
 8108f5e:	681b      	ldr	r3, [r3, #0]
 8108f60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8108f62:	69fb      	ldr	r3, [r7, #28]
 8108f64:	3301      	adds	r3, #1
 8108f66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8108f68:	68fb      	ldr	r3, [r7, #12]
 8108f6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8108f6e:	b29b      	uxth	r3, r3
 8108f70:	3b01      	subs	r3, #1
 8108f72:	b29a      	uxth	r2, r3
 8108f74:	68fb      	ldr	r3, [r7, #12]
 8108f76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8108f7a:	68fb      	ldr	r3, [r7, #12]
 8108f7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8108f80:	b29b      	uxth	r3, r3
 8108f82:	2b00      	cmp	r3, #0
 8108f84:	d1c8      	bne.n	8108f18 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8108f86:	683b      	ldr	r3, [r7, #0]
 8108f88:	9300      	str	r3, [sp, #0]
 8108f8a:	697b      	ldr	r3, [r7, #20]
 8108f8c:	2200      	movs	r2, #0
 8108f8e:	2140      	movs	r1, #64	@ 0x40
 8108f90:	68f8      	ldr	r0, [r7, #12]
 8108f92:	f001 fb0b 	bl	810a5ac <UART_WaitOnFlagUntilTimeout>
 8108f96:	4603      	mov	r3, r0
 8108f98:	2b00      	cmp	r3, #0
 8108f9a:	d005      	beq.n	8108fa8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8108f9c:	68fb      	ldr	r3, [r7, #12]
 8108f9e:	2220      	movs	r2, #32
 8108fa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8108fa4:	2303      	movs	r3, #3
 8108fa6:	e006      	b.n	8108fb6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108fa8:	68fb      	ldr	r3, [r7, #12]
 8108faa:	2220      	movs	r2, #32
 8108fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8108fb0:	2300      	movs	r3, #0
 8108fb2:	e000      	b.n	8108fb6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8108fb4:	2302      	movs	r3, #2
  }
}
 8108fb6:	4618      	mov	r0, r3
 8108fb8:	3720      	adds	r7, #32
 8108fba:	46bd      	mov	sp, r7
 8108fbc:	bd80      	pop	{r7, pc}
	...

08108fc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8108fc0:	b580      	push	{r7, lr}
 8108fc2:	b08a      	sub	sp, #40	@ 0x28
 8108fc4:	af00      	add	r7, sp, #0
 8108fc6:	60f8      	str	r0, [r7, #12]
 8108fc8:	60b9      	str	r1, [r7, #8]
 8108fca:	4613      	mov	r3, r2
 8108fcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8108fce:	68fb      	ldr	r3, [r7, #12]
 8108fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8108fd4:	2b20      	cmp	r3, #32
 8108fd6:	d137      	bne.n	8109048 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8108fd8:	68bb      	ldr	r3, [r7, #8]
 8108fda:	2b00      	cmp	r3, #0
 8108fdc:	d002      	beq.n	8108fe4 <HAL_UART_Receive_IT+0x24>
 8108fde:	88fb      	ldrh	r3, [r7, #6]
 8108fe0:	2b00      	cmp	r3, #0
 8108fe2:	d101      	bne.n	8108fe8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8108fe4:	2301      	movs	r3, #1
 8108fe6:	e030      	b.n	810904a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108fe8:	68fb      	ldr	r3, [r7, #12]
 8108fea:	2200      	movs	r2, #0
 8108fec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8108fee:	68fb      	ldr	r3, [r7, #12]
 8108ff0:	681b      	ldr	r3, [r3, #0]
 8108ff2:	4a18      	ldr	r2, [pc, #96]	@ (8109054 <HAL_UART_Receive_IT+0x94>)
 8108ff4:	4293      	cmp	r3, r2
 8108ff6:	d01f      	beq.n	8109038 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8108ff8:	68fb      	ldr	r3, [r7, #12]
 8108ffa:	681b      	ldr	r3, [r3, #0]
 8108ffc:	685b      	ldr	r3, [r3, #4]
 8108ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8109002:	2b00      	cmp	r3, #0
 8109004:	d018      	beq.n	8109038 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8109006:	68fb      	ldr	r3, [r7, #12]
 8109008:	681b      	ldr	r3, [r3, #0]
 810900a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810900c:	697b      	ldr	r3, [r7, #20]
 810900e:	e853 3f00 	ldrex	r3, [r3]
 8109012:	613b      	str	r3, [r7, #16]
   return(result);
 8109014:	693b      	ldr	r3, [r7, #16]
 8109016:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810901a:	627b      	str	r3, [r7, #36]	@ 0x24
 810901c:	68fb      	ldr	r3, [r7, #12]
 810901e:	681b      	ldr	r3, [r3, #0]
 8109020:	461a      	mov	r2, r3
 8109022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109024:	623b      	str	r3, [r7, #32]
 8109026:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109028:	69f9      	ldr	r1, [r7, #28]
 810902a:	6a3a      	ldr	r2, [r7, #32]
 810902c:	e841 2300 	strex	r3, r2, [r1]
 8109030:	61bb      	str	r3, [r7, #24]
   return(result);
 8109032:	69bb      	ldr	r3, [r7, #24]
 8109034:	2b00      	cmp	r3, #0
 8109036:	d1e6      	bne.n	8109006 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8109038:	88fb      	ldrh	r3, [r7, #6]
 810903a:	461a      	mov	r2, r3
 810903c:	68b9      	ldr	r1, [r7, #8]
 810903e:	68f8      	ldr	r0, [r7, #12]
 8109040:	f001 fb22 	bl	810a688 <UART_Start_Receive_IT>
 8109044:	4603      	mov	r3, r0
 8109046:	e000      	b.n	810904a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8109048:	2302      	movs	r3, #2
  }
}
 810904a:	4618      	mov	r0, r3
 810904c:	3728      	adds	r7, #40	@ 0x28
 810904e:	46bd      	mov	sp, r7
 8109050:	bd80      	pop	{r7, pc}
 8109052:	bf00      	nop
 8109054:	58000c00 	.word	0x58000c00

08109058 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8109058:	b580      	push	{r7, lr}
 810905a:	b0ba      	sub	sp, #232	@ 0xe8
 810905c:	af00      	add	r7, sp, #0
 810905e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8109060:	687b      	ldr	r3, [r7, #4]
 8109062:	681b      	ldr	r3, [r3, #0]
 8109064:	69db      	ldr	r3, [r3, #28]
 8109066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810906a:	687b      	ldr	r3, [r7, #4]
 810906c:	681b      	ldr	r3, [r3, #0]
 810906e:	681b      	ldr	r3, [r3, #0]
 8109070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8109074:	687b      	ldr	r3, [r7, #4]
 8109076:	681b      	ldr	r3, [r3, #0]
 8109078:	689b      	ldr	r3, [r3, #8]
 810907a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810907e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8109082:	f640 030f 	movw	r3, #2063	@ 0x80f
 8109086:	4013      	ands	r3, r2
 8109088:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 810908c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8109090:	2b00      	cmp	r3, #0
 8109092:	d11b      	bne.n	81090cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8109094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109098:	f003 0320 	and.w	r3, r3, #32
 810909c:	2b00      	cmp	r3, #0
 810909e:	d015      	beq.n	81090cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81090a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81090a4:	f003 0320 	and.w	r3, r3, #32
 81090a8:	2b00      	cmp	r3, #0
 81090aa:	d105      	bne.n	81090b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81090ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 81090b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81090b4:	2b00      	cmp	r3, #0
 81090b6:	d009      	beq.n	81090cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 81090b8:	687b      	ldr	r3, [r7, #4]
 81090ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81090bc:	2b00      	cmp	r3, #0
 81090be:	f000 8395 	beq.w	81097ec <HAL_UART_IRQHandler+0x794>
      {
        huart->RxISR(huart);
 81090c2:	687b      	ldr	r3, [r7, #4]
 81090c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81090c6:	6878      	ldr	r0, [r7, #4]
 81090c8:	4798      	blx	r3
      }
      return;
 81090ca:	e38f      	b.n	81097ec <HAL_UART_IRQHandler+0x794>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 81090cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 81090d0:	2b00      	cmp	r3, #0
 81090d2:	f000 8123 	beq.w	810931c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81090d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 81090da:	4b8d      	ldr	r3, [pc, #564]	@ (8109310 <HAL_UART_IRQHandler+0x2b8>)
 81090dc:	4013      	ands	r3, r2
 81090de:	2b00      	cmp	r3, #0
 81090e0:	d106      	bne.n	81090f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81090e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 81090e6:	4b8b      	ldr	r3, [pc, #556]	@ (8109314 <HAL_UART_IRQHandler+0x2bc>)
 81090e8:	4013      	ands	r3, r2
 81090ea:	2b00      	cmp	r3, #0
 81090ec:	f000 8116 	beq.w	810931c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81090f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81090f4:	f003 0301 	and.w	r3, r3, #1
 81090f8:	2b00      	cmp	r3, #0
 81090fa:	d011      	beq.n	8109120 <HAL_UART_IRQHandler+0xc8>
 81090fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109104:	2b00      	cmp	r3, #0
 8109106:	d00b      	beq.n	8109120 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8109108:	687b      	ldr	r3, [r7, #4]
 810910a:	681b      	ldr	r3, [r3, #0]
 810910c:	2201      	movs	r2, #1
 810910e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8109110:	687b      	ldr	r3, [r7, #4]
 8109112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109116:	f043 0201 	orr.w	r2, r3, #1
 810911a:	687b      	ldr	r3, [r7, #4]
 810911c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109124:	f003 0302 	and.w	r3, r3, #2
 8109128:	2b00      	cmp	r3, #0
 810912a:	d011      	beq.n	8109150 <HAL_UART_IRQHandler+0xf8>
 810912c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109130:	f003 0301 	and.w	r3, r3, #1
 8109134:	2b00      	cmp	r3, #0
 8109136:	d00b      	beq.n	8109150 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8109138:	687b      	ldr	r3, [r7, #4]
 810913a:	681b      	ldr	r3, [r3, #0]
 810913c:	2202      	movs	r2, #2
 810913e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8109140:	687b      	ldr	r3, [r7, #4]
 8109142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109146:	f043 0204 	orr.w	r2, r3, #4
 810914a:	687b      	ldr	r3, [r7, #4]
 810914c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109154:	f003 0304 	and.w	r3, r3, #4
 8109158:	2b00      	cmp	r3, #0
 810915a:	d011      	beq.n	8109180 <HAL_UART_IRQHandler+0x128>
 810915c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109160:	f003 0301 	and.w	r3, r3, #1
 8109164:	2b00      	cmp	r3, #0
 8109166:	d00b      	beq.n	8109180 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8109168:	687b      	ldr	r3, [r7, #4]
 810916a:	681b      	ldr	r3, [r3, #0]
 810916c:	2204      	movs	r2, #4
 810916e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8109170:	687b      	ldr	r3, [r7, #4]
 8109172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109176:	f043 0202 	orr.w	r2, r3, #2
 810917a:	687b      	ldr	r3, [r7, #4]
 810917c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8109180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109184:	f003 0308 	and.w	r3, r3, #8
 8109188:	2b00      	cmp	r3, #0
 810918a:	d017      	beq.n	81091bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810918c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109190:	f003 0320 	and.w	r3, r3, #32
 8109194:	2b00      	cmp	r3, #0
 8109196:	d105      	bne.n	81091a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8109198:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810919c:	4b5c      	ldr	r3, [pc, #368]	@ (8109310 <HAL_UART_IRQHandler+0x2b8>)
 810919e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81091a0:	2b00      	cmp	r3, #0
 81091a2:	d00b      	beq.n	81091bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81091a4:	687b      	ldr	r3, [r7, #4]
 81091a6:	681b      	ldr	r3, [r3, #0]
 81091a8:	2208      	movs	r2, #8
 81091aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 81091ac:	687b      	ldr	r3, [r7, #4]
 81091ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81091b2:	f043 0208 	orr.w	r2, r3, #8
 81091b6:	687b      	ldr	r3, [r7, #4]
 81091b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 81091bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81091c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81091c4:	2b00      	cmp	r3, #0
 81091c6:	d012      	beq.n	81091ee <HAL_UART_IRQHandler+0x196>
 81091c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81091cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 81091d0:	2b00      	cmp	r3, #0
 81091d2:	d00c      	beq.n	81091ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81091d4:	687b      	ldr	r3, [r7, #4]
 81091d6:	681b      	ldr	r3, [r3, #0]
 81091d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81091dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 81091de:	687b      	ldr	r3, [r7, #4]
 81091e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81091e4:	f043 0220 	orr.w	r2, r3, #32
 81091e8:	687b      	ldr	r3, [r7, #4]
 81091ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81091ee:	687b      	ldr	r3, [r7, #4]
 81091f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81091f4:	2b00      	cmp	r3, #0
 81091f6:	f000 82fb 	beq.w	81097f0 <HAL_UART_IRQHandler+0x798>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81091fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81091fe:	f003 0320 	and.w	r3, r3, #32
 8109202:	2b00      	cmp	r3, #0
 8109204:	d013      	beq.n	810922e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8109206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810920a:	f003 0320 	and.w	r3, r3, #32
 810920e:	2b00      	cmp	r3, #0
 8109210:	d105      	bne.n	810921e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8109212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810921a:	2b00      	cmp	r3, #0
 810921c:	d007      	beq.n	810922e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 810921e:	687b      	ldr	r3, [r7, #4]
 8109220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109222:	2b00      	cmp	r3, #0
 8109224:	d003      	beq.n	810922e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8109226:	687b      	ldr	r3, [r7, #4]
 8109228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810922a:	6878      	ldr	r0, [r7, #4]
 810922c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810922e:	687b      	ldr	r3, [r7, #4]
 8109230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109234:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8109238:	687b      	ldr	r3, [r7, #4]
 810923a:	681b      	ldr	r3, [r3, #0]
 810923c:	689b      	ldr	r3, [r3, #8]
 810923e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109242:	2b40      	cmp	r3, #64	@ 0x40
 8109244:	d005      	beq.n	8109252 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8109246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 810924a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810924e:	2b00      	cmp	r3, #0
 8109250:	d054      	beq.n	81092fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8109252:	6878      	ldr	r0, [r7, #4]
 8109254:	f001 fb3a 	bl	810a8cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109258:	687b      	ldr	r3, [r7, #4]
 810925a:	681b      	ldr	r3, [r3, #0]
 810925c:	689b      	ldr	r3, [r3, #8]
 810925e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109262:	2b40      	cmp	r3, #64	@ 0x40
 8109264:	d146      	bne.n	81092f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109266:	687b      	ldr	r3, [r7, #4]
 8109268:	681b      	ldr	r3, [r3, #0]
 810926a:	3308      	adds	r3, #8
 810926c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109270:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8109274:	e853 3f00 	ldrex	r3, [r3]
 8109278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 810927c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8109280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109284:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8109288:	687b      	ldr	r3, [r7, #4]
 810928a:	681b      	ldr	r3, [r3, #0]
 810928c:	3308      	adds	r3, #8
 810928e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8109292:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8109296:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810929a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 810929e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 81092a2:	e841 2300 	strex	r3, r2, [r1]
 81092a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 81092aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 81092ae:	2b00      	cmp	r3, #0
 81092b0:	d1d9      	bne.n	8109266 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 81092b2:	687b      	ldr	r3, [r7, #4]
 81092b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81092b8:	2b00      	cmp	r3, #0
 81092ba:	d017      	beq.n	81092ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 81092bc:	687b      	ldr	r3, [r7, #4]
 81092be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81092c2:	4a15      	ldr	r2, [pc, #84]	@ (8109318 <HAL_UART_IRQHandler+0x2c0>)
 81092c4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 81092c6:	687b      	ldr	r3, [r7, #4]
 81092c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81092cc:	4618      	mov	r0, r3
 81092ce:	f7fc fffd 	bl	81062cc <HAL_DMA_Abort_IT>
 81092d2:	4603      	mov	r3, r0
 81092d4:	2b00      	cmp	r3, #0
 81092d6:	d019      	beq.n	810930c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81092d8:	687b      	ldr	r3, [r7, #4]
 81092da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81092de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81092e0:	687a      	ldr	r2, [r7, #4]
 81092e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 81092e6:	4610      	mov	r0, r2
 81092e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81092ea:	e00f      	b.n	810930c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 81092ec:	6878      	ldr	r0, [r7, #4]
 81092ee:	f000 fa93 	bl	8109818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81092f2:	e00b      	b.n	810930c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 81092f4:	6878      	ldr	r0, [r7, #4]
 81092f6:	f000 fa8f 	bl	8109818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81092fa:	e007      	b.n	810930c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 81092fc:	6878      	ldr	r0, [r7, #4]
 81092fe:	f000 fa8b 	bl	8109818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109302:	687b      	ldr	r3, [r7, #4]
 8109304:	2200      	movs	r2, #0
 8109306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 810930a:	e271      	b.n	81097f0 <HAL_UART_IRQHandler+0x798>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810930c:	bf00      	nop
    return;
 810930e:	e26f      	b.n	81097f0 <HAL_UART_IRQHandler+0x798>
 8109310:	10000001 	.word	0x10000001
 8109314:	04000120 	.word	0x04000120
 8109318:	0810a999 	.word	0x0810a999

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810931c:	687b      	ldr	r3, [r7, #4]
 810931e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109320:	2b01      	cmp	r3, #1
 8109322:	f040 8205 	bne.w	8109730 <HAL_UART_IRQHandler+0x6d8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8109326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810932a:	f003 0310 	and.w	r3, r3, #16
 810932e:	2b00      	cmp	r3, #0
 8109330:	f000 81fe 	beq.w	8109730 <HAL_UART_IRQHandler+0x6d8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8109334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109338:	f003 0310 	and.w	r3, r3, #16
 810933c:	2b00      	cmp	r3, #0
 810933e:	f000 81f7 	beq.w	8109730 <HAL_UART_IRQHandler+0x6d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8109342:	687b      	ldr	r3, [r7, #4]
 8109344:	681b      	ldr	r3, [r3, #0]
 8109346:	2210      	movs	r2, #16
 8109348:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810934a:	687b      	ldr	r3, [r7, #4]
 810934c:	681b      	ldr	r3, [r3, #0]
 810934e:	689b      	ldr	r3, [r3, #8]
 8109350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109354:	2b40      	cmp	r3, #64	@ 0x40
 8109356:	f040 816d 	bne.w	8109634 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810935a:	687b      	ldr	r3, [r7, #4]
 810935c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109360:	681b      	ldr	r3, [r3, #0]
 8109362:	4aa4      	ldr	r2, [pc, #656]	@ (81095f4 <HAL_UART_IRQHandler+0x59c>)
 8109364:	4293      	cmp	r3, r2
 8109366:	d068      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 8109368:	687b      	ldr	r3, [r7, #4]
 810936a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810936e:	681b      	ldr	r3, [r3, #0]
 8109370:	4aa1      	ldr	r2, [pc, #644]	@ (81095f8 <HAL_UART_IRQHandler+0x5a0>)
 8109372:	4293      	cmp	r3, r2
 8109374:	d061      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 8109376:	687b      	ldr	r3, [r7, #4]
 8109378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810937c:	681b      	ldr	r3, [r3, #0]
 810937e:	4a9f      	ldr	r2, [pc, #636]	@ (81095fc <HAL_UART_IRQHandler+0x5a4>)
 8109380:	4293      	cmp	r3, r2
 8109382:	d05a      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 8109384:	687b      	ldr	r3, [r7, #4]
 8109386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810938a:	681b      	ldr	r3, [r3, #0]
 810938c:	4a9c      	ldr	r2, [pc, #624]	@ (8109600 <HAL_UART_IRQHandler+0x5a8>)
 810938e:	4293      	cmp	r3, r2
 8109390:	d053      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 8109392:	687b      	ldr	r3, [r7, #4]
 8109394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109398:	681b      	ldr	r3, [r3, #0]
 810939a:	4a9a      	ldr	r2, [pc, #616]	@ (8109604 <HAL_UART_IRQHandler+0x5ac>)
 810939c:	4293      	cmp	r3, r2
 810939e:	d04c      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 81093a0:	687b      	ldr	r3, [r7, #4]
 81093a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81093a6:	681b      	ldr	r3, [r3, #0]
 81093a8:	4a97      	ldr	r2, [pc, #604]	@ (8109608 <HAL_UART_IRQHandler+0x5b0>)
 81093aa:	4293      	cmp	r3, r2
 81093ac:	d045      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 81093ae:	687b      	ldr	r3, [r7, #4]
 81093b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81093b4:	681b      	ldr	r3, [r3, #0]
 81093b6:	4a95      	ldr	r2, [pc, #596]	@ (810960c <HAL_UART_IRQHandler+0x5b4>)
 81093b8:	4293      	cmp	r3, r2
 81093ba:	d03e      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 81093bc:	687b      	ldr	r3, [r7, #4]
 81093be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81093c2:	681b      	ldr	r3, [r3, #0]
 81093c4:	4a92      	ldr	r2, [pc, #584]	@ (8109610 <HAL_UART_IRQHandler+0x5b8>)
 81093c6:	4293      	cmp	r3, r2
 81093c8:	d037      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 81093ca:	687b      	ldr	r3, [r7, #4]
 81093cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81093d0:	681b      	ldr	r3, [r3, #0]
 81093d2:	4a90      	ldr	r2, [pc, #576]	@ (8109614 <HAL_UART_IRQHandler+0x5bc>)
 81093d4:	4293      	cmp	r3, r2
 81093d6:	d030      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 81093d8:	687b      	ldr	r3, [r7, #4]
 81093da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81093de:	681b      	ldr	r3, [r3, #0]
 81093e0:	4a8d      	ldr	r2, [pc, #564]	@ (8109618 <HAL_UART_IRQHandler+0x5c0>)
 81093e2:	4293      	cmp	r3, r2
 81093e4:	d029      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 81093e6:	687b      	ldr	r3, [r7, #4]
 81093e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81093ec:	681b      	ldr	r3, [r3, #0]
 81093ee:	4a8b      	ldr	r2, [pc, #556]	@ (810961c <HAL_UART_IRQHandler+0x5c4>)
 81093f0:	4293      	cmp	r3, r2
 81093f2:	d022      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 81093f4:	687b      	ldr	r3, [r7, #4]
 81093f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81093fa:	681b      	ldr	r3, [r3, #0]
 81093fc:	4a88      	ldr	r2, [pc, #544]	@ (8109620 <HAL_UART_IRQHandler+0x5c8>)
 81093fe:	4293      	cmp	r3, r2
 8109400:	d01b      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 8109402:	687b      	ldr	r3, [r7, #4]
 8109404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109408:	681b      	ldr	r3, [r3, #0]
 810940a:	4a86      	ldr	r2, [pc, #536]	@ (8109624 <HAL_UART_IRQHandler+0x5cc>)
 810940c:	4293      	cmp	r3, r2
 810940e:	d014      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 8109410:	687b      	ldr	r3, [r7, #4]
 8109412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109416:	681b      	ldr	r3, [r3, #0]
 8109418:	4a83      	ldr	r2, [pc, #524]	@ (8109628 <HAL_UART_IRQHandler+0x5d0>)
 810941a:	4293      	cmp	r3, r2
 810941c:	d00d      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 810941e:	687b      	ldr	r3, [r7, #4]
 8109420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109424:	681b      	ldr	r3, [r3, #0]
 8109426:	4a81      	ldr	r2, [pc, #516]	@ (810962c <HAL_UART_IRQHandler+0x5d4>)
 8109428:	4293      	cmp	r3, r2
 810942a:	d006      	beq.n	810943a <HAL_UART_IRQHandler+0x3e2>
 810942c:	687b      	ldr	r3, [r7, #4]
 810942e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109432:	681b      	ldr	r3, [r3, #0]
 8109434:	4a7e      	ldr	r2, [pc, #504]	@ (8109630 <HAL_UART_IRQHandler+0x5d8>)
 8109436:	4293      	cmp	r3, r2
 8109438:	d106      	bne.n	8109448 <HAL_UART_IRQHandler+0x3f0>
 810943a:	687b      	ldr	r3, [r7, #4]
 810943c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109440:	681b      	ldr	r3, [r3, #0]
 8109442:	685b      	ldr	r3, [r3, #4]
 8109444:	b29b      	uxth	r3, r3
 8109446:	e005      	b.n	8109454 <HAL_UART_IRQHandler+0x3fc>
 8109448:	687b      	ldr	r3, [r7, #4]
 810944a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810944e:	681b      	ldr	r3, [r3, #0]
 8109450:	685b      	ldr	r3, [r3, #4]
 8109452:	b29b      	uxth	r3, r3
 8109454:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8109458:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 810945c:	2b00      	cmp	r3, #0
 810945e:	f000 80ad 	beq.w	81095bc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8109462:	687b      	ldr	r3, [r7, #4]
 8109464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8109468:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810946c:	429a      	cmp	r2, r3
 810946e:	f080 80a5 	bcs.w	81095bc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8109472:	687b      	ldr	r3, [r7, #4]
 8109474:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8109478:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810947c:	687b      	ldr	r3, [r7, #4]
 810947e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109482:	69db      	ldr	r3, [r3, #28]
 8109484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109488:	f000 8087 	beq.w	810959a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810948c:	687b      	ldr	r3, [r7, #4]
 810948e:	681b      	ldr	r3, [r3, #0]
 8109490:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109494:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8109498:	e853 3f00 	ldrex	r3, [r3]
 810949c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 81094a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 81094a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81094a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81094ac:	687b      	ldr	r3, [r7, #4]
 81094ae:	681b      	ldr	r3, [r3, #0]
 81094b0:	461a      	mov	r2, r3
 81094b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 81094b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81094ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81094be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 81094c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 81094c6:	e841 2300 	strex	r3, r2, [r1]
 81094ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 81094ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 81094d2:	2b00      	cmp	r3, #0
 81094d4:	d1da      	bne.n	810948c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81094d6:	687b      	ldr	r3, [r7, #4]
 81094d8:	681b      	ldr	r3, [r3, #0]
 81094da:	3308      	adds	r3, #8
 81094dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81094de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81094e0:	e853 3f00 	ldrex	r3, [r3]
 81094e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 81094e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81094e8:	f023 0301 	bic.w	r3, r3, #1
 81094ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81094f0:	687b      	ldr	r3, [r7, #4]
 81094f2:	681b      	ldr	r3, [r3, #0]
 81094f4:	3308      	adds	r3, #8
 81094f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 81094fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 81094fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109500:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8109502:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8109506:	e841 2300 	strex	r3, r2, [r1]
 810950a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810950c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810950e:	2b00      	cmp	r3, #0
 8109510:	d1e1      	bne.n	81094d6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109512:	687b      	ldr	r3, [r7, #4]
 8109514:	681b      	ldr	r3, [r3, #0]
 8109516:	3308      	adds	r3, #8
 8109518:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810951a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810951c:	e853 3f00 	ldrex	r3, [r3]
 8109520:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8109522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8109524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810952c:	687b      	ldr	r3, [r7, #4]
 810952e:	681b      	ldr	r3, [r3, #0]
 8109530:	3308      	adds	r3, #8
 8109532:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8109536:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8109538:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810953a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810953c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810953e:	e841 2300 	strex	r3, r2, [r1]
 8109542:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8109544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8109546:	2b00      	cmp	r3, #0
 8109548:	d1e3      	bne.n	8109512 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810954a:	687b      	ldr	r3, [r7, #4]
 810954c:	2220      	movs	r2, #32
 810954e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109552:	687b      	ldr	r3, [r7, #4]
 8109554:	2200      	movs	r2, #0
 8109556:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109558:	687b      	ldr	r3, [r7, #4]
 810955a:	681b      	ldr	r3, [r3, #0]
 810955c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810955e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109560:	e853 3f00 	ldrex	r3, [r3]
 8109564:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8109566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109568:	f023 0310 	bic.w	r3, r3, #16
 810956c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8109570:	687b      	ldr	r3, [r7, #4]
 8109572:	681b      	ldr	r3, [r3, #0]
 8109574:	461a      	mov	r2, r3
 8109576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810957a:	65bb      	str	r3, [r7, #88]	@ 0x58
 810957c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810957e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8109580:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8109582:	e841 2300 	strex	r3, r2, [r1]
 8109586:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8109588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810958a:	2b00      	cmp	r3, #0
 810958c:	d1e4      	bne.n	8109558 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810958e:	687b      	ldr	r3, [r7, #4]
 8109590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109594:	4618      	mov	r0, r3
 8109596:	f7fc fb7b 	bl	8105c90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810959a:	687b      	ldr	r3, [r7, #4]
 810959c:	2202      	movs	r2, #2
 810959e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 81095a0:	687b      	ldr	r3, [r7, #4]
 81095a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 81095a6:	687b      	ldr	r3, [r7, #4]
 81095a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 81095ac:	b29b      	uxth	r3, r3
 81095ae:	1ad3      	subs	r3, r2, r3
 81095b0:	b29b      	uxth	r3, r3
 81095b2:	4619      	mov	r1, r3
 81095b4:	6878      	ldr	r0, [r7, #4]
 81095b6:	f000 f939 	bl	810982c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 81095ba:	e11b      	b.n	81097f4 <HAL_UART_IRQHandler+0x79c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 81095bc:	687b      	ldr	r3, [r7, #4]
 81095be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 81095c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 81095c6:	429a      	cmp	r2, r3
 81095c8:	f040 8114 	bne.w	81097f4 <HAL_UART_IRQHandler+0x79c>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 81095cc:	687b      	ldr	r3, [r7, #4]
 81095ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81095d2:	69db      	ldr	r3, [r3, #28]
 81095d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81095d8:	f040 810c 	bne.w	81097f4 <HAL_UART_IRQHandler+0x79c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 81095dc:	687b      	ldr	r3, [r7, #4]
 81095de:	2202      	movs	r2, #2
 81095e0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 81095e2:	687b      	ldr	r3, [r7, #4]
 81095e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 81095e8:	4619      	mov	r1, r3
 81095ea:	6878      	ldr	r0, [r7, #4]
 81095ec:	f000 f91e 	bl	810982c <HAL_UARTEx_RxEventCallback>
      return;
 81095f0:	e100      	b.n	81097f4 <HAL_UART_IRQHandler+0x79c>
 81095f2:	bf00      	nop
 81095f4:	40020010 	.word	0x40020010
 81095f8:	40020028 	.word	0x40020028
 81095fc:	40020040 	.word	0x40020040
 8109600:	40020058 	.word	0x40020058
 8109604:	40020070 	.word	0x40020070
 8109608:	40020088 	.word	0x40020088
 810960c:	400200a0 	.word	0x400200a0
 8109610:	400200b8 	.word	0x400200b8
 8109614:	40020410 	.word	0x40020410
 8109618:	40020428 	.word	0x40020428
 810961c:	40020440 	.word	0x40020440
 8109620:	40020458 	.word	0x40020458
 8109624:	40020470 	.word	0x40020470
 8109628:	40020488 	.word	0x40020488
 810962c:	400204a0 	.word	0x400204a0
 8109630:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8109634:	687b      	ldr	r3, [r7, #4]
 8109636:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810963a:	687b      	ldr	r3, [r7, #4]
 810963c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8109640:	b29b      	uxth	r3, r3
 8109642:	1ad3      	subs	r3, r2, r3
 8109644:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8109648:	687b      	ldr	r3, [r7, #4]
 810964a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810964e:	b29b      	uxth	r3, r3
 8109650:	2b00      	cmp	r3, #0
 8109652:	f000 80d1 	beq.w	81097f8 <HAL_UART_IRQHandler+0x7a0>
          && (nb_rx_data > 0U))
 8109656:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810965a:	2b00      	cmp	r3, #0
 810965c:	f000 80cc 	beq.w	81097f8 <HAL_UART_IRQHandler+0x7a0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109660:	687b      	ldr	r3, [r7, #4]
 8109662:	681b      	ldr	r3, [r3, #0]
 8109664:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109668:	e853 3f00 	ldrex	r3, [r3]
 810966c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810966e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8109674:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8109678:	687b      	ldr	r3, [r7, #4]
 810967a:	681b      	ldr	r3, [r3, #0]
 810967c:	461a      	mov	r2, r3
 810967e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8109682:	647b      	str	r3, [r7, #68]	@ 0x44
 8109684:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109686:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8109688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810968a:	e841 2300 	strex	r3, r2, [r1]
 810968e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8109690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109692:	2b00      	cmp	r3, #0
 8109694:	d1e4      	bne.n	8109660 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8109696:	687b      	ldr	r3, [r7, #4]
 8109698:	681b      	ldr	r3, [r3, #0]
 810969a:	3308      	adds	r3, #8
 810969c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810969e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81096a0:	e853 3f00 	ldrex	r3, [r3]
 81096a4:	623b      	str	r3, [r7, #32]
   return(result);
 81096a6:	6a3b      	ldr	r3, [r7, #32]
 81096a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81096ac:	f023 0301 	bic.w	r3, r3, #1
 81096b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81096b4:	687b      	ldr	r3, [r7, #4]
 81096b6:	681b      	ldr	r3, [r3, #0]
 81096b8:	3308      	adds	r3, #8
 81096ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 81096be:	633a      	str	r2, [r7, #48]	@ 0x30
 81096c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81096c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81096c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81096c6:	e841 2300 	strex	r3, r2, [r1]
 81096ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 81096cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81096ce:	2b00      	cmp	r3, #0
 81096d0:	d1e1      	bne.n	8109696 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 81096d2:	687b      	ldr	r3, [r7, #4]
 81096d4:	2220      	movs	r2, #32
 81096d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81096da:	687b      	ldr	r3, [r7, #4]
 81096dc:	2200      	movs	r2, #0
 81096de:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 81096e0:	687b      	ldr	r3, [r7, #4]
 81096e2:	2200      	movs	r2, #0
 81096e4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81096e6:	687b      	ldr	r3, [r7, #4]
 81096e8:	681b      	ldr	r3, [r3, #0]
 81096ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81096ec:	693b      	ldr	r3, [r7, #16]
 81096ee:	e853 3f00 	ldrex	r3, [r3]
 81096f2:	60fb      	str	r3, [r7, #12]
   return(result);
 81096f4:	68fb      	ldr	r3, [r7, #12]
 81096f6:	f023 0310 	bic.w	r3, r3, #16
 81096fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 81096fe:	687b      	ldr	r3, [r7, #4]
 8109700:	681b      	ldr	r3, [r3, #0]
 8109702:	461a      	mov	r2, r3
 8109704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8109708:	61fb      	str	r3, [r7, #28]
 810970a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810970c:	69b9      	ldr	r1, [r7, #24]
 810970e:	69fa      	ldr	r2, [r7, #28]
 8109710:	e841 2300 	strex	r3, r2, [r1]
 8109714:	617b      	str	r3, [r7, #20]
   return(result);
 8109716:	697b      	ldr	r3, [r7, #20]
 8109718:	2b00      	cmp	r3, #0
 810971a:	d1e4      	bne.n	81096e6 <HAL_UART_IRQHandler+0x68e>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810971c:	687b      	ldr	r3, [r7, #4]
 810971e:	2202      	movs	r2, #2
 8109720:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8109722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8109726:	4619      	mov	r1, r3
 8109728:	6878      	ldr	r0, [r7, #4]
 810972a:	f000 f87f 	bl	810982c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810972e:	e063      	b.n	81097f8 <HAL_UART_IRQHandler+0x7a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8109730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109734:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8109738:	2b00      	cmp	r3, #0
 810973a:	d00e      	beq.n	810975a <HAL_UART_IRQHandler+0x702>
 810973c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109740:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8109744:	2b00      	cmp	r3, #0
 8109746:	d008      	beq.n	810975a <HAL_UART_IRQHandler+0x702>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8109748:	687b      	ldr	r3, [r7, #4]
 810974a:	681b      	ldr	r3, [r3, #0]
 810974c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8109750:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8109752:	6878      	ldr	r0, [r7, #4]
 8109754:	f001 fe7e 	bl	810b454 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8109758:	e051      	b.n	81097fe <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810975a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810975e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109762:	2b00      	cmp	r3, #0
 8109764:	d014      	beq.n	8109790 <HAL_UART_IRQHandler+0x738>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8109766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810976a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810976e:	2b00      	cmp	r3, #0
 8109770:	d105      	bne.n	810977e <HAL_UART_IRQHandler+0x726>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8109772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109776:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810977a:	2b00      	cmp	r3, #0
 810977c:	d008      	beq.n	8109790 <HAL_UART_IRQHandler+0x738>
  {
    if (huart->TxISR != NULL)
 810977e:	687b      	ldr	r3, [r7, #4]
 8109780:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8109782:	2b00      	cmp	r3, #0
 8109784:	d03a      	beq.n	81097fc <HAL_UART_IRQHandler+0x7a4>
    {
      huart->TxISR(huart);
 8109786:	687b      	ldr	r3, [r7, #4]
 8109788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810978a:	6878      	ldr	r0, [r7, #4]
 810978c:	4798      	blx	r3
    }
    return;
 810978e:	e035      	b.n	81097fc <HAL_UART_IRQHandler+0x7a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8109790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109798:	2b00      	cmp	r3, #0
 810979a:	d009      	beq.n	81097b0 <HAL_UART_IRQHandler+0x758>
 810979c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81097a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81097a4:	2b00      	cmp	r3, #0
 81097a6:	d003      	beq.n	81097b0 <HAL_UART_IRQHandler+0x758>
  {
    UART_EndTransmit_IT(huart);
 81097a8:	6878      	ldr	r0, [r7, #4]
 81097aa:	f001 f907 	bl	810a9bc <UART_EndTransmit_IT>
    return;
 81097ae:	e026      	b.n	81097fe <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 81097b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81097b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81097b8:	2b00      	cmp	r3, #0
 81097ba:	d009      	beq.n	81097d0 <HAL_UART_IRQHandler+0x778>
 81097bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81097c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 81097c4:	2b00      	cmp	r3, #0
 81097c6:	d003      	beq.n	81097d0 <HAL_UART_IRQHandler+0x778>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 81097c8:	6878      	ldr	r0, [r7, #4]
 81097ca:	f001 fe57 	bl	810b47c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 81097ce:	e016      	b.n	81097fe <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 81097d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81097d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 81097d8:	2b00      	cmp	r3, #0
 81097da:	d010      	beq.n	81097fe <HAL_UART_IRQHandler+0x7a6>
 81097dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81097e0:	2b00      	cmp	r3, #0
 81097e2:	da0c      	bge.n	81097fe <HAL_UART_IRQHandler+0x7a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 81097e4:	6878      	ldr	r0, [r7, #4]
 81097e6:	f001 fe3f 	bl	810b468 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 81097ea:	e008      	b.n	81097fe <HAL_UART_IRQHandler+0x7a6>
      return;
 81097ec:	bf00      	nop
 81097ee:	e006      	b.n	81097fe <HAL_UART_IRQHandler+0x7a6>
    return;
 81097f0:	bf00      	nop
 81097f2:	e004      	b.n	81097fe <HAL_UART_IRQHandler+0x7a6>
      return;
 81097f4:	bf00      	nop
 81097f6:	e002      	b.n	81097fe <HAL_UART_IRQHandler+0x7a6>
      return;
 81097f8:	bf00      	nop
 81097fa:	e000      	b.n	81097fe <HAL_UART_IRQHandler+0x7a6>
    return;
 81097fc:	bf00      	nop
  }
}
 81097fe:	37e8      	adds	r7, #232	@ 0xe8
 8109800:	46bd      	mov	sp, r7
 8109802:	bd80      	pop	{r7, pc}

08109804 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8109804:	b480      	push	{r7}
 8109806:	b083      	sub	sp, #12
 8109808:	af00      	add	r7, sp, #0
 810980a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810980c:	bf00      	nop
 810980e:	370c      	adds	r7, #12
 8109810:	46bd      	mov	sp, r7
 8109812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109816:	4770      	bx	lr

08109818 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8109818:	b480      	push	{r7}
 810981a:	b083      	sub	sp, #12
 810981c:	af00      	add	r7, sp, #0
 810981e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8109820:	bf00      	nop
 8109822:	370c      	adds	r7, #12
 8109824:	46bd      	mov	sp, r7
 8109826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810982a:	4770      	bx	lr

0810982c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810982c:	b480      	push	{r7}
 810982e:	b083      	sub	sp, #12
 8109830:	af00      	add	r7, sp, #0
 8109832:	6078      	str	r0, [r7, #4]
 8109834:	460b      	mov	r3, r1
 8109836:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8109838:	bf00      	nop
 810983a:	370c      	adds	r7, #12
 810983c:	46bd      	mov	sp, r7
 810983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109842:	4770      	bx	lr

08109844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8109844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109848:	b092      	sub	sp, #72	@ 0x48
 810984a:	af00      	add	r7, sp, #0
 810984c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810984e:	2300      	movs	r3, #0
 8109850:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8109854:	697b      	ldr	r3, [r7, #20]
 8109856:	689a      	ldr	r2, [r3, #8]
 8109858:	697b      	ldr	r3, [r7, #20]
 810985a:	691b      	ldr	r3, [r3, #16]
 810985c:	431a      	orrs	r2, r3
 810985e:	697b      	ldr	r3, [r7, #20]
 8109860:	695b      	ldr	r3, [r3, #20]
 8109862:	431a      	orrs	r2, r3
 8109864:	697b      	ldr	r3, [r7, #20]
 8109866:	69db      	ldr	r3, [r3, #28]
 8109868:	4313      	orrs	r3, r2
 810986a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810986c:	697b      	ldr	r3, [r7, #20]
 810986e:	681b      	ldr	r3, [r3, #0]
 8109870:	681a      	ldr	r2, [r3, #0]
 8109872:	4bbd      	ldr	r3, [pc, #756]	@ (8109b68 <UART_SetConfig+0x324>)
 8109874:	4013      	ands	r3, r2
 8109876:	697a      	ldr	r2, [r7, #20]
 8109878:	6812      	ldr	r2, [r2, #0]
 810987a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810987c:	430b      	orrs	r3, r1
 810987e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8109880:	697b      	ldr	r3, [r7, #20]
 8109882:	681b      	ldr	r3, [r3, #0]
 8109884:	685b      	ldr	r3, [r3, #4]
 8109886:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810988a:	697b      	ldr	r3, [r7, #20]
 810988c:	68da      	ldr	r2, [r3, #12]
 810988e:	697b      	ldr	r3, [r7, #20]
 8109890:	681b      	ldr	r3, [r3, #0]
 8109892:	430a      	orrs	r2, r1
 8109894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8109896:	697b      	ldr	r3, [r7, #20]
 8109898:	699b      	ldr	r3, [r3, #24]
 810989a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810989c:	697b      	ldr	r3, [r7, #20]
 810989e:	681b      	ldr	r3, [r3, #0]
 81098a0:	4ab2      	ldr	r2, [pc, #712]	@ (8109b6c <UART_SetConfig+0x328>)
 81098a2:	4293      	cmp	r3, r2
 81098a4:	d004      	beq.n	81098b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81098a6:	697b      	ldr	r3, [r7, #20]
 81098a8:	6a1b      	ldr	r3, [r3, #32]
 81098aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81098ac:	4313      	orrs	r3, r2
 81098ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81098b0:	697b      	ldr	r3, [r7, #20]
 81098b2:	681b      	ldr	r3, [r3, #0]
 81098b4:	689b      	ldr	r3, [r3, #8]
 81098b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 81098ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 81098be:	697a      	ldr	r2, [r7, #20]
 81098c0:	6812      	ldr	r2, [r2, #0]
 81098c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81098c4:	430b      	orrs	r3, r1
 81098c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81098c8:	697b      	ldr	r3, [r7, #20]
 81098ca:	681b      	ldr	r3, [r3, #0]
 81098cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81098ce:	f023 010f 	bic.w	r1, r3, #15
 81098d2:	697b      	ldr	r3, [r7, #20]
 81098d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81098d6:	697b      	ldr	r3, [r7, #20]
 81098d8:	681b      	ldr	r3, [r3, #0]
 81098da:	430a      	orrs	r2, r1
 81098dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81098de:	697b      	ldr	r3, [r7, #20]
 81098e0:	681b      	ldr	r3, [r3, #0]
 81098e2:	4aa3      	ldr	r2, [pc, #652]	@ (8109b70 <UART_SetConfig+0x32c>)
 81098e4:	4293      	cmp	r3, r2
 81098e6:	d177      	bne.n	81099d8 <UART_SetConfig+0x194>
 81098e8:	4ba2      	ldr	r3, [pc, #648]	@ (8109b74 <UART_SetConfig+0x330>)
 81098ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81098ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81098f0:	2b28      	cmp	r3, #40	@ 0x28
 81098f2:	d86d      	bhi.n	81099d0 <UART_SetConfig+0x18c>
 81098f4:	a201      	add	r2, pc, #4	@ (adr r2, 81098fc <UART_SetConfig+0xb8>)
 81098f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81098fa:	bf00      	nop
 81098fc:	081099a1 	.word	0x081099a1
 8109900:	081099d1 	.word	0x081099d1
 8109904:	081099d1 	.word	0x081099d1
 8109908:	081099d1 	.word	0x081099d1
 810990c:	081099d1 	.word	0x081099d1
 8109910:	081099d1 	.word	0x081099d1
 8109914:	081099d1 	.word	0x081099d1
 8109918:	081099d1 	.word	0x081099d1
 810991c:	081099a9 	.word	0x081099a9
 8109920:	081099d1 	.word	0x081099d1
 8109924:	081099d1 	.word	0x081099d1
 8109928:	081099d1 	.word	0x081099d1
 810992c:	081099d1 	.word	0x081099d1
 8109930:	081099d1 	.word	0x081099d1
 8109934:	081099d1 	.word	0x081099d1
 8109938:	081099d1 	.word	0x081099d1
 810993c:	081099b1 	.word	0x081099b1
 8109940:	081099d1 	.word	0x081099d1
 8109944:	081099d1 	.word	0x081099d1
 8109948:	081099d1 	.word	0x081099d1
 810994c:	081099d1 	.word	0x081099d1
 8109950:	081099d1 	.word	0x081099d1
 8109954:	081099d1 	.word	0x081099d1
 8109958:	081099d1 	.word	0x081099d1
 810995c:	081099b9 	.word	0x081099b9
 8109960:	081099d1 	.word	0x081099d1
 8109964:	081099d1 	.word	0x081099d1
 8109968:	081099d1 	.word	0x081099d1
 810996c:	081099d1 	.word	0x081099d1
 8109970:	081099d1 	.word	0x081099d1
 8109974:	081099d1 	.word	0x081099d1
 8109978:	081099d1 	.word	0x081099d1
 810997c:	081099c1 	.word	0x081099c1
 8109980:	081099d1 	.word	0x081099d1
 8109984:	081099d1 	.word	0x081099d1
 8109988:	081099d1 	.word	0x081099d1
 810998c:	081099d1 	.word	0x081099d1
 8109990:	081099d1 	.word	0x081099d1
 8109994:	081099d1 	.word	0x081099d1
 8109998:	081099d1 	.word	0x081099d1
 810999c:	081099c9 	.word	0x081099c9
 81099a0:	2301      	movs	r3, #1
 81099a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81099a6:	e220      	b.n	8109dea <UART_SetConfig+0x5a6>
 81099a8:	2304      	movs	r3, #4
 81099aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81099ae:	e21c      	b.n	8109dea <UART_SetConfig+0x5a6>
 81099b0:	2308      	movs	r3, #8
 81099b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81099b6:	e218      	b.n	8109dea <UART_SetConfig+0x5a6>
 81099b8:	2310      	movs	r3, #16
 81099ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81099be:	e214      	b.n	8109dea <UART_SetConfig+0x5a6>
 81099c0:	2320      	movs	r3, #32
 81099c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81099c6:	e210      	b.n	8109dea <UART_SetConfig+0x5a6>
 81099c8:	2340      	movs	r3, #64	@ 0x40
 81099ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81099ce:	e20c      	b.n	8109dea <UART_SetConfig+0x5a6>
 81099d0:	2380      	movs	r3, #128	@ 0x80
 81099d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81099d6:	e208      	b.n	8109dea <UART_SetConfig+0x5a6>
 81099d8:	697b      	ldr	r3, [r7, #20]
 81099da:	681b      	ldr	r3, [r3, #0]
 81099dc:	4a66      	ldr	r2, [pc, #408]	@ (8109b78 <UART_SetConfig+0x334>)
 81099de:	4293      	cmp	r3, r2
 81099e0:	d130      	bne.n	8109a44 <UART_SetConfig+0x200>
 81099e2:	4b64      	ldr	r3, [pc, #400]	@ (8109b74 <UART_SetConfig+0x330>)
 81099e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81099e6:	f003 0307 	and.w	r3, r3, #7
 81099ea:	2b05      	cmp	r3, #5
 81099ec:	d826      	bhi.n	8109a3c <UART_SetConfig+0x1f8>
 81099ee:	a201      	add	r2, pc, #4	@ (adr r2, 81099f4 <UART_SetConfig+0x1b0>)
 81099f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81099f4:	08109a0d 	.word	0x08109a0d
 81099f8:	08109a15 	.word	0x08109a15
 81099fc:	08109a1d 	.word	0x08109a1d
 8109a00:	08109a25 	.word	0x08109a25
 8109a04:	08109a2d 	.word	0x08109a2d
 8109a08:	08109a35 	.word	0x08109a35
 8109a0c:	2300      	movs	r3, #0
 8109a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109a12:	e1ea      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109a14:	2304      	movs	r3, #4
 8109a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109a1a:	e1e6      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109a1c:	2308      	movs	r3, #8
 8109a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109a22:	e1e2      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109a24:	2310      	movs	r3, #16
 8109a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109a2a:	e1de      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109a2c:	2320      	movs	r3, #32
 8109a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109a32:	e1da      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109a34:	2340      	movs	r3, #64	@ 0x40
 8109a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109a3a:	e1d6      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109a3c:	2380      	movs	r3, #128	@ 0x80
 8109a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109a42:	e1d2      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109a44:	697b      	ldr	r3, [r7, #20]
 8109a46:	681b      	ldr	r3, [r3, #0]
 8109a48:	4a4c      	ldr	r2, [pc, #304]	@ (8109b7c <UART_SetConfig+0x338>)
 8109a4a:	4293      	cmp	r3, r2
 8109a4c:	d130      	bne.n	8109ab0 <UART_SetConfig+0x26c>
 8109a4e:	4b49      	ldr	r3, [pc, #292]	@ (8109b74 <UART_SetConfig+0x330>)
 8109a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109a52:	f003 0307 	and.w	r3, r3, #7
 8109a56:	2b05      	cmp	r3, #5
 8109a58:	d826      	bhi.n	8109aa8 <UART_SetConfig+0x264>
 8109a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8109a60 <UART_SetConfig+0x21c>)
 8109a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109a60:	08109a79 	.word	0x08109a79
 8109a64:	08109a81 	.word	0x08109a81
 8109a68:	08109a89 	.word	0x08109a89
 8109a6c:	08109a91 	.word	0x08109a91
 8109a70:	08109a99 	.word	0x08109a99
 8109a74:	08109aa1 	.word	0x08109aa1
 8109a78:	2300      	movs	r3, #0
 8109a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109a7e:	e1b4      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109a80:	2304      	movs	r3, #4
 8109a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109a86:	e1b0      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109a88:	2308      	movs	r3, #8
 8109a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109a8e:	e1ac      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109a90:	2310      	movs	r3, #16
 8109a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109a96:	e1a8      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109a98:	2320      	movs	r3, #32
 8109a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109a9e:	e1a4      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109aa0:	2340      	movs	r3, #64	@ 0x40
 8109aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109aa6:	e1a0      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109aa8:	2380      	movs	r3, #128	@ 0x80
 8109aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109aae:	e19c      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109ab0:	697b      	ldr	r3, [r7, #20]
 8109ab2:	681b      	ldr	r3, [r3, #0]
 8109ab4:	4a32      	ldr	r2, [pc, #200]	@ (8109b80 <UART_SetConfig+0x33c>)
 8109ab6:	4293      	cmp	r3, r2
 8109ab8:	d130      	bne.n	8109b1c <UART_SetConfig+0x2d8>
 8109aba:	4b2e      	ldr	r3, [pc, #184]	@ (8109b74 <UART_SetConfig+0x330>)
 8109abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109abe:	f003 0307 	and.w	r3, r3, #7
 8109ac2:	2b05      	cmp	r3, #5
 8109ac4:	d826      	bhi.n	8109b14 <UART_SetConfig+0x2d0>
 8109ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8109acc <UART_SetConfig+0x288>)
 8109ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109acc:	08109ae5 	.word	0x08109ae5
 8109ad0:	08109aed 	.word	0x08109aed
 8109ad4:	08109af5 	.word	0x08109af5
 8109ad8:	08109afd 	.word	0x08109afd
 8109adc:	08109b05 	.word	0x08109b05
 8109ae0:	08109b0d 	.word	0x08109b0d
 8109ae4:	2300      	movs	r3, #0
 8109ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109aea:	e17e      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109aec:	2304      	movs	r3, #4
 8109aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109af2:	e17a      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109af4:	2308      	movs	r3, #8
 8109af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109afa:	e176      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109afc:	2310      	movs	r3, #16
 8109afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109b02:	e172      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109b04:	2320      	movs	r3, #32
 8109b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109b0a:	e16e      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109b0c:	2340      	movs	r3, #64	@ 0x40
 8109b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109b12:	e16a      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109b14:	2380      	movs	r3, #128	@ 0x80
 8109b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109b1a:	e166      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109b1c:	697b      	ldr	r3, [r7, #20]
 8109b1e:	681b      	ldr	r3, [r3, #0]
 8109b20:	4a18      	ldr	r2, [pc, #96]	@ (8109b84 <UART_SetConfig+0x340>)
 8109b22:	4293      	cmp	r3, r2
 8109b24:	d140      	bne.n	8109ba8 <UART_SetConfig+0x364>
 8109b26:	4b13      	ldr	r3, [pc, #76]	@ (8109b74 <UART_SetConfig+0x330>)
 8109b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109b2a:	f003 0307 	and.w	r3, r3, #7
 8109b2e:	2b05      	cmp	r3, #5
 8109b30:	d836      	bhi.n	8109ba0 <UART_SetConfig+0x35c>
 8109b32:	a201      	add	r2, pc, #4	@ (adr r2, 8109b38 <UART_SetConfig+0x2f4>)
 8109b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109b38:	08109b51 	.word	0x08109b51
 8109b3c:	08109b59 	.word	0x08109b59
 8109b40:	08109b61 	.word	0x08109b61
 8109b44:	08109b89 	.word	0x08109b89
 8109b48:	08109b91 	.word	0x08109b91
 8109b4c:	08109b99 	.word	0x08109b99
 8109b50:	2300      	movs	r3, #0
 8109b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109b56:	e148      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109b58:	2304      	movs	r3, #4
 8109b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109b5e:	e144      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109b60:	2308      	movs	r3, #8
 8109b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109b66:	e140      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109b68:	cfff69f3 	.word	0xcfff69f3
 8109b6c:	58000c00 	.word	0x58000c00
 8109b70:	40011000 	.word	0x40011000
 8109b74:	58024400 	.word	0x58024400
 8109b78:	40004400 	.word	0x40004400
 8109b7c:	40004800 	.word	0x40004800
 8109b80:	40004c00 	.word	0x40004c00
 8109b84:	40005000 	.word	0x40005000
 8109b88:	2310      	movs	r3, #16
 8109b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109b8e:	e12c      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109b90:	2320      	movs	r3, #32
 8109b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109b96:	e128      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109b98:	2340      	movs	r3, #64	@ 0x40
 8109b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109b9e:	e124      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109ba0:	2380      	movs	r3, #128	@ 0x80
 8109ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109ba6:	e120      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109ba8:	697b      	ldr	r3, [r7, #20]
 8109baa:	681b      	ldr	r3, [r3, #0]
 8109bac:	4acb      	ldr	r2, [pc, #812]	@ (8109edc <UART_SetConfig+0x698>)
 8109bae:	4293      	cmp	r3, r2
 8109bb0:	d176      	bne.n	8109ca0 <UART_SetConfig+0x45c>
 8109bb2:	4bcb      	ldr	r3, [pc, #812]	@ (8109ee0 <UART_SetConfig+0x69c>)
 8109bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109bb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8109bba:	2b28      	cmp	r3, #40	@ 0x28
 8109bbc:	d86c      	bhi.n	8109c98 <UART_SetConfig+0x454>
 8109bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8109bc4 <UART_SetConfig+0x380>)
 8109bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109bc4:	08109c69 	.word	0x08109c69
 8109bc8:	08109c99 	.word	0x08109c99
 8109bcc:	08109c99 	.word	0x08109c99
 8109bd0:	08109c99 	.word	0x08109c99
 8109bd4:	08109c99 	.word	0x08109c99
 8109bd8:	08109c99 	.word	0x08109c99
 8109bdc:	08109c99 	.word	0x08109c99
 8109be0:	08109c99 	.word	0x08109c99
 8109be4:	08109c71 	.word	0x08109c71
 8109be8:	08109c99 	.word	0x08109c99
 8109bec:	08109c99 	.word	0x08109c99
 8109bf0:	08109c99 	.word	0x08109c99
 8109bf4:	08109c99 	.word	0x08109c99
 8109bf8:	08109c99 	.word	0x08109c99
 8109bfc:	08109c99 	.word	0x08109c99
 8109c00:	08109c99 	.word	0x08109c99
 8109c04:	08109c79 	.word	0x08109c79
 8109c08:	08109c99 	.word	0x08109c99
 8109c0c:	08109c99 	.word	0x08109c99
 8109c10:	08109c99 	.word	0x08109c99
 8109c14:	08109c99 	.word	0x08109c99
 8109c18:	08109c99 	.word	0x08109c99
 8109c1c:	08109c99 	.word	0x08109c99
 8109c20:	08109c99 	.word	0x08109c99
 8109c24:	08109c81 	.word	0x08109c81
 8109c28:	08109c99 	.word	0x08109c99
 8109c2c:	08109c99 	.word	0x08109c99
 8109c30:	08109c99 	.word	0x08109c99
 8109c34:	08109c99 	.word	0x08109c99
 8109c38:	08109c99 	.word	0x08109c99
 8109c3c:	08109c99 	.word	0x08109c99
 8109c40:	08109c99 	.word	0x08109c99
 8109c44:	08109c89 	.word	0x08109c89
 8109c48:	08109c99 	.word	0x08109c99
 8109c4c:	08109c99 	.word	0x08109c99
 8109c50:	08109c99 	.word	0x08109c99
 8109c54:	08109c99 	.word	0x08109c99
 8109c58:	08109c99 	.word	0x08109c99
 8109c5c:	08109c99 	.word	0x08109c99
 8109c60:	08109c99 	.word	0x08109c99
 8109c64:	08109c91 	.word	0x08109c91
 8109c68:	2301      	movs	r3, #1
 8109c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c6e:	e0bc      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109c70:	2304      	movs	r3, #4
 8109c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c76:	e0b8      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109c78:	2308      	movs	r3, #8
 8109c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c7e:	e0b4      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109c80:	2310      	movs	r3, #16
 8109c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c86:	e0b0      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109c88:	2320      	movs	r3, #32
 8109c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c8e:	e0ac      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109c90:	2340      	movs	r3, #64	@ 0x40
 8109c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c96:	e0a8      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109c98:	2380      	movs	r3, #128	@ 0x80
 8109c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c9e:	e0a4      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109ca0:	697b      	ldr	r3, [r7, #20]
 8109ca2:	681b      	ldr	r3, [r3, #0]
 8109ca4:	4a8f      	ldr	r2, [pc, #572]	@ (8109ee4 <UART_SetConfig+0x6a0>)
 8109ca6:	4293      	cmp	r3, r2
 8109ca8:	d130      	bne.n	8109d0c <UART_SetConfig+0x4c8>
 8109caa:	4b8d      	ldr	r3, [pc, #564]	@ (8109ee0 <UART_SetConfig+0x69c>)
 8109cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109cae:	f003 0307 	and.w	r3, r3, #7
 8109cb2:	2b05      	cmp	r3, #5
 8109cb4:	d826      	bhi.n	8109d04 <UART_SetConfig+0x4c0>
 8109cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8109cbc <UART_SetConfig+0x478>)
 8109cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109cbc:	08109cd5 	.word	0x08109cd5
 8109cc0:	08109cdd 	.word	0x08109cdd
 8109cc4:	08109ce5 	.word	0x08109ce5
 8109cc8:	08109ced 	.word	0x08109ced
 8109ccc:	08109cf5 	.word	0x08109cf5
 8109cd0:	08109cfd 	.word	0x08109cfd
 8109cd4:	2300      	movs	r3, #0
 8109cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cda:	e086      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109cdc:	2304      	movs	r3, #4
 8109cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109ce2:	e082      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109ce4:	2308      	movs	r3, #8
 8109ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cea:	e07e      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109cec:	2310      	movs	r3, #16
 8109cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cf2:	e07a      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109cf4:	2320      	movs	r3, #32
 8109cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cfa:	e076      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109cfc:	2340      	movs	r3, #64	@ 0x40
 8109cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d02:	e072      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109d04:	2380      	movs	r3, #128	@ 0x80
 8109d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d0a:	e06e      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109d0c:	697b      	ldr	r3, [r7, #20]
 8109d0e:	681b      	ldr	r3, [r3, #0]
 8109d10:	4a75      	ldr	r2, [pc, #468]	@ (8109ee8 <UART_SetConfig+0x6a4>)
 8109d12:	4293      	cmp	r3, r2
 8109d14:	d130      	bne.n	8109d78 <UART_SetConfig+0x534>
 8109d16:	4b72      	ldr	r3, [pc, #456]	@ (8109ee0 <UART_SetConfig+0x69c>)
 8109d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109d1a:	f003 0307 	and.w	r3, r3, #7
 8109d1e:	2b05      	cmp	r3, #5
 8109d20:	d826      	bhi.n	8109d70 <UART_SetConfig+0x52c>
 8109d22:	a201      	add	r2, pc, #4	@ (adr r2, 8109d28 <UART_SetConfig+0x4e4>)
 8109d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109d28:	08109d41 	.word	0x08109d41
 8109d2c:	08109d49 	.word	0x08109d49
 8109d30:	08109d51 	.word	0x08109d51
 8109d34:	08109d59 	.word	0x08109d59
 8109d38:	08109d61 	.word	0x08109d61
 8109d3c:	08109d69 	.word	0x08109d69
 8109d40:	2300      	movs	r3, #0
 8109d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d46:	e050      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109d48:	2304      	movs	r3, #4
 8109d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d4e:	e04c      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109d50:	2308      	movs	r3, #8
 8109d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d56:	e048      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109d58:	2310      	movs	r3, #16
 8109d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d5e:	e044      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109d60:	2320      	movs	r3, #32
 8109d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d66:	e040      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109d68:	2340      	movs	r3, #64	@ 0x40
 8109d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d6e:	e03c      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109d70:	2380      	movs	r3, #128	@ 0x80
 8109d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d76:	e038      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109d78:	697b      	ldr	r3, [r7, #20]
 8109d7a:	681b      	ldr	r3, [r3, #0]
 8109d7c:	4a5b      	ldr	r2, [pc, #364]	@ (8109eec <UART_SetConfig+0x6a8>)
 8109d7e:	4293      	cmp	r3, r2
 8109d80:	d130      	bne.n	8109de4 <UART_SetConfig+0x5a0>
 8109d82:	4b57      	ldr	r3, [pc, #348]	@ (8109ee0 <UART_SetConfig+0x69c>)
 8109d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109d86:	f003 0307 	and.w	r3, r3, #7
 8109d8a:	2b05      	cmp	r3, #5
 8109d8c:	d826      	bhi.n	8109ddc <UART_SetConfig+0x598>
 8109d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8109d94 <UART_SetConfig+0x550>)
 8109d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109d94:	08109dad 	.word	0x08109dad
 8109d98:	08109db5 	.word	0x08109db5
 8109d9c:	08109dbd 	.word	0x08109dbd
 8109da0:	08109dc5 	.word	0x08109dc5
 8109da4:	08109dcd 	.word	0x08109dcd
 8109da8:	08109dd5 	.word	0x08109dd5
 8109dac:	2302      	movs	r3, #2
 8109dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109db2:	e01a      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109db4:	2304      	movs	r3, #4
 8109db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109dba:	e016      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109dbc:	2308      	movs	r3, #8
 8109dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109dc2:	e012      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109dc4:	2310      	movs	r3, #16
 8109dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109dca:	e00e      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109dcc:	2320      	movs	r3, #32
 8109dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109dd2:	e00a      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109dd4:	2340      	movs	r3, #64	@ 0x40
 8109dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109dda:	e006      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109ddc:	2380      	movs	r3, #128	@ 0x80
 8109dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109de2:	e002      	b.n	8109dea <UART_SetConfig+0x5a6>
 8109de4:	2380      	movs	r3, #128	@ 0x80
 8109de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8109dea:	697b      	ldr	r3, [r7, #20]
 8109dec:	681b      	ldr	r3, [r3, #0]
 8109dee:	4a3f      	ldr	r2, [pc, #252]	@ (8109eec <UART_SetConfig+0x6a8>)
 8109df0:	4293      	cmp	r3, r2
 8109df2:	f040 80f8 	bne.w	8109fe6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8109df6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8109dfa:	2b20      	cmp	r3, #32
 8109dfc:	dc46      	bgt.n	8109e8c <UART_SetConfig+0x648>
 8109dfe:	2b02      	cmp	r3, #2
 8109e00:	f2c0 8082 	blt.w	8109f08 <UART_SetConfig+0x6c4>
 8109e04:	3b02      	subs	r3, #2
 8109e06:	2b1e      	cmp	r3, #30
 8109e08:	d87e      	bhi.n	8109f08 <UART_SetConfig+0x6c4>
 8109e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8109e10 <UART_SetConfig+0x5cc>)
 8109e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109e10:	08109e93 	.word	0x08109e93
 8109e14:	08109f09 	.word	0x08109f09
 8109e18:	08109e9b 	.word	0x08109e9b
 8109e1c:	08109f09 	.word	0x08109f09
 8109e20:	08109f09 	.word	0x08109f09
 8109e24:	08109f09 	.word	0x08109f09
 8109e28:	08109eab 	.word	0x08109eab
 8109e2c:	08109f09 	.word	0x08109f09
 8109e30:	08109f09 	.word	0x08109f09
 8109e34:	08109f09 	.word	0x08109f09
 8109e38:	08109f09 	.word	0x08109f09
 8109e3c:	08109f09 	.word	0x08109f09
 8109e40:	08109f09 	.word	0x08109f09
 8109e44:	08109f09 	.word	0x08109f09
 8109e48:	08109ebb 	.word	0x08109ebb
 8109e4c:	08109f09 	.word	0x08109f09
 8109e50:	08109f09 	.word	0x08109f09
 8109e54:	08109f09 	.word	0x08109f09
 8109e58:	08109f09 	.word	0x08109f09
 8109e5c:	08109f09 	.word	0x08109f09
 8109e60:	08109f09 	.word	0x08109f09
 8109e64:	08109f09 	.word	0x08109f09
 8109e68:	08109f09 	.word	0x08109f09
 8109e6c:	08109f09 	.word	0x08109f09
 8109e70:	08109f09 	.word	0x08109f09
 8109e74:	08109f09 	.word	0x08109f09
 8109e78:	08109f09 	.word	0x08109f09
 8109e7c:	08109f09 	.word	0x08109f09
 8109e80:	08109f09 	.word	0x08109f09
 8109e84:	08109f09 	.word	0x08109f09
 8109e88:	08109efb 	.word	0x08109efb
 8109e8c:	2b40      	cmp	r3, #64	@ 0x40
 8109e8e:	d037      	beq.n	8109f00 <UART_SetConfig+0x6bc>
 8109e90:	e03a      	b.n	8109f08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8109e92:	f7fe fa55 	bl	8108340 <HAL_RCCEx_GetD3PCLK1Freq>
 8109e96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109e98:	e03c      	b.n	8109f14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109e9e:	4618      	mov	r0, r3
 8109ea0:	f7fe fa64 	bl	810836c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109ea8:	e034      	b.n	8109f14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109eaa:	f107 0318 	add.w	r3, r7, #24
 8109eae:	4618      	mov	r0, r3
 8109eb0:	f7fe fbb0 	bl	8108614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109eb4:	69fb      	ldr	r3, [r7, #28]
 8109eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109eb8:	e02c      	b.n	8109f14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109eba:	4b09      	ldr	r3, [pc, #36]	@ (8109ee0 <UART_SetConfig+0x69c>)
 8109ebc:	681b      	ldr	r3, [r3, #0]
 8109ebe:	f003 0320 	and.w	r3, r3, #32
 8109ec2:	2b00      	cmp	r3, #0
 8109ec4:	d016      	beq.n	8109ef4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109ec6:	4b06      	ldr	r3, [pc, #24]	@ (8109ee0 <UART_SetConfig+0x69c>)
 8109ec8:	681b      	ldr	r3, [r3, #0]
 8109eca:	08db      	lsrs	r3, r3, #3
 8109ecc:	f003 0303 	and.w	r3, r3, #3
 8109ed0:	4a07      	ldr	r2, [pc, #28]	@ (8109ef0 <UART_SetConfig+0x6ac>)
 8109ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8109ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109ed8:	e01c      	b.n	8109f14 <UART_SetConfig+0x6d0>
 8109eda:	bf00      	nop
 8109edc:	40011400 	.word	0x40011400
 8109ee0:	58024400 	.word	0x58024400
 8109ee4:	40007800 	.word	0x40007800
 8109ee8:	40007c00 	.word	0x40007c00
 8109eec:	58000c00 	.word	0x58000c00
 8109ef0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8109ef4:	4b9d      	ldr	r3, [pc, #628]	@ (810a16c <UART_SetConfig+0x928>)
 8109ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109ef8:	e00c      	b.n	8109f14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109efa:	4b9d      	ldr	r3, [pc, #628]	@ (810a170 <UART_SetConfig+0x92c>)
 8109efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109efe:	e009      	b.n	8109f14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109f00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8109f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109f06:	e005      	b.n	8109f14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8109f08:	2300      	movs	r3, #0
 8109f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8109f0c:	2301      	movs	r3, #1
 8109f0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8109f12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8109f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109f16:	2b00      	cmp	r3, #0
 8109f18:	f000 81de 	beq.w	810a2d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8109f1c:	697b      	ldr	r3, [r7, #20]
 8109f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109f20:	4a94      	ldr	r2, [pc, #592]	@ (810a174 <UART_SetConfig+0x930>)
 8109f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109f26:	461a      	mov	r2, r3
 8109f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8109f2e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109f30:	697b      	ldr	r3, [r7, #20]
 8109f32:	685a      	ldr	r2, [r3, #4]
 8109f34:	4613      	mov	r3, r2
 8109f36:	005b      	lsls	r3, r3, #1
 8109f38:	4413      	add	r3, r2
 8109f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109f3c:	429a      	cmp	r2, r3
 8109f3e:	d305      	bcc.n	8109f4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8109f40:	697b      	ldr	r3, [r7, #20]
 8109f42:	685b      	ldr	r3, [r3, #4]
 8109f44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109f48:	429a      	cmp	r2, r3
 8109f4a:	d903      	bls.n	8109f54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8109f4c:	2301      	movs	r3, #1
 8109f4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8109f52:	e1c1      	b.n	810a2d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109f56:	2200      	movs	r2, #0
 8109f58:	60bb      	str	r3, [r7, #8]
 8109f5a:	60fa      	str	r2, [r7, #12]
 8109f5c:	697b      	ldr	r3, [r7, #20]
 8109f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109f60:	4a84      	ldr	r2, [pc, #528]	@ (810a174 <UART_SetConfig+0x930>)
 8109f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109f66:	b29b      	uxth	r3, r3
 8109f68:	2200      	movs	r2, #0
 8109f6a:	603b      	str	r3, [r7, #0]
 8109f6c:	607a      	str	r2, [r7, #4]
 8109f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109f72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8109f76:	f7f6 fe9f 	bl	8100cb8 <__aeabi_uldivmod>
 8109f7a:	4602      	mov	r2, r0
 8109f7c:	460b      	mov	r3, r1
 8109f7e:	4610      	mov	r0, r2
 8109f80:	4619      	mov	r1, r3
 8109f82:	f04f 0200 	mov.w	r2, #0
 8109f86:	f04f 0300 	mov.w	r3, #0
 8109f8a:	020b      	lsls	r3, r1, #8
 8109f8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8109f90:	0202      	lsls	r2, r0, #8
 8109f92:	6979      	ldr	r1, [r7, #20]
 8109f94:	6849      	ldr	r1, [r1, #4]
 8109f96:	0849      	lsrs	r1, r1, #1
 8109f98:	2000      	movs	r0, #0
 8109f9a:	460c      	mov	r4, r1
 8109f9c:	4605      	mov	r5, r0
 8109f9e:	eb12 0804 	adds.w	r8, r2, r4
 8109fa2:	eb43 0905 	adc.w	r9, r3, r5
 8109fa6:	697b      	ldr	r3, [r7, #20]
 8109fa8:	685b      	ldr	r3, [r3, #4]
 8109faa:	2200      	movs	r2, #0
 8109fac:	469a      	mov	sl, r3
 8109fae:	4693      	mov	fp, r2
 8109fb0:	4652      	mov	r2, sl
 8109fb2:	465b      	mov	r3, fp
 8109fb4:	4640      	mov	r0, r8
 8109fb6:	4649      	mov	r1, r9
 8109fb8:	f7f6 fe7e 	bl	8100cb8 <__aeabi_uldivmod>
 8109fbc:	4602      	mov	r2, r0
 8109fbe:	460b      	mov	r3, r1
 8109fc0:	4613      	mov	r3, r2
 8109fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8109fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109fc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8109fca:	d308      	bcc.n	8109fde <UART_SetConfig+0x79a>
 8109fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8109fd2:	d204      	bcs.n	8109fde <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8109fd4:	697b      	ldr	r3, [r7, #20]
 8109fd6:	681b      	ldr	r3, [r3, #0]
 8109fd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8109fda:	60da      	str	r2, [r3, #12]
 8109fdc:	e17c      	b.n	810a2d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8109fde:	2301      	movs	r3, #1
 8109fe0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8109fe4:	e178      	b.n	810a2d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8109fe6:	697b      	ldr	r3, [r7, #20]
 8109fe8:	69db      	ldr	r3, [r3, #28]
 8109fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8109fee:	f040 80c5 	bne.w	810a17c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8109ff2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8109ff6:	2b20      	cmp	r3, #32
 8109ff8:	dc48      	bgt.n	810a08c <UART_SetConfig+0x848>
 8109ffa:	2b00      	cmp	r3, #0
 8109ffc:	db7b      	blt.n	810a0f6 <UART_SetConfig+0x8b2>
 8109ffe:	2b20      	cmp	r3, #32
 810a000:	d879      	bhi.n	810a0f6 <UART_SetConfig+0x8b2>
 810a002:	a201      	add	r2, pc, #4	@ (adr r2, 810a008 <UART_SetConfig+0x7c4>)
 810a004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a008:	0810a093 	.word	0x0810a093
 810a00c:	0810a09b 	.word	0x0810a09b
 810a010:	0810a0f7 	.word	0x0810a0f7
 810a014:	0810a0f7 	.word	0x0810a0f7
 810a018:	0810a0a3 	.word	0x0810a0a3
 810a01c:	0810a0f7 	.word	0x0810a0f7
 810a020:	0810a0f7 	.word	0x0810a0f7
 810a024:	0810a0f7 	.word	0x0810a0f7
 810a028:	0810a0b3 	.word	0x0810a0b3
 810a02c:	0810a0f7 	.word	0x0810a0f7
 810a030:	0810a0f7 	.word	0x0810a0f7
 810a034:	0810a0f7 	.word	0x0810a0f7
 810a038:	0810a0f7 	.word	0x0810a0f7
 810a03c:	0810a0f7 	.word	0x0810a0f7
 810a040:	0810a0f7 	.word	0x0810a0f7
 810a044:	0810a0f7 	.word	0x0810a0f7
 810a048:	0810a0c3 	.word	0x0810a0c3
 810a04c:	0810a0f7 	.word	0x0810a0f7
 810a050:	0810a0f7 	.word	0x0810a0f7
 810a054:	0810a0f7 	.word	0x0810a0f7
 810a058:	0810a0f7 	.word	0x0810a0f7
 810a05c:	0810a0f7 	.word	0x0810a0f7
 810a060:	0810a0f7 	.word	0x0810a0f7
 810a064:	0810a0f7 	.word	0x0810a0f7
 810a068:	0810a0f7 	.word	0x0810a0f7
 810a06c:	0810a0f7 	.word	0x0810a0f7
 810a070:	0810a0f7 	.word	0x0810a0f7
 810a074:	0810a0f7 	.word	0x0810a0f7
 810a078:	0810a0f7 	.word	0x0810a0f7
 810a07c:	0810a0f7 	.word	0x0810a0f7
 810a080:	0810a0f7 	.word	0x0810a0f7
 810a084:	0810a0f7 	.word	0x0810a0f7
 810a088:	0810a0e9 	.word	0x0810a0e9
 810a08c:	2b40      	cmp	r3, #64	@ 0x40
 810a08e:	d02e      	beq.n	810a0ee <UART_SetConfig+0x8aa>
 810a090:	e031      	b.n	810a0f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a092:	f7fc ff1f 	bl	8106ed4 <HAL_RCC_GetPCLK1Freq>
 810a096:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a098:	e033      	b.n	810a102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a09a:	f7fc ff31 	bl	8106f00 <HAL_RCC_GetPCLK2Freq>
 810a09e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a0a0:	e02f      	b.n	810a102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a0a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a0a6:	4618      	mov	r0, r3
 810a0a8:	f7fe f960 	bl	810836c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a0b0:	e027      	b.n	810a102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a0b2:	f107 0318 	add.w	r3, r7, #24
 810a0b6:	4618      	mov	r0, r3
 810a0b8:	f7fe faac 	bl	8108614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a0bc:	69fb      	ldr	r3, [r7, #28]
 810a0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a0c0:	e01f      	b.n	810a102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a0c2:	4b2d      	ldr	r3, [pc, #180]	@ (810a178 <UART_SetConfig+0x934>)
 810a0c4:	681b      	ldr	r3, [r3, #0]
 810a0c6:	f003 0320 	and.w	r3, r3, #32
 810a0ca:	2b00      	cmp	r3, #0
 810a0cc:	d009      	beq.n	810a0e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a0ce:	4b2a      	ldr	r3, [pc, #168]	@ (810a178 <UART_SetConfig+0x934>)
 810a0d0:	681b      	ldr	r3, [r3, #0]
 810a0d2:	08db      	lsrs	r3, r3, #3
 810a0d4:	f003 0303 	and.w	r3, r3, #3
 810a0d8:	4a24      	ldr	r2, [pc, #144]	@ (810a16c <UART_SetConfig+0x928>)
 810a0da:	fa22 f303 	lsr.w	r3, r2, r3
 810a0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a0e0:	e00f      	b.n	810a102 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810a0e2:	4b22      	ldr	r3, [pc, #136]	@ (810a16c <UART_SetConfig+0x928>)
 810a0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a0e6:	e00c      	b.n	810a102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a0e8:	4b21      	ldr	r3, [pc, #132]	@ (810a170 <UART_SetConfig+0x92c>)
 810a0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a0ec:	e009      	b.n	810a102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a0ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a0f4:	e005      	b.n	810a102 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810a0f6:	2300      	movs	r3, #0
 810a0f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a0fa:	2301      	movs	r3, #1
 810a0fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810a100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810a102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a104:	2b00      	cmp	r3, #0
 810a106:	f000 80e7 	beq.w	810a2d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a10a:	697b      	ldr	r3, [r7, #20]
 810a10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a10e:	4a19      	ldr	r2, [pc, #100]	@ (810a174 <UART_SetConfig+0x930>)
 810a110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a114:	461a      	mov	r2, r3
 810a116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a118:	fbb3 f3f2 	udiv	r3, r3, r2
 810a11c:	005a      	lsls	r2, r3, #1
 810a11e:	697b      	ldr	r3, [r7, #20]
 810a120:	685b      	ldr	r3, [r3, #4]
 810a122:	085b      	lsrs	r3, r3, #1
 810a124:	441a      	add	r2, r3
 810a126:	697b      	ldr	r3, [r7, #20]
 810a128:	685b      	ldr	r3, [r3, #4]
 810a12a:	fbb2 f3f3 	udiv	r3, r2, r3
 810a12e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a132:	2b0f      	cmp	r3, #15
 810a134:	d916      	bls.n	810a164 <UART_SetConfig+0x920>
 810a136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a13c:	d212      	bcs.n	810a164 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810a13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a140:	b29b      	uxth	r3, r3
 810a142:	f023 030f 	bic.w	r3, r3, #15
 810a146:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a14a:	085b      	lsrs	r3, r3, #1
 810a14c:	b29b      	uxth	r3, r3
 810a14e:	f003 0307 	and.w	r3, r3, #7
 810a152:	b29a      	uxth	r2, r3
 810a154:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810a156:	4313      	orrs	r3, r2
 810a158:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810a15a:	697b      	ldr	r3, [r7, #20]
 810a15c:	681b      	ldr	r3, [r3, #0]
 810a15e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810a160:	60da      	str	r2, [r3, #12]
 810a162:	e0b9      	b.n	810a2d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a164:	2301      	movs	r3, #1
 810a166:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a16a:	e0b5      	b.n	810a2d8 <UART_SetConfig+0xa94>
 810a16c:	03d09000 	.word	0x03d09000
 810a170:	003d0900 	.word	0x003d0900
 810a174:	08111698 	.word	0x08111698
 810a178:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810a17c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a180:	2b20      	cmp	r3, #32
 810a182:	dc49      	bgt.n	810a218 <UART_SetConfig+0x9d4>
 810a184:	2b00      	cmp	r3, #0
 810a186:	db7c      	blt.n	810a282 <UART_SetConfig+0xa3e>
 810a188:	2b20      	cmp	r3, #32
 810a18a:	d87a      	bhi.n	810a282 <UART_SetConfig+0xa3e>
 810a18c:	a201      	add	r2, pc, #4	@ (adr r2, 810a194 <UART_SetConfig+0x950>)
 810a18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a192:	bf00      	nop
 810a194:	0810a21f 	.word	0x0810a21f
 810a198:	0810a227 	.word	0x0810a227
 810a19c:	0810a283 	.word	0x0810a283
 810a1a0:	0810a283 	.word	0x0810a283
 810a1a4:	0810a22f 	.word	0x0810a22f
 810a1a8:	0810a283 	.word	0x0810a283
 810a1ac:	0810a283 	.word	0x0810a283
 810a1b0:	0810a283 	.word	0x0810a283
 810a1b4:	0810a23f 	.word	0x0810a23f
 810a1b8:	0810a283 	.word	0x0810a283
 810a1bc:	0810a283 	.word	0x0810a283
 810a1c0:	0810a283 	.word	0x0810a283
 810a1c4:	0810a283 	.word	0x0810a283
 810a1c8:	0810a283 	.word	0x0810a283
 810a1cc:	0810a283 	.word	0x0810a283
 810a1d0:	0810a283 	.word	0x0810a283
 810a1d4:	0810a24f 	.word	0x0810a24f
 810a1d8:	0810a283 	.word	0x0810a283
 810a1dc:	0810a283 	.word	0x0810a283
 810a1e0:	0810a283 	.word	0x0810a283
 810a1e4:	0810a283 	.word	0x0810a283
 810a1e8:	0810a283 	.word	0x0810a283
 810a1ec:	0810a283 	.word	0x0810a283
 810a1f0:	0810a283 	.word	0x0810a283
 810a1f4:	0810a283 	.word	0x0810a283
 810a1f8:	0810a283 	.word	0x0810a283
 810a1fc:	0810a283 	.word	0x0810a283
 810a200:	0810a283 	.word	0x0810a283
 810a204:	0810a283 	.word	0x0810a283
 810a208:	0810a283 	.word	0x0810a283
 810a20c:	0810a283 	.word	0x0810a283
 810a210:	0810a283 	.word	0x0810a283
 810a214:	0810a275 	.word	0x0810a275
 810a218:	2b40      	cmp	r3, #64	@ 0x40
 810a21a:	d02e      	beq.n	810a27a <UART_SetConfig+0xa36>
 810a21c:	e031      	b.n	810a282 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a21e:	f7fc fe59 	bl	8106ed4 <HAL_RCC_GetPCLK1Freq>
 810a222:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a224:	e033      	b.n	810a28e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a226:	f7fc fe6b 	bl	8106f00 <HAL_RCC_GetPCLK2Freq>
 810a22a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a22c:	e02f      	b.n	810a28e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a22e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a232:	4618      	mov	r0, r3
 810a234:	f7fe f89a 	bl	810836c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a23c:	e027      	b.n	810a28e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a23e:	f107 0318 	add.w	r3, r7, #24
 810a242:	4618      	mov	r0, r3
 810a244:	f7fe f9e6 	bl	8108614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a248:	69fb      	ldr	r3, [r7, #28]
 810a24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a24c:	e01f      	b.n	810a28e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a24e:	4b2d      	ldr	r3, [pc, #180]	@ (810a304 <UART_SetConfig+0xac0>)
 810a250:	681b      	ldr	r3, [r3, #0]
 810a252:	f003 0320 	and.w	r3, r3, #32
 810a256:	2b00      	cmp	r3, #0
 810a258:	d009      	beq.n	810a26e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a25a:	4b2a      	ldr	r3, [pc, #168]	@ (810a304 <UART_SetConfig+0xac0>)
 810a25c:	681b      	ldr	r3, [r3, #0]
 810a25e:	08db      	lsrs	r3, r3, #3
 810a260:	f003 0303 	and.w	r3, r3, #3
 810a264:	4a28      	ldr	r2, [pc, #160]	@ (810a308 <UART_SetConfig+0xac4>)
 810a266:	fa22 f303 	lsr.w	r3, r2, r3
 810a26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a26c:	e00f      	b.n	810a28e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810a26e:	4b26      	ldr	r3, [pc, #152]	@ (810a308 <UART_SetConfig+0xac4>)
 810a270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a272:	e00c      	b.n	810a28e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a274:	4b25      	ldr	r3, [pc, #148]	@ (810a30c <UART_SetConfig+0xac8>)
 810a276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a278:	e009      	b.n	810a28e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a27a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a280:	e005      	b.n	810a28e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810a282:	2300      	movs	r3, #0
 810a284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a286:	2301      	movs	r3, #1
 810a288:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810a28c:	bf00      	nop
    }

    if (pclk != 0U)
 810a28e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a290:	2b00      	cmp	r3, #0
 810a292:	d021      	beq.n	810a2d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a294:	697b      	ldr	r3, [r7, #20]
 810a296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a298:	4a1d      	ldr	r2, [pc, #116]	@ (810a310 <UART_SetConfig+0xacc>)
 810a29a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a29e:	461a      	mov	r2, r3
 810a2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a2a2:	fbb3 f2f2 	udiv	r2, r3, r2
 810a2a6:	697b      	ldr	r3, [r7, #20]
 810a2a8:	685b      	ldr	r3, [r3, #4]
 810a2aa:	085b      	lsrs	r3, r3, #1
 810a2ac:	441a      	add	r2, r3
 810a2ae:	697b      	ldr	r3, [r7, #20]
 810a2b0:	685b      	ldr	r3, [r3, #4]
 810a2b2:	fbb2 f3f3 	udiv	r3, r2, r3
 810a2b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a2ba:	2b0f      	cmp	r3, #15
 810a2bc:	d909      	bls.n	810a2d2 <UART_SetConfig+0xa8e>
 810a2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a2c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a2c4:	d205      	bcs.n	810a2d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810a2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a2c8:	b29a      	uxth	r2, r3
 810a2ca:	697b      	ldr	r3, [r7, #20]
 810a2cc:	681b      	ldr	r3, [r3, #0]
 810a2ce:	60da      	str	r2, [r3, #12]
 810a2d0:	e002      	b.n	810a2d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a2d2:	2301      	movs	r3, #1
 810a2d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810a2d8:	697b      	ldr	r3, [r7, #20]
 810a2da:	2201      	movs	r2, #1
 810a2dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810a2e0:	697b      	ldr	r3, [r7, #20]
 810a2e2:	2201      	movs	r2, #1
 810a2e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810a2e8:	697b      	ldr	r3, [r7, #20]
 810a2ea:	2200      	movs	r2, #0
 810a2ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810a2ee:	697b      	ldr	r3, [r7, #20]
 810a2f0:	2200      	movs	r2, #0
 810a2f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810a2f4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810a2f8:	4618      	mov	r0, r3
 810a2fa:	3748      	adds	r7, #72	@ 0x48
 810a2fc:	46bd      	mov	sp, r7
 810a2fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810a302:	bf00      	nop
 810a304:	58024400 	.word	0x58024400
 810a308:	03d09000 	.word	0x03d09000
 810a30c:	003d0900 	.word	0x003d0900
 810a310:	08111698 	.word	0x08111698

0810a314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810a314:	b480      	push	{r7}
 810a316:	b083      	sub	sp, #12
 810a318:	af00      	add	r7, sp, #0
 810a31a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810a31c:	687b      	ldr	r3, [r7, #4]
 810a31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a320:	f003 0308 	and.w	r3, r3, #8
 810a324:	2b00      	cmp	r3, #0
 810a326:	d00a      	beq.n	810a33e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810a328:	687b      	ldr	r3, [r7, #4]
 810a32a:	681b      	ldr	r3, [r3, #0]
 810a32c:	685b      	ldr	r3, [r3, #4]
 810a32e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810a332:	687b      	ldr	r3, [r7, #4]
 810a334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810a336:	687b      	ldr	r3, [r7, #4]
 810a338:	681b      	ldr	r3, [r3, #0]
 810a33a:	430a      	orrs	r2, r1
 810a33c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810a33e:	687b      	ldr	r3, [r7, #4]
 810a340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a342:	f003 0301 	and.w	r3, r3, #1
 810a346:	2b00      	cmp	r3, #0
 810a348:	d00a      	beq.n	810a360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810a34a:	687b      	ldr	r3, [r7, #4]
 810a34c:	681b      	ldr	r3, [r3, #0]
 810a34e:	685b      	ldr	r3, [r3, #4]
 810a350:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810a354:	687b      	ldr	r3, [r7, #4]
 810a356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a358:	687b      	ldr	r3, [r7, #4]
 810a35a:	681b      	ldr	r3, [r3, #0]
 810a35c:	430a      	orrs	r2, r1
 810a35e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810a360:	687b      	ldr	r3, [r7, #4]
 810a362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a364:	f003 0302 	and.w	r3, r3, #2
 810a368:	2b00      	cmp	r3, #0
 810a36a:	d00a      	beq.n	810a382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810a36c:	687b      	ldr	r3, [r7, #4]
 810a36e:	681b      	ldr	r3, [r3, #0]
 810a370:	685b      	ldr	r3, [r3, #4]
 810a372:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810a376:	687b      	ldr	r3, [r7, #4]
 810a378:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810a37a:	687b      	ldr	r3, [r7, #4]
 810a37c:	681b      	ldr	r3, [r3, #0]
 810a37e:	430a      	orrs	r2, r1
 810a380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810a382:	687b      	ldr	r3, [r7, #4]
 810a384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a386:	f003 0304 	and.w	r3, r3, #4
 810a38a:	2b00      	cmp	r3, #0
 810a38c:	d00a      	beq.n	810a3a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810a38e:	687b      	ldr	r3, [r7, #4]
 810a390:	681b      	ldr	r3, [r3, #0]
 810a392:	685b      	ldr	r3, [r3, #4]
 810a394:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810a398:	687b      	ldr	r3, [r7, #4]
 810a39a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a39c:	687b      	ldr	r3, [r7, #4]
 810a39e:	681b      	ldr	r3, [r3, #0]
 810a3a0:	430a      	orrs	r2, r1
 810a3a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810a3a4:	687b      	ldr	r3, [r7, #4]
 810a3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a3a8:	f003 0310 	and.w	r3, r3, #16
 810a3ac:	2b00      	cmp	r3, #0
 810a3ae:	d00a      	beq.n	810a3c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810a3b0:	687b      	ldr	r3, [r7, #4]
 810a3b2:	681b      	ldr	r3, [r3, #0]
 810a3b4:	689b      	ldr	r3, [r3, #8]
 810a3b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810a3ba:	687b      	ldr	r3, [r7, #4]
 810a3bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810a3be:	687b      	ldr	r3, [r7, #4]
 810a3c0:	681b      	ldr	r3, [r3, #0]
 810a3c2:	430a      	orrs	r2, r1
 810a3c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810a3c6:	687b      	ldr	r3, [r7, #4]
 810a3c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a3ca:	f003 0320 	and.w	r3, r3, #32
 810a3ce:	2b00      	cmp	r3, #0
 810a3d0:	d00a      	beq.n	810a3e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810a3d2:	687b      	ldr	r3, [r7, #4]
 810a3d4:	681b      	ldr	r3, [r3, #0]
 810a3d6:	689b      	ldr	r3, [r3, #8]
 810a3d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810a3dc:	687b      	ldr	r3, [r7, #4]
 810a3de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810a3e0:	687b      	ldr	r3, [r7, #4]
 810a3e2:	681b      	ldr	r3, [r3, #0]
 810a3e4:	430a      	orrs	r2, r1
 810a3e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810a3e8:	687b      	ldr	r3, [r7, #4]
 810a3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a3ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a3f0:	2b00      	cmp	r3, #0
 810a3f2:	d01a      	beq.n	810a42a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810a3f4:	687b      	ldr	r3, [r7, #4]
 810a3f6:	681b      	ldr	r3, [r3, #0]
 810a3f8:	685b      	ldr	r3, [r3, #4]
 810a3fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810a3fe:	687b      	ldr	r3, [r7, #4]
 810a400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810a402:	687b      	ldr	r3, [r7, #4]
 810a404:	681b      	ldr	r3, [r3, #0]
 810a406:	430a      	orrs	r2, r1
 810a408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810a40a:	687b      	ldr	r3, [r7, #4]
 810a40c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a40e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a412:	d10a      	bne.n	810a42a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a414:	687b      	ldr	r3, [r7, #4]
 810a416:	681b      	ldr	r3, [r3, #0]
 810a418:	685b      	ldr	r3, [r3, #4]
 810a41a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810a41e:	687b      	ldr	r3, [r7, #4]
 810a420:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810a422:	687b      	ldr	r3, [r7, #4]
 810a424:	681b      	ldr	r3, [r3, #0]
 810a426:	430a      	orrs	r2, r1
 810a428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a42a:	687b      	ldr	r3, [r7, #4]
 810a42c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a42e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a432:	2b00      	cmp	r3, #0
 810a434:	d00a      	beq.n	810a44c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a436:	687b      	ldr	r3, [r7, #4]
 810a438:	681b      	ldr	r3, [r3, #0]
 810a43a:	685b      	ldr	r3, [r3, #4]
 810a43c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810a440:	687b      	ldr	r3, [r7, #4]
 810a442:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810a444:	687b      	ldr	r3, [r7, #4]
 810a446:	681b      	ldr	r3, [r3, #0]
 810a448:	430a      	orrs	r2, r1
 810a44a:	605a      	str	r2, [r3, #4]
  }
}
 810a44c:	bf00      	nop
 810a44e:	370c      	adds	r7, #12
 810a450:	46bd      	mov	sp, r7
 810a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a456:	4770      	bx	lr

0810a458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a458:	b580      	push	{r7, lr}
 810a45a:	b098      	sub	sp, #96	@ 0x60
 810a45c:	af02      	add	r7, sp, #8
 810a45e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a460:	687b      	ldr	r3, [r7, #4]
 810a462:	2200      	movs	r2, #0
 810a464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810a468:	f7fb faf6 	bl	8105a58 <HAL_GetTick>
 810a46c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a46e:	687b      	ldr	r3, [r7, #4]
 810a470:	681b      	ldr	r3, [r3, #0]
 810a472:	681b      	ldr	r3, [r3, #0]
 810a474:	f003 0308 	and.w	r3, r3, #8
 810a478:	2b08      	cmp	r3, #8
 810a47a:	d12f      	bne.n	810a4dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a47c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810a480:	9300      	str	r3, [sp, #0]
 810a482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810a484:	2200      	movs	r2, #0
 810a486:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810a48a:	6878      	ldr	r0, [r7, #4]
 810a48c:	f000 f88e 	bl	810a5ac <UART_WaitOnFlagUntilTimeout>
 810a490:	4603      	mov	r3, r0
 810a492:	2b00      	cmp	r3, #0
 810a494:	d022      	beq.n	810a4dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810a496:	687b      	ldr	r3, [r7, #4]
 810a498:	681b      	ldr	r3, [r3, #0]
 810a49a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a49e:	e853 3f00 	ldrex	r3, [r3]
 810a4a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810a4a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a4a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810a4aa:	653b      	str	r3, [r7, #80]	@ 0x50
 810a4ac:	687b      	ldr	r3, [r7, #4]
 810a4ae:	681b      	ldr	r3, [r3, #0]
 810a4b0:	461a      	mov	r2, r3
 810a4b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810a4b4:	647b      	str	r3, [r7, #68]	@ 0x44
 810a4b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a4b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810a4ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810a4bc:	e841 2300 	strex	r3, r2, [r1]
 810a4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810a4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a4c4:	2b00      	cmp	r3, #0
 810a4c6:	d1e6      	bne.n	810a496 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810a4c8:	687b      	ldr	r3, [r7, #4]
 810a4ca:	2220      	movs	r2, #32
 810a4cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810a4d0:	687b      	ldr	r3, [r7, #4]
 810a4d2:	2200      	movs	r2, #0
 810a4d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a4d8:	2303      	movs	r3, #3
 810a4da:	e063      	b.n	810a5a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810a4dc:	687b      	ldr	r3, [r7, #4]
 810a4de:	681b      	ldr	r3, [r3, #0]
 810a4e0:	681b      	ldr	r3, [r3, #0]
 810a4e2:	f003 0304 	and.w	r3, r3, #4
 810a4e6:	2b04      	cmp	r3, #4
 810a4e8:	d149      	bne.n	810a57e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a4ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810a4ee:	9300      	str	r3, [sp, #0]
 810a4f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810a4f2:	2200      	movs	r2, #0
 810a4f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810a4f8:	6878      	ldr	r0, [r7, #4]
 810a4fa:	f000 f857 	bl	810a5ac <UART_WaitOnFlagUntilTimeout>
 810a4fe:	4603      	mov	r3, r0
 810a500:	2b00      	cmp	r3, #0
 810a502:	d03c      	beq.n	810a57e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a504:	687b      	ldr	r3, [r7, #4]
 810a506:	681b      	ldr	r3, [r3, #0]
 810a508:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a50c:	e853 3f00 	ldrex	r3, [r3]
 810a510:	623b      	str	r3, [r7, #32]
   return(result);
 810a512:	6a3b      	ldr	r3, [r7, #32]
 810a514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810a518:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810a51a:	687b      	ldr	r3, [r7, #4]
 810a51c:	681b      	ldr	r3, [r3, #0]
 810a51e:	461a      	mov	r2, r3
 810a520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a522:	633b      	str	r3, [r7, #48]	@ 0x30
 810a524:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810a528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a52a:	e841 2300 	strex	r3, r2, [r1]
 810a52e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810a530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a532:	2b00      	cmp	r3, #0
 810a534:	d1e6      	bne.n	810a504 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a536:	687b      	ldr	r3, [r7, #4]
 810a538:	681b      	ldr	r3, [r3, #0]
 810a53a:	3308      	adds	r3, #8
 810a53c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a53e:	693b      	ldr	r3, [r7, #16]
 810a540:	e853 3f00 	ldrex	r3, [r3]
 810a544:	60fb      	str	r3, [r7, #12]
   return(result);
 810a546:	68fb      	ldr	r3, [r7, #12]
 810a548:	f023 0301 	bic.w	r3, r3, #1
 810a54c:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a54e:	687b      	ldr	r3, [r7, #4]
 810a550:	681b      	ldr	r3, [r3, #0]
 810a552:	3308      	adds	r3, #8
 810a554:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810a556:	61fa      	str	r2, [r7, #28]
 810a558:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a55a:	69b9      	ldr	r1, [r7, #24]
 810a55c:	69fa      	ldr	r2, [r7, #28]
 810a55e:	e841 2300 	strex	r3, r2, [r1]
 810a562:	617b      	str	r3, [r7, #20]
   return(result);
 810a564:	697b      	ldr	r3, [r7, #20]
 810a566:	2b00      	cmp	r3, #0
 810a568:	d1e5      	bne.n	810a536 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810a56a:	687b      	ldr	r3, [r7, #4]
 810a56c:	2220      	movs	r2, #32
 810a56e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810a572:	687b      	ldr	r3, [r7, #4]
 810a574:	2200      	movs	r2, #0
 810a576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a57a:	2303      	movs	r3, #3
 810a57c:	e012      	b.n	810a5a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810a57e:	687b      	ldr	r3, [r7, #4]
 810a580:	2220      	movs	r2, #32
 810a582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810a586:	687b      	ldr	r3, [r7, #4]
 810a588:	2220      	movs	r2, #32
 810a58a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a58e:	687b      	ldr	r3, [r7, #4]
 810a590:	2200      	movs	r2, #0
 810a592:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810a594:	687b      	ldr	r3, [r7, #4]
 810a596:	2200      	movs	r2, #0
 810a598:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810a59a:	687b      	ldr	r3, [r7, #4]
 810a59c:	2200      	movs	r2, #0
 810a59e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810a5a2:	2300      	movs	r3, #0
}
 810a5a4:	4618      	mov	r0, r3
 810a5a6:	3758      	adds	r7, #88	@ 0x58
 810a5a8:	46bd      	mov	sp, r7
 810a5aa:	bd80      	pop	{r7, pc}

0810a5ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810a5ac:	b580      	push	{r7, lr}
 810a5ae:	b084      	sub	sp, #16
 810a5b0:	af00      	add	r7, sp, #0
 810a5b2:	60f8      	str	r0, [r7, #12]
 810a5b4:	60b9      	str	r1, [r7, #8]
 810a5b6:	603b      	str	r3, [r7, #0]
 810a5b8:	4613      	mov	r3, r2
 810a5ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a5bc:	e04f      	b.n	810a65e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810a5be:	69bb      	ldr	r3, [r7, #24]
 810a5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a5c4:	d04b      	beq.n	810a65e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810a5c6:	f7fb fa47 	bl	8105a58 <HAL_GetTick>
 810a5ca:	4602      	mov	r2, r0
 810a5cc:	683b      	ldr	r3, [r7, #0]
 810a5ce:	1ad3      	subs	r3, r2, r3
 810a5d0:	69ba      	ldr	r2, [r7, #24]
 810a5d2:	429a      	cmp	r2, r3
 810a5d4:	d302      	bcc.n	810a5dc <UART_WaitOnFlagUntilTimeout+0x30>
 810a5d6:	69bb      	ldr	r3, [r7, #24]
 810a5d8:	2b00      	cmp	r3, #0
 810a5da:	d101      	bne.n	810a5e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810a5dc:	2303      	movs	r3, #3
 810a5de:	e04e      	b.n	810a67e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810a5e0:	68fb      	ldr	r3, [r7, #12]
 810a5e2:	681b      	ldr	r3, [r3, #0]
 810a5e4:	681b      	ldr	r3, [r3, #0]
 810a5e6:	f003 0304 	and.w	r3, r3, #4
 810a5ea:	2b00      	cmp	r3, #0
 810a5ec:	d037      	beq.n	810a65e <UART_WaitOnFlagUntilTimeout+0xb2>
 810a5ee:	68bb      	ldr	r3, [r7, #8]
 810a5f0:	2b80      	cmp	r3, #128	@ 0x80
 810a5f2:	d034      	beq.n	810a65e <UART_WaitOnFlagUntilTimeout+0xb2>
 810a5f4:	68bb      	ldr	r3, [r7, #8]
 810a5f6:	2b40      	cmp	r3, #64	@ 0x40
 810a5f8:	d031      	beq.n	810a65e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810a5fa:	68fb      	ldr	r3, [r7, #12]
 810a5fc:	681b      	ldr	r3, [r3, #0]
 810a5fe:	69db      	ldr	r3, [r3, #28]
 810a600:	f003 0308 	and.w	r3, r3, #8
 810a604:	2b08      	cmp	r3, #8
 810a606:	d110      	bne.n	810a62a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810a608:	68fb      	ldr	r3, [r7, #12]
 810a60a:	681b      	ldr	r3, [r3, #0]
 810a60c:	2208      	movs	r2, #8
 810a60e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810a610:	68f8      	ldr	r0, [r7, #12]
 810a612:	f000 f95b 	bl	810a8cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810a616:	68fb      	ldr	r3, [r7, #12]
 810a618:	2208      	movs	r2, #8
 810a61a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a61e:	68fb      	ldr	r3, [r7, #12]
 810a620:	2200      	movs	r2, #0
 810a622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810a626:	2301      	movs	r3, #1
 810a628:	e029      	b.n	810a67e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810a62a:	68fb      	ldr	r3, [r7, #12]
 810a62c:	681b      	ldr	r3, [r3, #0]
 810a62e:	69db      	ldr	r3, [r3, #28]
 810a630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810a634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810a638:	d111      	bne.n	810a65e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810a63a:	68fb      	ldr	r3, [r7, #12]
 810a63c:	681b      	ldr	r3, [r3, #0]
 810a63e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810a642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810a644:	68f8      	ldr	r0, [r7, #12]
 810a646:	f000 f941 	bl	810a8cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810a64a:	68fb      	ldr	r3, [r7, #12]
 810a64c:	2220      	movs	r2, #32
 810a64e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a652:	68fb      	ldr	r3, [r7, #12]
 810a654:	2200      	movs	r2, #0
 810a656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810a65a:	2303      	movs	r3, #3
 810a65c:	e00f      	b.n	810a67e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a65e:	68fb      	ldr	r3, [r7, #12]
 810a660:	681b      	ldr	r3, [r3, #0]
 810a662:	69da      	ldr	r2, [r3, #28]
 810a664:	68bb      	ldr	r3, [r7, #8]
 810a666:	4013      	ands	r3, r2
 810a668:	68ba      	ldr	r2, [r7, #8]
 810a66a:	429a      	cmp	r2, r3
 810a66c:	bf0c      	ite	eq
 810a66e:	2301      	moveq	r3, #1
 810a670:	2300      	movne	r3, #0
 810a672:	b2db      	uxtb	r3, r3
 810a674:	461a      	mov	r2, r3
 810a676:	79fb      	ldrb	r3, [r7, #7]
 810a678:	429a      	cmp	r2, r3
 810a67a:	d0a0      	beq.n	810a5be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810a67c:	2300      	movs	r3, #0
}
 810a67e:	4618      	mov	r0, r3
 810a680:	3710      	adds	r7, #16
 810a682:	46bd      	mov	sp, r7
 810a684:	bd80      	pop	{r7, pc}
	...

0810a688 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810a688:	b480      	push	{r7}
 810a68a:	b0a3      	sub	sp, #140	@ 0x8c
 810a68c:	af00      	add	r7, sp, #0
 810a68e:	60f8      	str	r0, [r7, #12]
 810a690:	60b9      	str	r1, [r7, #8]
 810a692:	4613      	mov	r3, r2
 810a694:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 810a696:	68fb      	ldr	r3, [r7, #12]
 810a698:	68ba      	ldr	r2, [r7, #8]
 810a69a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 810a69c:	68fb      	ldr	r3, [r7, #12]
 810a69e:	88fa      	ldrh	r2, [r7, #6]
 810a6a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 810a6a4:	68fb      	ldr	r3, [r7, #12]
 810a6a6:	88fa      	ldrh	r2, [r7, #6]
 810a6a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 810a6ac:	68fb      	ldr	r3, [r7, #12]
 810a6ae:	2200      	movs	r2, #0
 810a6b0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 810a6b2:	68fb      	ldr	r3, [r7, #12]
 810a6b4:	689b      	ldr	r3, [r3, #8]
 810a6b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a6ba:	d10e      	bne.n	810a6da <UART_Start_Receive_IT+0x52>
 810a6bc:	68fb      	ldr	r3, [r7, #12]
 810a6be:	691b      	ldr	r3, [r3, #16]
 810a6c0:	2b00      	cmp	r3, #0
 810a6c2:	d105      	bne.n	810a6d0 <UART_Start_Receive_IT+0x48>
 810a6c4:	68fb      	ldr	r3, [r7, #12]
 810a6c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810a6ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a6ce:	e02d      	b.n	810a72c <UART_Start_Receive_IT+0xa4>
 810a6d0:	68fb      	ldr	r3, [r7, #12]
 810a6d2:	22ff      	movs	r2, #255	@ 0xff
 810a6d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a6d8:	e028      	b.n	810a72c <UART_Start_Receive_IT+0xa4>
 810a6da:	68fb      	ldr	r3, [r7, #12]
 810a6dc:	689b      	ldr	r3, [r3, #8]
 810a6de:	2b00      	cmp	r3, #0
 810a6e0:	d10d      	bne.n	810a6fe <UART_Start_Receive_IT+0x76>
 810a6e2:	68fb      	ldr	r3, [r7, #12]
 810a6e4:	691b      	ldr	r3, [r3, #16]
 810a6e6:	2b00      	cmp	r3, #0
 810a6e8:	d104      	bne.n	810a6f4 <UART_Start_Receive_IT+0x6c>
 810a6ea:	68fb      	ldr	r3, [r7, #12]
 810a6ec:	22ff      	movs	r2, #255	@ 0xff
 810a6ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a6f2:	e01b      	b.n	810a72c <UART_Start_Receive_IT+0xa4>
 810a6f4:	68fb      	ldr	r3, [r7, #12]
 810a6f6:	227f      	movs	r2, #127	@ 0x7f
 810a6f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a6fc:	e016      	b.n	810a72c <UART_Start_Receive_IT+0xa4>
 810a6fe:	68fb      	ldr	r3, [r7, #12]
 810a700:	689b      	ldr	r3, [r3, #8]
 810a702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a706:	d10d      	bne.n	810a724 <UART_Start_Receive_IT+0x9c>
 810a708:	68fb      	ldr	r3, [r7, #12]
 810a70a:	691b      	ldr	r3, [r3, #16]
 810a70c:	2b00      	cmp	r3, #0
 810a70e:	d104      	bne.n	810a71a <UART_Start_Receive_IT+0x92>
 810a710:	68fb      	ldr	r3, [r7, #12]
 810a712:	227f      	movs	r2, #127	@ 0x7f
 810a714:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a718:	e008      	b.n	810a72c <UART_Start_Receive_IT+0xa4>
 810a71a:	68fb      	ldr	r3, [r7, #12]
 810a71c:	223f      	movs	r2, #63	@ 0x3f
 810a71e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a722:	e003      	b.n	810a72c <UART_Start_Receive_IT+0xa4>
 810a724:	68fb      	ldr	r3, [r7, #12]
 810a726:	2200      	movs	r2, #0
 810a728:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a72c:	68fb      	ldr	r3, [r7, #12]
 810a72e:	2200      	movs	r2, #0
 810a730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810a734:	68fb      	ldr	r3, [r7, #12]
 810a736:	2222      	movs	r2, #34	@ 0x22
 810a738:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a73c:	68fb      	ldr	r3, [r7, #12]
 810a73e:	681b      	ldr	r3, [r3, #0]
 810a740:	3308      	adds	r3, #8
 810a742:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810a746:	e853 3f00 	ldrex	r3, [r3]
 810a74a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810a74c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810a74e:	f043 0301 	orr.w	r3, r3, #1
 810a752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810a756:	68fb      	ldr	r3, [r7, #12]
 810a758:	681b      	ldr	r3, [r3, #0]
 810a75a:	3308      	adds	r3, #8
 810a75c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810a760:	673a      	str	r2, [r7, #112]	@ 0x70
 810a762:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a764:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 810a766:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 810a768:	e841 2300 	strex	r3, r2, [r1]
 810a76c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 810a76e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810a770:	2b00      	cmp	r3, #0
 810a772:	d1e3      	bne.n	810a73c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 810a774:	68fb      	ldr	r3, [r7, #12]
 810a776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a77c:	d14f      	bne.n	810a81e <UART_Start_Receive_IT+0x196>
 810a77e:	68fb      	ldr	r3, [r7, #12]
 810a780:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810a784:	88fa      	ldrh	r2, [r7, #6]
 810a786:	429a      	cmp	r2, r3
 810a788:	d349      	bcc.n	810a81e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810a78a:	68fb      	ldr	r3, [r7, #12]
 810a78c:	689b      	ldr	r3, [r3, #8]
 810a78e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a792:	d107      	bne.n	810a7a4 <UART_Start_Receive_IT+0x11c>
 810a794:	68fb      	ldr	r3, [r7, #12]
 810a796:	691b      	ldr	r3, [r3, #16]
 810a798:	2b00      	cmp	r3, #0
 810a79a:	d103      	bne.n	810a7a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 810a79c:	68fb      	ldr	r3, [r7, #12]
 810a79e:	4a47      	ldr	r2, [pc, #284]	@ (810a8bc <UART_Start_Receive_IT+0x234>)
 810a7a0:	675a      	str	r2, [r3, #116]	@ 0x74
 810a7a2:	e002      	b.n	810a7aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 810a7a4:	68fb      	ldr	r3, [r7, #12]
 810a7a6:	4a46      	ldr	r2, [pc, #280]	@ (810a8c0 <UART_Start_Receive_IT+0x238>)
 810a7a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810a7aa:	68fb      	ldr	r3, [r7, #12]
 810a7ac:	691b      	ldr	r3, [r3, #16]
 810a7ae:	2b00      	cmp	r3, #0
 810a7b0:	d01a      	beq.n	810a7e8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810a7b2:	68fb      	ldr	r3, [r7, #12]
 810a7b4:	681b      	ldr	r3, [r3, #0]
 810a7b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a7b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810a7ba:	e853 3f00 	ldrex	r3, [r3]
 810a7be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810a7c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a7c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810a7c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810a7ca:	68fb      	ldr	r3, [r7, #12]
 810a7cc:	681b      	ldr	r3, [r3, #0]
 810a7ce:	461a      	mov	r2, r3
 810a7d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810a7d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810a7d6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a7d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 810a7da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810a7dc:	e841 2300 	strex	r3, r2, [r1]
 810a7e0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 810a7e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810a7e4:	2b00      	cmp	r3, #0
 810a7e6:	d1e4      	bne.n	810a7b2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810a7e8:	68fb      	ldr	r3, [r7, #12]
 810a7ea:	681b      	ldr	r3, [r3, #0]
 810a7ec:	3308      	adds	r3, #8
 810a7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a7f2:	e853 3f00 	ldrex	r3, [r3]
 810a7f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810a7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a7fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810a7fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810a800:	68fb      	ldr	r3, [r7, #12]
 810a802:	681b      	ldr	r3, [r3, #0]
 810a804:	3308      	adds	r3, #8
 810a806:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810a808:	64ba      	str	r2, [r7, #72]	@ 0x48
 810a80a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a80c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810a80e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810a810:	e841 2300 	strex	r3, r2, [r1]
 810a814:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 810a816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810a818:	2b00      	cmp	r3, #0
 810a81a:	d1e5      	bne.n	810a7e8 <UART_Start_Receive_IT+0x160>
 810a81c:	e046      	b.n	810a8ac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810a81e:	68fb      	ldr	r3, [r7, #12]
 810a820:	689b      	ldr	r3, [r3, #8]
 810a822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a826:	d107      	bne.n	810a838 <UART_Start_Receive_IT+0x1b0>
 810a828:	68fb      	ldr	r3, [r7, #12]
 810a82a:	691b      	ldr	r3, [r3, #16]
 810a82c:	2b00      	cmp	r3, #0
 810a82e:	d103      	bne.n	810a838 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 810a830:	68fb      	ldr	r3, [r7, #12]
 810a832:	4a24      	ldr	r2, [pc, #144]	@ (810a8c4 <UART_Start_Receive_IT+0x23c>)
 810a834:	675a      	str	r2, [r3, #116]	@ 0x74
 810a836:	e002      	b.n	810a83e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 810a838:	68fb      	ldr	r3, [r7, #12]
 810a83a:	4a23      	ldr	r2, [pc, #140]	@ (810a8c8 <UART_Start_Receive_IT+0x240>)
 810a83c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810a83e:	68fb      	ldr	r3, [r7, #12]
 810a840:	691b      	ldr	r3, [r3, #16]
 810a842:	2b00      	cmp	r3, #0
 810a844:	d019      	beq.n	810a87a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 810a846:	68fb      	ldr	r3, [r7, #12]
 810a848:	681b      	ldr	r3, [r3, #0]
 810a84a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a84e:	e853 3f00 	ldrex	r3, [r3]
 810a852:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810a854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a856:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 810a85a:	677b      	str	r3, [r7, #116]	@ 0x74
 810a85c:	68fb      	ldr	r3, [r7, #12]
 810a85e:	681b      	ldr	r3, [r3, #0]
 810a860:	461a      	mov	r2, r3
 810a862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810a864:	637b      	str	r3, [r7, #52]	@ 0x34
 810a866:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a868:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810a86a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810a86c:	e841 2300 	strex	r3, r2, [r1]
 810a870:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 810a872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a874:	2b00      	cmp	r3, #0
 810a876:	d1e6      	bne.n	810a846 <UART_Start_Receive_IT+0x1be>
 810a878:	e018      	b.n	810a8ac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810a87a:	68fb      	ldr	r3, [r7, #12]
 810a87c:	681b      	ldr	r3, [r3, #0]
 810a87e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a880:	697b      	ldr	r3, [r7, #20]
 810a882:	e853 3f00 	ldrex	r3, [r3]
 810a886:	613b      	str	r3, [r7, #16]
   return(result);
 810a888:	693b      	ldr	r3, [r7, #16]
 810a88a:	f043 0320 	orr.w	r3, r3, #32
 810a88e:	67bb      	str	r3, [r7, #120]	@ 0x78
 810a890:	68fb      	ldr	r3, [r7, #12]
 810a892:	681b      	ldr	r3, [r3, #0]
 810a894:	461a      	mov	r2, r3
 810a896:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810a898:	623b      	str	r3, [r7, #32]
 810a89a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a89c:	69f9      	ldr	r1, [r7, #28]
 810a89e:	6a3a      	ldr	r2, [r7, #32]
 810a8a0:	e841 2300 	strex	r3, r2, [r1]
 810a8a4:	61bb      	str	r3, [r7, #24]
   return(result);
 810a8a6:	69bb      	ldr	r3, [r7, #24]
 810a8a8:	2b00      	cmp	r3, #0
 810a8aa:	d1e6      	bne.n	810a87a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 810a8ac:	2300      	movs	r3, #0
}
 810a8ae:	4618      	mov	r0, r3
 810a8b0:	378c      	adds	r7, #140	@ 0x8c
 810a8b2:	46bd      	mov	sp, r7
 810a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a8b8:	4770      	bx	lr
 810a8ba:	bf00      	nop
 810a8bc:	0810b0e9 	.word	0x0810b0e9
 810a8c0:	0810ad85 	.word	0x0810ad85
 810a8c4:	0810abcd 	.word	0x0810abcd
 810a8c8:	0810aa15 	.word	0x0810aa15

0810a8cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810a8cc:	b480      	push	{r7}
 810a8ce:	b095      	sub	sp, #84	@ 0x54
 810a8d0:	af00      	add	r7, sp, #0
 810a8d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a8d4:	687b      	ldr	r3, [r7, #4]
 810a8d6:	681b      	ldr	r3, [r3, #0]
 810a8d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a8da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a8dc:	e853 3f00 	ldrex	r3, [r3]
 810a8e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810a8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a8e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810a8e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810a8ea:	687b      	ldr	r3, [r7, #4]
 810a8ec:	681b      	ldr	r3, [r3, #0]
 810a8ee:	461a      	mov	r2, r3
 810a8f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a8f2:	643b      	str	r3, [r7, #64]	@ 0x40
 810a8f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a8f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810a8f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810a8fa:	e841 2300 	strex	r3, r2, [r1]
 810a8fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810a900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a902:	2b00      	cmp	r3, #0
 810a904:	d1e6      	bne.n	810a8d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810a906:	687b      	ldr	r3, [r7, #4]
 810a908:	681b      	ldr	r3, [r3, #0]
 810a90a:	3308      	adds	r3, #8
 810a90c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a90e:	6a3b      	ldr	r3, [r7, #32]
 810a910:	e853 3f00 	ldrex	r3, [r3]
 810a914:	61fb      	str	r3, [r7, #28]
   return(result);
 810a916:	69fb      	ldr	r3, [r7, #28]
 810a918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810a91c:	f023 0301 	bic.w	r3, r3, #1
 810a920:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a922:	687b      	ldr	r3, [r7, #4]
 810a924:	681b      	ldr	r3, [r3, #0]
 810a926:	3308      	adds	r3, #8
 810a928:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810a92a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810a92c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a92e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810a930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810a932:	e841 2300 	strex	r3, r2, [r1]
 810a936:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810a938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a93a:	2b00      	cmp	r3, #0
 810a93c:	d1e3      	bne.n	810a906 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810a93e:	687b      	ldr	r3, [r7, #4]
 810a940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a942:	2b01      	cmp	r3, #1
 810a944:	d118      	bne.n	810a978 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810a946:	687b      	ldr	r3, [r7, #4]
 810a948:	681b      	ldr	r3, [r3, #0]
 810a94a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a94c:	68fb      	ldr	r3, [r7, #12]
 810a94e:	e853 3f00 	ldrex	r3, [r3]
 810a952:	60bb      	str	r3, [r7, #8]
   return(result);
 810a954:	68bb      	ldr	r3, [r7, #8]
 810a956:	f023 0310 	bic.w	r3, r3, #16
 810a95a:	647b      	str	r3, [r7, #68]	@ 0x44
 810a95c:	687b      	ldr	r3, [r7, #4]
 810a95e:	681b      	ldr	r3, [r3, #0]
 810a960:	461a      	mov	r2, r3
 810a962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a964:	61bb      	str	r3, [r7, #24]
 810a966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a968:	6979      	ldr	r1, [r7, #20]
 810a96a:	69ba      	ldr	r2, [r7, #24]
 810a96c:	e841 2300 	strex	r3, r2, [r1]
 810a970:	613b      	str	r3, [r7, #16]
   return(result);
 810a972:	693b      	ldr	r3, [r7, #16]
 810a974:	2b00      	cmp	r3, #0
 810a976:	d1e6      	bne.n	810a946 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810a978:	687b      	ldr	r3, [r7, #4]
 810a97a:	2220      	movs	r2, #32
 810a97c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a980:	687b      	ldr	r3, [r7, #4]
 810a982:	2200      	movs	r2, #0
 810a984:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810a986:	687b      	ldr	r3, [r7, #4]
 810a988:	2200      	movs	r2, #0
 810a98a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810a98c:	bf00      	nop
 810a98e:	3754      	adds	r7, #84	@ 0x54
 810a990:	46bd      	mov	sp, r7
 810a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a996:	4770      	bx	lr

0810a998 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810a998:	b580      	push	{r7, lr}
 810a99a:	b084      	sub	sp, #16
 810a99c:	af00      	add	r7, sp, #0
 810a99e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810a9a0:	687b      	ldr	r3, [r7, #4]
 810a9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a9a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810a9a6:	68fb      	ldr	r3, [r7, #12]
 810a9a8:	2200      	movs	r2, #0
 810a9aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810a9ae:	68f8      	ldr	r0, [r7, #12]
 810a9b0:	f7fe ff32 	bl	8109818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810a9b4:	bf00      	nop
 810a9b6:	3710      	adds	r7, #16
 810a9b8:	46bd      	mov	sp, r7
 810a9ba:	bd80      	pop	{r7, pc}

0810a9bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810a9bc:	b580      	push	{r7, lr}
 810a9be:	b088      	sub	sp, #32
 810a9c0:	af00      	add	r7, sp, #0
 810a9c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810a9c4:	687b      	ldr	r3, [r7, #4]
 810a9c6:	681b      	ldr	r3, [r3, #0]
 810a9c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a9ca:	68fb      	ldr	r3, [r7, #12]
 810a9cc:	e853 3f00 	ldrex	r3, [r3]
 810a9d0:	60bb      	str	r3, [r7, #8]
   return(result);
 810a9d2:	68bb      	ldr	r3, [r7, #8]
 810a9d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810a9d8:	61fb      	str	r3, [r7, #28]
 810a9da:	687b      	ldr	r3, [r7, #4]
 810a9dc:	681b      	ldr	r3, [r3, #0]
 810a9de:	461a      	mov	r2, r3
 810a9e0:	69fb      	ldr	r3, [r7, #28]
 810a9e2:	61bb      	str	r3, [r7, #24]
 810a9e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a9e6:	6979      	ldr	r1, [r7, #20]
 810a9e8:	69ba      	ldr	r2, [r7, #24]
 810a9ea:	e841 2300 	strex	r3, r2, [r1]
 810a9ee:	613b      	str	r3, [r7, #16]
   return(result);
 810a9f0:	693b      	ldr	r3, [r7, #16]
 810a9f2:	2b00      	cmp	r3, #0
 810a9f4:	d1e6      	bne.n	810a9c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810a9f6:	687b      	ldr	r3, [r7, #4]
 810a9f8:	2220      	movs	r2, #32
 810a9fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810a9fe:	687b      	ldr	r3, [r7, #4]
 810aa00:	2200      	movs	r2, #0
 810aa02:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810aa04:	6878      	ldr	r0, [r7, #4]
 810aa06:	f7fe fefd 	bl	8109804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810aa0a:	bf00      	nop
 810aa0c:	3720      	adds	r7, #32
 810aa0e:	46bd      	mov	sp, r7
 810aa10:	bd80      	pop	{r7, pc}
	...

0810aa14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 810aa14:	b580      	push	{r7, lr}
 810aa16:	b09c      	sub	sp, #112	@ 0x70
 810aa18:	af00      	add	r7, sp, #0
 810aa1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 810aa1c:	687b      	ldr	r3, [r7, #4]
 810aa1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810aa22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810aa26:	687b      	ldr	r3, [r7, #4]
 810aa28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810aa2c:	2b22      	cmp	r3, #34	@ 0x22
 810aa2e:	f040 80be 	bne.w	810abae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810aa32:	687b      	ldr	r3, [r7, #4]
 810aa34:	681b      	ldr	r3, [r3, #0]
 810aa36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aa38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810aa3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 810aa40:	b2d9      	uxtb	r1, r3
 810aa42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810aa46:	b2da      	uxtb	r2, r3
 810aa48:	687b      	ldr	r3, [r7, #4]
 810aa4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810aa4c:	400a      	ands	r2, r1
 810aa4e:	b2d2      	uxtb	r2, r2
 810aa50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 810aa52:	687b      	ldr	r3, [r7, #4]
 810aa54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810aa56:	1c5a      	adds	r2, r3, #1
 810aa58:	687b      	ldr	r3, [r7, #4]
 810aa5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810aa5c:	687b      	ldr	r3, [r7, #4]
 810aa5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810aa62:	b29b      	uxth	r3, r3
 810aa64:	3b01      	subs	r3, #1
 810aa66:	b29a      	uxth	r2, r3
 810aa68:	687b      	ldr	r3, [r7, #4]
 810aa6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810aa6e:	687b      	ldr	r3, [r7, #4]
 810aa70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810aa74:	b29b      	uxth	r3, r3
 810aa76:	2b00      	cmp	r3, #0
 810aa78:	f040 80a1 	bne.w	810abbe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810aa7c:	687b      	ldr	r3, [r7, #4]
 810aa7e:	681b      	ldr	r3, [r3, #0]
 810aa80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810aa84:	e853 3f00 	ldrex	r3, [r3]
 810aa88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810aa8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810aa8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810aa90:	66bb      	str	r3, [r7, #104]	@ 0x68
 810aa92:	687b      	ldr	r3, [r7, #4]
 810aa94:	681b      	ldr	r3, [r3, #0]
 810aa96:	461a      	mov	r2, r3
 810aa98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810aa9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 810aa9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810aaa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810aaa2:	e841 2300 	strex	r3, r2, [r1]
 810aaa6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810aaa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810aaaa:	2b00      	cmp	r3, #0
 810aaac:	d1e6      	bne.n	810aa7c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810aaae:	687b      	ldr	r3, [r7, #4]
 810aab0:	681b      	ldr	r3, [r3, #0]
 810aab2:	3308      	adds	r3, #8
 810aab4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810aab8:	e853 3f00 	ldrex	r3, [r3]
 810aabc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810aabe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810aac0:	f023 0301 	bic.w	r3, r3, #1
 810aac4:	667b      	str	r3, [r7, #100]	@ 0x64
 810aac6:	687b      	ldr	r3, [r7, #4]
 810aac8:	681b      	ldr	r3, [r3, #0]
 810aaca:	3308      	adds	r3, #8
 810aacc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 810aace:	647a      	str	r2, [r7, #68]	@ 0x44
 810aad0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aad2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810aad4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810aad6:	e841 2300 	strex	r3, r2, [r1]
 810aada:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810aadc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810aade:	2b00      	cmp	r3, #0
 810aae0:	d1e5      	bne.n	810aaae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810aae2:	687b      	ldr	r3, [r7, #4]
 810aae4:	2220      	movs	r2, #32
 810aae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810aaea:	687b      	ldr	r3, [r7, #4]
 810aaec:	2200      	movs	r2, #0
 810aaee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810aaf0:	687b      	ldr	r3, [r7, #4]
 810aaf2:	2200      	movs	r2, #0
 810aaf4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810aaf6:	687b      	ldr	r3, [r7, #4]
 810aaf8:	681b      	ldr	r3, [r3, #0]
 810aafa:	4a33      	ldr	r2, [pc, #204]	@ (810abc8 <UART_RxISR_8BIT+0x1b4>)
 810aafc:	4293      	cmp	r3, r2
 810aafe:	d01f      	beq.n	810ab40 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810ab00:	687b      	ldr	r3, [r7, #4]
 810ab02:	681b      	ldr	r3, [r3, #0]
 810ab04:	685b      	ldr	r3, [r3, #4]
 810ab06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810ab0a:	2b00      	cmp	r3, #0
 810ab0c:	d018      	beq.n	810ab40 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810ab0e:	687b      	ldr	r3, [r7, #4]
 810ab10:	681b      	ldr	r3, [r3, #0]
 810ab12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ab16:	e853 3f00 	ldrex	r3, [r3]
 810ab1a:	623b      	str	r3, [r7, #32]
   return(result);
 810ab1c:	6a3b      	ldr	r3, [r7, #32]
 810ab1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810ab22:	663b      	str	r3, [r7, #96]	@ 0x60
 810ab24:	687b      	ldr	r3, [r7, #4]
 810ab26:	681b      	ldr	r3, [r3, #0]
 810ab28:	461a      	mov	r2, r3
 810ab2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810ab2c:	633b      	str	r3, [r7, #48]	@ 0x30
 810ab2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ab30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810ab32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ab34:	e841 2300 	strex	r3, r2, [r1]
 810ab38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810ab3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ab3c:	2b00      	cmp	r3, #0
 810ab3e:	d1e6      	bne.n	810ab0e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ab40:	687b      	ldr	r3, [r7, #4]
 810ab42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810ab44:	2b01      	cmp	r3, #1
 810ab46:	d12e      	bne.n	810aba6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ab48:	687b      	ldr	r3, [r7, #4]
 810ab4a:	2200      	movs	r2, #0
 810ab4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ab4e:	687b      	ldr	r3, [r7, #4]
 810ab50:	681b      	ldr	r3, [r3, #0]
 810ab52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ab54:	693b      	ldr	r3, [r7, #16]
 810ab56:	e853 3f00 	ldrex	r3, [r3]
 810ab5a:	60fb      	str	r3, [r7, #12]
   return(result);
 810ab5c:	68fb      	ldr	r3, [r7, #12]
 810ab5e:	f023 0310 	bic.w	r3, r3, #16
 810ab62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810ab64:	687b      	ldr	r3, [r7, #4]
 810ab66:	681b      	ldr	r3, [r3, #0]
 810ab68:	461a      	mov	r2, r3
 810ab6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810ab6c:	61fb      	str	r3, [r7, #28]
 810ab6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ab70:	69b9      	ldr	r1, [r7, #24]
 810ab72:	69fa      	ldr	r2, [r7, #28]
 810ab74:	e841 2300 	strex	r3, r2, [r1]
 810ab78:	617b      	str	r3, [r7, #20]
   return(result);
 810ab7a:	697b      	ldr	r3, [r7, #20]
 810ab7c:	2b00      	cmp	r3, #0
 810ab7e:	d1e6      	bne.n	810ab4e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810ab80:	687b      	ldr	r3, [r7, #4]
 810ab82:	681b      	ldr	r3, [r3, #0]
 810ab84:	69db      	ldr	r3, [r3, #28]
 810ab86:	f003 0310 	and.w	r3, r3, #16
 810ab8a:	2b10      	cmp	r3, #16
 810ab8c:	d103      	bne.n	810ab96 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810ab8e:	687b      	ldr	r3, [r7, #4]
 810ab90:	681b      	ldr	r3, [r3, #0]
 810ab92:	2210      	movs	r2, #16
 810ab94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810ab96:	687b      	ldr	r3, [r7, #4]
 810ab98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810ab9c:	4619      	mov	r1, r3
 810ab9e:	6878      	ldr	r0, [r7, #4]
 810aba0:	f7fe fe44 	bl	810982c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810aba4:	e00b      	b.n	810abbe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810aba6:	6878      	ldr	r0, [r7, #4]
 810aba8:	f7f8 fb5a 	bl	8103260 <HAL_UART_RxCpltCallback>
}
 810abac:	e007      	b.n	810abbe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810abae:	687b      	ldr	r3, [r7, #4]
 810abb0:	681b      	ldr	r3, [r3, #0]
 810abb2:	699a      	ldr	r2, [r3, #24]
 810abb4:	687b      	ldr	r3, [r7, #4]
 810abb6:	681b      	ldr	r3, [r3, #0]
 810abb8:	f042 0208 	orr.w	r2, r2, #8
 810abbc:	619a      	str	r2, [r3, #24]
}
 810abbe:	bf00      	nop
 810abc0:	3770      	adds	r7, #112	@ 0x70
 810abc2:	46bd      	mov	sp, r7
 810abc4:	bd80      	pop	{r7, pc}
 810abc6:	bf00      	nop
 810abc8:	58000c00 	.word	0x58000c00

0810abcc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 810abcc:	b580      	push	{r7, lr}
 810abce:	b09c      	sub	sp, #112	@ 0x70
 810abd0:	af00      	add	r7, sp, #0
 810abd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 810abd4:	687b      	ldr	r3, [r7, #4]
 810abd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810abda:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810abde:	687b      	ldr	r3, [r7, #4]
 810abe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810abe4:	2b22      	cmp	r3, #34	@ 0x22
 810abe6:	f040 80be 	bne.w	810ad66 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810abea:	687b      	ldr	r3, [r7, #4]
 810abec:	681b      	ldr	r3, [r3, #0]
 810abee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810abf0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 810abf4:	687b      	ldr	r3, [r7, #4]
 810abf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810abf8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 810abfa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 810abfe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810ac02:	4013      	ands	r3, r2
 810ac04:	b29a      	uxth	r2, r3
 810ac06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810ac08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 810ac0a:	687b      	ldr	r3, [r7, #4]
 810ac0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ac0e:	1c9a      	adds	r2, r3, #2
 810ac10:	687b      	ldr	r3, [r7, #4]
 810ac12:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810ac14:	687b      	ldr	r3, [r7, #4]
 810ac16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ac1a:	b29b      	uxth	r3, r3
 810ac1c:	3b01      	subs	r3, #1
 810ac1e:	b29a      	uxth	r2, r3
 810ac20:	687b      	ldr	r3, [r7, #4]
 810ac22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810ac26:	687b      	ldr	r3, [r7, #4]
 810ac28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ac2c:	b29b      	uxth	r3, r3
 810ac2e:	2b00      	cmp	r3, #0
 810ac30:	f040 80a1 	bne.w	810ad76 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ac34:	687b      	ldr	r3, [r7, #4]
 810ac36:	681b      	ldr	r3, [r3, #0]
 810ac38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ac3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810ac3c:	e853 3f00 	ldrex	r3, [r3]
 810ac40:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810ac42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810ac44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810ac48:	667b      	str	r3, [r7, #100]	@ 0x64
 810ac4a:	687b      	ldr	r3, [r7, #4]
 810ac4c:	681b      	ldr	r3, [r3, #0]
 810ac4e:	461a      	mov	r2, r3
 810ac50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810ac52:	657b      	str	r3, [r7, #84]	@ 0x54
 810ac54:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810ac58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810ac5a:	e841 2300 	strex	r3, r2, [r1]
 810ac5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810ac60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ac62:	2b00      	cmp	r3, #0
 810ac64:	d1e6      	bne.n	810ac34 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ac66:	687b      	ldr	r3, [r7, #4]
 810ac68:	681b      	ldr	r3, [r3, #0]
 810ac6a:	3308      	adds	r3, #8
 810ac6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ac6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ac70:	e853 3f00 	ldrex	r3, [r3]
 810ac74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810ac76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac78:	f023 0301 	bic.w	r3, r3, #1
 810ac7c:	663b      	str	r3, [r7, #96]	@ 0x60
 810ac7e:	687b      	ldr	r3, [r7, #4]
 810ac80:	681b      	ldr	r3, [r3, #0]
 810ac82:	3308      	adds	r3, #8
 810ac84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 810ac86:	643a      	str	r2, [r7, #64]	@ 0x40
 810ac88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810ac8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810ac8e:	e841 2300 	strex	r3, r2, [r1]
 810ac92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810ac94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ac96:	2b00      	cmp	r3, #0
 810ac98:	d1e5      	bne.n	810ac66 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810ac9a:	687b      	ldr	r3, [r7, #4]
 810ac9c:	2220      	movs	r2, #32
 810ac9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810aca2:	687b      	ldr	r3, [r7, #4]
 810aca4:	2200      	movs	r2, #0
 810aca6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810aca8:	687b      	ldr	r3, [r7, #4]
 810acaa:	2200      	movs	r2, #0
 810acac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810acae:	687b      	ldr	r3, [r7, #4]
 810acb0:	681b      	ldr	r3, [r3, #0]
 810acb2:	4a33      	ldr	r2, [pc, #204]	@ (810ad80 <UART_RxISR_16BIT+0x1b4>)
 810acb4:	4293      	cmp	r3, r2
 810acb6:	d01f      	beq.n	810acf8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810acb8:	687b      	ldr	r3, [r7, #4]
 810acba:	681b      	ldr	r3, [r3, #0]
 810acbc:	685b      	ldr	r3, [r3, #4]
 810acbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810acc2:	2b00      	cmp	r3, #0
 810acc4:	d018      	beq.n	810acf8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810acc6:	687b      	ldr	r3, [r7, #4]
 810acc8:	681b      	ldr	r3, [r3, #0]
 810acca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810accc:	6a3b      	ldr	r3, [r7, #32]
 810acce:	e853 3f00 	ldrex	r3, [r3]
 810acd2:	61fb      	str	r3, [r7, #28]
   return(result);
 810acd4:	69fb      	ldr	r3, [r7, #28]
 810acd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810acda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810acdc:	687b      	ldr	r3, [r7, #4]
 810acde:	681b      	ldr	r3, [r3, #0]
 810ace0:	461a      	mov	r2, r3
 810ace2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810ace4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810ace6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ace8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810acea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810acec:	e841 2300 	strex	r3, r2, [r1]
 810acf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810acf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810acf4:	2b00      	cmp	r3, #0
 810acf6:	d1e6      	bne.n	810acc6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810acf8:	687b      	ldr	r3, [r7, #4]
 810acfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810acfc:	2b01      	cmp	r3, #1
 810acfe:	d12e      	bne.n	810ad5e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ad00:	687b      	ldr	r3, [r7, #4]
 810ad02:	2200      	movs	r2, #0
 810ad04:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ad06:	687b      	ldr	r3, [r7, #4]
 810ad08:	681b      	ldr	r3, [r3, #0]
 810ad0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ad0c:	68fb      	ldr	r3, [r7, #12]
 810ad0e:	e853 3f00 	ldrex	r3, [r3]
 810ad12:	60bb      	str	r3, [r7, #8]
   return(result);
 810ad14:	68bb      	ldr	r3, [r7, #8]
 810ad16:	f023 0310 	bic.w	r3, r3, #16
 810ad1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 810ad1c:	687b      	ldr	r3, [r7, #4]
 810ad1e:	681b      	ldr	r3, [r3, #0]
 810ad20:	461a      	mov	r2, r3
 810ad22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810ad24:	61bb      	str	r3, [r7, #24]
 810ad26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ad28:	6979      	ldr	r1, [r7, #20]
 810ad2a:	69ba      	ldr	r2, [r7, #24]
 810ad2c:	e841 2300 	strex	r3, r2, [r1]
 810ad30:	613b      	str	r3, [r7, #16]
   return(result);
 810ad32:	693b      	ldr	r3, [r7, #16]
 810ad34:	2b00      	cmp	r3, #0
 810ad36:	d1e6      	bne.n	810ad06 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810ad38:	687b      	ldr	r3, [r7, #4]
 810ad3a:	681b      	ldr	r3, [r3, #0]
 810ad3c:	69db      	ldr	r3, [r3, #28]
 810ad3e:	f003 0310 	and.w	r3, r3, #16
 810ad42:	2b10      	cmp	r3, #16
 810ad44:	d103      	bne.n	810ad4e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810ad46:	687b      	ldr	r3, [r7, #4]
 810ad48:	681b      	ldr	r3, [r3, #0]
 810ad4a:	2210      	movs	r2, #16
 810ad4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810ad4e:	687b      	ldr	r3, [r7, #4]
 810ad50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810ad54:	4619      	mov	r1, r3
 810ad56:	6878      	ldr	r0, [r7, #4]
 810ad58:	f7fe fd68 	bl	810982c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810ad5c:	e00b      	b.n	810ad76 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810ad5e:	6878      	ldr	r0, [r7, #4]
 810ad60:	f7f8 fa7e 	bl	8103260 <HAL_UART_RxCpltCallback>
}
 810ad64:	e007      	b.n	810ad76 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810ad66:	687b      	ldr	r3, [r7, #4]
 810ad68:	681b      	ldr	r3, [r3, #0]
 810ad6a:	699a      	ldr	r2, [r3, #24]
 810ad6c:	687b      	ldr	r3, [r7, #4]
 810ad6e:	681b      	ldr	r3, [r3, #0]
 810ad70:	f042 0208 	orr.w	r2, r2, #8
 810ad74:	619a      	str	r2, [r3, #24]
}
 810ad76:	bf00      	nop
 810ad78:	3770      	adds	r7, #112	@ 0x70
 810ad7a:	46bd      	mov	sp, r7
 810ad7c:	bd80      	pop	{r7, pc}
 810ad7e:	bf00      	nop
 810ad80:	58000c00 	.word	0x58000c00

0810ad84 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810ad84:	b580      	push	{r7, lr}
 810ad86:	b0ac      	sub	sp, #176	@ 0xb0
 810ad88:	af00      	add	r7, sp, #0
 810ad8a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 810ad8c:	687b      	ldr	r3, [r7, #4]
 810ad8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810ad92:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810ad96:	687b      	ldr	r3, [r7, #4]
 810ad98:	681b      	ldr	r3, [r3, #0]
 810ad9a:	69db      	ldr	r3, [r3, #28]
 810ad9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810ada0:	687b      	ldr	r3, [r7, #4]
 810ada2:	681b      	ldr	r3, [r3, #0]
 810ada4:	681b      	ldr	r3, [r3, #0]
 810ada6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810adaa:	687b      	ldr	r3, [r7, #4]
 810adac:	681b      	ldr	r3, [r3, #0]
 810adae:	689b      	ldr	r3, [r3, #8]
 810adb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810adb4:	687b      	ldr	r3, [r7, #4]
 810adb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810adba:	2b22      	cmp	r3, #34	@ 0x22
 810adbc:	f040 8183 	bne.w	810b0c6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810adc0:	687b      	ldr	r3, [r7, #4]
 810adc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810adc6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810adca:	e126      	b.n	810b01a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810adcc:	687b      	ldr	r3, [r7, #4]
 810adce:	681b      	ldr	r3, [r3, #0]
 810add0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810add2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810add6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 810adda:	b2d9      	uxtb	r1, r3
 810addc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 810ade0:	b2da      	uxtb	r2, r3
 810ade2:	687b      	ldr	r3, [r7, #4]
 810ade4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ade6:	400a      	ands	r2, r1
 810ade8:	b2d2      	uxtb	r2, r2
 810adea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 810adec:	687b      	ldr	r3, [r7, #4]
 810adee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810adf0:	1c5a      	adds	r2, r3, #1
 810adf2:	687b      	ldr	r3, [r7, #4]
 810adf4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810adf6:	687b      	ldr	r3, [r7, #4]
 810adf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810adfc:	b29b      	uxth	r3, r3
 810adfe:	3b01      	subs	r3, #1
 810ae00:	b29a      	uxth	r2, r3
 810ae02:	687b      	ldr	r3, [r7, #4]
 810ae04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810ae08:	687b      	ldr	r3, [r7, #4]
 810ae0a:	681b      	ldr	r3, [r3, #0]
 810ae0c:	69db      	ldr	r3, [r3, #28]
 810ae0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810ae12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810ae16:	f003 0307 	and.w	r3, r3, #7
 810ae1a:	2b00      	cmp	r3, #0
 810ae1c:	d053      	beq.n	810aec6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810ae1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810ae22:	f003 0301 	and.w	r3, r3, #1
 810ae26:	2b00      	cmp	r3, #0
 810ae28:	d011      	beq.n	810ae4e <UART_RxISR_8BIT_FIFOEN+0xca>
 810ae2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 810ae2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810ae32:	2b00      	cmp	r3, #0
 810ae34:	d00b      	beq.n	810ae4e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810ae36:	687b      	ldr	r3, [r7, #4]
 810ae38:	681b      	ldr	r3, [r3, #0]
 810ae3a:	2201      	movs	r2, #1
 810ae3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810ae3e:	687b      	ldr	r3, [r7, #4]
 810ae40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ae44:	f043 0201 	orr.w	r2, r3, #1
 810ae48:	687b      	ldr	r3, [r7, #4]
 810ae4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810ae4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810ae52:	f003 0302 	and.w	r3, r3, #2
 810ae56:	2b00      	cmp	r3, #0
 810ae58:	d011      	beq.n	810ae7e <UART_RxISR_8BIT_FIFOEN+0xfa>
 810ae5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810ae5e:	f003 0301 	and.w	r3, r3, #1
 810ae62:	2b00      	cmp	r3, #0
 810ae64:	d00b      	beq.n	810ae7e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810ae66:	687b      	ldr	r3, [r7, #4]
 810ae68:	681b      	ldr	r3, [r3, #0]
 810ae6a:	2202      	movs	r2, #2
 810ae6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810ae6e:	687b      	ldr	r3, [r7, #4]
 810ae70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ae74:	f043 0204 	orr.w	r2, r3, #4
 810ae78:	687b      	ldr	r3, [r7, #4]
 810ae7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810ae7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810ae82:	f003 0304 	and.w	r3, r3, #4
 810ae86:	2b00      	cmp	r3, #0
 810ae88:	d011      	beq.n	810aeae <UART_RxISR_8BIT_FIFOEN+0x12a>
 810ae8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810ae8e:	f003 0301 	and.w	r3, r3, #1
 810ae92:	2b00      	cmp	r3, #0
 810ae94:	d00b      	beq.n	810aeae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810ae96:	687b      	ldr	r3, [r7, #4]
 810ae98:	681b      	ldr	r3, [r3, #0]
 810ae9a:	2204      	movs	r2, #4
 810ae9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810ae9e:	687b      	ldr	r3, [r7, #4]
 810aea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810aea4:	f043 0202 	orr.w	r2, r3, #2
 810aea8:	687b      	ldr	r3, [r7, #4]
 810aeaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810aeae:	687b      	ldr	r3, [r7, #4]
 810aeb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810aeb4:	2b00      	cmp	r3, #0
 810aeb6:	d006      	beq.n	810aec6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810aeb8:	6878      	ldr	r0, [r7, #4]
 810aeba:	f7fe fcad 	bl	8109818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810aebe:	687b      	ldr	r3, [r7, #4]
 810aec0:	2200      	movs	r2, #0
 810aec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810aec6:	687b      	ldr	r3, [r7, #4]
 810aec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810aecc:	b29b      	uxth	r3, r3
 810aece:	2b00      	cmp	r3, #0
 810aed0:	f040 80a3 	bne.w	810b01a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810aed4:	687b      	ldr	r3, [r7, #4]
 810aed6:	681b      	ldr	r3, [r3, #0]
 810aed8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aeda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810aedc:	e853 3f00 	ldrex	r3, [r3]
 810aee0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 810aee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810aee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810aee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810aeec:	687b      	ldr	r3, [r7, #4]
 810aeee:	681b      	ldr	r3, [r3, #0]
 810aef0:	461a      	mov	r2, r3
 810aef2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810aef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810aef8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aefa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 810aefc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810aefe:	e841 2300 	strex	r3, r2, [r1]
 810af02:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 810af04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810af06:	2b00      	cmp	r3, #0
 810af08:	d1e4      	bne.n	810aed4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810af0a:	687b      	ldr	r3, [r7, #4]
 810af0c:	681b      	ldr	r3, [r3, #0]
 810af0e:	3308      	adds	r3, #8
 810af10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810af12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810af14:	e853 3f00 	ldrex	r3, [r3]
 810af18:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 810af1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810af1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810af20:	f023 0301 	bic.w	r3, r3, #1
 810af24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810af28:	687b      	ldr	r3, [r7, #4]
 810af2a:	681b      	ldr	r3, [r3, #0]
 810af2c:	3308      	adds	r3, #8
 810af2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810af32:	66ba      	str	r2, [r7, #104]	@ 0x68
 810af34:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af36:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 810af38:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 810af3a:	e841 2300 	strex	r3, r2, [r1]
 810af3e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810af40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810af42:	2b00      	cmp	r3, #0
 810af44:	d1e1      	bne.n	810af0a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810af46:	687b      	ldr	r3, [r7, #4]
 810af48:	2220      	movs	r2, #32
 810af4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810af4e:	687b      	ldr	r3, [r7, #4]
 810af50:	2200      	movs	r2, #0
 810af52:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810af54:	687b      	ldr	r3, [r7, #4]
 810af56:	2200      	movs	r2, #0
 810af58:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810af5a:	687b      	ldr	r3, [r7, #4]
 810af5c:	681b      	ldr	r3, [r3, #0]
 810af5e:	4a60      	ldr	r2, [pc, #384]	@ (810b0e0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 810af60:	4293      	cmp	r3, r2
 810af62:	d021      	beq.n	810afa8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810af64:	687b      	ldr	r3, [r7, #4]
 810af66:	681b      	ldr	r3, [r3, #0]
 810af68:	685b      	ldr	r3, [r3, #4]
 810af6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810af6e:	2b00      	cmp	r3, #0
 810af70:	d01a      	beq.n	810afa8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810af72:	687b      	ldr	r3, [r7, #4]
 810af74:	681b      	ldr	r3, [r3, #0]
 810af76:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810af78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810af7a:	e853 3f00 	ldrex	r3, [r3]
 810af7e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810af80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810af82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810af86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810af8a:	687b      	ldr	r3, [r7, #4]
 810af8c:	681b      	ldr	r3, [r3, #0]
 810af8e:	461a      	mov	r2, r3
 810af90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810af94:	657b      	str	r3, [r7, #84]	@ 0x54
 810af96:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af98:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810af9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810af9c:	e841 2300 	strex	r3, r2, [r1]
 810afa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810afa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810afa4:	2b00      	cmp	r3, #0
 810afa6:	d1e4      	bne.n	810af72 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810afa8:	687b      	ldr	r3, [r7, #4]
 810afaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810afac:	2b01      	cmp	r3, #1
 810afae:	d130      	bne.n	810b012 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810afb0:	687b      	ldr	r3, [r7, #4]
 810afb2:	2200      	movs	r2, #0
 810afb4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810afb6:	687b      	ldr	r3, [r7, #4]
 810afb8:	681b      	ldr	r3, [r3, #0]
 810afba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810afbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810afbe:	e853 3f00 	ldrex	r3, [r3]
 810afc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810afc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810afc6:	f023 0310 	bic.w	r3, r3, #16
 810afca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810afce:	687b      	ldr	r3, [r7, #4]
 810afd0:	681b      	ldr	r3, [r3, #0]
 810afd2:	461a      	mov	r2, r3
 810afd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810afd8:	643b      	str	r3, [r7, #64]	@ 0x40
 810afda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810afdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810afde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810afe0:	e841 2300 	strex	r3, r2, [r1]
 810afe4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810afe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810afe8:	2b00      	cmp	r3, #0
 810afea:	d1e4      	bne.n	810afb6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810afec:	687b      	ldr	r3, [r7, #4]
 810afee:	681b      	ldr	r3, [r3, #0]
 810aff0:	69db      	ldr	r3, [r3, #28]
 810aff2:	f003 0310 	and.w	r3, r3, #16
 810aff6:	2b10      	cmp	r3, #16
 810aff8:	d103      	bne.n	810b002 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810affa:	687b      	ldr	r3, [r7, #4]
 810affc:	681b      	ldr	r3, [r3, #0]
 810affe:	2210      	movs	r2, #16
 810b000:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810b002:	687b      	ldr	r3, [r7, #4]
 810b004:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810b008:	4619      	mov	r1, r3
 810b00a:	6878      	ldr	r0, [r7, #4]
 810b00c:	f7fe fc0e 	bl	810982c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 810b010:	e00e      	b.n	810b030 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 810b012:	6878      	ldr	r0, [r7, #4]
 810b014:	f7f8 f924 	bl	8103260 <HAL_UART_RxCpltCallback>
        break;
 810b018:	e00a      	b.n	810b030 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b01a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 810b01e:	2b00      	cmp	r3, #0
 810b020:	d006      	beq.n	810b030 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 810b022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b026:	f003 0320 	and.w	r3, r3, #32
 810b02a:	2b00      	cmp	r3, #0
 810b02c:	f47f aece 	bne.w	810adcc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810b030:	687b      	ldr	r3, [r7, #4]
 810b032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b036:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810b03a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 810b03e:	2b00      	cmp	r3, #0
 810b040:	d049      	beq.n	810b0d6 <UART_RxISR_8BIT_FIFOEN+0x352>
 810b042:	687b      	ldr	r3, [r7, #4]
 810b044:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b048:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 810b04c:	429a      	cmp	r2, r3
 810b04e:	d242      	bcs.n	810b0d6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810b050:	687b      	ldr	r3, [r7, #4]
 810b052:	681b      	ldr	r3, [r3, #0]
 810b054:	3308      	adds	r3, #8
 810b056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b058:	6a3b      	ldr	r3, [r7, #32]
 810b05a:	e853 3f00 	ldrex	r3, [r3]
 810b05e:	61fb      	str	r3, [r7, #28]
   return(result);
 810b060:	69fb      	ldr	r3, [r7, #28]
 810b062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b066:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810b06a:	687b      	ldr	r3, [r7, #4]
 810b06c:	681b      	ldr	r3, [r3, #0]
 810b06e:	3308      	adds	r3, #8
 810b070:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810b074:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810b076:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b07a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b07c:	e841 2300 	strex	r3, r2, [r1]
 810b080:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b084:	2b00      	cmp	r3, #0
 810b086:	d1e3      	bne.n	810b050 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 810b088:	687b      	ldr	r3, [r7, #4]
 810b08a:	4a16      	ldr	r2, [pc, #88]	@ (810b0e4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 810b08c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810b08e:	687b      	ldr	r3, [r7, #4]
 810b090:	681b      	ldr	r3, [r3, #0]
 810b092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b094:	68fb      	ldr	r3, [r7, #12]
 810b096:	e853 3f00 	ldrex	r3, [r3]
 810b09a:	60bb      	str	r3, [r7, #8]
   return(result);
 810b09c:	68bb      	ldr	r3, [r7, #8]
 810b09e:	f043 0320 	orr.w	r3, r3, #32
 810b0a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810b0a6:	687b      	ldr	r3, [r7, #4]
 810b0a8:	681b      	ldr	r3, [r3, #0]
 810b0aa:	461a      	mov	r2, r3
 810b0ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810b0b0:	61bb      	str	r3, [r7, #24]
 810b0b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b0b4:	6979      	ldr	r1, [r7, #20]
 810b0b6:	69ba      	ldr	r2, [r7, #24]
 810b0b8:	e841 2300 	strex	r3, r2, [r1]
 810b0bc:	613b      	str	r3, [r7, #16]
   return(result);
 810b0be:	693b      	ldr	r3, [r7, #16]
 810b0c0:	2b00      	cmp	r3, #0
 810b0c2:	d1e4      	bne.n	810b08e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810b0c4:	e007      	b.n	810b0d6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810b0c6:	687b      	ldr	r3, [r7, #4]
 810b0c8:	681b      	ldr	r3, [r3, #0]
 810b0ca:	699a      	ldr	r2, [r3, #24]
 810b0cc:	687b      	ldr	r3, [r7, #4]
 810b0ce:	681b      	ldr	r3, [r3, #0]
 810b0d0:	f042 0208 	orr.w	r2, r2, #8
 810b0d4:	619a      	str	r2, [r3, #24]
}
 810b0d6:	bf00      	nop
 810b0d8:	37b0      	adds	r7, #176	@ 0xb0
 810b0da:	46bd      	mov	sp, r7
 810b0dc:	bd80      	pop	{r7, pc}
 810b0de:	bf00      	nop
 810b0e0:	58000c00 	.word	0x58000c00
 810b0e4:	0810aa15 	.word	0x0810aa15

0810b0e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810b0e8:	b580      	push	{r7, lr}
 810b0ea:	b0ae      	sub	sp, #184	@ 0xb8
 810b0ec:	af00      	add	r7, sp, #0
 810b0ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 810b0f0:	687b      	ldr	r3, [r7, #4]
 810b0f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810b0f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810b0fa:	687b      	ldr	r3, [r7, #4]
 810b0fc:	681b      	ldr	r3, [r3, #0]
 810b0fe:	69db      	ldr	r3, [r3, #28]
 810b100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810b104:	687b      	ldr	r3, [r7, #4]
 810b106:	681b      	ldr	r3, [r3, #0]
 810b108:	681b      	ldr	r3, [r3, #0]
 810b10a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810b10e:	687b      	ldr	r3, [r7, #4]
 810b110:	681b      	ldr	r3, [r3, #0]
 810b112:	689b      	ldr	r3, [r3, #8]
 810b114:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810b118:	687b      	ldr	r3, [r7, #4]
 810b11a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b11e:	2b22      	cmp	r3, #34	@ 0x22
 810b120:	f040 8187 	bne.w	810b432 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810b124:	687b      	ldr	r3, [r7, #4]
 810b126:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b12a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b12e:	e12a      	b.n	810b386 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810b130:	687b      	ldr	r3, [r7, #4]
 810b132:	681b      	ldr	r3, [r3, #0]
 810b134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b136:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 810b13a:	687b      	ldr	r3, [r7, #4]
 810b13c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b13e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 810b142:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 810b146:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 810b14a:	4013      	ands	r3, r2
 810b14c:	b29a      	uxth	r2, r3
 810b14e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810b152:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 810b154:	687b      	ldr	r3, [r7, #4]
 810b156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b158:	1c9a      	adds	r2, r3, #2
 810b15a:	687b      	ldr	r3, [r7, #4]
 810b15c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810b15e:	687b      	ldr	r3, [r7, #4]
 810b160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b164:	b29b      	uxth	r3, r3
 810b166:	3b01      	subs	r3, #1
 810b168:	b29a      	uxth	r2, r3
 810b16a:	687b      	ldr	r3, [r7, #4]
 810b16c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810b170:	687b      	ldr	r3, [r7, #4]
 810b172:	681b      	ldr	r3, [r3, #0]
 810b174:	69db      	ldr	r3, [r3, #28]
 810b176:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810b17a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b17e:	f003 0307 	and.w	r3, r3, #7
 810b182:	2b00      	cmp	r3, #0
 810b184:	d053      	beq.n	810b22e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810b186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b18a:	f003 0301 	and.w	r3, r3, #1
 810b18e:	2b00      	cmp	r3, #0
 810b190:	d011      	beq.n	810b1b6 <UART_RxISR_16BIT_FIFOEN+0xce>
 810b192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b19a:	2b00      	cmp	r3, #0
 810b19c:	d00b      	beq.n	810b1b6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810b19e:	687b      	ldr	r3, [r7, #4]
 810b1a0:	681b      	ldr	r3, [r3, #0]
 810b1a2:	2201      	movs	r2, #1
 810b1a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810b1a6:	687b      	ldr	r3, [r7, #4]
 810b1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b1ac:	f043 0201 	orr.w	r2, r3, #1
 810b1b0:	687b      	ldr	r3, [r7, #4]
 810b1b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b1b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b1ba:	f003 0302 	and.w	r3, r3, #2
 810b1be:	2b00      	cmp	r3, #0
 810b1c0:	d011      	beq.n	810b1e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 810b1c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810b1c6:	f003 0301 	and.w	r3, r3, #1
 810b1ca:	2b00      	cmp	r3, #0
 810b1cc:	d00b      	beq.n	810b1e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810b1ce:	687b      	ldr	r3, [r7, #4]
 810b1d0:	681b      	ldr	r3, [r3, #0]
 810b1d2:	2202      	movs	r2, #2
 810b1d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810b1d6:	687b      	ldr	r3, [r7, #4]
 810b1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b1dc:	f043 0204 	orr.w	r2, r3, #4
 810b1e0:	687b      	ldr	r3, [r7, #4]
 810b1e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b1e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b1ea:	f003 0304 	and.w	r3, r3, #4
 810b1ee:	2b00      	cmp	r3, #0
 810b1f0:	d011      	beq.n	810b216 <UART_RxISR_16BIT_FIFOEN+0x12e>
 810b1f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810b1f6:	f003 0301 	and.w	r3, r3, #1
 810b1fa:	2b00      	cmp	r3, #0
 810b1fc:	d00b      	beq.n	810b216 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810b1fe:	687b      	ldr	r3, [r7, #4]
 810b200:	681b      	ldr	r3, [r3, #0]
 810b202:	2204      	movs	r2, #4
 810b204:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810b206:	687b      	ldr	r3, [r7, #4]
 810b208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b20c:	f043 0202 	orr.w	r2, r3, #2
 810b210:	687b      	ldr	r3, [r7, #4]
 810b212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810b216:	687b      	ldr	r3, [r7, #4]
 810b218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b21c:	2b00      	cmp	r3, #0
 810b21e:	d006      	beq.n	810b22e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810b220:	6878      	ldr	r0, [r7, #4]
 810b222:	f7fe faf9 	bl	8109818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b226:	687b      	ldr	r3, [r7, #4]
 810b228:	2200      	movs	r2, #0
 810b22a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810b22e:	687b      	ldr	r3, [r7, #4]
 810b230:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b234:	b29b      	uxth	r3, r3
 810b236:	2b00      	cmp	r3, #0
 810b238:	f040 80a5 	bne.w	810b386 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810b23c:	687b      	ldr	r3, [r7, #4]
 810b23e:	681b      	ldr	r3, [r3, #0]
 810b240:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810b244:	e853 3f00 	ldrex	r3, [r3]
 810b248:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810b24a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810b24c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810b250:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810b254:	687b      	ldr	r3, [r7, #4]
 810b256:	681b      	ldr	r3, [r3, #0]
 810b258:	461a      	mov	r2, r3
 810b25a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810b25e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810b262:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b264:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810b266:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810b26a:	e841 2300 	strex	r3, r2, [r1]
 810b26e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810b270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810b272:	2b00      	cmp	r3, #0
 810b274:	d1e2      	bne.n	810b23c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b276:	687b      	ldr	r3, [r7, #4]
 810b278:	681b      	ldr	r3, [r3, #0]
 810b27a:	3308      	adds	r3, #8
 810b27c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b27e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810b280:	e853 3f00 	ldrex	r3, [r3]
 810b284:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810b286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810b288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b28c:	f023 0301 	bic.w	r3, r3, #1
 810b290:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810b294:	687b      	ldr	r3, [r7, #4]
 810b296:	681b      	ldr	r3, [r3, #0]
 810b298:	3308      	adds	r3, #8
 810b29a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 810b29e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810b2a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b2a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810b2a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810b2a6:	e841 2300 	strex	r3, r2, [r1]
 810b2aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810b2ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810b2ae:	2b00      	cmp	r3, #0
 810b2b0:	d1e1      	bne.n	810b276 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810b2b2:	687b      	ldr	r3, [r7, #4]
 810b2b4:	2220      	movs	r2, #32
 810b2b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810b2ba:	687b      	ldr	r3, [r7, #4]
 810b2bc:	2200      	movs	r2, #0
 810b2be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b2c0:	687b      	ldr	r3, [r7, #4]
 810b2c2:	2200      	movs	r2, #0
 810b2c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810b2c6:	687b      	ldr	r3, [r7, #4]
 810b2c8:	681b      	ldr	r3, [r3, #0]
 810b2ca:	4a60      	ldr	r2, [pc, #384]	@ (810b44c <UART_RxISR_16BIT_FIFOEN+0x364>)
 810b2cc:	4293      	cmp	r3, r2
 810b2ce:	d021      	beq.n	810b314 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810b2d0:	687b      	ldr	r3, [r7, #4]
 810b2d2:	681b      	ldr	r3, [r3, #0]
 810b2d4:	685b      	ldr	r3, [r3, #4]
 810b2d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810b2da:	2b00      	cmp	r3, #0
 810b2dc:	d01a      	beq.n	810b314 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810b2de:	687b      	ldr	r3, [r7, #4]
 810b2e0:	681b      	ldr	r3, [r3, #0]
 810b2e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b2e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b2e6:	e853 3f00 	ldrex	r3, [r3]
 810b2ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810b2ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810b2ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810b2f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810b2f6:	687b      	ldr	r3, [r7, #4]
 810b2f8:	681b      	ldr	r3, [r3, #0]
 810b2fa:	461a      	mov	r2, r3
 810b2fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 810b300:	65bb      	str	r3, [r7, #88]	@ 0x58
 810b302:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b304:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810b306:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810b308:	e841 2300 	strex	r3, r2, [r1]
 810b30c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810b30e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810b310:	2b00      	cmp	r3, #0
 810b312:	d1e4      	bne.n	810b2de <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b314:	687b      	ldr	r3, [r7, #4]
 810b316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b318:	2b01      	cmp	r3, #1
 810b31a:	d130      	bne.n	810b37e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b31c:	687b      	ldr	r3, [r7, #4]
 810b31e:	2200      	movs	r2, #0
 810b320:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b322:	687b      	ldr	r3, [r7, #4]
 810b324:	681b      	ldr	r3, [r3, #0]
 810b326:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b32a:	e853 3f00 	ldrex	r3, [r3]
 810b32e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810b330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b332:	f023 0310 	bic.w	r3, r3, #16
 810b336:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810b33a:	687b      	ldr	r3, [r7, #4]
 810b33c:	681b      	ldr	r3, [r3, #0]
 810b33e:	461a      	mov	r2, r3
 810b340:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810b344:	647b      	str	r3, [r7, #68]	@ 0x44
 810b346:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b348:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810b34a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810b34c:	e841 2300 	strex	r3, r2, [r1]
 810b350:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810b352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b354:	2b00      	cmp	r3, #0
 810b356:	d1e4      	bne.n	810b322 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810b358:	687b      	ldr	r3, [r7, #4]
 810b35a:	681b      	ldr	r3, [r3, #0]
 810b35c:	69db      	ldr	r3, [r3, #28]
 810b35e:	f003 0310 	and.w	r3, r3, #16
 810b362:	2b10      	cmp	r3, #16
 810b364:	d103      	bne.n	810b36e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b366:	687b      	ldr	r3, [r7, #4]
 810b368:	681b      	ldr	r3, [r3, #0]
 810b36a:	2210      	movs	r2, #16
 810b36c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810b36e:	687b      	ldr	r3, [r7, #4]
 810b370:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810b374:	4619      	mov	r1, r3
 810b376:	6878      	ldr	r0, [r7, #4]
 810b378:	f7fe fa58 	bl	810982c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 810b37c:	e00e      	b.n	810b39c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 810b37e:	6878      	ldr	r0, [r7, #4]
 810b380:	f7f7 ff6e 	bl	8103260 <HAL_UART_RxCpltCallback>
        break;
 810b384:	e00a      	b.n	810b39c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b386:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 810b38a:	2b00      	cmp	r3, #0
 810b38c:	d006      	beq.n	810b39c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 810b38e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b392:	f003 0320 	and.w	r3, r3, #32
 810b396:	2b00      	cmp	r3, #0
 810b398:	f47f aeca 	bne.w	810b130 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810b39c:	687b      	ldr	r3, [r7, #4]
 810b39e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b3a2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810b3a6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 810b3aa:	2b00      	cmp	r3, #0
 810b3ac:	d049      	beq.n	810b442 <UART_RxISR_16BIT_FIFOEN+0x35a>
 810b3ae:	687b      	ldr	r3, [r7, #4]
 810b3b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b3b4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 810b3b8:	429a      	cmp	r2, r3
 810b3ba:	d242      	bcs.n	810b442 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810b3bc:	687b      	ldr	r3, [r7, #4]
 810b3be:	681b      	ldr	r3, [r3, #0]
 810b3c0:	3308      	adds	r3, #8
 810b3c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b3c6:	e853 3f00 	ldrex	r3, [r3]
 810b3ca:	623b      	str	r3, [r7, #32]
   return(result);
 810b3cc:	6a3b      	ldr	r3, [r7, #32]
 810b3ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b3d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810b3d6:	687b      	ldr	r3, [r7, #4]
 810b3d8:	681b      	ldr	r3, [r3, #0]
 810b3da:	3308      	adds	r3, #8
 810b3dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 810b3e0:	633a      	str	r2, [r7, #48]	@ 0x30
 810b3e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b3e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810b3e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b3e8:	e841 2300 	strex	r3, r2, [r1]
 810b3ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810b3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b3f0:	2b00      	cmp	r3, #0
 810b3f2:	d1e3      	bne.n	810b3bc <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 810b3f4:	687b      	ldr	r3, [r7, #4]
 810b3f6:	4a16      	ldr	r2, [pc, #88]	@ (810b450 <UART_RxISR_16BIT_FIFOEN+0x368>)
 810b3f8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810b3fa:	687b      	ldr	r3, [r7, #4]
 810b3fc:	681b      	ldr	r3, [r3, #0]
 810b3fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b400:	693b      	ldr	r3, [r7, #16]
 810b402:	e853 3f00 	ldrex	r3, [r3]
 810b406:	60fb      	str	r3, [r7, #12]
   return(result);
 810b408:	68fb      	ldr	r3, [r7, #12]
 810b40a:	f043 0320 	orr.w	r3, r3, #32
 810b40e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810b412:	687b      	ldr	r3, [r7, #4]
 810b414:	681b      	ldr	r3, [r3, #0]
 810b416:	461a      	mov	r2, r3
 810b418:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810b41c:	61fb      	str	r3, [r7, #28]
 810b41e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b420:	69b9      	ldr	r1, [r7, #24]
 810b422:	69fa      	ldr	r2, [r7, #28]
 810b424:	e841 2300 	strex	r3, r2, [r1]
 810b428:	617b      	str	r3, [r7, #20]
   return(result);
 810b42a:	697b      	ldr	r3, [r7, #20]
 810b42c:	2b00      	cmp	r3, #0
 810b42e:	d1e4      	bne.n	810b3fa <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810b430:	e007      	b.n	810b442 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810b432:	687b      	ldr	r3, [r7, #4]
 810b434:	681b      	ldr	r3, [r3, #0]
 810b436:	699a      	ldr	r2, [r3, #24]
 810b438:	687b      	ldr	r3, [r7, #4]
 810b43a:	681b      	ldr	r3, [r3, #0]
 810b43c:	f042 0208 	orr.w	r2, r2, #8
 810b440:	619a      	str	r2, [r3, #24]
}
 810b442:	bf00      	nop
 810b444:	37b8      	adds	r7, #184	@ 0xb8
 810b446:	46bd      	mov	sp, r7
 810b448:	bd80      	pop	{r7, pc}
 810b44a:	bf00      	nop
 810b44c:	58000c00 	.word	0x58000c00
 810b450:	0810abcd 	.word	0x0810abcd

0810b454 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810b454:	b480      	push	{r7}
 810b456:	b083      	sub	sp, #12
 810b458:	af00      	add	r7, sp, #0
 810b45a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810b45c:	bf00      	nop
 810b45e:	370c      	adds	r7, #12
 810b460:	46bd      	mov	sp, r7
 810b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b466:	4770      	bx	lr

0810b468 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810b468:	b480      	push	{r7}
 810b46a:	b083      	sub	sp, #12
 810b46c:	af00      	add	r7, sp, #0
 810b46e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810b470:	bf00      	nop
 810b472:	370c      	adds	r7, #12
 810b474:	46bd      	mov	sp, r7
 810b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b47a:	4770      	bx	lr

0810b47c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810b47c:	b480      	push	{r7}
 810b47e:	b083      	sub	sp, #12
 810b480:	af00      	add	r7, sp, #0
 810b482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810b484:	bf00      	nop
 810b486:	370c      	adds	r7, #12
 810b488:	46bd      	mov	sp, r7
 810b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b48e:	4770      	bx	lr

0810b490 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810b490:	b480      	push	{r7}
 810b492:	b085      	sub	sp, #20
 810b494:	af00      	add	r7, sp, #0
 810b496:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b498:	687b      	ldr	r3, [r7, #4]
 810b49a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b49e:	2b01      	cmp	r3, #1
 810b4a0:	d101      	bne.n	810b4a6 <HAL_UARTEx_DisableFifoMode+0x16>
 810b4a2:	2302      	movs	r3, #2
 810b4a4:	e027      	b.n	810b4f6 <HAL_UARTEx_DisableFifoMode+0x66>
 810b4a6:	687b      	ldr	r3, [r7, #4]
 810b4a8:	2201      	movs	r2, #1
 810b4aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b4ae:	687b      	ldr	r3, [r7, #4]
 810b4b0:	2224      	movs	r2, #36	@ 0x24
 810b4b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b4b6:	687b      	ldr	r3, [r7, #4]
 810b4b8:	681b      	ldr	r3, [r3, #0]
 810b4ba:	681b      	ldr	r3, [r3, #0]
 810b4bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b4be:	687b      	ldr	r3, [r7, #4]
 810b4c0:	681b      	ldr	r3, [r3, #0]
 810b4c2:	681a      	ldr	r2, [r3, #0]
 810b4c4:	687b      	ldr	r3, [r7, #4]
 810b4c6:	681b      	ldr	r3, [r3, #0]
 810b4c8:	f022 0201 	bic.w	r2, r2, #1
 810b4cc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810b4ce:	68fb      	ldr	r3, [r7, #12]
 810b4d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810b4d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810b4d6:	687b      	ldr	r3, [r7, #4]
 810b4d8:	2200      	movs	r2, #0
 810b4da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b4dc:	687b      	ldr	r3, [r7, #4]
 810b4de:	681b      	ldr	r3, [r3, #0]
 810b4e0:	68fa      	ldr	r2, [r7, #12]
 810b4e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b4e4:	687b      	ldr	r3, [r7, #4]
 810b4e6:	2220      	movs	r2, #32
 810b4e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b4ec:	687b      	ldr	r3, [r7, #4]
 810b4ee:	2200      	movs	r2, #0
 810b4f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b4f4:	2300      	movs	r3, #0
}
 810b4f6:	4618      	mov	r0, r3
 810b4f8:	3714      	adds	r7, #20
 810b4fa:	46bd      	mov	sp, r7
 810b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b500:	4770      	bx	lr

0810b502 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b502:	b580      	push	{r7, lr}
 810b504:	b084      	sub	sp, #16
 810b506:	af00      	add	r7, sp, #0
 810b508:	6078      	str	r0, [r7, #4]
 810b50a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b50c:	687b      	ldr	r3, [r7, #4]
 810b50e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b512:	2b01      	cmp	r3, #1
 810b514:	d101      	bne.n	810b51a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810b516:	2302      	movs	r3, #2
 810b518:	e02d      	b.n	810b576 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810b51a:	687b      	ldr	r3, [r7, #4]
 810b51c:	2201      	movs	r2, #1
 810b51e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b522:	687b      	ldr	r3, [r7, #4]
 810b524:	2224      	movs	r2, #36	@ 0x24
 810b526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b52a:	687b      	ldr	r3, [r7, #4]
 810b52c:	681b      	ldr	r3, [r3, #0]
 810b52e:	681b      	ldr	r3, [r3, #0]
 810b530:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b532:	687b      	ldr	r3, [r7, #4]
 810b534:	681b      	ldr	r3, [r3, #0]
 810b536:	681a      	ldr	r2, [r3, #0]
 810b538:	687b      	ldr	r3, [r7, #4]
 810b53a:	681b      	ldr	r3, [r3, #0]
 810b53c:	f022 0201 	bic.w	r2, r2, #1
 810b540:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810b542:	687b      	ldr	r3, [r7, #4]
 810b544:	681b      	ldr	r3, [r3, #0]
 810b546:	689b      	ldr	r3, [r3, #8]
 810b548:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810b54c:	687b      	ldr	r3, [r7, #4]
 810b54e:	681b      	ldr	r3, [r3, #0]
 810b550:	683a      	ldr	r2, [r7, #0]
 810b552:	430a      	orrs	r2, r1
 810b554:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b556:	6878      	ldr	r0, [r7, #4]
 810b558:	f000 f850 	bl	810b5fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b55c:	687b      	ldr	r3, [r7, #4]
 810b55e:	681b      	ldr	r3, [r3, #0]
 810b560:	68fa      	ldr	r2, [r7, #12]
 810b562:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b564:	687b      	ldr	r3, [r7, #4]
 810b566:	2220      	movs	r2, #32
 810b568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b56c:	687b      	ldr	r3, [r7, #4]
 810b56e:	2200      	movs	r2, #0
 810b570:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b574:	2300      	movs	r3, #0
}
 810b576:	4618      	mov	r0, r3
 810b578:	3710      	adds	r7, #16
 810b57a:	46bd      	mov	sp, r7
 810b57c:	bd80      	pop	{r7, pc}

0810b57e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b57e:	b580      	push	{r7, lr}
 810b580:	b084      	sub	sp, #16
 810b582:	af00      	add	r7, sp, #0
 810b584:	6078      	str	r0, [r7, #4]
 810b586:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b588:	687b      	ldr	r3, [r7, #4]
 810b58a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b58e:	2b01      	cmp	r3, #1
 810b590:	d101      	bne.n	810b596 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810b592:	2302      	movs	r3, #2
 810b594:	e02d      	b.n	810b5f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810b596:	687b      	ldr	r3, [r7, #4]
 810b598:	2201      	movs	r2, #1
 810b59a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b59e:	687b      	ldr	r3, [r7, #4]
 810b5a0:	2224      	movs	r2, #36	@ 0x24
 810b5a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b5a6:	687b      	ldr	r3, [r7, #4]
 810b5a8:	681b      	ldr	r3, [r3, #0]
 810b5aa:	681b      	ldr	r3, [r3, #0]
 810b5ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b5ae:	687b      	ldr	r3, [r7, #4]
 810b5b0:	681b      	ldr	r3, [r3, #0]
 810b5b2:	681a      	ldr	r2, [r3, #0]
 810b5b4:	687b      	ldr	r3, [r7, #4]
 810b5b6:	681b      	ldr	r3, [r3, #0]
 810b5b8:	f022 0201 	bic.w	r2, r2, #1
 810b5bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810b5be:	687b      	ldr	r3, [r7, #4]
 810b5c0:	681b      	ldr	r3, [r3, #0]
 810b5c2:	689b      	ldr	r3, [r3, #8]
 810b5c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810b5c8:	687b      	ldr	r3, [r7, #4]
 810b5ca:	681b      	ldr	r3, [r3, #0]
 810b5cc:	683a      	ldr	r2, [r7, #0]
 810b5ce:	430a      	orrs	r2, r1
 810b5d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b5d2:	6878      	ldr	r0, [r7, #4]
 810b5d4:	f000 f812 	bl	810b5fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b5d8:	687b      	ldr	r3, [r7, #4]
 810b5da:	681b      	ldr	r3, [r3, #0]
 810b5dc:	68fa      	ldr	r2, [r7, #12]
 810b5de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b5e0:	687b      	ldr	r3, [r7, #4]
 810b5e2:	2220      	movs	r2, #32
 810b5e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b5e8:	687b      	ldr	r3, [r7, #4]
 810b5ea:	2200      	movs	r2, #0
 810b5ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b5f0:	2300      	movs	r3, #0
}
 810b5f2:	4618      	mov	r0, r3
 810b5f4:	3710      	adds	r7, #16
 810b5f6:	46bd      	mov	sp, r7
 810b5f8:	bd80      	pop	{r7, pc}
	...

0810b5fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810b5fc:	b480      	push	{r7}
 810b5fe:	b085      	sub	sp, #20
 810b600:	af00      	add	r7, sp, #0
 810b602:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810b604:	687b      	ldr	r3, [r7, #4]
 810b606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b608:	2b00      	cmp	r3, #0
 810b60a:	d108      	bne.n	810b61e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810b60c:	687b      	ldr	r3, [r7, #4]
 810b60e:	2201      	movs	r2, #1
 810b610:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810b614:	687b      	ldr	r3, [r7, #4]
 810b616:	2201      	movs	r2, #1
 810b618:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810b61c:	e031      	b.n	810b682 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810b61e:	2310      	movs	r3, #16
 810b620:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810b622:	2310      	movs	r3, #16
 810b624:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810b626:	687b      	ldr	r3, [r7, #4]
 810b628:	681b      	ldr	r3, [r3, #0]
 810b62a:	689b      	ldr	r3, [r3, #8]
 810b62c:	0e5b      	lsrs	r3, r3, #25
 810b62e:	b2db      	uxtb	r3, r3
 810b630:	f003 0307 	and.w	r3, r3, #7
 810b634:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810b636:	687b      	ldr	r3, [r7, #4]
 810b638:	681b      	ldr	r3, [r3, #0]
 810b63a:	689b      	ldr	r3, [r3, #8]
 810b63c:	0f5b      	lsrs	r3, r3, #29
 810b63e:	b2db      	uxtb	r3, r3
 810b640:	f003 0307 	and.w	r3, r3, #7
 810b644:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b646:	7bbb      	ldrb	r3, [r7, #14]
 810b648:	7b3a      	ldrb	r2, [r7, #12]
 810b64a:	4911      	ldr	r1, [pc, #68]	@ (810b690 <UARTEx_SetNbDataToProcess+0x94>)
 810b64c:	5c8a      	ldrb	r2, [r1, r2]
 810b64e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810b652:	7b3a      	ldrb	r2, [r7, #12]
 810b654:	490f      	ldr	r1, [pc, #60]	@ (810b694 <UARTEx_SetNbDataToProcess+0x98>)
 810b656:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b658:	fb93 f3f2 	sdiv	r3, r3, r2
 810b65c:	b29a      	uxth	r2, r3
 810b65e:	687b      	ldr	r3, [r7, #4]
 810b660:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b664:	7bfb      	ldrb	r3, [r7, #15]
 810b666:	7b7a      	ldrb	r2, [r7, #13]
 810b668:	4909      	ldr	r1, [pc, #36]	@ (810b690 <UARTEx_SetNbDataToProcess+0x94>)
 810b66a:	5c8a      	ldrb	r2, [r1, r2]
 810b66c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810b670:	7b7a      	ldrb	r2, [r7, #13]
 810b672:	4908      	ldr	r1, [pc, #32]	@ (810b694 <UARTEx_SetNbDataToProcess+0x98>)
 810b674:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b676:	fb93 f3f2 	sdiv	r3, r3, r2
 810b67a:	b29a      	uxth	r2, r3
 810b67c:	687b      	ldr	r3, [r7, #4]
 810b67e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810b682:	bf00      	nop
 810b684:	3714      	adds	r7, #20
 810b686:	46bd      	mov	sp, r7
 810b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b68c:	4770      	bx	lr
 810b68e:	bf00      	nop
 810b690:	081116b0 	.word	0x081116b0
 810b694:	081116b8 	.word	0x081116b8

0810b698 <__NVIC_SetPriority>:
{
 810b698:	b480      	push	{r7}
 810b69a:	b083      	sub	sp, #12
 810b69c:	af00      	add	r7, sp, #0
 810b69e:	4603      	mov	r3, r0
 810b6a0:	6039      	str	r1, [r7, #0]
 810b6a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810b6a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810b6a8:	2b00      	cmp	r3, #0
 810b6aa:	db0a      	blt.n	810b6c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810b6ac:	683b      	ldr	r3, [r7, #0]
 810b6ae:	b2da      	uxtb	r2, r3
 810b6b0:	490c      	ldr	r1, [pc, #48]	@ (810b6e4 <__NVIC_SetPriority+0x4c>)
 810b6b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810b6b6:	0112      	lsls	r2, r2, #4
 810b6b8:	b2d2      	uxtb	r2, r2
 810b6ba:	440b      	add	r3, r1
 810b6bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810b6c0:	e00a      	b.n	810b6d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810b6c2:	683b      	ldr	r3, [r7, #0]
 810b6c4:	b2da      	uxtb	r2, r3
 810b6c6:	4908      	ldr	r1, [pc, #32]	@ (810b6e8 <__NVIC_SetPriority+0x50>)
 810b6c8:	88fb      	ldrh	r3, [r7, #6]
 810b6ca:	f003 030f 	and.w	r3, r3, #15
 810b6ce:	3b04      	subs	r3, #4
 810b6d0:	0112      	lsls	r2, r2, #4
 810b6d2:	b2d2      	uxtb	r2, r2
 810b6d4:	440b      	add	r3, r1
 810b6d6:	761a      	strb	r2, [r3, #24]
}
 810b6d8:	bf00      	nop
 810b6da:	370c      	adds	r7, #12
 810b6dc:	46bd      	mov	sp, r7
 810b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6e2:	4770      	bx	lr
 810b6e4:	e000e100 	.word	0xe000e100
 810b6e8:	e000ed00 	.word	0xe000ed00

0810b6ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810b6ec:	b580      	push	{r7, lr}
 810b6ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810b6f0:	2100      	movs	r1, #0
 810b6f2:	f06f 0004 	mvn.w	r0, #4
 810b6f6:	f7ff ffcf 	bl	810b698 <__NVIC_SetPriority>
#endif
}
 810b6fa:	bf00      	nop
 810b6fc:	bd80      	pop	{r7, pc}
	...

0810b700 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810b700:	b480      	push	{r7}
 810b702:	b083      	sub	sp, #12
 810b704:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b706:	f3ef 8305 	mrs	r3, IPSR
 810b70a:	603b      	str	r3, [r7, #0]
  return(result);
 810b70c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810b70e:	2b00      	cmp	r3, #0
 810b710:	d003      	beq.n	810b71a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810b712:	f06f 0305 	mvn.w	r3, #5
 810b716:	607b      	str	r3, [r7, #4]
 810b718:	e00c      	b.n	810b734 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810b71a:	4b0a      	ldr	r3, [pc, #40]	@ (810b744 <osKernelInitialize+0x44>)
 810b71c:	681b      	ldr	r3, [r3, #0]
 810b71e:	2b00      	cmp	r3, #0
 810b720:	d105      	bne.n	810b72e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810b722:	4b08      	ldr	r3, [pc, #32]	@ (810b744 <osKernelInitialize+0x44>)
 810b724:	2201      	movs	r2, #1
 810b726:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810b728:	2300      	movs	r3, #0
 810b72a:	607b      	str	r3, [r7, #4]
 810b72c:	e002      	b.n	810b734 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810b72e:	f04f 33ff 	mov.w	r3, #4294967295
 810b732:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810b734:	687b      	ldr	r3, [r7, #4]
}
 810b736:	4618      	mov	r0, r3
 810b738:	370c      	adds	r7, #12
 810b73a:	46bd      	mov	sp, r7
 810b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b740:	4770      	bx	lr
 810b742:	bf00      	nop
 810b744:	10000618 	.word	0x10000618

0810b748 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810b748:	b580      	push	{r7, lr}
 810b74a:	b082      	sub	sp, #8
 810b74c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b74e:	f3ef 8305 	mrs	r3, IPSR
 810b752:	603b      	str	r3, [r7, #0]
  return(result);
 810b754:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810b756:	2b00      	cmp	r3, #0
 810b758:	d003      	beq.n	810b762 <osKernelStart+0x1a>
    stat = osErrorISR;
 810b75a:	f06f 0305 	mvn.w	r3, #5
 810b75e:	607b      	str	r3, [r7, #4]
 810b760:	e010      	b.n	810b784 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810b762:	4b0b      	ldr	r3, [pc, #44]	@ (810b790 <osKernelStart+0x48>)
 810b764:	681b      	ldr	r3, [r3, #0]
 810b766:	2b01      	cmp	r3, #1
 810b768:	d109      	bne.n	810b77e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810b76a:	f7ff ffbf 	bl	810b6ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810b76e:	4b08      	ldr	r3, [pc, #32]	@ (810b790 <osKernelStart+0x48>)
 810b770:	2202      	movs	r2, #2
 810b772:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810b774:	f001 fce0 	bl	810d138 <vTaskStartScheduler>
      stat = osOK;
 810b778:	2300      	movs	r3, #0
 810b77a:	607b      	str	r3, [r7, #4]
 810b77c:	e002      	b.n	810b784 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810b77e:	f04f 33ff 	mov.w	r3, #4294967295
 810b782:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810b784:	687b      	ldr	r3, [r7, #4]
}
 810b786:	4618      	mov	r0, r3
 810b788:	3708      	adds	r7, #8
 810b78a:	46bd      	mov	sp, r7
 810b78c:	bd80      	pop	{r7, pc}
 810b78e:	bf00      	nop
 810b790:	10000618 	.word	0x10000618

0810b794 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810b794:	b580      	push	{r7, lr}
 810b796:	b08e      	sub	sp, #56	@ 0x38
 810b798:	af04      	add	r7, sp, #16
 810b79a:	60f8      	str	r0, [r7, #12]
 810b79c:	60b9      	str	r1, [r7, #8]
 810b79e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810b7a0:	2300      	movs	r3, #0
 810b7a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b7a4:	f3ef 8305 	mrs	r3, IPSR
 810b7a8:	617b      	str	r3, [r7, #20]
  return(result);
 810b7aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810b7ac:	2b00      	cmp	r3, #0
 810b7ae:	d17e      	bne.n	810b8ae <osThreadNew+0x11a>
 810b7b0:	68fb      	ldr	r3, [r7, #12]
 810b7b2:	2b00      	cmp	r3, #0
 810b7b4:	d07b      	beq.n	810b8ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810b7b6:	2380      	movs	r3, #128	@ 0x80
 810b7b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810b7ba:	2318      	movs	r3, #24
 810b7bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810b7be:	2300      	movs	r3, #0
 810b7c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810b7c2:	f04f 33ff 	mov.w	r3, #4294967295
 810b7c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810b7c8:	687b      	ldr	r3, [r7, #4]
 810b7ca:	2b00      	cmp	r3, #0
 810b7cc:	d045      	beq.n	810b85a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810b7ce:	687b      	ldr	r3, [r7, #4]
 810b7d0:	681b      	ldr	r3, [r3, #0]
 810b7d2:	2b00      	cmp	r3, #0
 810b7d4:	d002      	beq.n	810b7dc <osThreadNew+0x48>
        name = attr->name;
 810b7d6:	687b      	ldr	r3, [r7, #4]
 810b7d8:	681b      	ldr	r3, [r3, #0]
 810b7da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810b7dc:	687b      	ldr	r3, [r7, #4]
 810b7de:	699b      	ldr	r3, [r3, #24]
 810b7e0:	2b00      	cmp	r3, #0
 810b7e2:	d002      	beq.n	810b7ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810b7e4:	687b      	ldr	r3, [r7, #4]
 810b7e6:	699b      	ldr	r3, [r3, #24]
 810b7e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810b7ea:	69fb      	ldr	r3, [r7, #28]
 810b7ec:	2b00      	cmp	r3, #0
 810b7ee:	d008      	beq.n	810b802 <osThreadNew+0x6e>
 810b7f0:	69fb      	ldr	r3, [r7, #28]
 810b7f2:	2b38      	cmp	r3, #56	@ 0x38
 810b7f4:	d805      	bhi.n	810b802 <osThreadNew+0x6e>
 810b7f6:	687b      	ldr	r3, [r7, #4]
 810b7f8:	685b      	ldr	r3, [r3, #4]
 810b7fa:	f003 0301 	and.w	r3, r3, #1
 810b7fe:	2b00      	cmp	r3, #0
 810b800:	d001      	beq.n	810b806 <osThreadNew+0x72>
        return (NULL);
 810b802:	2300      	movs	r3, #0
 810b804:	e054      	b.n	810b8b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810b806:	687b      	ldr	r3, [r7, #4]
 810b808:	695b      	ldr	r3, [r3, #20]
 810b80a:	2b00      	cmp	r3, #0
 810b80c:	d003      	beq.n	810b816 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810b80e:	687b      	ldr	r3, [r7, #4]
 810b810:	695b      	ldr	r3, [r3, #20]
 810b812:	089b      	lsrs	r3, r3, #2
 810b814:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810b816:	687b      	ldr	r3, [r7, #4]
 810b818:	689b      	ldr	r3, [r3, #8]
 810b81a:	2b00      	cmp	r3, #0
 810b81c:	d00e      	beq.n	810b83c <osThreadNew+0xa8>
 810b81e:	687b      	ldr	r3, [r7, #4]
 810b820:	68db      	ldr	r3, [r3, #12]
 810b822:	2ba7      	cmp	r3, #167	@ 0xa7
 810b824:	d90a      	bls.n	810b83c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810b826:	687b      	ldr	r3, [r7, #4]
 810b828:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810b82a:	2b00      	cmp	r3, #0
 810b82c:	d006      	beq.n	810b83c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810b82e:	687b      	ldr	r3, [r7, #4]
 810b830:	695b      	ldr	r3, [r3, #20]
 810b832:	2b00      	cmp	r3, #0
 810b834:	d002      	beq.n	810b83c <osThreadNew+0xa8>
        mem = 1;
 810b836:	2301      	movs	r3, #1
 810b838:	61bb      	str	r3, [r7, #24]
 810b83a:	e010      	b.n	810b85e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810b83c:	687b      	ldr	r3, [r7, #4]
 810b83e:	689b      	ldr	r3, [r3, #8]
 810b840:	2b00      	cmp	r3, #0
 810b842:	d10c      	bne.n	810b85e <osThreadNew+0xca>
 810b844:	687b      	ldr	r3, [r7, #4]
 810b846:	68db      	ldr	r3, [r3, #12]
 810b848:	2b00      	cmp	r3, #0
 810b84a:	d108      	bne.n	810b85e <osThreadNew+0xca>
 810b84c:	687b      	ldr	r3, [r7, #4]
 810b84e:	691b      	ldr	r3, [r3, #16]
 810b850:	2b00      	cmp	r3, #0
 810b852:	d104      	bne.n	810b85e <osThreadNew+0xca>
          mem = 0;
 810b854:	2300      	movs	r3, #0
 810b856:	61bb      	str	r3, [r7, #24]
 810b858:	e001      	b.n	810b85e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810b85a:	2300      	movs	r3, #0
 810b85c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810b85e:	69bb      	ldr	r3, [r7, #24]
 810b860:	2b01      	cmp	r3, #1
 810b862:	d110      	bne.n	810b886 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810b864:	687b      	ldr	r3, [r7, #4]
 810b866:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810b868:	687a      	ldr	r2, [r7, #4]
 810b86a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810b86c:	9202      	str	r2, [sp, #8]
 810b86e:	9301      	str	r3, [sp, #4]
 810b870:	69fb      	ldr	r3, [r7, #28]
 810b872:	9300      	str	r3, [sp, #0]
 810b874:	68bb      	ldr	r3, [r7, #8]
 810b876:	6a3a      	ldr	r2, [r7, #32]
 810b878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810b87a:	68f8      	ldr	r0, [r7, #12]
 810b87c:	f001 fa68 	bl	810cd50 <xTaskCreateStatic>
 810b880:	4603      	mov	r3, r0
 810b882:	613b      	str	r3, [r7, #16]
 810b884:	e013      	b.n	810b8ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810b886:	69bb      	ldr	r3, [r7, #24]
 810b888:	2b00      	cmp	r3, #0
 810b88a:	d110      	bne.n	810b8ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810b88c:	6a3b      	ldr	r3, [r7, #32]
 810b88e:	b29a      	uxth	r2, r3
 810b890:	f107 0310 	add.w	r3, r7, #16
 810b894:	9301      	str	r3, [sp, #4]
 810b896:	69fb      	ldr	r3, [r7, #28]
 810b898:	9300      	str	r3, [sp, #0]
 810b89a:	68bb      	ldr	r3, [r7, #8]
 810b89c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810b89e:	68f8      	ldr	r0, [r7, #12]
 810b8a0:	f001 fab6 	bl	810ce10 <xTaskCreate>
 810b8a4:	4603      	mov	r3, r0
 810b8a6:	2b01      	cmp	r3, #1
 810b8a8:	d001      	beq.n	810b8ae <osThreadNew+0x11a>
            hTask = NULL;
 810b8aa:	2300      	movs	r3, #0
 810b8ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810b8ae:	693b      	ldr	r3, [r7, #16]
}
 810b8b0:	4618      	mov	r0, r3
 810b8b2:	3728      	adds	r7, #40	@ 0x28
 810b8b4:	46bd      	mov	sp, r7
 810b8b6:	bd80      	pop	{r7, pc}

0810b8b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810b8b8:	b580      	push	{r7, lr}
 810b8ba:	b084      	sub	sp, #16
 810b8bc:	af00      	add	r7, sp, #0
 810b8be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b8c0:	f3ef 8305 	mrs	r3, IPSR
 810b8c4:	60bb      	str	r3, [r7, #8]
  return(result);
 810b8c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810b8c8:	2b00      	cmp	r3, #0
 810b8ca:	d003      	beq.n	810b8d4 <osDelay+0x1c>
    stat = osErrorISR;
 810b8cc:	f06f 0305 	mvn.w	r3, #5
 810b8d0:	60fb      	str	r3, [r7, #12]
 810b8d2:	e007      	b.n	810b8e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810b8d4:	2300      	movs	r3, #0
 810b8d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810b8d8:	687b      	ldr	r3, [r7, #4]
 810b8da:	2b00      	cmp	r3, #0
 810b8dc:	d002      	beq.n	810b8e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 810b8de:	6878      	ldr	r0, [r7, #4]
 810b8e0:	f001 fbf4 	bl	810d0cc <vTaskDelay>
    }
  }

  return (stat);
 810b8e4:	68fb      	ldr	r3, [r7, #12]
}
 810b8e6:	4618      	mov	r0, r3
 810b8e8:	3710      	adds	r7, #16
 810b8ea:	46bd      	mov	sp, r7
 810b8ec:	bd80      	pop	{r7, pc}
	...

0810b8f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810b8f0:	b480      	push	{r7}
 810b8f2:	b085      	sub	sp, #20
 810b8f4:	af00      	add	r7, sp, #0
 810b8f6:	60f8      	str	r0, [r7, #12]
 810b8f8:	60b9      	str	r1, [r7, #8]
 810b8fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810b8fc:	68fb      	ldr	r3, [r7, #12]
 810b8fe:	4a07      	ldr	r2, [pc, #28]	@ (810b91c <vApplicationGetIdleTaskMemory+0x2c>)
 810b900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810b902:	68bb      	ldr	r3, [r7, #8]
 810b904:	4a06      	ldr	r2, [pc, #24]	@ (810b920 <vApplicationGetIdleTaskMemory+0x30>)
 810b906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810b908:	687b      	ldr	r3, [r7, #4]
 810b90a:	2280      	movs	r2, #128	@ 0x80
 810b90c:	601a      	str	r2, [r3, #0]
}
 810b90e:	bf00      	nop
 810b910:	3714      	adds	r7, #20
 810b912:	46bd      	mov	sp, r7
 810b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b918:	4770      	bx	lr
 810b91a:	bf00      	nop
 810b91c:	1000061c 	.word	0x1000061c
 810b920:	100006c4 	.word	0x100006c4

0810b924 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810b924:	b480      	push	{r7}
 810b926:	b085      	sub	sp, #20
 810b928:	af00      	add	r7, sp, #0
 810b92a:	60f8      	str	r0, [r7, #12]
 810b92c:	60b9      	str	r1, [r7, #8]
 810b92e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810b930:	68fb      	ldr	r3, [r7, #12]
 810b932:	4a07      	ldr	r2, [pc, #28]	@ (810b950 <vApplicationGetTimerTaskMemory+0x2c>)
 810b934:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810b936:	68bb      	ldr	r3, [r7, #8]
 810b938:	4a06      	ldr	r2, [pc, #24]	@ (810b954 <vApplicationGetTimerTaskMemory+0x30>)
 810b93a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810b93c:	687b      	ldr	r3, [r7, #4]
 810b93e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810b942:	601a      	str	r2, [r3, #0]
}
 810b944:	bf00      	nop
 810b946:	3714      	adds	r7, #20
 810b948:	46bd      	mov	sp, r7
 810b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b94e:	4770      	bx	lr
 810b950:	100008c4 	.word	0x100008c4
 810b954:	1000096c 	.word	0x1000096c

0810b958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810b958:	b580      	push	{r7, lr}
 810b95a:	b08a      	sub	sp, #40	@ 0x28
 810b95c:	af00      	add	r7, sp, #0
 810b95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810b960:	2300      	movs	r3, #0
 810b962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810b964:	f001 fc58 	bl	810d218 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810b968:	4b5c      	ldr	r3, [pc, #368]	@ (810badc <pvPortMalloc+0x184>)
 810b96a:	681b      	ldr	r3, [r3, #0]
 810b96c:	2b00      	cmp	r3, #0
 810b96e:	d101      	bne.n	810b974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810b970:	f000 f930 	bl	810bbd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810b974:	4b5a      	ldr	r3, [pc, #360]	@ (810bae0 <pvPortMalloc+0x188>)
 810b976:	681a      	ldr	r2, [r3, #0]
 810b978:	687b      	ldr	r3, [r7, #4]
 810b97a:	4013      	ands	r3, r2
 810b97c:	2b00      	cmp	r3, #0
 810b97e:	f040 8095 	bne.w	810baac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810b982:	687b      	ldr	r3, [r7, #4]
 810b984:	2b00      	cmp	r3, #0
 810b986:	d01e      	beq.n	810b9c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810b988:	2208      	movs	r2, #8
 810b98a:	687b      	ldr	r3, [r7, #4]
 810b98c:	4413      	add	r3, r2
 810b98e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810b990:	687b      	ldr	r3, [r7, #4]
 810b992:	f003 0307 	and.w	r3, r3, #7
 810b996:	2b00      	cmp	r3, #0
 810b998:	d015      	beq.n	810b9c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810b99a:	687b      	ldr	r3, [r7, #4]
 810b99c:	f023 0307 	bic.w	r3, r3, #7
 810b9a0:	3308      	adds	r3, #8
 810b9a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810b9a4:	687b      	ldr	r3, [r7, #4]
 810b9a6:	f003 0307 	and.w	r3, r3, #7
 810b9aa:	2b00      	cmp	r3, #0
 810b9ac:	d00b      	beq.n	810b9c6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810b9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b9b2:	f383 8811 	msr	BASEPRI, r3
 810b9b6:	f3bf 8f6f 	isb	sy
 810b9ba:	f3bf 8f4f 	dsb	sy
 810b9be:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810b9c0:	bf00      	nop
 810b9c2:	bf00      	nop
 810b9c4:	e7fd      	b.n	810b9c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810b9c6:	687b      	ldr	r3, [r7, #4]
 810b9c8:	2b00      	cmp	r3, #0
 810b9ca:	d06f      	beq.n	810baac <pvPortMalloc+0x154>
 810b9cc:	4b45      	ldr	r3, [pc, #276]	@ (810bae4 <pvPortMalloc+0x18c>)
 810b9ce:	681b      	ldr	r3, [r3, #0]
 810b9d0:	687a      	ldr	r2, [r7, #4]
 810b9d2:	429a      	cmp	r2, r3
 810b9d4:	d86a      	bhi.n	810baac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810b9d6:	4b44      	ldr	r3, [pc, #272]	@ (810bae8 <pvPortMalloc+0x190>)
 810b9d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810b9da:	4b43      	ldr	r3, [pc, #268]	@ (810bae8 <pvPortMalloc+0x190>)
 810b9dc:	681b      	ldr	r3, [r3, #0]
 810b9de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810b9e0:	e004      	b.n	810b9ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810b9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b9e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810b9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b9e8:	681b      	ldr	r3, [r3, #0]
 810b9ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810b9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b9ee:	685b      	ldr	r3, [r3, #4]
 810b9f0:	687a      	ldr	r2, [r7, #4]
 810b9f2:	429a      	cmp	r2, r3
 810b9f4:	d903      	bls.n	810b9fe <pvPortMalloc+0xa6>
 810b9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b9f8:	681b      	ldr	r3, [r3, #0]
 810b9fa:	2b00      	cmp	r3, #0
 810b9fc:	d1f1      	bne.n	810b9e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810b9fe:	4b37      	ldr	r3, [pc, #220]	@ (810badc <pvPortMalloc+0x184>)
 810ba00:	681b      	ldr	r3, [r3, #0]
 810ba02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ba04:	429a      	cmp	r2, r3
 810ba06:	d051      	beq.n	810baac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810ba08:	6a3b      	ldr	r3, [r7, #32]
 810ba0a:	681b      	ldr	r3, [r3, #0]
 810ba0c:	2208      	movs	r2, #8
 810ba0e:	4413      	add	r3, r2
 810ba10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810ba12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba14:	681a      	ldr	r2, [r3, #0]
 810ba16:	6a3b      	ldr	r3, [r7, #32]
 810ba18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba1c:	685a      	ldr	r2, [r3, #4]
 810ba1e:	687b      	ldr	r3, [r7, #4]
 810ba20:	1ad2      	subs	r2, r2, r3
 810ba22:	2308      	movs	r3, #8
 810ba24:	005b      	lsls	r3, r3, #1
 810ba26:	429a      	cmp	r2, r3
 810ba28:	d920      	bls.n	810ba6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810ba2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ba2c:	687b      	ldr	r3, [r7, #4]
 810ba2e:	4413      	add	r3, r2
 810ba30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810ba32:	69bb      	ldr	r3, [r7, #24]
 810ba34:	f003 0307 	and.w	r3, r3, #7
 810ba38:	2b00      	cmp	r3, #0
 810ba3a:	d00b      	beq.n	810ba54 <pvPortMalloc+0xfc>
	__asm volatile
 810ba3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ba40:	f383 8811 	msr	BASEPRI, r3
 810ba44:	f3bf 8f6f 	isb	sy
 810ba48:	f3bf 8f4f 	dsb	sy
 810ba4c:	613b      	str	r3, [r7, #16]
}
 810ba4e:	bf00      	nop
 810ba50:	bf00      	nop
 810ba52:	e7fd      	b.n	810ba50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810ba54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba56:	685a      	ldr	r2, [r3, #4]
 810ba58:	687b      	ldr	r3, [r7, #4]
 810ba5a:	1ad2      	subs	r2, r2, r3
 810ba5c:	69bb      	ldr	r3, [r7, #24]
 810ba5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810ba60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba62:	687a      	ldr	r2, [r7, #4]
 810ba64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810ba66:	69b8      	ldr	r0, [r7, #24]
 810ba68:	f000 f916 	bl	810bc98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810ba6c:	4b1d      	ldr	r3, [pc, #116]	@ (810bae4 <pvPortMalloc+0x18c>)
 810ba6e:	681a      	ldr	r2, [r3, #0]
 810ba70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba72:	685b      	ldr	r3, [r3, #4]
 810ba74:	1ad3      	subs	r3, r2, r3
 810ba76:	4a1b      	ldr	r2, [pc, #108]	@ (810bae4 <pvPortMalloc+0x18c>)
 810ba78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810ba7a:	4b1a      	ldr	r3, [pc, #104]	@ (810bae4 <pvPortMalloc+0x18c>)
 810ba7c:	681a      	ldr	r2, [r3, #0]
 810ba7e:	4b1b      	ldr	r3, [pc, #108]	@ (810baec <pvPortMalloc+0x194>)
 810ba80:	681b      	ldr	r3, [r3, #0]
 810ba82:	429a      	cmp	r2, r3
 810ba84:	d203      	bcs.n	810ba8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810ba86:	4b17      	ldr	r3, [pc, #92]	@ (810bae4 <pvPortMalloc+0x18c>)
 810ba88:	681b      	ldr	r3, [r3, #0]
 810ba8a:	4a18      	ldr	r2, [pc, #96]	@ (810baec <pvPortMalloc+0x194>)
 810ba8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810ba8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba90:	685a      	ldr	r2, [r3, #4]
 810ba92:	4b13      	ldr	r3, [pc, #76]	@ (810bae0 <pvPortMalloc+0x188>)
 810ba94:	681b      	ldr	r3, [r3, #0]
 810ba96:	431a      	orrs	r2, r3
 810ba98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810ba9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba9e:	2200      	movs	r2, #0
 810baa0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810baa2:	4b13      	ldr	r3, [pc, #76]	@ (810baf0 <pvPortMalloc+0x198>)
 810baa4:	681b      	ldr	r3, [r3, #0]
 810baa6:	3301      	adds	r3, #1
 810baa8:	4a11      	ldr	r2, [pc, #68]	@ (810baf0 <pvPortMalloc+0x198>)
 810baaa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810baac:	f001 fbc2 	bl	810d234 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810bab0:	69fb      	ldr	r3, [r7, #28]
 810bab2:	f003 0307 	and.w	r3, r3, #7
 810bab6:	2b00      	cmp	r3, #0
 810bab8:	d00b      	beq.n	810bad2 <pvPortMalloc+0x17a>
	__asm volatile
 810baba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810babe:	f383 8811 	msr	BASEPRI, r3
 810bac2:	f3bf 8f6f 	isb	sy
 810bac6:	f3bf 8f4f 	dsb	sy
 810baca:	60fb      	str	r3, [r7, #12]
}
 810bacc:	bf00      	nop
 810bace:	bf00      	nop
 810bad0:	e7fd      	b.n	810bace <pvPortMalloc+0x176>
	return pvReturn;
 810bad2:	69fb      	ldr	r3, [r7, #28]
}
 810bad4:	4618      	mov	r0, r3
 810bad6:	3728      	adds	r7, #40	@ 0x28
 810bad8:	46bd      	mov	sp, r7
 810bada:	bd80      	pop	{r7, pc}
 810badc:	10004974 	.word	0x10004974
 810bae0:	10004988 	.word	0x10004988
 810bae4:	10004978 	.word	0x10004978
 810bae8:	1000496c 	.word	0x1000496c
 810baec:	1000497c 	.word	0x1000497c
 810baf0:	10004980 	.word	0x10004980

0810baf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810baf4:	b580      	push	{r7, lr}
 810baf6:	b086      	sub	sp, #24
 810baf8:	af00      	add	r7, sp, #0
 810bafa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810bafc:	687b      	ldr	r3, [r7, #4]
 810bafe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810bb00:	687b      	ldr	r3, [r7, #4]
 810bb02:	2b00      	cmp	r3, #0
 810bb04:	d04f      	beq.n	810bba6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810bb06:	2308      	movs	r3, #8
 810bb08:	425b      	negs	r3, r3
 810bb0a:	697a      	ldr	r2, [r7, #20]
 810bb0c:	4413      	add	r3, r2
 810bb0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810bb10:	697b      	ldr	r3, [r7, #20]
 810bb12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810bb14:	693b      	ldr	r3, [r7, #16]
 810bb16:	685a      	ldr	r2, [r3, #4]
 810bb18:	4b25      	ldr	r3, [pc, #148]	@ (810bbb0 <vPortFree+0xbc>)
 810bb1a:	681b      	ldr	r3, [r3, #0]
 810bb1c:	4013      	ands	r3, r2
 810bb1e:	2b00      	cmp	r3, #0
 810bb20:	d10b      	bne.n	810bb3a <vPortFree+0x46>
	__asm volatile
 810bb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bb26:	f383 8811 	msr	BASEPRI, r3
 810bb2a:	f3bf 8f6f 	isb	sy
 810bb2e:	f3bf 8f4f 	dsb	sy
 810bb32:	60fb      	str	r3, [r7, #12]
}
 810bb34:	bf00      	nop
 810bb36:	bf00      	nop
 810bb38:	e7fd      	b.n	810bb36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810bb3a:	693b      	ldr	r3, [r7, #16]
 810bb3c:	681b      	ldr	r3, [r3, #0]
 810bb3e:	2b00      	cmp	r3, #0
 810bb40:	d00b      	beq.n	810bb5a <vPortFree+0x66>
	__asm volatile
 810bb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bb46:	f383 8811 	msr	BASEPRI, r3
 810bb4a:	f3bf 8f6f 	isb	sy
 810bb4e:	f3bf 8f4f 	dsb	sy
 810bb52:	60bb      	str	r3, [r7, #8]
}
 810bb54:	bf00      	nop
 810bb56:	bf00      	nop
 810bb58:	e7fd      	b.n	810bb56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810bb5a:	693b      	ldr	r3, [r7, #16]
 810bb5c:	685a      	ldr	r2, [r3, #4]
 810bb5e:	4b14      	ldr	r3, [pc, #80]	@ (810bbb0 <vPortFree+0xbc>)
 810bb60:	681b      	ldr	r3, [r3, #0]
 810bb62:	4013      	ands	r3, r2
 810bb64:	2b00      	cmp	r3, #0
 810bb66:	d01e      	beq.n	810bba6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810bb68:	693b      	ldr	r3, [r7, #16]
 810bb6a:	681b      	ldr	r3, [r3, #0]
 810bb6c:	2b00      	cmp	r3, #0
 810bb6e:	d11a      	bne.n	810bba6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810bb70:	693b      	ldr	r3, [r7, #16]
 810bb72:	685a      	ldr	r2, [r3, #4]
 810bb74:	4b0e      	ldr	r3, [pc, #56]	@ (810bbb0 <vPortFree+0xbc>)
 810bb76:	681b      	ldr	r3, [r3, #0]
 810bb78:	43db      	mvns	r3, r3
 810bb7a:	401a      	ands	r2, r3
 810bb7c:	693b      	ldr	r3, [r7, #16]
 810bb7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810bb80:	f001 fb4a 	bl	810d218 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810bb84:	693b      	ldr	r3, [r7, #16]
 810bb86:	685a      	ldr	r2, [r3, #4]
 810bb88:	4b0a      	ldr	r3, [pc, #40]	@ (810bbb4 <vPortFree+0xc0>)
 810bb8a:	681b      	ldr	r3, [r3, #0]
 810bb8c:	4413      	add	r3, r2
 810bb8e:	4a09      	ldr	r2, [pc, #36]	@ (810bbb4 <vPortFree+0xc0>)
 810bb90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810bb92:	6938      	ldr	r0, [r7, #16]
 810bb94:	f000 f880 	bl	810bc98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810bb98:	4b07      	ldr	r3, [pc, #28]	@ (810bbb8 <vPortFree+0xc4>)
 810bb9a:	681b      	ldr	r3, [r3, #0]
 810bb9c:	3301      	adds	r3, #1
 810bb9e:	4a06      	ldr	r2, [pc, #24]	@ (810bbb8 <vPortFree+0xc4>)
 810bba0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810bba2:	f001 fb47 	bl	810d234 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810bba6:	bf00      	nop
 810bba8:	3718      	adds	r7, #24
 810bbaa:	46bd      	mov	sp, r7
 810bbac:	bd80      	pop	{r7, pc}
 810bbae:	bf00      	nop
 810bbb0:	10004988 	.word	0x10004988
 810bbb4:	10004978 	.word	0x10004978
 810bbb8:	10004984 	.word	0x10004984

0810bbbc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 810bbbc:	b480      	push	{r7}
 810bbbe:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 810bbc0:	4b03      	ldr	r3, [pc, #12]	@ (810bbd0 <xPortGetFreeHeapSize+0x14>)
 810bbc2:	681b      	ldr	r3, [r3, #0]
}
 810bbc4:	4618      	mov	r0, r3
 810bbc6:	46bd      	mov	sp, r7
 810bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbcc:	4770      	bx	lr
 810bbce:	bf00      	nop
 810bbd0:	10004978 	.word	0x10004978

0810bbd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810bbd4:	b480      	push	{r7}
 810bbd6:	b085      	sub	sp, #20
 810bbd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810bbda:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 810bbde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810bbe0:	4b27      	ldr	r3, [pc, #156]	@ (810bc80 <prvHeapInit+0xac>)
 810bbe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810bbe4:	68fb      	ldr	r3, [r7, #12]
 810bbe6:	f003 0307 	and.w	r3, r3, #7
 810bbea:	2b00      	cmp	r3, #0
 810bbec:	d00c      	beq.n	810bc08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810bbee:	68fb      	ldr	r3, [r7, #12]
 810bbf0:	3307      	adds	r3, #7
 810bbf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810bbf4:	68fb      	ldr	r3, [r7, #12]
 810bbf6:	f023 0307 	bic.w	r3, r3, #7
 810bbfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810bbfc:	68ba      	ldr	r2, [r7, #8]
 810bbfe:	68fb      	ldr	r3, [r7, #12]
 810bc00:	1ad3      	subs	r3, r2, r3
 810bc02:	4a1f      	ldr	r2, [pc, #124]	@ (810bc80 <prvHeapInit+0xac>)
 810bc04:	4413      	add	r3, r2
 810bc06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810bc08:	68fb      	ldr	r3, [r7, #12]
 810bc0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810bc0c:	4a1d      	ldr	r2, [pc, #116]	@ (810bc84 <prvHeapInit+0xb0>)
 810bc0e:	687b      	ldr	r3, [r7, #4]
 810bc10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810bc12:	4b1c      	ldr	r3, [pc, #112]	@ (810bc84 <prvHeapInit+0xb0>)
 810bc14:	2200      	movs	r2, #0
 810bc16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810bc18:	687b      	ldr	r3, [r7, #4]
 810bc1a:	68ba      	ldr	r2, [r7, #8]
 810bc1c:	4413      	add	r3, r2
 810bc1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810bc20:	2208      	movs	r2, #8
 810bc22:	68fb      	ldr	r3, [r7, #12]
 810bc24:	1a9b      	subs	r3, r3, r2
 810bc26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810bc28:	68fb      	ldr	r3, [r7, #12]
 810bc2a:	f023 0307 	bic.w	r3, r3, #7
 810bc2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810bc30:	68fb      	ldr	r3, [r7, #12]
 810bc32:	4a15      	ldr	r2, [pc, #84]	@ (810bc88 <prvHeapInit+0xb4>)
 810bc34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810bc36:	4b14      	ldr	r3, [pc, #80]	@ (810bc88 <prvHeapInit+0xb4>)
 810bc38:	681b      	ldr	r3, [r3, #0]
 810bc3a:	2200      	movs	r2, #0
 810bc3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810bc3e:	4b12      	ldr	r3, [pc, #72]	@ (810bc88 <prvHeapInit+0xb4>)
 810bc40:	681b      	ldr	r3, [r3, #0]
 810bc42:	2200      	movs	r2, #0
 810bc44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810bc46:	687b      	ldr	r3, [r7, #4]
 810bc48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810bc4a:	683b      	ldr	r3, [r7, #0]
 810bc4c:	68fa      	ldr	r2, [r7, #12]
 810bc4e:	1ad2      	subs	r2, r2, r3
 810bc50:	683b      	ldr	r3, [r7, #0]
 810bc52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810bc54:	4b0c      	ldr	r3, [pc, #48]	@ (810bc88 <prvHeapInit+0xb4>)
 810bc56:	681a      	ldr	r2, [r3, #0]
 810bc58:	683b      	ldr	r3, [r7, #0]
 810bc5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810bc5c:	683b      	ldr	r3, [r7, #0]
 810bc5e:	685b      	ldr	r3, [r3, #4]
 810bc60:	4a0a      	ldr	r2, [pc, #40]	@ (810bc8c <prvHeapInit+0xb8>)
 810bc62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810bc64:	683b      	ldr	r3, [r7, #0]
 810bc66:	685b      	ldr	r3, [r3, #4]
 810bc68:	4a09      	ldr	r2, [pc, #36]	@ (810bc90 <prvHeapInit+0xbc>)
 810bc6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810bc6c:	4b09      	ldr	r3, [pc, #36]	@ (810bc94 <prvHeapInit+0xc0>)
 810bc6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810bc72:	601a      	str	r2, [r3, #0]
}
 810bc74:	bf00      	nop
 810bc76:	3714      	adds	r7, #20
 810bc78:	46bd      	mov	sp, r7
 810bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc7e:	4770      	bx	lr
 810bc80:	10000d6c 	.word	0x10000d6c
 810bc84:	1000496c 	.word	0x1000496c
 810bc88:	10004974 	.word	0x10004974
 810bc8c:	1000497c 	.word	0x1000497c
 810bc90:	10004978 	.word	0x10004978
 810bc94:	10004988 	.word	0x10004988

0810bc98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810bc98:	b480      	push	{r7}
 810bc9a:	b085      	sub	sp, #20
 810bc9c:	af00      	add	r7, sp, #0
 810bc9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810bca0:	4b28      	ldr	r3, [pc, #160]	@ (810bd44 <prvInsertBlockIntoFreeList+0xac>)
 810bca2:	60fb      	str	r3, [r7, #12]
 810bca4:	e002      	b.n	810bcac <prvInsertBlockIntoFreeList+0x14>
 810bca6:	68fb      	ldr	r3, [r7, #12]
 810bca8:	681b      	ldr	r3, [r3, #0]
 810bcaa:	60fb      	str	r3, [r7, #12]
 810bcac:	68fb      	ldr	r3, [r7, #12]
 810bcae:	681b      	ldr	r3, [r3, #0]
 810bcb0:	687a      	ldr	r2, [r7, #4]
 810bcb2:	429a      	cmp	r2, r3
 810bcb4:	d8f7      	bhi.n	810bca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810bcb6:	68fb      	ldr	r3, [r7, #12]
 810bcb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810bcba:	68fb      	ldr	r3, [r7, #12]
 810bcbc:	685b      	ldr	r3, [r3, #4]
 810bcbe:	68ba      	ldr	r2, [r7, #8]
 810bcc0:	4413      	add	r3, r2
 810bcc2:	687a      	ldr	r2, [r7, #4]
 810bcc4:	429a      	cmp	r2, r3
 810bcc6:	d108      	bne.n	810bcda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810bcc8:	68fb      	ldr	r3, [r7, #12]
 810bcca:	685a      	ldr	r2, [r3, #4]
 810bccc:	687b      	ldr	r3, [r7, #4]
 810bcce:	685b      	ldr	r3, [r3, #4]
 810bcd0:	441a      	add	r2, r3
 810bcd2:	68fb      	ldr	r3, [r7, #12]
 810bcd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810bcd6:	68fb      	ldr	r3, [r7, #12]
 810bcd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810bcda:	687b      	ldr	r3, [r7, #4]
 810bcdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810bcde:	687b      	ldr	r3, [r7, #4]
 810bce0:	685b      	ldr	r3, [r3, #4]
 810bce2:	68ba      	ldr	r2, [r7, #8]
 810bce4:	441a      	add	r2, r3
 810bce6:	68fb      	ldr	r3, [r7, #12]
 810bce8:	681b      	ldr	r3, [r3, #0]
 810bcea:	429a      	cmp	r2, r3
 810bcec:	d118      	bne.n	810bd20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810bcee:	68fb      	ldr	r3, [r7, #12]
 810bcf0:	681a      	ldr	r2, [r3, #0]
 810bcf2:	4b15      	ldr	r3, [pc, #84]	@ (810bd48 <prvInsertBlockIntoFreeList+0xb0>)
 810bcf4:	681b      	ldr	r3, [r3, #0]
 810bcf6:	429a      	cmp	r2, r3
 810bcf8:	d00d      	beq.n	810bd16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810bcfa:	687b      	ldr	r3, [r7, #4]
 810bcfc:	685a      	ldr	r2, [r3, #4]
 810bcfe:	68fb      	ldr	r3, [r7, #12]
 810bd00:	681b      	ldr	r3, [r3, #0]
 810bd02:	685b      	ldr	r3, [r3, #4]
 810bd04:	441a      	add	r2, r3
 810bd06:	687b      	ldr	r3, [r7, #4]
 810bd08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810bd0a:	68fb      	ldr	r3, [r7, #12]
 810bd0c:	681b      	ldr	r3, [r3, #0]
 810bd0e:	681a      	ldr	r2, [r3, #0]
 810bd10:	687b      	ldr	r3, [r7, #4]
 810bd12:	601a      	str	r2, [r3, #0]
 810bd14:	e008      	b.n	810bd28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810bd16:	4b0c      	ldr	r3, [pc, #48]	@ (810bd48 <prvInsertBlockIntoFreeList+0xb0>)
 810bd18:	681a      	ldr	r2, [r3, #0]
 810bd1a:	687b      	ldr	r3, [r7, #4]
 810bd1c:	601a      	str	r2, [r3, #0]
 810bd1e:	e003      	b.n	810bd28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810bd20:	68fb      	ldr	r3, [r7, #12]
 810bd22:	681a      	ldr	r2, [r3, #0]
 810bd24:	687b      	ldr	r3, [r7, #4]
 810bd26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810bd28:	68fa      	ldr	r2, [r7, #12]
 810bd2a:	687b      	ldr	r3, [r7, #4]
 810bd2c:	429a      	cmp	r2, r3
 810bd2e:	d002      	beq.n	810bd36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810bd30:	68fb      	ldr	r3, [r7, #12]
 810bd32:	687a      	ldr	r2, [r7, #4]
 810bd34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810bd36:	bf00      	nop
 810bd38:	3714      	adds	r7, #20
 810bd3a:	46bd      	mov	sp, r7
 810bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd40:	4770      	bx	lr
 810bd42:	bf00      	nop
 810bd44:	1000496c 	.word	0x1000496c
 810bd48:	10004974 	.word	0x10004974

0810bd4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810bd4c:	b480      	push	{r7}
 810bd4e:	b083      	sub	sp, #12
 810bd50:	af00      	add	r7, sp, #0
 810bd52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810bd54:	687b      	ldr	r3, [r7, #4]
 810bd56:	f103 0208 	add.w	r2, r3, #8
 810bd5a:	687b      	ldr	r3, [r7, #4]
 810bd5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810bd5e:	687b      	ldr	r3, [r7, #4]
 810bd60:	f04f 32ff 	mov.w	r2, #4294967295
 810bd64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810bd66:	687b      	ldr	r3, [r7, #4]
 810bd68:	f103 0208 	add.w	r2, r3, #8
 810bd6c:	687b      	ldr	r3, [r7, #4]
 810bd6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810bd70:	687b      	ldr	r3, [r7, #4]
 810bd72:	f103 0208 	add.w	r2, r3, #8
 810bd76:	687b      	ldr	r3, [r7, #4]
 810bd78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810bd7a:	687b      	ldr	r3, [r7, #4]
 810bd7c:	2200      	movs	r2, #0
 810bd7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810bd80:	bf00      	nop
 810bd82:	370c      	adds	r7, #12
 810bd84:	46bd      	mov	sp, r7
 810bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd8a:	4770      	bx	lr

0810bd8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810bd8c:	b480      	push	{r7}
 810bd8e:	b083      	sub	sp, #12
 810bd90:	af00      	add	r7, sp, #0
 810bd92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810bd94:	687b      	ldr	r3, [r7, #4]
 810bd96:	2200      	movs	r2, #0
 810bd98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810bd9a:	bf00      	nop
 810bd9c:	370c      	adds	r7, #12
 810bd9e:	46bd      	mov	sp, r7
 810bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bda4:	4770      	bx	lr

0810bda6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810bda6:	b480      	push	{r7}
 810bda8:	b085      	sub	sp, #20
 810bdaa:	af00      	add	r7, sp, #0
 810bdac:	6078      	str	r0, [r7, #4]
 810bdae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810bdb0:	687b      	ldr	r3, [r7, #4]
 810bdb2:	685b      	ldr	r3, [r3, #4]
 810bdb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810bdb6:	683b      	ldr	r3, [r7, #0]
 810bdb8:	68fa      	ldr	r2, [r7, #12]
 810bdba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810bdbc:	68fb      	ldr	r3, [r7, #12]
 810bdbe:	689a      	ldr	r2, [r3, #8]
 810bdc0:	683b      	ldr	r3, [r7, #0]
 810bdc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810bdc4:	68fb      	ldr	r3, [r7, #12]
 810bdc6:	689b      	ldr	r3, [r3, #8]
 810bdc8:	683a      	ldr	r2, [r7, #0]
 810bdca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810bdcc:	68fb      	ldr	r3, [r7, #12]
 810bdce:	683a      	ldr	r2, [r7, #0]
 810bdd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810bdd2:	683b      	ldr	r3, [r7, #0]
 810bdd4:	687a      	ldr	r2, [r7, #4]
 810bdd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810bdd8:	687b      	ldr	r3, [r7, #4]
 810bdda:	681b      	ldr	r3, [r3, #0]
 810bddc:	1c5a      	adds	r2, r3, #1
 810bdde:	687b      	ldr	r3, [r7, #4]
 810bde0:	601a      	str	r2, [r3, #0]
}
 810bde2:	bf00      	nop
 810bde4:	3714      	adds	r7, #20
 810bde6:	46bd      	mov	sp, r7
 810bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bdec:	4770      	bx	lr

0810bdee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810bdee:	b480      	push	{r7}
 810bdf0:	b085      	sub	sp, #20
 810bdf2:	af00      	add	r7, sp, #0
 810bdf4:	6078      	str	r0, [r7, #4]
 810bdf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810bdf8:	683b      	ldr	r3, [r7, #0]
 810bdfa:	681b      	ldr	r3, [r3, #0]
 810bdfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810bdfe:	68bb      	ldr	r3, [r7, #8]
 810be00:	f1b3 3fff 	cmp.w	r3, #4294967295
 810be04:	d103      	bne.n	810be0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810be06:	687b      	ldr	r3, [r7, #4]
 810be08:	691b      	ldr	r3, [r3, #16]
 810be0a:	60fb      	str	r3, [r7, #12]
 810be0c:	e00c      	b.n	810be28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810be0e:	687b      	ldr	r3, [r7, #4]
 810be10:	3308      	adds	r3, #8
 810be12:	60fb      	str	r3, [r7, #12]
 810be14:	e002      	b.n	810be1c <vListInsert+0x2e>
 810be16:	68fb      	ldr	r3, [r7, #12]
 810be18:	685b      	ldr	r3, [r3, #4]
 810be1a:	60fb      	str	r3, [r7, #12]
 810be1c:	68fb      	ldr	r3, [r7, #12]
 810be1e:	685b      	ldr	r3, [r3, #4]
 810be20:	681b      	ldr	r3, [r3, #0]
 810be22:	68ba      	ldr	r2, [r7, #8]
 810be24:	429a      	cmp	r2, r3
 810be26:	d2f6      	bcs.n	810be16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810be28:	68fb      	ldr	r3, [r7, #12]
 810be2a:	685a      	ldr	r2, [r3, #4]
 810be2c:	683b      	ldr	r3, [r7, #0]
 810be2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810be30:	683b      	ldr	r3, [r7, #0]
 810be32:	685b      	ldr	r3, [r3, #4]
 810be34:	683a      	ldr	r2, [r7, #0]
 810be36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810be38:	683b      	ldr	r3, [r7, #0]
 810be3a:	68fa      	ldr	r2, [r7, #12]
 810be3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810be3e:	68fb      	ldr	r3, [r7, #12]
 810be40:	683a      	ldr	r2, [r7, #0]
 810be42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810be44:	683b      	ldr	r3, [r7, #0]
 810be46:	687a      	ldr	r2, [r7, #4]
 810be48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810be4a:	687b      	ldr	r3, [r7, #4]
 810be4c:	681b      	ldr	r3, [r3, #0]
 810be4e:	1c5a      	adds	r2, r3, #1
 810be50:	687b      	ldr	r3, [r7, #4]
 810be52:	601a      	str	r2, [r3, #0]
}
 810be54:	bf00      	nop
 810be56:	3714      	adds	r7, #20
 810be58:	46bd      	mov	sp, r7
 810be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be5e:	4770      	bx	lr

0810be60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810be60:	b480      	push	{r7}
 810be62:	b085      	sub	sp, #20
 810be64:	af00      	add	r7, sp, #0
 810be66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810be68:	687b      	ldr	r3, [r7, #4]
 810be6a:	691b      	ldr	r3, [r3, #16]
 810be6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810be6e:	687b      	ldr	r3, [r7, #4]
 810be70:	685b      	ldr	r3, [r3, #4]
 810be72:	687a      	ldr	r2, [r7, #4]
 810be74:	6892      	ldr	r2, [r2, #8]
 810be76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810be78:	687b      	ldr	r3, [r7, #4]
 810be7a:	689b      	ldr	r3, [r3, #8]
 810be7c:	687a      	ldr	r2, [r7, #4]
 810be7e:	6852      	ldr	r2, [r2, #4]
 810be80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810be82:	68fb      	ldr	r3, [r7, #12]
 810be84:	685b      	ldr	r3, [r3, #4]
 810be86:	687a      	ldr	r2, [r7, #4]
 810be88:	429a      	cmp	r2, r3
 810be8a:	d103      	bne.n	810be94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810be8c:	687b      	ldr	r3, [r7, #4]
 810be8e:	689a      	ldr	r2, [r3, #8]
 810be90:	68fb      	ldr	r3, [r7, #12]
 810be92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810be94:	687b      	ldr	r3, [r7, #4]
 810be96:	2200      	movs	r2, #0
 810be98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810be9a:	68fb      	ldr	r3, [r7, #12]
 810be9c:	681b      	ldr	r3, [r3, #0]
 810be9e:	1e5a      	subs	r2, r3, #1
 810bea0:	68fb      	ldr	r3, [r7, #12]
 810bea2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810bea4:	68fb      	ldr	r3, [r7, #12]
 810bea6:	681b      	ldr	r3, [r3, #0]
}
 810bea8:	4618      	mov	r0, r3
 810beaa:	3714      	adds	r7, #20
 810beac:	46bd      	mov	sp, r7
 810beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810beb2:	4770      	bx	lr

0810beb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810beb4:	b480      	push	{r7}
 810beb6:	b085      	sub	sp, #20
 810beb8:	af00      	add	r7, sp, #0
 810beba:	60f8      	str	r0, [r7, #12]
 810bebc:	60b9      	str	r1, [r7, #8]
 810bebe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810bec0:	68fb      	ldr	r3, [r7, #12]
 810bec2:	3b04      	subs	r3, #4
 810bec4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810bec6:	68fb      	ldr	r3, [r7, #12]
 810bec8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810becc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810bece:	68fb      	ldr	r3, [r7, #12]
 810bed0:	3b04      	subs	r3, #4
 810bed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810bed4:	68bb      	ldr	r3, [r7, #8]
 810bed6:	f023 0201 	bic.w	r2, r3, #1
 810beda:	68fb      	ldr	r3, [r7, #12]
 810bedc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810bede:	68fb      	ldr	r3, [r7, #12]
 810bee0:	3b04      	subs	r3, #4
 810bee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810bee4:	4a0c      	ldr	r2, [pc, #48]	@ (810bf18 <pxPortInitialiseStack+0x64>)
 810bee6:	68fb      	ldr	r3, [r7, #12]
 810bee8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810beea:	68fb      	ldr	r3, [r7, #12]
 810beec:	3b14      	subs	r3, #20
 810beee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810bef0:	687a      	ldr	r2, [r7, #4]
 810bef2:	68fb      	ldr	r3, [r7, #12]
 810bef4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810bef6:	68fb      	ldr	r3, [r7, #12]
 810bef8:	3b04      	subs	r3, #4
 810befa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810befc:	68fb      	ldr	r3, [r7, #12]
 810befe:	f06f 0202 	mvn.w	r2, #2
 810bf02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810bf04:	68fb      	ldr	r3, [r7, #12]
 810bf06:	3b20      	subs	r3, #32
 810bf08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810bf0a:	68fb      	ldr	r3, [r7, #12]
}
 810bf0c:	4618      	mov	r0, r3
 810bf0e:	3714      	adds	r7, #20
 810bf10:	46bd      	mov	sp, r7
 810bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf16:	4770      	bx	lr
 810bf18:	0810bf1d 	.word	0x0810bf1d

0810bf1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810bf1c:	b480      	push	{r7}
 810bf1e:	b085      	sub	sp, #20
 810bf20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810bf22:	2300      	movs	r3, #0
 810bf24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810bf26:	4b13      	ldr	r3, [pc, #76]	@ (810bf74 <prvTaskExitError+0x58>)
 810bf28:	681b      	ldr	r3, [r3, #0]
 810bf2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bf2e:	d00b      	beq.n	810bf48 <prvTaskExitError+0x2c>
	__asm volatile
 810bf30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bf34:	f383 8811 	msr	BASEPRI, r3
 810bf38:	f3bf 8f6f 	isb	sy
 810bf3c:	f3bf 8f4f 	dsb	sy
 810bf40:	60fb      	str	r3, [r7, #12]
}
 810bf42:	bf00      	nop
 810bf44:	bf00      	nop
 810bf46:	e7fd      	b.n	810bf44 <prvTaskExitError+0x28>
	__asm volatile
 810bf48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bf4c:	f383 8811 	msr	BASEPRI, r3
 810bf50:	f3bf 8f6f 	isb	sy
 810bf54:	f3bf 8f4f 	dsb	sy
 810bf58:	60bb      	str	r3, [r7, #8]
}
 810bf5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810bf5c:	bf00      	nop
 810bf5e:	687b      	ldr	r3, [r7, #4]
 810bf60:	2b00      	cmp	r3, #0
 810bf62:	d0fc      	beq.n	810bf5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810bf64:	bf00      	nop
 810bf66:	bf00      	nop
 810bf68:	3714      	adds	r7, #20
 810bf6a:	46bd      	mov	sp, r7
 810bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf70:	4770      	bx	lr
 810bf72:	bf00      	nop
 810bf74:	10000010 	.word	0x10000010
	...

0810bf80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810bf80:	4b07      	ldr	r3, [pc, #28]	@ (810bfa0 <pxCurrentTCBConst2>)
 810bf82:	6819      	ldr	r1, [r3, #0]
 810bf84:	6808      	ldr	r0, [r1, #0]
 810bf86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bf8a:	f380 8809 	msr	PSP, r0
 810bf8e:	f3bf 8f6f 	isb	sy
 810bf92:	f04f 0000 	mov.w	r0, #0
 810bf96:	f380 8811 	msr	BASEPRI, r0
 810bf9a:	4770      	bx	lr
 810bf9c:	f3af 8000 	nop.w

0810bfa0 <pxCurrentTCBConst2>:
 810bfa0:	100049d4 	.word	0x100049d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810bfa4:	bf00      	nop
 810bfa6:	bf00      	nop

0810bfa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810bfa8:	4808      	ldr	r0, [pc, #32]	@ (810bfcc <prvPortStartFirstTask+0x24>)
 810bfaa:	6800      	ldr	r0, [r0, #0]
 810bfac:	6800      	ldr	r0, [r0, #0]
 810bfae:	f380 8808 	msr	MSP, r0
 810bfb2:	f04f 0000 	mov.w	r0, #0
 810bfb6:	f380 8814 	msr	CONTROL, r0
 810bfba:	b662      	cpsie	i
 810bfbc:	b661      	cpsie	f
 810bfbe:	f3bf 8f4f 	dsb	sy
 810bfc2:	f3bf 8f6f 	isb	sy
 810bfc6:	df00      	svc	0
 810bfc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810bfca:	bf00      	nop
 810bfcc:	e000ed08 	.word	0xe000ed08

0810bfd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810bfd0:	b580      	push	{r7, lr}
 810bfd2:	b086      	sub	sp, #24
 810bfd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810bfd6:	4b47      	ldr	r3, [pc, #284]	@ (810c0f4 <xPortStartScheduler+0x124>)
 810bfd8:	681b      	ldr	r3, [r3, #0]
 810bfda:	4a47      	ldr	r2, [pc, #284]	@ (810c0f8 <xPortStartScheduler+0x128>)
 810bfdc:	4293      	cmp	r3, r2
 810bfde:	d10b      	bne.n	810bff8 <xPortStartScheduler+0x28>
	__asm volatile
 810bfe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bfe4:	f383 8811 	msr	BASEPRI, r3
 810bfe8:	f3bf 8f6f 	isb	sy
 810bfec:	f3bf 8f4f 	dsb	sy
 810bff0:	60fb      	str	r3, [r7, #12]
}
 810bff2:	bf00      	nop
 810bff4:	bf00      	nop
 810bff6:	e7fd      	b.n	810bff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810bff8:	4b3e      	ldr	r3, [pc, #248]	@ (810c0f4 <xPortStartScheduler+0x124>)
 810bffa:	681b      	ldr	r3, [r3, #0]
 810bffc:	4a3f      	ldr	r2, [pc, #252]	@ (810c0fc <xPortStartScheduler+0x12c>)
 810bffe:	4293      	cmp	r3, r2
 810c000:	d10b      	bne.n	810c01a <xPortStartScheduler+0x4a>
	__asm volatile
 810c002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c006:	f383 8811 	msr	BASEPRI, r3
 810c00a:	f3bf 8f6f 	isb	sy
 810c00e:	f3bf 8f4f 	dsb	sy
 810c012:	613b      	str	r3, [r7, #16]
}
 810c014:	bf00      	nop
 810c016:	bf00      	nop
 810c018:	e7fd      	b.n	810c016 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810c01a:	4b39      	ldr	r3, [pc, #228]	@ (810c100 <xPortStartScheduler+0x130>)
 810c01c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810c01e:	697b      	ldr	r3, [r7, #20]
 810c020:	781b      	ldrb	r3, [r3, #0]
 810c022:	b2db      	uxtb	r3, r3
 810c024:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810c026:	697b      	ldr	r3, [r7, #20]
 810c028:	22ff      	movs	r2, #255	@ 0xff
 810c02a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810c02c:	697b      	ldr	r3, [r7, #20]
 810c02e:	781b      	ldrb	r3, [r3, #0]
 810c030:	b2db      	uxtb	r3, r3
 810c032:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810c034:	78fb      	ldrb	r3, [r7, #3]
 810c036:	b2db      	uxtb	r3, r3
 810c038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810c03c:	b2da      	uxtb	r2, r3
 810c03e:	4b31      	ldr	r3, [pc, #196]	@ (810c104 <xPortStartScheduler+0x134>)
 810c040:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810c042:	4b31      	ldr	r3, [pc, #196]	@ (810c108 <xPortStartScheduler+0x138>)
 810c044:	2207      	movs	r2, #7
 810c046:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810c048:	e009      	b.n	810c05e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810c04a:	4b2f      	ldr	r3, [pc, #188]	@ (810c108 <xPortStartScheduler+0x138>)
 810c04c:	681b      	ldr	r3, [r3, #0]
 810c04e:	3b01      	subs	r3, #1
 810c050:	4a2d      	ldr	r2, [pc, #180]	@ (810c108 <xPortStartScheduler+0x138>)
 810c052:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810c054:	78fb      	ldrb	r3, [r7, #3]
 810c056:	b2db      	uxtb	r3, r3
 810c058:	005b      	lsls	r3, r3, #1
 810c05a:	b2db      	uxtb	r3, r3
 810c05c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810c05e:	78fb      	ldrb	r3, [r7, #3]
 810c060:	b2db      	uxtb	r3, r3
 810c062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810c066:	2b80      	cmp	r3, #128	@ 0x80
 810c068:	d0ef      	beq.n	810c04a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810c06a:	4b27      	ldr	r3, [pc, #156]	@ (810c108 <xPortStartScheduler+0x138>)
 810c06c:	681b      	ldr	r3, [r3, #0]
 810c06e:	f1c3 0307 	rsb	r3, r3, #7
 810c072:	2b04      	cmp	r3, #4
 810c074:	d00b      	beq.n	810c08e <xPortStartScheduler+0xbe>
	__asm volatile
 810c076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c07a:	f383 8811 	msr	BASEPRI, r3
 810c07e:	f3bf 8f6f 	isb	sy
 810c082:	f3bf 8f4f 	dsb	sy
 810c086:	60bb      	str	r3, [r7, #8]
}
 810c088:	bf00      	nop
 810c08a:	bf00      	nop
 810c08c:	e7fd      	b.n	810c08a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810c08e:	4b1e      	ldr	r3, [pc, #120]	@ (810c108 <xPortStartScheduler+0x138>)
 810c090:	681b      	ldr	r3, [r3, #0]
 810c092:	021b      	lsls	r3, r3, #8
 810c094:	4a1c      	ldr	r2, [pc, #112]	@ (810c108 <xPortStartScheduler+0x138>)
 810c096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810c098:	4b1b      	ldr	r3, [pc, #108]	@ (810c108 <xPortStartScheduler+0x138>)
 810c09a:	681b      	ldr	r3, [r3, #0]
 810c09c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810c0a0:	4a19      	ldr	r2, [pc, #100]	@ (810c108 <xPortStartScheduler+0x138>)
 810c0a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810c0a4:	687b      	ldr	r3, [r7, #4]
 810c0a6:	b2da      	uxtb	r2, r3
 810c0a8:	697b      	ldr	r3, [r7, #20]
 810c0aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810c0ac:	4b17      	ldr	r3, [pc, #92]	@ (810c10c <xPortStartScheduler+0x13c>)
 810c0ae:	681b      	ldr	r3, [r3, #0]
 810c0b0:	4a16      	ldr	r2, [pc, #88]	@ (810c10c <xPortStartScheduler+0x13c>)
 810c0b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810c0b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810c0b8:	4b14      	ldr	r3, [pc, #80]	@ (810c10c <xPortStartScheduler+0x13c>)
 810c0ba:	681b      	ldr	r3, [r3, #0]
 810c0bc:	4a13      	ldr	r2, [pc, #76]	@ (810c10c <xPortStartScheduler+0x13c>)
 810c0be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 810c0c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810c0c4:	f000 f8da 	bl	810c27c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810c0c8:	4b11      	ldr	r3, [pc, #68]	@ (810c110 <xPortStartScheduler+0x140>)
 810c0ca:	2200      	movs	r2, #0
 810c0cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810c0ce:	f000 f8f9 	bl	810c2c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810c0d2:	4b10      	ldr	r3, [pc, #64]	@ (810c114 <xPortStartScheduler+0x144>)
 810c0d4:	681b      	ldr	r3, [r3, #0]
 810c0d6:	4a0f      	ldr	r2, [pc, #60]	@ (810c114 <xPortStartScheduler+0x144>)
 810c0d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810c0dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810c0de:	f7ff ff63 	bl	810bfa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810c0e2:	f001 fa0f 	bl	810d504 <vTaskSwitchContext>
	prvTaskExitError();
 810c0e6:	f7ff ff19 	bl	810bf1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810c0ea:	2300      	movs	r3, #0
}
 810c0ec:	4618      	mov	r0, r3
 810c0ee:	3718      	adds	r7, #24
 810c0f0:	46bd      	mov	sp, r7
 810c0f2:	bd80      	pop	{r7, pc}
 810c0f4:	e000ed00 	.word	0xe000ed00
 810c0f8:	410fc271 	.word	0x410fc271
 810c0fc:	410fc270 	.word	0x410fc270
 810c100:	e000e400 	.word	0xe000e400
 810c104:	1000498c 	.word	0x1000498c
 810c108:	10004990 	.word	0x10004990
 810c10c:	e000ed20 	.word	0xe000ed20
 810c110:	10000010 	.word	0x10000010
 810c114:	e000ef34 	.word	0xe000ef34

0810c118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810c118:	b480      	push	{r7}
 810c11a:	b083      	sub	sp, #12
 810c11c:	af00      	add	r7, sp, #0
	__asm volatile
 810c11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c122:	f383 8811 	msr	BASEPRI, r3
 810c126:	f3bf 8f6f 	isb	sy
 810c12a:	f3bf 8f4f 	dsb	sy
 810c12e:	607b      	str	r3, [r7, #4]
}
 810c130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810c132:	4b10      	ldr	r3, [pc, #64]	@ (810c174 <vPortEnterCritical+0x5c>)
 810c134:	681b      	ldr	r3, [r3, #0]
 810c136:	3301      	adds	r3, #1
 810c138:	4a0e      	ldr	r2, [pc, #56]	@ (810c174 <vPortEnterCritical+0x5c>)
 810c13a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810c13c:	4b0d      	ldr	r3, [pc, #52]	@ (810c174 <vPortEnterCritical+0x5c>)
 810c13e:	681b      	ldr	r3, [r3, #0]
 810c140:	2b01      	cmp	r3, #1
 810c142:	d110      	bne.n	810c166 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810c144:	4b0c      	ldr	r3, [pc, #48]	@ (810c178 <vPortEnterCritical+0x60>)
 810c146:	681b      	ldr	r3, [r3, #0]
 810c148:	b2db      	uxtb	r3, r3
 810c14a:	2b00      	cmp	r3, #0
 810c14c:	d00b      	beq.n	810c166 <vPortEnterCritical+0x4e>
	__asm volatile
 810c14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c152:	f383 8811 	msr	BASEPRI, r3
 810c156:	f3bf 8f6f 	isb	sy
 810c15a:	f3bf 8f4f 	dsb	sy
 810c15e:	603b      	str	r3, [r7, #0]
}
 810c160:	bf00      	nop
 810c162:	bf00      	nop
 810c164:	e7fd      	b.n	810c162 <vPortEnterCritical+0x4a>
	}
}
 810c166:	bf00      	nop
 810c168:	370c      	adds	r7, #12
 810c16a:	46bd      	mov	sp, r7
 810c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c170:	4770      	bx	lr
 810c172:	bf00      	nop
 810c174:	10000010 	.word	0x10000010
 810c178:	e000ed04 	.word	0xe000ed04

0810c17c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810c17c:	b480      	push	{r7}
 810c17e:	b083      	sub	sp, #12
 810c180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810c182:	4b12      	ldr	r3, [pc, #72]	@ (810c1cc <vPortExitCritical+0x50>)
 810c184:	681b      	ldr	r3, [r3, #0]
 810c186:	2b00      	cmp	r3, #0
 810c188:	d10b      	bne.n	810c1a2 <vPortExitCritical+0x26>
	__asm volatile
 810c18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c18e:	f383 8811 	msr	BASEPRI, r3
 810c192:	f3bf 8f6f 	isb	sy
 810c196:	f3bf 8f4f 	dsb	sy
 810c19a:	607b      	str	r3, [r7, #4]
}
 810c19c:	bf00      	nop
 810c19e:	bf00      	nop
 810c1a0:	e7fd      	b.n	810c19e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810c1a2:	4b0a      	ldr	r3, [pc, #40]	@ (810c1cc <vPortExitCritical+0x50>)
 810c1a4:	681b      	ldr	r3, [r3, #0]
 810c1a6:	3b01      	subs	r3, #1
 810c1a8:	4a08      	ldr	r2, [pc, #32]	@ (810c1cc <vPortExitCritical+0x50>)
 810c1aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810c1ac:	4b07      	ldr	r3, [pc, #28]	@ (810c1cc <vPortExitCritical+0x50>)
 810c1ae:	681b      	ldr	r3, [r3, #0]
 810c1b0:	2b00      	cmp	r3, #0
 810c1b2:	d105      	bne.n	810c1c0 <vPortExitCritical+0x44>
 810c1b4:	2300      	movs	r3, #0
 810c1b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810c1b8:	683b      	ldr	r3, [r7, #0]
 810c1ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810c1be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810c1c0:	bf00      	nop
 810c1c2:	370c      	adds	r7, #12
 810c1c4:	46bd      	mov	sp, r7
 810c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1ca:	4770      	bx	lr
 810c1cc:	10000010 	.word	0x10000010

0810c1d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810c1d0:	f3ef 8009 	mrs	r0, PSP
 810c1d4:	f3bf 8f6f 	isb	sy
 810c1d8:	4b15      	ldr	r3, [pc, #84]	@ (810c230 <pxCurrentTCBConst>)
 810c1da:	681a      	ldr	r2, [r3, #0]
 810c1dc:	f01e 0f10 	tst.w	lr, #16
 810c1e0:	bf08      	it	eq
 810c1e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810c1e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c1ea:	6010      	str	r0, [r2, #0]
 810c1ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 810c1f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 810c1f4:	f380 8811 	msr	BASEPRI, r0
 810c1f8:	f3bf 8f4f 	dsb	sy
 810c1fc:	f3bf 8f6f 	isb	sy
 810c200:	f001 f980 	bl	810d504 <vTaskSwitchContext>
 810c204:	f04f 0000 	mov.w	r0, #0
 810c208:	f380 8811 	msr	BASEPRI, r0
 810c20c:	bc09      	pop	{r0, r3}
 810c20e:	6819      	ldr	r1, [r3, #0]
 810c210:	6808      	ldr	r0, [r1, #0]
 810c212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c216:	f01e 0f10 	tst.w	lr, #16
 810c21a:	bf08      	it	eq
 810c21c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810c220:	f380 8809 	msr	PSP, r0
 810c224:	f3bf 8f6f 	isb	sy
 810c228:	4770      	bx	lr
 810c22a:	bf00      	nop
 810c22c:	f3af 8000 	nop.w

0810c230 <pxCurrentTCBConst>:
 810c230:	100049d4 	.word	0x100049d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810c234:	bf00      	nop
 810c236:	bf00      	nop

0810c238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810c238:	b580      	push	{r7, lr}
 810c23a:	b082      	sub	sp, #8
 810c23c:	af00      	add	r7, sp, #0
	__asm volatile
 810c23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c242:	f383 8811 	msr	BASEPRI, r3
 810c246:	f3bf 8f6f 	isb	sy
 810c24a:	f3bf 8f4f 	dsb	sy
 810c24e:	607b      	str	r3, [r7, #4]
}
 810c250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810c252:	f001 f89d 	bl	810d390 <xTaskIncrementTick>
 810c256:	4603      	mov	r3, r0
 810c258:	2b00      	cmp	r3, #0
 810c25a:	d003      	beq.n	810c264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810c25c:	4b06      	ldr	r3, [pc, #24]	@ (810c278 <xPortSysTickHandler+0x40>)
 810c25e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c262:	601a      	str	r2, [r3, #0]
 810c264:	2300      	movs	r3, #0
 810c266:	603b      	str	r3, [r7, #0]
	__asm volatile
 810c268:	683b      	ldr	r3, [r7, #0]
 810c26a:	f383 8811 	msr	BASEPRI, r3
}
 810c26e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810c270:	bf00      	nop
 810c272:	3708      	adds	r7, #8
 810c274:	46bd      	mov	sp, r7
 810c276:	bd80      	pop	{r7, pc}
 810c278:	e000ed04 	.word	0xe000ed04

0810c27c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810c27c:	b480      	push	{r7}
 810c27e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810c280:	4b0b      	ldr	r3, [pc, #44]	@ (810c2b0 <vPortSetupTimerInterrupt+0x34>)
 810c282:	2200      	movs	r2, #0
 810c284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810c286:	4b0b      	ldr	r3, [pc, #44]	@ (810c2b4 <vPortSetupTimerInterrupt+0x38>)
 810c288:	2200      	movs	r2, #0
 810c28a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810c28c:	4b0a      	ldr	r3, [pc, #40]	@ (810c2b8 <vPortSetupTimerInterrupt+0x3c>)
 810c28e:	681b      	ldr	r3, [r3, #0]
 810c290:	4a0a      	ldr	r2, [pc, #40]	@ (810c2bc <vPortSetupTimerInterrupt+0x40>)
 810c292:	fba2 2303 	umull	r2, r3, r2, r3
 810c296:	099b      	lsrs	r3, r3, #6
 810c298:	4a09      	ldr	r2, [pc, #36]	@ (810c2c0 <vPortSetupTimerInterrupt+0x44>)
 810c29a:	3b01      	subs	r3, #1
 810c29c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810c29e:	4b04      	ldr	r3, [pc, #16]	@ (810c2b0 <vPortSetupTimerInterrupt+0x34>)
 810c2a0:	2207      	movs	r2, #7
 810c2a2:	601a      	str	r2, [r3, #0]
}
 810c2a4:	bf00      	nop
 810c2a6:	46bd      	mov	sp, r7
 810c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2ac:	4770      	bx	lr
 810c2ae:	bf00      	nop
 810c2b0:	e000e010 	.word	0xe000e010
 810c2b4:	e000e018 	.word	0xe000e018
 810c2b8:	10000004 	.word	0x10000004
 810c2bc:	10624dd3 	.word	0x10624dd3
 810c2c0:	e000e014 	.word	0xe000e014

0810c2c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810c2c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 810c2d4 <vPortEnableVFP+0x10>
 810c2c8:	6801      	ldr	r1, [r0, #0]
 810c2ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810c2ce:	6001      	str	r1, [r0, #0]
 810c2d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810c2d2:	bf00      	nop
 810c2d4:	e000ed88 	.word	0xe000ed88

0810c2d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810c2d8:	b480      	push	{r7}
 810c2da:	b085      	sub	sp, #20
 810c2dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810c2de:	f3ef 8305 	mrs	r3, IPSR
 810c2e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810c2e4:	68fb      	ldr	r3, [r7, #12]
 810c2e6:	2b0f      	cmp	r3, #15
 810c2e8:	d915      	bls.n	810c316 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810c2ea:	4a18      	ldr	r2, [pc, #96]	@ (810c34c <vPortValidateInterruptPriority+0x74>)
 810c2ec:	68fb      	ldr	r3, [r7, #12]
 810c2ee:	4413      	add	r3, r2
 810c2f0:	781b      	ldrb	r3, [r3, #0]
 810c2f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810c2f4:	4b16      	ldr	r3, [pc, #88]	@ (810c350 <vPortValidateInterruptPriority+0x78>)
 810c2f6:	781b      	ldrb	r3, [r3, #0]
 810c2f8:	7afa      	ldrb	r2, [r7, #11]
 810c2fa:	429a      	cmp	r2, r3
 810c2fc:	d20b      	bcs.n	810c316 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810c2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c302:	f383 8811 	msr	BASEPRI, r3
 810c306:	f3bf 8f6f 	isb	sy
 810c30a:	f3bf 8f4f 	dsb	sy
 810c30e:	607b      	str	r3, [r7, #4]
}
 810c310:	bf00      	nop
 810c312:	bf00      	nop
 810c314:	e7fd      	b.n	810c312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810c316:	4b0f      	ldr	r3, [pc, #60]	@ (810c354 <vPortValidateInterruptPriority+0x7c>)
 810c318:	681b      	ldr	r3, [r3, #0]
 810c31a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810c31e:	4b0e      	ldr	r3, [pc, #56]	@ (810c358 <vPortValidateInterruptPriority+0x80>)
 810c320:	681b      	ldr	r3, [r3, #0]
 810c322:	429a      	cmp	r2, r3
 810c324:	d90b      	bls.n	810c33e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 810c326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c32a:	f383 8811 	msr	BASEPRI, r3
 810c32e:	f3bf 8f6f 	isb	sy
 810c332:	f3bf 8f4f 	dsb	sy
 810c336:	603b      	str	r3, [r7, #0]
}
 810c338:	bf00      	nop
 810c33a:	bf00      	nop
 810c33c:	e7fd      	b.n	810c33a <vPortValidateInterruptPriority+0x62>
	}
 810c33e:	bf00      	nop
 810c340:	3714      	adds	r7, #20
 810c342:	46bd      	mov	sp, r7
 810c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c348:	4770      	bx	lr
 810c34a:	bf00      	nop
 810c34c:	e000e3f0 	.word	0xe000e3f0
 810c350:	1000498c 	.word	0x1000498c
 810c354:	e000ed0c 	.word	0xe000ed0c
 810c358:	10004990 	.word	0x10004990

0810c35c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810c35c:	b580      	push	{r7, lr}
 810c35e:	b084      	sub	sp, #16
 810c360:	af00      	add	r7, sp, #0
 810c362:	6078      	str	r0, [r7, #4]
 810c364:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810c366:	687b      	ldr	r3, [r7, #4]
 810c368:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810c36a:	68fb      	ldr	r3, [r7, #12]
 810c36c:	2b00      	cmp	r3, #0
 810c36e:	d10b      	bne.n	810c388 <xQueueGenericReset+0x2c>
	__asm volatile
 810c370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c374:	f383 8811 	msr	BASEPRI, r3
 810c378:	f3bf 8f6f 	isb	sy
 810c37c:	f3bf 8f4f 	dsb	sy
 810c380:	60bb      	str	r3, [r7, #8]
}
 810c382:	bf00      	nop
 810c384:	bf00      	nop
 810c386:	e7fd      	b.n	810c384 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810c388:	f7ff fec6 	bl	810c118 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810c38c:	68fb      	ldr	r3, [r7, #12]
 810c38e:	681a      	ldr	r2, [r3, #0]
 810c390:	68fb      	ldr	r3, [r7, #12]
 810c392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c394:	68f9      	ldr	r1, [r7, #12]
 810c396:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810c398:	fb01 f303 	mul.w	r3, r1, r3
 810c39c:	441a      	add	r2, r3
 810c39e:	68fb      	ldr	r3, [r7, #12]
 810c3a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810c3a2:	68fb      	ldr	r3, [r7, #12]
 810c3a4:	2200      	movs	r2, #0
 810c3a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810c3a8:	68fb      	ldr	r3, [r7, #12]
 810c3aa:	681a      	ldr	r2, [r3, #0]
 810c3ac:	68fb      	ldr	r3, [r7, #12]
 810c3ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810c3b0:	68fb      	ldr	r3, [r7, #12]
 810c3b2:	681a      	ldr	r2, [r3, #0]
 810c3b4:	68fb      	ldr	r3, [r7, #12]
 810c3b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c3b8:	3b01      	subs	r3, #1
 810c3ba:	68f9      	ldr	r1, [r7, #12]
 810c3bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810c3be:	fb01 f303 	mul.w	r3, r1, r3
 810c3c2:	441a      	add	r2, r3
 810c3c4:	68fb      	ldr	r3, [r7, #12]
 810c3c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810c3c8:	68fb      	ldr	r3, [r7, #12]
 810c3ca:	22ff      	movs	r2, #255	@ 0xff
 810c3cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810c3d0:	68fb      	ldr	r3, [r7, #12]
 810c3d2:	22ff      	movs	r2, #255	@ 0xff
 810c3d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 810c3d8:	683b      	ldr	r3, [r7, #0]
 810c3da:	2b00      	cmp	r3, #0
 810c3dc:	d114      	bne.n	810c408 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810c3de:	68fb      	ldr	r3, [r7, #12]
 810c3e0:	691b      	ldr	r3, [r3, #16]
 810c3e2:	2b00      	cmp	r3, #0
 810c3e4:	d01a      	beq.n	810c41c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810c3e6:	68fb      	ldr	r3, [r7, #12]
 810c3e8:	3310      	adds	r3, #16
 810c3ea:	4618      	mov	r0, r3
 810c3ec:	f001 f942 	bl	810d674 <xTaskRemoveFromEventList>
 810c3f0:	4603      	mov	r3, r0
 810c3f2:	2b00      	cmp	r3, #0
 810c3f4:	d012      	beq.n	810c41c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810c3f6:	4b0d      	ldr	r3, [pc, #52]	@ (810c42c <xQueueGenericReset+0xd0>)
 810c3f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c3fc:	601a      	str	r2, [r3, #0]
 810c3fe:	f3bf 8f4f 	dsb	sy
 810c402:	f3bf 8f6f 	isb	sy
 810c406:	e009      	b.n	810c41c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810c408:	68fb      	ldr	r3, [r7, #12]
 810c40a:	3310      	adds	r3, #16
 810c40c:	4618      	mov	r0, r3
 810c40e:	f7ff fc9d 	bl	810bd4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810c412:	68fb      	ldr	r3, [r7, #12]
 810c414:	3324      	adds	r3, #36	@ 0x24
 810c416:	4618      	mov	r0, r3
 810c418:	f7ff fc98 	bl	810bd4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810c41c:	f7ff feae 	bl	810c17c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810c420:	2301      	movs	r3, #1
}
 810c422:	4618      	mov	r0, r3
 810c424:	3710      	adds	r7, #16
 810c426:	46bd      	mov	sp, r7
 810c428:	bd80      	pop	{r7, pc}
 810c42a:	bf00      	nop
 810c42c:	e000ed04 	.word	0xe000ed04

0810c430 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810c430:	b580      	push	{r7, lr}
 810c432:	b08e      	sub	sp, #56	@ 0x38
 810c434:	af02      	add	r7, sp, #8
 810c436:	60f8      	str	r0, [r7, #12]
 810c438:	60b9      	str	r1, [r7, #8]
 810c43a:	607a      	str	r2, [r7, #4]
 810c43c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810c43e:	68fb      	ldr	r3, [r7, #12]
 810c440:	2b00      	cmp	r3, #0
 810c442:	d10b      	bne.n	810c45c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 810c444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c448:	f383 8811 	msr	BASEPRI, r3
 810c44c:	f3bf 8f6f 	isb	sy
 810c450:	f3bf 8f4f 	dsb	sy
 810c454:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810c456:	bf00      	nop
 810c458:	bf00      	nop
 810c45a:	e7fd      	b.n	810c458 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810c45c:	683b      	ldr	r3, [r7, #0]
 810c45e:	2b00      	cmp	r3, #0
 810c460:	d10b      	bne.n	810c47a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 810c462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c466:	f383 8811 	msr	BASEPRI, r3
 810c46a:	f3bf 8f6f 	isb	sy
 810c46e:	f3bf 8f4f 	dsb	sy
 810c472:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810c474:	bf00      	nop
 810c476:	bf00      	nop
 810c478:	e7fd      	b.n	810c476 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810c47a:	687b      	ldr	r3, [r7, #4]
 810c47c:	2b00      	cmp	r3, #0
 810c47e:	d002      	beq.n	810c486 <xQueueGenericCreateStatic+0x56>
 810c480:	68bb      	ldr	r3, [r7, #8]
 810c482:	2b00      	cmp	r3, #0
 810c484:	d001      	beq.n	810c48a <xQueueGenericCreateStatic+0x5a>
 810c486:	2301      	movs	r3, #1
 810c488:	e000      	b.n	810c48c <xQueueGenericCreateStatic+0x5c>
 810c48a:	2300      	movs	r3, #0
 810c48c:	2b00      	cmp	r3, #0
 810c48e:	d10b      	bne.n	810c4a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 810c490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c494:	f383 8811 	msr	BASEPRI, r3
 810c498:	f3bf 8f6f 	isb	sy
 810c49c:	f3bf 8f4f 	dsb	sy
 810c4a0:	623b      	str	r3, [r7, #32]
}
 810c4a2:	bf00      	nop
 810c4a4:	bf00      	nop
 810c4a6:	e7fd      	b.n	810c4a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810c4a8:	687b      	ldr	r3, [r7, #4]
 810c4aa:	2b00      	cmp	r3, #0
 810c4ac:	d102      	bne.n	810c4b4 <xQueueGenericCreateStatic+0x84>
 810c4ae:	68bb      	ldr	r3, [r7, #8]
 810c4b0:	2b00      	cmp	r3, #0
 810c4b2:	d101      	bne.n	810c4b8 <xQueueGenericCreateStatic+0x88>
 810c4b4:	2301      	movs	r3, #1
 810c4b6:	e000      	b.n	810c4ba <xQueueGenericCreateStatic+0x8a>
 810c4b8:	2300      	movs	r3, #0
 810c4ba:	2b00      	cmp	r3, #0
 810c4bc:	d10b      	bne.n	810c4d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810c4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c4c2:	f383 8811 	msr	BASEPRI, r3
 810c4c6:	f3bf 8f6f 	isb	sy
 810c4ca:	f3bf 8f4f 	dsb	sy
 810c4ce:	61fb      	str	r3, [r7, #28]
}
 810c4d0:	bf00      	nop
 810c4d2:	bf00      	nop
 810c4d4:	e7fd      	b.n	810c4d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810c4d6:	2350      	movs	r3, #80	@ 0x50
 810c4d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810c4da:	697b      	ldr	r3, [r7, #20]
 810c4dc:	2b50      	cmp	r3, #80	@ 0x50
 810c4de:	d00b      	beq.n	810c4f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 810c4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c4e4:	f383 8811 	msr	BASEPRI, r3
 810c4e8:	f3bf 8f6f 	isb	sy
 810c4ec:	f3bf 8f4f 	dsb	sy
 810c4f0:	61bb      	str	r3, [r7, #24]
}
 810c4f2:	bf00      	nop
 810c4f4:	bf00      	nop
 810c4f6:	e7fd      	b.n	810c4f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810c4f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810c4fa:	683b      	ldr	r3, [r7, #0]
 810c4fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810c4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c500:	2b00      	cmp	r3, #0
 810c502:	d00d      	beq.n	810c520 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810c504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c506:	2201      	movs	r2, #1
 810c508:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810c50c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 810c510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c512:	9300      	str	r3, [sp, #0]
 810c514:	4613      	mov	r3, r2
 810c516:	687a      	ldr	r2, [r7, #4]
 810c518:	68b9      	ldr	r1, [r7, #8]
 810c51a:	68f8      	ldr	r0, [r7, #12]
 810c51c:	f000 f805 	bl	810c52a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810c520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 810c522:	4618      	mov	r0, r3
 810c524:	3730      	adds	r7, #48	@ 0x30
 810c526:	46bd      	mov	sp, r7
 810c528:	bd80      	pop	{r7, pc}

0810c52a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810c52a:	b580      	push	{r7, lr}
 810c52c:	b084      	sub	sp, #16
 810c52e:	af00      	add	r7, sp, #0
 810c530:	60f8      	str	r0, [r7, #12]
 810c532:	60b9      	str	r1, [r7, #8]
 810c534:	607a      	str	r2, [r7, #4]
 810c536:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810c538:	68bb      	ldr	r3, [r7, #8]
 810c53a:	2b00      	cmp	r3, #0
 810c53c:	d103      	bne.n	810c546 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810c53e:	69bb      	ldr	r3, [r7, #24]
 810c540:	69ba      	ldr	r2, [r7, #24]
 810c542:	601a      	str	r2, [r3, #0]
 810c544:	e002      	b.n	810c54c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810c546:	69bb      	ldr	r3, [r7, #24]
 810c548:	687a      	ldr	r2, [r7, #4]
 810c54a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810c54c:	69bb      	ldr	r3, [r7, #24]
 810c54e:	68fa      	ldr	r2, [r7, #12]
 810c550:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810c552:	69bb      	ldr	r3, [r7, #24]
 810c554:	68ba      	ldr	r2, [r7, #8]
 810c556:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810c558:	2101      	movs	r1, #1
 810c55a:	69b8      	ldr	r0, [r7, #24]
 810c55c:	f7ff fefe 	bl	810c35c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810c560:	69bb      	ldr	r3, [r7, #24]
 810c562:	78fa      	ldrb	r2, [r7, #3]
 810c564:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810c568:	bf00      	nop
 810c56a:	3710      	adds	r7, #16
 810c56c:	46bd      	mov	sp, r7
 810c56e:	bd80      	pop	{r7, pc}

0810c570 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810c570:	b580      	push	{r7, lr}
 810c572:	b08e      	sub	sp, #56	@ 0x38
 810c574:	af00      	add	r7, sp, #0
 810c576:	60f8      	str	r0, [r7, #12]
 810c578:	60b9      	str	r1, [r7, #8]
 810c57a:	607a      	str	r2, [r7, #4]
 810c57c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810c57e:	2300      	movs	r3, #0
 810c580:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810c582:	68fb      	ldr	r3, [r7, #12]
 810c584:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810c586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c588:	2b00      	cmp	r3, #0
 810c58a:	d10b      	bne.n	810c5a4 <xQueueGenericSend+0x34>
	__asm volatile
 810c58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c590:	f383 8811 	msr	BASEPRI, r3
 810c594:	f3bf 8f6f 	isb	sy
 810c598:	f3bf 8f4f 	dsb	sy
 810c59c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810c59e:	bf00      	nop
 810c5a0:	bf00      	nop
 810c5a2:	e7fd      	b.n	810c5a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810c5a4:	68bb      	ldr	r3, [r7, #8]
 810c5a6:	2b00      	cmp	r3, #0
 810c5a8:	d103      	bne.n	810c5b2 <xQueueGenericSend+0x42>
 810c5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c5ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c5ae:	2b00      	cmp	r3, #0
 810c5b0:	d101      	bne.n	810c5b6 <xQueueGenericSend+0x46>
 810c5b2:	2301      	movs	r3, #1
 810c5b4:	e000      	b.n	810c5b8 <xQueueGenericSend+0x48>
 810c5b6:	2300      	movs	r3, #0
 810c5b8:	2b00      	cmp	r3, #0
 810c5ba:	d10b      	bne.n	810c5d4 <xQueueGenericSend+0x64>
	__asm volatile
 810c5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c5c0:	f383 8811 	msr	BASEPRI, r3
 810c5c4:	f3bf 8f6f 	isb	sy
 810c5c8:	f3bf 8f4f 	dsb	sy
 810c5cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810c5ce:	bf00      	nop
 810c5d0:	bf00      	nop
 810c5d2:	e7fd      	b.n	810c5d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810c5d4:	683b      	ldr	r3, [r7, #0]
 810c5d6:	2b02      	cmp	r3, #2
 810c5d8:	d103      	bne.n	810c5e2 <xQueueGenericSend+0x72>
 810c5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c5dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c5de:	2b01      	cmp	r3, #1
 810c5e0:	d101      	bne.n	810c5e6 <xQueueGenericSend+0x76>
 810c5e2:	2301      	movs	r3, #1
 810c5e4:	e000      	b.n	810c5e8 <xQueueGenericSend+0x78>
 810c5e6:	2300      	movs	r3, #0
 810c5e8:	2b00      	cmp	r3, #0
 810c5ea:	d10b      	bne.n	810c604 <xQueueGenericSend+0x94>
	__asm volatile
 810c5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c5f0:	f383 8811 	msr	BASEPRI, r3
 810c5f4:	f3bf 8f6f 	isb	sy
 810c5f8:	f3bf 8f4f 	dsb	sy
 810c5fc:	623b      	str	r3, [r7, #32]
}
 810c5fe:	bf00      	nop
 810c600:	bf00      	nop
 810c602:	e7fd      	b.n	810c600 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810c604:	f001 f9fc 	bl	810da00 <xTaskGetSchedulerState>
 810c608:	4603      	mov	r3, r0
 810c60a:	2b00      	cmp	r3, #0
 810c60c:	d102      	bne.n	810c614 <xQueueGenericSend+0xa4>
 810c60e:	687b      	ldr	r3, [r7, #4]
 810c610:	2b00      	cmp	r3, #0
 810c612:	d101      	bne.n	810c618 <xQueueGenericSend+0xa8>
 810c614:	2301      	movs	r3, #1
 810c616:	e000      	b.n	810c61a <xQueueGenericSend+0xaa>
 810c618:	2300      	movs	r3, #0
 810c61a:	2b00      	cmp	r3, #0
 810c61c:	d10b      	bne.n	810c636 <xQueueGenericSend+0xc6>
	__asm volatile
 810c61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c622:	f383 8811 	msr	BASEPRI, r3
 810c626:	f3bf 8f6f 	isb	sy
 810c62a:	f3bf 8f4f 	dsb	sy
 810c62e:	61fb      	str	r3, [r7, #28]
}
 810c630:	bf00      	nop
 810c632:	bf00      	nop
 810c634:	e7fd      	b.n	810c632 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810c636:	f7ff fd6f 	bl	810c118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810c63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c63c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810c63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c642:	429a      	cmp	r2, r3
 810c644:	d302      	bcc.n	810c64c <xQueueGenericSend+0xdc>
 810c646:	683b      	ldr	r3, [r7, #0]
 810c648:	2b02      	cmp	r3, #2
 810c64a:	d129      	bne.n	810c6a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810c64c:	683a      	ldr	r2, [r7, #0]
 810c64e:	68b9      	ldr	r1, [r7, #8]
 810c650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c652:	f000 fa0f 	bl	810ca74 <prvCopyDataToQueue>
 810c656:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810c658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c65c:	2b00      	cmp	r3, #0
 810c65e:	d010      	beq.n	810c682 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810c660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c662:	3324      	adds	r3, #36	@ 0x24
 810c664:	4618      	mov	r0, r3
 810c666:	f001 f805 	bl	810d674 <xTaskRemoveFromEventList>
 810c66a:	4603      	mov	r3, r0
 810c66c:	2b00      	cmp	r3, #0
 810c66e:	d013      	beq.n	810c698 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810c670:	4b3f      	ldr	r3, [pc, #252]	@ (810c770 <xQueueGenericSend+0x200>)
 810c672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c676:	601a      	str	r2, [r3, #0]
 810c678:	f3bf 8f4f 	dsb	sy
 810c67c:	f3bf 8f6f 	isb	sy
 810c680:	e00a      	b.n	810c698 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810c682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c684:	2b00      	cmp	r3, #0
 810c686:	d007      	beq.n	810c698 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810c688:	4b39      	ldr	r3, [pc, #228]	@ (810c770 <xQueueGenericSend+0x200>)
 810c68a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c68e:	601a      	str	r2, [r3, #0]
 810c690:	f3bf 8f4f 	dsb	sy
 810c694:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810c698:	f7ff fd70 	bl	810c17c <vPortExitCritical>
				return pdPASS;
 810c69c:	2301      	movs	r3, #1
 810c69e:	e063      	b.n	810c768 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810c6a0:	687b      	ldr	r3, [r7, #4]
 810c6a2:	2b00      	cmp	r3, #0
 810c6a4:	d103      	bne.n	810c6ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810c6a6:	f7ff fd69 	bl	810c17c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810c6aa:	2300      	movs	r3, #0
 810c6ac:	e05c      	b.n	810c768 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810c6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c6b0:	2b00      	cmp	r3, #0
 810c6b2:	d106      	bne.n	810c6c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810c6b4:	f107 0314 	add.w	r3, r7, #20
 810c6b8:	4618      	mov	r0, r3
 810c6ba:	f001 f83f 	bl	810d73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810c6be:	2301      	movs	r3, #1
 810c6c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810c6c2:	f7ff fd5b 	bl	810c17c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810c6c6:	f000 fda7 	bl	810d218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810c6ca:	f7ff fd25 	bl	810c118 <vPortEnterCritical>
 810c6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c6d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810c6d4:	b25b      	sxtb	r3, r3
 810c6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c6da:	d103      	bne.n	810c6e4 <xQueueGenericSend+0x174>
 810c6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c6de:	2200      	movs	r2, #0
 810c6e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810c6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c6e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810c6ea:	b25b      	sxtb	r3, r3
 810c6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c6f0:	d103      	bne.n	810c6fa <xQueueGenericSend+0x18a>
 810c6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c6f4:	2200      	movs	r2, #0
 810c6f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810c6fa:	f7ff fd3f 	bl	810c17c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810c6fe:	1d3a      	adds	r2, r7, #4
 810c700:	f107 0314 	add.w	r3, r7, #20
 810c704:	4611      	mov	r1, r2
 810c706:	4618      	mov	r0, r3
 810c708:	f001 f82e 	bl	810d768 <xTaskCheckForTimeOut>
 810c70c:	4603      	mov	r3, r0
 810c70e:	2b00      	cmp	r3, #0
 810c710:	d124      	bne.n	810c75c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810c712:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c714:	f000 faa6 	bl	810cc64 <prvIsQueueFull>
 810c718:	4603      	mov	r3, r0
 810c71a:	2b00      	cmp	r3, #0
 810c71c:	d018      	beq.n	810c750 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810c71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c720:	3310      	adds	r3, #16
 810c722:	687a      	ldr	r2, [r7, #4]
 810c724:	4611      	mov	r1, r2
 810c726:	4618      	mov	r0, r3
 810c728:	f000 ff52 	bl	810d5d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810c72c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c72e:	f000 fa31 	bl	810cb94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810c732:	f000 fd7f 	bl	810d234 <xTaskResumeAll>
 810c736:	4603      	mov	r3, r0
 810c738:	2b00      	cmp	r3, #0
 810c73a:	f47f af7c 	bne.w	810c636 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810c73e:	4b0c      	ldr	r3, [pc, #48]	@ (810c770 <xQueueGenericSend+0x200>)
 810c740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c744:	601a      	str	r2, [r3, #0]
 810c746:	f3bf 8f4f 	dsb	sy
 810c74a:	f3bf 8f6f 	isb	sy
 810c74e:	e772      	b.n	810c636 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810c750:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c752:	f000 fa1f 	bl	810cb94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810c756:	f000 fd6d 	bl	810d234 <xTaskResumeAll>
 810c75a:	e76c      	b.n	810c636 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810c75c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c75e:	f000 fa19 	bl	810cb94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810c762:	f000 fd67 	bl	810d234 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810c766:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810c768:	4618      	mov	r0, r3
 810c76a:	3738      	adds	r7, #56	@ 0x38
 810c76c:	46bd      	mov	sp, r7
 810c76e:	bd80      	pop	{r7, pc}
 810c770:	e000ed04 	.word	0xe000ed04

0810c774 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810c774:	b580      	push	{r7, lr}
 810c776:	b090      	sub	sp, #64	@ 0x40
 810c778:	af00      	add	r7, sp, #0
 810c77a:	60f8      	str	r0, [r7, #12]
 810c77c:	60b9      	str	r1, [r7, #8]
 810c77e:	607a      	str	r2, [r7, #4]
 810c780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810c782:	68fb      	ldr	r3, [r7, #12]
 810c784:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810c786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c788:	2b00      	cmp	r3, #0
 810c78a:	d10b      	bne.n	810c7a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810c78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c790:	f383 8811 	msr	BASEPRI, r3
 810c794:	f3bf 8f6f 	isb	sy
 810c798:	f3bf 8f4f 	dsb	sy
 810c79c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810c79e:	bf00      	nop
 810c7a0:	bf00      	nop
 810c7a2:	e7fd      	b.n	810c7a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810c7a4:	68bb      	ldr	r3, [r7, #8]
 810c7a6:	2b00      	cmp	r3, #0
 810c7a8:	d103      	bne.n	810c7b2 <xQueueGenericSendFromISR+0x3e>
 810c7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c7ae:	2b00      	cmp	r3, #0
 810c7b0:	d101      	bne.n	810c7b6 <xQueueGenericSendFromISR+0x42>
 810c7b2:	2301      	movs	r3, #1
 810c7b4:	e000      	b.n	810c7b8 <xQueueGenericSendFromISR+0x44>
 810c7b6:	2300      	movs	r3, #0
 810c7b8:	2b00      	cmp	r3, #0
 810c7ba:	d10b      	bne.n	810c7d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810c7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c7c0:	f383 8811 	msr	BASEPRI, r3
 810c7c4:	f3bf 8f6f 	isb	sy
 810c7c8:	f3bf 8f4f 	dsb	sy
 810c7cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810c7ce:	bf00      	nop
 810c7d0:	bf00      	nop
 810c7d2:	e7fd      	b.n	810c7d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810c7d4:	683b      	ldr	r3, [r7, #0]
 810c7d6:	2b02      	cmp	r3, #2
 810c7d8:	d103      	bne.n	810c7e2 <xQueueGenericSendFromISR+0x6e>
 810c7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c7dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c7de:	2b01      	cmp	r3, #1
 810c7e0:	d101      	bne.n	810c7e6 <xQueueGenericSendFromISR+0x72>
 810c7e2:	2301      	movs	r3, #1
 810c7e4:	e000      	b.n	810c7e8 <xQueueGenericSendFromISR+0x74>
 810c7e6:	2300      	movs	r3, #0
 810c7e8:	2b00      	cmp	r3, #0
 810c7ea:	d10b      	bne.n	810c804 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 810c7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c7f0:	f383 8811 	msr	BASEPRI, r3
 810c7f4:	f3bf 8f6f 	isb	sy
 810c7f8:	f3bf 8f4f 	dsb	sy
 810c7fc:	623b      	str	r3, [r7, #32]
}
 810c7fe:	bf00      	nop
 810c800:	bf00      	nop
 810c802:	e7fd      	b.n	810c800 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810c804:	f7ff fd68 	bl	810c2d8 <vPortValidateInterruptPriority>
	__asm volatile
 810c808:	f3ef 8211 	mrs	r2, BASEPRI
 810c80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c810:	f383 8811 	msr	BASEPRI, r3
 810c814:	f3bf 8f6f 	isb	sy
 810c818:	f3bf 8f4f 	dsb	sy
 810c81c:	61fa      	str	r2, [r7, #28]
 810c81e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810c820:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810c822:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810c824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c826:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810c828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c82a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c82c:	429a      	cmp	r2, r3
 810c82e:	d302      	bcc.n	810c836 <xQueueGenericSendFromISR+0xc2>
 810c830:	683b      	ldr	r3, [r7, #0]
 810c832:	2b02      	cmp	r3, #2
 810c834:	d12f      	bne.n	810c896 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810c836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c838:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810c83c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810c840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c844:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810c846:	683a      	ldr	r2, [r7, #0]
 810c848:	68b9      	ldr	r1, [r7, #8]
 810c84a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810c84c:	f000 f912 	bl	810ca74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810c850:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810c854:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c858:	d112      	bne.n	810c880 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810c85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c85e:	2b00      	cmp	r3, #0
 810c860:	d016      	beq.n	810c890 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810c862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c864:	3324      	adds	r3, #36	@ 0x24
 810c866:	4618      	mov	r0, r3
 810c868:	f000 ff04 	bl	810d674 <xTaskRemoveFromEventList>
 810c86c:	4603      	mov	r3, r0
 810c86e:	2b00      	cmp	r3, #0
 810c870:	d00e      	beq.n	810c890 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810c872:	687b      	ldr	r3, [r7, #4]
 810c874:	2b00      	cmp	r3, #0
 810c876:	d00b      	beq.n	810c890 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810c878:	687b      	ldr	r3, [r7, #4]
 810c87a:	2201      	movs	r2, #1
 810c87c:	601a      	str	r2, [r3, #0]
 810c87e:	e007      	b.n	810c890 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810c880:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810c884:	3301      	adds	r3, #1
 810c886:	b2db      	uxtb	r3, r3
 810c888:	b25a      	sxtb	r2, r3
 810c88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c88c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810c890:	2301      	movs	r3, #1
 810c892:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810c894:	e001      	b.n	810c89a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810c896:	2300      	movs	r3, #0
 810c898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810c89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c89c:	617b      	str	r3, [r7, #20]
	__asm volatile
 810c89e:	697b      	ldr	r3, [r7, #20]
 810c8a0:	f383 8811 	msr	BASEPRI, r3
}
 810c8a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810c8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810c8a8:	4618      	mov	r0, r3
 810c8aa:	3740      	adds	r7, #64	@ 0x40
 810c8ac:	46bd      	mov	sp, r7
 810c8ae:	bd80      	pop	{r7, pc}

0810c8b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810c8b0:	b580      	push	{r7, lr}
 810c8b2:	b08c      	sub	sp, #48	@ 0x30
 810c8b4:	af00      	add	r7, sp, #0
 810c8b6:	60f8      	str	r0, [r7, #12]
 810c8b8:	60b9      	str	r1, [r7, #8]
 810c8ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810c8bc:	2300      	movs	r3, #0
 810c8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810c8c0:	68fb      	ldr	r3, [r7, #12]
 810c8c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810c8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c8c6:	2b00      	cmp	r3, #0
 810c8c8:	d10b      	bne.n	810c8e2 <xQueueReceive+0x32>
	__asm volatile
 810c8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c8ce:	f383 8811 	msr	BASEPRI, r3
 810c8d2:	f3bf 8f6f 	isb	sy
 810c8d6:	f3bf 8f4f 	dsb	sy
 810c8da:	623b      	str	r3, [r7, #32]
}
 810c8dc:	bf00      	nop
 810c8de:	bf00      	nop
 810c8e0:	e7fd      	b.n	810c8de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810c8e2:	68bb      	ldr	r3, [r7, #8]
 810c8e4:	2b00      	cmp	r3, #0
 810c8e6:	d103      	bne.n	810c8f0 <xQueueReceive+0x40>
 810c8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c8ec:	2b00      	cmp	r3, #0
 810c8ee:	d101      	bne.n	810c8f4 <xQueueReceive+0x44>
 810c8f0:	2301      	movs	r3, #1
 810c8f2:	e000      	b.n	810c8f6 <xQueueReceive+0x46>
 810c8f4:	2300      	movs	r3, #0
 810c8f6:	2b00      	cmp	r3, #0
 810c8f8:	d10b      	bne.n	810c912 <xQueueReceive+0x62>
	__asm volatile
 810c8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c8fe:	f383 8811 	msr	BASEPRI, r3
 810c902:	f3bf 8f6f 	isb	sy
 810c906:	f3bf 8f4f 	dsb	sy
 810c90a:	61fb      	str	r3, [r7, #28]
}
 810c90c:	bf00      	nop
 810c90e:	bf00      	nop
 810c910:	e7fd      	b.n	810c90e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810c912:	f001 f875 	bl	810da00 <xTaskGetSchedulerState>
 810c916:	4603      	mov	r3, r0
 810c918:	2b00      	cmp	r3, #0
 810c91a:	d102      	bne.n	810c922 <xQueueReceive+0x72>
 810c91c:	687b      	ldr	r3, [r7, #4]
 810c91e:	2b00      	cmp	r3, #0
 810c920:	d101      	bne.n	810c926 <xQueueReceive+0x76>
 810c922:	2301      	movs	r3, #1
 810c924:	e000      	b.n	810c928 <xQueueReceive+0x78>
 810c926:	2300      	movs	r3, #0
 810c928:	2b00      	cmp	r3, #0
 810c92a:	d10b      	bne.n	810c944 <xQueueReceive+0x94>
	__asm volatile
 810c92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c930:	f383 8811 	msr	BASEPRI, r3
 810c934:	f3bf 8f6f 	isb	sy
 810c938:	f3bf 8f4f 	dsb	sy
 810c93c:	61bb      	str	r3, [r7, #24]
}
 810c93e:	bf00      	nop
 810c940:	bf00      	nop
 810c942:	e7fd      	b.n	810c940 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810c944:	f7ff fbe8 	bl	810c118 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810c948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c94c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810c94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c950:	2b00      	cmp	r3, #0
 810c952:	d01f      	beq.n	810c994 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810c954:	68b9      	ldr	r1, [r7, #8]
 810c956:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810c958:	f000 f8f6 	bl	810cb48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810c95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c95e:	1e5a      	subs	r2, r3, #1
 810c960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c962:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810c964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c966:	691b      	ldr	r3, [r3, #16]
 810c968:	2b00      	cmp	r3, #0
 810c96a:	d00f      	beq.n	810c98c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810c96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c96e:	3310      	adds	r3, #16
 810c970:	4618      	mov	r0, r3
 810c972:	f000 fe7f 	bl	810d674 <xTaskRemoveFromEventList>
 810c976:	4603      	mov	r3, r0
 810c978:	2b00      	cmp	r3, #0
 810c97a:	d007      	beq.n	810c98c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810c97c:	4b3c      	ldr	r3, [pc, #240]	@ (810ca70 <xQueueReceive+0x1c0>)
 810c97e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c982:	601a      	str	r2, [r3, #0]
 810c984:	f3bf 8f4f 	dsb	sy
 810c988:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810c98c:	f7ff fbf6 	bl	810c17c <vPortExitCritical>
				return pdPASS;
 810c990:	2301      	movs	r3, #1
 810c992:	e069      	b.n	810ca68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810c994:	687b      	ldr	r3, [r7, #4]
 810c996:	2b00      	cmp	r3, #0
 810c998:	d103      	bne.n	810c9a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810c99a:	f7ff fbef 	bl	810c17c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810c99e:	2300      	movs	r3, #0
 810c9a0:	e062      	b.n	810ca68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810c9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c9a4:	2b00      	cmp	r3, #0
 810c9a6:	d106      	bne.n	810c9b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810c9a8:	f107 0310 	add.w	r3, r7, #16
 810c9ac:	4618      	mov	r0, r3
 810c9ae:	f000 fec5 	bl	810d73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810c9b2:	2301      	movs	r3, #1
 810c9b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810c9b6:	f7ff fbe1 	bl	810c17c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810c9ba:	f000 fc2d 	bl	810d218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810c9be:	f7ff fbab 	bl	810c118 <vPortEnterCritical>
 810c9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c9c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810c9c8:	b25b      	sxtb	r3, r3
 810c9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c9ce:	d103      	bne.n	810c9d8 <xQueueReceive+0x128>
 810c9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c9d2:	2200      	movs	r2, #0
 810c9d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810c9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c9da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810c9de:	b25b      	sxtb	r3, r3
 810c9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c9e4:	d103      	bne.n	810c9ee <xQueueReceive+0x13e>
 810c9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c9e8:	2200      	movs	r2, #0
 810c9ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810c9ee:	f7ff fbc5 	bl	810c17c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810c9f2:	1d3a      	adds	r2, r7, #4
 810c9f4:	f107 0310 	add.w	r3, r7, #16
 810c9f8:	4611      	mov	r1, r2
 810c9fa:	4618      	mov	r0, r3
 810c9fc:	f000 feb4 	bl	810d768 <xTaskCheckForTimeOut>
 810ca00:	4603      	mov	r3, r0
 810ca02:	2b00      	cmp	r3, #0
 810ca04:	d123      	bne.n	810ca4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810ca06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ca08:	f000 f916 	bl	810cc38 <prvIsQueueEmpty>
 810ca0c:	4603      	mov	r3, r0
 810ca0e:	2b00      	cmp	r3, #0
 810ca10:	d017      	beq.n	810ca42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810ca12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ca14:	3324      	adds	r3, #36	@ 0x24
 810ca16:	687a      	ldr	r2, [r7, #4]
 810ca18:	4611      	mov	r1, r2
 810ca1a:	4618      	mov	r0, r3
 810ca1c:	f000 fdd8 	bl	810d5d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810ca20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ca22:	f000 f8b7 	bl	810cb94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810ca26:	f000 fc05 	bl	810d234 <xTaskResumeAll>
 810ca2a:	4603      	mov	r3, r0
 810ca2c:	2b00      	cmp	r3, #0
 810ca2e:	d189      	bne.n	810c944 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 810ca30:	4b0f      	ldr	r3, [pc, #60]	@ (810ca70 <xQueueReceive+0x1c0>)
 810ca32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ca36:	601a      	str	r2, [r3, #0]
 810ca38:	f3bf 8f4f 	dsb	sy
 810ca3c:	f3bf 8f6f 	isb	sy
 810ca40:	e780      	b.n	810c944 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810ca42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ca44:	f000 f8a6 	bl	810cb94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810ca48:	f000 fbf4 	bl	810d234 <xTaskResumeAll>
 810ca4c:	e77a      	b.n	810c944 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810ca4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ca50:	f000 f8a0 	bl	810cb94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810ca54:	f000 fbee 	bl	810d234 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810ca58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ca5a:	f000 f8ed 	bl	810cc38 <prvIsQueueEmpty>
 810ca5e:	4603      	mov	r3, r0
 810ca60:	2b00      	cmp	r3, #0
 810ca62:	f43f af6f 	beq.w	810c944 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810ca66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810ca68:	4618      	mov	r0, r3
 810ca6a:	3730      	adds	r7, #48	@ 0x30
 810ca6c:	46bd      	mov	sp, r7
 810ca6e:	bd80      	pop	{r7, pc}
 810ca70:	e000ed04 	.word	0xe000ed04

0810ca74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810ca74:	b580      	push	{r7, lr}
 810ca76:	b086      	sub	sp, #24
 810ca78:	af00      	add	r7, sp, #0
 810ca7a:	60f8      	str	r0, [r7, #12]
 810ca7c:	60b9      	str	r1, [r7, #8]
 810ca7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810ca80:	2300      	movs	r3, #0
 810ca82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810ca84:	68fb      	ldr	r3, [r7, #12]
 810ca86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ca88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810ca8a:	68fb      	ldr	r3, [r7, #12]
 810ca8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810ca8e:	2b00      	cmp	r3, #0
 810ca90:	d10d      	bne.n	810caae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810ca92:	68fb      	ldr	r3, [r7, #12]
 810ca94:	681b      	ldr	r3, [r3, #0]
 810ca96:	2b00      	cmp	r3, #0
 810ca98:	d14d      	bne.n	810cb36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810ca9a:	68fb      	ldr	r3, [r7, #12]
 810ca9c:	689b      	ldr	r3, [r3, #8]
 810ca9e:	4618      	mov	r0, r3
 810caa0:	f000 ffcc 	bl	810da3c <xTaskPriorityDisinherit>
 810caa4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810caa6:	68fb      	ldr	r3, [r7, #12]
 810caa8:	2200      	movs	r2, #0
 810caaa:	609a      	str	r2, [r3, #8]
 810caac:	e043      	b.n	810cb36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810caae:	687b      	ldr	r3, [r7, #4]
 810cab0:	2b00      	cmp	r3, #0
 810cab2:	d119      	bne.n	810cae8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810cab4:	68fb      	ldr	r3, [r7, #12]
 810cab6:	6858      	ldr	r0, [r3, #4]
 810cab8:	68fb      	ldr	r3, [r7, #12]
 810caba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cabc:	461a      	mov	r2, r3
 810cabe:	68b9      	ldr	r1, [r7, #8]
 810cac0:	f002 fee5 	bl	810f88e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810cac4:	68fb      	ldr	r3, [r7, #12]
 810cac6:	685a      	ldr	r2, [r3, #4]
 810cac8:	68fb      	ldr	r3, [r7, #12]
 810caca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cacc:	441a      	add	r2, r3
 810cace:	68fb      	ldr	r3, [r7, #12]
 810cad0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810cad2:	68fb      	ldr	r3, [r7, #12]
 810cad4:	685a      	ldr	r2, [r3, #4]
 810cad6:	68fb      	ldr	r3, [r7, #12]
 810cad8:	689b      	ldr	r3, [r3, #8]
 810cada:	429a      	cmp	r2, r3
 810cadc:	d32b      	bcc.n	810cb36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810cade:	68fb      	ldr	r3, [r7, #12]
 810cae0:	681a      	ldr	r2, [r3, #0]
 810cae2:	68fb      	ldr	r3, [r7, #12]
 810cae4:	605a      	str	r2, [r3, #4]
 810cae6:	e026      	b.n	810cb36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810cae8:	68fb      	ldr	r3, [r7, #12]
 810caea:	68d8      	ldr	r0, [r3, #12]
 810caec:	68fb      	ldr	r3, [r7, #12]
 810caee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810caf0:	461a      	mov	r2, r3
 810caf2:	68b9      	ldr	r1, [r7, #8]
 810caf4:	f002 fecb 	bl	810f88e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810caf8:	68fb      	ldr	r3, [r7, #12]
 810cafa:	68da      	ldr	r2, [r3, #12]
 810cafc:	68fb      	ldr	r3, [r7, #12]
 810cafe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cb00:	425b      	negs	r3, r3
 810cb02:	441a      	add	r2, r3
 810cb04:	68fb      	ldr	r3, [r7, #12]
 810cb06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810cb08:	68fb      	ldr	r3, [r7, #12]
 810cb0a:	68da      	ldr	r2, [r3, #12]
 810cb0c:	68fb      	ldr	r3, [r7, #12]
 810cb0e:	681b      	ldr	r3, [r3, #0]
 810cb10:	429a      	cmp	r2, r3
 810cb12:	d207      	bcs.n	810cb24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810cb14:	68fb      	ldr	r3, [r7, #12]
 810cb16:	689a      	ldr	r2, [r3, #8]
 810cb18:	68fb      	ldr	r3, [r7, #12]
 810cb1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cb1c:	425b      	negs	r3, r3
 810cb1e:	441a      	add	r2, r3
 810cb20:	68fb      	ldr	r3, [r7, #12]
 810cb22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810cb24:	687b      	ldr	r3, [r7, #4]
 810cb26:	2b02      	cmp	r3, #2
 810cb28:	d105      	bne.n	810cb36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810cb2a:	693b      	ldr	r3, [r7, #16]
 810cb2c:	2b00      	cmp	r3, #0
 810cb2e:	d002      	beq.n	810cb36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810cb30:	693b      	ldr	r3, [r7, #16]
 810cb32:	3b01      	subs	r3, #1
 810cb34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810cb36:	693b      	ldr	r3, [r7, #16]
 810cb38:	1c5a      	adds	r2, r3, #1
 810cb3a:	68fb      	ldr	r3, [r7, #12]
 810cb3c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810cb3e:	697b      	ldr	r3, [r7, #20]
}
 810cb40:	4618      	mov	r0, r3
 810cb42:	3718      	adds	r7, #24
 810cb44:	46bd      	mov	sp, r7
 810cb46:	bd80      	pop	{r7, pc}

0810cb48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810cb48:	b580      	push	{r7, lr}
 810cb4a:	b082      	sub	sp, #8
 810cb4c:	af00      	add	r7, sp, #0
 810cb4e:	6078      	str	r0, [r7, #4]
 810cb50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810cb52:	687b      	ldr	r3, [r7, #4]
 810cb54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cb56:	2b00      	cmp	r3, #0
 810cb58:	d018      	beq.n	810cb8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810cb5a:	687b      	ldr	r3, [r7, #4]
 810cb5c:	68da      	ldr	r2, [r3, #12]
 810cb5e:	687b      	ldr	r3, [r7, #4]
 810cb60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cb62:	441a      	add	r2, r3
 810cb64:	687b      	ldr	r3, [r7, #4]
 810cb66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810cb68:	687b      	ldr	r3, [r7, #4]
 810cb6a:	68da      	ldr	r2, [r3, #12]
 810cb6c:	687b      	ldr	r3, [r7, #4]
 810cb6e:	689b      	ldr	r3, [r3, #8]
 810cb70:	429a      	cmp	r2, r3
 810cb72:	d303      	bcc.n	810cb7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810cb74:	687b      	ldr	r3, [r7, #4]
 810cb76:	681a      	ldr	r2, [r3, #0]
 810cb78:	687b      	ldr	r3, [r7, #4]
 810cb7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810cb7c:	687b      	ldr	r3, [r7, #4]
 810cb7e:	68d9      	ldr	r1, [r3, #12]
 810cb80:	687b      	ldr	r3, [r7, #4]
 810cb82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cb84:	461a      	mov	r2, r3
 810cb86:	6838      	ldr	r0, [r7, #0]
 810cb88:	f002 fe81 	bl	810f88e <memcpy>
	}
}
 810cb8c:	bf00      	nop
 810cb8e:	3708      	adds	r7, #8
 810cb90:	46bd      	mov	sp, r7
 810cb92:	bd80      	pop	{r7, pc}

0810cb94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810cb94:	b580      	push	{r7, lr}
 810cb96:	b084      	sub	sp, #16
 810cb98:	af00      	add	r7, sp, #0
 810cb9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810cb9c:	f7ff fabc 	bl	810c118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810cba0:	687b      	ldr	r3, [r7, #4]
 810cba2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810cba6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810cba8:	e011      	b.n	810cbce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810cbaa:	687b      	ldr	r3, [r7, #4]
 810cbac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810cbae:	2b00      	cmp	r3, #0
 810cbb0:	d012      	beq.n	810cbd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810cbb2:	687b      	ldr	r3, [r7, #4]
 810cbb4:	3324      	adds	r3, #36	@ 0x24
 810cbb6:	4618      	mov	r0, r3
 810cbb8:	f000 fd5c 	bl	810d674 <xTaskRemoveFromEventList>
 810cbbc:	4603      	mov	r3, r0
 810cbbe:	2b00      	cmp	r3, #0
 810cbc0:	d001      	beq.n	810cbc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810cbc2:	f000 fe35 	bl	810d830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810cbc6:	7bfb      	ldrb	r3, [r7, #15]
 810cbc8:	3b01      	subs	r3, #1
 810cbca:	b2db      	uxtb	r3, r3
 810cbcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810cbce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810cbd2:	2b00      	cmp	r3, #0
 810cbd4:	dce9      	bgt.n	810cbaa <prvUnlockQueue+0x16>
 810cbd6:	e000      	b.n	810cbda <prvUnlockQueue+0x46>
					break;
 810cbd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810cbda:	687b      	ldr	r3, [r7, #4]
 810cbdc:	22ff      	movs	r2, #255	@ 0xff
 810cbde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810cbe2:	f7ff facb 	bl	810c17c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810cbe6:	f7ff fa97 	bl	810c118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810cbea:	687b      	ldr	r3, [r7, #4]
 810cbec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810cbf0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810cbf2:	e011      	b.n	810cc18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810cbf4:	687b      	ldr	r3, [r7, #4]
 810cbf6:	691b      	ldr	r3, [r3, #16]
 810cbf8:	2b00      	cmp	r3, #0
 810cbfa:	d012      	beq.n	810cc22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810cbfc:	687b      	ldr	r3, [r7, #4]
 810cbfe:	3310      	adds	r3, #16
 810cc00:	4618      	mov	r0, r3
 810cc02:	f000 fd37 	bl	810d674 <xTaskRemoveFromEventList>
 810cc06:	4603      	mov	r3, r0
 810cc08:	2b00      	cmp	r3, #0
 810cc0a:	d001      	beq.n	810cc10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810cc0c:	f000 fe10 	bl	810d830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810cc10:	7bbb      	ldrb	r3, [r7, #14]
 810cc12:	3b01      	subs	r3, #1
 810cc14:	b2db      	uxtb	r3, r3
 810cc16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810cc18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810cc1c:	2b00      	cmp	r3, #0
 810cc1e:	dce9      	bgt.n	810cbf4 <prvUnlockQueue+0x60>
 810cc20:	e000      	b.n	810cc24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810cc22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810cc24:	687b      	ldr	r3, [r7, #4]
 810cc26:	22ff      	movs	r2, #255	@ 0xff
 810cc28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810cc2c:	f7ff faa6 	bl	810c17c <vPortExitCritical>
}
 810cc30:	bf00      	nop
 810cc32:	3710      	adds	r7, #16
 810cc34:	46bd      	mov	sp, r7
 810cc36:	bd80      	pop	{r7, pc}

0810cc38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810cc38:	b580      	push	{r7, lr}
 810cc3a:	b084      	sub	sp, #16
 810cc3c:	af00      	add	r7, sp, #0
 810cc3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810cc40:	f7ff fa6a 	bl	810c118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810cc44:	687b      	ldr	r3, [r7, #4]
 810cc46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810cc48:	2b00      	cmp	r3, #0
 810cc4a:	d102      	bne.n	810cc52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810cc4c:	2301      	movs	r3, #1
 810cc4e:	60fb      	str	r3, [r7, #12]
 810cc50:	e001      	b.n	810cc56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810cc52:	2300      	movs	r3, #0
 810cc54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810cc56:	f7ff fa91 	bl	810c17c <vPortExitCritical>

	return xReturn;
 810cc5a:	68fb      	ldr	r3, [r7, #12]
}
 810cc5c:	4618      	mov	r0, r3
 810cc5e:	3710      	adds	r7, #16
 810cc60:	46bd      	mov	sp, r7
 810cc62:	bd80      	pop	{r7, pc}

0810cc64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810cc64:	b580      	push	{r7, lr}
 810cc66:	b084      	sub	sp, #16
 810cc68:	af00      	add	r7, sp, #0
 810cc6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810cc6c:	f7ff fa54 	bl	810c118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810cc70:	687b      	ldr	r3, [r7, #4]
 810cc72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810cc74:	687b      	ldr	r3, [r7, #4]
 810cc76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810cc78:	429a      	cmp	r2, r3
 810cc7a:	d102      	bne.n	810cc82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810cc7c:	2301      	movs	r3, #1
 810cc7e:	60fb      	str	r3, [r7, #12]
 810cc80:	e001      	b.n	810cc86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810cc82:	2300      	movs	r3, #0
 810cc84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810cc86:	f7ff fa79 	bl	810c17c <vPortExitCritical>

	return xReturn;
 810cc8a:	68fb      	ldr	r3, [r7, #12]
}
 810cc8c:	4618      	mov	r0, r3
 810cc8e:	3710      	adds	r7, #16
 810cc90:	46bd      	mov	sp, r7
 810cc92:	bd80      	pop	{r7, pc}

0810cc94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810cc94:	b480      	push	{r7}
 810cc96:	b085      	sub	sp, #20
 810cc98:	af00      	add	r7, sp, #0
 810cc9a:	6078      	str	r0, [r7, #4]
 810cc9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810cc9e:	2300      	movs	r3, #0
 810cca0:	60fb      	str	r3, [r7, #12]
 810cca2:	e014      	b.n	810ccce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810cca4:	4a0f      	ldr	r2, [pc, #60]	@ (810cce4 <vQueueAddToRegistry+0x50>)
 810cca6:	68fb      	ldr	r3, [r7, #12]
 810cca8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810ccac:	2b00      	cmp	r3, #0
 810ccae:	d10b      	bne.n	810ccc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810ccb0:	490c      	ldr	r1, [pc, #48]	@ (810cce4 <vQueueAddToRegistry+0x50>)
 810ccb2:	68fb      	ldr	r3, [r7, #12]
 810ccb4:	683a      	ldr	r2, [r7, #0]
 810ccb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810ccba:	4a0a      	ldr	r2, [pc, #40]	@ (810cce4 <vQueueAddToRegistry+0x50>)
 810ccbc:	68fb      	ldr	r3, [r7, #12]
 810ccbe:	00db      	lsls	r3, r3, #3
 810ccc0:	4413      	add	r3, r2
 810ccc2:	687a      	ldr	r2, [r7, #4]
 810ccc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810ccc6:	e006      	b.n	810ccd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810ccc8:	68fb      	ldr	r3, [r7, #12]
 810ccca:	3301      	adds	r3, #1
 810cccc:	60fb      	str	r3, [r7, #12]
 810ccce:	68fb      	ldr	r3, [r7, #12]
 810ccd0:	2b07      	cmp	r3, #7
 810ccd2:	d9e7      	bls.n	810cca4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810ccd4:	bf00      	nop
 810ccd6:	bf00      	nop
 810ccd8:	3714      	adds	r7, #20
 810ccda:	46bd      	mov	sp, r7
 810ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cce0:	4770      	bx	lr
 810cce2:	bf00      	nop
 810cce4:	10004994 	.word	0x10004994

0810cce8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810cce8:	b580      	push	{r7, lr}
 810ccea:	b086      	sub	sp, #24
 810ccec:	af00      	add	r7, sp, #0
 810ccee:	60f8      	str	r0, [r7, #12]
 810ccf0:	60b9      	str	r1, [r7, #8]
 810ccf2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810ccf4:	68fb      	ldr	r3, [r7, #12]
 810ccf6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810ccf8:	f7ff fa0e 	bl	810c118 <vPortEnterCritical>
 810ccfc:	697b      	ldr	r3, [r7, #20]
 810ccfe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810cd02:	b25b      	sxtb	r3, r3
 810cd04:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cd08:	d103      	bne.n	810cd12 <vQueueWaitForMessageRestricted+0x2a>
 810cd0a:	697b      	ldr	r3, [r7, #20]
 810cd0c:	2200      	movs	r2, #0
 810cd0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810cd12:	697b      	ldr	r3, [r7, #20]
 810cd14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810cd18:	b25b      	sxtb	r3, r3
 810cd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cd1e:	d103      	bne.n	810cd28 <vQueueWaitForMessageRestricted+0x40>
 810cd20:	697b      	ldr	r3, [r7, #20]
 810cd22:	2200      	movs	r2, #0
 810cd24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810cd28:	f7ff fa28 	bl	810c17c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810cd2c:	697b      	ldr	r3, [r7, #20]
 810cd2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810cd30:	2b00      	cmp	r3, #0
 810cd32:	d106      	bne.n	810cd42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810cd34:	697b      	ldr	r3, [r7, #20]
 810cd36:	3324      	adds	r3, #36	@ 0x24
 810cd38:	687a      	ldr	r2, [r7, #4]
 810cd3a:	68b9      	ldr	r1, [r7, #8]
 810cd3c:	4618      	mov	r0, r3
 810cd3e:	f000 fc6d 	bl	810d61c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810cd42:	6978      	ldr	r0, [r7, #20]
 810cd44:	f7ff ff26 	bl	810cb94 <prvUnlockQueue>
	}
 810cd48:	bf00      	nop
 810cd4a:	3718      	adds	r7, #24
 810cd4c:	46bd      	mov	sp, r7
 810cd4e:	bd80      	pop	{r7, pc}

0810cd50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810cd50:	b580      	push	{r7, lr}
 810cd52:	b08e      	sub	sp, #56	@ 0x38
 810cd54:	af04      	add	r7, sp, #16
 810cd56:	60f8      	str	r0, [r7, #12]
 810cd58:	60b9      	str	r1, [r7, #8]
 810cd5a:	607a      	str	r2, [r7, #4]
 810cd5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810cd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cd60:	2b00      	cmp	r3, #0
 810cd62:	d10b      	bne.n	810cd7c <xTaskCreateStatic+0x2c>
	__asm volatile
 810cd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cd68:	f383 8811 	msr	BASEPRI, r3
 810cd6c:	f3bf 8f6f 	isb	sy
 810cd70:	f3bf 8f4f 	dsb	sy
 810cd74:	623b      	str	r3, [r7, #32]
}
 810cd76:	bf00      	nop
 810cd78:	bf00      	nop
 810cd7a:	e7fd      	b.n	810cd78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810cd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cd7e:	2b00      	cmp	r3, #0
 810cd80:	d10b      	bne.n	810cd9a <xTaskCreateStatic+0x4a>
	__asm volatile
 810cd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cd86:	f383 8811 	msr	BASEPRI, r3
 810cd8a:	f3bf 8f6f 	isb	sy
 810cd8e:	f3bf 8f4f 	dsb	sy
 810cd92:	61fb      	str	r3, [r7, #28]
}
 810cd94:	bf00      	nop
 810cd96:	bf00      	nop
 810cd98:	e7fd      	b.n	810cd96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810cd9a:	23a8      	movs	r3, #168	@ 0xa8
 810cd9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810cd9e:	693b      	ldr	r3, [r7, #16]
 810cda0:	2ba8      	cmp	r3, #168	@ 0xa8
 810cda2:	d00b      	beq.n	810cdbc <xTaskCreateStatic+0x6c>
	__asm volatile
 810cda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cda8:	f383 8811 	msr	BASEPRI, r3
 810cdac:	f3bf 8f6f 	isb	sy
 810cdb0:	f3bf 8f4f 	dsb	sy
 810cdb4:	61bb      	str	r3, [r7, #24]
}
 810cdb6:	bf00      	nop
 810cdb8:	bf00      	nop
 810cdba:	e7fd      	b.n	810cdb8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810cdbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810cdbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cdc0:	2b00      	cmp	r3, #0
 810cdc2:	d01e      	beq.n	810ce02 <xTaskCreateStatic+0xb2>
 810cdc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cdc6:	2b00      	cmp	r3, #0
 810cdc8:	d01b      	beq.n	810ce02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810cdca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cdcc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810cdce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cdd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810cdd2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810cdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cdd6:	2202      	movs	r2, #2
 810cdd8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810cddc:	2300      	movs	r3, #0
 810cdde:	9303      	str	r3, [sp, #12]
 810cde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cde2:	9302      	str	r3, [sp, #8]
 810cde4:	f107 0314 	add.w	r3, r7, #20
 810cde8:	9301      	str	r3, [sp, #4]
 810cdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cdec:	9300      	str	r3, [sp, #0]
 810cdee:	683b      	ldr	r3, [r7, #0]
 810cdf0:	687a      	ldr	r2, [r7, #4]
 810cdf2:	68b9      	ldr	r1, [r7, #8]
 810cdf4:	68f8      	ldr	r0, [r7, #12]
 810cdf6:	f000 f851 	bl	810ce9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810cdfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810cdfc:	f000 f8f6 	bl	810cfec <prvAddNewTaskToReadyList>
 810ce00:	e001      	b.n	810ce06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810ce02:	2300      	movs	r3, #0
 810ce04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810ce06:	697b      	ldr	r3, [r7, #20]
	}
 810ce08:	4618      	mov	r0, r3
 810ce0a:	3728      	adds	r7, #40	@ 0x28
 810ce0c:	46bd      	mov	sp, r7
 810ce0e:	bd80      	pop	{r7, pc}

0810ce10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810ce10:	b580      	push	{r7, lr}
 810ce12:	b08c      	sub	sp, #48	@ 0x30
 810ce14:	af04      	add	r7, sp, #16
 810ce16:	60f8      	str	r0, [r7, #12]
 810ce18:	60b9      	str	r1, [r7, #8]
 810ce1a:	603b      	str	r3, [r7, #0]
 810ce1c:	4613      	mov	r3, r2
 810ce1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810ce20:	88fb      	ldrh	r3, [r7, #6]
 810ce22:	009b      	lsls	r3, r3, #2
 810ce24:	4618      	mov	r0, r3
 810ce26:	f7fe fd97 	bl	810b958 <pvPortMalloc>
 810ce2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810ce2c:	697b      	ldr	r3, [r7, #20]
 810ce2e:	2b00      	cmp	r3, #0
 810ce30:	d00e      	beq.n	810ce50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810ce32:	20a8      	movs	r0, #168	@ 0xa8
 810ce34:	f7fe fd90 	bl	810b958 <pvPortMalloc>
 810ce38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810ce3a:	69fb      	ldr	r3, [r7, #28]
 810ce3c:	2b00      	cmp	r3, #0
 810ce3e:	d003      	beq.n	810ce48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810ce40:	69fb      	ldr	r3, [r7, #28]
 810ce42:	697a      	ldr	r2, [r7, #20]
 810ce44:	631a      	str	r2, [r3, #48]	@ 0x30
 810ce46:	e005      	b.n	810ce54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810ce48:	6978      	ldr	r0, [r7, #20]
 810ce4a:	f7fe fe53 	bl	810baf4 <vPortFree>
 810ce4e:	e001      	b.n	810ce54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810ce50:	2300      	movs	r3, #0
 810ce52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810ce54:	69fb      	ldr	r3, [r7, #28]
 810ce56:	2b00      	cmp	r3, #0
 810ce58:	d017      	beq.n	810ce8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810ce5a:	69fb      	ldr	r3, [r7, #28]
 810ce5c:	2200      	movs	r2, #0
 810ce5e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810ce62:	88fa      	ldrh	r2, [r7, #6]
 810ce64:	2300      	movs	r3, #0
 810ce66:	9303      	str	r3, [sp, #12]
 810ce68:	69fb      	ldr	r3, [r7, #28]
 810ce6a:	9302      	str	r3, [sp, #8]
 810ce6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ce6e:	9301      	str	r3, [sp, #4]
 810ce70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ce72:	9300      	str	r3, [sp, #0]
 810ce74:	683b      	ldr	r3, [r7, #0]
 810ce76:	68b9      	ldr	r1, [r7, #8]
 810ce78:	68f8      	ldr	r0, [r7, #12]
 810ce7a:	f000 f80f 	bl	810ce9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810ce7e:	69f8      	ldr	r0, [r7, #28]
 810ce80:	f000 f8b4 	bl	810cfec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810ce84:	2301      	movs	r3, #1
 810ce86:	61bb      	str	r3, [r7, #24]
 810ce88:	e002      	b.n	810ce90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810ce8a:	f04f 33ff 	mov.w	r3, #4294967295
 810ce8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810ce90:	69bb      	ldr	r3, [r7, #24]
	}
 810ce92:	4618      	mov	r0, r3
 810ce94:	3720      	adds	r7, #32
 810ce96:	46bd      	mov	sp, r7
 810ce98:	bd80      	pop	{r7, pc}
	...

0810ce9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810ce9c:	b580      	push	{r7, lr}
 810ce9e:	b088      	sub	sp, #32
 810cea0:	af00      	add	r7, sp, #0
 810cea2:	60f8      	str	r0, [r7, #12]
 810cea4:	60b9      	str	r1, [r7, #8]
 810cea6:	607a      	str	r2, [r7, #4]
 810cea8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810ceaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ceac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810ceae:	687b      	ldr	r3, [r7, #4]
 810ceb0:	009b      	lsls	r3, r3, #2
 810ceb2:	461a      	mov	r2, r3
 810ceb4:	21a5      	movs	r1, #165	@ 0xa5
 810ceb6:	f002 fbb9 	bl	810f62c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810ceba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810cebe:	687b      	ldr	r3, [r7, #4]
 810cec0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810cec4:	3b01      	subs	r3, #1
 810cec6:	009b      	lsls	r3, r3, #2
 810cec8:	4413      	add	r3, r2
 810ceca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810cecc:	69bb      	ldr	r3, [r7, #24]
 810cece:	f023 0307 	bic.w	r3, r3, #7
 810ced2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810ced4:	69bb      	ldr	r3, [r7, #24]
 810ced6:	f003 0307 	and.w	r3, r3, #7
 810ceda:	2b00      	cmp	r3, #0
 810cedc:	d00b      	beq.n	810cef6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810cede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cee2:	f383 8811 	msr	BASEPRI, r3
 810cee6:	f3bf 8f6f 	isb	sy
 810ceea:	f3bf 8f4f 	dsb	sy
 810ceee:	617b      	str	r3, [r7, #20]
}
 810cef0:	bf00      	nop
 810cef2:	bf00      	nop
 810cef4:	e7fd      	b.n	810cef2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810cef6:	68bb      	ldr	r3, [r7, #8]
 810cef8:	2b00      	cmp	r3, #0
 810cefa:	d01f      	beq.n	810cf3c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810cefc:	2300      	movs	r3, #0
 810cefe:	61fb      	str	r3, [r7, #28]
 810cf00:	e012      	b.n	810cf28 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810cf02:	68ba      	ldr	r2, [r7, #8]
 810cf04:	69fb      	ldr	r3, [r7, #28]
 810cf06:	4413      	add	r3, r2
 810cf08:	7819      	ldrb	r1, [r3, #0]
 810cf0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810cf0c:	69fb      	ldr	r3, [r7, #28]
 810cf0e:	4413      	add	r3, r2
 810cf10:	3334      	adds	r3, #52	@ 0x34
 810cf12:	460a      	mov	r2, r1
 810cf14:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810cf16:	68ba      	ldr	r2, [r7, #8]
 810cf18:	69fb      	ldr	r3, [r7, #28]
 810cf1a:	4413      	add	r3, r2
 810cf1c:	781b      	ldrb	r3, [r3, #0]
 810cf1e:	2b00      	cmp	r3, #0
 810cf20:	d006      	beq.n	810cf30 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810cf22:	69fb      	ldr	r3, [r7, #28]
 810cf24:	3301      	adds	r3, #1
 810cf26:	61fb      	str	r3, [r7, #28]
 810cf28:	69fb      	ldr	r3, [r7, #28]
 810cf2a:	2b0f      	cmp	r3, #15
 810cf2c:	d9e9      	bls.n	810cf02 <prvInitialiseNewTask+0x66>
 810cf2e:	e000      	b.n	810cf32 <prvInitialiseNewTask+0x96>
			{
				break;
 810cf30:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810cf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf34:	2200      	movs	r2, #0
 810cf36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810cf3a:	e003      	b.n	810cf44 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810cf3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf3e:	2200      	movs	r2, #0
 810cf40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810cf44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cf46:	2b37      	cmp	r3, #55	@ 0x37
 810cf48:	d901      	bls.n	810cf4e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810cf4a:	2337      	movs	r3, #55	@ 0x37
 810cf4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810cf4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810cf52:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810cf54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810cf58:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810cf5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf5c:	2200      	movs	r2, #0
 810cf5e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810cf60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf62:	3304      	adds	r3, #4
 810cf64:	4618      	mov	r0, r3
 810cf66:	f7fe ff11 	bl	810bd8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810cf6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf6c:	3318      	adds	r3, #24
 810cf6e:	4618      	mov	r0, r3
 810cf70:	f7fe ff0c 	bl	810bd8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810cf74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810cf78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810cf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cf7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810cf80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810cf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810cf88:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810cf8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf8c:	2200      	movs	r2, #0
 810cf8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810cf92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf94:	2200      	movs	r2, #0
 810cf96:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810cf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf9c:	3354      	adds	r3, #84	@ 0x54
 810cf9e:	224c      	movs	r2, #76	@ 0x4c
 810cfa0:	2100      	movs	r1, #0
 810cfa2:	4618      	mov	r0, r3
 810cfa4:	f002 fb42 	bl	810f62c <memset>
 810cfa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cfaa:	4a0d      	ldr	r2, [pc, #52]	@ (810cfe0 <prvInitialiseNewTask+0x144>)
 810cfac:	659a      	str	r2, [r3, #88]	@ 0x58
 810cfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cfb0:	4a0c      	ldr	r2, [pc, #48]	@ (810cfe4 <prvInitialiseNewTask+0x148>)
 810cfb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 810cfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cfb6:	4a0c      	ldr	r2, [pc, #48]	@ (810cfe8 <prvInitialiseNewTask+0x14c>)
 810cfb8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810cfba:	683a      	ldr	r2, [r7, #0]
 810cfbc:	68f9      	ldr	r1, [r7, #12]
 810cfbe:	69b8      	ldr	r0, [r7, #24]
 810cfc0:	f7fe ff78 	bl	810beb4 <pxPortInitialiseStack>
 810cfc4:	4602      	mov	r2, r0
 810cfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cfc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810cfca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cfcc:	2b00      	cmp	r3, #0
 810cfce:	d002      	beq.n	810cfd6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810cfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cfd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810cfd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810cfd6:	bf00      	nop
 810cfd8:	3720      	adds	r7, #32
 810cfda:	46bd      	mov	sp, r7
 810cfdc:	bd80      	pop	{r7, pc}
 810cfde:	bf00      	nop
 810cfe0:	10005014 	.word	0x10005014
 810cfe4:	1000507c 	.word	0x1000507c
 810cfe8:	100050e4 	.word	0x100050e4

0810cfec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810cfec:	b580      	push	{r7, lr}
 810cfee:	b082      	sub	sp, #8
 810cff0:	af00      	add	r7, sp, #0
 810cff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810cff4:	f7ff f890 	bl	810c118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810cff8:	4b2d      	ldr	r3, [pc, #180]	@ (810d0b0 <prvAddNewTaskToReadyList+0xc4>)
 810cffa:	681b      	ldr	r3, [r3, #0]
 810cffc:	3301      	adds	r3, #1
 810cffe:	4a2c      	ldr	r2, [pc, #176]	@ (810d0b0 <prvAddNewTaskToReadyList+0xc4>)
 810d000:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810d002:	4b2c      	ldr	r3, [pc, #176]	@ (810d0b4 <prvAddNewTaskToReadyList+0xc8>)
 810d004:	681b      	ldr	r3, [r3, #0]
 810d006:	2b00      	cmp	r3, #0
 810d008:	d109      	bne.n	810d01e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810d00a:	4a2a      	ldr	r2, [pc, #168]	@ (810d0b4 <prvAddNewTaskToReadyList+0xc8>)
 810d00c:	687b      	ldr	r3, [r7, #4]
 810d00e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810d010:	4b27      	ldr	r3, [pc, #156]	@ (810d0b0 <prvAddNewTaskToReadyList+0xc4>)
 810d012:	681b      	ldr	r3, [r3, #0]
 810d014:	2b01      	cmp	r3, #1
 810d016:	d110      	bne.n	810d03a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810d018:	f000 fc2e 	bl	810d878 <prvInitialiseTaskLists>
 810d01c:	e00d      	b.n	810d03a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810d01e:	4b26      	ldr	r3, [pc, #152]	@ (810d0b8 <prvAddNewTaskToReadyList+0xcc>)
 810d020:	681b      	ldr	r3, [r3, #0]
 810d022:	2b00      	cmp	r3, #0
 810d024:	d109      	bne.n	810d03a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810d026:	4b23      	ldr	r3, [pc, #140]	@ (810d0b4 <prvAddNewTaskToReadyList+0xc8>)
 810d028:	681b      	ldr	r3, [r3, #0]
 810d02a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d02c:	687b      	ldr	r3, [r7, #4]
 810d02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d030:	429a      	cmp	r2, r3
 810d032:	d802      	bhi.n	810d03a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810d034:	4a1f      	ldr	r2, [pc, #124]	@ (810d0b4 <prvAddNewTaskToReadyList+0xc8>)
 810d036:	687b      	ldr	r3, [r7, #4]
 810d038:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810d03a:	4b20      	ldr	r3, [pc, #128]	@ (810d0bc <prvAddNewTaskToReadyList+0xd0>)
 810d03c:	681b      	ldr	r3, [r3, #0]
 810d03e:	3301      	adds	r3, #1
 810d040:	4a1e      	ldr	r2, [pc, #120]	@ (810d0bc <prvAddNewTaskToReadyList+0xd0>)
 810d042:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810d044:	4b1d      	ldr	r3, [pc, #116]	@ (810d0bc <prvAddNewTaskToReadyList+0xd0>)
 810d046:	681a      	ldr	r2, [r3, #0]
 810d048:	687b      	ldr	r3, [r7, #4]
 810d04a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810d04c:	687b      	ldr	r3, [r7, #4]
 810d04e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d050:	4b1b      	ldr	r3, [pc, #108]	@ (810d0c0 <prvAddNewTaskToReadyList+0xd4>)
 810d052:	681b      	ldr	r3, [r3, #0]
 810d054:	429a      	cmp	r2, r3
 810d056:	d903      	bls.n	810d060 <prvAddNewTaskToReadyList+0x74>
 810d058:	687b      	ldr	r3, [r7, #4]
 810d05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d05c:	4a18      	ldr	r2, [pc, #96]	@ (810d0c0 <prvAddNewTaskToReadyList+0xd4>)
 810d05e:	6013      	str	r3, [r2, #0]
 810d060:	687b      	ldr	r3, [r7, #4]
 810d062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d064:	4613      	mov	r3, r2
 810d066:	009b      	lsls	r3, r3, #2
 810d068:	4413      	add	r3, r2
 810d06a:	009b      	lsls	r3, r3, #2
 810d06c:	4a15      	ldr	r2, [pc, #84]	@ (810d0c4 <prvAddNewTaskToReadyList+0xd8>)
 810d06e:	441a      	add	r2, r3
 810d070:	687b      	ldr	r3, [r7, #4]
 810d072:	3304      	adds	r3, #4
 810d074:	4619      	mov	r1, r3
 810d076:	4610      	mov	r0, r2
 810d078:	f7fe fe95 	bl	810bda6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810d07c:	f7ff f87e 	bl	810c17c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810d080:	4b0d      	ldr	r3, [pc, #52]	@ (810d0b8 <prvAddNewTaskToReadyList+0xcc>)
 810d082:	681b      	ldr	r3, [r3, #0]
 810d084:	2b00      	cmp	r3, #0
 810d086:	d00e      	beq.n	810d0a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810d088:	4b0a      	ldr	r3, [pc, #40]	@ (810d0b4 <prvAddNewTaskToReadyList+0xc8>)
 810d08a:	681b      	ldr	r3, [r3, #0]
 810d08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d08e:	687b      	ldr	r3, [r7, #4]
 810d090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d092:	429a      	cmp	r2, r3
 810d094:	d207      	bcs.n	810d0a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810d096:	4b0c      	ldr	r3, [pc, #48]	@ (810d0c8 <prvAddNewTaskToReadyList+0xdc>)
 810d098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d09c:	601a      	str	r2, [r3, #0]
 810d09e:	f3bf 8f4f 	dsb	sy
 810d0a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810d0a6:	bf00      	nop
 810d0a8:	3708      	adds	r7, #8
 810d0aa:	46bd      	mov	sp, r7
 810d0ac:	bd80      	pop	{r7, pc}
 810d0ae:	bf00      	nop
 810d0b0:	10004ea8 	.word	0x10004ea8
 810d0b4:	100049d4 	.word	0x100049d4
 810d0b8:	10004eb4 	.word	0x10004eb4
 810d0bc:	10004ec4 	.word	0x10004ec4
 810d0c0:	10004eb0 	.word	0x10004eb0
 810d0c4:	100049d8 	.word	0x100049d8
 810d0c8:	e000ed04 	.word	0xe000ed04

0810d0cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810d0cc:	b580      	push	{r7, lr}
 810d0ce:	b084      	sub	sp, #16
 810d0d0:	af00      	add	r7, sp, #0
 810d0d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810d0d4:	2300      	movs	r3, #0
 810d0d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810d0d8:	687b      	ldr	r3, [r7, #4]
 810d0da:	2b00      	cmp	r3, #0
 810d0dc:	d018      	beq.n	810d110 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810d0de:	4b14      	ldr	r3, [pc, #80]	@ (810d130 <vTaskDelay+0x64>)
 810d0e0:	681b      	ldr	r3, [r3, #0]
 810d0e2:	2b00      	cmp	r3, #0
 810d0e4:	d00b      	beq.n	810d0fe <vTaskDelay+0x32>
	__asm volatile
 810d0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d0ea:	f383 8811 	msr	BASEPRI, r3
 810d0ee:	f3bf 8f6f 	isb	sy
 810d0f2:	f3bf 8f4f 	dsb	sy
 810d0f6:	60bb      	str	r3, [r7, #8]
}
 810d0f8:	bf00      	nop
 810d0fa:	bf00      	nop
 810d0fc:	e7fd      	b.n	810d0fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810d0fe:	f000 f88b 	bl	810d218 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810d102:	2100      	movs	r1, #0
 810d104:	6878      	ldr	r0, [r7, #4]
 810d106:	f000 fd09 	bl	810db1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810d10a:	f000 f893 	bl	810d234 <xTaskResumeAll>
 810d10e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810d110:	68fb      	ldr	r3, [r7, #12]
 810d112:	2b00      	cmp	r3, #0
 810d114:	d107      	bne.n	810d126 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810d116:	4b07      	ldr	r3, [pc, #28]	@ (810d134 <vTaskDelay+0x68>)
 810d118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d11c:	601a      	str	r2, [r3, #0]
 810d11e:	f3bf 8f4f 	dsb	sy
 810d122:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810d126:	bf00      	nop
 810d128:	3710      	adds	r7, #16
 810d12a:	46bd      	mov	sp, r7
 810d12c:	bd80      	pop	{r7, pc}
 810d12e:	bf00      	nop
 810d130:	10004ed0 	.word	0x10004ed0
 810d134:	e000ed04 	.word	0xe000ed04

0810d138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810d138:	b580      	push	{r7, lr}
 810d13a:	b08a      	sub	sp, #40	@ 0x28
 810d13c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810d13e:	2300      	movs	r3, #0
 810d140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810d142:	2300      	movs	r3, #0
 810d144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810d146:	463a      	mov	r2, r7
 810d148:	1d39      	adds	r1, r7, #4
 810d14a:	f107 0308 	add.w	r3, r7, #8
 810d14e:	4618      	mov	r0, r3
 810d150:	f7fe fbce 	bl	810b8f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810d154:	6839      	ldr	r1, [r7, #0]
 810d156:	687b      	ldr	r3, [r7, #4]
 810d158:	68ba      	ldr	r2, [r7, #8]
 810d15a:	9202      	str	r2, [sp, #8]
 810d15c:	9301      	str	r3, [sp, #4]
 810d15e:	2300      	movs	r3, #0
 810d160:	9300      	str	r3, [sp, #0]
 810d162:	2300      	movs	r3, #0
 810d164:	460a      	mov	r2, r1
 810d166:	4924      	ldr	r1, [pc, #144]	@ (810d1f8 <vTaskStartScheduler+0xc0>)
 810d168:	4824      	ldr	r0, [pc, #144]	@ (810d1fc <vTaskStartScheduler+0xc4>)
 810d16a:	f7ff fdf1 	bl	810cd50 <xTaskCreateStatic>
 810d16e:	4603      	mov	r3, r0
 810d170:	4a23      	ldr	r2, [pc, #140]	@ (810d200 <vTaskStartScheduler+0xc8>)
 810d172:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810d174:	4b22      	ldr	r3, [pc, #136]	@ (810d200 <vTaskStartScheduler+0xc8>)
 810d176:	681b      	ldr	r3, [r3, #0]
 810d178:	2b00      	cmp	r3, #0
 810d17a:	d002      	beq.n	810d182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810d17c:	2301      	movs	r3, #1
 810d17e:	617b      	str	r3, [r7, #20]
 810d180:	e001      	b.n	810d186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810d182:	2300      	movs	r3, #0
 810d184:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810d186:	697b      	ldr	r3, [r7, #20]
 810d188:	2b01      	cmp	r3, #1
 810d18a:	d102      	bne.n	810d192 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810d18c:	f000 fd1a 	bl	810dbc4 <xTimerCreateTimerTask>
 810d190:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810d192:	697b      	ldr	r3, [r7, #20]
 810d194:	2b01      	cmp	r3, #1
 810d196:	d11b      	bne.n	810d1d0 <vTaskStartScheduler+0x98>
	__asm volatile
 810d198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d19c:	f383 8811 	msr	BASEPRI, r3
 810d1a0:	f3bf 8f6f 	isb	sy
 810d1a4:	f3bf 8f4f 	dsb	sy
 810d1a8:	613b      	str	r3, [r7, #16]
}
 810d1aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810d1ac:	4b15      	ldr	r3, [pc, #84]	@ (810d204 <vTaskStartScheduler+0xcc>)
 810d1ae:	681b      	ldr	r3, [r3, #0]
 810d1b0:	3354      	adds	r3, #84	@ 0x54
 810d1b2:	4a15      	ldr	r2, [pc, #84]	@ (810d208 <vTaskStartScheduler+0xd0>)
 810d1b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810d1b6:	4b15      	ldr	r3, [pc, #84]	@ (810d20c <vTaskStartScheduler+0xd4>)
 810d1b8:	f04f 32ff 	mov.w	r2, #4294967295
 810d1bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810d1be:	4b14      	ldr	r3, [pc, #80]	@ (810d210 <vTaskStartScheduler+0xd8>)
 810d1c0:	2201      	movs	r2, #1
 810d1c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810d1c4:	4b13      	ldr	r3, [pc, #76]	@ (810d214 <vTaskStartScheduler+0xdc>)
 810d1c6:	2200      	movs	r2, #0
 810d1c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810d1ca:	f7fe ff01 	bl	810bfd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810d1ce:	e00f      	b.n	810d1f0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810d1d0:	697b      	ldr	r3, [r7, #20]
 810d1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d1d6:	d10b      	bne.n	810d1f0 <vTaskStartScheduler+0xb8>
	__asm volatile
 810d1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d1dc:	f383 8811 	msr	BASEPRI, r3
 810d1e0:	f3bf 8f6f 	isb	sy
 810d1e4:	f3bf 8f4f 	dsb	sy
 810d1e8:	60fb      	str	r3, [r7, #12]
}
 810d1ea:	bf00      	nop
 810d1ec:	bf00      	nop
 810d1ee:	e7fd      	b.n	810d1ec <vTaskStartScheduler+0xb4>
}
 810d1f0:	bf00      	nop
 810d1f2:	3718      	adds	r7, #24
 810d1f4:	46bd      	mov	sp, r7
 810d1f6:	bd80      	pop	{r7, pc}
 810d1f8:	08111618 	.word	0x08111618
 810d1fc:	0810d849 	.word	0x0810d849
 810d200:	10004ecc 	.word	0x10004ecc
 810d204:	100049d4 	.word	0x100049d4
 810d208:	10000020 	.word	0x10000020
 810d20c:	10004ec8 	.word	0x10004ec8
 810d210:	10004eb4 	.word	0x10004eb4
 810d214:	10004eac 	.word	0x10004eac

0810d218 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810d218:	b480      	push	{r7}
 810d21a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810d21c:	4b04      	ldr	r3, [pc, #16]	@ (810d230 <vTaskSuspendAll+0x18>)
 810d21e:	681b      	ldr	r3, [r3, #0]
 810d220:	3301      	adds	r3, #1
 810d222:	4a03      	ldr	r2, [pc, #12]	@ (810d230 <vTaskSuspendAll+0x18>)
 810d224:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810d226:	bf00      	nop
 810d228:	46bd      	mov	sp, r7
 810d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d22e:	4770      	bx	lr
 810d230:	10004ed0 	.word	0x10004ed0

0810d234 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810d234:	b580      	push	{r7, lr}
 810d236:	b084      	sub	sp, #16
 810d238:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810d23a:	2300      	movs	r3, #0
 810d23c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810d23e:	2300      	movs	r3, #0
 810d240:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810d242:	4b42      	ldr	r3, [pc, #264]	@ (810d34c <xTaskResumeAll+0x118>)
 810d244:	681b      	ldr	r3, [r3, #0]
 810d246:	2b00      	cmp	r3, #0
 810d248:	d10b      	bne.n	810d262 <xTaskResumeAll+0x2e>
	__asm volatile
 810d24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d24e:	f383 8811 	msr	BASEPRI, r3
 810d252:	f3bf 8f6f 	isb	sy
 810d256:	f3bf 8f4f 	dsb	sy
 810d25a:	603b      	str	r3, [r7, #0]
}
 810d25c:	bf00      	nop
 810d25e:	bf00      	nop
 810d260:	e7fd      	b.n	810d25e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810d262:	f7fe ff59 	bl	810c118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810d266:	4b39      	ldr	r3, [pc, #228]	@ (810d34c <xTaskResumeAll+0x118>)
 810d268:	681b      	ldr	r3, [r3, #0]
 810d26a:	3b01      	subs	r3, #1
 810d26c:	4a37      	ldr	r2, [pc, #220]	@ (810d34c <xTaskResumeAll+0x118>)
 810d26e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810d270:	4b36      	ldr	r3, [pc, #216]	@ (810d34c <xTaskResumeAll+0x118>)
 810d272:	681b      	ldr	r3, [r3, #0]
 810d274:	2b00      	cmp	r3, #0
 810d276:	d162      	bne.n	810d33e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810d278:	4b35      	ldr	r3, [pc, #212]	@ (810d350 <xTaskResumeAll+0x11c>)
 810d27a:	681b      	ldr	r3, [r3, #0]
 810d27c:	2b00      	cmp	r3, #0
 810d27e:	d05e      	beq.n	810d33e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810d280:	e02f      	b.n	810d2e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810d282:	4b34      	ldr	r3, [pc, #208]	@ (810d354 <xTaskResumeAll+0x120>)
 810d284:	68db      	ldr	r3, [r3, #12]
 810d286:	68db      	ldr	r3, [r3, #12]
 810d288:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810d28a:	68fb      	ldr	r3, [r7, #12]
 810d28c:	3318      	adds	r3, #24
 810d28e:	4618      	mov	r0, r3
 810d290:	f7fe fde6 	bl	810be60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810d294:	68fb      	ldr	r3, [r7, #12]
 810d296:	3304      	adds	r3, #4
 810d298:	4618      	mov	r0, r3
 810d29a:	f7fe fde1 	bl	810be60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810d29e:	68fb      	ldr	r3, [r7, #12]
 810d2a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d2a2:	4b2d      	ldr	r3, [pc, #180]	@ (810d358 <xTaskResumeAll+0x124>)
 810d2a4:	681b      	ldr	r3, [r3, #0]
 810d2a6:	429a      	cmp	r2, r3
 810d2a8:	d903      	bls.n	810d2b2 <xTaskResumeAll+0x7e>
 810d2aa:	68fb      	ldr	r3, [r7, #12]
 810d2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d2ae:	4a2a      	ldr	r2, [pc, #168]	@ (810d358 <xTaskResumeAll+0x124>)
 810d2b0:	6013      	str	r3, [r2, #0]
 810d2b2:	68fb      	ldr	r3, [r7, #12]
 810d2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d2b6:	4613      	mov	r3, r2
 810d2b8:	009b      	lsls	r3, r3, #2
 810d2ba:	4413      	add	r3, r2
 810d2bc:	009b      	lsls	r3, r3, #2
 810d2be:	4a27      	ldr	r2, [pc, #156]	@ (810d35c <xTaskResumeAll+0x128>)
 810d2c0:	441a      	add	r2, r3
 810d2c2:	68fb      	ldr	r3, [r7, #12]
 810d2c4:	3304      	adds	r3, #4
 810d2c6:	4619      	mov	r1, r3
 810d2c8:	4610      	mov	r0, r2
 810d2ca:	f7fe fd6c 	bl	810bda6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810d2ce:	68fb      	ldr	r3, [r7, #12]
 810d2d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d2d2:	4b23      	ldr	r3, [pc, #140]	@ (810d360 <xTaskResumeAll+0x12c>)
 810d2d4:	681b      	ldr	r3, [r3, #0]
 810d2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d2d8:	429a      	cmp	r2, r3
 810d2da:	d302      	bcc.n	810d2e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810d2dc:	4b21      	ldr	r3, [pc, #132]	@ (810d364 <xTaskResumeAll+0x130>)
 810d2de:	2201      	movs	r2, #1
 810d2e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810d2e2:	4b1c      	ldr	r3, [pc, #112]	@ (810d354 <xTaskResumeAll+0x120>)
 810d2e4:	681b      	ldr	r3, [r3, #0]
 810d2e6:	2b00      	cmp	r3, #0
 810d2e8:	d1cb      	bne.n	810d282 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810d2ea:	68fb      	ldr	r3, [r7, #12]
 810d2ec:	2b00      	cmp	r3, #0
 810d2ee:	d001      	beq.n	810d2f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810d2f0:	f000 fb66 	bl	810d9c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810d2f4:	4b1c      	ldr	r3, [pc, #112]	@ (810d368 <xTaskResumeAll+0x134>)
 810d2f6:	681b      	ldr	r3, [r3, #0]
 810d2f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810d2fa:	687b      	ldr	r3, [r7, #4]
 810d2fc:	2b00      	cmp	r3, #0
 810d2fe:	d010      	beq.n	810d322 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810d300:	f000 f846 	bl	810d390 <xTaskIncrementTick>
 810d304:	4603      	mov	r3, r0
 810d306:	2b00      	cmp	r3, #0
 810d308:	d002      	beq.n	810d310 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810d30a:	4b16      	ldr	r3, [pc, #88]	@ (810d364 <xTaskResumeAll+0x130>)
 810d30c:	2201      	movs	r2, #1
 810d30e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810d310:	687b      	ldr	r3, [r7, #4]
 810d312:	3b01      	subs	r3, #1
 810d314:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810d316:	687b      	ldr	r3, [r7, #4]
 810d318:	2b00      	cmp	r3, #0
 810d31a:	d1f1      	bne.n	810d300 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810d31c:	4b12      	ldr	r3, [pc, #72]	@ (810d368 <xTaskResumeAll+0x134>)
 810d31e:	2200      	movs	r2, #0
 810d320:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810d322:	4b10      	ldr	r3, [pc, #64]	@ (810d364 <xTaskResumeAll+0x130>)
 810d324:	681b      	ldr	r3, [r3, #0]
 810d326:	2b00      	cmp	r3, #0
 810d328:	d009      	beq.n	810d33e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810d32a:	2301      	movs	r3, #1
 810d32c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810d32e:	4b0f      	ldr	r3, [pc, #60]	@ (810d36c <xTaskResumeAll+0x138>)
 810d330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d334:	601a      	str	r2, [r3, #0]
 810d336:	f3bf 8f4f 	dsb	sy
 810d33a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810d33e:	f7fe ff1d 	bl	810c17c <vPortExitCritical>

	return xAlreadyYielded;
 810d342:	68bb      	ldr	r3, [r7, #8]
}
 810d344:	4618      	mov	r0, r3
 810d346:	3710      	adds	r7, #16
 810d348:	46bd      	mov	sp, r7
 810d34a:	bd80      	pop	{r7, pc}
 810d34c:	10004ed0 	.word	0x10004ed0
 810d350:	10004ea8 	.word	0x10004ea8
 810d354:	10004e68 	.word	0x10004e68
 810d358:	10004eb0 	.word	0x10004eb0
 810d35c:	100049d8 	.word	0x100049d8
 810d360:	100049d4 	.word	0x100049d4
 810d364:	10004ebc 	.word	0x10004ebc
 810d368:	10004eb8 	.word	0x10004eb8
 810d36c:	e000ed04 	.word	0xe000ed04

0810d370 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810d370:	b480      	push	{r7}
 810d372:	b083      	sub	sp, #12
 810d374:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810d376:	4b05      	ldr	r3, [pc, #20]	@ (810d38c <xTaskGetTickCount+0x1c>)
 810d378:	681b      	ldr	r3, [r3, #0]
 810d37a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810d37c:	687b      	ldr	r3, [r7, #4]
}
 810d37e:	4618      	mov	r0, r3
 810d380:	370c      	adds	r7, #12
 810d382:	46bd      	mov	sp, r7
 810d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d388:	4770      	bx	lr
 810d38a:	bf00      	nop
 810d38c:	10004eac 	.word	0x10004eac

0810d390 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810d390:	b580      	push	{r7, lr}
 810d392:	b086      	sub	sp, #24
 810d394:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810d396:	2300      	movs	r3, #0
 810d398:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810d39a:	4b4f      	ldr	r3, [pc, #316]	@ (810d4d8 <xTaskIncrementTick+0x148>)
 810d39c:	681b      	ldr	r3, [r3, #0]
 810d39e:	2b00      	cmp	r3, #0
 810d3a0:	f040 8090 	bne.w	810d4c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810d3a4:	4b4d      	ldr	r3, [pc, #308]	@ (810d4dc <xTaskIncrementTick+0x14c>)
 810d3a6:	681b      	ldr	r3, [r3, #0]
 810d3a8:	3301      	adds	r3, #1
 810d3aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810d3ac:	4a4b      	ldr	r2, [pc, #300]	@ (810d4dc <xTaskIncrementTick+0x14c>)
 810d3ae:	693b      	ldr	r3, [r7, #16]
 810d3b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810d3b2:	693b      	ldr	r3, [r7, #16]
 810d3b4:	2b00      	cmp	r3, #0
 810d3b6:	d121      	bne.n	810d3fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810d3b8:	4b49      	ldr	r3, [pc, #292]	@ (810d4e0 <xTaskIncrementTick+0x150>)
 810d3ba:	681b      	ldr	r3, [r3, #0]
 810d3bc:	681b      	ldr	r3, [r3, #0]
 810d3be:	2b00      	cmp	r3, #0
 810d3c0:	d00b      	beq.n	810d3da <xTaskIncrementTick+0x4a>
	__asm volatile
 810d3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d3c6:	f383 8811 	msr	BASEPRI, r3
 810d3ca:	f3bf 8f6f 	isb	sy
 810d3ce:	f3bf 8f4f 	dsb	sy
 810d3d2:	603b      	str	r3, [r7, #0]
}
 810d3d4:	bf00      	nop
 810d3d6:	bf00      	nop
 810d3d8:	e7fd      	b.n	810d3d6 <xTaskIncrementTick+0x46>
 810d3da:	4b41      	ldr	r3, [pc, #260]	@ (810d4e0 <xTaskIncrementTick+0x150>)
 810d3dc:	681b      	ldr	r3, [r3, #0]
 810d3de:	60fb      	str	r3, [r7, #12]
 810d3e0:	4b40      	ldr	r3, [pc, #256]	@ (810d4e4 <xTaskIncrementTick+0x154>)
 810d3e2:	681b      	ldr	r3, [r3, #0]
 810d3e4:	4a3e      	ldr	r2, [pc, #248]	@ (810d4e0 <xTaskIncrementTick+0x150>)
 810d3e6:	6013      	str	r3, [r2, #0]
 810d3e8:	4a3e      	ldr	r2, [pc, #248]	@ (810d4e4 <xTaskIncrementTick+0x154>)
 810d3ea:	68fb      	ldr	r3, [r7, #12]
 810d3ec:	6013      	str	r3, [r2, #0]
 810d3ee:	4b3e      	ldr	r3, [pc, #248]	@ (810d4e8 <xTaskIncrementTick+0x158>)
 810d3f0:	681b      	ldr	r3, [r3, #0]
 810d3f2:	3301      	adds	r3, #1
 810d3f4:	4a3c      	ldr	r2, [pc, #240]	@ (810d4e8 <xTaskIncrementTick+0x158>)
 810d3f6:	6013      	str	r3, [r2, #0]
 810d3f8:	f000 fae2 	bl	810d9c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810d3fc:	4b3b      	ldr	r3, [pc, #236]	@ (810d4ec <xTaskIncrementTick+0x15c>)
 810d3fe:	681b      	ldr	r3, [r3, #0]
 810d400:	693a      	ldr	r2, [r7, #16]
 810d402:	429a      	cmp	r2, r3
 810d404:	d349      	bcc.n	810d49a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810d406:	4b36      	ldr	r3, [pc, #216]	@ (810d4e0 <xTaskIncrementTick+0x150>)
 810d408:	681b      	ldr	r3, [r3, #0]
 810d40a:	681b      	ldr	r3, [r3, #0]
 810d40c:	2b00      	cmp	r3, #0
 810d40e:	d104      	bne.n	810d41a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810d410:	4b36      	ldr	r3, [pc, #216]	@ (810d4ec <xTaskIncrementTick+0x15c>)
 810d412:	f04f 32ff 	mov.w	r2, #4294967295
 810d416:	601a      	str	r2, [r3, #0]
					break;
 810d418:	e03f      	b.n	810d49a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810d41a:	4b31      	ldr	r3, [pc, #196]	@ (810d4e0 <xTaskIncrementTick+0x150>)
 810d41c:	681b      	ldr	r3, [r3, #0]
 810d41e:	68db      	ldr	r3, [r3, #12]
 810d420:	68db      	ldr	r3, [r3, #12]
 810d422:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810d424:	68bb      	ldr	r3, [r7, #8]
 810d426:	685b      	ldr	r3, [r3, #4]
 810d428:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810d42a:	693a      	ldr	r2, [r7, #16]
 810d42c:	687b      	ldr	r3, [r7, #4]
 810d42e:	429a      	cmp	r2, r3
 810d430:	d203      	bcs.n	810d43a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810d432:	4a2e      	ldr	r2, [pc, #184]	@ (810d4ec <xTaskIncrementTick+0x15c>)
 810d434:	687b      	ldr	r3, [r7, #4]
 810d436:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810d438:	e02f      	b.n	810d49a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810d43a:	68bb      	ldr	r3, [r7, #8]
 810d43c:	3304      	adds	r3, #4
 810d43e:	4618      	mov	r0, r3
 810d440:	f7fe fd0e 	bl	810be60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810d444:	68bb      	ldr	r3, [r7, #8]
 810d446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d448:	2b00      	cmp	r3, #0
 810d44a:	d004      	beq.n	810d456 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810d44c:	68bb      	ldr	r3, [r7, #8]
 810d44e:	3318      	adds	r3, #24
 810d450:	4618      	mov	r0, r3
 810d452:	f7fe fd05 	bl	810be60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810d456:	68bb      	ldr	r3, [r7, #8]
 810d458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d45a:	4b25      	ldr	r3, [pc, #148]	@ (810d4f0 <xTaskIncrementTick+0x160>)
 810d45c:	681b      	ldr	r3, [r3, #0]
 810d45e:	429a      	cmp	r2, r3
 810d460:	d903      	bls.n	810d46a <xTaskIncrementTick+0xda>
 810d462:	68bb      	ldr	r3, [r7, #8]
 810d464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d466:	4a22      	ldr	r2, [pc, #136]	@ (810d4f0 <xTaskIncrementTick+0x160>)
 810d468:	6013      	str	r3, [r2, #0]
 810d46a:	68bb      	ldr	r3, [r7, #8]
 810d46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d46e:	4613      	mov	r3, r2
 810d470:	009b      	lsls	r3, r3, #2
 810d472:	4413      	add	r3, r2
 810d474:	009b      	lsls	r3, r3, #2
 810d476:	4a1f      	ldr	r2, [pc, #124]	@ (810d4f4 <xTaskIncrementTick+0x164>)
 810d478:	441a      	add	r2, r3
 810d47a:	68bb      	ldr	r3, [r7, #8]
 810d47c:	3304      	adds	r3, #4
 810d47e:	4619      	mov	r1, r3
 810d480:	4610      	mov	r0, r2
 810d482:	f7fe fc90 	bl	810bda6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810d486:	68bb      	ldr	r3, [r7, #8]
 810d488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d48a:	4b1b      	ldr	r3, [pc, #108]	@ (810d4f8 <xTaskIncrementTick+0x168>)
 810d48c:	681b      	ldr	r3, [r3, #0]
 810d48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d490:	429a      	cmp	r2, r3
 810d492:	d3b8      	bcc.n	810d406 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810d494:	2301      	movs	r3, #1
 810d496:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810d498:	e7b5      	b.n	810d406 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810d49a:	4b17      	ldr	r3, [pc, #92]	@ (810d4f8 <xTaskIncrementTick+0x168>)
 810d49c:	681b      	ldr	r3, [r3, #0]
 810d49e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d4a0:	4914      	ldr	r1, [pc, #80]	@ (810d4f4 <xTaskIncrementTick+0x164>)
 810d4a2:	4613      	mov	r3, r2
 810d4a4:	009b      	lsls	r3, r3, #2
 810d4a6:	4413      	add	r3, r2
 810d4a8:	009b      	lsls	r3, r3, #2
 810d4aa:	440b      	add	r3, r1
 810d4ac:	681b      	ldr	r3, [r3, #0]
 810d4ae:	2b01      	cmp	r3, #1
 810d4b0:	d901      	bls.n	810d4b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810d4b2:	2301      	movs	r3, #1
 810d4b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810d4b6:	4b11      	ldr	r3, [pc, #68]	@ (810d4fc <xTaskIncrementTick+0x16c>)
 810d4b8:	681b      	ldr	r3, [r3, #0]
 810d4ba:	2b00      	cmp	r3, #0
 810d4bc:	d007      	beq.n	810d4ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810d4be:	2301      	movs	r3, #1
 810d4c0:	617b      	str	r3, [r7, #20]
 810d4c2:	e004      	b.n	810d4ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810d4c4:	4b0e      	ldr	r3, [pc, #56]	@ (810d500 <xTaskIncrementTick+0x170>)
 810d4c6:	681b      	ldr	r3, [r3, #0]
 810d4c8:	3301      	adds	r3, #1
 810d4ca:	4a0d      	ldr	r2, [pc, #52]	@ (810d500 <xTaskIncrementTick+0x170>)
 810d4cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810d4ce:	697b      	ldr	r3, [r7, #20]
}
 810d4d0:	4618      	mov	r0, r3
 810d4d2:	3718      	adds	r7, #24
 810d4d4:	46bd      	mov	sp, r7
 810d4d6:	bd80      	pop	{r7, pc}
 810d4d8:	10004ed0 	.word	0x10004ed0
 810d4dc:	10004eac 	.word	0x10004eac
 810d4e0:	10004e60 	.word	0x10004e60
 810d4e4:	10004e64 	.word	0x10004e64
 810d4e8:	10004ec0 	.word	0x10004ec0
 810d4ec:	10004ec8 	.word	0x10004ec8
 810d4f0:	10004eb0 	.word	0x10004eb0
 810d4f4:	100049d8 	.word	0x100049d8
 810d4f8:	100049d4 	.word	0x100049d4
 810d4fc:	10004ebc 	.word	0x10004ebc
 810d500:	10004eb8 	.word	0x10004eb8

0810d504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810d504:	b480      	push	{r7}
 810d506:	b085      	sub	sp, #20
 810d508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810d50a:	4b2b      	ldr	r3, [pc, #172]	@ (810d5b8 <vTaskSwitchContext+0xb4>)
 810d50c:	681b      	ldr	r3, [r3, #0]
 810d50e:	2b00      	cmp	r3, #0
 810d510:	d003      	beq.n	810d51a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810d512:	4b2a      	ldr	r3, [pc, #168]	@ (810d5bc <vTaskSwitchContext+0xb8>)
 810d514:	2201      	movs	r2, #1
 810d516:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810d518:	e047      	b.n	810d5aa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 810d51a:	4b28      	ldr	r3, [pc, #160]	@ (810d5bc <vTaskSwitchContext+0xb8>)
 810d51c:	2200      	movs	r2, #0
 810d51e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810d520:	4b27      	ldr	r3, [pc, #156]	@ (810d5c0 <vTaskSwitchContext+0xbc>)
 810d522:	681b      	ldr	r3, [r3, #0]
 810d524:	60fb      	str	r3, [r7, #12]
 810d526:	e011      	b.n	810d54c <vTaskSwitchContext+0x48>
 810d528:	68fb      	ldr	r3, [r7, #12]
 810d52a:	2b00      	cmp	r3, #0
 810d52c:	d10b      	bne.n	810d546 <vTaskSwitchContext+0x42>
	__asm volatile
 810d52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d532:	f383 8811 	msr	BASEPRI, r3
 810d536:	f3bf 8f6f 	isb	sy
 810d53a:	f3bf 8f4f 	dsb	sy
 810d53e:	607b      	str	r3, [r7, #4]
}
 810d540:	bf00      	nop
 810d542:	bf00      	nop
 810d544:	e7fd      	b.n	810d542 <vTaskSwitchContext+0x3e>
 810d546:	68fb      	ldr	r3, [r7, #12]
 810d548:	3b01      	subs	r3, #1
 810d54a:	60fb      	str	r3, [r7, #12]
 810d54c:	491d      	ldr	r1, [pc, #116]	@ (810d5c4 <vTaskSwitchContext+0xc0>)
 810d54e:	68fa      	ldr	r2, [r7, #12]
 810d550:	4613      	mov	r3, r2
 810d552:	009b      	lsls	r3, r3, #2
 810d554:	4413      	add	r3, r2
 810d556:	009b      	lsls	r3, r3, #2
 810d558:	440b      	add	r3, r1
 810d55a:	681b      	ldr	r3, [r3, #0]
 810d55c:	2b00      	cmp	r3, #0
 810d55e:	d0e3      	beq.n	810d528 <vTaskSwitchContext+0x24>
 810d560:	68fa      	ldr	r2, [r7, #12]
 810d562:	4613      	mov	r3, r2
 810d564:	009b      	lsls	r3, r3, #2
 810d566:	4413      	add	r3, r2
 810d568:	009b      	lsls	r3, r3, #2
 810d56a:	4a16      	ldr	r2, [pc, #88]	@ (810d5c4 <vTaskSwitchContext+0xc0>)
 810d56c:	4413      	add	r3, r2
 810d56e:	60bb      	str	r3, [r7, #8]
 810d570:	68bb      	ldr	r3, [r7, #8]
 810d572:	685b      	ldr	r3, [r3, #4]
 810d574:	685a      	ldr	r2, [r3, #4]
 810d576:	68bb      	ldr	r3, [r7, #8]
 810d578:	605a      	str	r2, [r3, #4]
 810d57a:	68bb      	ldr	r3, [r7, #8]
 810d57c:	685a      	ldr	r2, [r3, #4]
 810d57e:	68bb      	ldr	r3, [r7, #8]
 810d580:	3308      	adds	r3, #8
 810d582:	429a      	cmp	r2, r3
 810d584:	d104      	bne.n	810d590 <vTaskSwitchContext+0x8c>
 810d586:	68bb      	ldr	r3, [r7, #8]
 810d588:	685b      	ldr	r3, [r3, #4]
 810d58a:	685a      	ldr	r2, [r3, #4]
 810d58c:	68bb      	ldr	r3, [r7, #8]
 810d58e:	605a      	str	r2, [r3, #4]
 810d590:	68bb      	ldr	r3, [r7, #8]
 810d592:	685b      	ldr	r3, [r3, #4]
 810d594:	68db      	ldr	r3, [r3, #12]
 810d596:	4a0c      	ldr	r2, [pc, #48]	@ (810d5c8 <vTaskSwitchContext+0xc4>)
 810d598:	6013      	str	r3, [r2, #0]
 810d59a:	4a09      	ldr	r2, [pc, #36]	@ (810d5c0 <vTaskSwitchContext+0xbc>)
 810d59c:	68fb      	ldr	r3, [r7, #12]
 810d59e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810d5a0:	4b09      	ldr	r3, [pc, #36]	@ (810d5c8 <vTaskSwitchContext+0xc4>)
 810d5a2:	681b      	ldr	r3, [r3, #0]
 810d5a4:	3354      	adds	r3, #84	@ 0x54
 810d5a6:	4a09      	ldr	r2, [pc, #36]	@ (810d5cc <vTaskSwitchContext+0xc8>)
 810d5a8:	6013      	str	r3, [r2, #0]
}
 810d5aa:	bf00      	nop
 810d5ac:	3714      	adds	r7, #20
 810d5ae:	46bd      	mov	sp, r7
 810d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d5b4:	4770      	bx	lr
 810d5b6:	bf00      	nop
 810d5b8:	10004ed0 	.word	0x10004ed0
 810d5bc:	10004ebc 	.word	0x10004ebc
 810d5c0:	10004eb0 	.word	0x10004eb0
 810d5c4:	100049d8 	.word	0x100049d8
 810d5c8:	100049d4 	.word	0x100049d4
 810d5cc:	10000020 	.word	0x10000020

0810d5d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810d5d0:	b580      	push	{r7, lr}
 810d5d2:	b084      	sub	sp, #16
 810d5d4:	af00      	add	r7, sp, #0
 810d5d6:	6078      	str	r0, [r7, #4]
 810d5d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810d5da:	687b      	ldr	r3, [r7, #4]
 810d5dc:	2b00      	cmp	r3, #0
 810d5de:	d10b      	bne.n	810d5f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810d5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d5e4:	f383 8811 	msr	BASEPRI, r3
 810d5e8:	f3bf 8f6f 	isb	sy
 810d5ec:	f3bf 8f4f 	dsb	sy
 810d5f0:	60fb      	str	r3, [r7, #12]
}
 810d5f2:	bf00      	nop
 810d5f4:	bf00      	nop
 810d5f6:	e7fd      	b.n	810d5f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810d5f8:	4b07      	ldr	r3, [pc, #28]	@ (810d618 <vTaskPlaceOnEventList+0x48>)
 810d5fa:	681b      	ldr	r3, [r3, #0]
 810d5fc:	3318      	adds	r3, #24
 810d5fe:	4619      	mov	r1, r3
 810d600:	6878      	ldr	r0, [r7, #4]
 810d602:	f7fe fbf4 	bl	810bdee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810d606:	2101      	movs	r1, #1
 810d608:	6838      	ldr	r0, [r7, #0]
 810d60a:	f000 fa87 	bl	810db1c <prvAddCurrentTaskToDelayedList>
}
 810d60e:	bf00      	nop
 810d610:	3710      	adds	r7, #16
 810d612:	46bd      	mov	sp, r7
 810d614:	bd80      	pop	{r7, pc}
 810d616:	bf00      	nop
 810d618:	100049d4 	.word	0x100049d4

0810d61c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810d61c:	b580      	push	{r7, lr}
 810d61e:	b086      	sub	sp, #24
 810d620:	af00      	add	r7, sp, #0
 810d622:	60f8      	str	r0, [r7, #12]
 810d624:	60b9      	str	r1, [r7, #8]
 810d626:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810d628:	68fb      	ldr	r3, [r7, #12]
 810d62a:	2b00      	cmp	r3, #0
 810d62c:	d10b      	bne.n	810d646 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810d62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d632:	f383 8811 	msr	BASEPRI, r3
 810d636:	f3bf 8f6f 	isb	sy
 810d63a:	f3bf 8f4f 	dsb	sy
 810d63e:	617b      	str	r3, [r7, #20]
}
 810d640:	bf00      	nop
 810d642:	bf00      	nop
 810d644:	e7fd      	b.n	810d642 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810d646:	4b0a      	ldr	r3, [pc, #40]	@ (810d670 <vTaskPlaceOnEventListRestricted+0x54>)
 810d648:	681b      	ldr	r3, [r3, #0]
 810d64a:	3318      	adds	r3, #24
 810d64c:	4619      	mov	r1, r3
 810d64e:	68f8      	ldr	r0, [r7, #12]
 810d650:	f7fe fba9 	bl	810bda6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810d654:	687b      	ldr	r3, [r7, #4]
 810d656:	2b00      	cmp	r3, #0
 810d658:	d002      	beq.n	810d660 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810d65a:	f04f 33ff 	mov.w	r3, #4294967295
 810d65e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810d660:	6879      	ldr	r1, [r7, #4]
 810d662:	68b8      	ldr	r0, [r7, #8]
 810d664:	f000 fa5a 	bl	810db1c <prvAddCurrentTaskToDelayedList>
	}
 810d668:	bf00      	nop
 810d66a:	3718      	adds	r7, #24
 810d66c:	46bd      	mov	sp, r7
 810d66e:	bd80      	pop	{r7, pc}
 810d670:	100049d4 	.word	0x100049d4

0810d674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810d674:	b580      	push	{r7, lr}
 810d676:	b086      	sub	sp, #24
 810d678:	af00      	add	r7, sp, #0
 810d67a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810d67c:	687b      	ldr	r3, [r7, #4]
 810d67e:	68db      	ldr	r3, [r3, #12]
 810d680:	68db      	ldr	r3, [r3, #12]
 810d682:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810d684:	693b      	ldr	r3, [r7, #16]
 810d686:	2b00      	cmp	r3, #0
 810d688:	d10b      	bne.n	810d6a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810d68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d68e:	f383 8811 	msr	BASEPRI, r3
 810d692:	f3bf 8f6f 	isb	sy
 810d696:	f3bf 8f4f 	dsb	sy
 810d69a:	60fb      	str	r3, [r7, #12]
}
 810d69c:	bf00      	nop
 810d69e:	bf00      	nop
 810d6a0:	e7fd      	b.n	810d69e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810d6a2:	693b      	ldr	r3, [r7, #16]
 810d6a4:	3318      	adds	r3, #24
 810d6a6:	4618      	mov	r0, r3
 810d6a8:	f7fe fbda 	bl	810be60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810d6ac:	4b1d      	ldr	r3, [pc, #116]	@ (810d724 <xTaskRemoveFromEventList+0xb0>)
 810d6ae:	681b      	ldr	r3, [r3, #0]
 810d6b0:	2b00      	cmp	r3, #0
 810d6b2:	d11d      	bne.n	810d6f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810d6b4:	693b      	ldr	r3, [r7, #16]
 810d6b6:	3304      	adds	r3, #4
 810d6b8:	4618      	mov	r0, r3
 810d6ba:	f7fe fbd1 	bl	810be60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810d6be:	693b      	ldr	r3, [r7, #16]
 810d6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d6c2:	4b19      	ldr	r3, [pc, #100]	@ (810d728 <xTaskRemoveFromEventList+0xb4>)
 810d6c4:	681b      	ldr	r3, [r3, #0]
 810d6c6:	429a      	cmp	r2, r3
 810d6c8:	d903      	bls.n	810d6d2 <xTaskRemoveFromEventList+0x5e>
 810d6ca:	693b      	ldr	r3, [r7, #16]
 810d6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d6ce:	4a16      	ldr	r2, [pc, #88]	@ (810d728 <xTaskRemoveFromEventList+0xb4>)
 810d6d0:	6013      	str	r3, [r2, #0]
 810d6d2:	693b      	ldr	r3, [r7, #16]
 810d6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d6d6:	4613      	mov	r3, r2
 810d6d8:	009b      	lsls	r3, r3, #2
 810d6da:	4413      	add	r3, r2
 810d6dc:	009b      	lsls	r3, r3, #2
 810d6de:	4a13      	ldr	r2, [pc, #76]	@ (810d72c <xTaskRemoveFromEventList+0xb8>)
 810d6e0:	441a      	add	r2, r3
 810d6e2:	693b      	ldr	r3, [r7, #16]
 810d6e4:	3304      	adds	r3, #4
 810d6e6:	4619      	mov	r1, r3
 810d6e8:	4610      	mov	r0, r2
 810d6ea:	f7fe fb5c 	bl	810bda6 <vListInsertEnd>
 810d6ee:	e005      	b.n	810d6fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810d6f0:	693b      	ldr	r3, [r7, #16]
 810d6f2:	3318      	adds	r3, #24
 810d6f4:	4619      	mov	r1, r3
 810d6f6:	480e      	ldr	r0, [pc, #56]	@ (810d730 <xTaskRemoveFromEventList+0xbc>)
 810d6f8:	f7fe fb55 	bl	810bda6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810d6fc:	693b      	ldr	r3, [r7, #16]
 810d6fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d700:	4b0c      	ldr	r3, [pc, #48]	@ (810d734 <xTaskRemoveFromEventList+0xc0>)
 810d702:	681b      	ldr	r3, [r3, #0]
 810d704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d706:	429a      	cmp	r2, r3
 810d708:	d905      	bls.n	810d716 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810d70a:	2301      	movs	r3, #1
 810d70c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810d70e:	4b0a      	ldr	r3, [pc, #40]	@ (810d738 <xTaskRemoveFromEventList+0xc4>)
 810d710:	2201      	movs	r2, #1
 810d712:	601a      	str	r2, [r3, #0]
 810d714:	e001      	b.n	810d71a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810d716:	2300      	movs	r3, #0
 810d718:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810d71a:	697b      	ldr	r3, [r7, #20]
}
 810d71c:	4618      	mov	r0, r3
 810d71e:	3718      	adds	r7, #24
 810d720:	46bd      	mov	sp, r7
 810d722:	bd80      	pop	{r7, pc}
 810d724:	10004ed0 	.word	0x10004ed0
 810d728:	10004eb0 	.word	0x10004eb0
 810d72c:	100049d8 	.word	0x100049d8
 810d730:	10004e68 	.word	0x10004e68
 810d734:	100049d4 	.word	0x100049d4
 810d738:	10004ebc 	.word	0x10004ebc

0810d73c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810d73c:	b480      	push	{r7}
 810d73e:	b083      	sub	sp, #12
 810d740:	af00      	add	r7, sp, #0
 810d742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810d744:	4b06      	ldr	r3, [pc, #24]	@ (810d760 <vTaskInternalSetTimeOutState+0x24>)
 810d746:	681a      	ldr	r2, [r3, #0]
 810d748:	687b      	ldr	r3, [r7, #4]
 810d74a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810d74c:	4b05      	ldr	r3, [pc, #20]	@ (810d764 <vTaskInternalSetTimeOutState+0x28>)
 810d74e:	681a      	ldr	r2, [r3, #0]
 810d750:	687b      	ldr	r3, [r7, #4]
 810d752:	605a      	str	r2, [r3, #4]
}
 810d754:	bf00      	nop
 810d756:	370c      	adds	r7, #12
 810d758:	46bd      	mov	sp, r7
 810d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d75e:	4770      	bx	lr
 810d760:	10004ec0 	.word	0x10004ec0
 810d764:	10004eac 	.word	0x10004eac

0810d768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810d768:	b580      	push	{r7, lr}
 810d76a:	b088      	sub	sp, #32
 810d76c:	af00      	add	r7, sp, #0
 810d76e:	6078      	str	r0, [r7, #4]
 810d770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810d772:	687b      	ldr	r3, [r7, #4]
 810d774:	2b00      	cmp	r3, #0
 810d776:	d10b      	bne.n	810d790 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810d778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d77c:	f383 8811 	msr	BASEPRI, r3
 810d780:	f3bf 8f6f 	isb	sy
 810d784:	f3bf 8f4f 	dsb	sy
 810d788:	613b      	str	r3, [r7, #16]
}
 810d78a:	bf00      	nop
 810d78c:	bf00      	nop
 810d78e:	e7fd      	b.n	810d78c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810d790:	683b      	ldr	r3, [r7, #0]
 810d792:	2b00      	cmp	r3, #0
 810d794:	d10b      	bne.n	810d7ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810d796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d79a:	f383 8811 	msr	BASEPRI, r3
 810d79e:	f3bf 8f6f 	isb	sy
 810d7a2:	f3bf 8f4f 	dsb	sy
 810d7a6:	60fb      	str	r3, [r7, #12]
}
 810d7a8:	bf00      	nop
 810d7aa:	bf00      	nop
 810d7ac:	e7fd      	b.n	810d7aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810d7ae:	f7fe fcb3 	bl	810c118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810d7b2:	4b1d      	ldr	r3, [pc, #116]	@ (810d828 <xTaskCheckForTimeOut+0xc0>)
 810d7b4:	681b      	ldr	r3, [r3, #0]
 810d7b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810d7b8:	687b      	ldr	r3, [r7, #4]
 810d7ba:	685b      	ldr	r3, [r3, #4]
 810d7bc:	69ba      	ldr	r2, [r7, #24]
 810d7be:	1ad3      	subs	r3, r2, r3
 810d7c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810d7c2:	683b      	ldr	r3, [r7, #0]
 810d7c4:	681b      	ldr	r3, [r3, #0]
 810d7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d7ca:	d102      	bne.n	810d7d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810d7cc:	2300      	movs	r3, #0
 810d7ce:	61fb      	str	r3, [r7, #28]
 810d7d0:	e023      	b.n	810d81a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810d7d2:	687b      	ldr	r3, [r7, #4]
 810d7d4:	681a      	ldr	r2, [r3, #0]
 810d7d6:	4b15      	ldr	r3, [pc, #84]	@ (810d82c <xTaskCheckForTimeOut+0xc4>)
 810d7d8:	681b      	ldr	r3, [r3, #0]
 810d7da:	429a      	cmp	r2, r3
 810d7dc:	d007      	beq.n	810d7ee <xTaskCheckForTimeOut+0x86>
 810d7de:	687b      	ldr	r3, [r7, #4]
 810d7e0:	685b      	ldr	r3, [r3, #4]
 810d7e2:	69ba      	ldr	r2, [r7, #24]
 810d7e4:	429a      	cmp	r2, r3
 810d7e6:	d302      	bcc.n	810d7ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810d7e8:	2301      	movs	r3, #1
 810d7ea:	61fb      	str	r3, [r7, #28]
 810d7ec:	e015      	b.n	810d81a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810d7ee:	683b      	ldr	r3, [r7, #0]
 810d7f0:	681b      	ldr	r3, [r3, #0]
 810d7f2:	697a      	ldr	r2, [r7, #20]
 810d7f4:	429a      	cmp	r2, r3
 810d7f6:	d20b      	bcs.n	810d810 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810d7f8:	683b      	ldr	r3, [r7, #0]
 810d7fa:	681a      	ldr	r2, [r3, #0]
 810d7fc:	697b      	ldr	r3, [r7, #20]
 810d7fe:	1ad2      	subs	r2, r2, r3
 810d800:	683b      	ldr	r3, [r7, #0]
 810d802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810d804:	6878      	ldr	r0, [r7, #4]
 810d806:	f7ff ff99 	bl	810d73c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810d80a:	2300      	movs	r3, #0
 810d80c:	61fb      	str	r3, [r7, #28]
 810d80e:	e004      	b.n	810d81a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810d810:	683b      	ldr	r3, [r7, #0]
 810d812:	2200      	movs	r2, #0
 810d814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810d816:	2301      	movs	r3, #1
 810d818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810d81a:	f7fe fcaf 	bl	810c17c <vPortExitCritical>

	return xReturn;
 810d81e:	69fb      	ldr	r3, [r7, #28]
}
 810d820:	4618      	mov	r0, r3
 810d822:	3720      	adds	r7, #32
 810d824:	46bd      	mov	sp, r7
 810d826:	bd80      	pop	{r7, pc}
 810d828:	10004eac 	.word	0x10004eac
 810d82c:	10004ec0 	.word	0x10004ec0

0810d830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810d830:	b480      	push	{r7}
 810d832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810d834:	4b03      	ldr	r3, [pc, #12]	@ (810d844 <vTaskMissedYield+0x14>)
 810d836:	2201      	movs	r2, #1
 810d838:	601a      	str	r2, [r3, #0]
}
 810d83a:	bf00      	nop
 810d83c:	46bd      	mov	sp, r7
 810d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d842:	4770      	bx	lr
 810d844:	10004ebc 	.word	0x10004ebc

0810d848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810d848:	b580      	push	{r7, lr}
 810d84a:	b082      	sub	sp, #8
 810d84c:	af00      	add	r7, sp, #0
 810d84e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810d850:	f000 f852 	bl	810d8f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810d854:	4b06      	ldr	r3, [pc, #24]	@ (810d870 <prvIdleTask+0x28>)
 810d856:	681b      	ldr	r3, [r3, #0]
 810d858:	2b01      	cmp	r3, #1
 810d85a:	d9f9      	bls.n	810d850 <prvIdleTask+0x8>
			{
				taskYIELD();
 810d85c:	4b05      	ldr	r3, [pc, #20]	@ (810d874 <prvIdleTask+0x2c>)
 810d85e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d862:	601a      	str	r2, [r3, #0]
 810d864:	f3bf 8f4f 	dsb	sy
 810d868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810d86c:	e7f0      	b.n	810d850 <prvIdleTask+0x8>
 810d86e:	bf00      	nop
 810d870:	100049d8 	.word	0x100049d8
 810d874:	e000ed04 	.word	0xe000ed04

0810d878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810d878:	b580      	push	{r7, lr}
 810d87a:	b082      	sub	sp, #8
 810d87c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810d87e:	2300      	movs	r3, #0
 810d880:	607b      	str	r3, [r7, #4]
 810d882:	e00c      	b.n	810d89e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810d884:	687a      	ldr	r2, [r7, #4]
 810d886:	4613      	mov	r3, r2
 810d888:	009b      	lsls	r3, r3, #2
 810d88a:	4413      	add	r3, r2
 810d88c:	009b      	lsls	r3, r3, #2
 810d88e:	4a12      	ldr	r2, [pc, #72]	@ (810d8d8 <prvInitialiseTaskLists+0x60>)
 810d890:	4413      	add	r3, r2
 810d892:	4618      	mov	r0, r3
 810d894:	f7fe fa5a 	bl	810bd4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810d898:	687b      	ldr	r3, [r7, #4]
 810d89a:	3301      	adds	r3, #1
 810d89c:	607b      	str	r3, [r7, #4]
 810d89e:	687b      	ldr	r3, [r7, #4]
 810d8a0:	2b37      	cmp	r3, #55	@ 0x37
 810d8a2:	d9ef      	bls.n	810d884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810d8a4:	480d      	ldr	r0, [pc, #52]	@ (810d8dc <prvInitialiseTaskLists+0x64>)
 810d8a6:	f7fe fa51 	bl	810bd4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810d8aa:	480d      	ldr	r0, [pc, #52]	@ (810d8e0 <prvInitialiseTaskLists+0x68>)
 810d8ac:	f7fe fa4e 	bl	810bd4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810d8b0:	480c      	ldr	r0, [pc, #48]	@ (810d8e4 <prvInitialiseTaskLists+0x6c>)
 810d8b2:	f7fe fa4b 	bl	810bd4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810d8b6:	480c      	ldr	r0, [pc, #48]	@ (810d8e8 <prvInitialiseTaskLists+0x70>)
 810d8b8:	f7fe fa48 	bl	810bd4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810d8bc:	480b      	ldr	r0, [pc, #44]	@ (810d8ec <prvInitialiseTaskLists+0x74>)
 810d8be:	f7fe fa45 	bl	810bd4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810d8c2:	4b0b      	ldr	r3, [pc, #44]	@ (810d8f0 <prvInitialiseTaskLists+0x78>)
 810d8c4:	4a05      	ldr	r2, [pc, #20]	@ (810d8dc <prvInitialiseTaskLists+0x64>)
 810d8c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810d8c8:	4b0a      	ldr	r3, [pc, #40]	@ (810d8f4 <prvInitialiseTaskLists+0x7c>)
 810d8ca:	4a05      	ldr	r2, [pc, #20]	@ (810d8e0 <prvInitialiseTaskLists+0x68>)
 810d8cc:	601a      	str	r2, [r3, #0]
}
 810d8ce:	bf00      	nop
 810d8d0:	3708      	adds	r7, #8
 810d8d2:	46bd      	mov	sp, r7
 810d8d4:	bd80      	pop	{r7, pc}
 810d8d6:	bf00      	nop
 810d8d8:	100049d8 	.word	0x100049d8
 810d8dc:	10004e38 	.word	0x10004e38
 810d8e0:	10004e4c 	.word	0x10004e4c
 810d8e4:	10004e68 	.word	0x10004e68
 810d8e8:	10004e7c 	.word	0x10004e7c
 810d8ec:	10004e94 	.word	0x10004e94
 810d8f0:	10004e60 	.word	0x10004e60
 810d8f4:	10004e64 	.word	0x10004e64

0810d8f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810d8f8:	b580      	push	{r7, lr}
 810d8fa:	b082      	sub	sp, #8
 810d8fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810d8fe:	e019      	b.n	810d934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810d900:	f7fe fc0a 	bl	810c118 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810d904:	4b10      	ldr	r3, [pc, #64]	@ (810d948 <prvCheckTasksWaitingTermination+0x50>)
 810d906:	68db      	ldr	r3, [r3, #12]
 810d908:	68db      	ldr	r3, [r3, #12]
 810d90a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810d90c:	687b      	ldr	r3, [r7, #4]
 810d90e:	3304      	adds	r3, #4
 810d910:	4618      	mov	r0, r3
 810d912:	f7fe faa5 	bl	810be60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810d916:	4b0d      	ldr	r3, [pc, #52]	@ (810d94c <prvCheckTasksWaitingTermination+0x54>)
 810d918:	681b      	ldr	r3, [r3, #0]
 810d91a:	3b01      	subs	r3, #1
 810d91c:	4a0b      	ldr	r2, [pc, #44]	@ (810d94c <prvCheckTasksWaitingTermination+0x54>)
 810d91e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810d920:	4b0b      	ldr	r3, [pc, #44]	@ (810d950 <prvCheckTasksWaitingTermination+0x58>)
 810d922:	681b      	ldr	r3, [r3, #0]
 810d924:	3b01      	subs	r3, #1
 810d926:	4a0a      	ldr	r2, [pc, #40]	@ (810d950 <prvCheckTasksWaitingTermination+0x58>)
 810d928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810d92a:	f7fe fc27 	bl	810c17c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810d92e:	6878      	ldr	r0, [r7, #4]
 810d930:	f000 f810 	bl	810d954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810d934:	4b06      	ldr	r3, [pc, #24]	@ (810d950 <prvCheckTasksWaitingTermination+0x58>)
 810d936:	681b      	ldr	r3, [r3, #0]
 810d938:	2b00      	cmp	r3, #0
 810d93a:	d1e1      	bne.n	810d900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810d93c:	bf00      	nop
 810d93e:	bf00      	nop
 810d940:	3708      	adds	r7, #8
 810d942:	46bd      	mov	sp, r7
 810d944:	bd80      	pop	{r7, pc}
 810d946:	bf00      	nop
 810d948:	10004e7c 	.word	0x10004e7c
 810d94c:	10004ea8 	.word	0x10004ea8
 810d950:	10004e90 	.word	0x10004e90

0810d954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810d954:	b580      	push	{r7, lr}
 810d956:	b084      	sub	sp, #16
 810d958:	af00      	add	r7, sp, #0
 810d95a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810d95c:	687b      	ldr	r3, [r7, #4]
 810d95e:	3354      	adds	r3, #84	@ 0x54
 810d960:	4618      	mov	r0, r3
 810d962:	f001 feaf 	bl	810f6c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810d966:	687b      	ldr	r3, [r7, #4]
 810d968:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810d96c:	2b00      	cmp	r3, #0
 810d96e:	d108      	bne.n	810d982 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810d970:	687b      	ldr	r3, [r7, #4]
 810d972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d974:	4618      	mov	r0, r3
 810d976:	f7fe f8bd 	bl	810baf4 <vPortFree>
				vPortFree( pxTCB );
 810d97a:	6878      	ldr	r0, [r7, #4]
 810d97c:	f7fe f8ba 	bl	810baf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810d980:	e019      	b.n	810d9b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810d982:	687b      	ldr	r3, [r7, #4]
 810d984:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810d988:	2b01      	cmp	r3, #1
 810d98a:	d103      	bne.n	810d994 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810d98c:	6878      	ldr	r0, [r7, #4]
 810d98e:	f7fe f8b1 	bl	810baf4 <vPortFree>
	}
 810d992:	e010      	b.n	810d9b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810d994:	687b      	ldr	r3, [r7, #4]
 810d996:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810d99a:	2b02      	cmp	r3, #2
 810d99c:	d00b      	beq.n	810d9b6 <prvDeleteTCB+0x62>
	__asm volatile
 810d99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d9a2:	f383 8811 	msr	BASEPRI, r3
 810d9a6:	f3bf 8f6f 	isb	sy
 810d9aa:	f3bf 8f4f 	dsb	sy
 810d9ae:	60fb      	str	r3, [r7, #12]
}
 810d9b0:	bf00      	nop
 810d9b2:	bf00      	nop
 810d9b4:	e7fd      	b.n	810d9b2 <prvDeleteTCB+0x5e>
	}
 810d9b6:	bf00      	nop
 810d9b8:	3710      	adds	r7, #16
 810d9ba:	46bd      	mov	sp, r7
 810d9bc:	bd80      	pop	{r7, pc}
	...

0810d9c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810d9c0:	b480      	push	{r7}
 810d9c2:	b083      	sub	sp, #12
 810d9c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810d9c6:	4b0c      	ldr	r3, [pc, #48]	@ (810d9f8 <prvResetNextTaskUnblockTime+0x38>)
 810d9c8:	681b      	ldr	r3, [r3, #0]
 810d9ca:	681b      	ldr	r3, [r3, #0]
 810d9cc:	2b00      	cmp	r3, #0
 810d9ce:	d104      	bne.n	810d9da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810d9d0:	4b0a      	ldr	r3, [pc, #40]	@ (810d9fc <prvResetNextTaskUnblockTime+0x3c>)
 810d9d2:	f04f 32ff 	mov.w	r2, #4294967295
 810d9d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810d9d8:	e008      	b.n	810d9ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810d9da:	4b07      	ldr	r3, [pc, #28]	@ (810d9f8 <prvResetNextTaskUnblockTime+0x38>)
 810d9dc:	681b      	ldr	r3, [r3, #0]
 810d9de:	68db      	ldr	r3, [r3, #12]
 810d9e0:	68db      	ldr	r3, [r3, #12]
 810d9e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810d9e4:	687b      	ldr	r3, [r7, #4]
 810d9e6:	685b      	ldr	r3, [r3, #4]
 810d9e8:	4a04      	ldr	r2, [pc, #16]	@ (810d9fc <prvResetNextTaskUnblockTime+0x3c>)
 810d9ea:	6013      	str	r3, [r2, #0]
}
 810d9ec:	bf00      	nop
 810d9ee:	370c      	adds	r7, #12
 810d9f0:	46bd      	mov	sp, r7
 810d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9f6:	4770      	bx	lr
 810d9f8:	10004e60 	.word	0x10004e60
 810d9fc:	10004ec8 	.word	0x10004ec8

0810da00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810da00:	b480      	push	{r7}
 810da02:	b083      	sub	sp, #12
 810da04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810da06:	4b0b      	ldr	r3, [pc, #44]	@ (810da34 <xTaskGetSchedulerState+0x34>)
 810da08:	681b      	ldr	r3, [r3, #0]
 810da0a:	2b00      	cmp	r3, #0
 810da0c:	d102      	bne.n	810da14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810da0e:	2301      	movs	r3, #1
 810da10:	607b      	str	r3, [r7, #4]
 810da12:	e008      	b.n	810da26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810da14:	4b08      	ldr	r3, [pc, #32]	@ (810da38 <xTaskGetSchedulerState+0x38>)
 810da16:	681b      	ldr	r3, [r3, #0]
 810da18:	2b00      	cmp	r3, #0
 810da1a:	d102      	bne.n	810da22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810da1c:	2302      	movs	r3, #2
 810da1e:	607b      	str	r3, [r7, #4]
 810da20:	e001      	b.n	810da26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810da22:	2300      	movs	r3, #0
 810da24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810da26:	687b      	ldr	r3, [r7, #4]
	}
 810da28:	4618      	mov	r0, r3
 810da2a:	370c      	adds	r7, #12
 810da2c:	46bd      	mov	sp, r7
 810da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da32:	4770      	bx	lr
 810da34:	10004eb4 	.word	0x10004eb4
 810da38:	10004ed0 	.word	0x10004ed0

0810da3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810da3c:	b580      	push	{r7, lr}
 810da3e:	b086      	sub	sp, #24
 810da40:	af00      	add	r7, sp, #0
 810da42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810da44:	687b      	ldr	r3, [r7, #4]
 810da46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810da48:	2300      	movs	r3, #0
 810da4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810da4c:	687b      	ldr	r3, [r7, #4]
 810da4e:	2b00      	cmp	r3, #0
 810da50:	d058      	beq.n	810db04 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810da52:	4b2f      	ldr	r3, [pc, #188]	@ (810db10 <xTaskPriorityDisinherit+0xd4>)
 810da54:	681b      	ldr	r3, [r3, #0]
 810da56:	693a      	ldr	r2, [r7, #16]
 810da58:	429a      	cmp	r2, r3
 810da5a:	d00b      	beq.n	810da74 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810da5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810da60:	f383 8811 	msr	BASEPRI, r3
 810da64:	f3bf 8f6f 	isb	sy
 810da68:	f3bf 8f4f 	dsb	sy
 810da6c:	60fb      	str	r3, [r7, #12]
}
 810da6e:	bf00      	nop
 810da70:	bf00      	nop
 810da72:	e7fd      	b.n	810da70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810da74:	693b      	ldr	r3, [r7, #16]
 810da76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810da78:	2b00      	cmp	r3, #0
 810da7a:	d10b      	bne.n	810da94 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810da7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810da80:	f383 8811 	msr	BASEPRI, r3
 810da84:	f3bf 8f6f 	isb	sy
 810da88:	f3bf 8f4f 	dsb	sy
 810da8c:	60bb      	str	r3, [r7, #8]
}
 810da8e:	bf00      	nop
 810da90:	bf00      	nop
 810da92:	e7fd      	b.n	810da90 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810da94:	693b      	ldr	r3, [r7, #16]
 810da96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810da98:	1e5a      	subs	r2, r3, #1
 810da9a:	693b      	ldr	r3, [r7, #16]
 810da9c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810da9e:	693b      	ldr	r3, [r7, #16]
 810daa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810daa2:	693b      	ldr	r3, [r7, #16]
 810daa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810daa6:	429a      	cmp	r2, r3
 810daa8:	d02c      	beq.n	810db04 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810daaa:	693b      	ldr	r3, [r7, #16]
 810daac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810daae:	2b00      	cmp	r3, #0
 810dab0:	d128      	bne.n	810db04 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810dab2:	693b      	ldr	r3, [r7, #16]
 810dab4:	3304      	adds	r3, #4
 810dab6:	4618      	mov	r0, r3
 810dab8:	f7fe f9d2 	bl	810be60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810dabc:	693b      	ldr	r3, [r7, #16]
 810dabe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810dac0:	693b      	ldr	r3, [r7, #16]
 810dac2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810dac4:	693b      	ldr	r3, [r7, #16]
 810dac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810dac8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810dacc:	693b      	ldr	r3, [r7, #16]
 810dace:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810dad0:	693b      	ldr	r3, [r7, #16]
 810dad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810dad4:	4b0f      	ldr	r3, [pc, #60]	@ (810db14 <xTaskPriorityDisinherit+0xd8>)
 810dad6:	681b      	ldr	r3, [r3, #0]
 810dad8:	429a      	cmp	r2, r3
 810dada:	d903      	bls.n	810dae4 <xTaskPriorityDisinherit+0xa8>
 810dadc:	693b      	ldr	r3, [r7, #16]
 810dade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810dae0:	4a0c      	ldr	r2, [pc, #48]	@ (810db14 <xTaskPriorityDisinherit+0xd8>)
 810dae2:	6013      	str	r3, [r2, #0]
 810dae4:	693b      	ldr	r3, [r7, #16]
 810dae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810dae8:	4613      	mov	r3, r2
 810daea:	009b      	lsls	r3, r3, #2
 810daec:	4413      	add	r3, r2
 810daee:	009b      	lsls	r3, r3, #2
 810daf0:	4a09      	ldr	r2, [pc, #36]	@ (810db18 <xTaskPriorityDisinherit+0xdc>)
 810daf2:	441a      	add	r2, r3
 810daf4:	693b      	ldr	r3, [r7, #16]
 810daf6:	3304      	adds	r3, #4
 810daf8:	4619      	mov	r1, r3
 810dafa:	4610      	mov	r0, r2
 810dafc:	f7fe f953 	bl	810bda6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810db00:	2301      	movs	r3, #1
 810db02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810db04:	697b      	ldr	r3, [r7, #20]
	}
 810db06:	4618      	mov	r0, r3
 810db08:	3718      	adds	r7, #24
 810db0a:	46bd      	mov	sp, r7
 810db0c:	bd80      	pop	{r7, pc}
 810db0e:	bf00      	nop
 810db10:	100049d4 	.word	0x100049d4
 810db14:	10004eb0 	.word	0x10004eb0
 810db18:	100049d8 	.word	0x100049d8

0810db1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810db1c:	b580      	push	{r7, lr}
 810db1e:	b084      	sub	sp, #16
 810db20:	af00      	add	r7, sp, #0
 810db22:	6078      	str	r0, [r7, #4]
 810db24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810db26:	4b21      	ldr	r3, [pc, #132]	@ (810dbac <prvAddCurrentTaskToDelayedList+0x90>)
 810db28:	681b      	ldr	r3, [r3, #0]
 810db2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810db2c:	4b20      	ldr	r3, [pc, #128]	@ (810dbb0 <prvAddCurrentTaskToDelayedList+0x94>)
 810db2e:	681b      	ldr	r3, [r3, #0]
 810db30:	3304      	adds	r3, #4
 810db32:	4618      	mov	r0, r3
 810db34:	f7fe f994 	bl	810be60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810db38:	687b      	ldr	r3, [r7, #4]
 810db3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810db3e:	d10a      	bne.n	810db56 <prvAddCurrentTaskToDelayedList+0x3a>
 810db40:	683b      	ldr	r3, [r7, #0]
 810db42:	2b00      	cmp	r3, #0
 810db44:	d007      	beq.n	810db56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810db46:	4b1a      	ldr	r3, [pc, #104]	@ (810dbb0 <prvAddCurrentTaskToDelayedList+0x94>)
 810db48:	681b      	ldr	r3, [r3, #0]
 810db4a:	3304      	adds	r3, #4
 810db4c:	4619      	mov	r1, r3
 810db4e:	4819      	ldr	r0, [pc, #100]	@ (810dbb4 <prvAddCurrentTaskToDelayedList+0x98>)
 810db50:	f7fe f929 	bl	810bda6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810db54:	e026      	b.n	810dba4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810db56:	68fa      	ldr	r2, [r7, #12]
 810db58:	687b      	ldr	r3, [r7, #4]
 810db5a:	4413      	add	r3, r2
 810db5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810db5e:	4b14      	ldr	r3, [pc, #80]	@ (810dbb0 <prvAddCurrentTaskToDelayedList+0x94>)
 810db60:	681b      	ldr	r3, [r3, #0]
 810db62:	68ba      	ldr	r2, [r7, #8]
 810db64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810db66:	68ba      	ldr	r2, [r7, #8]
 810db68:	68fb      	ldr	r3, [r7, #12]
 810db6a:	429a      	cmp	r2, r3
 810db6c:	d209      	bcs.n	810db82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810db6e:	4b12      	ldr	r3, [pc, #72]	@ (810dbb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 810db70:	681a      	ldr	r2, [r3, #0]
 810db72:	4b0f      	ldr	r3, [pc, #60]	@ (810dbb0 <prvAddCurrentTaskToDelayedList+0x94>)
 810db74:	681b      	ldr	r3, [r3, #0]
 810db76:	3304      	adds	r3, #4
 810db78:	4619      	mov	r1, r3
 810db7a:	4610      	mov	r0, r2
 810db7c:	f7fe f937 	bl	810bdee <vListInsert>
}
 810db80:	e010      	b.n	810dba4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810db82:	4b0e      	ldr	r3, [pc, #56]	@ (810dbbc <prvAddCurrentTaskToDelayedList+0xa0>)
 810db84:	681a      	ldr	r2, [r3, #0]
 810db86:	4b0a      	ldr	r3, [pc, #40]	@ (810dbb0 <prvAddCurrentTaskToDelayedList+0x94>)
 810db88:	681b      	ldr	r3, [r3, #0]
 810db8a:	3304      	adds	r3, #4
 810db8c:	4619      	mov	r1, r3
 810db8e:	4610      	mov	r0, r2
 810db90:	f7fe f92d 	bl	810bdee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810db94:	4b0a      	ldr	r3, [pc, #40]	@ (810dbc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 810db96:	681b      	ldr	r3, [r3, #0]
 810db98:	68ba      	ldr	r2, [r7, #8]
 810db9a:	429a      	cmp	r2, r3
 810db9c:	d202      	bcs.n	810dba4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810db9e:	4a08      	ldr	r2, [pc, #32]	@ (810dbc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 810dba0:	68bb      	ldr	r3, [r7, #8]
 810dba2:	6013      	str	r3, [r2, #0]
}
 810dba4:	bf00      	nop
 810dba6:	3710      	adds	r7, #16
 810dba8:	46bd      	mov	sp, r7
 810dbaa:	bd80      	pop	{r7, pc}
 810dbac:	10004eac 	.word	0x10004eac
 810dbb0:	100049d4 	.word	0x100049d4
 810dbb4:	10004e94 	.word	0x10004e94
 810dbb8:	10004e64 	.word	0x10004e64
 810dbbc:	10004e60 	.word	0x10004e60
 810dbc0:	10004ec8 	.word	0x10004ec8

0810dbc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810dbc4:	b580      	push	{r7, lr}
 810dbc6:	b08a      	sub	sp, #40	@ 0x28
 810dbc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810dbca:	2300      	movs	r3, #0
 810dbcc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810dbce:	f000 fb13 	bl	810e1f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810dbd2:	4b1d      	ldr	r3, [pc, #116]	@ (810dc48 <xTimerCreateTimerTask+0x84>)
 810dbd4:	681b      	ldr	r3, [r3, #0]
 810dbd6:	2b00      	cmp	r3, #0
 810dbd8:	d021      	beq.n	810dc1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810dbda:	2300      	movs	r3, #0
 810dbdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810dbde:	2300      	movs	r3, #0
 810dbe0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810dbe2:	1d3a      	adds	r2, r7, #4
 810dbe4:	f107 0108 	add.w	r1, r7, #8
 810dbe8:	f107 030c 	add.w	r3, r7, #12
 810dbec:	4618      	mov	r0, r3
 810dbee:	f7fd fe99 	bl	810b924 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810dbf2:	6879      	ldr	r1, [r7, #4]
 810dbf4:	68bb      	ldr	r3, [r7, #8]
 810dbf6:	68fa      	ldr	r2, [r7, #12]
 810dbf8:	9202      	str	r2, [sp, #8]
 810dbfa:	9301      	str	r3, [sp, #4]
 810dbfc:	2302      	movs	r3, #2
 810dbfe:	9300      	str	r3, [sp, #0]
 810dc00:	2300      	movs	r3, #0
 810dc02:	460a      	mov	r2, r1
 810dc04:	4911      	ldr	r1, [pc, #68]	@ (810dc4c <xTimerCreateTimerTask+0x88>)
 810dc06:	4812      	ldr	r0, [pc, #72]	@ (810dc50 <xTimerCreateTimerTask+0x8c>)
 810dc08:	f7ff f8a2 	bl	810cd50 <xTaskCreateStatic>
 810dc0c:	4603      	mov	r3, r0
 810dc0e:	4a11      	ldr	r2, [pc, #68]	@ (810dc54 <xTimerCreateTimerTask+0x90>)
 810dc10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810dc12:	4b10      	ldr	r3, [pc, #64]	@ (810dc54 <xTimerCreateTimerTask+0x90>)
 810dc14:	681b      	ldr	r3, [r3, #0]
 810dc16:	2b00      	cmp	r3, #0
 810dc18:	d001      	beq.n	810dc1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810dc1a:	2301      	movs	r3, #1
 810dc1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810dc1e:	697b      	ldr	r3, [r7, #20]
 810dc20:	2b00      	cmp	r3, #0
 810dc22:	d10b      	bne.n	810dc3c <xTimerCreateTimerTask+0x78>
	__asm volatile
 810dc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dc28:	f383 8811 	msr	BASEPRI, r3
 810dc2c:	f3bf 8f6f 	isb	sy
 810dc30:	f3bf 8f4f 	dsb	sy
 810dc34:	613b      	str	r3, [r7, #16]
}
 810dc36:	bf00      	nop
 810dc38:	bf00      	nop
 810dc3a:	e7fd      	b.n	810dc38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 810dc3c:	697b      	ldr	r3, [r7, #20]
}
 810dc3e:	4618      	mov	r0, r3
 810dc40:	3718      	adds	r7, #24
 810dc42:	46bd      	mov	sp, r7
 810dc44:	bd80      	pop	{r7, pc}
 810dc46:	bf00      	nop
 810dc48:	10004f04 	.word	0x10004f04
 810dc4c:	08111620 	.word	0x08111620
 810dc50:	0810dd91 	.word	0x0810dd91
 810dc54:	10004f08 	.word	0x10004f08

0810dc58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810dc58:	b580      	push	{r7, lr}
 810dc5a:	b08a      	sub	sp, #40	@ 0x28
 810dc5c:	af00      	add	r7, sp, #0
 810dc5e:	60f8      	str	r0, [r7, #12]
 810dc60:	60b9      	str	r1, [r7, #8]
 810dc62:	607a      	str	r2, [r7, #4]
 810dc64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810dc66:	2300      	movs	r3, #0
 810dc68:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810dc6a:	68fb      	ldr	r3, [r7, #12]
 810dc6c:	2b00      	cmp	r3, #0
 810dc6e:	d10b      	bne.n	810dc88 <xTimerGenericCommand+0x30>
	__asm volatile
 810dc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dc74:	f383 8811 	msr	BASEPRI, r3
 810dc78:	f3bf 8f6f 	isb	sy
 810dc7c:	f3bf 8f4f 	dsb	sy
 810dc80:	623b      	str	r3, [r7, #32]
}
 810dc82:	bf00      	nop
 810dc84:	bf00      	nop
 810dc86:	e7fd      	b.n	810dc84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810dc88:	4b19      	ldr	r3, [pc, #100]	@ (810dcf0 <xTimerGenericCommand+0x98>)
 810dc8a:	681b      	ldr	r3, [r3, #0]
 810dc8c:	2b00      	cmp	r3, #0
 810dc8e:	d02a      	beq.n	810dce6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810dc90:	68bb      	ldr	r3, [r7, #8]
 810dc92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810dc94:	687b      	ldr	r3, [r7, #4]
 810dc96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810dc98:	68fb      	ldr	r3, [r7, #12]
 810dc9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810dc9c:	68bb      	ldr	r3, [r7, #8]
 810dc9e:	2b05      	cmp	r3, #5
 810dca0:	dc18      	bgt.n	810dcd4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810dca2:	f7ff fead 	bl	810da00 <xTaskGetSchedulerState>
 810dca6:	4603      	mov	r3, r0
 810dca8:	2b02      	cmp	r3, #2
 810dcaa:	d109      	bne.n	810dcc0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810dcac:	4b10      	ldr	r3, [pc, #64]	@ (810dcf0 <xTimerGenericCommand+0x98>)
 810dcae:	6818      	ldr	r0, [r3, #0]
 810dcb0:	f107 0110 	add.w	r1, r7, #16
 810dcb4:	2300      	movs	r3, #0
 810dcb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810dcb8:	f7fe fc5a 	bl	810c570 <xQueueGenericSend>
 810dcbc:	6278      	str	r0, [r7, #36]	@ 0x24
 810dcbe:	e012      	b.n	810dce6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810dcc0:	4b0b      	ldr	r3, [pc, #44]	@ (810dcf0 <xTimerGenericCommand+0x98>)
 810dcc2:	6818      	ldr	r0, [r3, #0]
 810dcc4:	f107 0110 	add.w	r1, r7, #16
 810dcc8:	2300      	movs	r3, #0
 810dcca:	2200      	movs	r2, #0
 810dccc:	f7fe fc50 	bl	810c570 <xQueueGenericSend>
 810dcd0:	6278      	str	r0, [r7, #36]	@ 0x24
 810dcd2:	e008      	b.n	810dce6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810dcd4:	4b06      	ldr	r3, [pc, #24]	@ (810dcf0 <xTimerGenericCommand+0x98>)
 810dcd6:	6818      	ldr	r0, [r3, #0]
 810dcd8:	f107 0110 	add.w	r1, r7, #16
 810dcdc:	2300      	movs	r3, #0
 810dcde:	683a      	ldr	r2, [r7, #0]
 810dce0:	f7fe fd48 	bl	810c774 <xQueueGenericSendFromISR>
 810dce4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810dce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810dce8:	4618      	mov	r0, r3
 810dcea:	3728      	adds	r7, #40	@ 0x28
 810dcec:	46bd      	mov	sp, r7
 810dcee:	bd80      	pop	{r7, pc}
 810dcf0:	10004f04 	.word	0x10004f04

0810dcf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810dcf4:	b580      	push	{r7, lr}
 810dcf6:	b088      	sub	sp, #32
 810dcf8:	af02      	add	r7, sp, #8
 810dcfa:	6078      	str	r0, [r7, #4]
 810dcfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810dcfe:	4b23      	ldr	r3, [pc, #140]	@ (810dd8c <prvProcessExpiredTimer+0x98>)
 810dd00:	681b      	ldr	r3, [r3, #0]
 810dd02:	68db      	ldr	r3, [r3, #12]
 810dd04:	68db      	ldr	r3, [r3, #12]
 810dd06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810dd08:	697b      	ldr	r3, [r7, #20]
 810dd0a:	3304      	adds	r3, #4
 810dd0c:	4618      	mov	r0, r3
 810dd0e:	f7fe f8a7 	bl	810be60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810dd12:	697b      	ldr	r3, [r7, #20]
 810dd14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810dd18:	f003 0304 	and.w	r3, r3, #4
 810dd1c:	2b00      	cmp	r3, #0
 810dd1e:	d023      	beq.n	810dd68 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810dd20:	697b      	ldr	r3, [r7, #20]
 810dd22:	699a      	ldr	r2, [r3, #24]
 810dd24:	687b      	ldr	r3, [r7, #4]
 810dd26:	18d1      	adds	r1, r2, r3
 810dd28:	687b      	ldr	r3, [r7, #4]
 810dd2a:	683a      	ldr	r2, [r7, #0]
 810dd2c:	6978      	ldr	r0, [r7, #20]
 810dd2e:	f000 f8d5 	bl	810dedc <prvInsertTimerInActiveList>
 810dd32:	4603      	mov	r3, r0
 810dd34:	2b00      	cmp	r3, #0
 810dd36:	d020      	beq.n	810dd7a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810dd38:	2300      	movs	r3, #0
 810dd3a:	9300      	str	r3, [sp, #0]
 810dd3c:	2300      	movs	r3, #0
 810dd3e:	687a      	ldr	r2, [r7, #4]
 810dd40:	2100      	movs	r1, #0
 810dd42:	6978      	ldr	r0, [r7, #20]
 810dd44:	f7ff ff88 	bl	810dc58 <xTimerGenericCommand>
 810dd48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810dd4a:	693b      	ldr	r3, [r7, #16]
 810dd4c:	2b00      	cmp	r3, #0
 810dd4e:	d114      	bne.n	810dd7a <prvProcessExpiredTimer+0x86>
	__asm volatile
 810dd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd54:	f383 8811 	msr	BASEPRI, r3
 810dd58:	f3bf 8f6f 	isb	sy
 810dd5c:	f3bf 8f4f 	dsb	sy
 810dd60:	60fb      	str	r3, [r7, #12]
}
 810dd62:	bf00      	nop
 810dd64:	bf00      	nop
 810dd66:	e7fd      	b.n	810dd64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810dd68:	697b      	ldr	r3, [r7, #20]
 810dd6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810dd6e:	f023 0301 	bic.w	r3, r3, #1
 810dd72:	b2da      	uxtb	r2, r3
 810dd74:	697b      	ldr	r3, [r7, #20]
 810dd76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810dd7a:	697b      	ldr	r3, [r7, #20]
 810dd7c:	6a1b      	ldr	r3, [r3, #32]
 810dd7e:	6978      	ldr	r0, [r7, #20]
 810dd80:	4798      	blx	r3
}
 810dd82:	bf00      	nop
 810dd84:	3718      	adds	r7, #24
 810dd86:	46bd      	mov	sp, r7
 810dd88:	bd80      	pop	{r7, pc}
 810dd8a:	bf00      	nop
 810dd8c:	10004efc 	.word	0x10004efc

0810dd90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810dd90:	b580      	push	{r7, lr}
 810dd92:	b084      	sub	sp, #16
 810dd94:	af00      	add	r7, sp, #0
 810dd96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810dd98:	f107 0308 	add.w	r3, r7, #8
 810dd9c:	4618      	mov	r0, r3
 810dd9e:	f000 f859 	bl	810de54 <prvGetNextExpireTime>
 810dda2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810dda4:	68bb      	ldr	r3, [r7, #8]
 810dda6:	4619      	mov	r1, r3
 810dda8:	68f8      	ldr	r0, [r7, #12]
 810ddaa:	f000 f805 	bl	810ddb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810ddae:	f000 f8d7 	bl	810df60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810ddb2:	bf00      	nop
 810ddb4:	e7f0      	b.n	810dd98 <prvTimerTask+0x8>
	...

0810ddb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810ddb8:	b580      	push	{r7, lr}
 810ddba:	b084      	sub	sp, #16
 810ddbc:	af00      	add	r7, sp, #0
 810ddbe:	6078      	str	r0, [r7, #4]
 810ddc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810ddc2:	f7ff fa29 	bl	810d218 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810ddc6:	f107 0308 	add.w	r3, r7, #8
 810ddca:	4618      	mov	r0, r3
 810ddcc:	f000 f866 	bl	810de9c <prvSampleTimeNow>
 810ddd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810ddd2:	68bb      	ldr	r3, [r7, #8]
 810ddd4:	2b00      	cmp	r3, #0
 810ddd6:	d130      	bne.n	810de3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810ddd8:	683b      	ldr	r3, [r7, #0]
 810ddda:	2b00      	cmp	r3, #0
 810dddc:	d10a      	bne.n	810ddf4 <prvProcessTimerOrBlockTask+0x3c>
 810ddde:	687a      	ldr	r2, [r7, #4]
 810dde0:	68fb      	ldr	r3, [r7, #12]
 810dde2:	429a      	cmp	r2, r3
 810dde4:	d806      	bhi.n	810ddf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810dde6:	f7ff fa25 	bl	810d234 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810ddea:	68f9      	ldr	r1, [r7, #12]
 810ddec:	6878      	ldr	r0, [r7, #4]
 810ddee:	f7ff ff81 	bl	810dcf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810ddf2:	e024      	b.n	810de3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810ddf4:	683b      	ldr	r3, [r7, #0]
 810ddf6:	2b00      	cmp	r3, #0
 810ddf8:	d008      	beq.n	810de0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810ddfa:	4b13      	ldr	r3, [pc, #76]	@ (810de48 <prvProcessTimerOrBlockTask+0x90>)
 810ddfc:	681b      	ldr	r3, [r3, #0]
 810ddfe:	681b      	ldr	r3, [r3, #0]
 810de00:	2b00      	cmp	r3, #0
 810de02:	d101      	bne.n	810de08 <prvProcessTimerOrBlockTask+0x50>
 810de04:	2301      	movs	r3, #1
 810de06:	e000      	b.n	810de0a <prvProcessTimerOrBlockTask+0x52>
 810de08:	2300      	movs	r3, #0
 810de0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810de0c:	4b0f      	ldr	r3, [pc, #60]	@ (810de4c <prvProcessTimerOrBlockTask+0x94>)
 810de0e:	6818      	ldr	r0, [r3, #0]
 810de10:	687a      	ldr	r2, [r7, #4]
 810de12:	68fb      	ldr	r3, [r7, #12]
 810de14:	1ad3      	subs	r3, r2, r3
 810de16:	683a      	ldr	r2, [r7, #0]
 810de18:	4619      	mov	r1, r3
 810de1a:	f7fe ff65 	bl	810cce8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810de1e:	f7ff fa09 	bl	810d234 <xTaskResumeAll>
 810de22:	4603      	mov	r3, r0
 810de24:	2b00      	cmp	r3, #0
 810de26:	d10a      	bne.n	810de3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810de28:	4b09      	ldr	r3, [pc, #36]	@ (810de50 <prvProcessTimerOrBlockTask+0x98>)
 810de2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810de2e:	601a      	str	r2, [r3, #0]
 810de30:	f3bf 8f4f 	dsb	sy
 810de34:	f3bf 8f6f 	isb	sy
}
 810de38:	e001      	b.n	810de3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810de3a:	f7ff f9fb 	bl	810d234 <xTaskResumeAll>
}
 810de3e:	bf00      	nop
 810de40:	3710      	adds	r7, #16
 810de42:	46bd      	mov	sp, r7
 810de44:	bd80      	pop	{r7, pc}
 810de46:	bf00      	nop
 810de48:	10004f00 	.word	0x10004f00
 810de4c:	10004f04 	.word	0x10004f04
 810de50:	e000ed04 	.word	0xe000ed04

0810de54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810de54:	b480      	push	{r7}
 810de56:	b085      	sub	sp, #20
 810de58:	af00      	add	r7, sp, #0
 810de5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810de5c:	4b0e      	ldr	r3, [pc, #56]	@ (810de98 <prvGetNextExpireTime+0x44>)
 810de5e:	681b      	ldr	r3, [r3, #0]
 810de60:	681b      	ldr	r3, [r3, #0]
 810de62:	2b00      	cmp	r3, #0
 810de64:	d101      	bne.n	810de6a <prvGetNextExpireTime+0x16>
 810de66:	2201      	movs	r2, #1
 810de68:	e000      	b.n	810de6c <prvGetNextExpireTime+0x18>
 810de6a:	2200      	movs	r2, #0
 810de6c:	687b      	ldr	r3, [r7, #4]
 810de6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810de70:	687b      	ldr	r3, [r7, #4]
 810de72:	681b      	ldr	r3, [r3, #0]
 810de74:	2b00      	cmp	r3, #0
 810de76:	d105      	bne.n	810de84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810de78:	4b07      	ldr	r3, [pc, #28]	@ (810de98 <prvGetNextExpireTime+0x44>)
 810de7a:	681b      	ldr	r3, [r3, #0]
 810de7c:	68db      	ldr	r3, [r3, #12]
 810de7e:	681b      	ldr	r3, [r3, #0]
 810de80:	60fb      	str	r3, [r7, #12]
 810de82:	e001      	b.n	810de88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810de84:	2300      	movs	r3, #0
 810de86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810de88:	68fb      	ldr	r3, [r7, #12]
}
 810de8a:	4618      	mov	r0, r3
 810de8c:	3714      	adds	r7, #20
 810de8e:	46bd      	mov	sp, r7
 810de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de94:	4770      	bx	lr
 810de96:	bf00      	nop
 810de98:	10004efc 	.word	0x10004efc

0810de9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810de9c:	b580      	push	{r7, lr}
 810de9e:	b084      	sub	sp, #16
 810dea0:	af00      	add	r7, sp, #0
 810dea2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810dea4:	f7ff fa64 	bl	810d370 <xTaskGetTickCount>
 810dea8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810deaa:	4b0b      	ldr	r3, [pc, #44]	@ (810ded8 <prvSampleTimeNow+0x3c>)
 810deac:	681b      	ldr	r3, [r3, #0]
 810deae:	68fa      	ldr	r2, [r7, #12]
 810deb0:	429a      	cmp	r2, r3
 810deb2:	d205      	bcs.n	810dec0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810deb4:	f000 f93a 	bl	810e12c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810deb8:	687b      	ldr	r3, [r7, #4]
 810deba:	2201      	movs	r2, #1
 810debc:	601a      	str	r2, [r3, #0]
 810debe:	e002      	b.n	810dec6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810dec0:	687b      	ldr	r3, [r7, #4]
 810dec2:	2200      	movs	r2, #0
 810dec4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810dec6:	4a04      	ldr	r2, [pc, #16]	@ (810ded8 <prvSampleTimeNow+0x3c>)
 810dec8:	68fb      	ldr	r3, [r7, #12]
 810deca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810decc:	68fb      	ldr	r3, [r7, #12]
}
 810dece:	4618      	mov	r0, r3
 810ded0:	3710      	adds	r7, #16
 810ded2:	46bd      	mov	sp, r7
 810ded4:	bd80      	pop	{r7, pc}
 810ded6:	bf00      	nop
 810ded8:	10004f0c 	.word	0x10004f0c

0810dedc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810dedc:	b580      	push	{r7, lr}
 810dede:	b086      	sub	sp, #24
 810dee0:	af00      	add	r7, sp, #0
 810dee2:	60f8      	str	r0, [r7, #12]
 810dee4:	60b9      	str	r1, [r7, #8]
 810dee6:	607a      	str	r2, [r7, #4]
 810dee8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810deea:	2300      	movs	r3, #0
 810deec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810deee:	68fb      	ldr	r3, [r7, #12]
 810def0:	68ba      	ldr	r2, [r7, #8]
 810def2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810def4:	68fb      	ldr	r3, [r7, #12]
 810def6:	68fa      	ldr	r2, [r7, #12]
 810def8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810defa:	68ba      	ldr	r2, [r7, #8]
 810defc:	687b      	ldr	r3, [r7, #4]
 810defe:	429a      	cmp	r2, r3
 810df00:	d812      	bhi.n	810df28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810df02:	687a      	ldr	r2, [r7, #4]
 810df04:	683b      	ldr	r3, [r7, #0]
 810df06:	1ad2      	subs	r2, r2, r3
 810df08:	68fb      	ldr	r3, [r7, #12]
 810df0a:	699b      	ldr	r3, [r3, #24]
 810df0c:	429a      	cmp	r2, r3
 810df0e:	d302      	bcc.n	810df16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810df10:	2301      	movs	r3, #1
 810df12:	617b      	str	r3, [r7, #20]
 810df14:	e01b      	b.n	810df4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810df16:	4b10      	ldr	r3, [pc, #64]	@ (810df58 <prvInsertTimerInActiveList+0x7c>)
 810df18:	681a      	ldr	r2, [r3, #0]
 810df1a:	68fb      	ldr	r3, [r7, #12]
 810df1c:	3304      	adds	r3, #4
 810df1e:	4619      	mov	r1, r3
 810df20:	4610      	mov	r0, r2
 810df22:	f7fd ff64 	bl	810bdee <vListInsert>
 810df26:	e012      	b.n	810df4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810df28:	687a      	ldr	r2, [r7, #4]
 810df2a:	683b      	ldr	r3, [r7, #0]
 810df2c:	429a      	cmp	r2, r3
 810df2e:	d206      	bcs.n	810df3e <prvInsertTimerInActiveList+0x62>
 810df30:	68ba      	ldr	r2, [r7, #8]
 810df32:	683b      	ldr	r3, [r7, #0]
 810df34:	429a      	cmp	r2, r3
 810df36:	d302      	bcc.n	810df3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810df38:	2301      	movs	r3, #1
 810df3a:	617b      	str	r3, [r7, #20]
 810df3c:	e007      	b.n	810df4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810df3e:	4b07      	ldr	r3, [pc, #28]	@ (810df5c <prvInsertTimerInActiveList+0x80>)
 810df40:	681a      	ldr	r2, [r3, #0]
 810df42:	68fb      	ldr	r3, [r7, #12]
 810df44:	3304      	adds	r3, #4
 810df46:	4619      	mov	r1, r3
 810df48:	4610      	mov	r0, r2
 810df4a:	f7fd ff50 	bl	810bdee <vListInsert>
		}
	}

	return xProcessTimerNow;
 810df4e:	697b      	ldr	r3, [r7, #20]
}
 810df50:	4618      	mov	r0, r3
 810df52:	3718      	adds	r7, #24
 810df54:	46bd      	mov	sp, r7
 810df56:	bd80      	pop	{r7, pc}
 810df58:	10004f00 	.word	0x10004f00
 810df5c:	10004efc 	.word	0x10004efc

0810df60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810df60:	b580      	push	{r7, lr}
 810df62:	b08e      	sub	sp, #56	@ 0x38
 810df64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810df66:	e0ce      	b.n	810e106 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810df68:	687b      	ldr	r3, [r7, #4]
 810df6a:	2b00      	cmp	r3, #0
 810df6c:	da19      	bge.n	810dfa2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810df6e:	1d3b      	adds	r3, r7, #4
 810df70:	3304      	adds	r3, #4
 810df72:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810df74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810df76:	2b00      	cmp	r3, #0
 810df78:	d10b      	bne.n	810df92 <prvProcessReceivedCommands+0x32>
	__asm volatile
 810df7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810df7e:	f383 8811 	msr	BASEPRI, r3
 810df82:	f3bf 8f6f 	isb	sy
 810df86:	f3bf 8f4f 	dsb	sy
 810df8a:	61fb      	str	r3, [r7, #28]
}
 810df8c:	bf00      	nop
 810df8e:	bf00      	nop
 810df90:	e7fd      	b.n	810df8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810df92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810df94:	681b      	ldr	r3, [r3, #0]
 810df96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810df98:	6850      	ldr	r0, [r2, #4]
 810df9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810df9c:	6892      	ldr	r2, [r2, #8]
 810df9e:	4611      	mov	r1, r2
 810dfa0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810dfa2:	687b      	ldr	r3, [r7, #4]
 810dfa4:	2b00      	cmp	r3, #0
 810dfa6:	f2c0 80ae 	blt.w	810e106 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810dfaa:	68fb      	ldr	r3, [r7, #12]
 810dfac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810dfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dfb0:	695b      	ldr	r3, [r3, #20]
 810dfb2:	2b00      	cmp	r3, #0
 810dfb4:	d004      	beq.n	810dfc0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810dfb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dfb8:	3304      	adds	r3, #4
 810dfba:	4618      	mov	r0, r3
 810dfbc:	f7fd ff50 	bl	810be60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810dfc0:	463b      	mov	r3, r7
 810dfc2:	4618      	mov	r0, r3
 810dfc4:	f7ff ff6a 	bl	810de9c <prvSampleTimeNow>
 810dfc8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810dfca:	687b      	ldr	r3, [r7, #4]
 810dfcc:	2b09      	cmp	r3, #9
 810dfce:	f200 8097 	bhi.w	810e100 <prvProcessReceivedCommands+0x1a0>
 810dfd2:	a201      	add	r2, pc, #4	@ (adr r2, 810dfd8 <prvProcessReceivedCommands+0x78>)
 810dfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810dfd8:	0810e001 	.word	0x0810e001
 810dfdc:	0810e001 	.word	0x0810e001
 810dfe0:	0810e001 	.word	0x0810e001
 810dfe4:	0810e077 	.word	0x0810e077
 810dfe8:	0810e08b 	.word	0x0810e08b
 810dfec:	0810e0d7 	.word	0x0810e0d7
 810dff0:	0810e001 	.word	0x0810e001
 810dff4:	0810e001 	.word	0x0810e001
 810dff8:	0810e077 	.word	0x0810e077
 810dffc:	0810e08b 	.word	0x0810e08b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810e000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e002:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e006:	f043 0301 	orr.w	r3, r3, #1
 810e00a:	b2da      	uxtb	r2, r3
 810e00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e00e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810e012:	68ba      	ldr	r2, [r7, #8]
 810e014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e016:	699b      	ldr	r3, [r3, #24]
 810e018:	18d1      	adds	r1, r2, r3
 810e01a:	68bb      	ldr	r3, [r7, #8]
 810e01c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e01e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e020:	f7ff ff5c 	bl	810dedc <prvInsertTimerInActiveList>
 810e024:	4603      	mov	r3, r0
 810e026:	2b00      	cmp	r3, #0
 810e028:	d06c      	beq.n	810e104 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810e02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e02c:	6a1b      	ldr	r3, [r3, #32]
 810e02e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e030:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810e032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e034:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e038:	f003 0304 	and.w	r3, r3, #4
 810e03c:	2b00      	cmp	r3, #0
 810e03e:	d061      	beq.n	810e104 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810e040:	68ba      	ldr	r2, [r7, #8]
 810e042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e044:	699b      	ldr	r3, [r3, #24]
 810e046:	441a      	add	r2, r3
 810e048:	2300      	movs	r3, #0
 810e04a:	9300      	str	r3, [sp, #0]
 810e04c:	2300      	movs	r3, #0
 810e04e:	2100      	movs	r1, #0
 810e050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e052:	f7ff fe01 	bl	810dc58 <xTimerGenericCommand>
 810e056:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810e058:	6a3b      	ldr	r3, [r7, #32]
 810e05a:	2b00      	cmp	r3, #0
 810e05c:	d152      	bne.n	810e104 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810e05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e062:	f383 8811 	msr	BASEPRI, r3
 810e066:	f3bf 8f6f 	isb	sy
 810e06a:	f3bf 8f4f 	dsb	sy
 810e06e:	61bb      	str	r3, [r7, #24]
}
 810e070:	bf00      	nop
 810e072:	bf00      	nop
 810e074:	e7fd      	b.n	810e072 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810e076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e078:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e07c:	f023 0301 	bic.w	r3, r3, #1
 810e080:	b2da      	uxtb	r2, r3
 810e082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e084:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810e088:	e03d      	b.n	810e106 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810e08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e08c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e090:	f043 0301 	orr.w	r3, r3, #1
 810e094:	b2da      	uxtb	r2, r3
 810e096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e098:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810e09c:	68ba      	ldr	r2, [r7, #8]
 810e09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e0a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810e0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e0a4:	699b      	ldr	r3, [r3, #24]
 810e0a6:	2b00      	cmp	r3, #0
 810e0a8:	d10b      	bne.n	810e0c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810e0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e0ae:	f383 8811 	msr	BASEPRI, r3
 810e0b2:	f3bf 8f6f 	isb	sy
 810e0b6:	f3bf 8f4f 	dsb	sy
 810e0ba:	617b      	str	r3, [r7, #20]
}
 810e0bc:	bf00      	nop
 810e0be:	bf00      	nop
 810e0c0:	e7fd      	b.n	810e0be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810e0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e0c4:	699a      	ldr	r2, [r3, #24]
 810e0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e0c8:	18d1      	adds	r1, r2, r3
 810e0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e0cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e0ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e0d0:	f7ff ff04 	bl	810dedc <prvInsertTimerInActiveList>
					break;
 810e0d4:	e017      	b.n	810e106 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810e0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e0dc:	f003 0302 	and.w	r3, r3, #2
 810e0e0:	2b00      	cmp	r3, #0
 810e0e2:	d103      	bne.n	810e0ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 810e0e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e0e6:	f7fd fd05 	bl	810baf4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810e0ea:	e00c      	b.n	810e106 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810e0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e0ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e0f2:	f023 0301 	bic.w	r3, r3, #1
 810e0f6:	b2da      	uxtb	r2, r3
 810e0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e0fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810e0fe:	e002      	b.n	810e106 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 810e100:	bf00      	nop
 810e102:	e000      	b.n	810e106 <prvProcessReceivedCommands+0x1a6>
					break;
 810e104:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810e106:	4b08      	ldr	r3, [pc, #32]	@ (810e128 <prvProcessReceivedCommands+0x1c8>)
 810e108:	681b      	ldr	r3, [r3, #0]
 810e10a:	1d39      	adds	r1, r7, #4
 810e10c:	2200      	movs	r2, #0
 810e10e:	4618      	mov	r0, r3
 810e110:	f7fe fbce 	bl	810c8b0 <xQueueReceive>
 810e114:	4603      	mov	r3, r0
 810e116:	2b00      	cmp	r3, #0
 810e118:	f47f af26 	bne.w	810df68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 810e11c:	bf00      	nop
 810e11e:	bf00      	nop
 810e120:	3730      	adds	r7, #48	@ 0x30
 810e122:	46bd      	mov	sp, r7
 810e124:	bd80      	pop	{r7, pc}
 810e126:	bf00      	nop
 810e128:	10004f04 	.word	0x10004f04

0810e12c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810e12c:	b580      	push	{r7, lr}
 810e12e:	b088      	sub	sp, #32
 810e130:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810e132:	e049      	b.n	810e1c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810e134:	4b2e      	ldr	r3, [pc, #184]	@ (810e1f0 <prvSwitchTimerLists+0xc4>)
 810e136:	681b      	ldr	r3, [r3, #0]
 810e138:	68db      	ldr	r3, [r3, #12]
 810e13a:	681b      	ldr	r3, [r3, #0]
 810e13c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e13e:	4b2c      	ldr	r3, [pc, #176]	@ (810e1f0 <prvSwitchTimerLists+0xc4>)
 810e140:	681b      	ldr	r3, [r3, #0]
 810e142:	68db      	ldr	r3, [r3, #12]
 810e144:	68db      	ldr	r3, [r3, #12]
 810e146:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810e148:	68fb      	ldr	r3, [r7, #12]
 810e14a:	3304      	adds	r3, #4
 810e14c:	4618      	mov	r0, r3
 810e14e:	f7fd fe87 	bl	810be60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810e152:	68fb      	ldr	r3, [r7, #12]
 810e154:	6a1b      	ldr	r3, [r3, #32]
 810e156:	68f8      	ldr	r0, [r7, #12]
 810e158:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810e15a:	68fb      	ldr	r3, [r7, #12]
 810e15c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e160:	f003 0304 	and.w	r3, r3, #4
 810e164:	2b00      	cmp	r3, #0
 810e166:	d02f      	beq.n	810e1c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810e168:	68fb      	ldr	r3, [r7, #12]
 810e16a:	699b      	ldr	r3, [r3, #24]
 810e16c:	693a      	ldr	r2, [r7, #16]
 810e16e:	4413      	add	r3, r2
 810e170:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810e172:	68ba      	ldr	r2, [r7, #8]
 810e174:	693b      	ldr	r3, [r7, #16]
 810e176:	429a      	cmp	r2, r3
 810e178:	d90e      	bls.n	810e198 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810e17a:	68fb      	ldr	r3, [r7, #12]
 810e17c:	68ba      	ldr	r2, [r7, #8]
 810e17e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810e180:	68fb      	ldr	r3, [r7, #12]
 810e182:	68fa      	ldr	r2, [r7, #12]
 810e184:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810e186:	4b1a      	ldr	r3, [pc, #104]	@ (810e1f0 <prvSwitchTimerLists+0xc4>)
 810e188:	681a      	ldr	r2, [r3, #0]
 810e18a:	68fb      	ldr	r3, [r7, #12]
 810e18c:	3304      	adds	r3, #4
 810e18e:	4619      	mov	r1, r3
 810e190:	4610      	mov	r0, r2
 810e192:	f7fd fe2c 	bl	810bdee <vListInsert>
 810e196:	e017      	b.n	810e1c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810e198:	2300      	movs	r3, #0
 810e19a:	9300      	str	r3, [sp, #0]
 810e19c:	2300      	movs	r3, #0
 810e19e:	693a      	ldr	r2, [r7, #16]
 810e1a0:	2100      	movs	r1, #0
 810e1a2:	68f8      	ldr	r0, [r7, #12]
 810e1a4:	f7ff fd58 	bl	810dc58 <xTimerGenericCommand>
 810e1a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810e1aa:	687b      	ldr	r3, [r7, #4]
 810e1ac:	2b00      	cmp	r3, #0
 810e1ae:	d10b      	bne.n	810e1c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 810e1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e1b4:	f383 8811 	msr	BASEPRI, r3
 810e1b8:	f3bf 8f6f 	isb	sy
 810e1bc:	f3bf 8f4f 	dsb	sy
 810e1c0:	603b      	str	r3, [r7, #0]
}
 810e1c2:	bf00      	nop
 810e1c4:	bf00      	nop
 810e1c6:	e7fd      	b.n	810e1c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810e1c8:	4b09      	ldr	r3, [pc, #36]	@ (810e1f0 <prvSwitchTimerLists+0xc4>)
 810e1ca:	681b      	ldr	r3, [r3, #0]
 810e1cc:	681b      	ldr	r3, [r3, #0]
 810e1ce:	2b00      	cmp	r3, #0
 810e1d0:	d1b0      	bne.n	810e134 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810e1d2:	4b07      	ldr	r3, [pc, #28]	@ (810e1f0 <prvSwitchTimerLists+0xc4>)
 810e1d4:	681b      	ldr	r3, [r3, #0]
 810e1d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810e1d8:	4b06      	ldr	r3, [pc, #24]	@ (810e1f4 <prvSwitchTimerLists+0xc8>)
 810e1da:	681b      	ldr	r3, [r3, #0]
 810e1dc:	4a04      	ldr	r2, [pc, #16]	@ (810e1f0 <prvSwitchTimerLists+0xc4>)
 810e1de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810e1e0:	4a04      	ldr	r2, [pc, #16]	@ (810e1f4 <prvSwitchTimerLists+0xc8>)
 810e1e2:	697b      	ldr	r3, [r7, #20]
 810e1e4:	6013      	str	r3, [r2, #0]
}
 810e1e6:	bf00      	nop
 810e1e8:	3718      	adds	r7, #24
 810e1ea:	46bd      	mov	sp, r7
 810e1ec:	bd80      	pop	{r7, pc}
 810e1ee:	bf00      	nop
 810e1f0:	10004efc 	.word	0x10004efc
 810e1f4:	10004f00 	.word	0x10004f00

0810e1f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810e1f8:	b580      	push	{r7, lr}
 810e1fa:	b082      	sub	sp, #8
 810e1fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810e1fe:	f7fd ff8b 	bl	810c118 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810e202:	4b15      	ldr	r3, [pc, #84]	@ (810e258 <prvCheckForValidListAndQueue+0x60>)
 810e204:	681b      	ldr	r3, [r3, #0]
 810e206:	2b00      	cmp	r3, #0
 810e208:	d120      	bne.n	810e24c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810e20a:	4814      	ldr	r0, [pc, #80]	@ (810e25c <prvCheckForValidListAndQueue+0x64>)
 810e20c:	f7fd fd9e 	bl	810bd4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810e210:	4813      	ldr	r0, [pc, #76]	@ (810e260 <prvCheckForValidListAndQueue+0x68>)
 810e212:	f7fd fd9b 	bl	810bd4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810e216:	4b13      	ldr	r3, [pc, #76]	@ (810e264 <prvCheckForValidListAndQueue+0x6c>)
 810e218:	4a10      	ldr	r2, [pc, #64]	@ (810e25c <prvCheckForValidListAndQueue+0x64>)
 810e21a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810e21c:	4b12      	ldr	r3, [pc, #72]	@ (810e268 <prvCheckForValidListAndQueue+0x70>)
 810e21e:	4a10      	ldr	r2, [pc, #64]	@ (810e260 <prvCheckForValidListAndQueue+0x68>)
 810e220:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810e222:	2300      	movs	r3, #0
 810e224:	9300      	str	r3, [sp, #0]
 810e226:	4b11      	ldr	r3, [pc, #68]	@ (810e26c <prvCheckForValidListAndQueue+0x74>)
 810e228:	4a11      	ldr	r2, [pc, #68]	@ (810e270 <prvCheckForValidListAndQueue+0x78>)
 810e22a:	2110      	movs	r1, #16
 810e22c:	200a      	movs	r0, #10
 810e22e:	f7fe f8ff 	bl	810c430 <xQueueGenericCreateStatic>
 810e232:	4603      	mov	r3, r0
 810e234:	4a08      	ldr	r2, [pc, #32]	@ (810e258 <prvCheckForValidListAndQueue+0x60>)
 810e236:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810e238:	4b07      	ldr	r3, [pc, #28]	@ (810e258 <prvCheckForValidListAndQueue+0x60>)
 810e23a:	681b      	ldr	r3, [r3, #0]
 810e23c:	2b00      	cmp	r3, #0
 810e23e:	d005      	beq.n	810e24c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810e240:	4b05      	ldr	r3, [pc, #20]	@ (810e258 <prvCheckForValidListAndQueue+0x60>)
 810e242:	681b      	ldr	r3, [r3, #0]
 810e244:	490b      	ldr	r1, [pc, #44]	@ (810e274 <prvCheckForValidListAndQueue+0x7c>)
 810e246:	4618      	mov	r0, r3
 810e248:	f7fe fd24 	bl	810cc94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810e24c:	f7fd ff96 	bl	810c17c <vPortExitCritical>
}
 810e250:	bf00      	nop
 810e252:	46bd      	mov	sp, r7
 810e254:	bd80      	pop	{r7, pc}
 810e256:	bf00      	nop
 810e258:	10004f04 	.word	0x10004f04
 810e25c:	10004ed4 	.word	0x10004ed4
 810e260:	10004ee8 	.word	0x10004ee8
 810e264:	10004efc 	.word	0x10004efc
 810e268:	10004f00 	.word	0x10004f00
 810e26c:	10004fb0 	.word	0x10004fb0
 810e270:	10004f10 	.word	0x10004f10
 810e274:	08111628 	.word	0x08111628

0810e278 <ResMgr_Init>:
  * @param  SendFunct : function pointer used to send message to the other core
  * @param  Callback  : function pointer used to publish the status to user side
  * @retval Return Status
  */
ResMgr_Status_t  ResMgr_Init(ResMgrSendMsg_t SendFunct, ResMgrCallback_t Callback)
{
 810e278:	b580      	push	{r7, lr}
 810e27a:	b084      	sub	sp, #16
 810e27c:	af00      	add	r7, sp, #0
 810e27e:	6078      	str	r0, [r7, #4]
 810e280:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 810e282:	2300      	movs	r3, #0
 810e284:	73fb      	strb	r3, [r7, #15]
  uint32_t count = 0;
 810e286:	2300      	movs	r3, #0
 810e288:	60bb      	str	r3, [r7, #8]
  /* lock table modification */
  RESMGR_TBL_LOCK(RESMGR_ID_RESMGR_TABLE);
 810e28a:	201f      	movs	r0, #31
 810e28c:	f7f8 fc48 	bl	8106b20 <HAL_HSEM_FastTake>
 810e290:	4603      	mov	r3, r0
 810e292:	2b00      	cmp	r3, #0
 810e294:	d1f9      	bne.n	810e28a <ResMgr_Init+0x12>

  /* Check whether the resource is free */
  if(ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State != RESMGR_STATE_TBL_INIT)
 810e296:	4b43      	ldr	r3, [pc, #268]	@ (810e3a4 <ResMgr_Init+0x12c>)
 810e298:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 810e29c:	2b5a      	cmp	r3, #90	@ 0x5a
 810e29e:	d062      	beq.n	810e366 <ResMgr_Init+0xee>
  {

#if defined(RESMGR_USE_DEFAULT_TBL)
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 810e2a0:	e05a      	b.n	810e358 <ResMgr_Init+0xe0>
    {
      if(Default_ResTbl[count] != RES_DEFAULT_ASSIGN_NONE)
 810e2a2:	4a41      	ldr	r2, [pc, #260]	@ (810e3a8 <ResMgr_Init+0x130>)
 810e2a4:	68bb      	ldr	r3, [r7, #8]
 810e2a6:	4413      	add	r3, r2
 810e2a8:	781b      	ldrb	r3, [r3, #0]
 810e2aa:	2b00      	cmp	r3, #0
 810e2ac:	d02a      	beq.n	810e304 <ResMgr_Init+0x8c>
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_ASSIGNED;
 810e2ae:	493d      	ldr	r1, [pc, #244]	@ (810e3a4 <ResMgr_Init+0x12c>)
 810e2b0:	68ba      	ldr	r2, [r7, #8]
 810e2b2:	4613      	mov	r3, r2
 810e2b4:	009b      	lsls	r3, r3, #2
 810e2b6:	4413      	add	r3, r2
 810e2b8:	009b      	lsls	r3, r3, #2
 810e2ba:	440b      	add	r3, r1
 810e2bc:	3308      	adds	r3, #8
 810e2be:	2201      	movs	r2, #1
 810e2c0:	601a      	str	r2, [r3, #0]
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU1)
 810e2c2:	4a39      	ldr	r2, [pc, #228]	@ (810e3a8 <ResMgr_Init+0x130>)
 810e2c4:	68bb      	ldr	r3, [r7, #8]
 810e2c6:	4413      	add	r3, r2
 810e2c8:	781b      	ldrb	r3, [r3, #0]
 810e2ca:	2b01      	cmp	r3, #1
 810e2cc:	d109      	bne.n	810e2e2 <ResMgr_Init+0x6a>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU1;
 810e2ce:	4935      	ldr	r1, [pc, #212]	@ (810e3a4 <ResMgr_Init+0x12c>)
 810e2d0:	68ba      	ldr	r2, [r7, #8]
 810e2d2:	4613      	mov	r3, r2
 810e2d4:	009b      	lsls	r3, r3, #2
 810e2d6:	4413      	add	r3, r2
 810e2d8:	009b      	lsls	r3, r3, #2
 810e2da:	440b      	add	r3, r1
 810e2dc:	3304      	adds	r3, #4
 810e2de:	2208      	movs	r2, #8
 810e2e0:	601a      	str	r2, [r3, #0]
        }
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU2)
 810e2e2:	4a31      	ldr	r2, [pc, #196]	@ (810e3a8 <ResMgr_Init+0x130>)
 810e2e4:	68bb      	ldr	r3, [r7, #8]
 810e2e6:	4413      	add	r3, r2
 810e2e8:	781b      	ldrb	r3, [r3, #0]
 810e2ea:	2b02      	cmp	r3, #2
 810e2ec:	d11e      	bne.n	810e32c <ResMgr_Init+0xb4>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU2;
 810e2ee:	492d      	ldr	r1, [pc, #180]	@ (810e3a4 <ResMgr_Init+0x12c>)
 810e2f0:	68ba      	ldr	r2, [r7, #8]
 810e2f2:	4613      	mov	r3, r2
 810e2f4:	009b      	lsls	r3, r3, #2
 810e2f6:	4413      	add	r3, r2
 810e2f8:	009b      	lsls	r3, r3, #2
 810e2fa:	440b      	add	r3, r1
 810e2fc:	3304      	adds	r3, #4
 810e2fe:	2210      	movs	r2, #16
 810e300:	601a      	str	r2, [r3, #0]
 810e302:	e013      	b.n	810e32c <ResMgr_Init+0xb4>
        }
      }
      else
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
 810e304:	4927      	ldr	r1, [pc, #156]	@ (810e3a4 <ResMgr_Init+0x12c>)
 810e306:	68ba      	ldr	r2, [r7, #8]
 810e308:	4613      	mov	r3, r2
 810e30a:	009b      	lsls	r3, r3, #2
 810e30c:	4413      	add	r3, r2
 810e30e:	009b      	lsls	r3, r3, #2
 810e310:	440b      	add	r3, r1
 810e312:	3308      	adds	r3, #8
 810e314:	2200      	movs	r2, #0
 810e316:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[count].Ctx.Flags = 0;
 810e318:	4922      	ldr	r1, [pc, #136]	@ (810e3a4 <ResMgr_Init+0x12c>)
 810e31a:	68ba      	ldr	r2, [r7, #8]
 810e31c:	4613      	mov	r3, r2
 810e31e:	009b      	lsls	r3, r3, #2
 810e320:	4413      	add	r3, r2
 810e322:	009b      	lsls	r3, r3, #2
 810e324:	440b      	add	r3, r1
 810e326:	3304      	adds	r3, #4
 810e328:	2200      	movs	r2, #0
 810e32a:	601a      	str	r2, [r3, #0]
      }
      ResMgr_Tbl[count].Spinlock = 0;
 810e32c:	491d      	ldr	r1, [pc, #116]	@ (810e3a4 <ResMgr_Init+0x12c>)
 810e32e:	68ba      	ldr	r2, [r7, #8]
 810e330:	4613      	mov	r3, r2
 810e332:	009b      	lsls	r3, r3, #2
 810e334:	4413      	add	r3, r2
 810e336:	009b      	lsls	r3, r3, #2
 810e338:	440b      	add	r3, r1
 810e33a:	2200      	movs	r2, #0
 810e33c:	601a      	str	r2, [r3, #0]
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
 810e33e:	4919      	ldr	r1, [pc, #100]	@ (810e3a4 <ResMgr_Init+0x12c>)
 810e340:	68ba      	ldr	r2, [r7, #8]
 810e342:	4613      	mov	r3, r2
 810e344:	009b      	lsls	r3, r3, #2
 810e346:	4413      	add	r3, r2
 810e348:	009b      	lsls	r3, r3, #2
 810e34a:	440b      	add	r3, r1
 810e34c:	3310      	adds	r3, #16
 810e34e:	2200      	movs	r2, #0
 810e350:	601a      	str	r2, [r3, #0]
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 810e352:	68bb      	ldr	r3, [r7, #8]
 810e354:	3301      	adds	r3, #1
 810e356:	60bb      	str	r3, [r7, #8]
 810e358:	68bb      	ldr	r3, [r7, #8]
 810e35a:	2b15      	cmp	r3, #21
 810e35c:	d9a1      	bls.n	810e2a2 <ResMgr_Init+0x2a>
      ResMgr_Tbl[count].Ctx.Flags = 0;
      ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
    }
#endif /* RESMGR_USE_DEFAULT_TBL */
    ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State = RESMGR_STATE_TBL_INIT;
 810e35e:	4b11      	ldr	r3, [pc, #68]	@ (810e3a4 <ResMgr_Init+0x12c>)
 810e360:	225a      	movs	r2, #90	@ 0x5a
 810e362:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
  }

  RESMGR_TBL_UNLOCK(RESMGR_ID_RESMGR_TABLE);
 810e366:	2100      	movs	r1, #0
 810e368:	201f      	movs	r0, #31
 810e36a:	f7f8 fbf3 	bl	8106b54 <HAL_HSEM_Release>

  if((SendFunct != NULL) || (Callback != NULL))
 810e36e:	687b      	ldr	r3, [r7, #4]
 810e370:	2b00      	cmp	r3, #0
 810e372:	d102      	bne.n	810e37a <ResMgr_Init+0x102>
 810e374:	683b      	ldr	r3, [r7, #0]
 810e376:	2b00      	cmp	r3, #0
 810e378:	d00c      	beq.n	810e394 <ResMgr_Init+0x11c>
  {
    ResMgrSendMsgFunct = SendFunct;
 810e37a:	4a0c      	ldr	r2, [pc, #48]	@ (810e3ac <ResMgr_Init+0x134>)
 810e37c:	687b      	ldr	r3, [r7, #4]
 810e37e:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct = Callback;
 810e380:	4a0b      	ldr	r2, [pc, #44]	@ (810e3b0 <ResMgr_Init+0x138>)
 810e382:	683b      	ldr	r3, [r7, #0]
 810e384:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct(RESMGR_ID_ALL, RESMGR_MSG_INIT);
 810e386:	4b0a      	ldr	r3, [pc, #40]	@ (810e3b0 <ResMgr_Init+0x138>)
 810e388:	681b      	ldr	r3, [r3, #0]
 810e38a:	2100      	movs	r1, #0
 810e38c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 810e390:	4798      	blx	r3
 810e392:	e001      	b.n	810e398 <ResMgr_Init+0x120>
  }
  else
  {
    ret = RESMGR_ERROR;
 810e394:	2301      	movs	r3, #1
 810e396:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 810e398:	7bfb      	ldrb	r3, [r7, #15]
}
 810e39a:	4618      	mov	r0, r3
 810e39c:	3710      	adds	r7, #16
 810e39e:	46bd      	mov	sp, r7
 810e3a0:	bd80      	pop	{r7, pc}
 810e3a2:	bf00      	nop
 810e3a4:	100001dc 	.word	0x100001dc
 810e3a8:	081116c0 	.word	0x081116c0
 810e3ac:	10005000 	.word	0x10005000
 810e3b0:	10005004 	.word	0x10005004

0810e3b4 <ResMgr_Request>:
  * @param  prio: Request priority
  * @param  phandle: resource driver handle
  * @retval Status
  */
ResMgr_Status_t  ResMgr_Request ( uint32_t id, uint32_t flags, uint32_t prio, void *phandle)
{
 810e3b4:	b580      	push	{r7, lr}
 810e3b6:	b086      	sub	sp, #24
 810e3b8:	af00      	add	r7, sp, #0
 810e3ba:	60f8      	str	r0, [r7, #12]
 810e3bc:	60b9      	str	r1, [r7, #8]
 810e3be:	607a      	str	r2, [r7, #4]
 810e3c0:	603b      	str	r3, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 810e3c2:	2300      	movs	r3, #0
 810e3c4:	75fb      	strb	r3, [r7, #23]

  if(id < RESMGR_ENTRY_NBR)
 810e3c6:	68fb      	ldr	r3, [r7, #12]
 810e3c8:	2b15      	cmp	r3, #21
 810e3ca:	f200 80f5 	bhi.w	810e5b8 <ResMgr_Request+0x204>
  {
    /* lock table modification*/

    RESMGR_TBL_LOCK(id);
 810e3ce:	201f      	movs	r0, #31
 810e3d0:	f7f8 fba6 	bl	8106b20 <HAL_HSEM_FastTake>
 810e3d4:	4603      	mov	r3, r0
 810e3d6:	2b00      	cmp	r3, #0
 810e3d8:	d1f9      	bne.n	810e3ce <ResMgr_Request+0x1a>

    /* Check whether the resource is free */
    /* Or the resource is assigned by default to the current Core*/
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 810e3da:	497b      	ldr	r1, [pc, #492]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e3dc:	68fa      	ldr	r2, [r7, #12]
 810e3de:	4613      	mov	r3, r2
 810e3e0:	009b      	lsls	r3, r3, #2
 810e3e2:	4413      	add	r3, r2
 810e3e4:	009b      	lsls	r3, r3, #2
 810e3e6:	440b      	add	r3, r1
 810e3e8:	3308      	adds	r3, #8
 810e3ea:	681b      	ldr	r3, [r3, #0]
 810e3ec:	2b00      	cmp	r3, #0
 810e3ee:	d019      	beq.n	810e424 <ResMgr_Request+0x70>
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 810e3f0:	4975      	ldr	r1, [pc, #468]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e3f2:	68fa      	ldr	r2, [r7, #12]
 810e3f4:	4613      	mov	r3, r2
 810e3f6:	009b      	lsls	r3, r3, #2
 810e3f8:	4413      	add	r3, r2
 810e3fa:	009b      	lsls	r3, r3, #2
 810e3fc:	440b      	add	r3, r1
 810e3fe:	3308      	adds	r3, #8
 810e400:	681b      	ldr	r3, [r3, #0]
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 810e402:	2b01      	cmp	r3, #1
 810e404:	d165      	bne.n	810e4d2 <ResMgr_Request+0x11e>
        (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) == (flags & RESMGR_FLAGS_OWNER_MSK)))
 810e406:	4970      	ldr	r1, [pc, #448]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e408:	68fa      	ldr	r2, [r7, #12]
 810e40a:	4613      	mov	r3, r2
 810e40c:	009b      	lsls	r3, r3, #2
 810e40e:	4413      	add	r3, r2
 810e410:	009b      	lsls	r3, r3, #2
 810e412:	440b      	add	r3, r1
 810e414:	3304      	adds	r3, #4
 810e416:	681a      	ldr	r2, [r3, #0]
 810e418:	68bb      	ldr	r3, [r7, #8]
 810e41a:	4053      	eors	r3, r2
 810e41c:	f003 0318 	and.w	r3, r3, #24
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 810e420:	2b00      	cmp	r3, #0
 810e422:	d156      	bne.n	810e4d2 <ResMgr_Request+0x11e>
    {

      if(phandle != NULL)
 810e424:	683b      	ldr	r3, [r7, #0]
 810e426:	2b00      	cmp	r3, #0
 810e428:	d02c      	beq.n	810e484 <ResMgr_Request+0xd0>
      {
        if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 810e42a:	68bb      	ldr	r3, [r7, #8]
 810e42c:	f003 0301 	and.w	r3, r3, #1
 810e430:	2b00      	cmp	r3, #0
 810e432:	d01d      	beq.n	810e470 <ResMgr_Request+0xbc>
        {
          if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 810e434:	4964      	ldr	r1, [pc, #400]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e436:	68fa      	ldr	r2, [r7, #12]
 810e438:	4613      	mov	r3, r2
 810e43a:	009b      	lsls	r3, r3, #2
 810e43c:	4413      	add	r3, r2
 810e43e:	009b      	lsls	r3, r3, #2
 810e440:	440b      	add	r3, r1
 810e442:	3310      	adds	r3, #16
 810e444:	681b      	ldr	r3, [r3, #0]
 810e446:	2b00      	cmp	r3, #0
 810e448:	d00c      	beq.n	810e464 <ResMgr_Request+0xb0>
          {
            *((uint32_t *)phandle) = (uint32_t ) (uint32_t *)ResMgr_Tbl[id].Ctx.pHandle;
 810e44a:	495f      	ldr	r1, [pc, #380]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e44c:	68fa      	ldr	r2, [r7, #12]
 810e44e:	4613      	mov	r3, r2
 810e450:	009b      	lsls	r3, r3, #2
 810e452:	4413      	add	r3, r2
 810e454:	009b      	lsls	r3, r3, #2
 810e456:	440b      	add	r3, r1
 810e458:	3310      	adds	r3, #16
 810e45a:	681b      	ldr	r3, [r3, #0]
 810e45c:	461a      	mov	r2, r3
 810e45e:	683b      	ldr	r3, [r7, #0]
 810e460:	601a      	str	r2, [r3, #0]
 810e462:	e00f      	b.n	810e484 <ResMgr_Request+0xd0>
          }
          else
          {
            RESMGR_TBL_UNLOCK(id);
 810e464:	2100      	movs	r1, #0
 810e466:	201f      	movs	r0, #31
 810e468:	f7f8 fb74 	bl	8106b54 <HAL_HSEM_Release>
            return  RESMGR_ERROR;
 810e46c:	2301      	movs	r3, #1
 810e46e:	e0a6      	b.n	810e5be <ResMgr_Request+0x20a>
          }
        }
        else
        {
          ResMgr_Tbl[id].Ctx.pHandle = phandle;
 810e470:	4955      	ldr	r1, [pc, #340]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e472:	68fa      	ldr	r2, [r7, #12]
 810e474:	4613      	mov	r3, r2
 810e476:	009b      	lsls	r3, r3, #2
 810e478:	4413      	add	r3, r2
 810e47a:	009b      	lsls	r3, r3, #2
 810e47c:	440b      	add	r3, r1
 810e47e:	3310      	adds	r3, #16
 810e480:	683a      	ldr	r2, [r7, #0]
 810e482:	601a      	str	r2, [r3, #0]
        }
      }
      /* Resource free, update the table and send a message */
      ResMgr_Tbl[id].Ctx.Flags = (flags & ~RESMGR_FLAGS_ACCESS_MSK) | \
 810e484:	68bb      	ldr	r3, [r7, #8]
 810e486:	f023 0306 	bic.w	r3, r3, #6
 810e48a:	f043 0102 	orr.w	r1, r3, #2
 810e48e:	484e      	ldr	r0, [pc, #312]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e490:	68fa      	ldr	r2, [r7, #12]
 810e492:	4613      	mov	r3, r2
 810e494:	009b      	lsls	r3, r3, #2
 810e496:	4413      	add	r3, r2
 810e498:	009b      	lsls	r3, r3, #2
 810e49a:	4403      	add	r3, r0
 810e49c:	3304      	adds	r3, #4
 810e49e:	6019      	str	r1, [r3, #0]
        RESMGR_FLAGS_ACCESS_NORMAL;

      ResMgr_Tbl[id].Ctx.State = RESMGR_STATE_ASSIGNED;
 810e4a0:	4949      	ldr	r1, [pc, #292]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e4a2:	68fa      	ldr	r2, [r7, #12]
 810e4a4:	4613      	mov	r3, r2
 810e4a6:	009b      	lsls	r3, r3, #2
 810e4a8:	4413      	add	r3, r2
 810e4aa:	009b      	lsls	r3, r3, #2
 810e4ac:	440b      	add	r3, r1
 810e4ae:	3308      	adds	r3, #8
 810e4b0:	2201      	movs	r2, #1
 810e4b2:	601a      	str	r2, [r3, #0]
      RESMGR_TBL_UNLOCK(id);
 810e4b4:	2100      	movs	r1, #0
 810e4b6:	201f      	movs	r0, #31
 810e4b8:	f7f8 fb4c 	bl	8106b54 <HAL_HSEM_Release>
      ResMgrSendMsgFunct(id, RESMGR_MSG_ASSIGN);
 810e4bc:	4b43      	ldr	r3, [pc, #268]	@ (810e5cc <ResMgr_Request+0x218>)
 810e4be:	681b      	ldr	r3, [r3, #0]
 810e4c0:	2101      	movs	r1, #1
 810e4c2:	68f8      	ldr	r0, [r7, #12]
 810e4c4:	4798      	blx	r3
      ResMgrCallbackFunct(id, RESMGR_MSG_ASSIGNED);
 810e4c6:	4b42      	ldr	r3, [pc, #264]	@ (810e5d0 <ResMgr_Request+0x21c>)
 810e4c8:	681b      	ldr	r3, [r3, #0]
 810e4ca:	2111      	movs	r1, #17
 810e4cc:	68f8      	ldr	r0, [r7, #12]
 810e4ce:	4798      	blx	r3
 810e4d0:	e074      	b.n	810e5bc <ResMgr_Request+0x208>
    }
    else  /* Resource already used, update the table and send a message */
    {
      ret = RESMGR_BUSY;
 810e4d2:	2302      	movs	r3, #2
 810e4d4:	75fb      	strb	r3, [r7, #23]

      /* is the request for normal access, reject*/
      if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_NORMAL)
 810e4d6:	68bb      	ldr	r3, [r7, #8]
 810e4d8:	f003 0306 	and.w	r3, r3, #6
 810e4dc:	2b02      	cmp	r3, #2
 810e4de:	d10e      	bne.n	810e4fe <ResMgr_Request+0x14a>
      {
        RESMGR_TBL_UNLOCK(id);
 810e4e0:	2100      	movs	r1, #0
 810e4e2:	201f      	movs	r0, #31
 810e4e4:	f7f8 fb36 	bl	8106b54 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_REJECT);
 810e4e8:	4b38      	ldr	r3, [pc, #224]	@ (810e5cc <ResMgr_Request+0x218>)
 810e4ea:	681b      	ldr	r3, [r3, #0]
 810e4ec:	2105      	movs	r1, #5
 810e4ee:	68f8      	ldr	r0, [r7, #12]
 810e4f0:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_REJECTED);
 810e4f2:	4b37      	ldr	r3, [pc, #220]	@ (810e5d0 <ResMgr_Request+0x21c>)
 810e4f4:	681b      	ldr	r3, [r3, #0]
 810e4f6:	2115      	movs	r1, #21
 810e4f8:	68f8      	ldr	r0, [r7, #12]
 810e4fa:	4798      	blx	r3
 810e4fc:	e05e      	b.n	810e5bc <ResMgr_Request+0x208>
      }

      /* it is a pend request? */
      else if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_PEND)
 810e4fe:	68bb      	ldr	r3, [r7, #8]
 810e500:	f003 0306 	and.w	r3, r3, #6
 810e504:	2b04      	cmp	r3, #4
 810e506:	d154      	bne.n	810e5b2 <ResMgr_Request+0x1fe>
      {
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810e508:	492f      	ldr	r1, [pc, #188]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e50a:	68fa      	ldr	r2, [r7, #12]
 810e50c:	4613      	mov	r3, r2
 810e50e:	009b      	lsls	r3, r3, #2
 810e510:	4413      	add	r3, r2
 810e512:	009b      	lsls	r3, r3, #2
 810e514:	440b      	add	r3, r1
 810e516:	3304      	adds	r3, #4
 810e518:	681b      	ldr	r3, [r3, #0]
 810e51a:	f003 0218 	and.w	r2, r3, #24
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 810e51e:	68bb      	ldr	r3, [r7, #8]
 810e520:	f023 0306 	bic.w	r3, r3, #6
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810e524:	4313      	orrs	r3, r2
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 810e526:	f043 0104 	orr.w	r1, r3, #4
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810e52a:	4827      	ldr	r0, [pc, #156]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e52c:	68fa      	ldr	r2, [r7, #12]
 810e52e:	4613      	mov	r3, r2
 810e530:	009b      	lsls	r3, r3, #2
 810e532:	4413      	add	r3, r2
 810e534:	009b      	lsls	r3, r3, #2
 810e536:	4403      	add	r3, r0
 810e538:	3304      	adds	r3, #4
 810e53a:	6019      	str	r1, [r3, #0]

        if(phandle != NULL)
 810e53c:	683b      	ldr	r3, [r7, #0]
 810e53e:	2b00      	cmp	r3, #0
 810e540:	d028      	beq.n	810e594 <ResMgr_Request+0x1e0>
        {
          if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 810e542:	68bb      	ldr	r3, [r7, #8]
 810e544:	f003 0301 	and.w	r3, r3, #1
 810e548:	2b00      	cmp	r3, #0
 810e54a:	d019      	beq.n	810e580 <ResMgr_Request+0x1cc>
          {
            if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 810e54c:	491e      	ldr	r1, [pc, #120]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e54e:	68fa      	ldr	r2, [r7, #12]
 810e550:	4613      	mov	r3, r2
 810e552:	009b      	lsls	r3, r3, #2
 810e554:	4413      	add	r3, r2
 810e556:	009b      	lsls	r3, r3, #2
 810e558:	440b      	add	r3, r1
 810e55a:	3310      	adds	r3, #16
 810e55c:	681b      	ldr	r3, [r3, #0]
 810e55e:	2b00      	cmp	r3, #0
 810e560:	d00c      	beq.n	810e57c <ResMgr_Request+0x1c8>
            {
              *((uint32_t *)phandle) = (uint32_t )(uint32_t *) ResMgr_Tbl[id].Ctx.pHandle;
 810e562:	4919      	ldr	r1, [pc, #100]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e564:	68fa      	ldr	r2, [r7, #12]
 810e566:	4613      	mov	r3, r2
 810e568:	009b      	lsls	r3, r3, #2
 810e56a:	4413      	add	r3, r2
 810e56c:	009b      	lsls	r3, r3, #2
 810e56e:	440b      	add	r3, r1
 810e570:	3310      	adds	r3, #16
 810e572:	681b      	ldr	r3, [r3, #0]
 810e574:	461a      	mov	r2, r3
 810e576:	683b      	ldr	r3, [r7, #0]
 810e578:	601a      	str	r2, [r3, #0]
 810e57a:	e00b      	b.n	810e594 <ResMgr_Request+0x1e0>
            }
            else
            {
              return  RESMGR_ERROR;
 810e57c:	2301      	movs	r3, #1
 810e57e:	e01e      	b.n	810e5be <ResMgr_Request+0x20a>
            }
          }
          else
          {
            ResMgr_Tbl[id].Ctx.pHandle = phandle;
 810e580:	4911      	ldr	r1, [pc, #68]	@ (810e5c8 <ResMgr_Request+0x214>)
 810e582:	68fa      	ldr	r2, [r7, #12]
 810e584:	4613      	mov	r3, r2
 810e586:	009b      	lsls	r3, r3, #2
 810e588:	4413      	add	r3, r2
 810e58a:	009b      	lsls	r3, r3, #2
 810e58c:	440b      	add	r3, r1
 810e58e:	3310      	adds	r3, #16
 810e590:	683a      	ldr	r2, [r7, #0]
 810e592:	601a      	str	r2, [r3, #0]
          }
        }
        RESMGR_TBL_UNLOCK(id);
 810e594:	2100      	movs	r1, #0
 810e596:	201f      	movs	r0, #31
 810e598:	f7f8 fadc 	bl	8106b54 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_PEND);
 810e59c:	4b0b      	ldr	r3, [pc, #44]	@ (810e5cc <ResMgr_Request+0x218>)
 810e59e:	681b      	ldr	r3, [r3, #0]
 810e5a0:	2104      	movs	r1, #4
 810e5a2:	68f8      	ldr	r0, [r7, #12]
 810e5a4:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_PENDED);
 810e5a6:	4b0a      	ldr	r3, [pc, #40]	@ (810e5d0 <ResMgr_Request+0x21c>)
 810e5a8:	681b      	ldr	r3, [r3, #0]
 810e5aa:	2114      	movs	r1, #20
 810e5ac:	68f8      	ldr	r0, [r7, #12]
 810e5ae:	4798      	blx	r3
 810e5b0:	e004      	b.n	810e5bc <ResMgr_Request+0x208>
      }
      else
      {
        ret = RESMGR_ERROR;
 810e5b2:	2301      	movs	r3, #1
 810e5b4:	75fb      	strb	r3, [r7, #23]
 810e5b6:	e001      	b.n	810e5bc <ResMgr_Request+0x208>
    }

  }
  else
  {
    ret = RESMGR_ERROR;
 810e5b8:	2301      	movs	r3, #1
 810e5ba:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 810e5bc:	7dfb      	ldrb	r3, [r7, #23]
}
 810e5be:	4618      	mov	r0, r3
 810e5c0:	3718      	adds	r7, #24
 810e5c2:	46bd      	mov	sp, r7
 810e5c4:	bd80      	pop	{r7, pc}
 810e5c6:	bf00      	nop
 810e5c8:	100001dc 	.word	0x100001dc
 810e5cc:	10005000 	.word	0x10005000
 810e5d0:	10005004 	.word	0x10005004

0810e5d4 <_ZdlPvj>:
 810e5d4:	f000 b8d8 	b.w	810e788 <_ZdlPv>

0810e5d8 <_Znwj>:
 810e5d8:	2801      	cmp	r0, #1
 810e5da:	bf38      	it	cc
 810e5dc:	2001      	movcc	r0, #1
 810e5de:	b510      	push	{r4, lr}
 810e5e0:	4604      	mov	r4, r0
 810e5e2:	4620      	mov	r0, r4
 810e5e4:	f000 f8e2 	bl	810e7ac <malloc>
 810e5e8:	b100      	cbz	r0, 810e5ec <_Znwj+0x14>
 810e5ea:	bd10      	pop	{r4, pc}
 810e5ec:	f000 f8ce 	bl	810e78c <_ZSt15get_new_handlerv>
 810e5f0:	b908      	cbnz	r0, 810e5f6 <_Znwj+0x1e>
 810e5f2:	f000 f8d3 	bl	810e79c <abort>
 810e5f6:	4780      	blx	r0
 810e5f8:	e7f3      	b.n	810e5e2 <_Znwj+0xa>

0810e5fa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 810e5fa:	68c3      	ldr	r3, [r0, #12]
 810e5fc:	689a      	ldr	r2, [r3, #8]
 810e5fe:	b510      	push	{r4, lr}
 810e600:	60c2      	str	r2, [r0, #12]
 810e602:	b102      	cbz	r2, 810e606 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 810e604:	6050      	str	r0, [r2, #4]
 810e606:	6842      	ldr	r2, [r0, #4]
 810e608:	605a      	str	r2, [r3, #4]
 810e60a:	680c      	ldr	r4, [r1, #0]
 810e60c:	4284      	cmp	r4, r0
 810e60e:	d103      	bne.n	810e618 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 810e610:	600b      	str	r3, [r1, #0]
 810e612:	6098      	str	r0, [r3, #8]
 810e614:	6043      	str	r3, [r0, #4]
 810e616:	bd10      	pop	{r4, pc}
 810e618:	6891      	ldr	r1, [r2, #8]
 810e61a:	4281      	cmp	r1, r0
 810e61c:	bf0c      	ite	eq
 810e61e:	6093      	streq	r3, [r2, #8]
 810e620:	60d3      	strne	r3, [r2, #12]
 810e622:	e7f6      	b.n	810e612 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0810e624 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 810e624:	6883      	ldr	r3, [r0, #8]
 810e626:	68da      	ldr	r2, [r3, #12]
 810e628:	b510      	push	{r4, lr}
 810e62a:	6082      	str	r2, [r0, #8]
 810e62c:	b102      	cbz	r2, 810e630 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 810e62e:	6050      	str	r0, [r2, #4]
 810e630:	6842      	ldr	r2, [r0, #4]
 810e632:	605a      	str	r2, [r3, #4]
 810e634:	680c      	ldr	r4, [r1, #0]
 810e636:	4284      	cmp	r4, r0
 810e638:	d103      	bne.n	810e642 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 810e63a:	600b      	str	r3, [r1, #0]
 810e63c:	60d8      	str	r0, [r3, #12]
 810e63e:	6043      	str	r3, [r0, #4]
 810e640:	bd10      	pop	{r4, pc}
 810e642:	68d1      	ldr	r1, [r2, #12]
 810e644:	4281      	cmp	r1, r0
 810e646:	bf0c      	ite	eq
 810e648:	60d3      	streq	r3, [r2, #12]
 810e64a:	6093      	strne	r3, [r2, #8]
 810e64c:	e7f6      	b.n	810e63c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0810e64e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 810e64e:	68c2      	ldr	r2, [r0, #12]
 810e650:	4603      	mov	r3, r0
 810e652:	b122      	cbz	r2, 810e65e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 810e654:	4610      	mov	r0, r2
 810e656:	6892      	ldr	r2, [r2, #8]
 810e658:	2a00      	cmp	r2, #0
 810e65a:	d1fb      	bne.n	810e654 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x6>
 810e65c:	4770      	bx	lr
 810e65e:	6840      	ldr	r0, [r0, #4]
 810e660:	68c2      	ldr	r2, [r0, #12]
 810e662:	429a      	cmp	r2, r3
 810e664:	d004      	beq.n	810e670 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x22>
 810e666:	68da      	ldr	r2, [r3, #12]
 810e668:	4290      	cmp	r0, r2
 810e66a:	bf08      	it	eq
 810e66c:	4618      	moveq	r0, r3
 810e66e:	4770      	bx	lr
 810e670:	4603      	mov	r3, r0
 810e672:	6840      	ldr	r0, [r0, #4]
 810e674:	e7f4      	b.n	810e660 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x12>

0810e676 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 810e676:	7802      	ldrb	r2, [r0, #0]
 810e678:	4603      	mov	r3, r0
 810e67a:	b92a      	cbnz	r2, 810e688 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 810e67c:	6842      	ldr	r2, [r0, #4]
 810e67e:	6852      	ldr	r2, [r2, #4]
 810e680:	4282      	cmp	r2, r0
 810e682:	d101      	bne.n	810e688 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 810e684:	68d0      	ldr	r0, [r2, #12]
 810e686:	4770      	bx	lr
 810e688:	689a      	ldr	r2, [r3, #8]
 810e68a:	b122      	cbz	r2, 810e696 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 810e68c:	4610      	mov	r0, r2
 810e68e:	68d2      	ldr	r2, [r2, #12]
 810e690:	2a00      	cmp	r2, #0
 810e692:	d1fb      	bne.n	810e68c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 810e694:	4770      	bx	lr
 810e696:	6858      	ldr	r0, [r3, #4]
 810e698:	6882      	ldr	r2, [r0, #8]
 810e69a:	429a      	cmp	r2, r3
 810e69c:	d000      	beq.n	810e6a0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 810e69e:	4770      	bx	lr
 810e6a0:	4603      	mov	r3, r0
 810e6a2:	6840      	ldr	r0, [r0, #4]
 810e6a4:	e7f8      	b.n	810e698 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0810e6a6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 810e6a6:	f7ff bfd2 	b.w	810e64e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

0810e6aa <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 810e6aa:	f7ff bfe4 	b.w	810e676 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0810e6ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 810e6ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e6b2:	461d      	mov	r5, r3
 810e6b4:	1d1f      	adds	r7, r3, #4
 810e6b6:	2300      	movs	r3, #0
 810e6b8:	e9c1 3302 	strd	r3, r3, [r1, #8]
 810e6bc:	460c      	mov	r4, r1
 810e6be:	604a      	str	r2, [r1, #4]
 810e6c0:	700b      	strb	r3, [r1, #0]
 810e6c2:	b1a0      	cbz	r0, 810e6ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 810e6c4:	4295      	cmp	r5, r2
 810e6c6:	6091      	str	r1, [r2, #8]
 810e6c8:	d102      	bne.n	810e6d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 810e6ca:	6069      	str	r1, [r5, #4]
 810e6cc:	60ec      	str	r4, [r5, #12]
 810e6ce:	e003      	b.n	810e6d8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 810e6d0:	68ab      	ldr	r3, [r5, #8]
 810e6d2:	4293      	cmp	r3, r2
 810e6d4:	bf08      	it	eq
 810e6d6:	60a9      	streq	r1, [r5, #8]
 810e6d8:	f04f 0900 	mov.w	r9, #0
 810e6dc:	f04f 0801 	mov.w	r8, #1
 810e6e0:	686b      	ldr	r3, [r5, #4]
 810e6e2:	42a3      	cmp	r3, r4
 810e6e4:	d132      	bne.n	810e74c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 810e6e6:	2201      	movs	r2, #1
 810e6e8:	701a      	strb	r2, [r3, #0]
 810e6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e6ee:	60d1      	str	r1, [r2, #12]
 810e6f0:	68eb      	ldr	r3, [r5, #12]
 810e6f2:	4293      	cmp	r3, r2
 810e6f4:	d1f0      	bne.n	810e6d8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 810e6f6:	e7e9      	b.n	810e6cc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 810e6f8:	68c3      	ldr	r3, [r0, #12]
 810e6fa:	42a3      	cmp	r3, r4
 810e6fc:	d103      	bne.n	810e706 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 810e6fe:	4639      	mov	r1, r7
 810e700:	f7ff ff7b 	bl	810e5fa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 810e704:	4604      	mov	r4, r0
 810e706:	6863      	ldr	r3, [r4, #4]
 810e708:	4639      	mov	r1, r7
 810e70a:	f883 8000 	strb.w	r8, [r3]
 810e70e:	4630      	mov	r0, r6
 810e710:	f886 9000 	strb.w	r9, [r6]
 810e714:	f7ff ff86 	bl	810e624 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 810e718:	e7e2      	b.n	810e6e0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 810e71a:	b133      	cbz	r3, 810e72a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 810e71c:	781a      	ldrb	r2, [r3, #0]
 810e71e:	b922      	cbnz	r2, 810e72a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 810e720:	f880 8000 	strb.w	r8, [r0]
 810e724:	f883 8000 	strb.w	r8, [r3]
 810e728:	e021      	b.n	810e76e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 810e72a:	6883      	ldr	r3, [r0, #8]
 810e72c:	42a3      	cmp	r3, r4
 810e72e:	d103      	bne.n	810e738 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 810e730:	4639      	mov	r1, r7
 810e732:	f7ff ff77 	bl	810e624 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 810e736:	4604      	mov	r4, r0
 810e738:	6863      	ldr	r3, [r4, #4]
 810e73a:	4639      	mov	r1, r7
 810e73c:	f883 8000 	strb.w	r8, [r3]
 810e740:	4630      	mov	r0, r6
 810e742:	f886 9000 	strb.w	r9, [r6]
 810e746:	f7ff ff58 	bl	810e5fa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 810e74a:	e7c9      	b.n	810e6e0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 810e74c:	6860      	ldr	r0, [r4, #4]
 810e74e:	7802      	ldrb	r2, [r0, #0]
 810e750:	2a00      	cmp	r2, #0
 810e752:	d1c8      	bne.n	810e6e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 810e754:	6846      	ldr	r6, [r0, #4]
 810e756:	68b3      	ldr	r3, [r6, #8]
 810e758:	4283      	cmp	r3, r0
 810e75a:	d1de      	bne.n	810e71a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 810e75c:	68f2      	ldr	r2, [r6, #12]
 810e75e:	2a00      	cmp	r2, #0
 810e760:	d0ca      	beq.n	810e6f8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 810e762:	7811      	ldrb	r1, [r2, #0]
 810e764:	2900      	cmp	r1, #0
 810e766:	d1c7      	bne.n	810e6f8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 810e768:	2101      	movs	r1, #1
 810e76a:	7019      	strb	r1, [r3, #0]
 810e76c:	7011      	strb	r1, [r2, #0]
 810e76e:	f886 9000 	strb.w	r9, [r6]
 810e772:	4634      	mov	r4, r6
 810e774:	e7b4      	b.n	810e6e0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

0810e776 <_ZSt17__throw_bad_allocv>:
 810e776:	b508      	push	{r3, lr}
 810e778:	f000 f810 	bl	810e79c <abort>

0810e77c <_ZSt28__throw_bad_array_new_lengthv>:
 810e77c:	b508      	push	{r3, lr}
 810e77e:	f000 f80d 	bl	810e79c <abort>

0810e782 <_ZSt20__throw_length_errorPKc>:
 810e782:	b508      	push	{r3, lr}
 810e784:	f000 f80a 	bl	810e79c <abort>

0810e788 <_ZdlPv>:
 810e788:	f000 b818 	b.w	810e7bc <free>

0810e78c <_ZSt15get_new_handlerv>:
 810e78c:	4b02      	ldr	r3, [pc, #8]	@ (810e798 <_ZSt15get_new_handlerv+0xc>)
 810e78e:	6818      	ldr	r0, [r3, #0]
 810e790:	f3bf 8f5b 	dmb	ish
 810e794:	4770      	bx	lr
 810e796:	bf00      	nop
 810e798:	10005008 	.word	0x10005008

0810e79c <abort>:
 810e79c:	b508      	push	{r3, lr}
 810e79e:	2006      	movs	r0, #6
 810e7a0:	f000 ff74 	bl	810f68c <raise>
 810e7a4:	2001      	movs	r0, #1
 810e7a6:	f7f6 fff1 	bl	810578c <_exit>
	...

0810e7ac <malloc>:
 810e7ac:	4b02      	ldr	r3, [pc, #8]	@ (810e7b8 <malloc+0xc>)
 810e7ae:	4601      	mov	r1, r0
 810e7b0:	6818      	ldr	r0, [r3, #0]
 810e7b2:	f000 b82d 	b.w	810e810 <_malloc_r>
 810e7b6:	bf00      	nop
 810e7b8:	10000020 	.word	0x10000020

0810e7bc <free>:
 810e7bc:	4b02      	ldr	r3, [pc, #8]	@ (810e7c8 <free+0xc>)
 810e7be:	4601      	mov	r1, r0
 810e7c0:	6818      	ldr	r0, [r3, #0]
 810e7c2:	f001 becd 	b.w	8110560 <_free_r>
 810e7c6:	bf00      	nop
 810e7c8:	10000020 	.word	0x10000020

0810e7cc <sbrk_aligned>:
 810e7cc:	b570      	push	{r4, r5, r6, lr}
 810e7ce:	4e0f      	ldr	r6, [pc, #60]	@ (810e80c <sbrk_aligned+0x40>)
 810e7d0:	460c      	mov	r4, r1
 810e7d2:	6831      	ldr	r1, [r6, #0]
 810e7d4:	4605      	mov	r5, r0
 810e7d6:	b911      	cbnz	r1, 810e7de <sbrk_aligned+0x12>
 810e7d8:	f001 f80a 	bl	810f7f0 <_sbrk_r>
 810e7dc:	6030      	str	r0, [r6, #0]
 810e7de:	4621      	mov	r1, r4
 810e7e0:	4628      	mov	r0, r5
 810e7e2:	f001 f805 	bl	810f7f0 <_sbrk_r>
 810e7e6:	1c43      	adds	r3, r0, #1
 810e7e8:	d103      	bne.n	810e7f2 <sbrk_aligned+0x26>
 810e7ea:	f04f 34ff 	mov.w	r4, #4294967295
 810e7ee:	4620      	mov	r0, r4
 810e7f0:	bd70      	pop	{r4, r5, r6, pc}
 810e7f2:	1cc4      	adds	r4, r0, #3
 810e7f4:	f024 0403 	bic.w	r4, r4, #3
 810e7f8:	42a0      	cmp	r0, r4
 810e7fa:	d0f8      	beq.n	810e7ee <sbrk_aligned+0x22>
 810e7fc:	1a21      	subs	r1, r4, r0
 810e7fe:	4628      	mov	r0, r5
 810e800:	f000 fff6 	bl	810f7f0 <_sbrk_r>
 810e804:	3001      	adds	r0, #1
 810e806:	d1f2      	bne.n	810e7ee <sbrk_aligned+0x22>
 810e808:	e7ef      	b.n	810e7ea <sbrk_aligned+0x1e>
 810e80a:	bf00      	nop
 810e80c:	1000500c 	.word	0x1000500c

0810e810 <_malloc_r>:
 810e810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e814:	1ccd      	adds	r5, r1, #3
 810e816:	f025 0503 	bic.w	r5, r5, #3
 810e81a:	3508      	adds	r5, #8
 810e81c:	2d0c      	cmp	r5, #12
 810e81e:	bf38      	it	cc
 810e820:	250c      	movcc	r5, #12
 810e822:	2d00      	cmp	r5, #0
 810e824:	4606      	mov	r6, r0
 810e826:	db01      	blt.n	810e82c <_malloc_r+0x1c>
 810e828:	42a9      	cmp	r1, r5
 810e82a:	d904      	bls.n	810e836 <_malloc_r+0x26>
 810e82c:	230c      	movs	r3, #12
 810e82e:	6033      	str	r3, [r6, #0]
 810e830:	2000      	movs	r0, #0
 810e832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e836:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810e90c <_malloc_r+0xfc>
 810e83a:	f000 f869 	bl	810e910 <__malloc_lock>
 810e83e:	f8d8 3000 	ldr.w	r3, [r8]
 810e842:	461c      	mov	r4, r3
 810e844:	bb44      	cbnz	r4, 810e898 <_malloc_r+0x88>
 810e846:	4629      	mov	r1, r5
 810e848:	4630      	mov	r0, r6
 810e84a:	f7ff ffbf 	bl	810e7cc <sbrk_aligned>
 810e84e:	1c43      	adds	r3, r0, #1
 810e850:	4604      	mov	r4, r0
 810e852:	d158      	bne.n	810e906 <_malloc_r+0xf6>
 810e854:	f8d8 4000 	ldr.w	r4, [r8]
 810e858:	4627      	mov	r7, r4
 810e85a:	2f00      	cmp	r7, #0
 810e85c:	d143      	bne.n	810e8e6 <_malloc_r+0xd6>
 810e85e:	2c00      	cmp	r4, #0
 810e860:	d04b      	beq.n	810e8fa <_malloc_r+0xea>
 810e862:	6823      	ldr	r3, [r4, #0]
 810e864:	4639      	mov	r1, r7
 810e866:	4630      	mov	r0, r6
 810e868:	eb04 0903 	add.w	r9, r4, r3
 810e86c:	f000 ffc0 	bl	810f7f0 <_sbrk_r>
 810e870:	4581      	cmp	r9, r0
 810e872:	d142      	bne.n	810e8fa <_malloc_r+0xea>
 810e874:	6821      	ldr	r1, [r4, #0]
 810e876:	1a6d      	subs	r5, r5, r1
 810e878:	4629      	mov	r1, r5
 810e87a:	4630      	mov	r0, r6
 810e87c:	f7ff ffa6 	bl	810e7cc <sbrk_aligned>
 810e880:	3001      	adds	r0, #1
 810e882:	d03a      	beq.n	810e8fa <_malloc_r+0xea>
 810e884:	6823      	ldr	r3, [r4, #0]
 810e886:	442b      	add	r3, r5
 810e888:	6023      	str	r3, [r4, #0]
 810e88a:	f8d8 3000 	ldr.w	r3, [r8]
 810e88e:	685a      	ldr	r2, [r3, #4]
 810e890:	bb62      	cbnz	r2, 810e8ec <_malloc_r+0xdc>
 810e892:	f8c8 7000 	str.w	r7, [r8]
 810e896:	e00f      	b.n	810e8b8 <_malloc_r+0xa8>
 810e898:	6822      	ldr	r2, [r4, #0]
 810e89a:	1b52      	subs	r2, r2, r5
 810e89c:	d420      	bmi.n	810e8e0 <_malloc_r+0xd0>
 810e89e:	2a0b      	cmp	r2, #11
 810e8a0:	d917      	bls.n	810e8d2 <_malloc_r+0xc2>
 810e8a2:	1961      	adds	r1, r4, r5
 810e8a4:	42a3      	cmp	r3, r4
 810e8a6:	6025      	str	r5, [r4, #0]
 810e8a8:	bf18      	it	ne
 810e8aa:	6059      	strne	r1, [r3, #4]
 810e8ac:	6863      	ldr	r3, [r4, #4]
 810e8ae:	bf08      	it	eq
 810e8b0:	f8c8 1000 	streq.w	r1, [r8]
 810e8b4:	5162      	str	r2, [r4, r5]
 810e8b6:	604b      	str	r3, [r1, #4]
 810e8b8:	4630      	mov	r0, r6
 810e8ba:	f000 f82f 	bl	810e91c <__malloc_unlock>
 810e8be:	f104 000b 	add.w	r0, r4, #11
 810e8c2:	1d23      	adds	r3, r4, #4
 810e8c4:	f020 0007 	bic.w	r0, r0, #7
 810e8c8:	1ac2      	subs	r2, r0, r3
 810e8ca:	bf1c      	itt	ne
 810e8cc:	1a1b      	subne	r3, r3, r0
 810e8ce:	50a3      	strne	r3, [r4, r2]
 810e8d0:	e7af      	b.n	810e832 <_malloc_r+0x22>
 810e8d2:	6862      	ldr	r2, [r4, #4]
 810e8d4:	42a3      	cmp	r3, r4
 810e8d6:	bf0c      	ite	eq
 810e8d8:	f8c8 2000 	streq.w	r2, [r8]
 810e8dc:	605a      	strne	r2, [r3, #4]
 810e8de:	e7eb      	b.n	810e8b8 <_malloc_r+0xa8>
 810e8e0:	4623      	mov	r3, r4
 810e8e2:	6864      	ldr	r4, [r4, #4]
 810e8e4:	e7ae      	b.n	810e844 <_malloc_r+0x34>
 810e8e6:	463c      	mov	r4, r7
 810e8e8:	687f      	ldr	r7, [r7, #4]
 810e8ea:	e7b6      	b.n	810e85a <_malloc_r+0x4a>
 810e8ec:	461a      	mov	r2, r3
 810e8ee:	685b      	ldr	r3, [r3, #4]
 810e8f0:	42a3      	cmp	r3, r4
 810e8f2:	d1fb      	bne.n	810e8ec <_malloc_r+0xdc>
 810e8f4:	2300      	movs	r3, #0
 810e8f6:	6053      	str	r3, [r2, #4]
 810e8f8:	e7de      	b.n	810e8b8 <_malloc_r+0xa8>
 810e8fa:	230c      	movs	r3, #12
 810e8fc:	6033      	str	r3, [r6, #0]
 810e8fe:	4630      	mov	r0, r6
 810e900:	f000 f80c 	bl	810e91c <__malloc_unlock>
 810e904:	e794      	b.n	810e830 <_malloc_r+0x20>
 810e906:	6005      	str	r5, [r0, #0]
 810e908:	e7d6      	b.n	810e8b8 <_malloc_r+0xa8>
 810e90a:	bf00      	nop
 810e90c:	10005010 	.word	0x10005010

0810e910 <__malloc_lock>:
 810e910:	4801      	ldr	r0, [pc, #4]	@ (810e918 <__malloc_lock+0x8>)
 810e912:	f000 bfba 	b.w	810f88a <__retarget_lock_acquire_recursive>
 810e916:	bf00      	nop
 810e918:	10005154 	.word	0x10005154

0810e91c <__malloc_unlock>:
 810e91c:	4801      	ldr	r0, [pc, #4]	@ (810e924 <__malloc_unlock+0x8>)
 810e91e:	f000 bfb5 	b.w	810f88c <__retarget_lock_release_recursive>
 810e922:	bf00      	nop
 810e924:	10005154 	.word	0x10005154

0810e928 <__cvt>:
 810e928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810e92c:	ec57 6b10 	vmov	r6, r7, d0
 810e930:	2f00      	cmp	r7, #0
 810e932:	460c      	mov	r4, r1
 810e934:	4619      	mov	r1, r3
 810e936:	463b      	mov	r3, r7
 810e938:	bfbb      	ittet	lt
 810e93a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810e93e:	461f      	movlt	r7, r3
 810e940:	2300      	movge	r3, #0
 810e942:	232d      	movlt	r3, #45	@ 0x2d
 810e944:	700b      	strb	r3, [r1, #0]
 810e946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810e948:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 810e94c:	4691      	mov	r9, r2
 810e94e:	f023 0820 	bic.w	r8, r3, #32
 810e952:	bfbc      	itt	lt
 810e954:	4632      	movlt	r2, r6
 810e956:	4616      	movlt	r6, r2
 810e958:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810e95c:	d005      	beq.n	810e96a <__cvt+0x42>
 810e95e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 810e962:	d100      	bne.n	810e966 <__cvt+0x3e>
 810e964:	3401      	adds	r4, #1
 810e966:	2102      	movs	r1, #2
 810e968:	e000      	b.n	810e96c <__cvt+0x44>
 810e96a:	2103      	movs	r1, #3
 810e96c:	ab03      	add	r3, sp, #12
 810e96e:	9301      	str	r3, [sp, #4]
 810e970:	ab02      	add	r3, sp, #8
 810e972:	9300      	str	r3, [sp, #0]
 810e974:	ec47 6b10 	vmov	d0, r6, r7
 810e978:	4653      	mov	r3, sl
 810e97a:	4622      	mov	r2, r4
 810e97c:	f001 f820 	bl	810f9c0 <_dtoa_r>
 810e980:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 810e984:	4605      	mov	r5, r0
 810e986:	d119      	bne.n	810e9bc <__cvt+0x94>
 810e988:	f019 0f01 	tst.w	r9, #1
 810e98c:	d00e      	beq.n	810e9ac <__cvt+0x84>
 810e98e:	eb00 0904 	add.w	r9, r0, r4
 810e992:	2200      	movs	r2, #0
 810e994:	2300      	movs	r3, #0
 810e996:	4630      	mov	r0, r6
 810e998:	4639      	mov	r1, r7
 810e99a:	f7f2 f91d 	bl	8100bd8 <__aeabi_dcmpeq>
 810e99e:	b108      	cbz	r0, 810e9a4 <__cvt+0x7c>
 810e9a0:	f8cd 900c 	str.w	r9, [sp, #12]
 810e9a4:	2230      	movs	r2, #48	@ 0x30
 810e9a6:	9b03      	ldr	r3, [sp, #12]
 810e9a8:	454b      	cmp	r3, r9
 810e9aa:	d31e      	bcc.n	810e9ea <__cvt+0xc2>
 810e9ac:	9b03      	ldr	r3, [sp, #12]
 810e9ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810e9b0:	1b5b      	subs	r3, r3, r5
 810e9b2:	4628      	mov	r0, r5
 810e9b4:	6013      	str	r3, [r2, #0]
 810e9b6:	b004      	add	sp, #16
 810e9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810e9bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810e9c0:	eb00 0904 	add.w	r9, r0, r4
 810e9c4:	d1e5      	bne.n	810e992 <__cvt+0x6a>
 810e9c6:	7803      	ldrb	r3, [r0, #0]
 810e9c8:	2b30      	cmp	r3, #48	@ 0x30
 810e9ca:	d10a      	bne.n	810e9e2 <__cvt+0xba>
 810e9cc:	2200      	movs	r2, #0
 810e9ce:	2300      	movs	r3, #0
 810e9d0:	4630      	mov	r0, r6
 810e9d2:	4639      	mov	r1, r7
 810e9d4:	f7f2 f900 	bl	8100bd8 <__aeabi_dcmpeq>
 810e9d8:	b918      	cbnz	r0, 810e9e2 <__cvt+0xba>
 810e9da:	f1c4 0401 	rsb	r4, r4, #1
 810e9de:	f8ca 4000 	str.w	r4, [sl]
 810e9e2:	f8da 3000 	ldr.w	r3, [sl]
 810e9e6:	4499      	add	r9, r3
 810e9e8:	e7d3      	b.n	810e992 <__cvt+0x6a>
 810e9ea:	1c59      	adds	r1, r3, #1
 810e9ec:	9103      	str	r1, [sp, #12]
 810e9ee:	701a      	strb	r2, [r3, #0]
 810e9f0:	e7d9      	b.n	810e9a6 <__cvt+0x7e>

0810e9f2 <__exponent>:
 810e9f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810e9f4:	2900      	cmp	r1, #0
 810e9f6:	bfba      	itte	lt
 810e9f8:	4249      	neglt	r1, r1
 810e9fa:	232d      	movlt	r3, #45	@ 0x2d
 810e9fc:	232b      	movge	r3, #43	@ 0x2b
 810e9fe:	2909      	cmp	r1, #9
 810ea00:	7002      	strb	r2, [r0, #0]
 810ea02:	7043      	strb	r3, [r0, #1]
 810ea04:	dd29      	ble.n	810ea5a <__exponent+0x68>
 810ea06:	f10d 0307 	add.w	r3, sp, #7
 810ea0a:	461d      	mov	r5, r3
 810ea0c:	270a      	movs	r7, #10
 810ea0e:	461a      	mov	r2, r3
 810ea10:	fbb1 f6f7 	udiv	r6, r1, r7
 810ea14:	fb07 1416 	mls	r4, r7, r6, r1
 810ea18:	3430      	adds	r4, #48	@ 0x30
 810ea1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 810ea1e:	460c      	mov	r4, r1
 810ea20:	2c63      	cmp	r4, #99	@ 0x63
 810ea22:	f103 33ff 	add.w	r3, r3, #4294967295
 810ea26:	4631      	mov	r1, r6
 810ea28:	dcf1      	bgt.n	810ea0e <__exponent+0x1c>
 810ea2a:	3130      	adds	r1, #48	@ 0x30
 810ea2c:	1e94      	subs	r4, r2, #2
 810ea2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 810ea32:	1c41      	adds	r1, r0, #1
 810ea34:	4623      	mov	r3, r4
 810ea36:	42ab      	cmp	r3, r5
 810ea38:	d30a      	bcc.n	810ea50 <__exponent+0x5e>
 810ea3a:	f10d 0309 	add.w	r3, sp, #9
 810ea3e:	1a9b      	subs	r3, r3, r2
 810ea40:	42ac      	cmp	r4, r5
 810ea42:	bf88      	it	hi
 810ea44:	2300      	movhi	r3, #0
 810ea46:	3302      	adds	r3, #2
 810ea48:	4403      	add	r3, r0
 810ea4a:	1a18      	subs	r0, r3, r0
 810ea4c:	b003      	add	sp, #12
 810ea4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810ea50:	f813 6b01 	ldrb.w	r6, [r3], #1
 810ea54:	f801 6f01 	strb.w	r6, [r1, #1]!
 810ea58:	e7ed      	b.n	810ea36 <__exponent+0x44>
 810ea5a:	2330      	movs	r3, #48	@ 0x30
 810ea5c:	3130      	adds	r1, #48	@ 0x30
 810ea5e:	7083      	strb	r3, [r0, #2]
 810ea60:	70c1      	strb	r1, [r0, #3]
 810ea62:	1d03      	adds	r3, r0, #4
 810ea64:	e7f1      	b.n	810ea4a <__exponent+0x58>
	...

0810ea68 <_printf_float>:
 810ea68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ea6c:	b08d      	sub	sp, #52	@ 0x34
 810ea6e:	460c      	mov	r4, r1
 810ea70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 810ea74:	4616      	mov	r6, r2
 810ea76:	461f      	mov	r7, r3
 810ea78:	4605      	mov	r5, r0
 810ea7a:	f000 fe0f 	bl	810f69c <_localeconv_r>
 810ea7e:	6803      	ldr	r3, [r0, #0]
 810ea80:	9304      	str	r3, [sp, #16]
 810ea82:	4618      	mov	r0, r3
 810ea84:	f7f1 fc7c 	bl	8100380 <strlen>
 810ea88:	2300      	movs	r3, #0
 810ea8a:	930a      	str	r3, [sp, #40]	@ 0x28
 810ea8c:	f8d8 3000 	ldr.w	r3, [r8]
 810ea90:	9005      	str	r0, [sp, #20]
 810ea92:	3307      	adds	r3, #7
 810ea94:	f023 0307 	bic.w	r3, r3, #7
 810ea98:	f103 0208 	add.w	r2, r3, #8
 810ea9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 810eaa0:	f8d4 b000 	ldr.w	fp, [r4]
 810eaa4:	f8c8 2000 	str.w	r2, [r8]
 810eaa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 810eaac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810eab0:	9307      	str	r3, [sp, #28]
 810eab2:	f8cd 8018 	str.w	r8, [sp, #24]
 810eab6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 810eaba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810eabe:	4b9c      	ldr	r3, [pc, #624]	@ (810ed30 <_printf_float+0x2c8>)
 810eac0:	f04f 32ff 	mov.w	r2, #4294967295
 810eac4:	f7f2 f8ba 	bl	8100c3c <__aeabi_dcmpun>
 810eac8:	bb70      	cbnz	r0, 810eb28 <_printf_float+0xc0>
 810eaca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810eace:	4b98      	ldr	r3, [pc, #608]	@ (810ed30 <_printf_float+0x2c8>)
 810ead0:	f04f 32ff 	mov.w	r2, #4294967295
 810ead4:	f7f2 f894 	bl	8100c00 <__aeabi_dcmple>
 810ead8:	bb30      	cbnz	r0, 810eb28 <_printf_float+0xc0>
 810eada:	2200      	movs	r2, #0
 810eadc:	2300      	movs	r3, #0
 810eade:	4640      	mov	r0, r8
 810eae0:	4649      	mov	r1, r9
 810eae2:	f7f2 f883 	bl	8100bec <__aeabi_dcmplt>
 810eae6:	b110      	cbz	r0, 810eaee <_printf_float+0x86>
 810eae8:	232d      	movs	r3, #45	@ 0x2d
 810eaea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810eaee:	4a91      	ldr	r2, [pc, #580]	@ (810ed34 <_printf_float+0x2cc>)
 810eaf0:	4b91      	ldr	r3, [pc, #580]	@ (810ed38 <_printf_float+0x2d0>)
 810eaf2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 810eaf6:	bf8c      	ite	hi
 810eaf8:	4690      	movhi	r8, r2
 810eafa:	4698      	movls	r8, r3
 810eafc:	2303      	movs	r3, #3
 810eafe:	6123      	str	r3, [r4, #16]
 810eb00:	f02b 0304 	bic.w	r3, fp, #4
 810eb04:	6023      	str	r3, [r4, #0]
 810eb06:	f04f 0900 	mov.w	r9, #0
 810eb0a:	9700      	str	r7, [sp, #0]
 810eb0c:	4633      	mov	r3, r6
 810eb0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 810eb10:	4621      	mov	r1, r4
 810eb12:	4628      	mov	r0, r5
 810eb14:	f000 f9d2 	bl	810eebc <_printf_common>
 810eb18:	3001      	adds	r0, #1
 810eb1a:	f040 808d 	bne.w	810ec38 <_printf_float+0x1d0>
 810eb1e:	f04f 30ff 	mov.w	r0, #4294967295
 810eb22:	b00d      	add	sp, #52	@ 0x34
 810eb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810eb28:	4642      	mov	r2, r8
 810eb2a:	464b      	mov	r3, r9
 810eb2c:	4640      	mov	r0, r8
 810eb2e:	4649      	mov	r1, r9
 810eb30:	f7f2 f884 	bl	8100c3c <__aeabi_dcmpun>
 810eb34:	b140      	cbz	r0, 810eb48 <_printf_float+0xe0>
 810eb36:	464b      	mov	r3, r9
 810eb38:	2b00      	cmp	r3, #0
 810eb3a:	bfbc      	itt	lt
 810eb3c:	232d      	movlt	r3, #45	@ 0x2d
 810eb3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 810eb42:	4a7e      	ldr	r2, [pc, #504]	@ (810ed3c <_printf_float+0x2d4>)
 810eb44:	4b7e      	ldr	r3, [pc, #504]	@ (810ed40 <_printf_float+0x2d8>)
 810eb46:	e7d4      	b.n	810eaf2 <_printf_float+0x8a>
 810eb48:	6863      	ldr	r3, [r4, #4]
 810eb4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810eb4e:	9206      	str	r2, [sp, #24]
 810eb50:	1c5a      	adds	r2, r3, #1
 810eb52:	d13b      	bne.n	810ebcc <_printf_float+0x164>
 810eb54:	2306      	movs	r3, #6
 810eb56:	6063      	str	r3, [r4, #4]
 810eb58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 810eb5c:	2300      	movs	r3, #0
 810eb5e:	6022      	str	r2, [r4, #0]
 810eb60:	9303      	str	r3, [sp, #12]
 810eb62:	ab0a      	add	r3, sp, #40	@ 0x28
 810eb64:	e9cd a301 	strd	sl, r3, [sp, #4]
 810eb68:	ab09      	add	r3, sp, #36	@ 0x24
 810eb6a:	9300      	str	r3, [sp, #0]
 810eb6c:	6861      	ldr	r1, [r4, #4]
 810eb6e:	ec49 8b10 	vmov	d0, r8, r9
 810eb72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 810eb76:	4628      	mov	r0, r5
 810eb78:	f7ff fed6 	bl	810e928 <__cvt>
 810eb7c:	9b06      	ldr	r3, [sp, #24]
 810eb7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810eb80:	2b47      	cmp	r3, #71	@ 0x47
 810eb82:	4680      	mov	r8, r0
 810eb84:	d129      	bne.n	810ebda <_printf_float+0x172>
 810eb86:	1cc8      	adds	r0, r1, #3
 810eb88:	db02      	blt.n	810eb90 <_printf_float+0x128>
 810eb8a:	6863      	ldr	r3, [r4, #4]
 810eb8c:	4299      	cmp	r1, r3
 810eb8e:	dd41      	ble.n	810ec14 <_printf_float+0x1ac>
 810eb90:	f1aa 0a02 	sub.w	sl, sl, #2
 810eb94:	fa5f fa8a 	uxtb.w	sl, sl
 810eb98:	3901      	subs	r1, #1
 810eb9a:	4652      	mov	r2, sl
 810eb9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810eba0:	9109      	str	r1, [sp, #36]	@ 0x24
 810eba2:	f7ff ff26 	bl	810e9f2 <__exponent>
 810eba6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810eba8:	1813      	adds	r3, r2, r0
 810ebaa:	2a01      	cmp	r2, #1
 810ebac:	4681      	mov	r9, r0
 810ebae:	6123      	str	r3, [r4, #16]
 810ebb0:	dc02      	bgt.n	810ebb8 <_printf_float+0x150>
 810ebb2:	6822      	ldr	r2, [r4, #0]
 810ebb4:	07d2      	lsls	r2, r2, #31
 810ebb6:	d501      	bpl.n	810ebbc <_printf_float+0x154>
 810ebb8:	3301      	adds	r3, #1
 810ebba:	6123      	str	r3, [r4, #16]
 810ebbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810ebc0:	2b00      	cmp	r3, #0
 810ebc2:	d0a2      	beq.n	810eb0a <_printf_float+0xa2>
 810ebc4:	232d      	movs	r3, #45	@ 0x2d
 810ebc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810ebca:	e79e      	b.n	810eb0a <_printf_float+0xa2>
 810ebcc:	9a06      	ldr	r2, [sp, #24]
 810ebce:	2a47      	cmp	r2, #71	@ 0x47
 810ebd0:	d1c2      	bne.n	810eb58 <_printf_float+0xf0>
 810ebd2:	2b00      	cmp	r3, #0
 810ebd4:	d1c0      	bne.n	810eb58 <_printf_float+0xf0>
 810ebd6:	2301      	movs	r3, #1
 810ebd8:	e7bd      	b.n	810eb56 <_printf_float+0xee>
 810ebda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810ebde:	d9db      	bls.n	810eb98 <_printf_float+0x130>
 810ebe0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 810ebe4:	d118      	bne.n	810ec18 <_printf_float+0x1b0>
 810ebe6:	2900      	cmp	r1, #0
 810ebe8:	6863      	ldr	r3, [r4, #4]
 810ebea:	dd0b      	ble.n	810ec04 <_printf_float+0x19c>
 810ebec:	6121      	str	r1, [r4, #16]
 810ebee:	b913      	cbnz	r3, 810ebf6 <_printf_float+0x18e>
 810ebf0:	6822      	ldr	r2, [r4, #0]
 810ebf2:	07d0      	lsls	r0, r2, #31
 810ebf4:	d502      	bpl.n	810ebfc <_printf_float+0x194>
 810ebf6:	3301      	adds	r3, #1
 810ebf8:	440b      	add	r3, r1
 810ebfa:	6123      	str	r3, [r4, #16]
 810ebfc:	65a1      	str	r1, [r4, #88]	@ 0x58
 810ebfe:	f04f 0900 	mov.w	r9, #0
 810ec02:	e7db      	b.n	810ebbc <_printf_float+0x154>
 810ec04:	b913      	cbnz	r3, 810ec0c <_printf_float+0x1a4>
 810ec06:	6822      	ldr	r2, [r4, #0]
 810ec08:	07d2      	lsls	r2, r2, #31
 810ec0a:	d501      	bpl.n	810ec10 <_printf_float+0x1a8>
 810ec0c:	3302      	adds	r3, #2
 810ec0e:	e7f4      	b.n	810ebfa <_printf_float+0x192>
 810ec10:	2301      	movs	r3, #1
 810ec12:	e7f2      	b.n	810ebfa <_printf_float+0x192>
 810ec14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 810ec18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ec1a:	4299      	cmp	r1, r3
 810ec1c:	db05      	blt.n	810ec2a <_printf_float+0x1c2>
 810ec1e:	6823      	ldr	r3, [r4, #0]
 810ec20:	6121      	str	r1, [r4, #16]
 810ec22:	07d8      	lsls	r0, r3, #31
 810ec24:	d5ea      	bpl.n	810ebfc <_printf_float+0x194>
 810ec26:	1c4b      	adds	r3, r1, #1
 810ec28:	e7e7      	b.n	810ebfa <_printf_float+0x192>
 810ec2a:	2900      	cmp	r1, #0
 810ec2c:	bfd4      	ite	le
 810ec2e:	f1c1 0202 	rsble	r2, r1, #2
 810ec32:	2201      	movgt	r2, #1
 810ec34:	4413      	add	r3, r2
 810ec36:	e7e0      	b.n	810ebfa <_printf_float+0x192>
 810ec38:	6823      	ldr	r3, [r4, #0]
 810ec3a:	055a      	lsls	r2, r3, #21
 810ec3c:	d407      	bmi.n	810ec4e <_printf_float+0x1e6>
 810ec3e:	6923      	ldr	r3, [r4, #16]
 810ec40:	4642      	mov	r2, r8
 810ec42:	4631      	mov	r1, r6
 810ec44:	4628      	mov	r0, r5
 810ec46:	47b8      	blx	r7
 810ec48:	3001      	adds	r0, #1
 810ec4a:	d12b      	bne.n	810eca4 <_printf_float+0x23c>
 810ec4c:	e767      	b.n	810eb1e <_printf_float+0xb6>
 810ec4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810ec52:	f240 80dd 	bls.w	810ee10 <_printf_float+0x3a8>
 810ec56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810ec5a:	2200      	movs	r2, #0
 810ec5c:	2300      	movs	r3, #0
 810ec5e:	f7f1 ffbb 	bl	8100bd8 <__aeabi_dcmpeq>
 810ec62:	2800      	cmp	r0, #0
 810ec64:	d033      	beq.n	810ecce <_printf_float+0x266>
 810ec66:	4a37      	ldr	r2, [pc, #220]	@ (810ed44 <_printf_float+0x2dc>)
 810ec68:	2301      	movs	r3, #1
 810ec6a:	4631      	mov	r1, r6
 810ec6c:	4628      	mov	r0, r5
 810ec6e:	47b8      	blx	r7
 810ec70:	3001      	adds	r0, #1
 810ec72:	f43f af54 	beq.w	810eb1e <_printf_float+0xb6>
 810ec76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 810ec7a:	4543      	cmp	r3, r8
 810ec7c:	db02      	blt.n	810ec84 <_printf_float+0x21c>
 810ec7e:	6823      	ldr	r3, [r4, #0]
 810ec80:	07d8      	lsls	r0, r3, #31
 810ec82:	d50f      	bpl.n	810eca4 <_printf_float+0x23c>
 810ec84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810ec88:	4631      	mov	r1, r6
 810ec8a:	4628      	mov	r0, r5
 810ec8c:	47b8      	blx	r7
 810ec8e:	3001      	adds	r0, #1
 810ec90:	f43f af45 	beq.w	810eb1e <_printf_float+0xb6>
 810ec94:	f04f 0900 	mov.w	r9, #0
 810ec98:	f108 38ff 	add.w	r8, r8, #4294967295
 810ec9c:	f104 0a1a 	add.w	sl, r4, #26
 810eca0:	45c8      	cmp	r8, r9
 810eca2:	dc09      	bgt.n	810ecb8 <_printf_float+0x250>
 810eca4:	6823      	ldr	r3, [r4, #0]
 810eca6:	079b      	lsls	r3, r3, #30
 810eca8:	f100 8103 	bmi.w	810eeb2 <_printf_float+0x44a>
 810ecac:	68e0      	ldr	r0, [r4, #12]
 810ecae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810ecb0:	4298      	cmp	r0, r3
 810ecb2:	bfb8      	it	lt
 810ecb4:	4618      	movlt	r0, r3
 810ecb6:	e734      	b.n	810eb22 <_printf_float+0xba>
 810ecb8:	2301      	movs	r3, #1
 810ecba:	4652      	mov	r2, sl
 810ecbc:	4631      	mov	r1, r6
 810ecbe:	4628      	mov	r0, r5
 810ecc0:	47b8      	blx	r7
 810ecc2:	3001      	adds	r0, #1
 810ecc4:	f43f af2b 	beq.w	810eb1e <_printf_float+0xb6>
 810ecc8:	f109 0901 	add.w	r9, r9, #1
 810eccc:	e7e8      	b.n	810eca0 <_printf_float+0x238>
 810ecce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ecd0:	2b00      	cmp	r3, #0
 810ecd2:	dc39      	bgt.n	810ed48 <_printf_float+0x2e0>
 810ecd4:	4a1b      	ldr	r2, [pc, #108]	@ (810ed44 <_printf_float+0x2dc>)
 810ecd6:	2301      	movs	r3, #1
 810ecd8:	4631      	mov	r1, r6
 810ecda:	4628      	mov	r0, r5
 810ecdc:	47b8      	blx	r7
 810ecde:	3001      	adds	r0, #1
 810ece0:	f43f af1d 	beq.w	810eb1e <_printf_float+0xb6>
 810ece4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 810ece8:	ea59 0303 	orrs.w	r3, r9, r3
 810ecec:	d102      	bne.n	810ecf4 <_printf_float+0x28c>
 810ecee:	6823      	ldr	r3, [r4, #0]
 810ecf0:	07d9      	lsls	r1, r3, #31
 810ecf2:	d5d7      	bpl.n	810eca4 <_printf_float+0x23c>
 810ecf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810ecf8:	4631      	mov	r1, r6
 810ecfa:	4628      	mov	r0, r5
 810ecfc:	47b8      	blx	r7
 810ecfe:	3001      	adds	r0, #1
 810ed00:	f43f af0d 	beq.w	810eb1e <_printf_float+0xb6>
 810ed04:	f04f 0a00 	mov.w	sl, #0
 810ed08:	f104 0b1a 	add.w	fp, r4, #26
 810ed0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ed0e:	425b      	negs	r3, r3
 810ed10:	4553      	cmp	r3, sl
 810ed12:	dc01      	bgt.n	810ed18 <_printf_float+0x2b0>
 810ed14:	464b      	mov	r3, r9
 810ed16:	e793      	b.n	810ec40 <_printf_float+0x1d8>
 810ed18:	2301      	movs	r3, #1
 810ed1a:	465a      	mov	r2, fp
 810ed1c:	4631      	mov	r1, r6
 810ed1e:	4628      	mov	r0, r5
 810ed20:	47b8      	blx	r7
 810ed22:	3001      	adds	r0, #1
 810ed24:	f43f aefb 	beq.w	810eb1e <_printf_float+0xb6>
 810ed28:	f10a 0a01 	add.w	sl, sl, #1
 810ed2c:	e7ee      	b.n	810ed0c <_printf_float+0x2a4>
 810ed2e:	bf00      	nop
 810ed30:	7fefffff 	.word	0x7fefffff
 810ed34:	081116da 	.word	0x081116da
 810ed38:	081116d6 	.word	0x081116d6
 810ed3c:	081116e2 	.word	0x081116e2
 810ed40:	081116de 	.word	0x081116de
 810ed44:	081116e6 	.word	0x081116e6
 810ed48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810ed4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810ed4e:	4553      	cmp	r3, sl
 810ed50:	bfa8      	it	ge
 810ed52:	4653      	movge	r3, sl
 810ed54:	2b00      	cmp	r3, #0
 810ed56:	4699      	mov	r9, r3
 810ed58:	dc36      	bgt.n	810edc8 <_printf_float+0x360>
 810ed5a:	f04f 0b00 	mov.w	fp, #0
 810ed5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810ed62:	f104 021a 	add.w	r2, r4, #26
 810ed66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810ed68:	9306      	str	r3, [sp, #24]
 810ed6a:	eba3 0309 	sub.w	r3, r3, r9
 810ed6e:	455b      	cmp	r3, fp
 810ed70:	dc31      	bgt.n	810edd6 <_printf_float+0x36e>
 810ed72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ed74:	459a      	cmp	sl, r3
 810ed76:	dc3a      	bgt.n	810edee <_printf_float+0x386>
 810ed78:	6823      	ldr	r3, [r4, #0]
 810ed7a:	07da      	lsls	r2, r3, #31
 810ed7c:	d437      	bmi.n	810edee <_printf_float+0x386>
 810ed7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ed80:	ebaa 0903 	sub.w	r9, sl, r3
 810ed84:	9b06      	ldr	r3, [sp, #24]
 810ed86:	ebaa 0303 	sub.w	r3, sl, r3
 810ed8a:	4599      	cmp	r9, r3
 810ed8c:	bfa8      	it	ge
 810ed8e:	4699      	movge	r9, r3
 810ed90:	f1b9 0f00 	cmp.w	r9, #0
 810ed94:	dc33      	bgt.n	810edfe <_printf_float+0x396>
 810ed96:	f04f 0800 	mov.w	r8, #0
 810ed9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810ed9e:	f104 0b1a 	add.w	fp, r4, #26
 810eda2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810eda4:	ebaa 0303 	sub.w	r3, sl, r3
 810eda8:	eba3 0309 	sub.w	r3, r3, r9
 810edac:	4543      	cmp	r3, r8
 810edae:	f77f af79 	ble.w	810eca4 <_printf_float+0x23c>
 810edb2:	2301      	movs	r3, #1
 810edb4:	465a      	mov	r2, fp
 810edb6:	4631      	mov	r1, r6
 810edb8:	4628      	mov	r0, r5
 810edba:	47b8      	blx	r7
 810edbc:	3001      	adds	r0, #1
 810edbe:	f43f aeae 	beq.w	810eb1e <_printf_float+0xb6>
 810edc2:	f108 0801 	add.w	r8, r8, #1
 810edc6:	e7ec      	b.n	810eda2 <_printf_float+0x33a>
 810edc8:	4642      	mov	r2, r8
 810edca:	4631      	mov	r1, r6
 810edcc:	4628      	mov	r0, r5
 810edce:	47b8      	blx	r7
 810edd0:	3001      	adds	r0, #1
 810edd2:	d1c2      	bne.n	810ed5a <_printf_float+0x2f2>
 810edd4:	e6a3      	b.n	810eb1e <_printf_float+0xb6>
 810edd6:	2301      	movs	r3, #1
 810edd8:	4631      	mov	r1, r6
 810edda:	4628      	mov	r0, r5
 810eddc:	9206      	str	r2, [sp, #24]
 810edde:	47b8      	blx	r7
 810ede0:	3001      	adds	r0, #1
 810ede2:	f43f ae9c 	beq.w	810eb1e <_printf_float+0xb6>
 810ede6:	9a06      	ldr	r2, [sp, #24]
 810ede8:	f10b 0b01 	add.w	fp, fp, #1
 810edec:	e7bb      	b.n	810ed66 <_printf_float+0x2fe>
 810edee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810edf2:	4631      	mov	r1, r6
 810edf4:	4628      	mov	r0, r5
 810edf6:	47b8      	blx	r7
 810edf8:	3001      	adds	r0, #1
 810edfa:	d1c0      	bne.n	810ed7e <_printf_float+0x316>
 810edfc:	e68f      	b.n	810eb1e <_printf_float+0xb6>
 810edfe:	9a06      	ldr	r2, [sp, #24]
 810ee00:	464b      	mov	r3, r9
 810ee02:	4442      	add	r2, r8
 810ee04:	4631      	mov	r1, r6
 810ee06:	4628      	mov	r0, r5
 810ee08:	47b8      	blx	r7
 810ee0a:	3001      	adds	r0, #1
 810ee0c:	d1c3      	bne.n	810ed96 <_printf_float+0x32e>
 810ee0e:	e686      	b.n	810eb1e <_printf_float+0xb6>
 810ee10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810ee14:	f1ba 0f01 	cmp.w	sl, #1
 810ee18:	dc01      	bgt.n	810ee1e <_printf_float+0x3b6>
 810ee1a:	07db      	lsls	r3, r3, #31
 810ee1c:	d536      	bpl.n	810ee8c <_printf_float+0x424>
 810ee1e:	2301      	movs	r3, #1
 810ee20:	4642      	mov	r2, r8
 810ee22:	4631      	mov	r1, r6
 810ee24:	4628      	mov	r0, r5
 810ee26:	47b8      	blx	r7
 810ee28:	3001      	adds	r0, #1
 810ee2a:	f43f ae78 	beq.w	810eb1e <_printf_float+0xb6>
 810ee2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810ee32:	4631      	mov	r1, r6
 810ee34:	4628      	mov	r0, r5
 810ee36:	47b8      	blx	r7
 810ee38:	3001      	adds	r0, #1
 810ee3a:	f43f ae70 	beq.w	810eb1e <_printf_float+0xb6>
 810ee3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810ee42:	2200      	movs	r2, #0
 810ee44:	2300      	movs	r3, #0
 810ee46:	f10a 3aff 	add.w	sl, sl, #4294967295
 810ee4a:	f7f1 fec5 	bl	8100bd8 <__aeabi_dcmpeq>
 810ee4e:	b9c0      	cbnz	r0, 810ee82 <_printf_float+0x41a>
 810ee50:	4653      	mov	r3, sl
 810ee52:	f108 0201 	add.w	r2, r8, #1
 810ee56:	4631      	mov	r1, r6
 810ee58:	4628      	mov	r0, r5
 810ee5a:	47b8      	blx	r7
 810ee5c:	3001      	adds	r0, #1
 810ee5e:	d10c      	bne.n	810ee7a <_printf_float+0x412>
 810ee60:	e65d      	b.n	810eb1e <_printf_float+0xb6>
 810ee62:	2301      	movs	r3, #1
 810ee64:	465a      	mov	r2, fp
 810ee66:	4631      	mov	r1, r6
 810ee68:	4628      	mov	r0, r5
 810ee6a:	47b8      	blx	r7
 810ee6c:	3001      	adds	r0, #1
 810ee6e:	f43f ae56 	beq.w	810eb1e <_printf_float+0xb6>
 810ee72:	f108 0801 	add.w	r8, r8, #1
 810ee76:	45d0      	cmp	r8, sl
 810ee78:	dbf3      	blt.n	810ee62 <_printf_float+0x3fa>
 810ee7a:	464b      	mov	r3, r9
 810ee7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 810ee80:	e6df      	b.n	810ec42 <_printf_float+0x1da>
 810ee82:	f04f 0800 	mov.w	r8, #0
 810ee86:	f104 0b1a 	add.w	fp, r4, #26
 810ee8a:	e7f4      	b.n	810ee76 <_printf_float+0x40e>
 810ee8c:	2301      	movs	r3, #1
 810ee8e:	4642      	mov	r2, r8
 810ee90:	e7e1      	b.n	810ee56 <_printf_float+0x3ee>
 810ee92:	2301      	movs	r3, #1
 810ee94:	464a      	mov	r2, r9
 810ee96:	4631      	mov	r1, r6
 810ee98:	4628      	mov	r0, r5
 810ee9a:	47b8      	blx	r7
 810ee9c:	3001      	adds	r0, #1
 810ee9e:	f43f ae3e 	beq.w	810eb1e <_printf_float+0xb6>
 810eea2:	f108 0801 	add.w	r8, r8, #1
 810eea6:	68e3      	ldr	r3, [r4, #12]
 810eea8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810eeaa:	1a5b      	subs	r3, r3, r1
 810eeac:	4543      	cmp	r3, r8
 810eeae:	dcf0      	bgt.n	810ee92 <_printf_float+0x42a>
 810eeb0:	e6fc      	b.n	810ecac <_printf_float+0x244>
 810eeb2:	f04f 0800 	mov.w	r8, #0
 810eeb6:	f104 0919 	add.w	r9, r4, #25
 810eeba:	e7f4      	b.n	810eea6 <_printf_float+0x43e>

0810eebc <_printf_common>:
 810eebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810eec0:	4616      	mov	r6, r2
 810eec2:	4698      	mov	r8, r3
 810eec4:	688a      	ldr	r2, [r1, #8]
 810eec6:	690b      	ldr	r3, [r1, #16]
 810eec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810eecc:	4293      	cmp	r3, r2
 810eece:	bfb8      	it	lt
 810eed0:	4613      	movlt	r3, r2
 810eed2:	6033      	str	r3, [r6, #0]
 810eed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810eed8:	4607      	mov	r7, r0
 810eeda:	460c      	mov	r4, r1
 810eedc:	b10a      	cbz	r2, 810eee2 <_printf_common+0x26>
 810eede:	3301      	adds	r3, #1
 810eee0:	6033      	str	r3, [r6, #0]
 810eee2:	6823      	ldr	r3, [r4, #0]
 810eee4:	0699      	lsls	r1, r3, #26
 810eee6:	bf42      	ittt	mi
 810eee8:	6833      	ldrmi	r3, [r6, #0]
 810eeea:	3302      	addmi	r3, #2
 810eeec:	6033      	strmi	r3, [r6, #0]
 810eeee:	6825      	ldr	r5, [r4, #0]
 810eef0:	f015 0506 	ands.w	r5, r5, #6
 810eef4:	d106      	bne.n	810ef04 <_printf_common+0x48>
 810eef6:	f104 0a19 	add.w	sl, r4, #25
 810eefa:	68e3      	ldr	r3, [r4, #12]
 810eefc:	6832      	ldr	r2, [r6, #0]
 810eefe:	1a9b      	subs	r3, r3, r2
 810ef00:	42ab      	cmp	r3, r5
 810ef02:	dc26      	bgt.n	810ef52 <_printf_common+0x96>
 810ef04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810ef08:	6822      	ldr	r2, [r4, #0]
 810ef0a:	3b00      	subs	r3, #0
 810ef0c:	bf18      	it	ne
 810ef0e:	2301      	movne	r3, #1
 810ef10:	0692      	lsls	r2, r2, #26
 810ef12:	d42b      	bmi.n	810ef6c <_printf_common+0xb0>
 810ef14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810ef18:	4641      	mov	r1, r8
 810ef1a:	4638      	mov	r0, r7
 810ef1c:	47c8      	blx	r9
 810ef1e:	3001      	adds	r0, #1
 810ef20:	d01e      	beq.n	810ef60 <_printf_common+0xa4>
 810ef22:	6823      	ldr	r3, [r4, #0]
 810ef24:	6922      	ldr	r2, [r4, #16]
 810ef26:	f003 0306 	and.w	r3, r3, #6
 810ef2a:	2b04      	cmp	r3, #4
 810ef2c:	bf02      	ittt	eq
 810ef2e:	68e5      	ldreq	r5, [r4, #12]
 810ef30:	6833      	ldreq	r3, [r6, #0]
 810ef32:	1aed      	subeq	r5, r5, r3
 810ef34:	68a3      	ldr	r3, [r4, #8]
 810ef36:	bf0c      	ite	eq
 810ef38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810ef3c:	2500      	movne	r5, #0
 810ef3e:	4293      	cmp	r3, r2
 810ef40:	bfc4      	itt	gt
 810ef42:	1a9b      	subgt	r3, r3, r2
 810ef44:	18ed      	addgt	r5, r5, r3
 810ef46:	2600      	movs	r6, #0
 810ef48:	341a      	adds	r4, #26
 810ef4a:	42b5      	cmp	r5, r6
 810ef4c:	d11a      	bne.n	810ef84 <_printf_common+0xc8>
 810ef4e:	2000      	movs	r0, #0
 810ef50:	e008      	b.n	810ef64 <_printf_common+0xa8>
 810ef52:	2301      	movs	r3, #1
 810ef54:	4652      	mov	r2, sl
 810ef56:	4641      	mov	r1, r8
 810ef58:	4638      	mov	r0, r7
 810ef5a:	47c8      	blx	r9
 810ef5c:	3001      	adds	r0, #1
 810ef5e:	d103      	bne.n	810ef68 <_printf_common+0xac>
 810ef60:	f04f 30ff 	mov.w	r0, #4294967295
 810ef64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ef68:	3501      	adds	r5, #1
 810ef6a:	e7c6      	b.n	810eefa <_printf_common+0x3e>
 810ef6c:	18e1      	adds	r1, r4, r3
 810ef6e:	1c5a      	adds	r2, r3, #1
 810ef70:	2030      	movs	r0, #48	@ 0x30
 810ef72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810ef76:	4422      	add	r2, r4
 810ef78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810ef7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810ef80:	3302      	adds	r3, #2
 810ef82:	e7c7      	b.n	810ef14 <_printf_common+0x58>
 810ef84:	2301      	movs	r3, #1
 810ef86:	4622      	mov	r2, r4
 810ef88:	4641      	mov	r1, r8
 810ef8a:	4638      	mov	r0, r7
 810ef8c:	47c8      	blx	r9
 810ef8e:	3001      	adds	r0, #1
 810ef90:	d0e6      	beq.n	810ef60 <_printf_common+0xa4>
 810ef92:	3601      	adds	r6, #1
 810ef94:	e7d9      	b.n	810ef4a <_printf_common+0x8e>
	...

0810ef98 <_printf_i>:
 810ef98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810ef9c:	7e0f      	ldrb	r7, [r1, #24]
 810ef9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810efa0:	2f78      	cmp	r7, #120	@ 0x78
 810efa2:	4691      	mov	r9, r2
 810efa4:	4680      	mov	r8, r0
 810efa6:	460c      	mov	r4, r1
 810efa8:	469a      	mov	sl, r3
 810efaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810efae:	d807      	bhi.n	810efc0 <_printf_i+0x28>
 810efb0:	2f62      	cmp	r7, #98	@ 0x62
 810efb2:	d80a      	bhi.n	810efca <_printf_i+0x32>
 810efb4:	2f00      	cmp	r7, #0
 810efb6:	f000 80d1 	beq.w	810f15c <_printf_i+0x1c4>
 810efba:	2f58      	cmp	r7, #88	@ 0x58
 810efbc:	f000 80b8 	beq.w	810f130 <_printf_i+0x198>
 810efc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810efc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810efc8:	e03a      	b.n	810f040 <_printf_i+0xa8>
 810efca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810efce:	2b15      	cmp	r3, #21
 810efd0:	d8f6      	bhi.n	810efc0 <_printf_i+0x28>
 810efd2:	a101      	add	r1, pc, #4	@ (adr r1, 810efd8 <_printf_i+0x40>)
 810efd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810efd8:	0810f031 	.word	0x0810f031
 810efdc:	0810f045 	.word	0x0810f045
 810efe0:	0810efc1 	.word	0x0810efc1
 810efe4:	0810efc1 	.word	0x0810efc1
 810efe8:	0810efc1 	.word	0x0810efc1
 810efec:	0810efc1 	.word	0x0810efc1
 810eff0:	0810f045 	.word	0x0810f045
 810eff4:	0810efc1 	.word	0x0810efc1
 810eff8:	0810efc1 	.word	0x0810efc1
 810effc:	0810efc1 	.word	0x0810efc1
 810f000:	0810efc1 	.word	0x0810efc1
 810f004:	0810f143 	.word	0x0810f143
 810f008:	0810f06f 	.word	0x0810f06f
 810f00c:	0810f0fd 	.word	0x0810f0fd
 810f010:	0810efc1 	.word	0x0810efc1
 810f014:	0810efc1 	.word	0x0810efc1
 810f018:	0810f165 	.word	0x0810f165
 810f01c:	0810efc1 	.word	0x0810efc1
 810f020:	0810f06f 	.word	0x0810f06f
 810f024:	0810efc1 	.word	0x0810efc1
 810f028:	0810efc1 	.word	0x0810efc1
 810f02c:	0810f105 	.word	0x0810f105
 810f030:	6833      	ldr	r3, [r6, #0]
 810f032:	1d1a      	adds	r2, r3, #4
 810f034:	681b      	ldr	r3, [r3, #0]
 810f036:	6032      	str	r2, [r6, #0]
 810f038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810f03c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810f040:	2301      	movs	r3, #1
 810f042:	e09c      	b.n	810f17e <_printf_i+0x1e6>
 810f044:	6833      	ldr	r3, [r6, #0]
 810f046:	6820      	ldr	r0, [r4, #0]
 810f048:	1d19      	adds	r1, r3, #4
 810f04a:	6031      	str	r1, [r6, #0]
 810f04c:	0606      	lsls	r6, r0, #24
 810f04e:	d501      	bpl.n	810f054 <_printf_i+0xbc>
 810f050:	681d      	ldr	r5, [r3, #0]
 810f052:	e003      	b.n	810f05c <_printf_i+0xc4>
 810f054:	0645      	lsls	r5, r0, #25
 810f056:	d5fb      	bpl.n	810f050 <_printf_i+0xb8>
 810f058:	f9b3 5000 	ldrsh.w	r5, [r3]
 810f05c:	2d00      	cmp	r5, #0
 810f05e:	da03      	bge.n	810f068 <_printf_i+0xd0>
 810f060:	232d      	movs	r3, #45	@ 0x2d
 810f062:	426d      	negs	r5, r5
 810f064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f068:	4858      	ldr	r0, [pc, #352]	@ (810f1cc <_printf_i+0x234>)
 810f06a:	230a      	movs	r3, #10
 810f06c:	e011      	b.n	810f092 <_printf_i+0xfa>
 810f06e:	6821      	ldr	r1, [r4, #0]
 810f070:	6833      	ldr	r3, [r6, #0]
 810f072:	0608      	lsls	r0, r1, #24
 810f074:	f853 5b04 	ldr.w	r5, [r3], #4
 810f078:	d402      	bmi.n	810f080 <_printf_i+0xe8>
 810f07a:	0649      	lsls	r1, r1, #25
 810f07c:	bf48      	it	mi
 810f07e:	b2ad      	uxthmi	r5, r5
 810f080:	2f6f      	cmp	r7, #111	@ 0x6f
 810f082:	4852      	ldr	r0, [pc, #328]	@ (810f1cc <_printf_i+0x234>)
 810f084:	6033      	str	r3, [r6, #0]
 810f086:	bf14      	ite	ne
 810f088:	230a      	movne	r3, #10
 810f08a:	2308      	moveq	r3, #8
 810f08c:	2100      	movs	r1, #0
 810f08e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810f092:	6866      	ldr	r6, [r4, #4]
 810f094:	60a6      	str	r6, [r4, #8]
 810f096:	2e00      	cmp	r6, #0
 810f098:	db05      	blt.n	810f0a6 <_printf_i+0x10e>
 810f09a:	6821      	ldr	r1, [r4, #0]
 810f09c:	432e      	orrs	r6, r5
 810f09e:	f021 0104 	bic.w	r1, r1, #4
 810f0a2:	6021      	str	r1, [r4, #0]
 810f0a4:	d04b      	beq.n	810f13e <_printf_i+0x1a6>
 810f0a6:	4616      	mov	r6, r2
 810f0a8:	fbb5 f1f3 	udiv	r1, r5, r3
 810f0ac:	fb03 5711 	mls	r7, r3, r1, r5
 810f0b0:	5dc7      	ldrb	r7, [r0, r7]
 810f0b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810f0b6:	462f      	mov	r7, r5
 810f0b8:	42bb      	cmp	r3, r7
 810f0ba:	460d      	mov	r5, r1
 810f0bc:	d9f4      	bls.n	810f0a8 <_printf_i+0x110>
 810f0be:	2b08      	cmp	r3, #8
 810f0c0:	d10b      	bne.n	810f0da <_printf_i+0x142>
 810f0c2:	6823      	ldr	r3, [r4, #0]
 810f0c4:	07df      	lsls	r7, r3, #31
 810f0c6:	d508      	bpl.n	810f0da <_printf_i+0x142>
 810f0c8:	6923      	ldr	r3, [r4, #16]
 810f0ca:	6861      	ldr	r1, [r4, #4]
 810f0cc:	4299      	cmp	r1, r3
 810f0ce:	bfde      	ittt	le
 810f0d0:	2330      	movle	r3, #48	@ 0x30
 810f0d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 810f0d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 810f0da:	1b92      	subs	r2, r2, r6
 810f0dc:	6122      	str	r2, [r4, #16]
 810f0de:	f8cd a000 	str.w	sl, [sp]
 810f0e2:	464b      	mov	r3, r9
 810f0e4:	aa03      	add	r2, sp, #12
 810f0e6:	4621      	mov	r1, r4
 810f0e8:	4640      	mov	r0, r8
 810f0ea:	f7ff fee7 	bl	810eebc <_printf_common>
 810f0ee:	3001      	adds	r0, #1
 810f0f0:	d14a      	bne.n	810f188 <_printf_i+0x1f0>
 810f0f2:	f04f 30ff 	mov.w	r0, #4294967295
 810f0f6:	b004      	add	sp, #16
 810f0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f0fc:	6823      	ldr	r3, [r4, #0]
 810f0fe:	f043 0320 	orr.w	r3, r3, #32
 810f102:	6023      	str	r3, [r4, #0]
 810f104:	4832      	ldr	r0, [pc, #200]	@ (810f1d0 <_printf_i+0x238>)
 810f106:	2778      	movs	r7, #120	@ 0x78
 810f108:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810f10c:	6823      	ldr	r3, [r4, #0]
 810f10e:	6831      	ldr	r1, [r6, #0]
 810f110:	061f      	lsls	r7, r3, #24
 810f112:	f851 5b04 	ldr.w	r5, [r1], #4
 810f116:	d402      	bmi.n	810f11e <_printf_i+0x186>
 810f118:	065f      	lsls	r7, r3, #25
 810f11a:	bf48      	it	mi
 810f11c:	b2ad      	uxthmi	r5, r5
 810f11e:	6031      	str	r1, [r6, #0]
 810f120:	07d9      	lsls	r1, r3, #31
 810f122:	bf44      	itt	mi
 810f124:	f043 0320 	orrmi.w	r3, r3, #32
 810f128:	6023      	strmi	r3, [r4, #0]
 810f12a:	b11d      	cbz	r5, 810f134 <_printf_i+0x19c>
 810f12c:	2310      	movs	r3, #16
 810f12e:	e7ad      	b.n	810f08c <_printf_i+0xf4>
 810f130:	4826      	ldr	r0, [pc, #152]	@ (810f1cc <_printf_i+0x234>)
 810f132:	e7e9      	b.n	810f108 <_printf_i+0x170>
 810f134:	6823      	ldr	r3, [r4, #0]
 810f136:	f023 0320 	bic.w	r3, r3, #32
 810f13a:	6023      	str	r3, [r4, #0]
 810f13c:	e7f6      	b.n	810f12c <_printf_i+0x194>
 810f13e:	4616      	mov	r6, r2
 810f140:	e7bd      	b.n	810f0be <_printf_i+0x126>
 810f142:	6833      	ldr	r3, [r6, #0]
 810f144:	6825      	ldr	r5, [r4, #0]
 810f146:	6961      	ldr	r1, [r4, #20]
 810f148:	1d18      	adds	r0, r3, #4
 810f14a:	6030      	str	r0, [r6, #0]
 810f14c:	062e      	lsls	r6, r5, #24
 810f14e:	681b      	ldr	r3, [r3, #0]
 810f150:	d501      	bpl.n	810f156 <_printf_i+0x1be>
 810f152:	6019      	str	r1, [r3, #0]
 810f154:	e002      	b.n	810f15c <_printf_i+0x1c4>
 810f156:	0668      	lsls	r0, r5, #25
 810f158:	d5fb      	bpl.n	810f152 <_printf_i+0x1ba>
 810f15a:	8019      	strh	r1, [r3, #0]
 810f15c:	2300      	movs	r3, #0
 810f15e:	6123      	str	r3, [r4, #16]
 810f160:	4616      	mov	r6, r2
 810f162:	e7bc      	b.n	810f0de <_printf_i+0x146>
 810f164:	6833      	ldr	r3, [r6, #0]
 810f166:	1d1a      	adds	r2, r3, #4
 810f168:	6032      	str	r2, [r6, #0]
 810f16a:	681e      	ldr	r6, [r3, #0]
 810f16c:	6862      	ldr	r2, [r4, #4]
 810f16e:	2100      	movs	r1, #0
 810f170:	4630      	mov	r0, r6
 810f172:	f7f1 f8b5 	bl	81002e0 <memchr>
 810f176:	b108      	cbz	r0, 810f17c <_printf_i+0x1e4>
 810f178:	1b80      	subs	r0, r0, r6
 810f17a:	6060      	str	r0, [r4, #4]
 810f17c:	6863      	ldr	r3, [r4, #4]
 810f17e:	6123      	str	r3, [r4, #16]
 810f180:	2300      	movs	r3, #0
 810f182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f186:	e7aa      	b.n	810f0de <_printf_i+0x146>
 810f188:	6923      	ldr	r3, [r4, #16]
 810f18a:	4632      	mov	r2, r6
 810f18c:	4649      	mov	r1, r9
 810f18e:	4640      	mov	r0, r8
 810f190:	47d0      	blx	sl
 810f192:	3001      	adds	r0, #1
 810f194:	d0ad      	beq.n	810f0f2 <_printf_i+0x15a>
 810f196:	6823      	ldr	r3, [r4, #0]
 810f198:	079b      	lsls	r3, r3, #30
 810f19a:	d413      	bmi.n	810f1c4 <_printf_i+0x22c>
 810f19c:	68e0      	ldr	r0, [r4, #12]
 810f19e:	9b03      	ldr	r3, [sp, #12]
 810f1a0:	4298      	cmp	r0, r3
 810f1a2:	bfb8      	it	lt
 810f1a4:	4618      	movlt	r0, r3
 810f1a6:	e7a6      	b.n	810f0f6 <_printf_i+0x15e>
 810f1a8:	2301      	movs	r3, #1
 810f1aa:	4632      	mov	r2, r6
 810f1ac:	4649      	mov	r1, r9
 810f1ae:	4640      	mov	r0, r8
 810f1b0:	47d0      	blx	sl
 810f1b2:	3001      	adds	r0, #1
 810f1b4:	d09d      	beq.n	810f0f2 <_printf_i+0x15a>
 810f1b6:	3501      	adds	r5, #1
 810f1b8:	68e3      	ldr	r3, [r4, #12]
 810f1ba:	9903      	ldr	r1, [sp, #12]
 810f1bc:	1a5b      	subs	r3, r3, r1
 810f1be:	42ab      	cmp	r3, r5
 810f1c0:	dcf2      	bgt.n	810f1a8 <_printf_i+0x210>
 810f1c2:	e7eb      	b.n	810f19c <_printf_i+0x204>
 810f1c4:	2500      	movs	r5, #0
 810f1c6:	f104 0619 	add.w	r6, r4, #25
 810f1ca:	e7f5      	b.n	810f1b8 <_printf_i+0x220>
 810f1cc:	081116e8 	.word	0x081116e8
 810f1d0:	081116f9 	.word	0x081116f9

0810f1d4 <std>:
 810f1d4:	2300      	movs	r3, #0
 810f1d6:	b510      	push	{r4, lr}
 810f1d8:	4604      	mov	r4, r0
 810f1da:	e9c0 3300 	strd	r3, r3, [r0]
 810f1de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810f1e2:	6083      	str	r3, [r0, #8]
 810f1e4:	8181      	strh	r1, [r0, #12]
 810f1e6:	6643      	str	r3, [r0, #100]	@ 0x64
 810f1e8:	81c2      	strh	r2, [r0, #14]
 810f1ea:	6183      	str	r3, [r0, #24]
 810f1ec:	4619      	mov	r1, r3
 810f1ee:	2208      	movs	r2, #8
 810f1f0:	305c      	adds	r0, #92	@ 0x5c
 810f1f2:	f000 fa1b 	bl	810f62c <memset>
 810f1f6:	4b0d      	ldr	r3, [pc, #52]	@ (810f22c <std+0x58>)
 810f1f8:	6263      	str	r3, [r4, #36]	@ 0x24
 810f1fa:	4b0d      	ldr	r3, [pc, #52]	@ (810f230 <std+0x5c>)
 810f1fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 810f1fe:	4b0d      	ldr	r3, [pc, #52]	@ (810f234 <std+0x60>)
 810f200:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810f202:	4b0d      	ldr	r3, [pc, #52]	@ (810f238 <std+0x64>)
 810f204:	6323      	str	r3, [r4, #48]	@ 0x30
 810f206:	4b0d      	ldr	r3, [pc, #52]	@ (810f23c <std+0x68>)
 810f208:	6224      	str	r4, [r4, #32]
 810f20a:	429c      	cmp	r4, r3
 810f20c:	d006      	beq.n	810f21c <std+0x48>
 810f20e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810f212:	4294      	cmp	r4, r2
 810f214:	d002      	beq.n	810f21c <std+0x48>
 810f216:	33d0      	adds	r3, #208	@ 0xd0
 810f218:	429c      	cmp	r4, r3
 810f21a:	d105      	bne.n	810f228 <std+0x54>
 810f21c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810f220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810f224:	f000 bb30 	b.w	810f888 <__retarget_lock_init_recursive>
 810f228:	bd10      	pop	{r4, pc}
 810f22a:	bf00      	nop
 810f22c:	0810f449 	.word	0x0810f449
 810f230:	0810f46b 	.word	0x0810f46b
 810f234:	0810f4a3 	.word	0x0810f4a3
 810f238:	0810f4c7 	.word	0x0810f4c7
 810f23c:	10005014 	.word	0x10005014

0810f240 <stdio_exit_handler>:
 810f240:	4a02      	ldr	r2, [pc, #8]	@ (810f24c <stdio_exit_handler+0xc>)
 810f242:	4903      	ldr	r1, [pc, #12]	@ (810f250 <stdio_exit_handler+0x10>)
 810f244:	4803      	ldr	r0, [pc, #12]	@ (810f254 <stdio_exit_handler+0x14>)
 810f246:	f000 b869 	b.w	810f31c <_fwalk_sglue>
 810f24a:	bf00      	nop
 810f24c:	10000014 	.word	0x10000014
 810f250:	08111075 	.word	0x08111075
 810f254:	10000024 	.word	0x10000024

0810f258 <cleanup_stdio>:
 810f258:	6841      	ldr	r1, [r0, #4]
 810f25a:	4b0c      	ldr	r3, [pc, #48]	@ (810f28c <cleanup_stdio+0x34>)
 810f25c:	4299      	cmp	r1, r3
 810f25e:	b510      	push	{r4, lr}
 810f260:	4604      	mov	r4, r0
 810f262:	d001      	beq.n	810f268 <cleanup_stdio+0x10>
 810f264:	f001 ff06 	bl	8111074 <_fflush_r>
 810f268:	68a1      	ldr	r1, [r4, #8]
 810f26a:	4b09      	ldr	r3, [pc, #36]	@ (810f290 <cleanup_stdio+0x38>)
 810f26c:	4299      	cmp	r1, r3
 810f26e:	d002      	beq.n	810f276 <cleanup_stdio+0x1e>
 810f270:	4620      	mov	r0, r4
 810f272:	f001 feff 	bl	8111074 <_fflush_r>
 810f276:	68e1      	ldr	r1, [r4, #12]
 810f278:	4b06      	ldr	r3, [pc, #24]	@ (810f294 <cleanup_stdio+0x3c>)
 810f27a:	4299      	cmp	r1, r3
 810f27c:	d004      	beq.n	810f288 <cleanup_stdio+0x30>
 810f27e:	4620      	mov	r0, r4
 810f280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810f284:	f001 bef6 	b.w	8111074 <_fflush_r>
 810f288:	bd10      	pop	{r4, pc}
 810f28a:	bf00      	nop
 810f28c:	10005014 	.word	0x10005014
 810f290:	1000507c 	.word	0x1000507c
 810f294:	100050e4 	.word	0x100050e4

0810f298 <global_stdio_init.part.0>:
 810f298:	b510      	push	{r4, lr}
 810f29a:	4b0b      	ldr	r3, [pc, #44]	@ (810f2c8 <global_stdio_init.part.0+0x30>)
 810f29c:	4c0b      	ldr	r4, [pc, #44]	@ (810f2cc <global_stdio_init.part.0+0x34>)
 810f29e:	4a0c      	ldr	r2, [pc, #48]	@ (810f2d0 <global_stdio_init.part.0+0x38>)
 810f2a0:	601a      	str	r2, [r3, #0]
 810f2a2:	4620      	mov	r0, r4
 810f2a4:	2200      	movs	r2, #0
 810f2a6:	2104      	movs	r1, #4
 810f2a8:	f7ff ff94 	bl	810f1d4 <std>
 810f2ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810f2b0:	2201      	movs	r2, #1
 810f2b2:	2109      	movs	r1, #9
 810f2b4:	f7ff ff8e 	bl	810f1d4 <std>
 810f2b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810f2bc:	2202      	movs	r2, #2
 810f2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810f2c2:	2112      	movs	r1, #18
 810f2c4:	f7ff bf86 	b.w	810f1d4 <std>
 810f2c8:	1000514c 	.word	0x1000514c
 810f2cc:	10005014 	.word	0x10005014
 810f2d0:	0810f241 	.word	0x0810f241

0810f2d4 <__sfp_lock_acquire>:
 810f2d4:	4801      	ldr	r0, [pc, #4]	@ (810f2dc <__sfp_lock_acquire+0x8>)
 810f2d6:	f000 bad8 	b.w	810f88a <__retarget_lock_acquire_recursive>
 810f2da:	bf00      	nop
 810f2dc:	10005155 	.word	0x10005155

0810f2e0 <__sfp_lock_release>:
 810f2e0:	4801      	ldr	r0, [pc, #4]	@ (810f2e8 <__sfp_lock_release+0x8>)
 810f2e2:	f000 bad3 	b.w	810f88c <__retarget_lock_release_recursive>
 810f2e6:	bf00      	nop
 810f2e8:	10005155 	.word	0x10005155

0810f2ec <__sinit>:
 810f2ec:	b510      	push	{r4, lr}
 810f2ee:	4604      	mov	r4, r0
 810f2f0:	f7ff fff0 	bl	810f2d4 <__sfp_lock_acquire>
 810f2f4:	6a23      	ldr	r3, [r4, #32]
 810f2f6:	b11b      	cbz	r3, 810f300 <__sinit+0x14>
 810f2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810f2fc:	f7ff bff0 	b.w	810f2e0 <__sfp_lock_release>
 810f300:	4b04      	ldr	r3, [pc, #16]	@ (810f314 <__sinit+0x28>)
 810f302:	6223      	str	r3, [r4, #32]
 810f304:	4b04      	ldr	r3, [pc, #16]	@ (810f318 <__sinit+0x2c>)
 810f306:	681b      	ldr	r3, [r3, #0]
 810f308:	2b00      	cmp	r3, #0
 810f30a:	d1f5      	bne.n	810f2f8 <__sinit+0xc>
 810f30c:	f7ff ffc4 	bl	810f298 <global_stdio_init.part.0>
 810f310:	e7f2      	b.n	810f2f8 <__sinit+0xc>
 810f312:	bf00      	nop
 810f314:	0810f259 	.word	0x0810f259
 810f318:	1000514c 	.word	0x1000514c

0810f31c <_fwalk_sglue>:
 810f31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810f320:	4607      	mov	r7, r0
 810f322:	4688      	mov	r8, r1
 810f324:	4614      	mov	r4, r2
 810f326:	2600      	movs	r6, #0
 810f328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810f32c:	f1b9 0901 	subs.w	r9, r9, #1
 810f330:	d505      	bpl.n	810f33e <_fwalk_sglue+0x22>
 810f332:	6824      	ldr	r4, [r4, #0]
 810f334:	2c00      	cmp	r4, #0
 810f336:	d1f7      	bne.n	810f328 <_fwalk_sglue+0xc>
 810f338:	4630      	mov	r0, r6
 810f33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810f33e:	89ab      	ldrh	r3, [r5, #12]
 810f340:	2b01      	cmp	r3, #1
 810f342:	d907      	bls.n	810f354 <_fwalk_sglue+0x38>
 810f344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810f348:	3301      	adds	r3, #1
 810f34a:	d003      	beq.n	810f354 <_fwalk_sglue+0x38>
 810f34c:	4629      	mov	r1, r5
 810f34e:	4638      	mov	r0, r7
 810f350:	47c0      	blx	r8
 810f352:	4306      	orrs	r6, r0
 810f354:	3568      	adds	r5, #104	@ 0x68
 810f356:	e7e9      	b.n	810f32c <_fwalk_sglue+0x10>

0810f358 <iprintf>:
 810f358:	b40f      	push	{r0, r1, r2, r3}
 810f35a:	b507      	push	{r0, r1, r2, lr}
 810f35c:	4906      	ldr	r1, [pc, #24]	@ (810f378 <iprintf+0x20>)
 810f35e:	ab04      	add	r3, sp, #16
 810f360:	6808      	ldr	r0, [r1, #0]
 810f362:	f853 2b04 	ldr.w	r2, [r3], #4
 810f366:	6881      	ldr	r1, [r0, #8]
 810f368:	9301      	str	r3, [sp, #4]
 810f36a:	f001 fce7 	bl	8110d3c <_vfiprintf_r>
 810f36e:	b003      	add	sp, #12
 810f370:	f85d eb04 	ldr.w	lr, [sp], #4
 810f374:	b004      	add	sp, #16
 810f376:	4770      	bx	lr
 810f378:	10000020 	.word	0x10000020

0810f37c <putchar>:
 810f37c:	4b02      	ldr	r3, [pc, #8]	@ (810f388 <putchar+0xc>)
 810f37e:	4601      	mov	r1, r0
 810f380:	6818      	ldr	r0, [r3, #0]
 810f382:	6882      	ldr	r2, [r0, #8]
 810f384:	f001 bf00 	b.w	8111188 <_putc_r>
 810f388:	10000020 	.word	0x10000020

0810f38c <_puts_r>:
 810f38c:	6a03      	ldr	r3, [r0, #32]
 810f38e:	b570      	push	{r4, r5, r6, lr}
 810f390:	6884      	ldr	r4, [r0, #8]
 810f392:	4605      	mov	r5, r0
 810f394:	460e      	mov	r6, r1
 810f396:	b90b      	cbnz	r3, 810f39c <_puts_r+0x10>
 810f398:	f7ff ffa8 	bl	810f2ec <__sinit>
 810f39c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810f39e:	07db      	lsls	r3, r3, #31
 810f3a0:	d405      	bmi.n	810f3ae <_puts_r+0x22>
 810f3a2:	89a3      	ldrh	r3, [r4, #12]
 810f3a4:	0598      	lsls	r0, r3, #22
 810f3a6:	d402      	bmi.n	810f3ae <_puts_r+0x22>
 810f3a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810f3aa:	f000 fa6e 	bl	810f88a <__retarget_lock_acquire_recursive>
 810f3ae:	89a3      	ldrh	r3, [r4, #12]
 810f3b0:	0719      	lsls	r1, r3, #28
 810f3b2:	d502      	bpl.n	810f3ba <_puts_r+0x2e>
 810f3b4:	6923      	ldr	r3, [r4, #16]
 810f3b6:	2b00      	cmp	r3, #0
 810f3b8:	d135      	bne.n	810f426 <_puts_r+0x9a>
 810f3ba:	4621      	mov	r1, r4
 810f3bc:	4628      	mov	r0, r5
 810f3be:	f000 f8c5 	bl	810f54c <__swsetup_r>
 810f3c2:	b380      	cbz	r0, 810f426 <_puts_r+0x9a>
 810f3c4:	f04f 35ff 	mov.w	r5, #4294967295
 810f3c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810f3ca:	07da      	lsls	r2, r3, #31
 810f3cc:	d405      	bmi.n	810f3da <_puts_r+0x4e>
 810f3ce:	89a3      	ldrh	r3, [r4, #12]
 810f3d0:	059b      	lsls	r3, r3, #22
 810f3d2:	d402      	bmi.n	810f3da <_puts_r+0x4e>
 810f3d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810f3d6:	f000 fa59 	bl	810f88c <__retarget_lock_release_recursive>
 810f3da:	4628      	mov	r0, r5
 810f3dc:	bd70      	pop	{r4, r5, r6, pc}
 810f3de:	2b00      	cmp	r3, #0
 810f3e0:	da04      	bge.n	810f3ec <_puts_r+0x60>
 810f3e2:	69a2      	ldr	r2, [r4, #24]
 810f3e4:	429a      	cmp	r2, r3
 810f3e6:	dc17      	bgt.n	810f418 <_puts_r+0x8c>
 810f3e8:	290a      	cmp	r1, #10
 810f3ea:	d015      	beq.n	810f418 <_puts_r+0x8c>
 810f3ec:	6823      	ldr	r3, [r4, #0]
 810f3ee:	1c5a      	adds	r2, r3, #1
 810f3f0:	6022      	str	r2, [r4, #0]
 810f3f2:	7019      	strb	r1, [r3, #0]
 810f3f4:	68a3      	ldr	r3, [r4, #8]
 810f3f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810f3fa:	3b01      	subs	r3, #1
 810f3fc:	60a3      	str	r3, [r4, #8]
 810f3fe:	2900      	cmp	r1, #0
 810f400:	d1ed      	bne.n	810f3de <_puts_r+0x52>
 810f402:	2b00      	cmp	r3, #0
 810f404:	da11      	bge.n	810f42a <_puts_r+0x9e>
 810f406:	4622      	mov	r2, r4
 810f408:	210a      	movs	r1, #10
 810f40a:	4628      	mov	r0, r5
 810f40c:	f000 f85f 	bl	810f4ce <__swbuf_r>
 810f410:	3001      	adds	r0, #1
 810f412:	d0d7      	beq.n	810f3c4 <_puts_r+0x38>
 810f414:	250a      	movs	r5, #10
 810f416:	e7d7      	b.n	810f3c8 <_puts_r+0x3c>
 810f418:	4622      	mov	r2, r4
 810f41a:	4628      	mov	r0, r5
 810f41c:	f000 f857 	bl	810f4ce <__swbuf_r>
 810f420:	3001      	adds	r0, #1
 810f422:	d1e7      	bne.n	810f3f4 <_puts_r+0x68>
 810f424:	e7ce      	b.n	810f3c4 <_puts_r+0x38>
 810f426:	3e01      	subs	r6, #1
 810f428:	e7e4      	b.n	810f3f4 <_puts_r+0x68>
 810f42a:	6823      	ldr	r3, [r4, #0]
 810f42c:	1c5a      	adds	r2, r3, #1
 810f42e:	6022      	str	r2, [r4, #0]
 810f430:	220a      	movs	r2, #10
 810f432:	701a      	strb	r2, [r3, #0]
 810f434:	e7ee      	b.n	810f414 <_puts_r+0x88>
	...

0810f438 <puts>:
 810f438:	4b02      	ldr	r3, [pc, #8]	@ (810f444 <puts+0xc>)
 810f43a:	4601      	mov	r1, r0
 810f43c:	6818      	ldr	r0, [r3, #0]
 810f43e:	f7ff bfa5 	b.w	810f38c <_puts_r>
 810f442:	bf00      	nop
 810f444:	10000020 	.word	0x10000020

0810f448 <__sread>:
 810f448:	b510      	push	{r4, lr}
 810f44a:	460c      	mov	r4, r1
 810f44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f450:	f000 f9a8 	bl	810f7a4 <_read_r>
 810f454:	2800      	cmp	r0, #0
 810f456:	bfab      	itete	ge
 810f458:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810f45a:	89a3      	ldrhlt	r3, [r4, #12]
 810f45c:	181b      	addge	r3, r3, r0
 810f45e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810f462:	bfac      	ite	ge
 810f464:	6563      	strge	r3, [r4, #84]	@ 0x54
 810f466:	81a3      	strhlt	r3, [r4, #12]
 810f468:	bd10      	pop	{r4, pc}

0810f46a <__swrite>:
 810f46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f46e:	461f      	mov	r7, r3
 810f470:	898b      	ldrh	r3, [r1, #12]
 810f472:	05db      	lsls	r3, r3, #23
 810f474:	4605      	mov	r5, r0
 810f476:	460c      	mov	r4, r1
 810f478:	4616      	mov	r6, r2
 810f47a:	d505      	bpl.n	810f488 <__swrite+0x1e>
 810f47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f480:	2302      	movs	r3, #2
 810f482:	2200      	movs	r2, #0
 810f484:	f000 f97c 	bl	810f780 <_lseek_r>
 810f488:	89a3      	ldrh	r3, [r4, #12]
 810f48a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810f48e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810f492:	81a3      	strh	r3, [r4, #12]
 810f494:	4632      	mov	r2, r6
 810f496:	463b      	mov	r3, r7
 810f498:	4628      	mov	r0, r5
 810f49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f49e:	f000 b9b7 	b.w	810f810 <_write_r>

0810f4a2 <__sseek>:
 810f4a2:	b510      	push	{r4, lr}
 810f4a4:	460c      	mov	r4, r1
 810f4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f4aa:	f000 f969 	bl	810f780 <_lseek_r>
 810f4ae:	1c43      	adds	r3, r0, #1
 810f4b0:	89a3      	ldrh	r3, [r4, #12]
 810f4b2:	bf15      	itete	ne
 810f4b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 810f4b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810f4ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810f4be:	81a3      	strheq	r3, [r4, #12]
 810f4c0:	bf18      	it	ne
 810f4c2:	81a3      	strhne	r3, [r4, #12]
 810f4c4:	bd10      	pop	{r4, pc}

0810f4c6 <__sclose>:
 810f4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f4ca:	f000 b8eb 	b.w	810f6a4 <_close_r>

0810f4ce <__swbuf_r>:
 810f4ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810f4d0:	460e      	mov	r6, r1
 810f4d2:	4614      	mov	r4, r2
 810f4d4:	4605      	mov	r5, r0
 810f4d6:	b118      	cbz	r0, 810f4e0 <__swbuf_r+0x12>
 810f4d8:	6a03      	ldr	r3, [r0, #32]
 810f4da:	b90b      	cbnz	r3, 810f4e0 <__swbuf_r+0x12>
 810f4dc:	f7ff ff06 	bl	810f2ec <__sinit>
 810f4e0:	69a3      	ldr	r3, [r4, #24]
 810f4e2:	60a3      	str	r3, [r4, #8]
 810f4e4:	89a3      	ldrh	r3, [r4, #12]
 810f4e6:	071a      	lsls	r2, r3, #28
 810f4e8:	d501      	bpl.n	810f4ee <__swbuf_r+0x20>
 810f4ea:	6923      	ldr	r3, [r4, #16]
 810f4ec:	b943      	cbnz	r3, 810f500 <__swbuf_r+0x32>
 810f4ee:	4621      	mov	r1, r4
 810f4f0:	4628      	mov	r0, r5
 810f4f2:	f000 f82b 	bl	810f54c <__swsetup_r>
 810f4f6:	b118      	cbz	r0, 810f500 <__swbuf_r+0x32>
 810f4f8:	f04f 37ff 	mov.w	r7, #4294967295
 810f4fc:	4638      	mov	r0, r7
 810f4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810f500:	6823      	ldr	r3, [r4, #0]
 810f502:	6922      	ldr	r2, [r4, #16]
 810f504:	1a98      	subs	r0, r3, r2
 810f506:	6963      	ldr	r3, [r4, #20]
 810f508:	b2f6      	uxtb	r6, r6
 810f50a:	4283      	cmp	r3, r0
 810f50c:	4637      	mov	r7, r6
 810f50e:	dc05      	bgt.n	810f51c <__swbuf_r+0x4e>
 810f510:	4621      	mov	r1, r4
 810f512:	4628      	mov	r0, r5
 810f514:	f001 fdae 	bl	8111074 <_fflush_r>
 810f518:	2800      	cmp	r0, #0
 810f51a:	d1ed      	bne.n	810f4f8 <__swbuf_r+0x2a>
 810f51c:	68a3      	ldr	r3, [r4, #8]
 810f51e:	3b01      	subs	r3, #1
 810f520:	60a3      	str	r3, [r4, #8]
 810f522:	6823      	ldr	r3, [r4, #0]
 810f524:	1c5a      	adds	r2, r3, #1
 810f526:	6022      	str	r2, [r4, #0]
 810f528:	701e      	strb	r6, [r3, #0]
 810f52a:	6962      	ldr	r2, [r4, #20]
 810f52c:	1c43      	adds	r3, r0, #1
 810f52e:	429a      	cmp	r2, r3
 810f530:	d004      	beq.n	810f53c <__swbuf_r+0x6e>
 810f532:	89a3      	ldrh	r3, [r4, #12]
 810f534:	07db      	lsls	r3, r3, #31
 810f536:	d5e1      	bpl.n	810f4fc <__swbuf_r+0x2e>
 810f538:	2e0a      	cmp	r6, #10
 810f53a:	d1df      	bne.n	810f4fc <__swbuf_r+0x2e>
 810f53c:	4621      	mov	r1, r4
 810f53e:	4628      	mov	r0, r5
 810f540:	f001 fd98 	bl	8111074 <_fflush_r>
 810f544:	2800      	cmp	r0, #0
 810f546:	d0d9      	beq.n	810f4fc <__swbuf_r+0x2e>
 810f548:	e7d6      	b.n	810f4f8 <__swbuf_r+0x2a>
	...

0810f54c <__swsetup_r>:
 810f54c:	b538      	push	{r3, r4, r5, lr}
 810f54e:	4b29      	ldr	r3, [pc, #164]	@ (810f5f4 <__swsetup_r+0xa8>)
 810f550:	4605      	mov	r5, r0
 810f552:	6818      	ldr	r0, [r3, #0]
 810f554:	460c      	mov	r4, r1
 810f556:	b118      	cbz	r0, 810f560 <__swsetup_r+0x14>
 810f558:	6a03      	ldr	r3, [r0, #32]
 810f55a:	b90b      	cbnz	r3, 810f560 <__swsetup_r+0x14>
 810f55c:	f7ff fec6 	bl	810f2ec <__sinit>
 810f560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810f564:	0719      	lsls	r1, r3, #28
 810f566:	d422      	bmi.n	810f5ae <__swsetup_r+0x62>
 810f568:	06da      	lsls	r2, r3, #27
 810f56a:	d407      	bmi.n	810f57c <__swsetup_r+0x30>
 810f56c:	2209      	movs	r2, #9
 810f56e:	602a      	str	r2, [r5, #0]
 810f570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810f574:	81a3      	strh	r3, [r4, #12]
 810f576:	f04f 30ff 	mov.w	r0, #4294967295
 810f57a:	e033      	b.n	810f5e4 <__swsetup_r+0x98>
 810f57c:	0758      	lsls	r0, r3, #29
 810f57e:	d512      	bpl.n	810f5a6 <__swsetup_r+0x5a>
 810f580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810f582:	b141      	cbz	r1, 810f596 <__swsetup_r+0x4a>
 810f584:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810f588:	4299      	cmp	r1, r3
 810f58a:	d002      	beq.n	810f592 <__swsetup_r+0x46>
 810f58c:	4628      	mov	r0, r5
 810f58e:	f000 ffe7 	bl	8110560 <_free_r>
 810f592:	2300      	movs	r3, #0
 810f594:	6363      	str	r3, [r4, #52]	@ 0x34
 810f596:	89a3      	ldrh	r3, [r4, #12]
 810f598:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810f59c:	81a3      	strh	r3, [r4, #12]
 810f59e:	2300      	movs	r3, #0
 810f5a0:	6063      	str	r3, [r4, #4]
 810f5a2:	6923      	ldr	r3, [r4, #16]
 810f5a4:	6023      	str	r3, [r4, #0]
 810f5a6:	89a3      	ldrh	r3, [r4, #12]
 810f5a8:	f043 0308 	orr.w	r3, r3, #8
 810f5ac:	81a3      	strh	r3, [r4, #12]
 810f5ae:	6923      	ldr	r3, [r4, #16]
 810f5b0:	b94b      	cbnz	r3, 810f5c6 <__swsetup_r+0x7a>
 810f5b2:	89a3      	ldrh	r3, [r4, #12]
 810f5b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810f5b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810f5bc:	d003      	beq.n	810f5c6 <__swsetup_r+0x7a>
 810f5be:	4621      	mov	r1, r4
 810f5c0:	4628      	mov	r0, r5
 810f5c2:	f001 fda5 	bl	8111110 <__smakebuf_r>
 810f5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810f5ca:	f013 0201 	ands.w	r2, r3, #1
 810f5ce:	d00a      	beq.n	810f5e6 <__swsetup_r+0x9a>
 810f5d0:	2200      	movs	r2, #0
 810f5d2:	60a2      	str	r2, [r4, #8]
 810f5d4:	6962      	ldr	r2, [r4, #20]
 810f5d6:	4252      	negs	r2, r2
 810f5d8:	61a2      	str	r2, [r4, #24]
 810f5da:	6922      	ldr	r2, [r4, #16]
 810f5dc:	b942      	cbnz	r2, 810f5f0 <__swsetup_r+0xa4>
 810f5de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810f5e2:	d1c5      	bne.n	810f570 <__swsetup_r+0x24>
 810f5e4:	bd38      	pop	{r3, r4, r5, pc}
 810f5e6:	0799      	lsls	r1, r3, #30
 810f5e8:	bf58      	it	pl
 810f5ea:	6962      	ldrpl	r2, [r4, #20]
 810f5ec:	60a2      	str	r2, [r4, #8]
 810f5ee:	e7f4      	b.n	810f5da <__swsetup_r+0x8e>
 810f5f0:	2000      	movs	r0, #0
 810f5f2:	e7f7      	b.n	810f5e4 <__swsetup_r+0x98>
 810f5f4:	10000020 	.word	0x10000020

0810f5f8 <memmove>:
 810f5f8:	4288      	cmp	r0, r1
 810f5fa:	b510      	push	{r4, lr}
 810f5fc:	eb01 0402 	add.w	r4, r1, r2
 810f600:	d902      	bls.n	810f608 <memmove+0x10>
 810f602:	4284      	cmp	r4, r0
 810f604:	4623      	mov	r3, r4
 810f606:	d807      	bhi.n	810f618 <memmove+0x20>
 810f608:	1e43      	subs	r3, r0, #1
 810f60a:	42a1      	cmp	r1, r4
 810f60c:	d008      	beq.n	810f620 <memmove+0x28>
 810f60e:	f811 2b01 	ldrb.w	r2, [r1], #1
 810f612:	f803 2f01 	strb.w	r2, [r3, #1]!
 810f616:	e7f8      	b.n	810f60a <memmove+0x12>
 810f618:	4402      	add	r2, r0
 810f61a:	4601      	mov	r1, r0
 810f61c:	428a      	cmp	r2, r1
 810f61e:	d100      	bne.n	810f622 <memmove+0x2a>
 810f620:	bd10      	pop	{r4, pc}
 810f622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810f626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810f62a:	e7f7      	b.n	810f61c <memmove+0x24>

0810f62c <memset>:
 810f62c:	4402      	add	r2, r0
 810f62e:	4603      	mov	r3, r0
 810f630:	4293      	cmp	r3, r2
 810f632:	d100      	bne.n	810f636 <memset+0xa>
 810f634:	4770      	bx	lr
 810f636:	f803 1b01 	strb.w	r1, [r3], #1
 810f63a:	e7f9      	b.n	810f630 <memset+0x4>

0810f63c <_raise_r>:
 810f63c:	291f      	cmp	r1, #31
 810f63e:	b538      	push	{r3, r4, r5, lr}
 810f640:	4605      	mov	r5, r0
 810f642:	460c      	mov	r4, r1
 810f644:	d904      	bls.n	810f650 <_raise_r+0x14>
 810f646:	2316      	movs	r3, #22
 810f648:	6003      	str	r3, [r0, #0]
 810f64a:	f04f 30ff 	mov.w	r0, #4294967295
 810f64e:	bd38      	pop	{r3, r4, r5, pc}
 810f650:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810f652:	b112      	cbz	r2, 810f65a <_raise_r+0x1e>
 810f654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810f658:	b94b      	cbnz	r3, 810f66e <_raise_r+0x32>
 810f65a:	4628      	mov	r0, r5
 810f65c:	f000 f8c6 	bl	810f7ec <_getpid_r>
 810f660:	4622      	mov	r2, r4
 810f662:	4601      	mov	r1, r0
 810f664:	4628      	mov	r0, r5
 810f666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810f66a:	f000 b8ad 	b.w	810f7c8 <_kill_r>
 810f66e:	2b01      	cmp	r3, #1
 810f670:	d00a      	beq.n	810f688 <_raise_r+0x4c>
 810f672:	1c59      	adds	r1, r3, #1
 810f674:	d103      	bne.n	810f67e <_raise_r+0x42>
 810f676:	2316      	movs	r3, #22
 810f678:	6003      	str	r3, [r0, #0]
 810f67a:	2001      	movs	r0, #1
 810f67c:	e7e7      	b.n	810f64e <_raise_r+0x12>
 810f67e:	2100      	movs	r1, #0
 810f680:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810f684:	4620      	mov	r0, r4
 810f686:	4798      	blx	r3
 810f688:	2000      	movs	r0, #0
 810f68a:	e7e0      	b.n	810f64e <_raise_r+0x12>

0810f68c <raise>:
 810f68c:	4b02      	ldr	r3, [pc, #8]	@ (810f698 <raise+0xc>)
 810f68e:	4601      	mov	r1, r0
 810f690:	6818      	ldr	r0, [r3, #0]
 810f692:	f7ff bfd3 	b.w	810f63c <_raise_r>
 810f696:	bf00      	nop
 810f698:	10000020 	.word	0x10000020

0810f69c <_localeconv_r>:
 810f69c:	4800      	ldr	r0, [pc, #0]	@ (810f6a0 <_localeconv_r+0x4>)
 810f69e:	4770      	bx	lr
 810f6a0:	10000160 	.word	0x10000160

0810f6a4 <_close_r>:
 810f6a4:	b538      	push	{r3, r4, r5, lr}
 810f6a6:	4d06      	ldr	r5, [pc, #24]	@ (810f6c0 <_close_r+0x1c>)
 810f6a8:	2300      	movs	r3, #0
 810f6aa:	4604      	mov	r4, r0
 810f6ac:	4608      	mov	r0, r1
 810f6ae:	602b      	str	r3, [r5, #0]
 810f6b0:	f7f6 f894 	bl	81057dc <_close>
 810f6b4:	1c43      	adds	r3, r0, #1
 810f6b6:	d102      	bne.n	810f6be <_close_r+0x1a>
 810f6b8:	682b      	ldr	r3, [r5, #0]
 810f6ba:	b103      	cbz	r3, 810f6be <_close_r+0x1a>
 810f6bc:	6023      	str	r3, [r4, #0]
 810f6be:	bd38      	pop	{r3, r4, r5, pc}
 810f6c0:	10005150 	.word	0x10005150

0810f6c4 <_reclaim_reent>:
 810f6c4:	4b2d      	ldr	r3, [pc, #180]	@ (810f77c <_reclaim_reent+0xb8>)
 810f6c6:	681b      	ldr	r3, [r3, #0]
 810f6c8:	4283      	cmp	r3, r0
 810f6ca:	b570      	push	{r4, r5, r6, lr}
 810f6cc:	4604      	mov	r4, r0
 810f6ce:	d053      	beq.n	810f778 <_reclaim_reent+0xb4>
 810f6d0:	69c3      	ldr	r3, [r0, #28]
 810f6d2:	b31b      	cbz	r3, 810f71c <_reclaim_reent+0x58>
 810f6d4:	68db      	ldr	r3, [r3, #12]
 810f6d6:	b163      	cbz	r3, 810f6f2 <_reclaim_reent+0x2e>
 810f6d8:	2500      	movs	r5, #0
 810f6da:	69e3      	ldr	r3, [r4, #28]
 810f6dc:	68db      	ldr	r3, [r3, #12]
 810f6de:	5959      	ldr	r1, [r3, r5]
 810f6e0:	b9b1      	cbnz	r1, 810f710 <_reclaim_reent+0x4c>
 810f6e2:	3504      	adds	r5, #4
 810f6e4:	2d80      	cmp	r5, #128	@ 0x80
 810f6e6:	d1f8      	bne.n	810f6da <_reclaim_reent+0x16>
 810f6e8:	69e3      	ldr	r3, [r4, #28]
 810f6ea:	4620      	mov	r0, r4
 810f6ec:	68d9      	ldr	r1, [r3, #12]
 810f6ee:	f000 ff37 	bl	8110560 <_free_r>
 810f6f2:	69e3      	ldr	r3, [r4, #28]
 810f6f4:	6819      	ldr	r1, [r3, #0]
 810f6f6:	b111      	cbz	r1, 810f6fe <_reclaim_reent+0x3a>
 810f6f8:	4620      	mov	r0, r4
 810f6fa:	f000 ff31 	bl	8110560 <_free_r>
 810f6fe:	69e3      	ldr	r3, [r4, #28]
 810f700:	689d      	ldr	r5, [r3, #8]
 810f702:	b15d      	cbz	r5, 810f71c <_reclaim_reent+0x58>
 810f704:	4629      	mov	r1, r5
 810f706:	4620      	mov	r0, r4
 810f708:	682d      	ldr	r5, [r5, #0]
 810f70a:	f000 ff29 	bl	8110560 <_free_r>
 810f70e:	e7f8      	b.n	810f702 <_reclaim_reent+0x3e>
 810f710:	680e      	ldr	r6, [r1, #0]
 810f712:	4620      	mov	r0, r4
 810f714:	f000 ff24 	bl	8110560 <_free_r>
 810f718:	4631      	mov	r1, r6
 810f71a:	e7e1      	b.n	810f6e0 <_reclaim_reent+0x1c>
 810f71c:	6961      	ldr	r1, [r4, #20]
 810f71e:	b111      	cbz	r1, 810f726 <_reclaim_reent+0x62>
 810f720:	4620      	mov	r0, r4
 810f722:	f000 ff1d 	bl	8110560 <_free_r>
 810f726:	69e1      	ldr	r1, [r4, #28]
 810f728:	b111      	cbz	r1, 810f730 <_reclaim_reent+0x6c>
 810f72a:	4620      	mov	r0, r4
 810f72c:	f000 ff18 	bl	8110560 <_free_r>
 810f730:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 810f732:	b111      	cbz	r1, 810f73a <_reclaim_reent+0x76>
 810f734:	4620      	mov	r0, r4
 810f736:	f000 ff13 	bl	8110560 <_free_r>
 810f73a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810f73c:	b111      	cbz	r1, 810f744 <_reclaim_reent+0x80>
 810f73e:	4620      	mov	r0, r4
 810f740:	f000 ff0e 	bl	8110560 <_free_r>
 810f744:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 810f746:	b111      	cbz	r1, 810f74e <_reclaim_reent+0x8a>
 810f748:	4620      	mov	r0, r4
 810f74a:	f000 ff09 	bl	8110560 <_free_r>
 810f74e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 810f750:	b111      	cbz	r1, 810f758 <_reclaim_reent+0x94>
 810f752:	4620      	mov	r0, r4
 810f754:	f000 ff04 	bl	8110560 <_free_r>
 810f758:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 810f75a:	b111      	cbz	r1, 810f762 <_reclaim_reent+0x9e>
 810f75c:	4620      	mov	r0, r4
 810f75e:	f000 feff 	bl	8110560 <_free_r>
 810f762:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 810f764:	b111      	cbz	r1, 810f76c <_reclaim_reent+0xa8>
 810f766:	4620      	mov	r0, r4
 810f768:	f000 fefa 	bl	8110560 <_free_r>
 810f76c:	6a23      	ldr	r3, [r4, #32]
 810f76e:	b11b      	cbz	r3, 810f778 <_reclaim_reent+0xb4>
 810f770:	4620      	mov	r0, r4
 810f772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810f776:	4718      	bx	r3
 810f778:	bd70      	pop	{r4, r5, r6, pc}
 810f77a:	bf00      	nop
 810f77c:	10000020 	.word	0x10000020

0810f780 <_lseek_r>:
 810f780:	b538      	push	{r3, r4, r5, lr}
 810f782:	4d07      	ldr	r5, [pc, #28]	@ (810f7a0 <_lseek_r+0x20>)
 810f784:	4604      	mov	r4, r0
 810f786:	4608      	mov	r0, r1
 810f788:	4611      	mov	r1, r2
 810f78a:	2200      	movs	r2, #0
 810f78c:	602a      	str	r2, [r5, #0]
 810f78e:	461a      	mov	r2, r3
 810f790:	f7f6 f84b 	bl	810582a <_lseek>
 810f794:	1c43      	adds	r3, r0, #1
 810f796:	d102      	bne.n	810f79e <_lseek_r+0x1e>
 810f798:	682b      	ldr	r3, [r5, #0]
 810f79a:	b103      	cbz	r3, 810f79e <_lseek_r+0x1e>
 810f79c:	6023      	str	r3, [r4, #0]
 810f79e:	bd38      	pop	{r3, r4, r5, pc}
 810f7a0:	10005150 	.word	0x10005150

0810f7a4 <_read_r>:
 810f7a4:	b538      	push	{r3, r4, r5, lr}
 810f7a6:	4d07      	ldr	r5, [pc, #28]	@ (810f7c4 <_read_r+0x20>)
 810f7a8:	4604      	mov	r4, r0
 810f7aa:	4608      	mov	r0, r1
 810f7ac:	4611      	mov	r1, r2
 810f7ae:	2200      	movs	r2, #0
 810f7b0:	602a      	str	r2, [r5, #0]
 810f7b2:	461a      	mov	r2, r3
 810f7b4:	f7f5 fff5 	bl	81057a2 <_read>
 810f7b8:	1c43      	adds	r3, r0, #1
 810f7ba:	d102      	bne.n	810f7c2 <_read_r+0x1e>
 810f7bc:	682b      	ldr	r3, [r5, #0]
 810f7be:	b103      	cbz	r3, 810f7c2 <_read_r+0x1e>
 810f7c0:	6023      	str	r3, [r4, #0]
 810f7c2:	bd38      	pop	{r3, r4, r5, pc}
 810f7c4:	10005150 	.word	0x10005150

0810f7c8 <_kill_r>:
 810f7c8:	b538      	push	{r3, r4, r5, lr}
 810f7ca:	4d07      	ldr	r5, [pc, #28]	@ (810f7e8 <_kill_r+0x20>)
 810f7cc:	2300      	movs	r3, #0
 810f7ce:	4604      	mov	r4, r0
 810f7d0:	4608      	mov	r0, r1
 810f7d2:	4611      	mov	r1, r2
 810f7d4:	602b      	str	r3, [r5, #0]
 810f7d6:	f7f5 ffc9 	bl	810576c <_kill>
 810f7da:	1c43      	adds	r3, r0, #1
 810f7dc:	d102      	bne.n	810f7e4 <_kill_r+0x1c>
 810f7de:	682b      	ldr	r3, [r5, #0]
 810f7e0:	b103      	cbz	r3, 810f7e4 <_kill_r+0x1c>
 810f7e2:	6023      	str	r3, [r4, #0]
 810f7e4:	bd38      	pop	{r3, r4, r5, pc}
 810f7e6:	bf00      	nop
 810f7e8:	10005150 	.word	0x10005150

0810f7ec <_getpid_r>:
 810f7ec:	f7f5 bfb6 	b.w	810575c <_getpid>

0810f7f0 <_sbrk_r>:
 810f7f0:	b538      	push	{r3, r4, r5, lr}
 810f7f2:	4d06      	ldr	r5, [pc, #24]	@ (810f80c <_sbrk_r+0x1c>)
 810f7f4:	2300      	movs	r3, #0
 810f7f6:	4604      	mov	r4, r0
 810f7f8:	4608      	mov	r0, r1
 810f7fa:	602b      	str	r3, [r5, #0]
 810f7fc:	f7f6 f822 	bl	8105844 <_sbrk>
 810f800:	1c43      	adds	r3, r0, #1
 810f802:	d102      	bne.n	810f80a <_sbrk_r+0x1a>
 810f804:	682b      	ldr	r3, [r5, #0]
 810f806:	b103      	cbz	r3, 810f80a <_sbrk_r+0x1a>
 810f808:	6023      	str	r3, [r4, #0]
 810f80a:	bd38      	pop	{r3, r4, r5, pc}
 810f80c:	10005150 	.word	0x10005150

0810f810 <_write_r>:
 810f810:	b538      	push	{r3, r4, r5, lr}
 810f812:	4d07      	ldr	r5, [pc, #28]	@ (810f830 <_write_r+0x20>)
 810f814:	4604      	mov	r4, r0
 810f816:	4608      	mov	r0, r1
 810f818:	4611      	mov	r1, r2
 810f81a:	2200      	movs	r2, #0
 810f81c:	602a      	str	r2, [r5, #0]
 810f81e:	461a      	mov	r2, r3
 810f820:	f7f5 fcfa 	bl	8105218 <_write>
 810f824:	1c43      	adds	r3, r0, #1
 810f826:	d102      	bne.n	810f82e <_write_r+0x1e>
 810f828:	682b      	ldr	r3, [r5, #0]
 810f82a:	b103      	cbz	r3, 810f82e <_write_r+0x1e>
 810f82c:	6023      	str	r3, [r4, #0]
 810f82e:	bd38      	pop	{r3, r4, r5, pc}
 810f830:	10005150 	.word	0x10005150

0810f834 <__errno>:
 810f834:	4b01      	ldr	r3, [pc, #4]	@ (810f83c <__errno+0x8>)
 810f836:	6818      	ldr	r0, [r3, #0]
 810f838:	4770      	bx	lr
 810f83a:	bf00      	nop
 810f83c:	10000020 	.word	0x10000020

0810f840 <__libc_init_array>:
 810f840:	b570      	push	{r4, r5, r6, lr}
 810f842:	4d0d      	ldr	r5, [pc, #52]	@ (810f878 <__libc_init_array+0x38>)
 810f844:	4c0d      	ldr	r4, [pc, #52]	@ (810f87c <__libc_init_array+0x3c>)
 810f846:	1b64      	subs	r4, r4, r5
 810f848:	10a4      	asrs	r4, r4, #2
 810f84a:	2600      	movs	r6, #0
 810f84c:	42a6      	cmp	r6, r4
 810f84e:	d109      	bne.n	810f864 <__libc_init_array+0x24>
 810f850:	4d0b      	ldr	r5, [pc, #44]	@ (810f880 <__libc_init_array+0x40>)
 810f852:	4c0c      	ldr	r4, [pc, #48]	@ (810f884 <__libc_init_array+0x44>)
 810f854:	f001 fd52 	bl	81112fc <_init>
 810f858:	1b64      	subs	r4, r4, r5
 810f85a:	10a4      	asrs	r4, r4, #2
 810f85c:	2600      	movs	r6, #0
 810f85e:	42a6      	cmp	r6, r4
 810f860:	d105      	bne.n	810f86e <__libc_init_array+0x2e>
 810f862:	bd70      	pop	{r4, r5, r6, pc}
 810f864:	f855 3b04 	ldr.w	r3, [r5], #4
 810f868:	4798      	blx	r3
 810f86a:	3601      	adds	r6, #1
 810f86c:	e7ee      	b.n	810f84c <__libc_init_array+0xc>
 810f86e:	f855 3b04 	ldr.w	r3, [r5], #4
 810f872:	4798      	blx	r3
 810f874:	3601      	adds	r6, #1
 810f876:	e7f2      	b.n	810f85e <__libc_init_array+0x1e>
 810f878:	08111a54 	.word	0x08111a54
 810f87c:	08111a54 	.word	0x08111a54
 810f880:	08111a54 	.word	0x08111a54
 810f884:	08111a5c 	.word	0x08111a5c

0810f888 <__retarget_lock_init_recursive>:
 810f888:	4770      	bx	lr

0810f88a <__retarget_lock_acquire_recursive>:
 810f88a:	4770      	bx	lr

0810f88c <__retarget_lock_release_recursive>:
 810f88c:	4770      	bx	lr

0810f88e <memcpy>:
 810f88e:	440a      	add	r2, r1
 810f890:	4291      	cmp	r1, r2
 810f892:	f100 33ff 	add.w	r3, r0, #4294967295
 810f896:	d100      	bne.n	810f89a <memcpy+0xc>
 810f898:	4770      	bx	lr
 810f89a:	b510      	push	{r4, lr}
 810f89c:	f811 4b01 	ldrb.w	r4, [r1], #1
 810f8a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 810f8a4:	4291      	cmp	r1, r2
 810f8a6:	d1f9      	bne.n	810f89c <memcpy+0xe>
 810f8a8:	bd10      	pop	{r4, pc}

0810f8aa <quorem>:
 810f8aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f8ae:	6903      	ldr	r3, [r0, #16]
 810f8b0:	690c      	ldr	r4, [r1, #16]
 810f8b2:	42a3      	cmp	r3, r4
 810f8b4:	4607      	mov	r7, r0
 810f8b6:	db7e      	blt.n	810f9b6 <quorem+0x10c>
 810f8b8:	3c01      	subs	r4, #1
 810f8ba:	f101 0814 	add.w	r8, r1, #20
 810f8be:	00a3      	lsls	r3, r4, #2
 810f8c0:	f100 0514 	add.w	r5, r0, #20
 810f8c4:	9300      	str	r3, [sp, #0]
 810f8c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810f8ca:	9301      	str	r3, [sp, #4]
 810f8cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810f8d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810f8d4:	3301      	adds	r3, #1
 810f8d6:	429a      	cmp	r2, r3
 810f8d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810f8dc:	fbb2 f6f3 	udiv	r6, r2, r3
 810f8e0:	d32e      	bcc.n	810f940 <quorem+0x96>
 810f8e2:	f04f 0a00 	mov.w	sl, #0
 810f8e6:	46c4      	mov	ip, r8
 810f8e8:	46ae      	mov	lr, r5
 810f8ea:	46d3      	mov	fp, sl
 810f8ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 810f8f0:	b298      	uxth	r0, r3
 810f8f2:	fb06 a000 	mla	r0, r6, r0, sl
 810f8f6:	0c02      	lsrs	r2, r0, #16
 810f8f8:	0c1b      	lsrs	r3, r3, #16
 810f8fa:	fb06 2303 	mla	r3, r6, r3, r2
 810f8fe:	f8de 2000 	ldr.w	r2, [lr]
 810f902:	b280      	uxth	r0, r0
 810f904:	b292      	uxth	r2, r2
 810f906:	1a12      	subs	r2, r2, r0
 810f908:	445a      	add	r2, fp
 810f90a:	f8de 0000 	ldr.w	r0, [lr]
 810f90e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810f912:	b29b      	uxth	r3, r3
 810f914:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 810f918:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 810f91c:	b292      	uxth	r2, r2
 810f91e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 810f922:	45e1      	cmp	r9, ip
 810f924:	f84e 2b04 	str.w	r2, [lr], #4
 810f928:	ea4f 4b23 	mov.w	fp, r3, asr #16
 810f92c:	d2de      	bcs.n	810f8ec <quorem+0x42>
 810f92e:	9b00      	ldr	r3, [sp, #0]
 810f930:	58eb      	ldr	r3, [r5, r3]
 810f932:	b92b      	cbnz	r3, 810f940 <quorem+0x96>
 810f934:	9b01      	ldr	r3, [sp, #4]
 810f936:	3b04      	subs	r3, #4
 810f938:	429d      	cmp	r5, r3
 810f93a:	461a      	mov	r2, r3
 810f93c:	d32f      	bcc.n	810f99e <quorem+0xf4>
 810f93e:	613c      	str	r4, [r7, #16]
 810f940:	4638      	mov	r0, r7
 810f942:	f001 f8c9 	bl	8110ad8 <__mcmp>
 810f946:	2800      	cmp	r0, #0
 810f948:	db25      	blt.n	810f996 <quorem+0xec>
 810f94a:	4629      	mov	r1, r5
 810f94c:	2000      	movs	r0, #0
 810f94e:	f858 2b04 	ldr.w	r2, [r8], #4
 810f952:	f8d1 c000 	ldr.w	ip, [r1]
 810f956:	fa1f fe82 	uxth.w	lr, r2
 810f95a:	fa1f f38c 	uxth.w	r3, ip
 810f95e:	eba3 030e 	sub.w	r3, r3, lr
 810f962:	4403      	add	r3, r0
 810f964:	0c12      	lsrs	r2, r2, #16
 810f966:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 810f96a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 810f96e:	b29b      	uxth	r3, r3
 810f970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810f974:	45c1      	cmp	r9, r8
 810f976:	f841 3b04 	str.w	r3, [r1], #4
 810f97a:	ea4f 4022 	mov.w	r0, r2, asr #16
 810f97e:	d2e6      	bcs.n	810f94e <quorem+0xa4>
 810f980:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810f984:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810f988:	b922      	cbnz	r2, 810f994 <quorem+0xea>
 810f98a:	3b04      	subs	r3, #4
 810f98c:	429d      	cmp	r5, r3
 810f98e:	461a      	mov	r2, r3
 810f990:	d30b      	bcc.n	810f9aa <quorem+0x100>
 810f992:	613c      	str	r4, [r7, #16]
 810f994:	3601      	adds	r6, #1
 810f996:	4630      	mov	r0, r6
 810f998:	b003      	add	sp, #12
 810f99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f99e:	6812      	ldr	r2, [r2, #0]
 810f9a0:	3b04      	subs	r3, #4
 810f9a2:	2a00      	cmp	r2, #0
 810f9a4:	d1cb      	bne.n	810f93e <quorem+0x94>
 810f9a6:	3c01      	subs	r4, #1
 810f9a8:	e7c6      	b.n	810f938 <quorem+0x8e>
 810f9aa:	6812      	ldr	r2, [r2, #0]
 810f9ac:	3b04      	subs	r3, #4
 810f9ae:	2a00      	cmp	r2, #0
 810f9b0:	d1ef      	bne.n	810f992 <quorem+0xe8>
 810f9b2:	3c01      	subs	r4, #1
 810f9b4:	e7ea      	b.n	810f98c <quorem+0xe2>
 810f9b6:	2000      	movs	r0, #0
 810f9b8:	e7ee      	b.n	810f998 <quorem+0xee>
 810f9ba:	0000      	movs	r0, r0
 810f9bc:	0000      	movs	r0, r0
	...

0810f9c0 <_dtoa_r>:
 810f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f9c4:	69c7      	ldr	r7, [r0, #28]
 810f9c6:	b097      	sub	sp, #92	@ 0x5c
 810f9c8:	ed8d 0b04 	vstr	d0, [sp, #16]
 810f9cc:	ec55 4b10 	vmov	r4, r5, d0
 810f9d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 810f9d2:	9107      	str	r1, [sp, #28]
 810f9d4:	4681      	mov	r9, r0
 810f9d6:	920c      	str	r2, [sp, #48]	@ 0x30
 810f9d8:	9311      	str	r3, [sp, #68]	@ 0x44
 810f9da:	b97f      	cbnz	r7, 810f9fc <_dtoa_r+0x3c>
 810f9dc:	2010      	movs	r0, #16
 810f9de:	f7fe fee5 	bl	810e7ac <malloc>
 810f9e2:	4602      	mov	r2, r0
 810f9e4:	f8c9 001c 	str.w	r0, [r9, #28]
 810f9e8:	b920      	cbnz	r0, 810f9f4 <_dtoa_r+0x34>
 810f9ea:	4ba9      	ldr	r3, [pc, #676]	@ (810fc90 <_dtoa_r+0x2d0>)
 810f9ec:	21ef      	movs	r1, #239	@ 0xef
 810f9ee:	48a9      	ldr	r0, [pc, #676]	@ (810fc94 <_dtoa_r+0x2d4>)
 810f9f0:	f001 fc20 	bl	8111234 <__assert_func>
 810f9f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 810f9f8:	6007      	str	r7, [r0, #0]
 810f9fa:	60c7      	str	r7, [r0, #12]
 810f9fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 810fa00:	6819      	ldr	r1, [r3, #0]
 810fa02:	b159      	cbz	r1, 810fa1c <_dtoa_r+0x5c>
 810fa04:	685a      	ldr	r2, [r3, #4]
 810fa06:	604a      	str	r2, [r1, #4]
 810fa08:	2301      	movs	r3, #1
 810fa0a:	4093      	lsls	r3, r2
 810fa0c:	608b      	str	r3, [r1, #8]
 810fa0e:	4648      	mov	r0, r9
 810fa10:	f000 fe30 	bl	8110674 <_Bfree>
 810fa14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 810fa18:	2200      	movs	r2, #0
 810fa1a:	601a      	str	r2, [r3, #0]
 810fa1c:	1e2b      	subs	r3, r5, #0
 810fa1e:	bfb9      	ittee	lt
 810fa20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 810fa24:	9305      	strlt	r3, [sp, #20]
 810fa26:	2300      	movge	r3, #0
 810fa28:	6033      	strge	r3, [r6, #0]
 810fa2a:	9f05      	ldr	r7, [sp, #20]
 810fa2c:	4b9a      	ldr	r3, [pc, #616]	@ (810fc98 <_dtoa_r+0x2d8>)
 810fa2e:	bfbc      	itt	lt
 810fa30:	2201      	movlt	r2, #1
 810fa32:	6032      	strlt	r2, [r6, #0]
 810fa34:	43bb      	bics	r3, r7
 810fa36:	d112      	bne.n	810fa5e <_dtoa_r+0x9e>
 810fa38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 810fa3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 810fa3e:	6013      	str	r3, [r2, #0]
 810fa40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810fa44:	4323      	orrs	r3, r4
 810fa46:	f000 855a 	beq.w	81104fe <_dtoa_r+0xb3e>
 810fa4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 810fa4c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 810fcac <_dtoa_r+0x2ec>
 810fa50:	2b00      	cmp	r3, #0
 810fa52:	f000 855c 	beq.w	811050e <_dtoa_r+0xb4e>
 810fa56:	f10a 0303 	add.w	r3, sl, #3
 810fa5a:	f000 bd56 	b.w	811050a <_dtoa_r+0xb4a>
 810fa5e:	ed9d 7b04 	vldr	d7, [sp, #16]
 810fa62:	2200      	movs	r2, #0
 810fa64:	ec51 0b17 	vmov	r0, r1, d7
 810fa68:	2300      	movs	r3, #0
 810fa6a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 810fa6e:	f7f1 f8b3 	bl	8100bd8 <__aeabi_dcmpeq>
 810fa72:	4680      	mov	r8, r0
 810fa74:	b158      	cbz	r0, 810fa8e <_dtoa_r+0xce>
 810fa76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 810fa78:	2301      	movs	r3, #1
 810fa7a:	6013      	str	r3, [r2, #0]
 810fa7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 810fa7e:	b113      	cbz	r3, 810fa86 <_dtoa_r+0xc6>
 810fa80:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 810fa82:	4b86      	ldr	r3, [pc, #536]	@ (810fc9c <_dtoa_r+0x2dc>)
 810fa84:	6013      	str	r3, [r2, #0]
 810fa86:	f8df a228 	ldr.w	sl, [pc, #552]	@ 810fcb0 <_dtoa_r+0x2f0>
 810fa8a:	f000 bd40 	b.w	811050e <_dtoa_r+0xb4e>
 810fa8e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 810fa92:	aa14      	add	r2, sp, #80	@ 0x50
 810fa94:	a915      	add	r1, sp, #84	@ 0x54
 810fa96:	4648      	mov	r0, r9
 810fa98:	f001 f8ce 	bl	8110c38 <__d2b>
 810fa9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 810faa0:	9002      	str	r0, [sp, #8]
 810faa2:	2e00      	cmp	r6, #0
 810faa4:	d078      	beq.n	810fb98 <_dtoa_r+0x1d8>
 810faa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810faa8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 810faac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810fab0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 810fab4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 810fab8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 810fabc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 810fac0:	4619      	mov	r1, r3
 810fac2:	2200      	movs	r2, #0
 810fac4:	4b76      	ldr	r3, [pc, #472]	@ (810fca0 <_dtoa_r+0x2e0>)
 810fac6:	f7f0 fc67 	bl	8100398 <__aeabi_dsub>
 810faca:	a36b      	add	r3, pc, #428	@ (adr r3, 810fc78 <_dtoa_r+0x2b8>)
 810facc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fad0:	f7f0 fe1a 	bl	8100708 <__aeabi_dmul>
 810fad4:	a36a      	add	r3, pc, #424	@ (adr r3, 810fc80 <_dtoa_r+0x2c0>)
 810fad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fada:	f7f0 fc5f 	bl	810039c <__adddf3>
 810fade:	4604      	mov	r4, r0
 810fae0:	4630      	mov	r0, r6
 810fae2:	460d      	mov	r5, r1
 810fae4:	f7f0 fda6 	bl	8100634 <__aeabi_i2d>
 810fae8:	a367      	add	r3, pc, #412	@ (adr r3, 810fc88 <_dtoa_r+0x2c8>)
 810faea:	e9d3 2300 	ldrd	r2, r3, [r3]
 810faee:	f7f0 fe0b 	bl	8100708 <__aeabi_dmul>
 810faf2:	4602      	mov	r2, r0
 810faf4:	460b      	mov	r3, r1
 810faf6:	4620      	mov	r0, r4
 810faf8:	4629      	mov	r1, r5
 810fafa:	f7f0 fc4f 	bl	810039c <__adddf3>
 810fafe:	4604      	mov	r4, r0
 810fb00:	460d      	mov	r5, r1
 810fb02:	f7f1 f8b1 	bl	8100c68 <__aeabi_d2iz>
 810fb06:	2200      	movs	r2, #0
 810fb08:	4607      	mov	r7, r0
 810fb0a:	2300      	movs	r3, #0
 810fb0c:	4620      	mov	r0, r4
 810fb0e:	4629      	mov	r1, r5
 810fb10:	f7f1 f86c 	bl	8100bec <__aeabi_dcmplt>
 810fb14:	b140      	cbz	r0, 810fb28 <_dtoa_r+0x168>
 810fb16:	4638      	mov	r0, r7
 810fb18:	f7f0 fd8c 	bl	8100634 <__aeabi_i2d>
 810fb1c:	4622      	mov	r2, r4
 810fb1e:	462b      	mov	r3, r5
 810fb20:	f7f1 f85a 	bl	8100bd8 <__aeabi_dcmpeq>
 810fb24:	b900      	cbnz	r0, 810fb28 <_dtoa_r+0x168>
 810fb26:	3f01      	subs	r7, #1
 810fb28:	2f16      	cmp	r7, #22
 810fb2a:	d852      	bhi.n	810fbd2 <_dtoa_r+0x212>
 810fb2c:	4b5d      	ldr	r3, [pc, #372]	@ (810fca4 <_dtoa_r+0x2e4>)
 810fb2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810fb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fb36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 810fb3a:	f7f1 f857 	bl	8100bec <__aeabi_dcmplt>
 810fb3e:	2800      	cmp	r0, #0
 810fb40:	d049      	beq.n	810fbd6 <_dtoa_r+0x216>
 810fb42:	3f01      	subs	r7, #1
 810fb44:	2300      	movs	r3, #0
 810fb46:	9310      	str	r3, [sp, #64]	@ 0x40
 810fb48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 810fb4a:	1b9b      	subs	r3, r3, r6
 810fb4c:	1e5a      	subs	r2, r3, #1
 810fb4e:	bf45      	ittet	mi
 810fb50:	f1c3 0301 	rsbmi	r3, r3, #1
 810fb54:	9300      	strmi	r3, [sp, #0]
 810fb56:	2300      	movpl	r3, #0
 810fb58:	2300      	movmi	r3, #0
 810fb5a:	9206      	str	r2, [sp, #24]
 810fb5c:	bf54      	ite	pl
 810fb5e:	9300      	strpl	r3, [sp, #0]
 810fb60:	9306      	strmi	r3, [sp, #24]
 810fb62:	2f00      	cmp	r7, #0
 810fb64:	db39      	blt.n	810fbda <_dtoa_r+0x21a>
 810fb66:	9b06      	ldr	r3, [sp, #24]
 810fb68:	970d      	str	r7, [sp, #52]	@ 0x34
 810fb6a:	443b      	add	r3, r7
 810fb6c:	9306      	str	r3, [sp, #24]
 810fb6e:	2300      	movs	r3, #0
 810fb70:	9308      	str	r3, [sp, #32]
 810fb72:	9b07      	ldr	r3, [sp, #28]
 810fb74:	2b09      	cmp	r3, #9
 810fb76:	d863      	bhi.n	810fc40 <_dtoa_r+0x280>
 810fb78:	2b05      	cmp	r3, #5
 810fb7a:	bfc4      	itt	gt
 810fb7c:	3b04      	subgt	r3, #4
 810fb7e:	9307      	strgt	r3, [sp, #28]
 810fb80:	9b07      	ldr	r3, [sp, #28]
 810fb82:	f1a3 0302 	sub.w	r3, r3, #2
 810fb86:	bfcc      	ite	gt
 810fb88:	2400      	movgt	r4, #0
 810fb8a:	2401      	movle	r4, #1
 810fb8c:	2b03      	cmp	r3, #3
 810fb8e:	d863      	bhi.n	810fc58 <_dtoa_r+0x298>
 810fb90:	e8df f003 	tbb	[pc, r3]
 810fb94:	2b375452 	.word	0x2b375452
 810fb98:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 810fb9c:	441e      	add	r6, r3
 810fb9e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 810fba2:	2b20      	cmp	r3, #32
 810fba4:	bfc1      	itttt	gt
 810fba6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 810fbaa:	409f      	lslgt	r7, r3
 810fbac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 810fbb0:	fa24 f303 	lsrgt.w	r3, r4, r3
 810fbb4:	bfd6      	itet	le
 810fbb6:	f1c3 0320 	rsble	r3, r3, #32
 810fbba:	ea47 0003 	orrgt.w	r0, r7, r3
 810fbbe:	fa04 f003 	lslle.w	r0, r4, r3
 810fbc2:	f7f0 fd27 	bl	8100614 <__aeabi_ui2d>
 810fbc6:	2201      	movs	r2, #1
 810fbc8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 810fbcc:	3e01      	subs	r6, #1
 810fbce:	9212      	str	r2, [sp, #72]	@ 0x48
 810fbd0:	e776      	b.n	810fac0 <_dtoa_r+0x100>
 810fbd2:	2301      	movs	r3, #1
 810fbd4:	e7b7      	b.n	810fb46 <_dtoa_r+0x186>
 810fbd6:	9010      	str	r0, [sp, #64]	@ 0x40
 810fbd8:	e7b6      	b.n	810fb48 <_dtoa_r+0x188>
 810fbda:	9b00      	ldr	r3, [sp, #0]
 810fbdc:	1bdb      	subs	r3, r3, r7
 810fbde:	9300      	str	r3, [sp, #0]
 810fbe0:	427b      	negs	r3, r7
 810fbe2:	9308      	str	r3, [sp, #32]
 810fbe4:	2300      	movs	r3, #0
 810fbe6:	930d      	str	r3, [sp, #52]	@ 0x34
 810fbe8:	e7c3      	b.n	810fb72 <_dtoa_r+0x1b2>
 810fbea:	2301      	movs	r3, #1
 810fbec:	9309      	str	r3, [sp, #36]	@ 0x24
 810fbee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810fbf0:	eb07 0b03 	add.w	fp, r7, r3
 810fbf4:	f10b 0301 	add.w	r3, fp, #1
 810fbf8:	2b01      	cmp	r3, #1
 810fbfa:	9303      	str	r3, [sp, #12]
 810fbfc:	bfb8      	it	lt
 810fbfe:	2301      	movlt	r3, #1
 810fc00:	e006      	b.n	810fc10 <_dtoa_r+0x250>
 810fc02:	2301      	movs	r3, #1
 810fc04:	9309      	str	r3, [sp, #36]	@ 0x24
 810fc06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810fc08:	2b00      	cmp	r3, #0
 810fc0a:	dd28      	ble.n	810fc5e <_dtoa_r+0x29e>
 810fc0c:	469b      	mov	fp, r3
 810fc0e:	9303      	str	r3, [sp, #12]
 810fc10:	f8d9 001c 	ldr.w	r0, [r9, #28]
 810fc14:	2100      	movs	r1, #0
 810fc16:	2204      	movs	r2, #4
 810fc18:	f102 0514 	add.w	r5, r2, #20
 810fc1c:	429d      	cmp	r5, r3
 810fc1e:	d926      	bls.n	810fc6e <_dtoa_r+0x2ae>
 810fc20:	6041      	str	r1, [r0, #4]
 810fc22:	4648      	mov	r0, r9
 810fc24:	f000 fce6 	bl	81105f4 <_Balloc>
 810fc28:	4682      	mov	sl, r0
 810fc2a:	2800      	cmp	r0, #0
 810fc2c:	d142      	bne.n	810fcb4 <_dtoa_r+0x2f4>
 810fc2e:	4b1e      	ldr	r3, [pc, #120]	@ (810fca8 <_dtoa_r+0x2e8>)
 810fc30:	4602      	mov	r2, r0
 810fc32:	f240 11af 	movw	r1, #431	@ 0x1af
 810fc36:	e6da      	b.n	810f9ee <_dtoa_r+0x2e>
 810fc38:	2300      	movs	r3, #0
 810fc3a:	e7e3      	b.n	810fc04 <_dtoa_r+0x244>
 810fc3c:	2300      	movs	r3, #0
 810fc3e:	e7d5      	b.n	810fbec <_dtoa_r+0x22c>
 810fc40:	2401      	movs	r4, #1
 810fc42:	2300      	movs	r3, #0
 810fc44:	9307      	str	r3, [sp, #28]
 810fc46:	9409      	str	r4, [sp, #36]	@ 0x24
 810fc48:	f04f 3bff 	mov.w	fp, #4294967295
 810fc4c:	2200      	movs	r2, #0
 810fc4e:	f8cd b00c 	str.w	fp, [sp, #12]
 810fc52:	2312      	movs	r3, #18
 810fc54:	920c      	str	r2, [sp, #48]	@ 0x30
 810fc56:	e7db      	b.n	810fc10 <_dtoa_r+0x250>
 810fc58:	2301      	movs	r3, #1
 810fc5a:	9309      	str	r3, [sp, #36]	@ 0x24
 810fc5c:	e7f4      	b.n	810fc48 <_dtoa_r+0x288>
 810fc5e:	f04f 0b01 	mov.w	fp, #1
 810fc62:	f8cd b00c 	str.w	fp, [sp, #12]
 810fc66:	465b      	mov	r3, fp
 810fc68:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 810fc6c:	e7d0      	b.n	810fc10 <_dtoa_r+0x250>
 810fc6e:	3101      	adds	r1, #1
 810fc70:	0052      	lsls	r2, r2, #1
 810fc72:	e7d1      	b.n	810fc18 <_dtoa_r+0x258>
 810fc74:	f3af 8000 	nop.w
 810fc78:	636f4361 	.word	0x636f4361
 810fc7c:	3fd287a7 	.word	0x3fd287a7
 810fc80:	8b60c8b3 	.word	0x8b60c8b3
 810fc84:	3fc68a28 	.word	0x3fc68a28
 810fc88:	509f79fb 	.word	0x509f79fb
 810fc8c:	3fd34413 	.word	0x3fd34413
 810fc90:	08111717 	.word	0x08111717
 810fc94:	0811172e 	.word	0x0811172e
 810fc98:	7ff00000 	.word	0x7ff00000
 810fc9c:	081116e7 	.word	0x081116e7
 810fca0:	3ff80000 	.word	0x3ff80000
 810fca4:	08111880 	.word	0x08111880
 810fca8:	08111786 	.word	0x08111786
 810fcac:	08111713 	.word	0x08111713
 810fcb0:	081116e6 	.word	0x081116e6
 810fcb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 810fcb8:	6018      	str	r0, [r3, #0]
 810fcba:	9b03      	ldr	r3, [sp, #12]
 810fcbc:	2b0e      	cmp	r3, #14
 810fcbe:	f200 80a1 	bhi.w	810fe04 <_dtoa_r+0x444>
 810fcc2:	2c00      	cmp	r4, #0
 810fcc4:	f000 809e 	beq.w	810fe04 <_dtoa_r+0x444>
 810fcc8:	2f00      	cmp	r7, #0
 810fcca:	dd33      	ble.n	810fd34 <_dtoa_r+0x374>
 810fccc:	4b9c      	ldr	r3, [pc, #624]	@ (810ff40 <_dtoa_r+0x580>)
 810fcce:	f007 020f 	and.w	r2, r7, #15
 810fcd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810fcd6:	ed93 7b00 	vldr	d7, [r3]
 810fcda:	05f8      	lsls	r0, r7, #23
 810fcdc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 810fce0:	ea4f 1427 	mov.w	r4, r7, asr #4
 810fce4:	d516      	bpl.n	810fd14 <_dtoa_r+0x354>
 810fce6:	4b97      	ldr	r3, [pc, #604]	@ (810ff44 <_dtoa_r+0x584>)
 810fce8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 810fcec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810fcf0:	f7f0 fe34 	bl	810095c <__aeabi_ddiv>
 810fcf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810fcf8:	f004 040f 	and.w	r4, r4, #15
 810fcfc:	2603      	movs	r6, #3
 810fcfe:	4d91      	ldr	r5, [pc, #580]	@ (810ff44 <_dtoa_r+0x584>)
 810fd00:	b954      	cbnz	r4, 810fd18 <_dtoa_r+0x358>
 810fd02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 810fd06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810fd0a:	f7f0 fe27 	bl	810095c <__aeabi_ddiv>
 810fd0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810fd12:	e028      	b.n	810fd66 <_dtoa_r+0x3a6>
 810fd14:	2602      	movs	r6, #2
 810fd16:	e7f2      	b.n	810fcfe <_dtoa_r+0x33e>
 810fd18:	07e1      	lsls	r1, r4, #31
 810fd1a:	d508      	bpl.n	810fd2e <_dtoa_r+0x36e>
 810fd1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 810fd20:	e9d5 2300 	ldrd	r2, r3, [r5]
 810fd24:	f7f0 fcf0 	bl	8100708 <__aeabi_dmul>
 810fd28:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 810fd2c:	3601      	adds	r6, #1
 810fd2e:	1064      	asrs	r4, r4, #1
 810fd30:	3508      	adds	r5, #8
 810fd32:	e7e5      	b.n	810fd00 <_dtoa_r+0x340>
 810fd34:	f000 80af 	beq.w	810fe96 <_dtoa_r+0x4d6>
 810fd38:	427c      	negs	r4, r7
 810fd3a:	4b81      	ldr	r3, [pc, #516]	@ (810ff40 <_dtoa_r+0x580>)
 810fd3c:	4d81      	ldr	r5, [pc, #516]	@ (810ff44 <_dtoa_r+0x584>)
 810fd3e:	f004 020f 	and.w	r2, r4, #15
 810fd42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810fd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fd4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 810fd4e:	f7f0 fcdb 	bl	8100708 <__aeabi_dmul>
 810fd52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810fd56:	1124      	asrs	r4, r4, #4
 810fd58:	2300      	movs	r3, #0
 810fd5a:	2602      	movs	r6, #2
 810fd5c:	2c00      	cmp	r4, #0
 810fd5e:	f040 808f 	bne.w	810fe80 <_dtoa_r+0x4c0>
 810fd62:	2b00      	cmp	r3, #0
 810fd64:	d1d3      	bne.n	810fd0e <_dtoa_r+0x34e>
 810fd66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 810fd68:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 810fd6c:	2b00      	cmp	r3, #0
 810fd6e:	f000 8094 	beq.w	810fe9a <_dtoa_r+0x4da>
 810fd72:	4b75      	ldr	r3, [pc, #468]	@ (810ff48 <_dtoa_r+0x588>)
 810fd74:	2200      	movs	r2, #0
 810fd76:	4620      	mov	r0, r4
 810fd78:	4629      	mov	r1, r5
 810fd7a:	f7f0 ff37 	bl	8100bec <__aeabi_dcmplt>
 810fd7e:	2800      	cmp	r0, #0
 810fd80:	f000 808b 	beq.w	810fe9a <_dtoa_r+0x4da>
 810fd84:	9b03      	ldr	r3, [sp, #12]
 810fd86:	2b00      	cmp	r3, #0
 810fd88:	f000 8087 	beq.w	810fe9a <_dtoa_r+0x4da>
 810fd8c:	f1bb 0f00 	cmp.w	fp, #0
 810fd90:	dd34      	ble.n	810fdfc <_dtoa_r+0x43c>
 810fd92:	4620      	mov	r0, r4
 810fd94:	4b6d      	ldr	r3, [pc, #436]	@ (810ff4c <_dtoa_r+0x58c>)
 810fd96:	2200      	movs	r2, #0
 810fd98:	4629      	mov	r1, r5
 810fd9a:	f7f0 fcb5 	bl	8100708 <__aeabi_dmul>
 810fd9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810fda2:	f107 38ff 	add.w	r8, r7, #4294967295
 810fda6:	3601      	adds	r6, #1
 810fda8:	465c      	mov	r4, fp
 810fdaa:	4630      	mov	r0, r6
 810fdac:	f7f0 fc42 	bl	8100634 <__aeabi_i2d>
 810fdb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810fdb4:	f7f0 fca8 	bl	8100708 <__aeabi_dmul>
 810fdb8:	4b65      	ldr	r3, [pc, #404]	@ (810ff50 <_dtoa_r+0x590>)
 810fdba:	2200      	movs	r2, #0
 810fdbc:	f7f0 faee 	bl	810039c <__adddf3>
 810fdc0:	4605      	mov	r5, r0
 810fdc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810fdc6:	2c00      	cmp	r4, #0
 810fdc8:	d16a      	bne.n	810fea0 <_dtoa_r+0x4e0>
 810fdca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810fdce:	4b61      	ldr	r3, [pc, #388]	@ (810ff54 <_dtoa_r+0x594>)
 810fdd0:	2200      	movs	r2, #0
 810fdd2:	f7f0 fae1 	bl	8100398 <__aeabi_dsub>
 810fdd6:	4602      	mov	r2, r0
 810fdd8:	460b      	mov	r3, r1
 810fdda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810fdde:	462a      	mov	r2, r5
 810fde0:	4633      	mov	r3, r6
 810fde2:	f7f0 ff21 	bl	8100c28 <__aeabi_dcmpgt>
 810fde6:	2800      	cmp	r0, #0
 810fde8:	f040 8298 	bne.w	811031c <_dtoa_r+0x95c>
 810fdec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810fdf0:	462a      	mov	r2, r5
 810fdf2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 810fdf6:	f7f0 fef9 	bl	8100bec <__aeabi_dcmplt>
 810fdfa:	bb38      	cbnz	r0, 810fe4c <_dtoa_r+0x48c>
 810fdfc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 810fe00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 810fe04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 810fe06:	2b00      	cmp	r3, #0
 810fe08:	f2c0 8157 	blt.w	81100ba <_dtoa_r+0x6fa>
 810fe0c:	2f0e      	cmp	r7, #14
 810fe0e:	f300 8154 	bgt.w	81100ba <_dtoa_r+0x6fa>
 810fe12:	4b4b      	ldr	r3, [pc, #300]	@ (810ff40 <_dtoa_r+0x580>)
 810fe14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810fe18:	ed93 7b00 	vldr	d7, [r3]
 810fe1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810fe1e:	2b00      	cmp	r3, #0
 810fe20:	ed8d 7b00 	vstr	d7, [sp]
 810fe24:	f280 80e5 	bge.w	810fff2 <_dtoa_r+0x632>
 810fe28:	9b03      	ldr	r3, [sp, #12]
 810fe2a:	2b00      	cmp	r3, #0
 810fe2c:	f300 80e1 	bgt.w	810fff2 <_dtoa_r+0x632>
 810fe30:	d10c      	bne.n	810fe4c <_dtoa_r+0x48c>
 810fe32:	4b48      	ldr	r3, [pc, #288]	@ (810ff54 <_dtoa_r+0x594>)
 810fe34:	2200      	movs	r2, #0
 810fe36:	ec51 0b17 	vmov	r0, r1, d7
 810fe3a:	f7f0 fc65 	bl	8100708 <__aeabi_dmul>
 810fe3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810fe42:	f7f0 fee7 	bl	8100c14 <__aeabi_dcmpge>
 810fe46:	2800      	cmp	r0, #0
 810fe48:	f000 8266 	beq.w	8110318 <_dtoa_r+0x958>
 810fe4c:	2400      	movs	r4, #0
 810fe4e:	4625      	mov	r5, r4
 810fe50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810fe52:	4656      	mov	r6, sl
 810fe54:	ea6f 0803 	mvn.w	r8, r3
 810fe58:	2700      	movs	r7, #0
 810fe5a:	4621      	mov	r1, r4
 810fe5c:	4648      	mov	r0, r9
 810fe5e:	f000 fc09 	bl	8110674 <_Bfree>
 810fe62:	2d00      	cmp	r5, #0
 810fe64:	f000 80bd 	beq.w	810ffe2 <_dtoa_r+0x622>
 810fe68:	b12f      	cbz	r7, 810fe76 <_dtoa_r+0x4b6>
 810fe6a:	42af      	cmp	r7, r5
 810fe6c:	d003      	beq.n	810fe76 <_dtoa_r+0x4b6>
 810fe6e:	4639      	mov	r1, r7
 810fe70:	4648      	mov	r0, r9
 810fe72:	f000 fbff 	bl	8110674 <_Bfree>
 810fe76:	4629      	mov	r1, r5
 810fe78:	4648      	mov	r0, r9
 810fe7a:	f000 fbfb 	bl	8110674 <_Bfree>
 810fe7e:	e0b0      	b.n	810ffe2 <_dtoa_r+0x622>
 810fe80:	07e2      	lsls	r2, r4, #31
 810fe82:	d505      	bpl.n	810fe90 <_dtoa_r+0x4d0>
 810fe84:	e9d5 2300 	ldrd	r2, r3, [r5]
 810fe88:	f7f0 fc3e 	bl	8100708 <__aeabi_dmul>
 810fe8c:	3601      	adds	r6, #1
 810fe8e:	2301      	movs	r3, #1
 810fe90:	1064      	asrs	r4, r4, #1
 810fe92:	3508      	adds	r5, #8
 810fe94:	e762      	b.n	810fd5c <_dtoa_r+0x39c>
 810fe96:	2602      	movs	r6, #2
 810fe98:	e765      	b.n	810fd66 <_dtoa_r+0x3a6>
 810fe9a:	9c03      	ldr	r4, [sp, #12]
 810fe9c:	46b8      	mov	r8, r7
 810fe9e:	e784      	b.n	810fdaa <_dtoa_r+0x3ea>
 810fea0:	4b27      	ldr	r3, [pc, #156]	@ (810ff40 <_dtoa_r+0x580>)
 810fea2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810fea4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810fea8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810feac:	4454      	add	r4, sl
 810feae:	2900      	cmp	r1, #0
 810feb0:	d054      	beq.n	810ff5c <_dtoa_r+0x59c>
 810feb2:	4929      	ldr	r1, [pc, #164]	@ (810ff58 <_dtoa_r+0x598>)
 810feb4:	2000      	movs	r0, #0
 810feb6:	f7f0 fd51 	bl	810095c <__aeabi_ddiv>
 810feba:	4633      	mov	r3, r6
 810febc:	462a      	mov	r2, r5
 810febe:	f7f0 fa6b 	bl	8100398 <__aeabi_dsub>
 810fec2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 810fec6:	4656      	mov	r6, sl
 810fec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810fecc:	f7f0 fecc 	bl	8100c68 <__aeabi_d2iz>
 810fed0:	4605      	mov	r5, r0
 810fed2:	f7f0 fbaf 	bl	8100634 <__aeabi_i2d>
 810fed6:	4602      	mov	r2, r0
 810fed8:	460b      	mov	r3, r1
 810feda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810fede:	f7f0 fa5b 	bl	8100398 <__aeabi_dsub>
 810fee2:	3530      	adds	r5, #48	@ 0x30
 810fee4:	4602      	mov	r2, r0
 810fee6:	460b      	mov	r3, r1
 810fee8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810feec:	f806 5b01 	strb.w	r5, [r6], #1
 810fef0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 810fef4:	f7f0 fe7a 	bl	8100bec <__aeabi_dcmplt>
 810fef8:	2800      	cmp	r0, #0
 810fefa:	d172      	bne.n	810ffe2 <_dtoa_r+0x622>
 810fefc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810ff00:	4911      	ldr	r1, [pc, #68]	@ (810ff48 <_dtoa_r+0x588>)
 810ff02:	2000      	movs	r0, #0
 810ff04:	f7f0 fa48 	bl	8100398 <__aeabi_dsub>
 810ff08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 810ff0c:	f7f0 fe6e 	bl	8100bec <__aeabi_dcmplt>
 810ff10:	2800      	cmp	r0, #0
 810ff12:	f040 80b4 	bne.w	811007e <_dtoa_r+0x6be>
 810ff16:	42a6      	cmp	r6, r4
 810ff18:	f43f af70 	beq.w	810fdfc <_dtoa_r+0x43c>
 810ff1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 810ff20:	4b0a      	ldr	r3, [pc, #40]	@ (810ff4c <_dtoa_r+0x58c>)
 810ff22:	2200      	movs	r2, #0
 810ff24:	f7f0 fbf0 	bl	8100708 <__aeabi_dmul>
 810ff28:	4b08      	ldr	r3, [pc, #32]	@ (810ff4c <_dtoa_r+0x58c>)
 810ff2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 810ff2e:	2200      	movs	r2, #0
 810ff30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810ff34:	f7f0 fbe8 	bl	8100708 <__aeabi_dmul>
 810ff38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810ff3c:	e7c4      	b.n	810fec8 <_dtoa_r+0x508>
 810ff3e:	bf00      	nop
 810ff40:	08111880 	.word	0x08111880
 810ff44:	08111858 	.word	0x08111858
 810ff48:	3ff00000 	.word	0x3ff00000
 810ff4c:	40240000 	.word	0x40240000
 810ff50:	401c0000 	.word	0x401c0000
 810ff54:	40140000 	.word	0x40140000
 810ff58:	3fe00000 	.word	0x3fe00000
 810ff5c:	4631      	mov	r1, r6
 810ff5e:	4628      	mov	r0, r5
 810ff60:	f7f0 fbd2 	bl	8100708 <__aeabi_dmul>
 810ff64:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 810ff68:	9413      	str	r4, [sp, #76]	@ 0x4c
 810ff6a:	4656      	mov	r6, sl
 810ff6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810ff70:	f7f0 fe7a 	bl	8100c68 <__aeabi_d2iz>
 810ff74:	4605      	mov	r5, r0
 810ff76:	f7f0 fb5d 	bl	8100634 <__aeabi_i2d>
 810ff7a:	4602      	mov	r2, r0
 810ff7c:	460b      	mov	r3, r1
 810ff7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810ff82:	f7f0 fa09 	bl	8100398 <__aeabi_dsub>
 810ff86:	3530      	adds	r5, #48	@ 0x30
 810ff88:	f806 5b01 	strb.w	r5, [r6], #1
 810ff8c:	4602      	mov	r2, r0
 810ff8e:	460b      	mov	r3, r1
 810ff90:	42a6      	cmp	r6, r4
 810ff92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810ff96:	f04f 0200 	mov.w	r2, #0
 810ff9a:	d124      	bne.n	810ffe6 <_dtoa_r+0x626>
 810ff9c:	4baf      	ldr	r3, [pc, #700]	@ (811025c <_dtoa_r+0x89c>)
 810ff9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 810ffa2:	f7f0 f9fb 	bl	810039c <__adddf3>
 810ffa6:	4602      	mov	r2, r0
 810ffa8:	460b      	mov	r3, r1
 810ffaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810ffae:	f7f0 fe3b 	bl	8100c28 <__aeabi_dcmpgt>
 810ffb2:	2800      	cmp	r0, #0
 810ffb4:	d163      	bne.n	811007e <_dtoa_r+0x6be>
 810ffb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 810ffba:	49a8      	ldr	r1, [pc, #672]	@ (811025c <_dtoa_r+0x89c>)
 810ffbc:	2000      	movs	r0, #0
 810ffbe:	f7f0 f9eb 	bl	8100398 <__aeabi_dsub>
 810ffc2:	4602      	mov	r2, r0
 810ffc4:	460b      	mov	r3, r1
 810ffc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810ffca:	f7f0 fe0f 	bl	8100bec <__aeabi_dcmplt>
 810ffce:	2800      	cmp	r0, #0
 810ffd0:	f43f af14 	beq.w	810fdfc <_dtoa_r+0x43c>
 810ffd4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 810ffd6:	1e73      	subs	r3, r6, #1
 810ffd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 810ffda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810ffde:	2b30      	cmp	r3, #48	@ 0x30
 810ffe0:	d0f8      	beq.n	810ffd4 <_dtoa_r+0x614>
 810ffe2:	4647      	mov	r7, r8
 810ffe4:	e03b      	b.n	811005e <_dtoa_r+0x69e>
 810ffe6:	4b9e      	ldr	r3, [pc, #632]	@ (8110260 <_dtoa_r+0x8a0>)
 810ffe8:	f7f0 fb8e 	bl	8100708 <__aeabi_dmul>
 810ffec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810fff0:	e7bc      	b.n	810ff6c <_dtoa_r+0x5ac>
 810fff2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 810fff6:	4656      	mov	r6, sl
 810fff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 810fffc:	4620      	mov	r0, r4
 810fffe:	4629      	mov	r1, r5
 8110000:	f7f0 fcac 	bl	810095c <__aeabi_ddiv>
 8110004:	f7f0 fe30 	bl	8100c68 <__aeabi_d2iz>
 8110008:	4680      	mov	r8, r0
 811000a:	f7f0 fb13 	bl	8100634 <__aeabi_i2d>
 811000e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110012:	f7f0 fb79 	bl	8100708 <__aeabi_dmul>
 8110016:	4602      	mov	r2, r0
 8110018:	460b      	mov	r3, r1
 811001a:	4620      	mov	r0, r4
 811001c:	4629      	mov	r1, r5
 811001e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8110022:	f7f0 f9b9 	bl	8100398 <__aeabi_dsub>
 8110026:	f806 4b01 	strb.w	r4, [r6], #1
 811002a:	9d03      	ldr	r5, [sp, #12]
 811002c:	eba6 040a 	sub.w	r4, r6, sl
 8110030:	42a5      	cmp	r5, r4
 8110032:	4602      	mov	r2, r0
 8110034:	460b      	mov	r3, r1
 8110036:	d133      	bne.n	81100a0 <_dtoa_r+0x6e0>
 8110038:	f7f0 f9b0 	bl	810039c <__adddf3>
 811003c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110040:	4604      	mov	r4, r0
 8110042:	460d      	mov	r5, r1
 8110044:	f7f0 fdf0 	bl	8100c28 <__aeabi_dcmpgt>
 8110048:	b9c0      	cbnz	r0, 811007c <_dtoa_r+0x6bc>
 811004a:	e9dd 2300 	ldrd	r2, r3, [sp]
 811004e:	4620      	mov	r0, r4
 8110050:	4629      	mov	r1, r5
 8110052:	f7f0 fdc1 	bl	8100bd8 <__aeabi_dcmpeq>
 8110056:	b110      	cbz	r0, 811005e <_dtoa_r+0x69e>
 8110058:	f018 0f01 	tst.w	r8, #1
 811005c:	d10e      	bne.n	811007c <_dtoa_r+0x6bc>
 811005e:	9902      	ldr	r1, [sp, #8]
 8110060:	4648      	mov	r0, r9
 8110062:	f000 fb07 	bl	8110674 <_Bfree>
 8110066:	2300      	movs	r3, #0
 8110068:	7033      	strb	r3, [r6, #0]
 811006a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 811006c:	3701      	adds	r7, #1
 811006e:	601f      	str	r7, [r3, #0]
 8110070:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8110072:	2b00      	cmp	r3, #0
 8110074:	f000 824b 	beq.w	811050e <_dtoa_r+0xb4e>
 8110078:	601e      	str	r6, [r3, #0]
 811007a:	e248      	b.n	811050e <_dtoa_r+0xb4e>
 811007c:	46b8      	mov	r8, r7
 811007e:	4633      	mov	r3, r6
 8110080:	461e      	mov	r6, r3
 8110082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8110086:	2a39      	cmp	r2, #57	@ 0x39
 8110088:	d106      	bne.n	8110098 <_dtoa_r+0x6d8>
 811008a:	459a      	cmp	sl, r3
 811008c:	d1f8      	bne.n	8110080 <_dtoa_r+0x6c0>
 811008e:	2230      	movs	r2, #48	@ 0x30
 8110090:	f108 0801 	add.w	r8, r8, #1
 8110094:	f88a 2000 	strb.w	r2, [sl]
 8110098:	781a      	ldrb	r2, [r3, #0]
 811009a:	3201      	adds	r2, #1
 811009c:	701a      	strb	r2, [r3, #0]
 811009e:	e7a0      	b.n	810ffe2 <_dtoa_r+0x622>
 81100a0:	4b6f      	ldr	r3, [pc, #444]	@ (8110260 <_dtoa_r+0x8a0>)
 81100a2:	2200      	movs	r2, #0
 81100a4:	f7f0 fb30 	bl	8100708 <__aeabi_dmul>
 81100a8:	2200      	movs	r2, #0
 81100aa:	2300      	movs	r3, #0
 81100ac:	4604      	mov	r4, r0
 81100ae:	460d      	mov	r5, r1
 81100b0:	f7f0 fd92 	bl	8100bd8 <__aeabi_dcmpeq>
 81100b4:	2800      	cmp	r0, #0
 81100b6:	d09f      	beq.n	810fff8 <_dtoa_r+0x638>
 81100b8:	e7d1      	b.n	811005e <_dtoa_r+0x69e>
 81100ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81100bc:	2a00      	cmp	r2, #0
 81100be:	f000 80ea 	beq.w	8110296 <_dtoa_r+0x8d6>
 81100c2:	9a07      	ldr	r2, [sp, #28]
 81100c4:	2a01      	cmp	r2, #1
 81100c6:	f300 80cd 	bgt.w	8110264 <_dtoa_r+0x8a4>
 81100ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 81100cc:	2a00      	cmp	r2, #0
 81100ce:	f000 80c1 	beq.w	8110254 <_dtoa_r+0x894>
 81100d2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 81100d6:	9c08      	ldr	r4, [sp, #32]
 81100d8:	9e00      	ldr	r6, [sp, #0]
 81100da:	9a00      	ldr	r2, [sp, #0]
 81100dc:	441a      	add	r2, r3
 81100de:	9200      	str	r2, [sp, #0]
 81100e0:	9a06      	ldr	r2, [sp, #24]
 81100e2:	2101      	movs	r1, #1
 81100e4:	441a      	add	r2, r3
 81100e6:	4648      	mov	r0, r9
 81100e8:	9206      	str	r2, [sp, #24]
 81100ea:	f000 fb77 	bl	81107dc <__i2b>
 81100ee:	4605      	mov	r5, r0
 81100f0:	b166      	cbz	r6, 811010c <_dtoa_r+0x74c>
 81100f2:	9b06      	ldr	r3, [sp, #24]
 81100f4:	2b00      	cmp	r3, #0
 81100f6:	dd09      	ble.n	811010c <_dtoa_r+0x74c>
 81100f8:	42b3      	cmp	r3, r6
 81100fa:	9a00      	ldr	r2, [sp, #0]
 81100fc:	bfa8      	it	ge
 81100fe:	4633      	movge	r3, r6
 8110100:	1ad2      	subs	r2, r2, r3
 8110102:	9200      	str	r2, [sp, #0]
 8110104:	9a06      	ldr	r2, [sp, #24]
 8110106:	1af6      	subs	r6, r6, r3
 8110108:	1ad3      	subs	r3, r2, r3
 811010a:	9306      	str	r3, [sp, #24]
 811010c:	9b08      	ldr	r3, [sp, #32]
 811010e:	b30b      	cbz	r3, 8110154 <_dtoa_r+0x794>
 8110110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110112:	2b00      	cmp	r3, #0
 8110114:	f000 80c6 	beq.w	81102a4 <_dtoa_r+0x8e4>
 8110118:	2c00      	cmp	r4, #0
 811011a:	f000 80c0 	beq.w	811029e <_dtoa_r+0x8de>
 811011e:	4629      	mov	r1, r5
 8110120:	4622      	mov	r2, r4
 8110122:	4648      	mov	r0, r9
 8110124:	f000 fc12 	bl	811094c <__pow5mult>
 8110128:	9a02      	ldr	r2, [sp, #8]
 811012a:	4601      	mov	r1, r0
 811012c:	4605      	mov	r5, r0
 811012e:	4648      	mov	r0, r9
 8110130:	f000 fb6a 	bl	8110808 <__multiply>
 8110134:	9902      	ldr	r1, [sp, #8]
 8110136:	4680      	mov	r8, r0
 8110138:	4648      	mov	r0, r9
 811013a:	f000 fa9b 	bl	8110674 <_Bfree>
 811013e:	9b08      	ldr	r3, [sp, #32]
 8110140:	1b1b      	subs	r3, r3, r4
 8110142:	9308      	str	r3, [sp, #32]
 8110144:	f000 80b1 	beq.w	81102aa <_dtoa_r+0x8ea>
 8110148:	9a08      	ldr	r2, [sp, #32]
 811014a:	4641      	mov	r1, r8
 811014c:	4648      	mov	r0, r9
 811014e:	f000 fbfd 	bl	811094c <__pow5mult>
 8110152:	9002      	str	r0, [sp, #8]
 8110154:	2101      	movs	r1, #1
 8110156:	4648      	mov	r0, r9
 8110158:	f000 fb40 	bl	81107dc <__i2b>
 811015c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 811015e:	4604      	mov	r4, r0
 8110160:	2b00      	cmp	r3, #0
 8110162:	f000 81d8 	beq.w	8110516 <_dtoa_r+0xb56>
 8110166:	461a      	mov	r2, r3
 8110168:	4601      	mov	r1, r0
 811016a:	4648      	mov	r0, r9
 811016c:	f000 fbee 	bl	811094c <__pow5mult>
 8110170:	9b07      	ldr	r3, [sp, #28]
 8110172:	2b01      	cmp	r3, #1
 8110174:	4604      	mov	r4, r0
 8110176:	f300 809f 	bgt.w	81102b8 <_dtoa_r+0x8f8>
 811017a:	9b04      	ldr	r3, [sp, #16]
 811017c:	2b00      	cmp	r3, #0
 811017e:	f040 8097 	bne.w	81102b0 <_dtoa_r+0x8f0>
 8110182:	9b05      	ldr	r3, [sp, #20]
 8110184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8110188:	2b00      	cmp	r3, #0
 811018a:	f040 8093 	bne.w	81102b4 <_dtoa_r+0x8f4>
 811018e:	9b05      	ldr	r3, [sp, #20]
 8110190:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8110194:	0d1b      	lsrs	r3, r3, #20
 8110196:	051b      	lsls	r3, r3, #20
 8110198:	b133      	cbz	r3, 81101a8 <_dtoa_r+0x7e8>
 811019a:	9b00      	ldr	r3, [sp, #0]
 811019c:	3301      	adds	r3, #1
 811019e:	9300      	str	r3, [sp, #0]
 81101a0:	9b06      	ldr	r3, [sp, #24]
 81101a2:	3301      	adds	r3, #1
 81101a4:	9306      	str	r3, [sp, #24]
 81101a6:	2301      	movs	r3, #1
 81101a8:	9308      	str	r3, [sp, #32]
 81101aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 81101ac:	2b00      	cmp	r3, #0
 81101ae:	f000 81b8 	beq.w	8110522 <_dtoa_r+0xb62>
 81101b2:	6923      	ldr	r3, [r4, #16]
 81101b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 81101b8:	6918      	ldr	r0, [r3, #16]
 81101ba:	f000 fac3 	bl	8110744 <__hi0bits>
 81101be:	f1c0 0020 	rsb	r0, r0, #32
 81101c2:	9b06      	ldr	r3, [sp, #24]
 81101c4:	4418      	add	r0, r3
 81101c6:	f010 001f 	ands.w	r0, r0, #31
 81101ca:	f000 8082 	beq.w	81102d2 <_dtoa_r+0x912>
 81101ce:	f1c0 0320 	rsb	r3, r0, #32
 81101d2:	2b04      	cmp	r3, #4
 81101d4:	dd73      	ble.n	81102be <_dtoa_r+0x8fe>
 81101d6:	9b00      	ldr	r3, [sp, #0]
 81101d8:	f1c0 001c 	rsb	r0, r0, #28
 81101dc:	4403      	add	r3, r0
 81101de:	9300      	str	r3, [sp, #0]
 81101e0:	9b06      	ldr	r3, [sp, #24]
 81101e2:	4403      	add	r3, r0
 81101e4:	4406      	add	r6, r0
 81101e6:	9306      	str	r3, [sp, #24]
 81101e8:	9b00      	ldr	r3, [sp, #0]
 81101ea:	2b00      	cmp	r3, #0
 81101ec:	dd05      	ble.n	81101fa <_dtoa_r+0x83a>
 81101ee:	9902      	ldr	r1, [sp, #8]
 81101f0:	461a      	mov	r2, r3
 81101f2:	4648      	mov	r0, r9
 81101f4:	f000 fc04 	bl	8110a00 <__lshift>
 81101f8:	9002      	str	r0, [sp, #8]
 81101fa:	9b06      	ldr	r3, [sp, #24]
 81101fc:	2b00      	cmp	r3, #0
 81101fe:	dd05      	ble.n	811020c <_dtoa_r+0x84c>
 8110200:	4621      	mov	r1, r4
 8110202:	461a      	mov	r2, r3
 8110204:	4648      	mov	r0, r9
 8110206:	f000 fbfb 	bl	8110a00 <__lshift>
 811020a:	4604      	mov	r4, r0
 811020c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 811020e:	2b00      	cmp	r3, #0
 8110210:	d061      	beq.n	81102d6 <_dtoa_r+0x916>
 8110212:	9802      	ldr	r0, [sp, #8]
 8110214:	4621      	mov	r1, r4
 8110216:	f000 fc5f 	bl	8110ad8 <__mcmp>
 811021a:	2800      	cmp	r0, #0
 811021c:	da5b      	bge.n	81102d6 <_dtoa_r+0x916>
 811021e:	2300      	movs	r3, #0
 8110220:	9902      	ldr	r1, [sp, #8]
 8110222:	220a      	movs	r2, #10
 8110224:	4648      	mov	r0, r9
 8110226:	f000 fa47 	bl	81106b8 <__multadd>
 811022a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811022c:	9002      	str	r0, [sp, #8]
 811022e:	f107 38ff 	add.w	r8, r7, #4294967295
 8110232:	2b00      	cmp	r3, #0
 8110234:	f000 8177 	beq.w	8110526 <_dtoa_r+0xb66>
 8110238:	4629      	mov	r1, r5
 811023a:	2300      	movs	r3, #0
 811023c:	220a      	movs	r2, #10
 811023e:	4648      	mov	r0, r9
 8110240:	f000 fa3a 	bl	81106b8 <__multadd>
 8110244:	f1bb 0f00 	cmp.w	fp, #0
 8110248:	4605      	mov	r5, r0
 811024a:	dc6f      	bgt.n	811032c <_dtoa_r+0x96c>
 811024c:	9b07      	ldr	r3, [sp, #28]
 811024e:	2b02      	cmp	r3, #2
 8110250:	dc49      	bgt.n	81102e6 <_dtoa_r+0x926>
 8110252:	e06b      	b.n	811032c <_dtoa_r+0x96c>
 8110254:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8110256:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 811025a:	e73c      	b.n	81100d6 <_dtoa_r+0x716>
 811025c:	3fe00000 	.word	0x3fe00000
 8110260:	40240000 	.word	0x40240000
 8110264:	9b03      	ldr	r3, [sp, #12]
 8110266:	1e5c      	subs	r4, r3, #1
 8110268:	9b08      	ldr	r3, [sp, #32]
 811026a:	42a3      	cmp	r3, r4
 811026c:	db09      	blt.n	8110282 <_dtoa_r+0x8c2>
 811026e:	1b1c      	subs	r4, r3, r4
 8110270:	9b03      	ldr	r3, [sp, #12]
 8110272:	2b00      	cmp	r3, #0
 8110274:	f6bf af30 	bge.w	81100d8 <_dtoa_r+0x718>
 8110278:	9b00      	ldr	r3, [sp, #0]
 811027a:	9a03      	ldr	r2, [sp, #12]
 811027c:	1a9e      	subs	r6, r3, r2
 811027e:	2300      	movs	r3, #0
 8110280:	e72b      	b.n	81100da <_dtoa_r+0x71a>
 8110282:	9b08      	ldr	r3, [sp, #32]
 8110284:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8110286:	9408      	str	r4, [sp, #32]
 8110288:	1ae3      	subs	r3, r4, r3
 811028a:	441a      	add	r2, r3
 811028c:	9e00      	ldr	r6, [sp, #0]
 811028e:	9b03      	ldr	r3, [sp, #12]
 8110290:	920d      	str	r2, [sp, #52]	@ 0x34
 8110292:	2400      	movs	r4, #0
 8110294:	e721      	b.n	81100da <_dtoa_r+0x71a>
 8110296:	9c08      	ldr	r4, [sp, #32]
 8110298:	9e00      	ldr	r6, [sp, #0]
 811029a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 811029c:	e728      	b.n	81100f0 <_dtoa_r+0x730>
 811029e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 81102a2:	e751      	b.n	8110148 <_dtoa_r+0x788>
 81102a4:	9a08      	ldr	r2, [sp, #32]
 81102a6:	9902      	ldr	r1, [sp, #8]
 81102a8:	e750      	b.n	811014c <_dtoa_r+0x78c>
 81102aa:	f8cd 8008 	str.w	r8, [sp, #8]
 81102ae:	e751      	b.n	8110154 <_dtoa_r+0x794>
 81102b0:	2300      	movs	r3, #0
 81102b2:	e779      	b.n	81101a8 <_dtoa_r+0x7e8>
 81102b4:	9b04      	ldr	r3, [sp, #16]
 81102b6:	e777      	b.n	81101a8 <_dtoa_r+0x7e8>
 81102b8:	2300      	movs	r3, #0
 81102ba:	9308      	str	r3, [sp, #32]
 81102bc:	e779      	b.n	81101b2 <_dtoa_r+0x7f2>
 81102be:	d093      	beq.n	81101e8 <_dtoa_r+0x828>
 81102c0:	9a00      	ldr	r2, [sp, #0]
 81102c2:	331c      	adds	r3, #28
 81102c4:	441a      	add	r2, r3
 81102c6:	9200      	str	r2, [sp, #0]
 81102c8:	9a06      	ldr	r2, [sp, #24]
 81102ca:	441a      	add	r2, r3
 81102cc:	441e      	add	r6, r3
 81102ce:	9206      	str	r2, [sp, #24]
 81102d0:	e78a      	b.n	81101e8 <_dtoa_r+0x828>
 81102d2:	4603      	mov	r3, r0
 81102d4:	e7f4      	b.n	81102c0 <_dtoa_r+0x900>
 81102d6:	9b03      	ldr	r3, [sp, #12]
 81102d8:	2b00      	cmp	r3, #0
 81102da:	46b8      	mov	r8, r7
 81102dc:	dc20      	bgt.n	8110320 <_dtoa_r+0x960>
 81102de:	469b      	mov	fp, r3
 81102e0:	9b07      	ldr	r3, [sp, #28]
 81102e2:	2b02      	cmp	r3, #2
 81102e4:	dd1e      	ble.n	8110324 <_dtoa_r+0x964>
 81102e6:	f1bb 0f00 	cmp.w	fp, #0
 81102ea:	f47f adb1 	bne.w	810fe50 <_dtoa_r+0x490>
 81102ee:	4621      	mov	r1, r4
 81102f0:	465b      	mov	r3, fp
 81102f2:	2205      	movs	r2, #5
 81102f4:	4648      	mov	r0, r9
 81102f6:	f000 f9df 	bl	81106b8 <__multadd>
 81102fa:	4601      	mov	r1, r0
 81102fc:	4604      	mov	r4, r0
 81102fe:	9802      	ldr	r0, [sp, #8]
 8110300:	f000 fbea 	bl	8110ad8 <__mcmp>
 8110304:	2800      	cmp	r0, #0
 8110306:	f77f ada3 	ble.w	810fe50 <_dtoa_r+0x490>
 811030a:	4656      	mov	r6, sl
 811030c:	2331      	movs	r3, #49	@ 0x31
 811030e:	f806 3b01 	strb.w	r3, [r6], #1
 8110312:	f108 0801 	add.w	r8, r8, #1
 8110316:	e59f      	b.n	810fe58 <_dtoa_r+0x498>
 8110318:	9c03      	ldr	r4, [sp, #12]
 811031a:	46b8      	mov	r8, r7
 811031c:	4625      	mov	r5, r4
 811031e:	e7f4      	b.n	811030a <_dtoa_r+0x94a>
 8110320:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8110324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110326:	2b00      	cmp	r3, #0
 8110328:	f000 8101 	beq.w	811052e <_dtoa_r+0xb6e>
 811032c:	2e00      	cmp	r6, #0
 811032e:	dd05      	ble.n	811033c <_dtoa_r+0x97c>
 8110330:	4629      	mov	r1, r5
 8110332:	4632      	mov	r2, r6
 8110334:	4648      	mov	r0, r9
 8110336:	f000 fb63 	bl	8110a00 <__lshift>
 811033a:	4605      	mov	r5, r0
 811033c:	9b08      	ldr	r3, [sp, #32]
 811033e:	2b00      	cmp	r3, #0
 8110340:	d05c      	beq.n	81103fc <_dtoa_r+0xa3c>
 8110342:	6869      	ldr	r1, [r5, #4]
 8110344:	4648      	mov	r0, r9
 8110346:	f000 f955 	bl	81105f4 <_Balloc>
 811034a:	4606      	mov	r6, r0
 811034c:	b928      	cbnz	r0, 811035a <_dtoa_r+0x99a>
 811034e:	4b82      	ldr	r3, [pc, #520]	@ (8110558 <_dtoa_r+0xb98>)
 8110350:	4602      	mov	r2, r0
 8110352:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8110356:	f7ff bb4a 	b.w	810f9ee <_dtoa_r+0x2e>
 811035a:	692a      	ldr	r2, [r5, #16]
 811035c:	3202      	adds	r2, #2
 811035e:	0092      	lsls	r2, r2, #2
 8110360:	f105 010c 	add.w	r1, r5, #12
 8110364:	300c      	adds	r0, #12
 8110366:	f7ff fa92 	bl	810f88e <memcpy>
 811036a:	2201      	movs	r2, #1
 811036c:	4631      	mov	r1, r6
 811036e:	4648      	mov	r0, r9
 8110370:	f000 fb46 	bl	8110a00 <__lshift>
 8110374:	f10a 0301 	add.w	r3, sl, #1
 8110378:	9300      	str	r3, [sp, #0]
 811037a:	eb0a 030b 	add.w	r3, sl, fp
 811037e:	9308      	str	r3, [sp, #32]
 8110380:	9b04      	ldr	r3, [sp, #16]
 8110382:	f003 0301 	and.w	r3, r3, #1
 8110386:	462f      	mov	r7, r5
 8110388:	9306      	str	r3, [sp, #24]
 811038a:	4605      	mov	r5, r0
 811038c:	9b00      	ldr	r3, [sp, #0]
 811038e:	9802      	ldr	r0, [sp, #8]
 8110390:	4621      	mov	r1, r4
 8110392:	f103 3bff 	add.w	fp, r3, #4294967295
 8110396:	f7ff fa88 	bl	810f8aa <quorem>
 811039a:	4603      	mov	r3, r0
 811039c:	3330      	adds	r3, #48	@ 0x30
 811039e:	9003      	str	r0, [sp, #12]
 81103a0:	4639      	mov	r1, r7
 81103a2:	9802      	ldr	r0, [sp, #8]
 81103a4:	9309      	str	r3, [sp, #36]	@ 0x24
 81103a6:	f000 fb97 	bl	8110ad8 <__mcmp>
 81103aa:	462a      	mov	r2, r5
 81103ac:	9004      	str	r0, [sp, #16]
 81103ae:	4621      	mov	r1, r4
 81103b0:	4648      	mov	r0, r9
 81103b2:	f000 fbad 	bl	8110b10 <__mdiff>
 81103b6:	68c2      	ldr	r2, [r0, #12]
 81103b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81103ba:	4606      	mov	r6, r0
 81103bc:	bb02      	cbnz	r2, 8110400 <_dtoa_r+0xa40>
 81103be:	4601      	mov	r1, r0
 81103c0:	9802      	ldr	r0, [sp, #8]
 81103c2:	f000 fb89 	bl	8110ad8 <__mcmp>
 81103c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81103c8:	4602      	mov	r2, r0
 81103ca:	4631      	mov	r1, r6
 81103cc:	4648      	mov	r0, r9
 81103ce:	920c      	str	r2, [sp, #48]	@ 0x30
 81103d0:	9309      	str	r3, [sp, #36]	@ 0x24
 81103d2:	f000 f94f 	bl	8110674 <_Bfree>
 81103d6:	9b07      	ldr	r3, [sp, #28]
 81103d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 81103da:	9e00      	ldr	r6, [sp, #0]
 81103dc:	ea42 0103 	orr.w	r1, r2, r3
 81103e0:	9b06      	ldr	r3, [sp, #24]
 81103e2:	4319      	orrs	r1, r3
 81103e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81103e6:	d10d      	bne.n	8110404 <_dtoa_r+0xa44>
 81103e8:	2b39      	cmp	r3, #57	@ 0x39
 81103ea:	d027      	beq.n	811043c <_dtoa_r+0xa7c>
 81103ec:	9a04      	ldr	r2, [sp, #16]
 81103ee:	2a00      	cmp	r2, #0
 81103f0:	dd01      	ble.n	81103f6 <_dtoa_r+0xa36>
 81103f2:	9b03      	ldr	r3, [sp, #12]
 81103f4:	3331      	adds	r3, #49	@ 0x31
 81103f6:	f88b 3000 	strb.w	r3, [fp]
 81103fa:	e52e      	b.n	810fe5a <_dtoa_r+0x49a>
 81103fc:	4628      	mov	r0, r5
 81103fe:	e7b9      	b.n	8110374 <_dtoa_r+0x9b4>
 8110400:	2201      	movs	r2, #1
 8110402:	e7e2      	b.n	81103ca <_dtoa_r+0xa0a>
 8110404:	9904      	ldr	r1, [sp, #16]
 8110406:	2900      	cmp	r1, #0
 8110408:	db04      	blt.n	8110414 <_dtoa_r+0xa54>
 811040a:	9807      	ldr	r0, [sp, #28]
 811040c:	4301      	orrs	r1, r0
 811040e:	9806      	ldr	r0, [sp, #24]
 8110410:	4301      	orrs	r1, r0
 8110412:	d120      	bne.n	8110456 <_dtoa_r+0xa96>
 8110414:	2a00      	cmp	r2, #0
 8110416:	ddee      	ble.n	81103f6 <_dtoa_r+0xa36>
 8110418:	9902      	ldr	r1, [sp, #8]
 811041a:	9300      	str	r3, [sp, #0]
 811041c:	2201      	movs	r2, #1
 811041e:	4648      	mov	r0, r9
 8110420:	f000 faee 	bl	8110a00 <__lshift>
 8110424:	4621      	mov	r1, r4
 8110426:	9002      	str	r0, [sp, #8]
 8110428:	f000 fb56 	bl	8110ad8 <__mcmp>
 811042c:	2800      	cmp	r0, #0
 811042e:	9b00      	ldr	r3, [sp, #0]
 8110430:	dc02      	bgt.n	8110438 <_dtoa_r+0xa78>
 8110432:	d1e0      	bne.n	81103f6 <_dtoa_r+0xa36>
 8110434:	07da      	lsls	r2, r3, #31
 8110436:	d5de      	bpl.n	81103f6 <_dtoa_r+0xa36>
 8110438:	2b39      	cmp	r3, #57	@ 0x39
 811043a:	d1da      	bne.n	81103f2 <_dtoa_r+0xa32>
 811043c:	2339      	movs	r3, #57	@ 0x39
 811043e:	f88b 3000 	strb.w	r3, [fp]
 8110442:	4633      	mov	r3, r6
 8110444:	461e      	mov	r6, r3
 8110446:	3b01      	subs	r3, #1
 8110448:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 811044c:	2a39      	cmp	r2, #57	@ 0x39
 811044e:	d04e      	beq.n	81104ee <_dtoa_r+0xb2e>
 8110450:	3201      	adds	r2, #1
 8110452:	701a      	strb	r2, [r3, #0]
 8110454:	e501      	b.n	810fe5a <_dtoa_r+0x49a>
 8110456:	2a00      	cmp	r2, #0
 8110458:	dd03      	ble.n	8110462 <_dtoa_r+0xaa2>
 811045a:	2b39      	cmp	r3, #57	@ 0x39
 811045c:	d0ee      	beq.n	811043c <_dtoa_r+0xa7c>
 811045e:	3301      	adds	r3, #1
 8110460:	e7c9      	b.n	81103f6 <_dtoa_r+0xa36>
 8110462:	9a00      	ldr	r2, [sp, #0]
 8110464:	9908      	ldr	r1, [sp, #32]
 8110466:	f802 3c01 	strb.w	r3, [r2, #-1]
 811046a:	428a      	cmp	r2, r1
 811046c:	d028      	beq.n	81104c0 <_dtoa_r+0xb00>
 811046e:	9902      	ldr	r1, [sp, #8]
 8110470:	2300      	movs	r3, #0
 8110472:	220a      	movs	r2, #10
 8110474:	4648      	mov	r0, r9
 8110476:	f000 f91f 	bl	81106b8 <__multadd>
 811047a:	42af      	cmp	r7, r5
 811047c:	9002      	str	r0, [sp, #8]
 811047e:	f04f 0300 	mov.w	r3, #0
 8110482:	f04f 020a 	mov.w	r2, #10
 8110486:	4639      	mov	r1, r7
 8110488:	4648      	mov	r0, r9
 811048a:	d107      	bne.n	811049c <_dtoa_r+0xadc>
 811048c:	f000 f914 	bl	81106b8 <__multadd>
 8110490:	4607      	mov	r7, r0
 8110492:	4605      	mov	r5, r0
 8110494:	9b00      	ldr	r3, [sp, #0]
 8110496:	3301      	adds	r3, #1
 8110498:	9300      	str	r3, [sp, #0]
 811049a:	e777      	b.n	811038c <_dtoa_r+0x9cc>
 811049c:	f000 f90c 	bl	81106b8 <__multadd>
 81104a0:	4629      	mov	r1, r5
 81104a2:	4607      	mov	r7, r0
 81104a4:	2300      	movs	r3, #0
 81104a6:	220a      	movs	r2, #10
 81104a8:	4648      	mov	r0, r9
 81104aa:	f000 f905 	bl	81106b8 <__multadd>
 81104ae:	4605      	mov	r5, r0
 81104b0:	e7f0      	b.n	8110494 <_dtoa_r+0xad4>
 81104b2:	f1bb 0f00 	cmp.w	fp, #0
 81104b6:	bfcc      	ite	gt
 81104b8:	465e      	movgt	r6, fp
 81104ba:	2601      	movle	r6, #1
 81104bc:	4456      	add	r6, sl
 81104be:	2700      	movs	r7, #0
 81104c0:	9902      	ldr	r1, [sp, #8]
 81104c2:	9300      	str	r3, [sp, #0]
 81104c4:	2201      	movs	r2, #1
 81104c6:	4648      	mov	r0, r9
 81104c8:	f000 fa9a 	bl	8110a00 <__lshift>
 81104cc:	4621      	mov	r1, r4
 81104ce:	9002      	str	r0, [sp, #8]
 81104d0:	f000 fb02 	bl	8110ad8 <__mcmp>
 81104d4:	2800      	cmp	r0, #0
 81104d6:	dcb4      	bgt.n	8110442 <_dtoa_r+0xa82>
 81104d8:	d102      	bne.n	81104e0 <_dtoa_r+0xb20>
 81104da:	9b00      	ldr	r3, [sp, #0]
 81104dc:	07db      	lsls	r3, r3, #31
 81104de:	d4b0      	bmi.n	8110442 <_dtoa_r+0xa82>
 81104e0:	4633      	mov	r3, r6
 81104e2:	461e      	mov	r6, r3
 81104e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81104e8:	2a30      	cmp	r2, #48	@ 0x30
 81104ea:	d0fa      	beq.n	81104e2 <_dtoa_r+0xb22>
 81104ec:	e4b5      	b.n	810fe5a <_dtoa_r+0x49a>
 81104ee:	459a      	cmp	sl, r3
 81104f0:	d1a8      	bne.n	8110444 <_dtoa_r+0xa84>
 81104f2:	2331      	movs	r3, #49	@ 0x31
 81104f4:	f108 0801 	add.w	r8, r8, #1
 81104f8:	f88a 3000 	strb.w	r3, [sl]
 81104fc:	e4ad      	b.n	810fe5a <_dtoa_r+0x49a>
 81104fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8110500:	f8df a058 	ldr.w	sl, [pc, #88]	@ 811055c <_dtoa_r+0xb9c>
 8110504:	b11b      	cbz	r3, 811050e <_dtoa_r+0xb4e>
 8110506:	f10a 0308 	add.w	r3, sl, #8
 811050a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 811050c:	6013      	str	r3, [r2, #0]
 811050e:	4650      	mov	r0, sl
 8110510:	b017      	add	sp, #92	@ 0x5c
 8110512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110516:	9b07      	ldr	r3, [sp, #28]
 8110518:	2b01      	cmp	r3, #1
 811051a:	f77f ae2e 	ble.w	811017a <_dtoa_r+0x7ba>
 811051e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8110520:	9308      	str	r3, [sp, #32]
 8110522:	2001      	movs	r0, #1
 8110524:	e64d      	b.n	81101c2 <_dtoa_r+0x802>
 8110526:	f1bb 0f00 	cmp.w	fp, #0
 811052a:	f77f aed9 	ble.w	81102e0 <_dtoa_r+0x920>
 811052e:	4656      	mov	r6, sl
 8110530:	9802      	ldr	r0, [sp, #8]
 8110532:	4621      	mov	r1, r4
 8110534:	f7ff f9b9 	bl	810f8aa <quorem>
 8110538:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 811053c:	f806 3b01 	strb.w	r3, [r6], #1
 8110540:	eba6 020a 	sub.w	r2, r6, sl
 8110544:	4593      	cmp	fp, r2
 8110546:	ddb4      	ble.n	81104b2 <_dtoa_r+0xaf2>
 8110548:	9902      	ldr	r1, [sp, #8]
 811054a:	2300      	movs	r3, #0
 811054c:	220a      	movs	r2, #10
 811054e:	4648      	mov	r0, r9
 8110550:	f000 f8b2 	bl	81106b8 <__multadd>
 8110554:	9002      	str	r0, [sp, #8]
 8110556:	e7eb      	b.n	8110530 <_dtoa_r+0xb70>
 8110558:	08111786 	.word	0x08111786
 811055c:	0811170a 	.word	0x0811170a

08110560 <_free_r>:
 8110560:	b538      	push	{r3, r4, r5, lr}
 8110562:	4605      	mov	r5, r0
 8110564:	2900      	cmp	r1, #0
 8110566:	d041      	beq.n	81105ec <_free_r+0x8c>
 8110568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811056c:	1f0c      	subs	r4, r1, #4
 811056e:	2b00      	cmp	r3, #0
 8110570:	bfb8      	it	lt
 8110572:	18e4      	addlt	r4, r4, r3
 8110574:	f7fe f9cc 	bl	810e910 <__malloc_lock>
 8110578:	4a1d      	ldr	r2, [pc, #116]	@ (81105f0 <_free_r+0x90>)
 811057a:	6813      	ldr	r3, [r2, #0]
 811057c:	b933      	cbnz	r3, 811058c <_free_r+0x2c>
 811057e:	6063      	str	r3, [r4, #4]
 8110580:	6014      	str	r4, [r2, #0]
 8110582:	4628      	mov	r0, r5
 8110584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8110588:	f7fe b9c8 	b.w	810e91c <__malloc_unlock>
 811058c:	42a3      	cmp	r3, r4
 811058e:	d908      	bls.n	81105a2 <_free_r+0x42>
 8110590:	6820      	ldr	r0, [r4, #0]
 8110592:	1821      	adds	r1, r4, r0
 8110594:	428b      	cmp	r3, r1
 8110596:	bf01      	itttt	eq
 8110598:	6819      	ldreq	r1, [r3, #0]
 811059a:	685b      	ldreq	r3, [r3, #4]
 811059c:	1809      	addeq	r1, r1, r0
 811059e:	6021      	streq	r1, [r4, #0]
 81105a0:	e7ed      	b.n	811057e <_free_r+0x1e>
 81105a2:	461a      	mov	r2, r3
 81105a4:	685b      	ldr	r3, [r3, #4]
 81105a6:	b10b      	cbz	r3, 81105ac <_free_r+0x4c>
 81105a8:	42a3      	cmp	r3, r4
 81105aa:	d9fa      	bls.n	81105a2 <_free_r+0x42>
 81105ac:	6811      	ldr	r1, [r2, #0]
 81105ae:	1850      	adds	r0, r2, r1
 81105b0:	42a0      	cmp	r0, r4
 81105b2:	d10b      	bne.n	81105cc <_free_r+0x6c>
 81105b4:	6820      	ldr	r0, [r4, #0]
 81105b6:	4401      	add	r1, r0
 81105b8:	1850      	adds	r0, r2, r1
 81105ba:	4283      	cmp	r3, r0
 81105bc:	6011      	str	r1, [r2, #0]
 81105be:	d1e0      	bne.n	8110582 <_free_r+0x22>
 81105c0:	6818      	ldr	r0, [r3, #0]
 81105c2:	685b      	ldr	r3, [r3, #4]
 81105c4:	6053      	str	r3, [r2, #4]
 81105c6:	4408      	add	r0, r1
 81105c8:	6010      	str	r0, [r2, #0]
 81105ca:	e7da      	b.n	8110582 <_free_r+0x22>
 81105cc:	d902      	bls.n	81105d4 <_free_r+0x74>
 81105ce:	230c      	movs	r3, #12
 81105d0:	602b      	str	r3, [r5, #0]
 81105d2:	e7d6      	b.n	8110582 <_free_r+0x22>
 81105d4:	6820      	ldr	r0, [r4, #0]
 81105d6:	1821      	adds	r1, r4, r0
 81105d8:	428b      	cmp	r3, r1
 81105da:	bf04      	itt	eq
 81105dc:	6819      	ldreq	r1, [r3, #0]
 81105de:	685b      	ldreq	r3, [r3, #4]
 81105e0:	6063      	str	r3, [r4, #4]
 81105e2:	bf04      	itt	eq
 81105e4:	1809      	addeq	r1, r1, r0
 81105e6:	6021      	streq	r1, [r4, #0]
 81105e8:	6054      	str	r4, [r2, #4]
 81105ea:	e7ca      	b.n	8110582 <_free_r+0x22>
 81105ec:	bd38      	pop	{r3, r4, r5, pc}
 81105ee:	bf00      	nop
 81105f0:	10005010 	.word	0x10005010

081105f4 <_Balloc>:
 81105f4:	b570      	push	{r4, r5, r6, lr}
 81105f6:	69c6      	ldr	r6, [r0, #28]
 81105f8:	4604      	mov	r4, r0
 81105fa:	460d      	mov	r5, r1
 81105fc:	b976      	cbnz	r6, 811061c <_Balloc+0x28>
 81105fe:	2010      	movs	r0, #16
 8110600:	f7fe f8d4 	bl	810e7ac <malloc>
 8110604:	4602      	mov	r2, r0
 8110606:	61e0      	str	r0, [r4, #28]
 8110608:	b920      	cbnz	r0, 8110614 <_Balloc+0x20>
 811060a:	4b18      	ldr	r3, [pc, #96]	@ (811066c <_Balloc+0x78>)
 811060c:	4818      	ldr	r0, [pc, #96]	@ (8110670 <_Balloc+0x7c>)
 811060e:	216b      	movs	r1, #107	@ 0x6b
 8110610:	f000 fe10 	bl	8111234 <__assert_func>
 8110614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8110618:	6006      	str	r6, [r0, #0]
 811061a:	60c6      	str	r6, [r0, #12]
 811061c:	69e6      	ldr	r6, [r4, #28]
 811061e:	68f3      	ldr	r3, [r6, #12]
 8110620:	b183      	cbz	r3, 8110644 <_Balloc+0x50>
 8110622:	69e3      	ldr	r3, [r4, #28]
 8110624:	68db      	ldr	r3, [r3, #12]
 8110626:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 811062a:	b9b8      	cbnz	r0, 811065c <_Balloc+0x68>
 811062c:	2101      	movs	r1, #1
 811062e:	fa01 f605 	lsl.w	r6, r1, r5
 8110632:	1d72      	adds	r2, r6, #5
 8110634:	0092      	lsls	r2, r2, #2
 8110636:	4620      	mov	r0, r4
 8110638:	f000 fe1a 	bl	8111270 <_calloc_r>
 811063c:	b160      	cbz	r0, 8110658 <_Balloc+0x64>
 811063e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8110642:	e00e      	b.n	8110662 <_Balloc+0x6e>
 8110644:	2221      	movs	r2, #33	@ 0x21
 8110646:	2104      	movs	r1, #4
 8110648:	4620      	mov	r0, r4
 811064a:	f000 fe11 	bl	8111270 <_calloc_r>
 811064e:	69e3      	ldr	r3, [r4, #28]
 8110650:	60f0      	str	r0, [r6, #12]
 8110652:	68db      	ldr	r3, [r3, #12]
 8110654:	2b00      	cmp	r3, #0
 8110656:	d1e4      	bne.n	8110622 <_Balloc+0x2e>
 8110658:	2000      	movs	r0, #0
 811065a:	bd70      	pop	{r4, r5, r6, pc}
 811065c:	6802      	ldr	r2, [r0, #0]
 811065e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8110662:	2300      	movs	r3, #0
 8110664:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8110668:	e7f7      	b.n	811065a <_Balloc+0x66>
 811066a:	bf00      	nop
 811066c:	08111717 	.word	0x08111717
 8110670:	08111797 	.word	0x08111797

08110674 <_Bfree>:
 8110674:	b570      	push	{r4, r5, r6, lr}
 8110676:	69c6      	ldr	r6, [r0, #28]
 8110678:	4605      	mov	r5, r0
 811067a:	460c      	mov	r4, r1
 811067c:	b976      	cbnz	r6, 811069c <_Bfree+0x28>
 811067e:	2010      	movs	r0, #16
 8110680:	f7fe f894 	bl	810e7ac <malloc>
 8110684:	4602      	mov	r2, r0
 8110686:	61e8      	str	r0, [r5, #28]
 8110688:	b920      	cbnz	r0, 8110694 <_Bfree+0x20>
 811068a:	4b09      	ldr	r3, [pc, #36]	@ (81106b0 <_Bfree+0x3c>)
 811068c:	4809      	ldr	r0, [pc, #36]	@ (81106b4 <_Bfree+0x40>)
 811068e:	218f      	movs	r1, #143	@ 0x8f
 8110690:	f000 fdd0 	bl	8111234 <__assert_func>
 8110694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8110698:	6006      	str	r6, [r0, #0]
 811069a:	60c6      	str	r6, [r0, #12]
 811069c:	b13c      	cbz	r4, 81106ae <_Bfree+0x3a>
 811069e:	69eb      	ldr	r3, [r5, #28]
 81106a0:	6862      	ldr	r2, [r4, #4]
 81106a2:	68db      	ldr	r3, [r3, #12]
 81106a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81106a8:	6021      	str	r1, [r4, #0]
 81106aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 81106ae:	bd70      	pop	{r4, r5, r6, pc}
 81106b0:	08111717 	.word	0x08111717
 81106b4:	08111797 	.word	0x08111797

081106b8 <__multadd>:
 81106b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81106bc:	690d      	ldr	r5, [r1, #16]
 81106be:	4607      	mov	r7, r0
 81106c0:	460c      	mov	r4, r1
 81106c2:	461e      	mov	r6, r3
 81106c4:	f101 0c14 	add.w	ip, r1, #20
 81106c8:	2000      	movs	r0, #0
 81106ca:	f8dc 3000 	ldr.w	r3, [ip]
 81106ce:	b299      	uxth	r1, r3
 81106d0:	fb02 6101 	mla	r1, r2, r1, r6
 81106d4:	0c1e      	lsrs	r6, r3, #16
 81106d6:	0c0b      	lsrs	r3, r1, #16
 81106d8:	fb02 3306 	mla	r3, r2, r6, r3
 81106dc:	b289      	uxth	r1, r1
 81106de:	3001      	adds	r0, #1
 81106e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 81106e4:	4285      	cmp	r5, r0
 81106e6:	f84c 1b04 	str.w	r1, [ip], #4
 81106ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 81106ee:	dcec      	bgt.n	81106ca <__multadd+0x12>
 81106f0:	b30e      	cbz	r6, 8110736 <__multadd+0x7e>
 81106f2:	68a3      	ldr	r3, [r4, #8]
 81106f4:	42ab      	cmp	r3, r5
 81106f6:	dc19      	bgt.n	811072c <__multadd+0x74>
 81106f8:	6861      	ldr	r1, [r4, #4]
 81106fa:	4638      	mov	r0, r7
 81106fc:	3101      	adds	r1, #1
 81106fe:	f7ff ff79 	bl	81105f4 <_Balloc>
 8110702:	4680      	mov	r8, r0
 8110704:	b928      	cbnz	r0, 8110712 <__multadd+0x5a>
 8110706:	4602      	mov	r2, r0
 8110708:	4b0c      	ldr	r3, [pc, #48]	@ (811073c <__multadd+0x84>)
 811070a:	480d      	ldr	r0, [pc, #52]	@ (8110740 <__multadd+0x88>)
 811070c:	21ba      	movs	r1, #186	@ 0xba
 811070e:	f000 fd91 	bl	8111234 <__assert_func>
 8110712:	6922      	ldr	r2, [r4, #16]
 8110714:	3202      	adds	r2, #2
 8110716:	f104 010c 	add.w	r1, r4, #12
 811071a:	0092      	lsls	r2, r2, #2
 811071c:	300c      	adds	r0, #12
 811071e:	f7ff f8b6 	bl	810f88e <memcpy>
 8110722:	4621      	mov	r1, r4
 8110724:	4638      	mov	r0, r7
 8110726:	f7ff ffa5 	bl	8110674 <_Bfree>
 811072a:	4644      	mov	r4, r8
 811072c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8110730:	3501      	adds	r5, #1
 8110732:	615e      	str	r6, [r3, #20]
 8110734:	6125      	str	r5, [r4, #16]
 8110736:	4620      	mov	r0, r4
 8110738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811073c:	08111786 	.word	0x08111786
 8110740:	08111797 	.word	0x08111797

08110744 <__hi0bits>:
 8110744:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8110748:	4603      	mov	r3, r0
 811074a:	bf36      	itet	cc
 811074c:	0403      	lslcc	r3, r0, #16
 811074e:	2000      	movcs	r0, #0
 8110750:	2010      	movcc	r0, #16
 8110752:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8110756:	bf3c      	itt	cc
 8110758:	021b      	lslcc	r3, r3, #8
 811075a:	3008      	addcc	r0, #8
 811075c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8110760:	bf3c      	itt	cc
 8110762:	011b      	lslcc	r3, r3, #4
 8110764:	3004      	addcc	r0, #4
 8110766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 811076a:	bf3c      	itt	cc
 811076c:	009b      	lslcc	r3, r3, #2
 811076e:	3002      	addcc	r0, #2
 8110770:	2b00      	cmp	r3, #0
 8110772:	db05      	blt.n	8110780 <__hi0bits+0x3c>
 8110774:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8110778:	f100 0001 	add.w	r0, r0, #1
 811077c:	bf08      	it	eq
 811077e:	2020      	moveq	r0, #32
 8110780:	4770      	bx	lr

08110782 <__lo0bits>:
 8110782:	6803      	ldr	r3, [r0, #0]
 8110784:	4602      	mov	r2, r0
 8110786:	f013 0007 	ands.w	r0, r3, #7
 811078a:	d00b      	beq.n	81107a4 <__lo0bits+0x22>
 811078c:	07d9      	lsls	r1, r3, #31
 811078e:	d421      	bmi.n	81107d4 <__lo0bits+0x52>
 8110790:	0798      	lsls	r0, r3, #30
 8110792:	bf49      	itett	mi
 8110794:	085b      	lsrmi	r3, r3, #1
 8110796:	089b      	lsrpl	r3, r3, #2
 8110798:	2001      	movmi	r0, #1
 811079a:	6013      	strmi	r3, [r2, #0]
 811079c:	bf5c      	itt	pl
 811079e:	6013      	strpl	r3, [r2, #0]
 81107a0:	2002      	movpl	r0, #2
 81107a2:	4770      	bx	lr
 81107a4:	b299      	uxth	r1, r3
 81107a6:	b909      	cbnz	r1, 81107ac <__lo0bits+0x2a>
 81107a8:	0c1b      	lsrs	r3, r3, #16
 81107aa:	2010      	movs	r0, #16
 81107ac:	b2d9      	uxtb	r1, r3
 81107ae:	b909      	cbnz	r1, 81107b4 <__lo0bits+0x32>
 81107b0:	3008      	adds	r0, #8
 81107b2:	0a1b      	lsrs	r3, r3, #8
 81107b4:	0719      	lsls	r1, r3, #28
 81107b6:	bf04      	itt	eq
 81107b8:	091b      	lsreq	r3, r3, #4
 81107ba:	3004      	addeq	r0, #4
 81107bc:	0799      	lsls	r1, r3, #30
 81107be:	bf04      	itt	eq
 81107c0:	089b      	lsreq	r3, r3, #2
 81107c2:	3002      	addeq	r0, #2
 81107c4:	07d9      	lsls	r1, r3, #31
 81107c6:	d403      	bmi.n	81107d0 <__lo0bits+0x4e>
 81107c8:	085b      	lsrs	r3, r3, #1
 81107ca:	f100 0001 	add.w	r0, r0, #1
 81107ce:	d003      	beq.n	81107d8 <__lo0bits+0x56>
 81107d0:	6013      	str	r3, [r2, #0]
 81107d2:	4770      	bx	lr
 81107d4:	2000      	movs	r0, #0
 81107d6:	4770      	bx	lr
 81107d8:	2020      	movs	r0, #32
 81107da:	4770      	bx	lr

081107dc <__i2b>:
 81107dc:	b510      	push	{r4, lr}
 81107de:	460c      	mov	r4, r1
 81107e0:	2101      	movs	r1, #1
 81107e2:	f7ff ff07 	bl	81105f4 <_Balloc>
 81107e6:	4602      	mov	r2, r0
 81107e8:	b928      	cbnz	r0, 81107f6 <__i2b+0x1a>
 81107ea:	4b05      	ldr	r3, [pc, #20]	@ (8110800 <__i2b+0x24>)
 81107ec:	4805      	ldr	r0, [pc, #20]	@ (8110804 <__i2b+0x28>)
 81107ee:	f240 1145 	movw	r1, #325	@ 0x145
 81107f2:	f000 fd1f 	bl	8111234 <__assert_func>
 81107f6:	2301      	movs	r3, #1
 81107f8:	6144      	str	r4, [r0, #20]
 81107fa:	6103      	str	r3, [r0, #16]
 81107fc:	bd10      	pop	{r4, pc}
 81107fe:	bf00      	nop
 8110800:	08111786 	.word	0x08111786
 8110804:	08111797 	.word	0x08111797

08110808 <__multiply>:
 8110808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811080c:	4617      	mov	r7, r2
 811080e:	690a      	ldr	r2, [r1, #16]
 8110810:	693b      	ldr	r3, [r7, #16]
 8110812:	429a      	cmp	r2, r3
 8110814:	bfa8      	it	ge
 8110816:	463b      	movge	r3, r7
 8110818:	4689      	mov	r9, r1
 811081a:	bfa4      	itt	ge
 811081c:	460f      	movge	r7, r1
 811081e:	4699      	movge	r9, r3
 8110820:	693d      	ldr	r5, [r7, #16]
 8110822:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8110826:	68bb      	ldr	r3, [r7, #8]
 8110828:	6879      	ldr	r1, [r7, #4]
 811082a:	eb05 060a 	add.w	r6, r5, sl
 811082e:	42b3      	cmp	r3, r6
 8110830:	b085      	sub	sp, #20
 8110832:	bfb8      	it	lt
 8110834:	3101      	addlt	r1, #1
 8110836:	f7ff fedd 	bl	81105f4 <_Balloc>
 811083a:	b930      	cbnz	r0, 811084a <__multiply+0x42>
 811083c:	4602      	mov	r2, r0
 811083e:	4b41      	ldr	r3, [pc, #260]	@ (8110944 <__multiply+0x13c>)
 8110840:	4841      	ldr	r0, [pc, #260]	@ (8110948 <__multiply+0x140>)
 8110842:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8110846:	f000 fcf5 	bl	8111234 <__assert_func>
 811084a:	f100 0414 	add.w	r4, r0, #20
 811084e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8110852:	4623      	mov	r3, r4
 8110854:	2200      	movs	r2, #0
 8110856:	4573      	cmp	r3, lr
 8110858:	d320      	bcc.n	811089c <__multiply+0x94>
 811085a:	f107 0814 	add.w	r8, r7, #20
 811085e:	f109 0114 	add.w	r1, r9, #20
 8110862:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8110866:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 811086a:	9302      	str	r3, [sp, #8]
 811086c:	1beb      	subs	r3, r5, r7
 811086e:	3b15      	subs	r3, #21
 8110870:	f023 0303 	bic.w	r3, r3, #3
 8110874:	3304      	adds	r3, #4
 8110876:	3715      	adds	r7, #21
 8110878:	42bd      	cmp	r5, r7
 811087a:	bf38      	it	cc
 811087c:	2304      	movcc	r3, #4
 811087e:	9301      	str	r3, [sp, #4]
 8110880:	9b02      	ldr	r3, [sp, #8]
 8110882:	9103      	str	r1, [sp, #12]
 8110884:	428b      	cmp	r3, r1
 8110886:	d80c      	bhi.n	81108a2 <__multiply+0x9a>
 8110888:	2e00      	cmp	r6, #0
 811088a:	dd03      	ble.n	8110894 <__multiply+0x8c>
 811088c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8110890:	2b00      	cmp	r3, #0
 8110892:	d055      	beq.n	8110940 <__multiply+0x138>
 8110894:	6106      	str	r6, [r0, #16]
 8110896:	b005      	add	sp, #20
 8110898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811089c:	f843 2b04 	str.w	r2, [r3], #4
 81108a0:	e7d9      	b.n	8110856 <__multiply+0x4e>
 81108a2:	f8b1 a000 	ldrh.w	sl, [r1]
 81108a6:	f1ba 0f00 	cmp.w	sl, #0
 81108aa:	d01f      	beq.n	81108ec <__multiply+0xe4>
 81108ac:	46c4      	mov	ip, r8
 81108ae:	46a1      	mov	r9, r4
 81108b0:	2700      	movs	r7, #0
 81108b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 81108b6:	f8d9 3000 	ldr.w	r3, [r9]
 81108ba:	fa1f fb82 	uxth.w	fp, r2
 81108be:	b29b      	uxth	r3, r3
 81108c0:	fb0a 330b 	mla	r3, sl, fp, r3
 81108c4:	443b      	add	r3, r7
 81108c6:	f8d9 7000 	ldr.w	r7, [r9]
 81108ca:	0c12      	lsrs	r2, r2, #16
 81108cc:	0c3f      	lsrs	r7, r7, #16
 81108ce:	fb0a 7202 	mla	r2, sl, r2, r7
 81108d2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 81108d6:	b29b      	uxth	r3, r3
 81108d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81108dc:	4565      	cmp	r5, ip
 81108de:	f849 3b04 	str.w	r3, [r9], #4
 81108e2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 81108e6:	d8e4      	bhi.n	81108b2 <__multiply+0xaa>
 81108e8:	9b01      	ldr	r3, [sp, #4]
 81108ea:	50e7      	str	r7, [r4, r3]
 81108ec:	9b03      	ldr	r3, [sp, #12]
 81108ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 81108f2:	3104      	adds	r1, #4
 81108f4:	f1b9 0f00 	cmp.w	r9, #0
 81108f8:	d020      	beq.n	811093c <__multiply+0x134>
 81108fa:	6823      	ldr	r3, [r4, #0]
 81108fc:	4647      	mov	r7, r8
 81108fe:	46a4      	mov	ip, r4
 8110900:	f04f 0a00 	mov.w	sl, #0
 8110904:	f8b7 b000 	ldrh.w	fp, [r7]
 8110908:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 811090c:	fb09 220b 	mla	r2, r9, fp, r2
 8110910:	4452      	add	r2, sl
 8110912:	b29b      	uxth	r3, r3
 8110914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8110918:	f84c 3b04 	str.w	r3, [ip], #4
 811091c:	f857 3b04 	ldr.w	r3, [r7], #4
 8110920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8110924:	f8bc 3000 	ldrh.w	r3, [ip]
 8110928:	fb09 330a 	mla	r3, r9, sl, r3
 811092c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8110930:	42bd      	cmp	r5, r7
 8110932:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8110936:	d8e5      	bhi.n	8110904 <__multiply+0xfc>
 8110938:	9a01      	ldr	r2, [sp, #4]
 811093a:	50a3      	str	r3, [r4, r2]
 811093c:	3404      	adds	r4, #4
 811093e:	e79f      	b.n	8110880 <__multiply+0x78>
 8110940:	3e01      	subs	r6, #1
 8110942:	e7a1      	b.n	8110888 <__multiply+0x80>
 8110944:	08111786 	.word	0x08111786
 8110948:	08111797 	.word	0x08111797

0811094c <__pow5mult>:
 811094c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8110950:	4615      	mov	r5, r2
 8110952:	f012 0203 	ands.w	r2, r2, #3
 8110956:	4607      	mov	r7, r0
 8110958:	460e      	mov	r6, r1
 811095a:	d007      	beq.n	811096c <__pow5mult+0x20>
 811095c:	4c25      	ldr	r4, [pc, #148]	@ (81109f4 <__pow5mult+0xa8>)
 811095e:	3a01      	subs	r2, #1
 8110960:	2300      	movs	r3, #0
 8110962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8110966:	f7ff fea7 	bl	81106b8 <__multadd>
 811096a:	4606      	mov	r6, r0
 811096c:	10ad      	asrs	r5, r5, #2
 811096e:	d03d      	beq.n	81109ec <__pow5mult+0xa0>
 8110970:	69fc      	ldr	r4, [r7, #28]
 8110972:	b97c      	cbnz	r4, 8110994 <__pow5mult+0x48>
 8110974:	2010      	movs	r0, #16
 8110976:	f7fd ff19 	bl	810e7ac <malloc>
 811097a:	4602      	mov	r2, r0
 811097c:	61f8      	str	r0, [r7, #28]
 811097e:	b928      	cbnz	r0, 811098c <__pow5mult+0x40>
 8110980:	4b1d      	ldr	r3, [pc, #116]	@ (81109f8 <__pow5mult+0xac>)
 8110982:	481e      	ldr	r0, [pc, #120]	@ (81109fc <__pow5mult+0xb0>)
 8110984:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8110988:	f000 fc54 	bl	8111234 <__assert_func>
 811098c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8110990:	6004      	str	r4, [r0, #0]
 8110992:	60c4      	str	r4, [r0, #12]
 8110994:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8110998:	f8d8 4008 	ldr.w	r4, [r8, #8]
 811099c:	b94c      	cbnz	r4, 81109b2 <__pow5mult+0x66>
 811099e:	f240 2171 	movw	r1, #625	@ 0x271
 81109a2:	4638      	mov	r0, r7
 81109a4:	f7ff ff1a 	bl	81107dc <__i2b>
 81109a8:	2300      	movs	r3, #0
 81109aa:	f8c8 0008 	str.w	r0, [r8, #8]
 81109ae:	4604      	mov	r4, r0
 81109b0:	6003      	str	r3, [r0, #0]
 81109b2:	f04f 0900 	mov.w	r9, #0
 81109b6:	07eb      	lsls	r3, r5, #31
 81109b8:	d50a      	bpl.n	81109d0 <__pow5mult+0x84>
 81109ba:	4631      	mov	r1, r6
 81109bc:	4622      	mov	r2, r4
 81109be:	4638      	mov	r0, r7
 81109c0:	f7ff ff22 	bl	8110808 <__multiply>
 81109c4:	4631      	mov	r1, r6
 81109c6:	4680      	mov	r8, r0
 81109c8:	4638      	mov	r0, r7
 81109ca:	f7ff fe53 	bl	8110674 <_Bfree>
 81109ce:	4646      	mov	r6, r8
 81109d0:	106d      	asrs	r5, r5, #1
 81109d2:	d00b      	beq.n	81109ec <__pow5mult+0xa0>
 81109d4:	6820      	ldr	r0, [r4, #0]
 81109d6:	b938      	cbnz	r0, 81109e8 <__pow5mult+0x9c>
 81109d8:	4622      	mov	r2, r4
 81109da:	4621      	mov	r1, r4
 81109dc:	4638      	mov	r0, r7
 81109de:	f7ff ff13 	bl	8110808 <__multiply>
 81109e2:	6020      	str	r0, [r4, #0]
 81109e4:	f8c0 9000 	str.w	r9, [r0]
 81109e8:	4604      	mov	r4, r0
 81109ea:	e7e4      	b.n	81109b6 <__pow5mult+0x6a>
 81109ec:	4630      	mov	r0, r6
 81109ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81109f2:	bf00      	nop
 81109f4:	08111848 	.word	0x08111848
 81109f8:	08111717 	.word	0x08111717
 81109fc:	08111797 	.word	0x08111797

08110a00 <__lshift>:
 8110a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8110a04:	460c      	mov	r4, r1
 8110a06:	6849      	ldr	r1, [r1, #4]
 8110a08:	6923      	ldr	r3, [r4, #16]
 8110a0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8110a0e:	68a3      	ldr	r3, [r4, #8]
 8110a10:	4607      	mov	r7, r0
 8110a12:	4691      	mov	r9, r2
 8110a14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8110a18:	f108 0601 	add.w	r6, r8, #1
 8110a1c:	42b3      	cmp	r3, r6
 8110a1e:	db0b      	blt.n	8110a38 <__lshift+0x38>
 8110a20:	4638      	mov	r0, r7
 8110a22:	f7ff fde7 	bl	81105f4 <_Balloc>
 8110a26:	4605      	mov	r5, r0
 8110a28:	b948      	cbnz	r0, 8110a3e <__lshift+0x3e>
 8110a2a:	4602      	mov	r2, r0
 8110a2c:	4b28      	ldr	r3, [pc, #160]	@ (8110ad0 <__lshift+0xd0>)
 8110a2e:	4829      	ldr	r0, [pc, #164]	@ (8110ad4 <__lshift+0xd4>)
 8110a30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8110a34:	f000 fbfe 	bl	8111234 <__assert_func>
 8110a38:	3101      	adds	r1, #1
 8110a3a:	005b      	lsls	r3, r3, #1
 8110a3c:	e7ee      	b.n	8110a1c <__lshift+0x1c>
 8110a3e:	2300      	movs	r3, #0
 8110a40:	f100 0114 	add.w	r1, r0, #20
 8110a44:	f100 0210 	add.w	r2, r0, #16
 8110a48:	4618      	mov	r0, r3
 8110a4a:	4553      	cmp	r3, sl
 8110a4c:	db33      	blt.n	8110ab6 <__lshift+0xb6>
 8110a4e:	6920      	ldr	r0, [r4, #16]
 8110a50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8110a54:	f104 0314 	add.w	r3, r4, #20
 8110a58:	f019 091f 	ands.w	r9, r9, #31
 8110a5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8110a60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8110a64:	d02b      	beq.n	8110abe <__lshift+0xbe>
 8110a66:	f1c9 0e20 	rsb	lr, r9, #32
 8110a6a:	468a      	mov	sl, r1
 8110a6c:	2200      	movs	r2, #0
 8110a6e:	6818      	ldr	r0, [r3, #0]
 8110a70:	fa00 f009 	lsl.w	r0, r0, r9
 8110a74:	4310      	orrs	r0, r2
 8110a76:	f84a 0b04 	str.w	r0, [sl], #4
 8110a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8110a7e:	459c      	cmp	ip, r3
 8110a80:	fa22 f20e 	lsr.w	r2, r2, lr
 8110a84:	d8f3      	bhi.n	8110a6e <__lshift+0x6e>
 8110a86:	ebac 0304 	sub.w	r3, ip, r4
 8110a8a:	3b15      	subs	r3, #21
 8110a8c:	f023 0303 	bic.w	r3, r3, #3
 8110a90:	3304      	adds	r3, #4
 8110a92:	f104 0015 	add.w	r0, r4, #21
 8110a96:	4560      	cmp	r0, ip
 8110a98:	bf88      	it	hi
 8110a9a:	2304      	movhi	r3, #4
 8110a9c:	50ca      	str	r2, [r1, r3]
 8110a9e:	b10a      	cbz	r2, 8110aa4 <__lshift+0xa4>
 8110aa0:	f108 0602 	add.w	r6, r8, #2
 8110aa4:	3e01      	subs	r6, #1
 8110aa6:	4638      	mov	r0, r7
 8110aa8:	612e      	str	r6, [r5, #16]
 8110aaa:	4621      	mov	r1, r4
 8110aac:	f7ff fde2 	bl	8110674 <_Bfree>
 8110ab0:	4628      	mov	r0, r5
 8110ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8110ab6:	f842 0f04 	str.w	r0, [r2, #4]!
 8110aba:	3301      	adds	r3, #1
 8110abc:	e7c5      	b.n	8110a4a <__lshift+0x4a>
 8110abe:	3904      	subs	r1, #4
 8110ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8110ac4:	f841 2f04 	str.w	r2, [r1, #4]!
 8110ac8:	459c      	cmp	ip, r3
 8110aca:	d8f9      	bhi.n	8110ac0 <__lshift+0xc0>
 8110acc:	e7ea      	b.n	8110aa4 <__lshift+0xa4>
 8110ace:	bf00      	nop
 8110ad0:	08111786 	.word	0x08111786
 8110ad4:	08111797 	.word	0x08111797

08110ad8 <__mcmp>:
 8110ad8:	690a      	ldr	r2, [r1, #16]
 8110ada:	4603      	mov	r3, r0
 8110adc:	6900      	ldr	r0, [r0, #16]
 8110ade:	1a80      	subs	r0, r0, r2
 8110ae0:	b530      	push	{r4, r5, lr}
 8110ae2:	d10e      	bne.n	8110b02 <__mcmp+0x2a>
 8110ae4:	3314      	adds	r3, #20
 8110ae6:	3114      	adds	r1, #20
 8110ae8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8110aec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8110af0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8110af4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8110af8:	4295      	cmp	r5, r2
 8110afa:	d003      	beq.n	8110b04 <__mcmp+0x2c>
 8110afc:	d205      	bcs.n	8110b0a <__mcmp+0x32>
 8110afe:	f04f 30ff 	mov.w	r0, #4294967295
 8110b02:	bd30      	pop	{r4, r5, pc}
 8110b04:	42a3      	cmp	r3, r4
 8110b06:	d3f3      	bcc.n	8110af0 <__mcmp+0x18>
 8110b08:	e7fb      	b.n	8110b02 <__mcmp+0x2a>
 8110b0a:	2001      	movs	r0, #1
 8110b0c:	e7f9      	b.n	8110b02 <__mcmp+0x2a>
	...

08110b10 <__mdiff>:
 8110b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110b14:	4689      	mov	r9, r1
 8110b16:	4606      	mov	r6, r0
 8110b18:	4611      	mov	r1, r2
 8110b1a:	4648      	mov	r0, r9
 8110b1c:	4614      	mov	r4, r2
 8110b1e:	f7ff ffdb 	bl	8110ad8 <__mcmp>
 8110b22:	1e05      	subs	r5, r0, #0
 8110b24:	d112      	bne.n	8110b4c <__mdiff+0x3c>
 8110b26:	4629      	mov	r1, r5
 8110b28:	4630      	mov	r0, r6
 8110b2a:	f7ff fd63 	bl	81105f4 <_Balloc>
 8110b2e:	4602      	mov	r2, r0
 8110b30:	b928      	cbnz	r0, 8110b3e <__mdiff+0x2e>
 8110b32:	4b3f      	ldr	r3, [pc, #252]	@ (8110c30 <__mdiff+0x120>)
 8110b34:	f240 2137 	movw	r1, #567	@ 0x237
 8110b38:	483e      	ldr	r0, [pc, #248]	@ (8110c34 <__mdiff+0x124>)
 8110b3a:	f000 fb7b 	bl	8111234 <__assert_func>
 8110b3e:	2301      	movs	r3, #1
 8110b40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8110b44:	4610      	mov	r0, r2
 8110b46:	b003      	add	sp, #12
 8110b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110b4c:	bfbc      	itt	lt
 8110b4e:	464b      	movlt	r3, r9
 8110b50:	46a1      	movlt	r9, r4
 8110b52:	4630      	mov	r0, r6
 8110b54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8110b58:	bfba      	itte	lt
 8110b5a:	461c      	movlt	r4, r3
 8110b5c:	2501      	movlt	r5, #1
 8110b5e:	2500      	movge	r5, #0
 8110b60:	f7ff fd48 	bl	81105f4 <_Balloc>
 8110b64:	4602      	mov	r2, r0
 8110b66:	b918      	cbnz	r0, 8110b70 <__mdiff+0x60>
 8110b68:	4b31      	ldr	r3, [pc, #196]	@ (8110c30 <__mdiff+0x120>)
 8110b6a:	f240 2145 	movw	r1, #581	@ 0x245
 8110b6e:	e7e3      	b.n	8110b38 <__mdiff+0x28>
 8110b70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8110b74:	6926      	ldr	r6, [r4, #16]
 8110b76:	60c5      	str	r5, [r0, #12]
 8110b78:	f109 0310 	add.w	r3, r9, #16
 8110b7c:	f109 0514 	add.w	r5, r9, #20
 8110b80:	f104 0e14 	add.w	lr, r4, #20
 8110b84:	f100 0b14 	add.w	fp, r0, #20
 8110b88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8110b8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8110b90:	9301      	str	r3, [sp, #4]
 8110b92:	46d9      	mov	r9, fp
 8110b94:	f04f 0c00 	mov.w	ip, #0
 8110b98:	9b01      	ldr	r3, [sp, #4]
 8110b9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8110b9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8110ba2:	9301      	str	r3, [sp, #4]
 8110ba4:	fa1f f38a 	uxth.w	r3, sl
 8110ba8:	4619      	mov	r1, r3
 8110baa:	b283      	uxth	r3, r0
 8110bac:	1acb      	subs	r3, r1, r3
 8110bae:	0c00      	lsrs	r0, r0, #16
 8110bb0:	4463      	add	r3, ip
 8110bb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8110bb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8110bba:	b29b      	uxth	r3, r3
 8110bbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8110bc0:	4576      	cmp	r6, lr
 8110bc2:	f849 3b04 	str.w	r3, [r9], #4
 8110bc6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8110bca:	d8e5      	bhi.n	8110b98 <__mdiff+0x88>
 8110bcc:	1b33      	subs	r3, r6, r4
 8110bce:	3b15      	subs	r3, #21
 8110bd0:	f023 0303 	bic.w	r3, r3, #3
 8110bd4:	3415      	adds	r4, #21
 8110bd6:	3304      	adds	r3, #4
 8110bd8:	42a6      	cmp	r6, r4
 8110bda:	bf38      	it	cc
 8110bdc:	2304      	movcc	r3, #4
 8110bde:	441d      	add	r5, r3
 8110be0:	445b      	add	r3, fp
 8110be2:	461e      	mov	r6, r3
 8110be4:	462c      	mov	r4, r5
 8110be6:	4544      	cmp	r4, r8
 8110be8:	d30e      	bcc.n	8110c08 <__mdiff+0xf8>
 8110bea:	f108 0103 	add.w	r1, r8, #3
 8110bee:	1b49      	subs	r1, r1, r5
 8110bf0:	f021 0103 	bic.w	r1, r1, #3
 8110bf4:	3d03      	subs	r5, #3
 8110bf6:	45a8      	cmp	r8, r5
 8110bf8:	bf38      	it	cc
 8110bfa:	2100      	movcc	r1, #0
 8110bfc:	440b      	add	r3, r1
 8110bfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8110c02:	b191      	cbz	r1, 8110c2a <__mdiff+0x11a>
 8110c04:	6117      	str	r7, [r2, #16]
 8110c06:	e79d      	b.n	8110b44 <__mdiff+0x34>
 8110c08:	f854 1b04 	ldr.w	r1, [r4], #4
 8110c0c:	46e6      	mov	lr, ip
 8110c0e:	0c08      	lsrs	r0, r1, #16
 8110c10:	fa1c fc81 	uxtah	ip, ip, r1
 8110c14:	4471      	add	r1, lr
 8110c16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8110c1a:	b289      	uxth	r1, r1
 8110c1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8110c20:	f846 1b04 	str.w	r1, [r6], #4
 8110c24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8110c28:	e7dd      	b.n	8110be6 <__mdiff+0xd6>
 8110c2a:	3f01      	subs	r7, #1
 8110c2c:	e7e7      	b.n	8110bfe <__mdiff+0xee>
 8110c2e:	bf00      	nop
 8110c30:	08111786 	.word	0x08111786
 8110c34:	08111797 	.word	0x08111797

08110c38 <__d2b>:
 8110c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8110c3c:	460f      	mov	r7, r1
 8110c3e:	2101      	movs	r1, #1
 8110c40:	ec59 8b10 	vmov	r8, r9, d0
 8110c44:	4616      	mov	r6, r2
 8110c46:	f7ff fcd5 	bl	81105f4 <_Balloc>
 8110c4a:	4604      	mov	r4, r0
 8110c4c:	b930      	cbnz	r0, 8110c5c <__d2b+0x24>
 8110c4e:	4602      	mov	r2, r0
 8110c50:	4b23      	ldr	r3, [pc, #140]	@ (8110ce0 <__d2b+0xa8>)
 8110c52:	4824      	ldr	r0, [pc, #144]	@ (8110ce4 <__d2b+0xac>)
 8110c54:	f240 310f 	movw	r1, #783	@ 0x30f
 8110c58:	f000 faec 	bl	8111234 <__assert_func>
 8110c5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8110c60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8110c64:	b10d      	cbz	r5, 8110c6a <__d2b+0x32>
 8110c66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8110c6a:	9301      	str	r3, [sp, #4]
 8110c6c:	f1b8 0300 	subs.w	r3, r8, #0
 8110c70:	d023      	beq.n	8110cba <__d2b+0x82>
 8110c72:	4668      	mov	r0, sp
 8110c74:	9300      	str	r3, [sp, #0]
 8110c76:	f7ff fd84 	bl	8110782 <__lo0bits>
 8110c7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8110c7e:	b1d0      	cbz	r0, 8110cb6 <__d2b+0x7e>
 8110c80:	f1c0 0320 	rsb	r3, r0, #32
 8110c84:	fa02 f303 	lsl.w	r3, r2, r3
 8110c88:	430b      	orrs	r3, r1
 8110c8a:	40c2      	lsrs	r2, r0
 8110c8c:	6163      	str	r3, [r4, #20]
 8110c8e:	9201      	str	r2, [sp, #4]
 8110c90:	9b01      	ldr	r3, [sp, #4]
 8110c92:	61a3      	str	r3, [r4, #24]
 8110c94:	2b00      	cmp	r3, #0
 8110c96:	bf0c      	ite	eq
 8110c98:	2201      	moveq	r2, #1
 8110c9a:	2202      	movne	r2, #2
 8110c9c:	6122      	str	r2, [r4, #16]
 8110c9e:	b1a5      	cbz	r5, 8110cca <__d2b+0x92>
 8110ca0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8110ca4:	4405      	add	r5, r0
 8110ca6:	603d      	str	r5, [r7, #0]
 8110ca8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8110cac:	6030      	str	r0, [r6, #0]
 8110cae:	4620      	mov	r0, r4
 8110cb0:	b003      	add	sp, #12
 8110cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8110cb6:	6161      	str	r1, [r4, #20]
 8110cb8:	e7ea      	b.n	8110c90 <__d2b+0x58>
 8110cba:	a801      	add	r0, sp, #4
 8110cbc:	f7ff fd61 	bl	8110782 <__lo0bits>
 8110cc0:	9b01      	ldr	r3, [sp, #4]
 8110cc2:	6163      	str	r3, [r4, #20]
 8110cc4:	3020      	adds	r0, #32
 8110cc6:	2201      	movs	r2, #1
 8110cc8:	e7e8      	b.n	8110c9c <__d2b+0x64>
 8110cca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8110cce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8110cd2:	6038      	str	r0, [r7, #0]
 8110cd4:	6918      	ldr	r0, [r3, #16]
 8110cd6:	f7ff fd35 	bl	8110744 <__hi0bits>
 8110cda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8110cde:	e7e5      	b.n	8110cac <__d2b+0x74>
 8110ce0:	08111786 	.word	0x08111786
 8110ce4:	08111797 	.word	0x08111797

08110ce8 <__sfputc_r>:
 8110ce8:	6893      	ldr	r3, [r2, #8]
 8110cea:	3b01      	subs	r3, #1
 8110cec:	2b00      	cmp	r3, #0
 8110cee:	b410      	push	{r4}
 8110cf0:	6093      	str	r3, [r2, #8]
 8110cf2:	da08      	bge.n	8110d06 <__sfputc_r+0x1e>
 8110cf4:	6994      	ldr	r4, [r2, #24]
 8110cf6:	42a3      	cmp	r3, r4
 8110cf8:	db01      	blt.n	8110cfe <__sfputc_r+0x16>
 8110cfa:	290a      	cmp	r1, #10
 8110cfc:	d103      	bne.n	8110d06 <__sfputc_r+0x1e>
 8110cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8110d02:	f7fe bbe4 	b.w	810f4ce <__swbuf_r>
 8110d06:	6813      	ldr	r3, [r2, #0]
 8110d08:	1c58      	adds	r0, r3, #1
 8110d0a:	6010      	str	r0, [r2, #0]
 8110d0c:	7019      	strb	r1, [r3, #0]
 8110d0e:	4608      	mov	r0, r1
 8110d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8110d14:	4770      	bx	lr

08110d16 <__sfputs_r>:
 8110d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8110d18:	4606      	mov	r6, r0
 8110d1a:	460f      	mov	r7, r1
 8110d1c:	4614      	mov	r4, r2
 8110d1e:	18d5      	adds	r5, r2, r3
 8110d20:	42ac      	cmp	r4, r5
 8110d22:	d101      	bne.n	8110d28 <__sfputs_r+0x12>
 8110d24:	2000      	movs	r0, #0
 8110d26:	e007      	b.n	8110d38 <__sfputs_r+0x22>
 8110d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8110d2c:	463a      	mov	r2, r7
 8110d2e:	4630      	mov	r0, r6
 8110d30:	f7ff ffda 	bl	8110ce8 <__sfputc_r>
 8110d34:	1c43      	adds	r3, r0, #1
 8110d36:	d1f3      	bne.n	8110d20 <__sfputs_r+0xa>
 8110d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08110d3c <_vfiprintf_r>:
 8110d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110d40:	460d      	mov	r5, r1
 8110d42:	b09d      	sub	sp, #116	@ 0x74
 8110d44:	4614      	mov	r4, r2
 8110d46:	4698      	mov	r8, r3
 8110d48:	4606      	mov	r6, r0
 8110d4a:	b118      	cbz	r0, 8110d54 <_vfiprintf_r+0x18>
 8110d4c:	6a03      	ldr	r3, [r0, #32]
 8110d4e:	b90b      	cbnz	r3, 8110d54 <_vfiprintf_r+0x18>
 8110d50:	f7fe facc 	bl	810f2ec <__sinit>
 8110d54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8110d56:	07d9      	lsls	r1, r3, #31
 8110d58:	d405      	bmi.n	8110d66 <_vfiprintf_r+0x2a>
 8110d5a:	89ab      	ldrh	r3, [r5, #12]
 8110d5c:	059a      	lsls	r2, r3, #22
 8110d5e:	d402      	bmi.n	8110d66 <_vfiprintf_r+0x2a>
 8110d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8110d62:	f7fe fd92 	bl	810f88a <__retarget_lock_acquire_recursive>
 8110d66:	89ab      	ldrh	r3, [r5, #12]
 8110d68:	071b      	lsls	r3, r3, #28
 8110d6a:	d501      	bpl.n	8110d70 <_vfiprintf_r+0x34>
 8110d6c:	692b      	ldr	r3, [r5, #16]
 8110d6e:	b99b      	cbnz	r3, 8110d98 <_vfiprintf_r+0x5c>
 8110d70:	4629      	mov	r1, r5
 8110d72:	4630      	mov	r0, r6
 8110d74:	f7fe fbea 	bl	810f54c <__swsetup_r>
 8110d78:	b170      	cbz	r0, 8110d98 <_vfiprintf_r+0x5c>
 8110d7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8110d7c:	07dc      	lsls	r4, r3, #31
 8110d7e:	d504      	bpl.n	8110d8a <_vfiprintf_r+0x4e>
 8110d80:	f04f 30ff 	mov.w	r0, #4294967295
 8110d84:	b01d      	add	sp, #116	@ 0x74
 8110d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110d8a:	89ab      	ldrh	r3, [r5, #12]
 8110d8c:	0598      	lsls	r0, r3, #22
 8110d8e:	d4f7      	bmi.n	8110d80 <_vfiprintf_r+0x44>
 8110d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8110d92:	f7fe fd7b 	bl	810f88c <__retarget_lock_release_recursive>
 8110d96:	e7f3      	b.n	8110d80 <_vfiprintf_r+0x44>
 8110d98:	2300      	movs	r3, #0
 8110d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8110d9c:	2320      	movs	r3, #32
 8110d9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8110da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8110da6:	2330      	movs	r3, #48	@ 0x30
 8110da8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8110f58 <_vfiprintf_r+0x21c>
 8110dac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8110db0:	f04f 0901 	mov.w	r9, #1
 8110db4:	4623      	mov	r3, r4
 8110db6:	469a      	mov	sl, r3
 8110db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8110dbc:	b10a      	cbz	r2, 8110dc2 <_vfiprintf_r+0x86>
 8110dbe:	2a25      	cmp	r2, #37	@ 0x25
 8110dc0:	d1f9      	bne.n	8110db6 <_vfiprintf_r+0x7a>
 8110dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8110dc6:	d00b      	beq.n	8110de0 <_vfiprintf_r+0xa4>
 8110dc8:	465b      	mov	r3, fp
 8110dca:	4622      	mov	r2, r4
 8110dcc:	4629      	mov	r1, r5
 8110dce:	4630      	mov	r0, r6
 8110dd0:	f7ff ffa1 	bl	8110d16 <__sfputs_r>
 8110dd4:	3001      	adds	r0, #1
 8110dd6:	f000 80a7 	beq.w	8110f28 <_vfiprintf_r+0x1ec>
 8110dda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8110ddc:	445a      	add	r2, fp
 8110dde:	9209      	str	r2, [sp, #36]	@ 0x24
 8110de0:	f89a 3000 	ldrb.w	r3, [sl]
 8110de4:	2b00      	cmp	r3, #0
 8110de6:	f000 809f 	beq.w	8110f28 <_vfiprintf_r+0x1ec>
 8110dea:	2300      	movs	r3, #0
 8110dec:	f04f 32ff 	mov.w	r2, #4294967295
 8110df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8110df4:	f10a 0a01 	add.w	sl, sl, #1
 8110df8:	9304      	str	r3, [sp, #16]
 8110dfa:	9307      	str	r3, [sp, #28]
 8110dfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8110e00:	931a      	str	r3, [sp, #104]	@ 0x68
 8110e02:	4654      	mov	r4, sl
 8110e04:	2205      	movs	r2, #5
 8110e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8110e0a:	4853      	ldr	r0, [pc, #332]	@ (8110f58 <_vfiprintf_r+0x21c>)
 8110e0c:	f7ef fa68 	bl	81002e0 <memchr>
 8110e10:	9a04      	ldr	r2, [sp, #16]
 8110e12:	b9d8      	cbnz	r0, 8110e4c <_vfiprintf_r+0x110>
 8110e14:	06d1      	lsls	r1, r2, #27
 8110e16:	bf44      	itt	mi
 8110e18:	2320      	movmi	r3, #32
 8110e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8110e1e:	0713      	lsls	r3, r2, #28
 8110e20:	bf44      	itt	mi
 8110e22:	232b      	movmi	r3, #43	@ 0x2b
 8110e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8110e28:	f89a 3000 	ldrb.w	r3, [sl]
 8110e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8110e2e:	d015      	beq.n	8110e5c <_vfiprintf_r+0x120>
 8110e30:	9a07      	ldr	r2, [sp, #28]
 8110e32:	4654      	mov	r4, sl
 8110e34:	2000      	movs	r0, #0
 8110e36:	f04f 0c0a 	mov.w	ip, #10
 8110e3a:	4621      	mov	r1, r4
 8110e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8110e40:	3b30      	subs	r3, #48	@ 0x30
 8110e42:	2b09      	cmp	r3, #9
 8110e44:	d94b      	bls.n	8110ede <_vfiprintf_r+0x1a2>
 8110e46:	b1b0      	cbz	r0, 8110e76 <_vfiprintf_r+0x13a>
 8110e48:	9207      	str	r2, [sp, #28]
 8110e4a:	e014      	b.n	8110e76 <_vfiprintf_r+0x13a>
 8110e4c:	eba0 0308 	sub.w	r3, r0, r8
 8110e50:	fa09 f303 	lsl.w	r3, r9, r3
 8110e54:	4313      	orrs	r3, r2
 8110e56:	9304      	str	r3, [sp, #16]
 8110e58:	46a2      	mov	sl, r4
 8110e5a:	e7d2      	b.n	8110e02 <_vfiprintf_r+0xc6>
 8110e5c:	9b03      	ldr	r3, [sp, #12]
 8110e5e:	1d19      	adds	r1, r3, #4
 8110e60:	681b      	ldr	r3, [r3, #0]
 8110e62:	9103      	str	r1, [sp, #12]
 8110e64:	2b00      	cmp	r3, #0
 8110e66:	bfbb      	ittet	lt
 8110e68:	425b      	neglt	r3, r3
 8110e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8110e6e:	9307      	strge	r3, [sp, #28]
 8110e70:	9307      	strlt	r3, [sp, #28]
 8110e72:	bfb8      	it	lt
 8110e74:	9204      	strlt	r2, [sp, #16]
 8110e76:	7823      	ldrb	r3, [r4, #0]
 8110e78:	2b2e      	cmp	r3, #46	@ 0x2e
 8110e7a:	d10a      	bne.n	8110e92 <_vfiprintf_r+0x156>
 8110e7c:	7863      	ldrb	r3, [r4, #1]
 8110e7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8110e80:	d132      	bne.n	8110ee8 <_vfiprintf_r+0x1ac>
 8110e82:	9b03      	ldr	r3, [sp, #12]
 8110e84:	1d1a      	adds	r2, r3, #4
 8110e86:	681b      	ldr	r3, [r3, #0]
 8110e88:	9203      	str	r2, [sp, #12]
 8110e8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8110e8e:	3402      	adds	r4, #2
 8110e90:	9305      	str	r3, [sp, #20]
 8110e92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8110f68 <_vfiprintf_r+0x22c>
 8110e96:	7821      	ldrb	r1, [r4, #0]
 8110e98:	2203      	movs	r2, #3
 8110e9a:	4650      	mov	r0, sl
 8110e9c:	f7ef fa20 	bl	81002e0 <memchr>
 8110ea0:	b138      	cbz	r0, 8110eb2 <_vfiprintf_r+0x176>
 8110ea2:	9b04      	ldr	r3, [sp, #16]
 8110ea4:	eba0 000a 	sub.w	r0, r0, sl
 8110ea8:	2240      	movs	r2, #64	@ 0x40
 8110eaa:	4082      	lsls	r2, r0
 8110eac:	4313      	orrs	r3, r2
 8110eae:	3401      	adds	r4, #1
 8110eb0:	9304      	str	r3, [sp, #16]
 8110eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8110eb6:	4829      	ldr	r0, [pc, #164]	@ (8110f5c <_vfiprintf_r+0x220>)
 8110eb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8110ebc:	2206      	movs	r2, #6
 8110ebe:	f7ef fa0f 	bl	81002e0 <memchr>
 8110ec2:	2800      	cmp	r0, #0
 8110ec4:	d03f      	beq.n	8110f46 <_vfiprintf_r+0x20a>
 8110ec6:	4b26      	ldr	r3, [pc, #152]	@ (8110f60 <_vfiprintf_r+0x224>)
 8110ec8:	bb1b      	cbnz	r3, 8110f12 <_vfiprintf_r+0x1d6>
 8110eca:	9b03      	ldr	r3, [sp, #12]
 8110ecc:	3307      	adds	r3, #7
 8110ece:	f023 0307 	bic.w	r3, r3, #7
 8110ed2:	3308      	adds	r3, #8
 8110ed4:	9303      	str	r3, [sp, #12]
 8110ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110ed8:	443b      	add	r3, r7
 8110eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8110edc:	e76a      	b.n	8110db4 <_vfiprintf_r+0x78>
 8110ede:	fb0c 3202 	mla	r2, ip, r2, r3
 8110ee2:	460c      	mov	r4, r1
 8110ee4:	2001      	movs	r0, #1
 8110ee6:	e7a8      	b.n	8110e3a <_vfiprintf_r+0xfe>
 8110ee8:	2300      	movs	r3, #0
 8110eea:	3401      	adds	r4, #1
 8110eec:	9305      	str	r3, [sp, #20]
 8110eee:	4619      	mov	r1, r3
 8110ef0:	f04f 0c0a 	mov.w	ip, #10
 8110ef4:	4620      	mov	r0, r4
 8110ef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8110efa:	3a30      	subs	r2, #48	@ 0x30
 8110efc:	2a09      	cmp	r2, #9
 8110efe:	d903      	bls.n	8110f08 <_vfiprintf_r+0x1cc>
 8110f00:	2b00      	cmp	r3, #0
 8110f02:	d0c6      	beq.n	8110e92 <_vfiprintf_r+0x156>
 8110f04:	9105      	str	r1, [sp, #20]
 8110f06:	e7c4      	b.n	8110e92 <_vfiprintf_r+0x156>
 8110f08:	fb0c 2101 	mla	r1, ip, r1, r2
 8110f0c:	4604      	mov	r4, r0
 8110f0e:	2301      	movs	r3, #1
 8110f10:	e7f0      	b.n	8110ef4 <_vfiprintf_r+0x1b8>
 8110f12:	ab03      	add	r3, sp, #12
 8110f14:	9300      	str	r3, [sp, #0]
 8110f16:	462a      	mov	r2, r5
 8110f18:	4b12      	ldr	r3, [pc, #72]	@ (8110f64 <_vfiprintf_r+0x228>)
 8110f1a:	a904      	add	r1, sp, #16
 8110f1c:	4630      	mov	r0, r6
 8110f1e:	f7fd fda3 	bl	810ea68 <_printf_float>
 8110f22:	4607      	mov	r7, r0
 8110f24:	1c78      	adds	r0, r7, #1
 8110f26:	d1d6      	bne.n	8110ed6 <_vfiprintf_r+0x19a>
 8110f28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8110f2a:	07d9      	lsls	r1, r3, #31
 8110f2c:	d405      	bmi.n	8110f3a <_vfiprintf_r+0x1fe>
 8110f2e:	89ab      	ldrh	r3, [r5, #12]
 8110f30:	059a      	lsls	r2, r3, #22
 8110f32:	d402      	bmi.n	8110f3a <_vfiprintf_r+0x1fe>
 8110f34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8110f36:	f7fe fca9 	bl	810f88c <__retarget_lock_release_recursive>
 8110f3a:	89ab      	ldrh	r3, [r5, #12]
 8110f3c:	065b      	lsls	r3, r3, #25
 8110f3e:	f53f af1f 	bmi.w	8110d80 <_vfiprintf_r+0x44>
 8110f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8110f44:	e71e      	b.n	8110d84 <_vfiprintf_r+0x48>
 8110f46:	ab03      	add	r3, sp, #12
 8110f48:	9300      	str	r3, [sp, #0]
 8110f4a:	462a      	mov	r2, r5
 8110f4c:	4b05      	ldr	r3, [pc, #20]	@ (8110f64 <_vfiprintf_r+0x228>)
 8110f4e:	a904      	add	r1, sp, #16
 8110f50:	4630      	mov	r0, r6
 8110f52:	f7fe f821 	bl	810ef98 <_printf_i>
 8110f56:	e7e4      	b.n	8110f22 <_vfiprintf_r+0x1e6>
 8110f58:	081117f0 	.word	0x081117f0
 8110f5c:	081117fa 	.word	0x081117fa
 8110f60:	0810ea69 	.word	0x0810ea69
 8110f64:	08110d17 	.word	0x08110d17
 8110f68:	081117f6 	.word	0x081117f6

08110f6c <__sflush_r>:
 8110f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8110f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110f74:	0716      	lsls	r6, r2, #28
 8110f76:	4605      	mov	r5, r0
 8110f78:	460c      	mov	r4, r1
 8110f7a:	d454      	bmi.n	8111026 <__sflush_r+0xba>
 8110f7c:	684b      	ldr	r3, [r1, #4]
 8110f7e:	2b00      	cmp	r3, #0
 8110f80:	dc02      	bgt.n	8110f88 <__sflush_r+0x1c>
 8110f82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8110f84:	2b00      	cmp	r3, #0
 8110f86:	dd48      	ble.n	811101a <__sflush_r+0xae>
 8110f88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8110f8a:	2e00      	cmp	r6, #0
 8110f8c:	d045      	beq.n	811101a <__sflush_r+0xae>
 8110f8e:	2300      	movs	r3, #0
 8110f90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8110f94:	682f      	ldr	r7, [r5, #0]
 8110f96:	6a21      	ldr	r1, [r4, #32]
 8110f98:	602b      	str	r3, [r5, #0]
 8110f9a:	d030      	beq.n	8110ffe <__sflush_r+0x92>
 8110f9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8110f9e:	89a3      	ldrh	r3, [r4, #12]
 8110fa0:	0759      	lsls	r1, r3, #29
 8110fa2:	d505      	bpl.n	8110fb0 <__sflush_r+0x44>
 8110fa4:	6863      	ldr	r3, [r4, #4]
 8110fa6:	1ad2      	subs	r2, r2, r3
 8110fa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8110faa:	b10b      	cbz	r3, 8110fb0 <__sflush_r+0x44>
 8110fac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8110fae:	1ad2      	subs	r2, r2, r3
 8110fb0:	2300      	movs	r3, #0
 8110fb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8110fb4:	6a21      	ldr	r1, [r4, #32]
 8110fb6:	4628      	mov	r0, r5
 8110fb8:	47b0      	blx	r6
 8110fba:	1c43      	adds	r3, r0, #1
 8110fbc:	89a3      	ldrh	r3, [r4, #12]
 8110fbe:	d106      	bne.n	8110fce <__sflush_r+0x62>
 8110fc0:	6829      	ldr	r1, [r5, #0]
 8110fc2:	291d      	cmp	r1, #29
 8110fc4:	d82b      	bhi.n	811101e <__sflush_r+0xb2>
 8110fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8111070 <__sflush_r+0x104>)
 8110fc8:	40ca      	lsrs	r2, r1
 8110fca:	07d6      	lsls	r6, r2, #31
 8110fcc:	d527      	bpl.n	811101e <__sflush_r+0xb2>
 8110fce:	2200      	movs	r2, #0
 8110fd0:	6062      	str	r2, [r4, #4]
 8110fd2:	04d9      	lsls	r1, r3, #19
 8110fd4:	6922      	ldr	r2, [r4, #16]
 8110fd6:	6022      	str	r2, [r4, #0]
 8110fd8:	d504      	bpl.n	8110fe4 <__sflush_r+0x78>
 8110fda:	1c42      	adds	r2, r0, #1
 8110fdc:	d101      	bne.n	8110fe2 <__sflush_r+0x76>
 8110fde:	682b      	ldr	r3, [r5, #0]
 8110fe0:	b903      	cbnz	r3, 8110fe4 <__sflush_r+0x78>
 8110fe2:	6560      	str	r0, [r4, #84]	@ 0x54
 8110fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8110fe6:	602f      	str	r7, [r5, #0]
 8110fe8:	b1b9      	cbz	r1, 811101a <__sflush_r+0xae>
 8110fea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8110fee:	4299      	cmp	r1, r3
 8110ff0:	d002      	beq.n	8110ff8 <__sflush_r+0x8c>
 8110ff2:	4628      	mov	r0, r5
 8110ff4:	f7ff fab4 	bl	8110560 <_free_r>
 8110ff8:	2300      	movs	r3, #0
 8110ffa:	6363      	str	r3, [r4, #52]	@ 0x34
 8110ffc:	e00d      	b.n	811101a <__sflush_r+0xae>
 8110ffe:	2301      	movs	r3, #1
 8111000:	4628      	mov	r0, r5
 8111002:	47b0      	blx	r6
 8111004:	4602      	mov	r2, r0
 8111006:	1c50      	adds	r0, r2, #1
 8111008:	d1c9      	bne.n	8110f9e <__sflush_r+0x32>
 811100a:	682b      	ldr	r3, [r5, #0]
 811100c:	2b00      	cmp	r3, #0
 811100e:	d0c6      	beq.n	8110f9e <__sflush_r+0x32>
 8111010:	2b1d      	cmp	r3, #29
 8111012:	d001      	beq.n	8111018 <__sflush_r+0xac>
 8111014:	2b16      	cmp	r3, #22
 8111016:	d11e      	bne.n	8111056 <__sflush_r+0xea>
 8111018:	602f      	str	r7, [r5, #0]
 811101a:	2000      	movs	r0, #0
 811101c:	e022      	b.n	8111064 <__sflush_r+0xf8>
 811101e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8111022:	b21b      	sxth	r3, r3
 8111024:	e01b      	b.n	811105e <__sflush_r+0xf2>
 8111026:	690f      	ldr	r7, [r1, #16]
 8111028:	2f00      	cmp	r7, #0
 811102a:	d0f6      	beq.n	811101a <__sflush_r+0xae>
 811102c:	0793      	lsls	r3, r2, #30
 811102e:	680e      	ldr	r6, [r1, #0]
 8111030:	bf08      	it	eq
 8111032:	694b      	ldreq	r3, [r1, #20]
 8111034:	600f      	str	r7, [r1, #0]
 8111036:	bf18      	it	ne
 8111038:	2300      	movne	r3, #0
 811103a:	eba6 0807 	sub.w	r8, r6, r7
 811103e:	608b      	str	r3, [r1, #8]
 8111040:	f1b8 0f00 	cmp.w	r8, #0
 8111044:	dde9      	ble.n	811101a <__sflush_r+0xae>
 8111046:	6a21      	ldr	r1, [r4, #32]
 8111048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 811104a:	4643      	mov	r3, r8
 811104c:	463a      	mov	r2, r7
 811104e:	4628      	mov	r0, r5
 8111050:	47b0      	blx	r6
 8111052:	2800      	cmp	r0, #0
 8111054:	dc08      	bgt.n	8111068 <__sflush_r+0xfc>
 8111056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811105a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811105e:	81a3      	strh	r3, [r4, #12]
 8111060:	f04f 30ff 	mov.w	r0, #4294967295
 8111064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8111068:	4407      	add	r7, r0
 811106a:	eba8 0800 	sub.w	r8, r8, r0
 811106e:	e7e7      	b.n	8111040 <__sflush_r+0xd4>
 8111070:	20400001 	.word	0x20400001

08111074 <_fflush_r>:
 8111074:	b538      	push	{r3, r4, r5, lr}
 8111076:	690b      	ldr	r3, [r1, #16]
 8111078:	4605      	mov	r5, r0
 811107a:	460c      	mov	r4, r1
 811107c:	b913      	cbnz	r3, 8111084 <_fflush_r+0x10>
 811107e:	2500      	movs	r5, #0
 8111080:	4628      	mov	r0, r5
 8111082:	bd38      	pop	{r3, r4, r5, pc}
 8111084:	b118      	cbz	r0, 811108e <_fflush_r+0x1a>
 8111086:	6a03      	ldr	r3, [r0, #32]
 8111088:	b90b      	cbnz	r3, 811108e <_fflush_r+0x1a>
 811108a:	f7fe f92f 	bl	810f2ec <__sinit>
 811108e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8111092:	2b00      	cmp	r3, #0
 8111094:	d0f3      	beq.n	811107e <_fflush_r+0xa>
 8111096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8111098:	07d0      	lsls	r0, r2, #31
 811109a:	d404      	bmi.n	81110a6 <_fflush_r+0x32>
 811109c:	0599      	lsls	r1, r3, #22
 811109e:	d402      	bmi.n	81110a6 <_fflush_r+0x32>
 81110a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81110a2:	f7fe fbf2 	bl	810f88a <__retarget_lock_acquire_recursive>
 81110a6:	4628      	mov	r0, r5
 81110a8:	4621      	mov	r1, r4
 81110aa:	f7ff ff5f 	bl	8110f6c <__sflush_r>
 81110ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81110b0:	07da      	lsls	r2, r3, #31
 81110b2:	4605      	mov	r5, r0
 81110b4:	d4e4      	bmi.n	8111080 <_fflush_r+0xc>
 81110b6:	89a3      	ldrh	r3, [r4, #12]
 81110b8:	059b      	lsls	r3, r3, #22
 81110ba:	d4e1      	bmi.n	8111080 <_fflush_r+0xc>
 81110bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81110be:	f7fe fbe5 	bl	810f88c <__retarget_lock_release_recursive>
 81110c2:	e7dd      	b.n	8111080 <_fflush_r+0xc>

081110c4 <__swhatbuf_r>:
 81110c4:	b570      	push	{r4, r5, r6, lr}
 81110c6:	460c      	mov	r4, r1
 81110c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81110cc:	2900      	cmp	r1, #0
 81110ce:	b096      	sub	sp, #88	@ 0x58
 81110d0:	4615      	mov	r5, r2
 81110d2:	461e      	mov	r6, r3
 81110d4:	da0d      	bge.n	81110f2 <__swhatbuf_r+0x2e>
 81110d6:	89a3      	ldrh	r3, [r4, #12]
 81110d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 81110dc:	f04f 0100 	mov.w	r1, #0
 81110e0:	bf14      	ite	ne
 81110e2:	2340      	movne	r3, #64	@ 0x40
 81110e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 81110e8:	2000      	movs	r0, #0
 81110ea:	6031      	str	r1, [r6, #0]
 81110ec:	602b      	str	r3, [r5, #0]
 81110ee:	b016      	add	sp, #88	@ 0x58
 81110f0:	bd70      	pop	{r4, r5, r6, pc}
 81110f2:	466a      	mov	r2, sp
 81110f4:	f000 f87c 	bl	81111f0 <_fstat_r>
 81110f8:	2800      	cmp	r0, #0
 81110fa:	dbec      	blt.n	81110d6 <__swhatbuf_r+0x12>
 81110fc:	9901      	ldr	r1, [sp, #4]
 81110fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8111102:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8111106:	4259      	negs	r1, r3
 8111108:	4159      	adcs	r1, r3
 811110a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 811110e:	e7eb      	b.n	81110e8 <__swhatbuf_r+0x24>

08111110 <__smakebuf_r>:
 8111110:	898b      	ldrh	r3, [r1, #12]
 8111112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8111114:	079d      	lsls	r5, r3, #30
 8111116:	4606      	mov	r6, r0
 8111118:	460c      	mov	r4, r1
 811111a:	d507      	bpl.n	811112c <__smakebuf_r+0x1c>
 811111c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8111120:	6023      	str	r3, [r4, #0]
 8111122:	6123      	str	r3, [r4, #16]
 8111124:	2301      	movs	r3, #1
 8111126:	6163      	str	r3, [r4, #20]
 8111128:	b003      	add	sp, #12
 811112a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 811112c:	ab01      	add	r3, sp, #4
 811112e:	466a      	mov	r2, sp
 8111130:	f7ff ffc8 	bl	81110c4 <__swhatbuf_r>
 8111134:	9f00      	ldr	r7, [sp, #0]
 8111136:	4605      	mov	r5, r0
 8111138:	4639      	mov	r1, r7
 811113a:	4630      	mov	r0, r6
 811113c:	f7fd fb68 	bl	810e810 <_malloc_r>
 8111140:	b948      	cbnz	r0, 8111156 <__smakebuf_r+0x46>
 8111142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8111146:	059a      	lsls	r2, r3, #22
 8111148:	d4ee      	bmi.n	8111128 <__smakebuf_r+0x18>
 811114a:	f023 0303 	bic.w	r3, r3, #3
 811114e:	f043 0302 	orr.w	r3, r3, #2
 8111152:	81a3      	strh	r3, [r4, #12]
 8111154:	e7e2      	b.n	811111c <__smakebuf_r+0xc>
 8111156:	89a3      	ldrh	r3, [r4, #12]
 8111158:	6020      	str	r0, [r4, #0]
 811115a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811115e:	81a3      	strh	r3, [r4, #12]
 8111160:	9b01      	ldr	r3, [sp, #4]
 8111162:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8111166:	b15b      	cbz	r3, 8111180 <__smakebuf_r+0x70>
 8111168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811116c:	4630      	mov	r0, r6
 811116e:	f000 f851 	bl	8111214 <_isatty_r>
 8111172:	b128      	cbz	r0, 8111180 <__smakebuf_r+0x70>
 8111174:	89a3      	ldrh	r3, [r4, #12]
 8111176:	f023 0303 	bic.w	r3, r3, #3
 811117a:	f043 0301 	orr.w	r3, r3, #1
 811117e:	81a3      	strh	r3, [r4, #12]
 8111180:	89a3      	ldrh	r3, [r4, #12]
 8111182:	431d      	orrs	r5, r3
 8111184:	81a5      	strh	r5, [r4, #12]
 8111186:	e7cf      	b.n	8111128 <__smakebuf_r+0x18>

08111188 <_putc_r>:
 8111188:	b570      	push	{r4, r5, r6, lr}
 811118a:	460d      	mov	r5, r1
 811118c:	4614      	mov	r4, r2
 811118e:	4606      	mov	r6, r0
 8111190:	b118      	cbz	r0, 811119a <_putc_r+0x12>
 8111192:	6a03      	ldr	r3, [r0, #32]
 8111194:	b90b      	cbnz	r3, 811119a <_putc_r+0x12>
 8111196:	f7fe f8a9 	bl	810f2ec <__sinit>
 811119a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 811119c:	07d8      	lsls	r0, r3, #31
 811119e:	d405      	bmi.n	81111ac <_putc_r+0x24>
 81111a0:	89a3      	ldrh	r3, [r4, #12]
 81111a2:	0599      	lsls	r1, r3, #22
 81111a4:	d402      	bmi.n	81111ac <_putc_r+0x24>
 81111a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81111a8:	f7fe fb6f 	bl	810f88a <__retarget_lock_acquire_recursive>
 81111ac:	68a3      	ldr	r3, [r4, #8]
 81111ae:	3b01      	subs	r3, #1
 81111b0:	2b00      	cmp	r3, #0
 81111b2:	60a3      	str	r3, [r4, #8]
 81111b4:	da05      	bge.n	81111c2 <_putc_r+0x3a>
 81111b6:	69a2      	ldr	r2, [r4, #24]
 81111b8:	4293      	cmp	r3, r2
 81111ba:	db12      	blt.n	81111e2 <_putc_r+0x5a>
 81111bc:	b2eb      	uxtb	r3, r5
 81111be:	2b0a      	cmp	r3, #10
 81111c0:	d00f      	beq.n	81111e2 <_putc_r+0x5a>
 81111c2:	6823      	ldr	r3, [r4, #0]
 81111c4:	1c5a      	adds	r2, r3, #1
 81111c6:	6022      	str	r2, [r4, #0]
 81111c8:	701d      	strb	r5, [r3, #0]
 81111ca:	b2ed      	uxtb	r5, r5
 81111cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81111ce:	07da      	lsls	r2, r3, #31
 81111d0:	d405      	bmi.n	81111de <_putc_r+0x56>
 81111d2:	89a3      	ldrh	r3, [r4, #12]
 81111d4:	059b      	lsls	r3, r3, #22
 81111d6:	d402      	bmi.n	81111de <_putc_r+0x56>
 81111d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81111da:	f7fe fb57 	bl	810f88c <__retarget_lock_release_recursive>
 81111de:	4628      	mov	r0, r5
 81111e0:	bd70      	pop	{r4, r5, r6, pc}
 81111e2:	4629      	mov	r1, r5
 81111e4:	4622      	mov	r2, r4
 81111e6:	4630      	mov	r0, r6
 81111e8:	f7fe f971 	bl	810f4ce <__swbuf_r>
 81111ec:	4605      	mov	r5, r0
 81111ee:	e7ed      	b.n	81111cc <_putc_r+0x44>

081111f0 <_fstat_r>:
 81111f0:	b538      	push	{r3, r4, r5, lr}
 81111f2:	4d07      	ldr	r5, [pc, #28]	@ (8111210 <_fstat_r+0x20>)
 81111f4:	2300      	movs	r3, #0
 81111f6:	4604      	mov	r4, r0
 81111f8:	4608      	mov	r0, r1
 81111fa:	4611      	mov	r1, r2
 81111fc:	602b      	str	r3, [r5, #0]
 81111fe:	f7f4 faf9 	bl	81057f4 <_fstat>
 8111202:	1c43      	adds	r3, r0, #1
 8111204:	d102      	bne.n	811120c <_fstat_r+0x1c>
 8111206:	682b      	ldr	r3, [r5, #0]
 8111208:	b103      	cbz	r3, 811120c <_fstat_r+0x1c>
 811120a:	6023      	str	r3, [r4, #0]
 811120c:	bd38      	pop	{r3, r4, r5, pc}
 811120e:	bf00      	nop
 8111210:	10005150 	.word	0x10005150

08111214 <_isatty_r>:
 8111214:	b538      	push	{r3, r4, r5, lr}
 8111216:	4d06      	ldr	r5, [pc, #24]	@ (8111230 <_isatty_r+0x1c>)
 8111218:	2300      	movs	r3, #0
 811121a:	4604      	mov	r4, r0
 811121c:	4608      	mov	r0, r1
 811121e:	602b      	str	r3, [r5, #0]
 8111220:	f7f4 faf8 	bl	8105814 <_isatty>
 8111224:	1c43      	adds	r3, r0, #1
 8111226:	d102      	bne.n	811122e <_isatty_r+0x1a>
 8111228:	682b      	ldr	r3, [r5, #0]
 811122a:	b103      	cbz	r3, 811122e <_isatty_r+0x1a>
 811122c:	6023      	str	r3, [r4, #0]
 811122e:	bd38      	pop	{r3, r4, r5, pc}
 8111230:	10005150 	.word	0x10005150

08111234 <__assert_func>:
 8111234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8111236:	4614      	mov	r4, r2
 8111238:	461a      	mov	r2, r3
 811123a:	4b09      	ldr	r3, [pc, #36]	@ (8111260 <__assert_func+0x2c>)
 811123c:	681b      	ldr	r3, [r3, #0]
 811123e:	4605      	mov	r5, r0
 8111240:	68d8      	ldr	r0, [r3, #12]
 8111242:	b14c      	cbz	r4, 8111258 <__assert_func+0x24>
 8111244:	4b07      	ldr	r3, [pc, #28]	@ (8111264 <__assert_func+0x30>)
 8111246:	9100      	str	r1, [sp, #0]
 8111248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 811124c:	4906      	ldr	r1, [pc, #24]	@ (8111268 <__assert_func+0x34>)
 811124e:	462b      	mov	r3, r5
 8111250:	f000 f842 	bl	81112d8 <fiprintf>
 8111254:	f7fd faa2 	bl	810e79c <abort>
 8111258:	4b04      	ldr	r3, [pc, #16]	@ (811126c <__assert_func+0x38>)
 811125a:	461c      	mov	r4, r3
 811125c:	e7f3      	b.n	8111246 <__assert_func+0x12>
 811125e:	bf00      	nop
 8111260:	10000020 	.word	0x10000020
 8111264:	0811180b 	.word	0x0811180b
 8111268:	08111818 	.word	0x08111818
 811126c:	08111846 	.word	0x08111846

08111270 <_calloc_r>:
 8111270:	b570      	push	{r4, r5, r6, lr}
 8111272:	fba1 5402 	umull	r5, r4, r1, r2
 8111276:	b934      	cbnz	r4, 8111286 <_calloc_r+0x16>
 8111278:	4629      	mov	r1, r5
 811127a:	f7fd fac9 	bl	810e810 <_malloc_r>
 811127e:	4606      	mov	r6, r0
 8111280:	b928      	cbnz	r0, 811128e <_calloc_r+0x1e>
 8111282:	4630      	mov	r0, r6
 8111284:	bd70      	pop	{r4, r5, r6, pc}
 8111286:	220c      	movs	r2, #12
 8111288:	6002      	str	r2, [r0, #0]
 811128a:	2600      	movs	r6, #0
 811128c:	e7f9      	b.n	8111282 <_calloc_r+0x12>
 811128e:	462a      	mov	r2, r5
 8111290:	4621      	mov	r1, r4
 8111292:	f7fe f9cb 	bl	810f62c <memset>
 8111296:	e7f4      	b.n	8111282 <_calloc_r+0x12>

08111298 <__ascii_mbtowc>:
 8111298:	b082      	sub	sp, #8
 811129a:	b901      	cbnz	r1, 811129e <__ascii_mbtowc+0x6>
 811129c:	a901      	add	r1, sp, #4
 811129e:	b142      	cbz	r2, 81112b2 <__ascii_mbtowc+0x1a>
 81112a0:	b14b      	cbz	r3, 81112b6 <__ascii_mbtowc+0x1e>
 81112a2:	7813      	ldrb	r3, [r2, #0]
 81112a4:	600b      	str	r3, [r1, #0]
 81112a6:	7812      	ldrb	r2, [r2, #0]
 81112a8:	1e10      	subs	r0, r2, #0
 81112aa:	bf18      	it	ne
 81112ac:	2001      	movne	r0, #1
 81112ae:	b002      	add	sp, #8
 81112b0:	4770      	bx	lr
 81112b2:	4610      	mov	r0, r2
 81112b4:	e7fb      	b.n	81112ae <__ascii_mbtowc+0x16>
 81112b6:	f06f 0001 	mvn.w	r0, #1
 81112ba:	e7f8      	b.n	81112ae <__ascii_mbtowc+0x16>

081112bc <__ascii_wctomb>:
 81112bc:	4603      	mov	r3, r0
 81112be:	4608      	mov	r0, r1
 81112c0:	b141      	cbz	r1, 81112d4 <__ascii_wctomb+0x18>
 81112c2:	2aff      	cmp	r2, #255	@ 0xff
 81112c4:	d904      	bls.n	81112d0 <__ascii_wctomb+0x14>
 81112c6:	228a      	movs	r2, #138	@ 0x8a
 81112c8:	601a      	str	r2, [r3, #0]
 81112ca:	f04f 30ff 	mov.w	r0, #4294967295
 81112ce:	4770      	bx	lr
 81112d0:	700a      	strb	r2, [r1, #0]
 81112d2:	2001      	movs	r0, #1
 81112d4:	4770      	bx	lr
	...

081112d8 <fiprintf>:
 81112d8:	b40e      	push	{r1, r2, r3}
 81112da:	b503      	push	{r0, r1, lr}
 81112dc:	4601      	mov	r1, r0
 81112de:	ab03      	add	r3, sp, #12
 81112e0:	4805      	ldr	r0, [pc, #20]	@ (81112f8 <fiprintf+0x20>)
 81112e2:	f853 2b04 	ldr.w	r2, [r3], #4
 81112e6:	6800      	ldr	r0, [r0, #0]
 81112e8:	9301      	str	r3, [sp, #4]
 81112ea:	f7ff fd27 	bl	8110d3c <_vfiprintf_r>
 81112ee:	b002      	add	sp, #8
 81112f0:	f85d eb04 	ldr.w	lr, [sp], #4
 81112f4:	b003      	add	sp, #12
 81112f6:	4770      	bx	lr
 81112f8:	10000020 	.word	0x10000020

081112fc <_init>:
 81112fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81112fe:	bf00      	nop
 8111300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8111302:	bc08      	pop	{r3}
 8111304:	469e      	mov	lr, r3
 8111306:	4770      	bx	lr

08111308 <_fini>:
 8111308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811130a:	bf00      	nop
 811130c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811130e:	bc08      	pop	{r3}
 8111310:	469e      	mov	lr, r3
 8111312:	4770      	bx	lr
