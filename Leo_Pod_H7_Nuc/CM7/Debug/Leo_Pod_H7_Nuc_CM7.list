
Leo_Pod_H7_Nuc_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f9c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002234  08002234  00003234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800225c  0800225c  000041dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800225c  0800225c  000041dc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800225c  0800225c  000041dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800225c  0800225c  0000325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002260  08002260  00003260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08002264  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAM_D3       000001cc  24000010  08002274  00004010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000028  240001dc  08002440  000041dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  24000204  08002440  00004204  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000041dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c03  00000000  00000000  0000420a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001880  00000000  00000000  0000ce0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  0000e690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000057a  00000000  00000000  0000ee08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003881a  00000000  00000000  0000f382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000098c4  00000000  00000000  00047b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0017372a  00000000  00000000  00051460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c4b8a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c2c  00000000  00000000  001c4bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001c67fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001dc 	.word	0x240001dc
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800221c 	.word	0x0800221c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001e0 	.word	0x240001e0
 80002d4:	0800221c 	.word	0x0800221c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000444:	bf00      	nop
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <ExitRun0Mode+0x2c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	58024800 	.word	0x58024800

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800046a:	4b45      	ldr	r3, [pc, #276]	@ (8000580 <main+0x11c>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000472:	2b00      	cmp	r3, #0
 8000474:	d11b      	bne.n	80004ae <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000476:	f3bf 8f4f 	dsb	sy
}
 800047a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800047c:	f3bf 8f6f 	isb	sy
}
 8000480:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000482:	4b3f      	ldr	r3, [pc, #252]	@ (8000580 <main+0x11c>)
 8000484:	2200      	movs	r2, #0
 8000486:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800048a:	f3bf 8f4f 	dsb	sy
}
 800048e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000490:	f3bf 8f6f 	isb	sy
}
 8000494:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000496:	4b3a      	ldr	r3, [pc, #232]	@ (8000580 <main+0x11c>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a39      	ldr	r2, [pc, #228]	@ (8000580 <main+0x11c>)
 800049c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004a2:	f3bf 8f4f 	dsb	sy
}
 80004a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a8:	f3bf 8f6f 	isb	sy
}
 80004ac:	e000      	b.n	80004b0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004ae:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004b0:	4b33      	ldr	r3, [pc, #204]	@ (8000580 <main+0x11c>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d138      	bne.n	800052e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004bc:	4b30      	ldr	r3, [pc, #192]	@ (8000580 <main+0x11c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004c4:	f3bf 8f4f 	dsb	sy
}
 80004c8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000580 <main+0x11c>)
 80004cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004d0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	0b5b      	lsrs	r3, r3, #13
 80004d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004da:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	08db      	lsrs	r3, r3, #3
 80004e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004e4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	015a      	lsls	r2, r3, #5
 80004ea:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80004ee:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f4:	4922      	ldr	r1, [pc, #136]	@ (8000580 <main+0x11c>)
 80004f6:	4313      	orrs	r3, r2
 80004f8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	1e5a      	subs	r2, r3, #1
 8000500:	607a      	str	r2, [r7, #4]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d1ef      	bne.n	80004e6 <main+0x82>
    } while(sets-- != 0U);
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	1e5a      	subs	r2, r3, #1
 800050a:	60ba      	str	r2, [r7, #8]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1e5      	bne.n	80004dc <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000510:	f3bf 8f4f 	dsb	sy
}
 8000514:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000516:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <main+0x11c>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a19      	ldr	r2, [pc, #100]	@ (8000580 <main+0x11c>)
 800051c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000520:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000522:	f3bf 8f4f 	dsb	sy
}
 8000526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000528:	f3bf 8f6f 	isb	sy
}
 800052c:	e000      	b.n	8000530 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800052e:	bf00      	nop
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 f9e2 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f82a 	bl	800058c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <main+0x120>)
 800053a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800053e:	4a11      	ldr	r2, [pc, #68]	@ (8000584 <main+0x120>)
 8000540:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000548:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <main+0x120>)
 800054a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800054e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000556:	2000      	movs	r0, #0
 8000558:	f000 fd84 	bl	8001064 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800055c:	2100      	movs	r1, #0
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fd9a 	bl	8001098 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */

/* USER CODE END Boot_Mode_Sequence_2 */
  /* Resource Manager Utility initialisation ---------------------------------*/
  MX_RESMGR_UTILITY_Init();
 8000564:	f000 f8c8 	bl	80006f8 <MX_RESMGR_UTILITY_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 f88c 	bl	8000684 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 800056c:	2101      	movs	r1, #1
 800056e:	4806      	ldr	r0, [pc, #24]	@ (8000588 <main+0x124>)
 8000570:	f000 fd5d 	bl	800102e <HAL_GPIO_TogglePin>
	    HAL_Delay(1000);
 8000574:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000578:	f000 fa50 	bl	8000a1c <HAL_Delay>
	    HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 800057c:	bf00      	nop
 800057e:	e7f5      	b.n	800056c <main+0x108>
 8000580:	e000ed00 	.word	0xe000ed00
 8000584:	58024400 	.word	0x58024400
 8000588:	58020400 	.word	0x58020400

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b09c      	sub	sp, #112	@ 0x70
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000596:	224c      	movs	r2, #76	@ 0x4c
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fe12 	bl	80021c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2220      	movs	r2, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fe0c 	bl	80021c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005ac:	2004      	movs	r0, #4
 80005ae:	f000 fd87 	bl	80010c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	4b31      	ldr	r3, [pc, #196]	@ (800067c <SystemClock_Config+0xf0>)
 80005b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005ba:	4a30      	ldr	r2, [pc, #192]	@ (800067c <SystemClock_Config+0xf0>)
 80005bc:	f023 0301 	bic.w	r3, r3, #1
 80005c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80005c2:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <SystemClock_Config+0xf0>)
 80005c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000680 <SystemClock_Config+0xf4>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a2b      	ldr	r2, [pc, #172]	@ (8000680 <SystemClock_Config+0xf4>)
 80005d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b29      	ldr	r3, [pc, #164]	@ (8000680 <SystemClock_Config+0xf4>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005e4:	bf00      	nop
 80005e6:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <SystemClock_Config+0xf4>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005f2:	d1f8      	bne.n	80005e6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 80005f4:	2310      	movs	r3, #16
 80005f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80005f8:	2380      	movs	r3, #128	@ 0x80
 80005fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80005fc:	2320      	movs	r3, #32
 80005fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000604:	2301      	movs	r3, #1
 8000606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 200;
 800060c:	23c8      	movs	r3, #200	@ 0xc8
 800060e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800061c:	2308      	movs	r3, #8
 800061e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000620:	2300      	movs	r3, #0
 8000622:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fda1 	bl	8001174 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000638:	f000 f858 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	233f      	movs	r3, #63	@ 0x3f
 800063e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2303      	movs	r3, #3
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000648:	2308      	movs	r3, #8
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800064c:	2340      	movs	r3, #64	@ 0x40
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000650:	2340      	movs	r3, #64	@ 0x40
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000658:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800065a:	2340      	movs	r3, #64	@ 0x40
 800065c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2102      	movs	r1, #2
 8000662:	4618      	mov	r0, r3
 8000664:	f001 f9e0 	bl	8001a28 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800066e:	f000 f83d 	bl	80006ec <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3770      	adds	r7, #112	@ 0x70
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	58000400 	.word	0x58000400
 8000680:	58024800 	.word	0x58024800

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_GPIO_Init+0x60>)
 800069a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069e:	4a11      	ldr	r2, [pc, #68]	@ (80006e4 <MX_GPIO_Init+0x60>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_GPIO_Init+0x60>)
 80006aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2101      	movs	r1, #1
 80006ba:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <MX_GPIO_Init+0x64>)
 80006bc:	f000 fc9e 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED1_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin;
 80006c0:	2301      	movs	r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(USER_LED1_GPIO_Port, &GPIO_InitStruct);
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4619      	mov	r1, r3
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_GPIO_Init+0x64>)
 80006d6:	f000 fae1 	bl	8000c9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	bf00      	nop
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	58024400 	.word	0x58024400
 80006e8:	58020400 	.word	0x58020400

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <MX_RESMGR_UTILITY_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* RESMGR_UTILITY init function */
void MX_RESMGR_UTILITY_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  if (ResMgr_Init(MX_RESMGR_UTILITY_SendMsg, MX_RESMGR_UTILITY_Callback) != RESMGR_OK)
 80006fc:	4905      	ldr	r1, [pc, #20]	@ (8000714 <MX_RESMGR_UTILITY_Init+0x1c>)
 80006fe:	4806      	ldr	r0, [pc, #24]	@ (8000718 <MX_RESMGR_UTILITY_Init+0x20>)
 8000700:	f001 fcc2 	bl	8002088 <ResMgr_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_RESMGR_UTILITY_Init+0x16>
  {
    Error_Handler();
 800070a:	f7ff ffef 	bl	80006ec <Error_Handler>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	08000769 	.word	0x08000769
 8000718:	0800071d 	.word	0x0800071d

0800071c <MX_RESMGR_UTILITY_SendMsg>:

/* Resource Manager send message function */
__weak void MX_RESMGR_UTILITY_SendMsg(uint32_t id, uint32_t msg)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 4 */
    switch (msg)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2b05      	cmp	r3, #5
 800072a:	d811      	bhi.n	8000750 <MX_RESMGR_UTILITY_SendMsg+0x34>
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	2b05      	cmp	r3, #5
 8000730:	d811      	bhi.n	8000756 <MX_RESMGR_UTILITY_SendMsg+0x3a>
 8000732:	a201      	add	r2, pc, #4	@ (adr r2, 8000738 <MX_RESMGR_UTILITY_SendMsg+0x1c>)
 8000734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000738:	08000757 	.word	0x08000757
 800073c:	08000757 	.word	0x08000757
 8000740:	08000757 	.word	0x08000757
 8000744:	08000757 	.word	0x08000757
 8000748:	08000757 	.word	0x08000757
 800074c:	08000757 	.word	0x08000757
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	2bff      	cmp	r3, #255	@ 0xff
 8000754:	d001      	beq.n	800075a <MX_RESMGR_UTILITY_SendMsg+0x3e>
        case RESMGR_MSG_REJECT:
            //User Code
            break;

        default:
            break;
 8000756:	bf00      	nop
 8000758:	e000      	b.n	800075c <MX_RESMGR_UTILITY_SendMsg+0x40>
            break;
 800075a:	bf00      	nop
    }
      /* USER CODE END 4 */

    return;
 800075c:	bf00      	nop
}
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <MX_RESMGR_UTILITY_Callback>:

/* Resource Manager callback function */
__weak void MX_RESMGR_UTILITY_Callback(uint32_t id, uint32_t msg)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 5 */
    switch (msg)
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	2b15      	cmp	r3, #21
 8000776:	d831      	bhi.n	80007dc <MX_RESMGR_UTILITY_Callback+0x74>
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	2b15      	cmp	r3, #21
 800077c:	d831      	bhi.n	80007e2 <MX_RESMGR_UTILITY_Callback+0x7a>
 800077e:	a201      	add	r2, pc, #4	@ (adr r2, 8000784 <MX_RESMGR_UTILITY_Callback+0x1c>)
 8000780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000784:	080007e3 	.word	0x080007e3
 8000788:	080007e3 	.word	0x080007e3
 800078c:	080007e3 	.word	0x080007e3
 8000790:	080007e3 	.word	0x080007e3
 8000794:	080007e3 	.word	0x080007e3
 8000798:	080007e3 	.word	0x080007e3
 800079c:	080007e3 	.word	0x080007e3
 80007a0:	080007e3 	.word	0x080007e3
 80007a4:	080007e3 	.word	0x080007e3
 80007a8:	080007e3 	.word	0x080007e3
 80007ac:	080007e3 	.word	0x080007e3
 80007b0:	080007e3 	.word	0x080007e3
 80007b4:	080007e3 	.word	0x080007e3
 80007b8:	080007e3 	.word	0x080007e3
 80007bc:	080007e3 	.word	0x080007e3
 80007c0:	080007e3 	.word	0x080007e3
 80007c4:	080007e3 	.word	0x080007e3
 80007c8:	080007e3 	.word	0x080007e3
 80007cc:	080007e3 	.word	0x080007e3
 80007d0:	080007e3 	.word	0x080007e3
 80007d4:	080007e3 	.word	0x080007e3
 80007d8:	080007e3 	.word	0x080007e3
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2bff      	cmp	r3, #255	@ 0xff
 80007e0:	d001      	beq.n	80007e6 <MX_RESMGR_UTILITY_Callback+0x7e>
        case RESMGR_MSG_REJECTED:
            //User Code
            break;

        default:
            break;
 80007e2:	bf00      	nop
 80007e4:	e000      	b.n	80007e8 <MX_RESMGR_UTILITY_Callback+0x80>
            break;
 80007e6:	bf00      	nop
    }
      /* USER CODE END 5 */

    return;
 80007e8:	bf00      	nop
}
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <HAL_MspInit+0x3c>)
 80007fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000800:	4a0b      	ldr	r2, [pc, #44]	@ (8000830 <HAL_MspInit+0x3c>)
 8000802:	f043 0302 	orr.w	r3, r3, #2
 8000806:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <HAL_MspInit+0x3c>)
 800080c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000810:	f003 0302 	and.w	r3, r3, #2
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2005      	movs	r0, #5
 800081e:	f000 fa08 	bl	8000c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000822:	2005      	movs	r0, #5
 8000824:	f000 fa1f 	bl	8000c66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	58024400 	.word	0x58024400

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <NMI_Handler+0x4>

0800083c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <MemManage_Handler+0x4>

0800084c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <UsageFault_Handler+0x4>

0800085c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088a:	f000 f8a7 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}

08000892 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008a0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80008dc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80008a4:	f7ff fdc6 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a8:	f7ff fd16 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	@ (80008f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d2:	f001 fc7f 	bl	80021d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fdc5 	bl	8000464 <main>
  bx  lr
 80008da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008e4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80008e8:	08002264 	.word	0x08002264
  ldr r2, =_sbss
 80008ec:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80008f0:	24000204 	.word	0x24000204

080008f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC3_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fe:	2003      	movs	r0, #3
 8000900:	f000 f98c 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000904:	f001 fa46 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8000908:	4602      	mov	r2, r0
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <HAL_Init+0x68>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	0a1b      	lsrs	r3, r3, #8
 8000910:	f003 030f 	and.w	r3, r3, #15
 8000914:	4913      	ldr	r1, [pc, #76]	@ (8000964 <HAL_Init+0x6c>)
 8000916:	5ccb      	ldrb	r3, [r1, r3]
 8000918:	f003 031f 	and.w	r3, r3, #31
 800091c:	fa22 f303 	lsr.w	r3, r2, r3
 8000920:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_Init+0x68>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	4a0e      	ldr	r2, [pc, #56]	@ (8000964 <HAL_Init+0x6c>)
 800092c:	5cd3      	ldrb	r3, [r2, r3]
 800092e:	f003 031f 	and.w	r3, r3, #31
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	fa22 f303 	lsr.w	r3, r2, r3
 8000938:	4a0b      	ldr	r2, [pc, #44]	@ (8000968 <HAL_Init+0x70>)
 800093a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800093c:	4a0b      	ldr	r2, [pc, #44]	@ (800096c <HAL_Init+0x74>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000942:	200f      	movs	r0, #15
 8000944:	f000 f814 	bl	8000970 <HAL_InitTick>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e002      	b.n	8000958 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000952:	f7ff ff4f 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	58024400 	.word	0x58024400
 8000964:	08002234 	.word	0x08002234
 8000968:	24000004 	.word	0x24000004
 800096c:	24000000 	.word	0x24000000

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000978:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <HAL_InitTick+0x60>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d101      	bne.n	8000984 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	e021      	b.n	80009c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <HAL_InitTick+0x64>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <HAL_InitTick+0x60>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f971 	bl	8000c82 <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00e      	b.n	80009c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d80a      	bhi.n	80009c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f000 f93b 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009bc:	4a06      	ldr	r2, [pc, #24]	@ (80009d8 <HAL_InitTick+0x68>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2400000c 	.word	0x2400000c
 80009d4:	24000000 	.word	0x24000000
 80009d8:	24000008 	.word	0x24000008

080009dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_IncTick+0x20>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_IncTick+0x24>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <HAL_IncTick+0x24>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2400000c 	.word	0x2400000c
 8000a00:	240001f8 	.word	0x240001f8

08000a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <HAL_GetTick+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	240001f8 	.word	0x240001f8

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff ffee 	bl	8000a04 <HAL_GetTick>
 8000a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a42:	bf00      	nop
 8000a44:	f7ff ffde 	bl	8000a04 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2400000c 	.word	0x2400000c

08000a64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <HAL_GetREVID+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	0c1b      	lsrs	r3, r3, #16
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	5c001000 	.word	0x5c001000

08000a7c <__NVIC_SetPriorityGrouping>:
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <__NVIC_SetPriorityGrouping+0x40>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <__NVIC_SetPriorityGrouping+0x40>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00
 8000ac0:	05fa0000 	.word	0x05fa0000

08000ac4 <__NVIC_GetPriorityGrouping>:
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4907      	ldr	r1, [pc, #28]	@ (8000b18 <__NVIC_EnableIRQ+0x38>)
 8000afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100

08000b1c <__NVIC_SetPriority>:
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	@ (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	@ (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	@ 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	@ 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff8e 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff29 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff40 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ff90 	bl	8000b70 <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5f 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff33 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffa4 	bl	8000bd8 <SysTick_Config>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000caa:	4b89      	ldr	r3, [pc, #548]	@ (8000ed0 <HAL_GPIO_Init+0x234>)
 8000cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cae:	e194      	b.n	8000fda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 8186 	beq.w	8000fd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d005      	beq.n	8000ce0 <HAL_GPIO_Init+0x44>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d130      	bne.n	8000d42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d16:	2201      	movs	r2, #1
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	f003 0201 	and.w	r2, r3, #1
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d017      	beq.n	8000d7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d123      	bne.n	8000dd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	69b9      	ldr	r1, [r7, #24]
 8000dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0203 	and.w	r2, r3, #3
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80e0 	beq.w	8000fd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed4 <HAL_GPIO_Init+0x238>)
 8000e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ed4 <HAL_GPIO_Init+0x238>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <HAL_GPIO_Init+0x238>)
 8000e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e32:	4a29      	ldr	r2, [pc, #164]	@ (8000ed8 <HAL_GPIO_Init+0x23c>)
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	220f      	movs	r2, #15
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a20      	ldr	r2, [pc, #128]	@ (8000edc <HAL_GPIO_Init+0x240>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d052      	beq.n	8000f04 <HAL_GPIO_Init+0x268>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee0 <HAL_GPIO_Init+0x244>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d031      	beq.n	8000eca <HAL_GPIO_Init+0x22e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee4 <HAL_GPIO_Init+0x248>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d02b      	beq.n	8000ec6 <HAL_GPIO_Init+0x22a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee8 <HAL_GPIO_Init+0x24c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x226>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a1c      	ldr	r2, [pc, #112]	@ (8000eec <HAL_GPIO_Init+0x250>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x222>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef0 <HAL_GPIO_Init+0x254>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x21e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef4 <HAL_GPIO_Init+0x258>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x21a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a19      	ldr	r2, [pc, #100]	@ (8000ef8 <HAL_GPIO_Init+0x25c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x216>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a18      	ldr	r2, [pc, #96]	@ (8000efc <HAL_GPIO_Init+0x260>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x212>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a17      	ldr	r2, [pc, #92]	@ (8000f00 <HAL_GPIO_Init+0x264>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x20e>
 8000ea6:	2309      	movs	r3, #9
 8000ea8:	e02d      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eaa:	230a      	movs	r3, #10
 8000eac:	e02b      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eae:	2308      	movs	r3, #8
 8000eb0:	e029      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e027      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	e025      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eba:	2305      	movs	r3, #5
 8000ebc:	e023      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	e021      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e01f      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e01d      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e01b      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000ece:	bf00      	nop
 8000ed0:	58000080 	.word	0x58000080
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	58000400 	.word	0x58000400
 8000edc:	58020000 	.word	0x58020000
 8000ee0:	58020400 	.word	0x58020400
 8000ee4:	58020800 	.word	0x58020800
 8000ee8:	58020c00 	.word	0x58020c00
 8000eec:	58021000 	.word	0x58021000
 8000ef0:	58021400 	.word	0x58021400
 8000ef4:	58021800 	.word	0x58021800
 8000ef8:	58021c00 	.word	0x58021c00
 8000efc:	58022000 	.word	0x58022000
 8000f00:	58022400 	.word	0x58022400
 8000f04:	2300      	movs	r3, #0
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f16:	4938      	ldr	r1, [pc, #224]	@ (8000ff8 <HAL_GPIO_Init+0x35c>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f47f ae63 	bne.w	8000cb0 <HAL_GPIO_Init+0x14>
  }
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	3724      	adds	r7, #36	@ 0x24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	58000400 	.word	0x58000400

08000ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
 8001008:	4613      	mov	r3, r2
 800100a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001018:	e003      	b.n	8001022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	619a      	str	r2, [r3, #24]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4013      	ands	r3, r2
 8001046:	041a      	lsls	r2, r3, #16
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43d9      	mvns	r1, r3
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	400b      	ands	r3, r1
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	619a      	str	r2, [r3, #24]
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800106c:	4a08      	ldr	r2, [pc, #32]	@ (8001090 <HAL_HSEM_FastTake+0x2c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3320      	adds	r3, #32
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <HAL_HSEM_FastTake+0x30>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d101      	bne.n	8001080 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	e000      	b.n	8001082 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	58026400 	.word	0x58026400
 8001094:	80000300 	.word	0x80000300

08001098 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80010a2:	4906      	ldr	r1, [pc, #24]	@ (80010bc <HAL_HSEM_Release+0x24>)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	58026400 	.word	0x58026400

080010c0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <HAL_PWREx_ConfigSupply+0xb0>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	2b06      	cmp	r3, #6
 80010d2:	d00a      	beq.n	80010ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010d4:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <HAL_PWREx_ConfigSupply+0xb0>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d001      	beq.n	80010e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e040      	b.n	8001168 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e03e      	b.n	8001168 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <HAL_PWREx_ConfigSupply+0xb0>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80010f2:	491f      	ldr	r1, [pc, #124]	@ (8001170 <HAL_PWREx_ConfigSupply+0xb0>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80010fa:	f7ff fc83 	bl	8000a04 <HAL_GetTick>
 80010fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001100:	e009      	b.n	8001116 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001102:	f7ff fc7f 	bl	8000a04 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001110:	d901      	bls.n	8001116 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e028      	b.n	8001168 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001116:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <HAL_PWREx_ConfigSupply+0xb0>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800111e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001122:	d1ee      	bne.n	8001102 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b1e      	cmp	r3, #30
 8001128:	d008      	beq.n	800113c <HAL_PWREx_ConfigSupply+0x7c>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b2e      	cmp	r3, #46	@ 0x2e
 800112e:	d005      	beq.n	800113c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b1d      	cmp	r3, #29
 8001134:	d002      	beq.n	800113c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b2d      	cmp	r3, #45	@ 0x2d
 800113a:	d114      	bne.n	8001166 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800113c:	f7ff fc62 	bl	8000a04 <HAL_GetTick>
 8001140:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001142:	e009      	b.n	8001158 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001144:	f7ff fc5e 	bl	8000a04 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001152:	d901      	bls.n	8001158 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e007      	b.n	8001168 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <HAL_PWREx_ConfigSupply+0xb0>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001164:	d1ee      	bne.n	8001144 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58024800 	.word	0x58024800

08001174 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	@ 0x30
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	f000 bc48 	b.w	8001a18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 8088 	beq.w	80012a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001196:	4b99      	ldr	r3, [pc, #612]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011a0:	4b96      	ldr	r3, [pc, #600]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80011a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a8:	2b10      	cmp	r3, #16
 80011aa:	d007      	beq.n	80011bc <HAL_RCC_OscConfig+0x48>
 80011ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ae:	2b18      	cmp	r3, #24
 80011b0:	d111      	bne.n	80011d6 <HAL_RCC_OscConfig+0x62>
 80011b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d10c      	bne.n	80011d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	4b8f      	ldr	r3, [pc, #572]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d06d      	beq.n	80012a4 <HAL_RCC_OscConfig+0x130>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d169      	bne.n	80012a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	f000 bc21 	b.w	8001a18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011de:	d106      	bne.n	80011ee <HAL_RCC_OscConfig+0x7a>
 80011e0:	4b86      	ldr	r3, [pc, #536]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a85      	ldr	r2, [pc, #532]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80011e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	e02e      	b.n	800124c <HAL_RCC_OscConfig+0xd8>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x9c>
 80011f6:	4b81      	ldr	r3, [pc, #516]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a80      	ldr	r2, [pc, #512]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80011fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	4b7e      	ldr	r3, [pc, #504]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a7d      	ldr	r2, [pc, #500]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001208:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e01d      	b.n	800124c <HAL_RCC_OscConfig+0xd8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001218:	d10c      	bne.n	8001234 <HAL_RCC_OscConfig+0xc0>
 800121a:	4b78      	ldr	r3, [pc, #480]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a77      	ldr	r2, [pc, #476]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	4b75      	ldr	r3, [pc, #468]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a74      	ldr	r2, [pc, #464]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 800122c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e00b      	b.n	800124c <HAL_RCC_OscConfig+0xd8>
 8001234:	4b71      	ldr	r3, [pc, #452]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a70      	ldr	r2, [pc, #448]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 800123a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b6e      	ldr	r3, [pc, #440]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a6d      	ldr	r2, [pc, #436]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800124a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d013      	beq.n	800127c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff fbd6 	bl	8000a04 <HAL_GetTick>
 8001258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fbd2 	bl	8000a04 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	@ 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e3d4      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800126e:	4b63      	ldr	r3, [pc, #396]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0xe8>
 800127a:	e014      	b.n	80012a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fbc2 	bl	8000a04 <HAL_GetTick>
 8001280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fbbe 	bl	8000a04 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	@ 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e3c0      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001296:	4b59      	ldr	r3, [pc, #356]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x110>
 80012a2:	e000      	b.n	80012a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80ca 	beq.w	8001448 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b4:	4b51      	ldr	r3, [pc, #324]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012be:	4b4f      	ldr	r3, [pc, #316]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80012c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <HAL_RCC_OscConfig+0x166>
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	2b18      	cmp	r3, #24
 80012ce:	d156      	bne.n	800137e <HAL_RCC_OscConfig+0x20a>
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d151      	bne.n	800137e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012da:	4b48      	ldr	r3, [pc, #288]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x17e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e392      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012f2:	4b42      	ldr	r3, [pc, #264]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 0219 	bic.w	r2, r3, #25
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	493f      	ldr	r1, [pc, #252]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001304:	f7ff fb7e 	bl	8000a04 <HAL_GetTick>
 8001308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130c:	f7ff fb7a 	bl	8000a04 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e37c      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800131e:	4b37      	ldr	r3, [pc, #220]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	f7ff fb9b 	bl	8000a64 <HAL_GetREVID>
 800132e:	4603      	mov	r3, r0
 8001330:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001334:	4293      	cmp	r3, r2
 8001336:	d817      	bhi.n	8001368 <HAL_RCC_OscConfig+0x1f4>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	2b40      	cmp	r3, #64	@ 0x40
 800133e:	d108      	bne.n	8001352 <HAL_RCC_OscConfig+0x1de>
 8001340:	4b2e      	ldr	r3, [pc, #184]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001348:	4a2c      	ldr	r2, [pc, #176]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 800134a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001350:	e07a      	b.n	8001448 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	031b      	lsls	r3, r3, #12
 8001360:	4926      	ldr	r1, [pc, #152]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001366:	e06f      	b.n	8001448 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001368:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	061b      	lsls	r3, r3, #24
 8001376:	4921      	ldr	r1, [pc, #132]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800137c:	e064      	b.n	8001448 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d047      	beq.n	8001416 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 0219 	bic.w	r2, r3, #25
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	491a      	ldr	r1, [pc, #104]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fb34 	bl	8000a04 <HAL_GetTick>
 800139c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff fb30 	bl	8000a04 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e332      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	f7ff fb51 	bl	8000a64 <HAL_GetREVID>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d819      	bhi.n	8001400 <HAL_RCC_OscConfig+0x28c>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	2b40      	cmp	r3, #64	@ 0x40
 80013d2:	d108      	bne.n	80013e6 <HAL_RCC_OscConfig+0x272>
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80013dc:	4a07      	ldr	r2, [pc, #28]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80013de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e2:	6053      	str	r3, [r2, #4]
 80013e4:	e030      	b.n	8001448 <HAL_RCC_OscConfig+0x2d4>
 80013e6:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	031b      	lsls	r3, r3, #12
 80013f4:	4901      	ldr	r1, [pc, #4]	@ (80013fc <HAL_RCC_OscConfig+0x288>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]
 80013fa:	e025      	b.n	8001448 <HAL_RCC_OscConfig+0x2d4>
 80013fc:	58024400 	.word	0x58024400
 8001400:	4b9a      	ldr	r3, [pc, #616]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	061b      	lsls	r3, r3, #24
 800140e:	4997      	ldr	r1, [pc, #604]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
 8001414:	e018      	b.n	8001448 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001416:	4b95      	ldr	r3, [pc, #596]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a94      	ldr	r2, [pc, #592]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001422:	f7ff faef 	bl	8000a04 <HAL_GetTick>
 8001426:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff faeb 	bl	8000a04 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e2ed      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800143c:	4b8b      	ldr	r3, [pc, #556]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80a9 	beq.w	80015a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001456:	4b85      	ldr	r3, [pc, #532]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800145e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001460:	4b82      	ldr	r3, [pc, #520]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001464:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b08      	cmp	r3, #8
 800146a:	d007      	beq.n	800147c <HAL_RCC_OscConfig+0x308>
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2b18      	cmp	r3, #24
 8001470:	d13a      	bne.n	80014e8 <HAL_RCC_OscConfig+0x374>
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b01      	cmp	r3, #1
 800147a:	d135      	bne.n	80014e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800147c:	4b7b      	ldr	r3, [pc, #492]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_OscConfig+0x320>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	2b80      	cmp	r3, #128	@ 0x80
 800148e:	d001      	beq.n	8001494 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e2c1      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001494:	f7ff fae6 	bl	8000a64 <HAL_GetREVID>
 8001498:	4603      	mov	r3, r0
 800149a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800149e:	4293      	cmp	r3, r2
 80014a0:	d817      	bhi.n	80014d2 <HAL_RCC_OscConfig+0x35e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	2b20      	cmp	r3, #32
 80014a8:	d108      	bne.n	80014bc <HAL_RCC_OscConfig+0x348>
 80014aa:	4b70      	ldr	r3, [pc, #448]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80014b2:	4a6e      	ldr	r2, [pc, #440]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80014b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80014b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014ba:	e075      	b.n	80015a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014bc:	4b6b      	ldr	r3, [pc, #428]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	069b      	lsls	r3, r3, #26
 80014ca:	4968      	ldr	r1, [pc, #416]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014d0:	e06a      	b.n	80015a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014d2:	4b66      	ldr	r3, [pc, #408]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	061b      	lsls	r3, r3, #24
 80014e0:	4962      	ldr	r1, [pc, #392]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014e6:	e05f      	b.n	80015a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d042      	beq.n	8001576 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014f0:	4b5e      	ldr	r3, [pc, #376]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a5d      	ldr	r2, [pc, #372]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80014f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fa82 	bl	8000a04 <HAL_GetTick>
 8001500:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001504:	f7ff fa7e 	bl	8000a04 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e280      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001516:	4b55      	ldr	r3, [pc, #340]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001522:	f7ff fa9f 	bl	8000a64 <HAL_GetREVID>
 8001526:	4603      	mov	r3, r0
 8001528:	f241 0203 	movw	r2, #4099	@ 0x1003
 800152c:	4293      	cmp	r3, r2
 800152e:	d817      	bhi.n	8001560 <HAL_RCC_OscConfig+0x3ec>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	2b20      	cmp	r3, #32
 8001536:	d108      	bne.n	800154a <HAL_RCC_OscConfig+0x3d6>
 8001538:	4b4c      	ldr	r3, [pc, #304]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001540:	4a4a      	ldr	r2, [pc, #296]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001542:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001546:	6053      	str	r3, [r2, #4]
 8001548:	e02e      	b.n	80015a8 <HAL_RCC_OscConfig+0x434>
 800154a:	4b48      	ldr	r3, [pc, #288]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	069b      	lsls	r3, r3, #26
 8001558:	4944      	ldr	r1, [pc, #272]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
 800155e:	e023      	b.n	80015a8 <HAL_RCC_OscConfig+0x434>
 8001560:	4b42      	ldr	r3, [pc, #264]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	493f      	ldr	r1, [pc, #252]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001570:	4313      	orrs	r3, r2
 8001572:	60cb      	str	r3, [r1, #12]
 8001574:	e018      	b.n	80015a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001576:	4b3d      	ldr	r3, [pc, #244]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a3c      	ldr	r2, [pc, #240]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 800157c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fa3f 	bl	8000a04 <HAL_GetTick>
 8001586:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800158a:	f7ff fa3b 	bl	8000a04 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e23d      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800159c:	4b33      	ldr	r3, [pc, #204]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d036      	beq.n	8001622 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d019      	beq.n	80015f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015bc:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80015be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c0:	4a2a      	ldr	r2, [pc, #168]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fa1c 	bl	8000a04 <HAL_GetTick>
 80015cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fa18 	bl	8000a04 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e21a      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015e2:	4b22      	ldr	r3, [pc, #136]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80015e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x45c>
 80015ee:	e018      	b.n	8001622 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f0:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80015f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015f4:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fa02 	bl	8000a04 <HAL_GetTick>
 8001600:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff f9fe 	bl	8000a04 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e200      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0320 	and.w	r3, r3, #32
 800162a:	2b00      	cmp	r3, #0
 800162c:	d039      	beq.n	80016a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d01c      	beq.n	8001670 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001636:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 800163c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001640:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001642:	f7ff f9df 	bl	8000a04 <HAL_GetTick>
 8001646:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800164a:	f7ff f9db 	bl	8000a04 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1dd      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_RCC_OscConfig+0x4f8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x4d6>
 8001668:	e01b      	b.n	80016a2 <HAL_RCC_OscConfig+0x52e>
 800166a:	bf00      	nop
 800166c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001670:	4b9b      	ldr	r3, [pc, #620]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a9a      	ldr	r2, [pc, #616]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001676:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800167a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800167c:	f7ff f9c2 	bl	8000a04 <HAL_GetTick>
 8001680:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001684:	f7ff f9be 	bl	8000a04 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1c0      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001696:	4b92      	ldr	r3, [pc, #584]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8081 	beq.w	80017b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016b0:	4b8c      	ldr	r3, [pc, #560]	@ (80018e4 <HAL_RCC_OscConfig+0x770>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a8b      	ldr	r2, [pc, #556]	@ (80018e4 <HAL_RCC_OscConfig+0x770>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016bc:	f7ff f9a2 	bl	8000a04 <HAL_GetTick>
 80016c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c4:	f7ff f99e 	bl	8000a04 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	@ 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1a0      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016d6:	4b83      	ldr	r3, [pc, #524]	@ (80018e4 <HAL_RCC_OscConfig+0x770>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0x584>
 80016ea:	4b7d      	ldr	r3, [pc, #500]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ee:	4a7c      	ldr	r2, [pc, #496]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f6:	e02d      	b.n	8001754 <HAL_RCC_OscConfig+0x5e0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10c      	bne.n	800171a <HAL_RCC_OscConfig+0x5a6>
 8001700:	4b77      	ldr	r3, [pc, #476]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001704:	4a76      	ldr	r2, [pc, #472]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	6713      	str	r3, [r2, #112]	@ 0x70
 800170c:	4b74      	ldr	r3, [pc, #464]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001710:	4a73      	ldr	r2, [pc, #460]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001712:	f023 0304 	bic.w	r3, r3, #4
 8001716:	6713      	str	r3, [r2, #112]	@ 0x70
 8001718:	e01c      	b.n	8001754 <HAL_RCC_OscConfig+0x5e0>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x5c8>
 8001722:	4b6f      	ldr	r3, [pc, #444]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001726:	4a6e      	ldr	r2, [pc, #440]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6713      	str	r3, [r2, #112]	@ 0x70
 800172e:	4b6c      	ldr	r3, [pc, #432]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001732:	4a6b      	ldr	r2, [pc, #428]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6713      	str	r3, [r2, #112]	@ 0x70
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0x5e0>
 800173c:	4b68      	ldr	r3, [pc, #416]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001740:	4a67      	ldr	r2, [pc, #412]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	6713      	str	r3, [r2, #112]	@ 0x70
 8001748:	4b65      	ldr	r3, [pc, #404]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174c:	4a64      	ldr	r2, [pc, #400]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 800174e:	f023 0304 	bic.w	r3, r3, #4
 8001752:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d015      	beq.n	8001788 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff f952 	bl	8000a04 <HAL_GetTick>
 8001760:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff f94e 	bl	8000a04 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e14e      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800177a:	4b59      	ldr	r3, [pc, #356]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0ee      	beq.n	8001764 <HAL_RCC_OscConfig+0x5f0>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff f93c 	bl	8000a04 <HAL_GetTick>
 800178c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff f938 	bl	8000a04 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e138      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017a6:	4b4e      	ldr	r3, [pc, #312]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ee      	bne.n	8001790 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 812d 	beq.w	8001a16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017bc:	4b48      	ldr	r3, [pc, #288]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017c4:	2b18      	cmp	r3, #24
 80017c6:	f000 80bd 	beq.w	8001944 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	f040 809e 	bne.w	8001910 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d4:	4b42      	ldr	r3, [pc, #264]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a41      	ldr	r2, [pc, #260]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80017da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff f910 	bl	8000a04 <HAL_GetTick>
 80017e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff f90c 	bl	8000a04 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e10e      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017fa:	4b39      	ldr	r3, [pc, #228]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001806:	4b36      	ldr	r3, [pc, #216]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001808:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800180a:	4b37      	ldr	r3, [pc, #220]	@ (80018e8 <HAL_RCC_OscConfig+0x774>)
 800180c:	4013      	ands	r3, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	430a      	orrs	r2, r1
 800181a:	4931      	ldr	r1, [pc, #196]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 800181c:	4313      	orrs	r3, r2
 800181e:	628b      	str	r3, [r1, #40]	@ 0x28
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	3b01      	subs	r3, #1
 8001826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800182e:	3b01      	subs	r3, #1
 8001830:	025b      	lsls	r3, r3, #9
 8001832:	b29b      	uxth	r3, r3
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800183a:	3b01      	subs	r3, #1
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001848:	3b01      	subs	r3, #1
 800184a:	061b      	lsls	r3, r3, #24
 800184c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001850:	4923      	ldr	r1, [pc, #140]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001852:	4313      	orrs	r3, r2
 8001854:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001856:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185a:	4a21      	ldr	r2, [pc, #132]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001862:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001866:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <HAL_RCC_OscConfig+0x778>)
 8001868:	4013      	ands	r3, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800186e:	00d2      	lsls	r2, r2, #3
 8001870:	491b      	ldr	r1, [pc, #108]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001872:	4313      	orrs	r3, r2
 8001874:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001876:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187a:	f023 020c 	bic.w	r2, r3, #12
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	4917      	ldr	r1, [pc, #92]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001884:	4313      	orrs	r3, r2
 8001886:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001888:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 800188a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188c:	f023 0202 	bic.w	r2, r3, #2
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001894:	4912      	ldr	r1, [pc, #72]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 8001896:	4313      	orrs	r3, r2
 8001898:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 800189c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189e:	4a10      	ldr	r2, [pc, #64]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80018a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018aa:	4a0d      	ldr	r2, [pc, #52]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80018b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c2:	4a07      	ldr	r2, [pc, #28]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ca:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <HAL_RCC_OscConfig+0x76c>)
 80018d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7ff f895 	bl	8000a04 <HAL_GetTick>
 80018da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018dc:	e011      	b.n	8001902 <HAL_RCC_OscConfig+0x78e>
 80018de:	bf00      	nop
 80018e0:	58024400 	.word	0x58024400
 80018e4:	58024800 	.word	0x58024800
 80018e8:	fffffc0c 	.word	0xfffffc0c
 80018ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff f888 	bl	8000a04 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e08a      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001902:	4b47      	ldr	r3, [pc, #284]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x77c>
 800190e:	e082      	b.n	8001a16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001910:	4b43      	ldr	r3, [pc, #268]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a42      	ldr	r2, [pc, #264]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 8001916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800191a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff f872 	bl	8000a04 <HAL_GetTick>
 8001920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff f86e 	bl	8000a04 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e070      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001936:	4b3a      	ldr	r3, [pc, #232]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x7b0>
 8001942:	e068      	b.n	8001a16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001944:	4b36      	ldr	r3, [pc, #216]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 8001946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001948:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800194a:	4b35      	ldr	r3, [pc, #212]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001954:	2b01      	cmp	r3, #1
 8001956:	d031      	beq.n	80019bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f003 0203 	and.w	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d12a      	bne.n	80019bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d122      	bne.n	80019bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d11a      	bne.n	80019bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	0a5b      	lsrs	r3, r3, #9
 800198a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001992:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d111      	bne.n	80019bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	0c1b      	lsrs	r3, r3, #16
 800199c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d108      	bne.n	80019bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	0e1b      	lsrs	r3, r3, #24
 80019ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e02b      	b.n	8001a18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80019c0:	4b17      	ldr	r3, [pc, #92]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 80019c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80019ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d01f      	beq.n	8001a16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80019d6:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 80019d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019da:	4a11      	ldr	r2, [pc, #68]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019e2:	f7ff f80f 	bl	8000a04 <HAL_GetTick>
 80019e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80019e8:	bf00      	nop
 80019ea:	f7ff f80b 	bl	8000a04 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d0f9      	beq.n	80019ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 80019f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <HAL_RCC_OscConfig+0x8b0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a02:	00d2      	lsls	r2, r2, #3
 8001a04:	4906      	ldr	r1, [pc, #24]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a0a:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 8001a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0e:	4a04      	ldr	r2, [pc, #16]	@ (8001a20 <HAL_RCC_OscConfig+0x8ac>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3730      	adds	r7, #48	@ 0x30
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	58024400 	.word	0x58024400
 8001a24:	ffff0007 	.word	0xffff0007

08001a28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e19c      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b8a      	ldr	r3, [pc, #552]	@ (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d910      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b87      	ldr	r3, [pc, #540]	@ (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 020f 	bic.w	r2, r3, #15
 8001a52:	4985      	ldr	r1, [pc, #532]	@ (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b83      	ldr	r3, [pc, #524]	@ (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e184      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d010      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	4b7b      	ldr	r3, [pc, #492]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d908      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a88:	4b78      	ldr	r3, [pc, #480]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	4975      	ldr	r1, [pc, #468]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d010      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	4b70      	ldr	r3, [pc, #448]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d908      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	496a      	ldr	r1, [pc, #424]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d010      	beq.n	8001af6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	4b64      	ldr	r3, [pc, #400]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d908      	bls.n	8001af6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ae4:	4b61      	ldr	r3, [pc, #388]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	495e      	ldr	r1, [pc, #376]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0320 	and.w	r3, r3, #32
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d010      	beq.n	8001b24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	4b59      	ldr	r3, [pc, #356]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d908      	bls.n	8001b24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b12:	4b56      	ldr	r3, [pc, #344]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4953      	ldr	r1, [pc, #332]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d010      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	4b4d      	ldr	r3, [pc, #308]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d908      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b4a      	ldr	r3, [pc, #296]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f023 020f 	bic.w	r2, r3, #15
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4947      	ldr	r1, [pc, #284]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d055      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b5e:	4b43      	ldr	r3, [pc, #268]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	4940      	ldr	r1, [pc, #256]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b78:	4b3c      	ldr	r3, [pc, #240]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d121      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0f6      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b90:	4b36      	ldr	r3, [pc, #216]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d115      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0ea      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d107      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ba8:	4b30      	ldr	r3, [pc, #192]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d109      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0de      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0d6      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bc8:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f023 0207 	bic.w	r2, r3, #7
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4925      	ldr	r1, [pc, #148]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bda:	f7fe ff13 	bl	8000a04 <HAL_GetTick>
 8001bde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be2:	f7fe ff0f 	bl	8000a04 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e0be      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d1eb      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d010      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d208      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f023 020f 	bic.w	r2, r3, #15
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	490e      	ldr	r1, [pc, #56]	@ (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d214      	bcs.n	8001c70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 020f 	bic.w	r2, r3, #15
 8001c4e:	4906      	ldr	r1, [pc, #24]	@ (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e086      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
 8001c68:	52002000 	.word	0x52002000
 8001c6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d010      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	4b3f      	ldr	r3, [pc, #252]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d208      	bcs.n	8001c9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	4939      	ldr	r1, [pc, #228]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d010      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d208      	bcs.n	8001ccc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cba:	4b31      	ldr	r3, [pc, #196]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	492e      	ldr	r1, [pc, #184]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d010      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	4b28      	ldr	r3, [pc, #160]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d208      	bcs.n	8001cfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ce8:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4922      	ldr	r1, [pc, #136]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d010      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d208      	bcs.n	8001d28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4917      	ldr	r1, [pc, #92]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d28:	f000 f834 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	4912      	ldr	r1, [pc, #72]	@ (8001d84 <HAL_RCC_ClockConfig+0x35c>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8001d84 <HAL_RCC_ClockConfig+0x35c>)
 8001d50:	5cd3      	ldrb	r3, [r2, r3]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <HAL_RCC_ClockConfig+0x360>)
 8001d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d60:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <HAL_RCC_ClockConfig+0x364>)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <HAL_RCC_ClockConfig+0x368>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fe00 	bl	8000970 <HAL_InitTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	58024400 	.word	0x58024400
 8001d84:	08002234 	.word	0x08002234
 8001d88:	24000004 	.word	0x24000004
 8001d8c:	24000000 	.word	0x24000000
 8001d90:	24000008 	.word	0x24000008

08001d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	@ 0x24
 8001d98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d9a:	4bb3      	ldr	r3, [pc, #716]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001da2:	2b18      	cmp	r3, #24
 8001da4:	f200 8155 	bhi.w	8002052 <HAL_RCC_GetSysClockFreq+0x2be>
 8001da8:	a201      	add	r2, pc, #4	@ (adr r2, 8001db0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001e15 	.word	0x08001e15
 8001db4:	08002053 	.word	0x08002053
 8001db8:	08002053 	.word	0x08002053
 8001dbc:	08002053 	.word	0x08002053
 8001dc0:	08002053 	.word	0x08002053
 8001dc4:	08002053 	.word	0x08002053
 8001dc8:	08002053 	.word	0x08002053
 8001dcc:	08002053 	.word	0x08002053
 8001dd0:	08001e3b 	.word	0x08001e3b
 8001dd4:	08002053 	.word	0x08002053
 8001dd8:	08002053 	.word	0x08002053
 8001ddc:	08002053 	.word	0x08002053
 8001de0:	08002053 	.word	0x08002053
 8001de4:	08002053 	.word	0x08002053
 8001de8:	08002053 	.word	0x08002053
 8001dec:	08002053 	.word	0x08002053
 8001df0:	08001e41 	.word	0x08001e41
 8001df4:	08002053 	.word	0x08002053
 8001df8:	08002053 	.word	0x08002053
 8001dfc:	08002053 	.word	0x08002053
 8001e00:	08002053 	.word	0x08002053
 8001e04:	08002053 	.word	0x08002053
 8001e08:	08002053 	.word	0x08002053
 8001e0c:	08002053 	.word	0x08002053
 8001e10:	08001e47 	.word	0x08001e47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e14:	4b94      	ldr	r3, [pc, #592]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0320 	and.w	r3, r3, #32
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d009      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e20:	4b91      	ldr	r3, [pc, #580]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	4a90      	ldr	r2, [pc, #576]	@ (800206c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e32:	e111      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e34:	4b8d      	ldr	r3, [pc, #564]	@ (800206c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e36:	61bb      	str	r3, [r7, #24]
      break;
 8001e38:	e10e      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e3c:	61bb      	str	r3, [r7, #24]
      break;
 8001e3e:	e10b      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e40:	4b8c      	ldr	r3, [pc, #560]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e42:	61bb      	str	r3, [r7, #24]
      break;
 8001e44:	e108      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e46:	4b88      	ldr	r3, [pc, #544]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e50:	4b85      	ldr	r3, [pc, #532]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e5c:	4b82      	ldr	r3, [pc, #520]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e66:	4b80      	ldr	r3, [pc, #512]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e6a:	08db      	lsrs	r3, r3, #3
 8001e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80e1 	beq.w	800204c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	f000 8083 	beq.w	8001f98 <HAL_RCC_GetSysClockFreq+0x204>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	f200 80a1 	bhi.w	8001fdc <HAL_RCC_GetSysClockFreq+0x248>
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x114>
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d056      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001ea6:	e099      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d02d      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001eb4:	4b6c      	ldr	r3, [pc, #432]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	4a6b      	ldr	r2, [pc, #428]	@ (800206c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ede:	4b62      	ldr	r3, [pc, #392]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ef2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f0e:	e087      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800207c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f22:	4b51      	ldr	r3, [pc, #324]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f36:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f52:	e065      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f5e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f66:	4b40      	ldr	r3, [pc, #256]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f7a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f96:	e043      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002084 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001faa:	4b2f      	ldr	r3, [pc, #188]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fbe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fda:	e021      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fee:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002002:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800200a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800200e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800201e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002024:	0a5b      	lsrs	r3, r3, #9
 8002026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800202a:	3301      	adds	r3, #1
 800202c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002038:	edd7 6a07 	vldr	s13, [r7, #28]
 800203c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002044:	ee17 3a90 	vmov	r3, s15
 8002048:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800204a:	e005      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
      break;
 8002050:	e002      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002052:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002054:	61bb      	str	r3, [r7, #24]
      break;
 8002056:	bf00      	nop
  }

  return sysclockfreq;
 8002058:	69bb      	ldr	r3, [r7, #24]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	@ 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	58024400 	.word	0x58024400
 800206c:	03d09000 	.word	0x03d09000
 8002070:	003d0900 	.word	0x003d0900
 8002074:	017d7840 	.word	0x017d7840
 8002078:	46000000 	.word	0x46000000
 800207c:	4c742400 	.word	0x4c742400
 8002080:	4a742400 	.word	0x4a742400
 8002084:	4bbebc20 	.word	0x4bbebc20

08002088 <ResMgr_Init>:
  * @param  SendFunct : function pointer used to send message to the other core
  * @param  Callback  : function pointer used to publish the status to user side
  * @retval Return Status
  */
ResMgr_Status_t  ResMgr_Init(ResMgrSendMsg_t SendFunct, ResMgrCallback_t Callback)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]
  uint32_t count = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
  /* lock table modification */
  RESMGR_TBL_LOCK(RESMGR_ID_RESMGR_TABLE);
 800209a:	201f      	movs	r0, #31
 800209c:	f7fe ffe2 	bl	8001064 <HAL_HSEM_FastTake>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f9      	bne.n	800209a <ResMgr_Init+0x12>

  /* Check whether the resource is free */
  if(ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State != RESMGR_STATE_TBL_INIT)
 80020a6:	4b43      	ldr	r3, [pc, #268]	@ (80021b4 <ResMgr_Init+0x12c>)
 80020a8:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 80020ac:	2b5a      	cmp	r3, #90	@ 0x5a
 80020ae:	d062      	beq.n	8002176 <ResMgr_Init+0xee>
  {

#if defined(RESMGR_USE_DEFAULT_TBL)
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 80020b0:	e05a      	b.n	8002168 <ResMgr_Init+0xe0>
    {
      if(Default_ResTbl[count] != RES_DEFAULT_ASSIGN_NONE)
 80020b2:	4a41      	ldr	r2, [pc, #260]	@ (80021b8 <ResMgr_Init+0x130>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d02a      	beq.n	8002114 <ResMgr_Init+0x8c>
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_ASSIGNED;
 80020be:	493d      	ldr	r1, [pc, #244]	@ (80021b4 <ResMgr_Init+0x12c>)
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	3308      	adds	r3, #8
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU1)
 80020d2:	4a39      	ldr	r2, [pc, #228]	@ (80021b8 <ResMgr_Init+0x130>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4413      	add	r3, r2
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d109      	bne.n	80020f2 <ResMgr_Init+0x6a>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU1;
 80020de:	4935      	ldr	r1, [pc, #212]	@ (80021b4 <ResMgr_Init+0x12c>)
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3304      	adds	r3, #4
 80020ee:	2208      	movs	r2, #8
 80020f0:	601a      	str	r2, [r3, #0]
        }
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU2)
 80020f2:	4a31      	ldr	r2, [pc, #196]	@ (80021b8 <ResMgr_Init+0x130>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4413      	add	r3, r2
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d11e      	bne.n	800213c <ResMgr_Init+0xb4>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU2;
 80020fe:	492d      	ldr	r1, [pc, #180]	@ (80021b4 <ResMgr_Init+0x12c>)
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	3304      	adds	r3, #4
 800210e:	2210      	movs	r2, #16
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e013      	b.n	800213c <ResMgr_Init+0xb4>
        }
      }
      else
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
 8002114:	4927      	ldr	r1, [pc, #156]	@ (80021b4 <ResMgr_Init+0x12c>)
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3308      	adds	r3, #8
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[count].Ctx.Flags = 0;
 8002128:	4922      	ldr	r1, [pc, #136]	@ (80021b4 <ResMgr_Init+0x12c>)
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3304      	adds	r3, #4
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
      }
      ResMgr_Tbl[count].Spinlock = 0;
 800213c:	491d      	ldr	r1, [pc, #116]	@ (80021b4 <ResMgr_Init+0x12c>)
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
 800214e:	4919      	ldr	r1, [pc, #100]	@ (80021b4 <ResMgr_Init+0x12c>)
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	3310      	adds	r3, #16
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3301      	adds	r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b16      	cmp	r3, #22
 800216c:	d9a1      	bls.n	80020b2 <ResMgr_Init+0x2a>
      ResMgr_Tbl[count].Ctx.Flags = 0;
      ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
    }
#endif /* RESMGR_USE_DEFAULT_TBL */
    ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State = RESMGR_STATE_TBL_INIT;
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <ResMgr_Init+0x12c>)
 8002170:	225a      	movs	r2, #90	@ 0x5a
 8002172:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
  }

  RESMGR_TBL_UNLOCK(RESMGR_ID_RESMGR_TABLE);
 8002176:	2100      	movs	r1, #0
 8002178:	201f      	movs	r0, #31
 800217a:	f7fe ff8d 	bl	8001098 <HAL_HSEM_Release>

  if((SendFunct != NULL) || (Callback != NULL))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <ResMgr_Init+0x102>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00c      	beq.n	80021a4 <ResMgr_Init+0x11c>
  {
    ResMgrSendMsgFunct = SendFunct;
 800218a:	4a0c      	ldr	r2, [pc, #48]	@ (80021bc <ResMgr_Init+0x134>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct = Callback;
 8002190:	4a0b      	ldr	r2, [pc, #44]	@ (80021c0 <ResMgr_Init+0x138>)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct(RESMGR_ID_ALL, RESMGR_MSG_INIT);
 8002196:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <ResMgr_Init+0x138>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2100      	movs	r1, #0
 800219c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80021a0:	4798      	blx	r3
 80021a2:	e001      	b.n	80021a8 <ResMgr_Init+0x120>
  }
  else
  {
    ret = RESMGR_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	24000010 	.word	0x24000010
 80021b8:	08002244 	.word	0x08002244
 80021bc:	240001fc 	.word	0x240001fc
 80021c0:	24000200 	.word	0x24000200

080021c4 <memset>:
 80021c4:	4402      	add	r2, r0
 80021c6:	4603      	mov	r3, r0
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d100      	bne.n	80021ce <memset+0xa>
 80021cc:	4770      	bx	lr
 80021ce:	f803 1b01 	strb.w	r1, [r3], #1
 80021d2:	e7f9      	b.n	80021c8 <memset+0x4>

080021d4 <__libc_init_array>:
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	4d0d      	ldr	r5, [pc, #52]	@ (800220c <__libc_init_array+0x38>)
 80021d8:	4c0d      	ldr	r4, [pc, #52]	@ (8002210 <__libc_init_array+0x3c>)
 80021da:	1b64      	subs	r4, r4, r5
 80021dc:	10a4      	asrs	r4, r4, #2
 80021de:	2600      	movs	r6, #0
 80021e0:	42a6      	cmp	r6, r4
 80021e2:	d109      	bne.n	80021f8 <__libc_init_array+0x24>
 80021e4:	4d0b      	ldr	r5, [pc, #44]	@ (8002214 <__libc_init_array+0x40>)
 80021e6:	4c0c      	ldr	r4, [pc, #48]	@ (8002218 <__libc_init_array+0x44>)
 80021e8:	f000 f818 	bl	800221c <_init>
 80021ec:	1b64      	subs	r4, r4, r5
 80021ee:	10a4      	asrs	r4, r4, #2
 80021f0:	2600      	movs	r6, #0
 80021f2:	42a6      	cmp	r6, r4
 80021f4:	d105      	bne.n	8002202 <__libc_init_array+0x2e>
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
 80021f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021fc:	4798      	blx	r3
 80021fe:	3601      	adds	r6, #1
 8002200:	e7ee      	b.n	80021e0 <__libc_init_array+0xc>
 8002202:	f855 3b04 	ldr.w	r3, [r5], #4
 8002206:	4798      	blx	r3
 8002208:	3601      	adds	r6, #1
 800220a:	e7f2      	b.n	80021f2 <__libc_init_array+0x1e>
 800220c:	0800225c 	.word	0x0800225c
 8002210:	0800225c 	.word	0x0800225c
 8002214:	0800225c 	.word	0x0800225c
 8002218:	08002260 	.word	0x08002260

0800221c <_init>:
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221e:	bf00      	nop
 8002220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002222:	bc08      	pop	{r3}
 8002224:	469e      	mov	lr, r3
 8002226:	4770      	bx	lr

08002228 <_fini>:
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222a:	bf00      	nop
 800222c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222e:	bc08      	pop	{r3}
 8002230:	469e      	mov	lr, r3
 8002232:	4770      	bx	lr
