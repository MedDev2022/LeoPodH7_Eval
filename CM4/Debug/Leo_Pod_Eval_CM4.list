
Leo_Pod_Eval_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec54  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0810eef4  0810eef4  0000fef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810f28c  0810f28c  0001028c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0810f294  0810f294  00010294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0810f29c  0810f29c  0001029c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  10000000  0810f2a4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RAM_D3       000001b8  10000070  0810f314  00011070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00004dc4  10000228  0810f4cc  00011228  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  10004fec  0810f4cc  00011fec  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00011228  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004afb6  00000000  00000000  00011258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000077d6  00000000  00000000  0005c20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002320  00000000  00000000  000639e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001ae8  00000000  00000000  00065d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00043e1e  00000000  00000000  000677f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00029f9a  00000000  00000000  000ab60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a36cd  00000000  00000000  000d55a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00278c75  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a43c  00000000  00000000  00278cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000052  00000000  00000000  002830f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000228 	.word	0x10000228
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810eedc 	.word	0x0810eedc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000022c 	.word	0x1000022c
 81002dc:	0810eedc 	.word	0x0810eedc

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_uldivmod>:
 8100380:	b953      	cbnz	r3, 8100398 <__aeabi_uldivmod+0x18>
 8100382:	b94a      	cbnz	r2, 8100398 <__aeabi_uldivmod+0x18>
 8100384:	2900      	cmp	r1, #0
 8100386:	bf08      	it	eq
 8100388:	2800      	cmpeq	r0, #0
 810038a:	bf1c      	itt	ne
 810038c:	f04f 31ff 	movne.w	r1, #4294967295
 8100390:	f04f 30ff 	movne.w	r0, #4294967295
 8100394:	f000 b988 	b.w	81006a8 <__aeabi_idiv0>
 8100398:	f1ad 0c08 	sub.w	ip, sp, #8
 810039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003a0:	f000 f806 	bl	81003b0 <__udivmoddi4>
 81003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003ac:	b004      	add	sp, #16
 81003ae:	4770      	bx	lr

081003b0 <__udivmoddi4>:
 81003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003b4:	9d08      	ldr	r5, [sp, #32]
 81003b6:	468e      	mov	lr, r1
 81003b8:	4604      	mov	r4, r0
 81003ba:	4688      	mov	r8, r1
 81003bc:	2b00      	cmp	r3, #0
 81003be:	d14a      	bne.n	8100456 <__udivmoddi4+0xa6>
 81003c0:	428a      	cmp	r2, r1
 81003c2:	4617      	mov	r7, r2
 81003c4:	d962      	bls.n	810048c <__udivmoddi4+0xdc>
 81003c6:	fab2 f682 	clz	r6, r2
 81003ca:	b14e      	cbz	r6, 81003e0 <__udivmoddi4+0x30>
 81003cc:	f1c6 0320 	rsb	r3, r6, #32
 81003d0:	fa01 f806 	lsl.w	r8, r1, r6
 81003d4:	fa20 f303 	lsr.w	r3, r0, r3
 81003d8:	40b7      	lsls	r7, r6
 81003da:	ea43 0808 	orr.w	r8, r3, r8
 81003de:	40b4      	lsls	r4, r6
 81003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003e4:	fa1f fc87 	uxth.w	ip, r7
 81003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 81003ec:	0c23      	lsrs	r3, r4, #16
 81003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 81003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 81003f6:	fb01 f20c 	mul.w	r2, r1, ip
 81003fa:	429a      	cmp	r2, r3
 81003fc:	d909      	bls.n	8100412 <__udivmoddi4+0x62>
 81003fe:	18fb      	adds	r3, r7, r3
 8100400:	f101 30ff 	add.w	r0, r1, #4294967295
 8100404:	f080 80ea 	bcs.w	81005dc <__udivmoddi4+0x22c>
 8100408:	429a      	cmp	r2, r3
 810040a:	f240 80e7 	bls.w	81005dc <__udivmoddi4+0x22c>
 810040e:	3902      	subs	r1, #2
 8100410:	443b      	add	r3, r7
 8100412:	1a9a      	subs	r2, r3, r2
 8100414:	b2a3      	uxth	r3, r4
 8100416:	fbb2 f0fe 	udiv	r0, r2, lr
 810041a:	fb0e 2210 	mls	r2, lr, r0, r2
 810041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100422:	fb00 fc0c 	mul.w	ip, r0, ip
 8100426:	459c      	cmp	ip, r3
 8100428:	d909      	bls.n	810043e <__udivmoddi4+0x8e>
 810042a:	18fb      	adds	r3, r7, r3
 810042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8100430:	f080 80d6 	bcs.w	81005e0 <__udivmoddi4+0x230>
 8100434:	459c      	cmp	ip, r3
 8100436:	f240 80d3 	bls.w	81005e0 <__udivmoddi4+0x230>
 810043a:	443b      	add	r3, r7
 810043c:	3802      	subs	r0, #2
 810043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100442:	eba3 030c 	sub.w	r3, r3, ip
 8100446:	2100      	movs	r1, #0
 8100448:	b11d      	cbz	r5, 8100452 <__udivmoddi4+0xa2>
 810044a:	40f3      	lsrs	r3, r6
 810044c:	2200      	movs	r2, #0
 810044e:	e9c5 3200 	strd	r3, r2, [r5]
 8100452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100456:	428b      	cmp	r3, r1
 8100458:	d905      	bls.n	8100466 <__udivmoddi4+0xb6>
 810045a:	b10d      	cbz	r5, 8100460 <__udivmoddi4+0xb0>
 810045c:	e9c5 0100 	strd	r0, r1, [r5]
 8100460:	2100      	movs	r1, #0
 8100462:	4608      	mov	r0, r1
 8100464:	e7f5      	b.n	8100452 <__udivmoddi4+0xa2>
 8100466:	fab3 f183 	clz	r1, r3
 810046a:	2900      	cmp	r1, #0
 810046c:	d146      	bne.n	81004fc <__udivmoddi4+0x14c>
 810046e:	4573      	cmp	r3, lr
 8100470:	d302      	bcc.n	8100478 <__udivmoddi4+0xc8>
 8100472:	4282      	cmp	r2, r0
 8100474:	f200 8105 	bhi.w	8100682 <__udivmoddi4+0x2d2>
 8100478:	1a84      	subs	r4, r0, r2
 810047a:	eb6e 0203 	sbc.w	r2, lr, r3
 810047e:	2001      	movs	r0, #1
 8100480:	4690      	mov	r8, r2
 8100482:	2d00      	cmp	r5, #0
 8100484:	d0e5      	beq.n	8100452 <__udivmoddi4+0xa2>
 8100486:	e9c5 4800 	strd	r4, r8, [r5]
 810048a:	e7e2      	b.n	8100452 <__udivmoddi4+0xa2>
 810048c:	2a00      	cmp	r2, #0
 810048e:	f000 8090 	beq.w	81005b2 <__udivmoddi4+0x202>
 8100492:	fab2 f682 	clz	r6, r2
 8100496:	2e00      	cmp	r6, #0
 8100498:	f040 80a4 	bne.w	81005e4 <__udivmoddi4+0x234>
 810049c:	1a8a      	subs	r2, r1, r2
 810049e:	0c03      	lsrs	r3, r0, #16
 81004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81004a4:	b280      	uxth	r0, r0
 81004a6:	b2bc      	uxth	r4, r7
 81004a8:	2101      	movs	r1, #1
 81004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 81004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 81004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81004b6:	fb04 f20c 	mul.w	r2, r4, ip
 81004ba:	429a      	cmp	r2, r3
 81004bc:	d907      	bls.n	81004ce <__udivmoddi4+0x11e>
 81004be:	18fb      	adds	r3, r7, r3
 81004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 81004c4:	d202      	bcs.n	81004cc <__udivmoddi4+0x11c>
 81004c6:	429a      	cmp	r2, r3
 81004c8:	f200 80e0 	bhi.w	810068c <__udivmoddi4+0x2dc>
 81004cc:	46c4      	mov	ip, r8
 81004ce:	1a9b      	subs	r3, r3, r2
 81004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 81004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 81004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 81004dc:	fb02 f404 	mul.w	r4, r2, r4
 81004e0:	429c      	cmp	r4, r3
 81004e2:	d907      	bls.n	81004f4 <__udivmoddi4+0x144>
 81004e4:	18fb      	adds	r3, r7, r3
 81004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 81004ea:	d202      	bcs.n	81004f2 <__udivmoddi4+0x142>
 81004ec:	429c      	cmp	r4, r3
 81004ee:	f200 80ca 	bhi.w	8100686 <__udivmoddi4+0x2d6>
 81004f2:	4602      	mov	r2, r0
 81004f4:	1b1b      	subs	r3, r3, r4
 81004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 81004fa:	e7a5      	b.n	8100448 <__udivmoddi4+0x98>
 81004fc:	f1c1 0620 	rsb	r6, r1, #32
 8100500:	408b      	lsls	r3, r1
 8100502:	fa22 f706 	lsr.w	r7, r2, r6
 8100506:	431f      	orrs	r7, r3
 8100508:	fa0e f401 	lsl.w	r4, lr, r1
 810050c:	fa20 f306 	lsr.w	r3, r0, r6
 8100510:	fa2e fe06 	lsr.w	lr, lr, r6
 8100514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100518:	4323      	orrs	r3, r4
 810051a:	fa00 f801 	lsl.w	r8, r0, r1
 810051e:	fa1f fc87 	uxth.w	ip, r7
 8100522:	fbbe f0f9 	udiv	r0, lr, r9
 8100526:	0c1c      	lsrs	r4, r3, #16
 8100528:	fb09 ee10 	mls	lr, r9, r0, lr
 810052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100530:	fb00 fe0c 	mul.w	lr, r0, ip
 8100534:	45a6      	cmp	lr, r4
 8100536:	fa02 f201 	lsl.w	r2, r2, r1
 810053a:	d909      	bls.n	8100550 <__udivmoddi4+0x1a0>
 810053c:	193c      	adds	r4, r7, r4
 810053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8100542:	f080 809c 	bcs.w	810067e <__udivmoddi4+0x2ce>
 8100546:	45a6      	cmp	lr, r4
 8100548:	f240 8099 	bls.w	810067e <__udivmoddi4+0x2ce>
 810054c:	3802      	subs	r0, #2
 810054e:	443c      	add	r4, r7
 8100550:	eba4 040e 	sub.w	r4, r4, lr
 8100554:	fa1f fe83 	uxth.w	lr, r3
 8100558:	fbb4 f3f9 	udiv	r3, r4, r9
 810055c:	fb09 4413 	mls	r4, r9, r3, r4
 8100560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8100564:	fb03 fc0c 	mul.w	ip, r3, ip
 8100568:	45a4      	cmp	ip, r4
 810056a:	d908      	bls.n	810057e <__udivmoddi4+0x1ce>
 810056c:	193c      	adds	r4, r7, r4
 810056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8100572:	f080 8082 	bcs.w	810067a <__udivmoddi4+0x2ca>
 8100576:	45a4      	cmp	ip, r4
 8100578:	d97f      	bls.n	810067a <__udivmoddi4+0x2ca>
 810057a:	3b02      	subs	r3, #2
 810057c:	443c      	add	r4, r7
 810057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8100582:	eba4 040c 	sub.w	r4, r4, ip
 8100586:	fba0 ec02 	umull	lr, ip, r0, r2
 810058a:	4564      	cmp	r4, ip
 810058c:	4673      	mov	r3, lr
 810058e:	46e1      	mov	r9, ip
 8100590:	d362      	bcc.n	8100658 <__udivmoddi4+0x2a8>
 8100592:	d05f      	beq.n	8100654 <__udivmoddi4+0x2a4>
 8100594:	b15d      	cbz	r5, 81005ae <__udivmoddi4+0x1fe>
 8100596:	ebb8 0203 	subs.w	r2, r8, r3
 810059a:	eb64 0409 	sbc.w	r4, r4, r9
 810059e:	fa04 f606 	lsl.w	r6, r4, r6
 81005a2:	fa22 f301 	lsr.w	r3, r2, r1
 81005a6:	431e      	orrs	r6, r3
 81005a8:	40cc      	lsrs	r4, r1
 81005aa:	e9c5 6400 	strd	r6, r4, [r5]
 81005ae:	2100      	movs	r1, #0
 81005b0:	e74f      	b.n	8100452 <__udivmoddi4+0xa2>
 81005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 81005b6:	0c01      	lsrs	r1, r0, #16
 81005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 81005bc:	b280      	uxth	r0, r0
 81005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 81005c2:	463b      	mov	r3, r7
 81005c4:	4638      	mov	r0, r7
 81005c6:	463c      	mov	r4, r7
 81005c8:	46b8      	mov	r8, r7
 81005ca:	46be      	mov	lr, r7
 81005cc:	2620      	movs	r6, #32
 81005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 81005d2:	eba2 0208 	sub.w	r2, r2, r8
 81005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 81005da:	e766      	b.n	81004aa <__udivmoddi4+0xfa>
 81005dc:	4601      	mov	r1, r0
 81005de:	e718      	b.n	8100412 <__udivmoddi4+0x62>
 81005e0:	4610      	mov	r0, r2
 81005e2:	e72c      	b.n	810043e <__udivmoddi4+0x8e>
 81005e4:	f1c6 0220 	rsb	r2, r6, #32
 81005e8:	fa2e f302 	lsr.w	r3, lr, r2
 81005ec:	40b7      	lsls	r7, r6
 81005ee:	40b1      	lsls	r1, r6
 81005f0:	fa20 f202 	lsr.w	r2, r0, r2
 81005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81005f8:	430a      	orrs	r2, r1
 81005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 81005fe:	b2bc      	uxth	r4, r7
 8100600:	fb0e 3318 	mls	r3, lr, r8, r3
 8100604:	0c11      	lsrs	r1, r2, #16
 8100606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810060a:	fb08 f904 	mul.w	r9, r8, r4
 810060e:	40b0      	lsls	r0, r6
 8100610:	4589      	cmp	r9, r1
 8100612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8100616:	b280      	uxth	r0, r0
 8100618:	d93e      	bls.n	8100698 <__udivmoddi4+0x2e8>
 810061a:	1879      	adds	r1, r7, r1
 810061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8100620:	d201      	bcs.n	8100626 <__udivmoddi4+0x276>
 8100622:	4589      	cmp	r9, r1
 8100624:	d81f      	bhi.n	8100666 <__udivmoddi4+0x2b6>
 8100626:	eba1 0109 	sub.w	r1, r1, r9
 810062a:	fbb1 f9fe 	udiv	r9, r1, lr
 810062e:	fb09 f804 	mul.w	r8, r9, r4
 8100632:	fb0e 1119 	mls	r1, lr, r9, r1
 8100636:	b292      	uxth	r2, r2
 8100638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810063c:	4542      	cmp	r2, r8
 810063e:	d229      	bcs.n	8100694 <__udivmoddi4+0x2e4>
 8100640:	18ba      	adds	r2, r7, r2
 8100642:	f109 31ff 	add.w	r1, r9, #4294967295
 8100646:	d2c4      	bcs.n	81005d2 <__udivmoddi4+0x222>
 8100648:	4542      	cmp	r2, r8
 810064a:	d2c2      	bcs.n	81005d2 <__udivmoddi4+0x222>
 810064c:	f1a9 0102 	sub.w	r1, r9, #2
 8100650:	443a      	add	r2, r7
 8100652:	e7be      	b.n	81005d2 <__udivmoddi4+0x222>
 8100654:	45f0      	cmp	r8, lr
 8100656:	d29d      	bcs.n	8100594 <__udivmoddi4+0x1e4>
 8100658:	ebbe 0302 	subs.w	r3, lr, r2
 810065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8100660:	3801      	subs	r0, #1
 8100662:	46e1      	mov	r9, ip
 8100664:	e796      	b.n	8100594 <__udivmoddi4+0x1e4>
 8100666:	eba7 0909 	sub.w	r9, r7, r9
 810066a:	4449      	add	r1, r9
 810066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8100670:	fbb1 f9fe 	udiv	r9, r1, lr
 8100674:	fb09 f804 	mul.w	r8, r9, r4
 8100678:	e7db      	b.n	8100632 <__udivmoddi4+0x282>
 810067a:	4673      	mov	r3, lr
 810067c:	e77f      	b.n	810057e <__udivmoddi4+0x1ce>
 810067e:	4650      	mov	r0, sl
 8100680:	e766      	b.n	8100550 <__udivmoddi4+0x1a0>
 8100682:	4608      	mov	r0, r1
 8100684:	e6fd      	b.n	8100482 <__udivmoddi4+0xd2>
 8100686:	443b      	add	r3, r7
 8100688:	3a02      	subs	r2, #2
 810068a:	e733      	b.n	81004f4 <__udivmoddi4+0x144>
 810068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8100690:	443b      	add	r3, r7
 8100692:	e71c      	b.n	81004ce <__udivmoddi4+0x11e>
 8100694:	4649      	mov	r1, r9
 8100696:	e79c      	b.n	81005d2 <__udivmoddi4+0x222>
 8100698:	eba1 0109 	sub.w	r1, r1, r9
 810069c:	46c4      	mov	ip, r8
 810069e:	fbb1 f9fe 	udiv	r9, r1, lr
 81006a2:	fb09 f804 	mul.w	r8, r9, r4
 81006a6:	e7c4      	b.n	8100632 <__udivmoddi4+0x282>

081006a8 <__aeabi_idiv0>:
 81006a8:	4770      	bx	lr
 81006aa:	bf00      	nop

081006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81006ac:	b480      	push	{r7}
 81006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81006b0:	4b09      	ldr	r3, [pc, #36]	@ (81006d8 <SystemInit+0x2c>)
 81006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81006b6:	4a08      	ldr	r2, [pc, #32]	@ (81006d8 <SystemInit+0x2c>)
 81006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006c0:	4b05      	ldr	r3, [pc, #20]	@ (81006d8 <SystemInit+0x2c>)
 81006c2:	691b      	ldr	r3, [r3, #16]
 81006c4:	4a04      	ldr	r2, [pc, #16]	@ (81006d8 <SystemInit+0x2c>)
 81006c6:	f043 0310 	orr.w	r3, r3, #16
 81006ca:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81006cc:	bf00      	nop
 81006ce:	46bd      	mov	sp, r7
 81006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006d4:	4770      	bx	lr
 81006d6:	bf00      	nop
 81006d8:	e000ed00 	.word	0xe000ed00

081006dc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 81006dc:	b480      	push	{r7}
 81006de:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 81006e0:	4b09      	ldr	r3, [pc, #36]	@ (8100708 <ExitRun0Mode+0x2c>)
 81006e2:	68db      	ldr	r3, [r3, #12]
 81006e4:	4a08      	ldr	r2, [pc, #32]	@ (8100708 <ExitRun0Mode+0x2c>)
 81006e6:	f023 0302 	bic.w	r3, r3, #2
 81006ea:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 81006ec:	bf00      	nop
 81006ee:	4b06      	ldr	r3, [pc, #24]	@ (8100708 <ExitRun0Mode+0x2c>)
 81006f0:	685b      	ldr	r3, [r3, #4]
 81006f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81006f6:	2b00      	cmp	r3, #0
 81006f8:	d0f9      	beq.n	81006ee <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 81006fa:	bf00      	nop
 81006fc:	bf00      	nop
 81006fe:	46bd      	mov	sp, r7
 8100700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100704:	4770      	bx	lr
 8100706:	bf00      	nop
 8100708:	58024800 	.word	0x58024800

0810070c <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 810070c:	b480      	push	{r7}
 810070e:	b083      	sub	sp, #12
 8100710:	af00      	add	r7, sp, #0
 8100712:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8100714:	687b      	ldr	r3, [r7, #4]
 8100716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810071a:	d205      	bcs.n	8100728 <_ZSt16__deque_buf_sizej+0x1c>
 810071c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8100720:	687b      	ldr	r3, [r7, #4]
 8100722:	fbb2 f3f3 	udiv	r3, r2, r3
 8100726:	e000      	b.n	810072a <_ZSt16__deque_buf_sizej+0x1e>
 8100728:	2301      	movs	r3, #1
 810072a:	4618      	mov	r0, r3
 810072c:	370c      	adds	r7, #12
 810072e:	46bd      	mov	sp, r7
 8100730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100734:	4770      	bx	lr

08100736 <_ZNSt5dequeIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8100736:	b580      	push	{r7, lr}
 8100738:	b082      	sub	sp, #8
 810073a:	af00      	add	r7, sp, #0
 810073c:	6078      	str	r0, [r7, #4]
 810073e:	687b      	ldr	r3, [r7, #4]
 8100740:	4618      	mov	r0, r3
 8100742:	f000 facc 	bl	8100cde <_ZNSt11_Deque_baseIhSaIhEEC1Ev>
 8100746:	687b      	ldr	r3, [r7, #4]
 8100748:	4618      	mov	r0, r3
 810074a:	3708      	adds	r7, #8
 810074c:	46bd      	mov	sp, r7
 810074e:	bd80      	pop	{r7, pc}

08100750 <_ZN6ClientC1EP20__UART_HandleTypeDef>:
#include <cstdio>
#include "task.h"
#include "DayCam.hpp"  // Include the actual DayCam class
#include "LRX20A.hpp"

Client::Client(UART_HandleTypeDef* huart)
 8100750:	b580      	push	{r7, lr}
 8100752:	b082      	sub	sp, #8
 8100754:	af00      	add	r7, sp, #0
 8100756:	6078      	str	r0, [r7, #4]
 8100758:	6039      	str	r1, [r7, #0]
    : UartEndpoint(huart) {}
 810075a:	687b      	ldr	r3, [r7, #4]
 810075c:	6839      	ldr	r1, [r7, #0]
 810075e:	4618      	mov	r0, r3
 8100760:	f002 f828 	bl	81027b4 <_ZN12UartEndpointC1EP20__UART_HandleTypeDef>
 8100764:	4a14      	ldr	r2, [pc, #80]	@ (81007b8 <_ZN6ClientC1EP20__UART_HandleTypeDef+0x68>)
 8100766:	687b      	ldr	r3, [r7, #4]
 8100768:	601a      	str	r2, [r3, #0]
 810076a:	687b      	ldr	r3, [r7, #4]
 810076c:	333c      	adds	r3, #60	@ 0x3c
 810076e:	4618      	mov	r0, r3
 8100770:	f7ff ffe1 	bl	8100736 <_ZNSt5dequeIhSaIhEEC1Ev>
 8100774:	687b      	ldr	r3, [r7, #4]
 8100776:	3364      	adds	r3, #100	@ 0x64
 8100778:	4618      	mov	r0, r3
 810077a:	f003 fc22 	bl	8103fc2 <_ZN4comm7MessageC1Ev>
 810077e:	687b      	ldr	r3, [r7, #4]
 8100780:	2200      	movs	r2, #0
 8100782:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 8100786:	687b      	ldr	r3, [r7, #4]
 8100788:	2200      	movs	r2, #0
 810078a:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 810078e:	687b      	ldr	r3, [r7, #4]
 8100790:	2200      	movs	r2, #0
 8100792:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
 8100796:	687b      	ldr	r3, [r7, #4]
 8100798:	2200      	movs	r2, #0
 810079a:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 810079e:	687b      	ldr	r3, [r7, #4]
 81007a0:	2200      	movs	r2, #0
 81007a2:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
 81007a6:	687b      	ldr	r3, [r7, #4]
 81007a8:	2200      	movs	r2, #0
 81007aa:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 81007ae:	687b      	ldr	r3, [r7, #4]
 81007b0:	4618      	mov	r0, r3
 81007b2:	3708      	adds	r7, #8
 81007b4:	46bd      	mov	sp, r7
 81007b6:	bd80      	pop	{r7, pc}
 81007b8:	0810f1c8 	.word	0x0810f1c8

081007bc <_ZN6Client4InitEv>:

void Client::Init() {
 81007bc:	b580      	push	{r7, lr}
 81007be:	b082      	sub	sp, #8
 81007c0:	af00      	add	r7, sp, #0
 81007c2:	6078      	str	r0, [r7, #4]
//    static uint8_t byte;
    if (!StartReceive(&byte_, 1)) {
 81007c4:	6878      	ldr	r0, [r7, #4]
 81007c6:	687b      	ldr	r3, [r7, #4]
 81007c8:	3338      	adds	r3, #56	@ 0x38
 81007ca:	2201      	movs	r2, #1
 81007cc:	4619      	mov	r1, r3
 81007ce:	f002 f813 	bl	81027f8 <_ZN12UartEndpoint12StartReceiveEPhj>
 81007d2:	4603      	mov	r3, r0
 81007d4:	f083 0301 	eor.w	r3, r3, #1
 81007d8:	b2db      	uxtb	r3, r3
 81007da:	2b00      	cmp	r3, #0
 81007dc:	d003      	beq.n	81007e6 <_ZN6Client4InitEv+0x2a>
        printf("❌ StartReceive failed\n");
 81007de:	4805      	ldr	r0, [pc, #20]	@ (81007f4 <_ZN6Client4InitEv+0x38>)
 81007e0:	f00d fcca 	bl	810e178 <puts>
    }
    else printf("❌ StartReceive success\n");
}
 81007e4:	e002      	b.n	81007ec <_ZN6Client4InitEv+0x30>
    else printf("❌ StartReceive success\n");
 81007e6:	4804      	ldr	r0, [pc, #16]	@ (81007f8 <_ZN6Client4InitEv+0x3c>)
 81007e8:	f00d fcc6 	bl	810e178 <puts>
}
 81007ec:	bf00      	nop
 81007ee:	3708      	adds	r7, #8
 81007f0:	46bd      	mov	sp, r7
 81007f2:	bd80      	pop	{r7, pc}
 81007f4:	0810eef4 	.word	0x0810eef4
 81007f8:	0810ef0c 	.word	0x0810ef0c

081007fc <_ZN6Client13onReceiveByteEh>:
//void Client::onReceiveByte(uint8_t byte) {
//    printf("📥 Received byte: 0x%02X\n", byte);
//    StartReceive(&byte_, 1);  // Re-arm
//}

void Client::onReceiveByte(uint8_t byte) {
 81007fc:	b580      	push	{r7, lr}
 81007fe:	b084      	sub	sp, #16
 8100800:	af00      	add	r7, sp, #0
 8100802:	6078      	str	r0, [r7, #4]
 8100804:	460b      	mov	r3, r1
 8100806:	70fb      	strb	r3, [r7, #3]
    const TickType_t now = xTaskGetTickCount();
 8100808:	f00c f8a8 	bl	810c95c <xTaskGetTickCount>
 810080c:	60f8      	str	r0, [r7, #12]

    // Start of new message
    if (!receiving_) {
 810080e:	687b      	ldr	r3, [r7, #4]
 8100810:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8100814:	f083 0301 	eor.w	r3, r3, #1
 8100818:	b2db      	uxtb	r3, r3
 810081a:	2b00      	cmp	r3, #0
 810081c:	d013      	beq.n	8100846 <_ZN6Client13onReceiveByteEh+0x4a>
        if (byte == 0xAA) { // Assume HEADER
 810081e:	78fb      	ldrb	r3, [r7, #3]
 8100820:	2baa      	cmp	r3, #170	@ 0xaa
 8100822:	d174      	bne.n	810090e <_ZN6Client13onReceiveByteEh+0x112>
            buffer_[0] = byte;
 8100824:	687b      	ldr	r3, [r7, #4]
 8100826:	78fa      	ldrb	r2, [r7, #3]
 8100828:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            bufferIndex_ = 1;
 810082c:	687b      	ldr	r3, [r7, #4]
 810082e:	2201      	movs	r2, #1
 8100830:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            firstByteTick_ = now;
 8100834:	687b      	ldr	r3, [r7, #4]
 8100836:	68fa      	ldr	r2, [r7, #12]
 8100838:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
            receiving_ = true;
 810083c:	687b      	ldr	r3, [r7, #4]
 810083e:	2201      	movs	r2, #1
 8100840:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        }
        return;
 8100844:	e063      	b.n	810090e <_ZN6Client13onReceiveByteEh+0x112>
    }

    // Timeout check
    if ((now - firstByteTick_) > pdMS_TO_TICKS(500)) {
 8100846:	687b      	ldr	r3, [r7, #4]
 8100848:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 810084c:	68fa      	ldr	r2, [r7, #12]
 810084e:	1ad3      	subs	r3, r2, r3
 8100850:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8100854:	d906      	bls.n	8100864 <_ZN6Client13onReceiveByteEh+0x68>
        resetReception();  // Clear buffer, reset flags
 8100856:	6878      	ldr	r0, [r7, #4]
 8100858:	f000 f860 	bl	810091c <_ZN6Client14resetReceptionEv>
        printf("Timeout/r/n");
 810085c:	482e      	ldr	r0, [pc, #184]	@ (8100918 <_ZN6Client13onReceiveByteEh+0x11c>)
 810085e:	f00d fc1b 	bl	810e098 <iprintf>
        return;
 8100862:	e055      	b.n	8100910 <_ZN6Client13onReceiveByteEh+0x114>
    }

    // Accumulate byte
    if (bufferIndex_ < sizeof(buffer_)) {
 8100864:	687b      	ldr	r3, [r7, #4]
 8100866:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 810086a:	2bff      	cmp	r3, #255	@ 0xff
 810086c:	d811      	bhi.n	8100892 <_ZN6Client13onReceiveByteEh+0x96>
        buffer_[bufferIndex_++] = byte;
 810086e:	687b      	ldr	r3, [r7, #4]
 8100870:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8100874:	1c59      	adds	r1, r3, #1
 8100876:	687a      	ldr	r2, [r7, #4]
 8100878:	f8c2 117c 	str.w	r1, [r2, #380]	@ 0x17c
 810087c:	687a      	ldr	r2, [r7, #4]
 810087e:	4413      	add	r3, r2
 8100880:	78fa      	ldrb	r2, [r7, #3]
 8100882:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        resetReception();
        return;
    }

    // Wait until we have at least length
    if (bufferIndex_ == 6) {
 8100886:	687b      	ldr	r3, [r7, #4]
 8100888:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 810088c:	2b06      	cmp	r3, #6
 810088e:	d10c      	bne.n	81008aa <_ZN6Client13onReceiveByteEh+0xae>
 8100890:	e003      	b.n	810089a <_ZN6Client13onReceiveByteEh+0x9e>
        resetReception();
 8100892:	6878      	ldr	r0, [r7, #4]
 8100894:	f000 f842 	bl	810091c <_ZN6Client14resetReceptionEv>
        return;
 8100898:	e03a      	b.n	8100910 <_ZN6Client13onReceiveByteEh+0x114>
        expectedLength_ = 6 + buffer_[5] + 2; // 6 header+meta + payload + CRC+FOOTER
 810089a:	687b      	ldr	r3, [r7, #4]
 810089c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81008a0:	3308      	adds	r3, #8
 81008a2:	461a      	mov	r2, r3
 81008a4:	687b      	ldr	r3, [r7, #4]
 81008a6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    }

    if (bufferIndex_ >= 6 && bufferIndex_ == expectedLength_) {
 81008aa:	687b      	ldr	r3, [r7, #4]
 81008ac:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 81008b0:	2b05      	cmp	r3, #5
 81008b2:	d92d      	bls.n	8100910 <_ZN6Client13onReceiveByteEh+0x114>
 81008b4:	687b      	ldr	r3, [r7, #4]
 81008b6:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 81008ba:	687b      	ldr	r3, [r7, #4]
 81008bc:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 81008c0:	429a      	cmp	r2, r3
 81008c2:	d125      	bne.n	8100910 <_ZN6Client13onReceiveByteEh+0x114>
        if (buffer_[expectedLength_-1] == 0x55) { // FOOTER
 81008c4:	687b      	ldr	r3, [r7, #4]
 81008c6:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 81008ca:	3b01      	subs	r3, #1
 81008cc:	687a      	ldr	r2, [r7, #4]
 81008ce:	4413      	add	r3, r2
 81008d0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 81008d4:	2b55      	cmp	r3, #85	@ 0x55
 81008d6:	d116      	bne.n	8100906 <_ZN6Client13onReceiveByteEh+0x10a>
            if (verifyCRC(buffer_, expectedLength_)) {
 81008d8:	687b      	ldr	r3, [r7, #4]
 81008da:	f103 017c 	add.w	r1, r3, #124	@ 0x7c
 81008de:	687b      	ldr	r3, [r7, #4]
 81008e0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 81008e4:	461a      	mov	r2, r3
 81008e6:	6878      	ldr	r0, [r7, #4]
 81008e8:	f000 f9b8 	bl	8100c5c <_ZN6Client9verifyCRCEPhj>
 81008ec:	4603      	mov	r3, r0
 81008ee:	2b00      	cmp	r3, #0
 81008f0:	d009      	beq.n	8100906 <_ZN6Client13onReceiveByteEh+0x10a>
                parseAndProcess(buffer_, expectedLength_);
 81008f2:	687b      	ldr	r3, [r7, #4]
 81008f4:	f103 017c 	add.w	r1, r3, #124	@ 0x7c
 81008f8:	687b      	ldr	r3, [r7, #4]
 81008fa:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 81008fe:	461a      	mov	r2, r3
 8100900:	6878      	ldr	r0, [r7, #4]
 8100902:	f000 f84b 	bl	810099c <_ZN6Client15parseAndProcessEPhj>
            }
        }
        resetReception();
 8100906:	6878      	ldr	r0, [r7, #4]
 8100908:	f000 f808 	bl	810091c <_ZN6Client14resetReceptionEv>
 810090c:	e000      	b.n	8100910 <_ZN6Client13onReceiveByteEh+0x114>
        return;
 810090e:	bf00      	nop
    }
}
 8100910:	3710      	adds	r7, #16
 8100912:	46bd      	mov	sp, r7
 8100914:	bd80      	pop	{r7, pc}
 8100916:	bf00      	nop
 8100918:	0810ef28 	.word	0x0810ef28

0810091c <_ZN6Client14resetReceptionEv>:

void Client::resetReception() {
 810091c:	b480      	push	{r7}
 810091e:	b083      	sub	sp, #12
 8100920:	af00      	add	r7, sp, #0
 8100922:	6078      	str	r0, [r7, #4]
    bufferIndex_ = 0;
 8100924:	687b      	ldr	r3, [r7, #4]
 8100926:	2200      	movs	r2, #0
 8100928:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    receiving_ = false;
 810092c:	687b      	ldr	r3, [r7, #4]
 810092e:	2200      	movs	r2, #0
 8100930:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
    firstByteTick_ = 0;
 8100934:	687b      	ldr	r3, [r7, #4]
 8100936:	2200      	movs	r2, #0
 8100938:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
}
 810093c:	bf00      	nop
 810093e:	370c      	adds	r7, #12
 8100940:	46bd      	mov	sp, r7
 8100942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100946:	4770      	bx	lr

08100948 <_ZN6Client15processIncomingEv>:
////            message_.clear();  // ready for next message
//        }
//    }
//}

void Client::processIncoming() {
 8100948:	b580      	push	{r7, lr}
 810094a:	b084      	sub	sp, #16
 810094c:	af00      	add	r7, sp, #0
 810094e:	6078      	str	r0, [r7, #4]
    // Example logic (depending on your architecture)
    while (!rxQueue_.empty()) {
 8100950:	e013      	b.n	810097a <_ZN6Client15processIncomingEv+0x32>
        auto msg = rxQueue_.front();
 8100952:	687b      	ldr	r3, [r7, #4]
 8100954:	3310      	adds	r3, #16
 8100956:	4618      	mov	r0, r3
 8100958:	f000 f9e4 	bl	8100d24 <_ZNSt5dequeIhSaIhEE5frontEv>
 810095c:	4603      	mov	r3, r0
 810095e:	781b      	ldrb	r3, [r3, #0]
 8100960:	73fb      	strb	r3, [r7, #15]
        rxQueue_.pop_front();
 8100962:	687b      	ldr	r3, [r7, #4]
 8100964:	3310      	adds	r3, #16
 8100966:	4618      	mov	r0, r3
 8100968:	f000 f9f0 	bl	8100d4c <_ZNSt5dequeIhSaIhEE9pop_frontEv>
        parseAndProcess(reinterpret_cast<uint8_t*>(&msg), sizeof(comm::Message));
 810096c:	f107 030f 	add.w	r3, r7, #15
 8100970:	2218      	movs	r2, #24
 8100972:	4619      	mov	r1, r3
 8100974:	6878      	ldr	r0, [r7, #4]
 8100976:	f000 f811 	bl	810099c <_ZN6Client15parseAndProcessEPhj>
    while (!rxQueue_.empty()) {
 810097a:	687b      	ldr	r3, [r7, #4]
 810097c:	3310      	adds	r3, #16
 810097e:	4618      	mov	r0, r3
 8100980:	f000 f9be 	bl	8100d00 <_ZNKSt5dequeIhSaIhEE5emptyEv>
 8100984:	4603      	mov	r3, r0
 8100986:	f083 0301 	eor.w	r3, r3, #1
 810098a:	b2db      	uxtb	r3, r3
 810098c:	2b00      	cmp	r3, #0
 810098e:	d1e0      	bne.n	8100952 <_ZN6Client15processIncomingEv+0xa>
    }
}
 8100990:	bf00      	nop
 8100992:	bf00      	nop
 8100994:	3710      	adds	r7, #16
 8100996:	46bd      	mov	sp, r7
 8100998:	bd80      	pop	{r7, pc}
	...

0810099c <_ZN6Client15parseAndProcessEPhj>:

void Client::parseAndProcess(uint8_t* msg, size_t len) {
 810099c:	b580      	push	{r7, lr}
 810099e:	b088      	sub	sp, #32
 81009a0:	af00      	add	r7, sp, #0
 81009a2:	60f8      	str	r0, [r7, #12]
 81009a4:	60b9      	str	r1, [r7, #8]
 81009a6:	607a      	str	r2, [r7, #4]
    uint8_t srcID = msg[1];
 81009a8:	68bb      	ldr	r3, [r7, #8]
 81009aa:	785b      	ldrb	r3, [r3, #1]
 81009ac:	77fb      	strb	r3, [r7, #31]
    uint8_t destID = msg[2];
 81009ae:	68bb      	ldr	r3, [r7, #8]
 81009b0:	789b      	ldrb	r3, [r3, #2]
 81009b2:	77bb      	strb	r3, [r7, #30]
    uint8_t opCode = msg[3];
 81009b4:	68bb      	ldr	r3, [r7, #8]
 81009b6:	78db      	ldrb	r3, [r3, #3]
 81009b8:	777b      	strb	r3, [r7, #29]
    uint8_t addr   = msg[4];
 81009ba:	68bb      	ldr	r3, [r7, #8]
 81009bc:	791b      	ldrb	r3, [r3, #4]
 81009be:	773b      	strb	r3, [r7, #28]
    uint8_t length = msg[5];
 81009c0:	68bb      	ldr	r3, [r7, #8]
 81009c2:	795b      	ldrb	r3, [r3, #5]
 81009c4:	76fb      	strb	r3, [r7, #27]
    uint8_t* payload = &msg[6];
 81009c6:	68bb      	ldr	r3, [r7, #8]
 81009c8:	3306      	adds	r3, #6
 81009ca:	617b      	str	r3, [r7, #20]

    // You can now switch based on opCode, etc.
    switch (opCode) {
 81009cc:	7f7b      	ldrb	r3, [r7, #29]
 81009ce:	3b01      	subs	r3, #1
 81009d0:	2b54      	cmp	r3, #84	@ 0x54
 81009d2:	f200 8131 	bhi.w	8100c38 <_ZN6Client15parseAndProcessEPhj+0x29c>
 81009d6:	a201      	add	r2, pc, #4	@ (adr r2, 81009dc <_ZN6Client15parseAndProcessEPhj+0x40>)
 81009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81009dc:	08100b31 	.word	0x08100b31
 81009e0:	08100b4b 	.word	0x08100b4b
 81009e4:	08100b63 	.word	0x08100b63
 81009e8:	08100b93 	.word	0x08100b93
 81009ec:	08100ba1 	.word	0x08100ba1
 81009f0:	08100bb9 	.word	0x08100bb9
 81009f4:	08100bd1 	.word	0x08100bd1
 81009f8:	08100c01 	.word	0x08100c01
 81009fc:	08100c39 	.word	0x08100c39
 8100a00:	08100c39 	.word	0x08100c39
 8100a04:	08100c39 	.word	0x08100c39
 8100a08:	08100c39 	.word	0x08100c39
 8100a0c:	08100c39 	.word	0x08100c39
 8100a10:	08100c39 	.word	0x08100c39
 8100a14:	08100c39 	.word	0x08100c39
 8100a18:	08100c39 	.word	0x08100c39
 8100a1c:	08100c39 	.word	0x08100c39
 8100a20:	08100c39 	.word	0x08100c39
 8100a24:	08100c39 	.word	0x08100c39
 8100a28:	08100c39 	.word	0x08100c39
 8100a2c:	08100c39 	.word	0x08100c39
 8100a30:	08100c39 	.word	0x08100c39
 8100a34:	08100c39 	.word	0x08100c39
 8100a38:	08100c39 	.word	0x08100c39
 8100a3c:	08100c39 	.word	0x08100c39
 8100a40:	08100c39 	.word	0x08100c39
 8100a44:	08100c39 	.word	0x08100c39
 8100a48:	08100c39 	.word	0x08100c39
 8100a4c:	08100c39 	.word	0x08100c39
 8100a50:	08100c39 	.word	0x08100c39
 8100a54:	08100c39 	.word	0x08100c39
 8100a58:	08100c39 	.word	0x08100c39
 8100a5c:	08100c39 	.word	0x08100c39
 8100a60:	08100c39 	.word	0x08100c39
 8100a64:	08100c39 	.word	0x08100c39
 8100a68:	08100c39 	.word	0x08100c39
 8100a6c:	08100c39 	.word	0x08100c39
 8100a70:	08100c39 	.word	0x08100c39
 8100a74:	08100c39 	.word	0x08100c39
 8100a78:	08100c39 	.word	0x08100c39
 8100a7c:	08100c39 	.word	0x08100c39
 8100a80:	08100c39 	.word	0x08100c39
 8100a84:	08100c39 	.word	0x08100c39
 8100a88:	08100c39 	.word	0x08100c39
 8100a8c:	08100c39 	.word	0x08100c39
 8100a90:	08100c39 	.word	0x08100c39
 8100a94:	08100c39 	.word	0x08100c39
 8100a98:	08100c39 	.word	0x08100c39
 8100a9c:	08100c39 	.word	0x08100c39
 8100aa0:	08100c39 	.word	0x08100c39
 8100aa4:	08100c39 	.word	0x08100c39
 8100aa8:	08100c39 	.word	0x08100c39
 8100aac:	08100c39 	.word	0x08100c39
 8100ab0:	08100c39 	.word	0x08100c39
 8100ab4:	08100c39 	.word	0x08100c39
 8100ab8:	08100c39 	.word	0x08100c39
 8100abc:	08100c39 	.word	0x08100c39
 8100ac0:	08100c39 	.word	0x08100c39
 8100ac4:	08100c39 	.word	0x08100c39
 8100ac8:	08100c39 	.word	0x08100c39
 8100acc:	08100c39 	.word	0x08100c39
 8100ad0:	08100c39 	.word	0x08100c39
 8100ad4:	08100c39 	.word	0x08100c39
 8100ad8:	08100c39 	.word	0x08100c39
 8100adc:	08100c39 	.word	0x08100c39
 8100ae0:	08100c39 	.word	0x08100c39
 8100ae4:	08100c39 	.word	0x08100c39
 8100ae8:	08100c39 	.word	0x08100c39
 8100aec:	08100c39 	.word	0x08100c39
 8100af0:	08100c39 	.word	0x08100c39
 8100af4:	08100c39 	.word	0x08100c39
 8100af8:	08100c39 	.word	0x08100c39
 8100afc:	08100c39 	.word	0x08100c39
 8100b00:	08100c39 	.word	0x08100c39
 8100b04:	08100c39 	.word	0x08100c39
 8100b08:	08100c39 	.word	0x08100c39
 8100b0c:	08100c39 	.word	0x08100c39
 8100b10:	08100c39 	.word	0x08100c39
 8100b14:	08100c39 	.word	0x08100c39
 8100b18:	08100c39 	.word	0x08100c39
 8100b1c:	08100c39 	.word	0x08100c39
 8100b20:	08100c39 	.word	0x08100c39
 8100b24:	08100c0f 	.word	0x08100c0f
 8100b28:	08100c1d 	.word	0x08100c1d
 8100b2c:	08100c2b 	.word	0x08100c2b
        case 0x01:
        	//dayCam_->SendCommand(dayCam_->zoom_teleVar, sizeof(dayCam_->zoom_teleVar));
        	if (payload != nullptr)
 8100b30:	697b      	ldr	r3, [r7, #20]
 8100b32:	2b00      	cmp	r3, #0
 8100b34:	f000 8082 	beq.w	8100c3c <_ZN6Client15parseAndProcessEPhj+0x2a0>
        		dayCam_->handleZoomIn(payload, length);
 8100b38:	68fb      	ldr	r3, [r7, #12]
 8100b3a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8100b3e:	7efa      	ldrb	r2, [r7, #27]
 8100b40:	6979      	ldr	r1, [r7, #20]
 8100b42:	4618      	mov	r0, r3
 8100b44:	f000 fd9e 	bl	8101684 <_ZN6DayCam12handleZoomInEPhh>
            break;
 8100b48:	e078      	b.n	8100c3c <_ZN6Client15parseAndProcessEPhj+0x2a0>
        case 0x02:
        	if (payload != nullptr)
 8100b4a:	697b      	ldr	r3, [r7, #20]
 8100b4c:	2b00      	cmp	r3, #0
 8100b4e:	d077      	beq.n	8100c40 <_ZN6Client15parseAndProcessEPhj+0x2a4>
        		dayCam_->handleZoomOut(payload, length);
 8100b50:	68fb      	ldr	r3, [r7, #12]
 8100b52:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8100b56:	7efa      	ldrb	r2, [r7, #27]
 8100b58:	6979      	ldr	r1, [r7, #20]
 8100b5a:	4618      	mov	r0, r3
 8100b5c:	f000 fdc5 	bl	81016ea <_ZN6DayCam13handleZoomOutEPhh>
            break;
 8100b60:	e06e      	b.n	8100c40 <_ZN6Client15parseAndProcessEPhj+0x2a4>
        case 0x03:
        	if (payload != nullptr){
 8100b62:	697b      	ldr	r3, [r7, #20]
 8100b64:	2b00      	cmp	r3, #0
 8100b66:	d06d      	beq.n	8100c44 <_ZN6Client15parseAndProcessEPhj+0x2a8>
        	    uint16_t position = (static_cast<uint16_t>(payload[0]) << 8) | payload[1];
 8100b68:	697b      	ldr	r3, [r7, #20]
 8100b6a:	781b      	ldrb	r3, [r3, #0]
 8100b6c:	b21b      	sxth	r3, r3
 8100b6e:	021b      	lsls	r3, r3, #8
 8100b70:	b21a      	sxth	r2, r3
 8100b72:	697b      	ldr	r3, [r7, #20]
 8100b74:	3301      	adds	r3, #1
 8100b76:	781b      	ldrb	r3, [r3, #0]
 8100b78:	b21b      	sxth	r3, r3
 8100b7a:	4313      	orrs	r3, r2
 8100b7c:	b21b      	sxth	r3, r3
 8100b7e:	823b      	strh	r3, [r7, #16]
        	    dayCam_->handleZoom2Position(position);
 8100b80:	68fb      	ldr	r3, [r7, #12]
 8100b82:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8100b86:	8a3a      	ldrh	r2, [r7, #16]
 8100b88:	4611      	mov	r1, r2
 8100b8a:	4618      	mov	r0, r3
 8100b8c:	f000 fde0 	bl	8101750 <_ZN6DayCam19handleZoom2PositionEt>
        	}
            break;
 8100b90:	e058      	b.n	8100c44 <_ZN6Client15parseAndProcessEPhj+0x2a8>
        case 0x04:
        	dayCam_->handleZoomStop();
 8100b92:	68fb      	ldr	r3, [r7, #12]
 8100b94:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8100b98:	4618      	mov	r0, r3
 8100b9a:	f000 fe1a 	bl	81017d2 <_ZN6DayCam14handleZoomStopEv>
			break;
 8100b9e:	e058      	b.n	8100c52 <_ZN6Client15parseAndProcessEPhj+0x2b6>
        case 0x05:
        	//dayCam_->SendCommand(dayCam_->zoom_teleVar, sizeof(dayCam_->zoom_teleVar));
        	if (payload != nullptr)
 8100ba0:	697b      	ldr	r3, [r7, #20]
 8100ba2:	2b00      	cmp	r3, #0
 8100ba4:	d050      	beq.n	8100c48 <_ZN6Client15parseAndProcessEPhj+0x2ac>
        		dayCam_->handleFocusNear(payload, length);
 8100ba6:	68fb      	ldr	r3, [r7, #12]
 8100ba8:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8100bac:	7efa      	ldrb	r2, [r7, #27]
 8100bae:	6979      	ldr	r1, [r7, #20]
 8100bb0:	4618      	mov	r0, r3
 8100bb2:	f000 fe50 	bl	8101856 <_ZN6DayCam15handleFocusNearEPhh>
            break;
 8100bb6:	e047      	b.n	8100c48 <_ZN6Client15parseAndProcessEPhj+0x2ac>
        case 0x06:
        	if (payload != nullptr)
 8100bb8:	697b      	ldr	r3, [r7, #20]
 8100bba:	2b00      	cmp	r3, #0
 8100bbc:	d046      	beq.n	8100c4c <_ZN6Client15parseAndProcessEPhj+0x2b0>
        		dayCam_->handleFocusFar(payload, length);
 8100bbe:	68fb      	ldr	r3, [r7, #12]
 8100bc0:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8100bc4:	7efa      	ldrb	r2, [r7, #27]
 8100bc6:	6979      	ldr	r1, [r7, #20]
 8100bc8:	4618      	mov	r0, r3
 8100bca:	f000 fe11 	bl	81017f0 <_ZN6DayCam14handleFocusFarEPhh>
            break;
 8100bce:	e03d      	b.n	8100c4c <_ZN6Client15parseAndProcessEPhj+0x2b0>
        case 0x07:
        	if (payload != nullptr){
 8100bd0:	697b      	ldr	r3, [r7, #20]
 8100bd2:	2b00      	cmp	r3, #0
 8100bd4:	d03c      	beq.n	8100c50 <_ZN6Client15parseAndProcessEPhj+0x2b4>
        	    uint16_t position = (static_cast<uint16_t>(payload[0]) << 8) | payload[1];
 8100bd6:	697b      	ldr	r3, [r7, #20]
 8100bd8:	781b      	ldrb	r3, [r3, #0]
 8100bda:	b21b      	sxth	r3, r3
 8100bdc:	021b      	lsls	r3, r3, #8
 8100bde:	b21a      	sxth	r2, r3
 8100be0:	697b      	ldr	r3, [r7, #20]
 8100be2:	3301      	adds	r3, #1
 8100be4:	781b      	ldrb	r3, [r3, #0]
 8100be6:	b21b      	sxth	r3, r3
 8100be8:	4313      	orrs	r3, r2
 8100bea:	b21b      	sxth	r3, r3
 8100bec:	827b      	strh	r3, [r7, #18]
        	    dayCam_->handleFocus2Position(position);
 8100bee:	68fb      	ldr	r3, [r7, #12]
 8100bf0:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8100bf4:	8a7a      	ldrh	r2, [r7, #18]
 8100bf6:	4611      	mov	r1, r2
 8100bf8:	4618      	mov	r0, r3
 8100bfa:	f000 fe5f 	bl	81018bc <_ZN6DayCam20handleFocus2PositionEt>
        	}
            break;
 8100bfe:	e027      	b.n	8100c50 <_ZN6Client15parseAndProcessEPhj+0x2b4>
        case 0x08:
        	dayCam_->handleFocusStop();
 8100c00:	68fb      	ldr	r3, [r7, #12]
 8100c02:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8100c06:	4618      	mov	r0, r3
 8100c08:	f000 fe99 	bl	810193e <_ZN6DayCam15handleFocusStopEv>
			break;
 8100c0c:	e021      	b.n	8100c52 <_ZN6Client15parseAndProcessEPhj+0x2b6>
			break;
        case 0x52: //LRF Enable
        	//lrx20A_->RangesDataCommand();
			break;
        case 0x53: //LRF Enable Fire
        	lrx20A_->RangesDataCommand();
 8100c0e:	68fb      	ldr	r3, [r7, #12]
 8100c10:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8100c14:	4618      	mov	r0, r3
 8100c16:	f001 fd27 	bl	8102668 <_ZN6LRX20A17RangesDataCommandEv>
			break;
 8100c1a:	e01a      	b.n	8100c52 <_ZN6Client15parseAndProcessEPhj+0x2b6>
        case 0x54: //LRF Set lower limit
        	lrx20A_->SetMinimumRangeCommand();
 8100c1c:	68fb      	ldr	r3, [r7, #12]
 8100c1e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8100c22:	4618      	mov	r0, r3
 8100c24:	f001 fced 	bl	8102602 <_ZN6LRX20A22SetMinimumRangeCommandEv>
			break;
 8100c28:	e013      	b.n	8100c52 <_ZN6Client15parseAndProcessEPhj+0x2b6>
        case 0x55: //LRF Set upper limit
        	lrx20A_->SetMaximumRangeCommand();
 8100c2a:	68fb      	ldr	r3, [r7, #12]
 8100c2c:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8100c30:	4618      	mov	r0, r3
 8100c32:	f001 fcff 	bl	8102634 <_ZN6LRX20A22SetMaximumRangeCommandEv>
			break;
 8100c36:	e00c      	b.n	8100c52 <_ZN6Client15parseAndProcessEPhj+0x2b6>


        default:
            break;
 8100c38:	bf00      	nop
 8100c3a:	e00a      	b.n	8100c52 <_ZN6Client15parseAndProcessEPhj+0x2b6>
            break;
 8100c3c:	bf00      	nop
 8100c3e:	e008      	b.n	8100c52 <_ZN6Client15parseAndProcessEPhj+0x2b6>
            break;
 8100c40:	bf00      	nop
 8100c42:	e006      	b.n	8100c52 <_ZN6Client15parseAndProcessEPhj+0x2b6>
            break;
 8100c44:	bf00      	nop
 8100c46:	e004      	b.n	8100c52 <_ZN6Client15parseAndProcessEPhj+0x2b6>
            break;
 8100c48:	bf00      	nop
 8100c4a:	e002      	b.n	8100c52 <_ZN6Client15parseAndProcessEPhj+0x2b6>
            break;
 8100c4c:	bf00      	nop
 8100c4e:	e000      	b.n	8100c52 <_ZN6Client15parseAndProcessEPhj+0x2b6>
            break;
 8100c50:	bf00      	nop
    }
}
 8100c52:	bf00      	nop
 8100c54:	3720      	adds	r7, #32
 8100c56:	46bd      	mov	sp, r7
 8100c58:	bd80      	pop	{r7, pc}
 8100c5a:	bf00      	nop

08100c5c <_ZN6Client9verifyCRCEPhj>:

bool Client::verifyCRC(uint8_t* msg, size_t len) {
 8100c5c:	b480      	push	{r7}
 8100c5e:	b089      	sub	sp, #36	@ 0x24
 8100c60:	af00      	add	r7, sp, #0
 8100c62:	60f8      	str	r0, [r7, #12]
 8100c64:	60b9      	str	r1, [r7, #8]
 8100c66:	607a      	str	r2, [r7, #4]
    if (len < 3) return false;  // Must have at least header + CRC + footer
 8100c68:	687b      	ldr	r3, [r7, #4]
 8100c6a:	2b02      	cmp	r3, #2
 8100c6c:	d801      	bhi.n	8100c72 <_ZN6Client9verifyCRCEPhj+0x16>
 8100c6e:	2300      	movs	r3, #0
 8100c70:	e020      	b.n	8100cb4 <_ZN6Client9verifyCRCEPhj+0x58>

    uint8_t crc = 0x00;  // or 0xFF depending on your protocol
 8100c72:	2300      	movs	r3, #0
 8100c74:	77fb      	strb	r3, [r7, #31]
    for (size_t i = 1; i < len - 2; ++i) { // exclude CRC and footer
 8100c76:	2301      	movs	r3, #1
 8100c78:	61bb      	str	r3, [r7, #24]
 8100c7a:	e009      	b.n	8100c90 <_ZN6Client9verifyCRCEPhj+0x34>
        crc ^= msg[i];
 8100c7c:	68ba      	ldr	r2, [r7, #8]
 8100c7e:	69bb      	ldr	r3, [r7, #24]
 8100c80:	4413      	add	r3, r2
 8100c82:	781a      	ldrb	r2, [r3, #0]
 8100c84:	7ffb      	ldrb	r3, [r7, #31]
 8100c86:	4053      	eors	r3, r2
 8100c88:	77fb      	strb	r3, [r7, #31]
    for (size_t i = 1; i < len - 2; ++i) { // exclude CRC and footer
 8100c8a:	69bb      	ldr	r3, [r7, #24]
 8100c8c:	3301      	adds	r3, #1
 8100c8e:	61bb      	str	r3, [r7, #24]
 8100c90:	687b      	ldr	r3, [r7, #4]
 8100c92:	3b02      	subs	r3, #2
 8100c94:	69ba      	ldr	r2, [r7, #24]
 8100c96:	429a      	cmp	r2, r3
 8100c98:	d3f0      	bcc.n	8100c7c <_ZN6Client9verifyCRCEPhj+0x20>

    }

    uint8_t receivedCRC = msg[len - 2];
 8100c9a:	687b      	ldr	r3, [r7, #4]
 8100c9c:	3b02      	subs	r3, #2
 8100c9e:	68ba      	ldr	r2, [r7, #8]
 8100ca0:	4413      	add	r3, r2
 8100ca2:	781b      	ldrb	r3, [r3, #0]
 8100ca4:	75fb      	strb	r3, [r7, #23]
    return crc == receivedCRC;
 8100ca6:	7ffa      	ldrb	r2, [r7, #31]
 8100ca8:	7dfb      	ldrb	r3, [r7, #23]
 8100caa:	429a      	cmp	r2, r3
 8100cac:	bf0c      	ite	eq
 8100cae:	2301      	moveq	r3, #1
 8100cb0:	2300      	movne	r3, #0
 8100cb2:	b2db      	uxtb	r3, r3
}
 8100cb4:	4618      	mov	r0, r3
 8100cb6:	3724      	adds	r7, #36	@ 0x24
 8100cb8:	46bd      	mov	sp, r7
 8100cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cbe:	4770      	bx	lr

08100cc0 <_ZN6Client9setDayCamEP6DayCam>:

void Client::setDayCam(DayCam* cam) {
 8100cc0:	b480      	push	{r7}
 8100cc2:	b083      	sub	sp, #12
 8100cc4:	af00      	add	r7, sp, #0
 8100cc6:	6078      	str	r0, [r7, #4]
 8100cc8:	6039      	str	r1, [r7, #0]
    dayCam_ = cam;
 8100cca:	687b      	ldr	r3, [r7, #4]
 8100ccc:	683a      	ldr	r2, [r7, #0]
 8100cce:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
}
 8100cd2:	bf00      	nop
 8100cd4:	370c      	adds	r7, #12
 8100cd6:	46bd      	mov	sp, r7
 8100cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cdc:	4770      	bx	lr

08100cde <_ZNSt11_Deque_baseIhSaIhEEC1Ev>:
      _Deque_base()
 8100cde:	b580      	push	{r7, lr}
 8100ce0:	b082      	sub	sp, #8
 8100ce2:	af00      	add	r7, sp, #0
 8100ce4:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8100ce6:	687b      	ldr	r3, [r7, #4]
 8100ce8:	4618      	mov	r0, r3
 8100cea:	f000 f88c 	bl	8100e06 <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8100cee:	2100      	movs	r1, #0
 8100cf0:	6878      	ldr	r0, [r7, #4]
 8100cf2:	f000 f899 	bl	8100e28 <_ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEj>
 8100cf6:	687b      	ldr	r3, [r7, #4]
 8100cf8:	4618      	mov	r0, r3
 8100cfa:	3708      	adds	r7, #8
 8100cfc:	46bd      	mov	sp, r7
 8100cfe:	bd80      	pop	{r7, pc}

08100d00 <_ZNKSt5dequeIhSaIhEE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8100d00:	b580      	push	{r7, lr}
 8100d02:	b082      	sub	sp, #8
 8100d04:	af00      	add	r7, sp, #0
 8100d06:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8100d08:	687b      	ldr	r3, [r7, #4]
 8100d0a:	f103 0218 	add.w	r2, r3, #24
 8100d0e:	687b      	ldr	r3, [r7, #4]
 8100d10:	3308      	adds	r3, #8
 8100d12:	4619      	mov	r1, r3
 8100d14:	4610      	mov	r0, r2
 8100d16:	f000 f8e9 	bl	8100eec <_ZSteqRKSt15_Deque_iteratorIhRhPhES4_>
 8100d1a:	4603      	mov	r3, r0
 8100d1c:	4618      	mov	r0, r3
 8100d1e:	3708      	adds	r7, #8
 8100d20:	46bd      	mov	sp, r7
 8100d22:	bd80      	pop	{r7, pc}

08100d24 <_ZNSt5dequeIhSaIhEE5frontEv>:
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      _GLIBCXX_NODISCARD
      reference
      front() _GLIBCXX_NOEXCEPT
 8100d24:	b580      	push	{r7, lr}
 8100d26:	b086      	sub	sp, #24
 8100d28:	af00      	add	r7, sp, #0
 8100d2a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8100d2c:	f107 0308 	add.w	r3, r7, #8
 8100d30:	6879      	ldr	r1, [r7, #4]
 8100d32:	4618      	mov	r0, r3
 8100d34:	f000 f831 	bl	8100d9a <_ZNSt5dequeIhSaIhEE5beginEv>
 8100d38:	f107 0308 	add.w	r3, r7, #8
 8100d3c:	4618      	mov	r0, r3
 8100d3e:	f000 f8e9 	bl	8100f14 <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>
 8100d42:	4603      	mov	r3, r0
      }
 8100d44:	4618      	mov	r0, r3
 8100d46:	3718      	adds	r7, #24
 8100d48:	46bd      	mov	sp, r7
 8100d4a:	bd80      	pop	{r7, pc}

08100d4c <_ZNSt5dequeIhSaIhEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8100d4c:	b580      	push	{r7, lr}
 8100d4e:	b086      	sub	sp, #24
 8100d50:	af00      	add	r7, sp, #0
 8100d52:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8100d54:	687b      	ldr	r3, [r7, #4]
 8100d56:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8100d58:	687b      	ldr	r3, [r7, #4]
 8100d5a:	691b      	ldr	r3, [r3, #16]
 8100d5c:	3b01      	subs	r3, #1
	if (this->_M_impl._M_start._M_cur
 8100d5e:	429a      	cmp	r2, r3
 8100d60:	d014      	beq.n	8100d8c <_ZNSt5dequeIhSaIhEE9pop_frontEv+0x40>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8100d62:	687b      	ldr	r3, [r7, #4]
 8100d64:	4618      	mov	r0, r3
 8100d66:	f000 f827 	bl	8100db8 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8100d6a:	4602      	mov	r2, r0
 8100d6c:	687b      	ldr	r3, [r7, #4]
 8100d6e:	689b      	ldr	r3, [r3, #8]
 8100d70:	617a      	str	r2, [r7, #20]
 8100d72:	613b      	str	r3, [r7, #16]
 8100d74:	697b      	ldr	r3, [r7, #20]
 8100d76:	60fb      	str	r3, [r7, #12]
 8100d78:	693b      	ldr	r3, [r7, #16]
 8100d7a:	60bb      	str	r3, [r7, #8]
      template<typename _Up>
	__attribute__((__always_inline__))
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8100d7c:	bf00      	nop
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
#endif
	}
 8100d7e:	bf00      	nop
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8100d80:	687b      	ldr	r3, [r7, #4]
 8100d82:	689b      	ldr	r3, [r3, #8]
 8100d84:	1c5a      	adds	r2, r3, #1
 8100d86:	687b      	ldr	r3, [r7, #4]
 8100d88:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8100d8a:	e002      	b.n	8100d92 <_ZNSt5dequeIhSaIhEE9pop_frontEv+0x46>
	  _M_pop_front_aux();
 8100d8c:	6878      	ldr	r0, [r7, #4]
 8100d8e:	f000 f8cd 	bl	8100f2c <_ZNSt5dequeIhSaIhEE16_M_pop_front_auxEv>
      }
 8100d92:	bf00      	nop
 8100d94:	3718      	adds	r7, #24
 8100d96:	46bd      	mov	sp, r7
 8100d98:	bd80      	pop	{r7, pc}

08100d9a <_ZNSt5dequeIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8100d9a:	b580      	push	{r7, lr}
 8100d9c:	b082      	sub	sp, #8
 8100d9e:	af00      	add	r7, sp, #0
 8100da0:	6078      	str	r0, [r7, #4]
 8100da2:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8100da4:	683b      	ldr	r3, [r7, #0]
 8100da6:	3308      	adds	r3, #8
 8100da8:	4619      	mov	r1, r3
 8100daa:	6878      	ldr	r0, [r7, #4]
 8100dac:	f000 f80f 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8100db0:	6878      	ldr	r0, [r7, #4]
 8100db2:	3708      	adds	r7, #8
 8100db4:	46bd      	mov	sp, r7
 8100db6:	bd80      	pop	{r7, pc}

08100db8 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8100db8:	b480      	push	{r7}
 8100dba:	b083      	sub	sp, #12
 8100dbc:	af00      	add	r7, sp, #0
 8100dbe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8100dc0:	687b      	ldr	r3, [r7, #4]
 8100dc2:	4618      	mov	r0, r3
 8100dc4:	370c      	adds	r7, #12
 8100dc6:	46bd      	mov	sp, r7
 8100dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dcc:	4770      	bx	lr

08100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8100dce:	b480      	push	{r7}
 8100dd0:	b083      	sub	sp, #12
 8100dd2:	af00      	add	r7, sp, #0
 8100dd4:	6078      	str	r0, [r7, #4]
 8100dd6:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8100dd8:	683b      	ldr	r3, [r7, #0]
 8100dda:	681a      	ldr	r2, [r3, #0]
 8100ddc:	687b      	ldr	r3, [r7, #4]
 8100dde:	601a      	str	r2, [r3, #0]
 8100de0:	683b      	ldr	r3, [r7, #0]
 8100de2:	685a      	ldr	r2, [r3, #4]
 8100de4:	687b      	ldr	r3, [r7, #4]
 8100de6:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8100de8:	683b      	ldr	r3, [r7, #0]
 8100dea:	689a      	ldr	r2, [r3, #8]
 8100dec:	687b      	ldr	r3, [r7, #4]
 8100dee:	609a      	str	r2, [r3, #8]
 8100df0:	683b      	ldr	r3, [r7, #0]
 8100df2:	68da      	ldr	r2, [r3, #12]
 8100df4:	687b      	ldr	r3, [r7, #4]
 8100df6:	60da      	str	r2, [r3, #12]
 8100df8:	687b      	ldr	r3, [r7, #4]
 8100dfa:	4618      	mov	r0, r3
 8100dfc:	370c      	adds	r7, #12
 8100dfe:	46bd      	mov	sp, r7
 8100e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e04:	4770      	bx	lr

08100e06 <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8100e06:	b580      	push	{r7, lr}
 8100e08:	b084      	sub	sp, #16
 8100e0a:	af00      	add	r7, sp, #0
 8100e0c:	6078      	str	r0, [r7, #4]
 8100e0e:	687b      	ldr	r3, [r7, #4]
 8100e10:	60fb      	str	r3, [r7, #12]
 8100e12:	68fb      	ldr	r3, [r7, #12]
 8100e14:	60bb      	str	r3, [r7, #8]
	: _Tp_alloc_type()
 8100e16:	687b      	ldr	r3, [r7, #4]
 8100e18:	4618      	mov	r0, r3
 8100e1a:	f000 f8b3 	bl	8100f84 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1Ev>
	{ }
 8100e1e:	687b      	ldr	r3, [r7, #4]
 8100e20:	4618      	mov	r0, r3
 8100e22:	3710      	adds	r7, #16
 8100e24:	46bd      	mov	sp, r7
 8100e26:	bd80      	pop	{r7, pc}

08100e28 <_ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8100e28:	b590      	push	{r4, r7, lr}
 8100e2a:	b089      	sub	sp, #36	@ 0x24
 8100e2c:	af00      	add	r7, sp, #0
 8100e2e:	6078      	str	r0, [r7, #4]
 8100e30:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8100e32:	2001      	movs	r0, #1
 8100e34:	f7ff fc6a 	bl	810070c <_ZSt16__deque_buf_sizej>
 8100e38:	4602      	mov	r2, r0
 8100e3a:	683b      	ldr	r3, [r7, #0]
 8100e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8100e40:	3301      	adds	r3, #1
 8100e42:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8100e44:	2308      	movs	r3, #8
 8100e46:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8100e48:	69fb      	ldr	r3, [r7, #28]
 8100e4a:	3302      	adds	r3, #2
 8100e4c:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8100e4e:	f107 0210 	add.w	r2, r7, #16
 8100e52:	f107 030c 	add.w	r3, r7, #12
 8100e56:	4611      	mov	r1, r2
 8100e58:	4618      	mov	r0, r3
 8100e5a:	f000 f8ac 	bl	8100fb6 <_ZSt3maxIjERKT_S2_S2_>
 8100e5e:	4603      	mov	r3, r0
 8100e60:	681a      	ldr	r2, [r3, #0]
 8100e62:	687b      	ldr	r3, [r7, #4]
 8100e64:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8100e66:	687b      	ldr	r3, [r7, #4]
 8100e68:	685b      	ldr	r3, [r3, #4]
 8100e6a:	4619      	mov	r1, r3
 8100e6c:	6878      	ldr	r0, [r7, #4]
 8100e6e:	f000 f8b6 	bl	8100fde <_ZNSt11_Deque_baseIhSaIhEE15_M_allocate_mapEj>
 8100e72:	4602      	mov	r2, r0
 8100e74:	687b      	ldr	r3, [r7, #4]
 8100e76:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8100e78:	687b      	ldr	r3, [r7, #4]
 8100e7a:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8100e7c:	687b      	ldr	r3, [r7, #4]
 8100e7e:	6859      	ldr	r1, [r3, #4]
 8100e80:	69fb      	ldr	r3, [r7, #28]
 8100e82:	1acb      	subs	r3, r1, r3
 8100e84:	085b      	lsrs	r3, r3, #1
 8100e86:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8100e88:	4413      	add	r3, r2
 8100e8a:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8100e8c:	69fb      	ldr	r3, [r7, #28]
 8100e8e:	009b      	lsls	r3, r3, #2
 8100e90:	69ba      	ldr	r2, [r7, #24]
 8100e92:	4413      	add	r3, r2
 8100e94:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8100e96:	697a      	ldr	r2, [r7, #20]
 8100e98:	69b9      	ldr	r1, [r7, #24]
 8100e9a:	6878      	ldr	r0, [r7, #4]
 8100e9c:	f000 f8c0 	bl	8101020 <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8100ea0:	687b      	ldr	r3, [r7, #4]
 8100ea2:	3308      	adds	r3, #8
 8100ea4:	69b9      	ldr	r1, [r7, #24]
 8100ea6:	4618      	mov	r0, r3
 8100ea8:	f000 f8d5 	bl	8101056 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8100eac:	687b      	ldr	r3, [r7, #4]
 8100eae:	f103 0218 	add.w	r2, r3, #24
 8100eb2:	697b      	ldr	r3, [r7, #20]
 8100eb4:	3b04      	subs	r3, #4
 8100eb6:	4619      	mov	r1, r3
 8100eb8:	4610      	mov	r0, r2
 8100eba:	f000 f8cc 	bl	8101056 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8100ebe:	687b      	ldr	r3, [r7, #4]
 8100ec0:	68da      	ldr	r2, [r3, #12]
 8100ec2:	687b      	ldr	r3, [r7, #4]
 8100ec4:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8100ec6:	687b      	ldr	r3, [r7, #4]
 8100ec8:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8100eca:	2001      	movs	r0, #1
 8100ecc:	f7ff fc1e 	bl	810070c <_ZSt16__deque_buf_sizej>
 8100ed0:	4602      	mov	r2, r0
 8100ed2:	683b      	ldr	r3, [r7, #0]
 8100ed4:	fbb3 f1f2 	udiv	r1, r3, r2
 8100ed8:	fb01 f202 	mul.w	r2, r1, r2
 8100edc:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8100ede:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8100ee0:	687b      	ldr	r3, [r7, #4]
 8100ee2:	619a      	str	r2, [r3, #24]
    }
 8100ee4:	bf00      	nop
 8100ee6:	3724      	adds	r7, #36	@ 0x24
 8100ee8:	46bd      	mov	sp, r7
 8100eea:	bd90      	pop	{r4, r7, pc}

08100eec <_ZSteqRKSt15_Deque_iteratorIhRhPhES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8100eec:	b480      	push	{r7}
 8100eee:	b083      	sub	sp, #12
 8100ef0:	af00      	add	r7, sp, #0
 8100ef2:	6078      	str	r0, [r7, #4]
 8100ef4:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8100ef6:	687b      	ldr	r3, [r7, #4]
 8100ef8:	681a      	ldr	r2, [r3, #0]
 8100efa:	683b      	ldr	r3, [r7, #0]
 8100efc:	681b      	ldr	r3, [r3, #0]
 8100efe:	429a      	cmp	r2, r3
 8100f00:	bf0c      	ite	eq
 8100f02:	2301      	moveq	r3, #1
 8100f04:	2300      	movne	r3, #0
 8100f06:	b2db      	uxtb	r3, r3
 8100f08:	4618      	mov	r0, r3
 8100f0a:	370c      	adds	r7, #12
 8100f0c:	46bd      	mov	sp, r7
 8100f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f12:	4770      	bx	lr

08100f14 <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8100f14:	b480      	push	{r7}
 8100f16:	b083      	sub	sp, #12
 8100f18:	af00      	add	r7, sp, #0
 8100f1a:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8100f1c:	687b      	ldr	r3, [r7, #4]
 8100f1e:	681b      	ldr	r3, [r3, #0]
 8100f20:	4618      	mov	r0, r3
 8100f22:	370c      	adds	r7, #12
 8100f24:	46bd      	mov	sp, r7
 8100f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f2a:	4770      	bx	lr

08100f2c <_ZNSt5dequeIhSaIhEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8100f2c:	b580      	push	{r7, lr}
 8100f2e:	b086      	sub	sp, #24
 8100f30:	af00      	add	r7, sp, #0
 8100f32:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8100f34:	687b      	ldr	r3, [r7, #4]
 8100f36:	4618      	mov	r0, r3
 8100f38:	f7ff ff3e 	bl	8100db8 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8100f3c:	4602      	mov	r2, r0
 8100f3e:	687b      	ldr	r3, [r7, #4]
 8100f40:	689b      	ldr	r3, [r3, #8]
 8100f42:	617a      	str	r2, [r7, #20]
 8100f44:	613b      	str	r3, [r7, #16]
 8100f46:	697b      	ldr	r3, [r7, #20]
 8100f48:	60fb      	str	r3, [r7, #12]
 8100f4a:	693b      	ldr	r3, [r7, #16]
 8100f4c:	60bb      	str	r3, [r7, #8]
 8100f4e:	bf00      	nop
 8100f50:	bf00      	nop
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8100f52:	687a      	ldr	r2, [r7, #4]
 8100f54:	687b      	ldr	r3, [r7, #4]
 8100f56:	68db      	ldr	r3, [r3, #12]
 8100f58:	4619      	mov	r1, r3
 8100f5a:	4610      	mov	r0, r2
 8100f5c:	f000 f893 	bl	8101086 <_ZNSt11_Deque_baseIhSaIhEE18_M_deallocate_nodeEPh>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8100f60:	687b      	ldr	r3, [r7, #4]
 8100f62:	f103 0208 	add.w	r2, r3, #8
 8100f66:	687b      	ldr	r3, [r7, #4]
 8100f68:	695b      	ldr	r3, [r3, #20]
 8100f6a:	3304      	adds	r3, #4
 8100f6c:	4619      	mov	r1, r3
 8100f6e:	4610      	mov	r0, r2
 8100f70:	f000 f871 	bl	8101056 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8100f74:	687b      	ldr	r3, [r7, #4]
 8100f76:	68da      	ldr	r2, [r3, #12]
 8100f78:	687b      	ldr	r3, [r7, #4]
 8100f7a:	609a      	str	r2, [r3, #8]
    }
 8100f7c:	bf00      	nop
 8100f7e:	3718      	adds	r7, #24
 8100f80:	46bd      	mov	sp, r7
 8100f82:	bd80      	pop	{r7, pc}

08100f84 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8100f84:	b580      	push	{r7, lr}
 8100f86:	b082      	sub	sp, #8
 8100f88:	af00      	add	r7, sp, #0
 8100f8a:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8100f8c:	687b      	ldr	r3, [r7, #4]
 8100f8e:	2200      	movs	r2, #0
 8100f90:	601a      	str	r2, [r3, #0]
 8100f92:	687b      	ldr	r3, [r7, #4]
 8100f94:	2200      	movs	r2, #0
 8100f96:	605a      	str	r2, [r3, #4]
 8100f98:	687b      	ldr	r3, [r7, #4]
 8100f9a:	3308      	adds	r3, #8
 8100f9c:	4618      	mov	r0, r3
 8100f9e:	f000 f89d 	bl	81010dc <_ZNSt15_Deque_iteratorIhRhPhEC1Ev>
 8100fa2:	687b      	ldr	r3, [r7, #4]
 8100fa4:	3318      	adds	r3, #24
 8100fa6:	4618      	mov	r0, r3
 8100fa8:	f000 f898 	bl	81010dc <_ZNSt15_Deque_iteratorIhRhPhEC1Ev>
	{ }
 8100fac:	687b      	ldr	r3, [r7, #4]
 8100fae:	4618      	mov	r0, r3
 8100fb0:	3708      	adds	r7, #8
 8100fb2:	46bd      	mov	sp, r7
 8100fb4:	bd80      	pop	{r7, pc}

08100fb6 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8100fb6:	b480      	push	{r7}
 8100fb8:	b083      	sub	sp, #12
 8100fba:	af00      	add	r7, sp, #0
 8100fbc:	6078      	str	r0, [r7, #4]
 8100fbe:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8100fc0:	687b      	ldr	r3, [r7, #4]
 8100fc2:	681a      	ldr	r2, [r3, #0]
 8100fc4:	683b      	ldr	r3, [r7, #0]
 8100fc6:	681b      	ldr	r3, [r3, #0]
 8100fc8:	429a      	cmp	r2, r3
 8100fca:	d201      	bcs.n	8100fd0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8100fcc:	683b      	ldr	r3, [r7, #0]
 8100fce:	e000      	b.n	8100fd2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8100fd0:	687b      	ldr	r3, [r7, #4]
    }
 8100fd2:	4618      	mov	r0, r3
 8100fd4:	370c      	adds	r7, #12
 8100fd6:	46bd      	mov	sp, r7
 8100fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fdc:	4770      	bx	lr

08100fde <_ZNSt11_Deque_baseIhSaIhEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8100fde:	b590      	push	{r4, r7, lr}
 8100fe0:	b085      	sub	sp, #20
 8100fe2:	af00      	add	r7, sp, #0
 8100fe4:	6078      	str	r0, [r7, #4]
 8100fe6:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8100fe8:	f107 0308 	add.w	r3, r7, #8
 8100fec:	6879      	ldr	r1, [r7, #4]
 8100fee:	4618      	mov	r0, r3
 8100ff0:	f000 f861 	bl	81010b6 <_ZNKSt11_Deque_baseIhSaIhEE20_M_get_map_allocatorEv>
 8100ff4:	683b      	ldr	r3, [r7, #0]
 8100ff6:	60fb      	str	r3, [r7, #12]
      { return __a.allocate(__n); }
 8100ff8:	f107 0308 	add.w	r3, r7, #8
 8100ffc:	2200      	movs	r2, #0
 8100ffe:	68f9      	ldr	r1, [r7, #12]
 8101000:	4618      	mov	r0, r3
 8101002:	f000 f8b6 	bl	8101172 <_ZNSt15__new_allocatorIPhE8allocateEjPKv>
 8101006:	4604      	mov	r4, r0
 8101008:	bf00      	nop
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 810100a:	bf00      	nop

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 810100c:	f107 0308 	add.w	r3, r7, #8
 8101010:	4618      	mov	r0, r3
 8101012:	f000 f8a3 	bl	810115c <_ZNSt15__new_allocatorIPhED1Ev>
 8101016:	4623      	mov	r3, r4
      }
 8101018:	4618      	mov	r0, r3
 810101a:	3714      	adds	r7, #20
 810101c:	46bd      	mov	sp, r7
 810101e:	bd90      	pop	{r4, r7, pc}

08101020 <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_>:
    _Deque_base<_Tp, _Alloc>::
 8101020:	b580      	push	{r7, lr}
 8101022:	b086      	sub	sp, #24
 8101024:	af00      	add	r7, sp, #0
 8101026:	60f8      	str	r0, [r7, #12]
 8101028:	60b9      	str	r1, [r7, #8]
 810102a:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 810102c:	68bb      	ldr	r3, [r7, #8]
 810102e:	617b      	str	r3, [r7, #20]
 8101030:	e008      	b.n	8101044 <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_+0x24>
	    *__cur = this->_M_allocate_node();
 8101032:	68f8      	ldr	r0, [r7, #12]
 8101034:	f000 f869 	bl	810110a <_ZNSt11_Deque_baseIhSaIhEE16_M_allocate_nodeEv>
 8101038:	4602      	mov	r2, r0
 810103a:	697b      	ldr	r3, [r7, #20]
 810103c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 810103e:	697b      	ldr	r3, [r7, #20]
 8101040:	3304      	adds	r3, #4
 8101042:	617b      	str	r3, [r7, #20]
 8101044:	697a      	ldr	r2, [r7, #20]
 8101046:	687b      	ldr	r3, [r7, #4]
 8101048:	429a      	cmp	r2, r3
 810104a:	d3f2      	bcc.n	8101032 <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_+0x12>
    }
 810104c:	bf00      	nop
 810104e:	bf00      	nop
 8101050:	3718      	adds	r7, #24
 8101052:	46bd      	mov	sp, r7
 8101054:	bd80      	pop	{r7, pc}

08101056 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8101056:	b590      	push	{r4, r7, lr}
 8101058:	b083      	sub	sp, #12
 810105a:	af00      	add	r7, sp, #0
 810105c:	6078      	str	r0, [r7, #4]
 810105e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8101060:	687b      	ldr	r3, [r7, #4]
 8101062:	683a      	ldr	r2, [r7, #0]
 8101064:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8101066:	683b      	ldr	r3, [r7, #0]
 8101068:	681a      	ldr	r2, [r3, #0]
 810106a:	687b      	ldr	r3, [r7, #4]
 810106c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 810106e:	687b      	ldr	r3, [r7, #4]
 8101070:	685c      	ldr	r4, [r3, #4]
 8101072:	f000 f860 	bl	8101136 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 8101076:	4603      	mov	r3, r0
 8101078:	18e2      	adds	r2, r4, r3
 810107a:	687b      	ldr	r3, [r7, #4]
 810107c:	609a      	str	r2, [r3, #8]
      }
 810107e:	bf00      	nop
 8101080:	370c      	adds	r7, #12
 8101082:	46bd      	mov	sp, r7
 8101084:	bd90      	pop	{r4, r7, pc}

08101086 <_ZNSt11_Deque_baseIhSaIhEE18_M_deallocate_nodeEPh>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8101086:	b590      	push	{r4, r7, lr}
 8101088:	b087      	sub	sp, #28
 810108a:	af00      	add	r7, sp, #0
 810108c:	6078      	str	r0, [r7, #4]
 810108e:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8101090:	687c      	ldr	r4, [r7, #4]
 8101092:	2001      	movs	r0, #1
 8101094:	f7ff fb3a 	bl	810070c <_ZSt16__deque_buf_sizej>
 8101098:	4602      	mov	r2, r0
 810109a:	617c      	str	r4, [r7, #20]
 810109c:	683b      	ldr	r3, [r7, #0]
 810109e:	613b      	str	r3, [r7, #16]
 81010a0:	60fa      	str	r2, [r7, #12]
      { __a.deallocate(__p, __n); }
 81010a2:	68fa      	ldr	r2, [r7, #12]
 81010a4:	6939      	ldr	r1, [r7, #16]
 81010a6:	6978      	ldr	r0, [r7, #20]
 81010a8:	f000 f88c 	bl	81011c4 <_ZNSt15__new_allocatorIhE10deallocateEPhj>
 81010ac:	bf00      	nop
      }
 81010ae:	bf00      	nop
 81010b0:	371c      	adds	r7, #28
 81010b2:	46bd      	mov	sp, r7
 81010b4:	bd90      	pop	{r4, r7, pc}

081010b6 <_ZNKSt11_Deque_baseIhSaIhEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 81010b6:	b580      	push	{r7, lr}
 81010b8:	b086      	sub	sp, #24
 81010ba:	af00      	add	r7, sp, #0
 81010bc:	6078      	str	r0, [r7, #4]
 81010be:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 81010c0:	6838      	ldr	r0, [r7, #0]
 81010c2:	f000 f840 	bl	8101146 <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 81010c6:	4602      	mov	r2, r0
 81010c8:	687b      	ldr	r3, [r7, #4]
 81010ca:	617b      	str	r3, [r7, #20]
 81010cc:	613a      	str	r2, [r7, #16]
 81010ce:	697b      	ldr	r3, [r7, #20]
 81010d0:	60fb      	str	r3, [r7, #12]
 81010d2:	bf00      	nop
 81010d4:	6878      	ldr	r0, [r7, #4]
 81010d6:	3718      	adds	r7, #24
 81010d8:	46bd      	mov	sp, r7
 81010da:	bd80      	pop	{r7, pc}

081010dc <_ZNSt15_Deque_iteratorIhRhPhEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 81010dc:	b480      	push	{r7}
 81010de:	b083      	sub	sp, #12
 81010e0:	af00      	add	r7, sp, #0
 81010e2:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 81010e4:	687b      	ldr	r3, [r7, #4]
 81010e6:	2200      	movs	r2, #0
 81010e8:	601a      	str	r2, [r3, #0]
 81010ea:	687b      	ldr	r3, [r7, #4]
 81010ec:	2200      	movs	r2, #0
 81010ee:	605a      	str	r2, [r3, #4]
 81010f0:	687b      	ldr	r3, [r7, #4]
 81010f2:	2200      	movs	r2, #0
 81010f4:	609a      	str	r2, [r3, #8]
 81010f6:	687b      	ldr	r3, [r7, #4]
 81010f8:	2200      	movs	r2, #0
 81010fa:	60da      	str	r2, [r3, #12]
 81010fc:	687b      	ldr	r3, [r7, #4]
 81010fe:	4618      	mov	r0, r3
 8101100:	370c      	adds	r7, #12
 8101102:	46bd      	mov	sp, r7
 8101104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101108:	4770      	bx	lr

0810110a <_ZNSt11_Deque_baseIhSaIhEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 810110a:	b590      	push	{r4, r7, lr}
 810110c:	b085      	sub	sp, #20
 810110e:	af00      	add	r7, sp, #0
 8101110:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8101112:	687c      	ldr	r4, [r7, #4]
 8101114:	2001      	movs	r0, #1
 8101116:	f7ff faf9 	bl	810070c <_ZSt16__deque_buf_sizej>
 810111a:	4603      	mov	r3, r0
 810111c:	60fc      	str	r4, [r7, #12]
 810111e:	60bb      	str	r3, [r7, #8]
      { return __a.allocate(__n); }
 8101120:	2200      	movs	r2, #0
 8101122:	68b9      	ldr	r1, [r7, #8]
 8101124:	68f8      	ldr	r0, [r7, #12]
 8101126:	f000 f85b 	bl	81011e0 <_ZNSt15__new_allocatorIhE8allocateEjPKv>
 810112a:	4603      	mov	r3, r0
 810112c:	bf00      	nop
      }
 810112e:	4618      	mov	r0, r3
 8101130:	3714      	adds	r7, #20
 8101132:	46bd      	mov	sp, r7
 8101134:	bd90      	pop	{r4, r7, pc}

08101136 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8101136:	b580      	push	{r7, lr}
 8101138:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 810113a:	2001      	movs	r0, #1
 810113c:	f7ff fae6 	bl	810070c <_ZSt16__deque_buf_sizej>
 8101140:	4603      	mov	r3, r0
 8101142:	4618      	mov	r0, r3
 8101144:	bd80      	pop	{r7, pc}

08101146 <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8101146:	b480      	push	{r7}
 8101148:	b083      	sub	sp, #12
 810114a:	af00      	add	r7, sp, #0
 810114c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810114e:	687b      	ldr	r3, [r7, #4]
 8101150:	4618      	mov	r0, r3
 8101152:	370c      	adds	r7, #12
 8101154:	46bd      	mov	sp, r7
 8101156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810115a:	4770      	bx	lr

0810115c <_ZNSt15__new_allocatorIPhED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 810115c:	b480      	push	{r7}
 810115e:	b083      	sub	sp, #12
 8101160:	af00      	add	r7, sp, #0
 8101162:	6078      	str	r0, [r7, #4]
 8101164:	687b      	ldr	r3, [r7, #4]
 8101166:	4618      	mov	r0, r3
 8101168:	370c      	adds	r7, #12
 810116a:	46bd      	mov	sp, r7
 810116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101170:	4770      	bx	lr

08101172 <_ZNSt15__new_allocatorIPhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8101172:	b580      	push	{r7, lr}
 8101174:	b086      	sub	sp, #24
 8101176:	af00      	add	r7, sp, #0
 8101178:	60f8      	str	r0, [r7, #12]
 810117a:	60b9      	str	r1, [r7, #8]
 810117c:	607a      	str	r2, [r7, #4]
 810117e:	68fb      	ldr	r3, [r7, #12]
 8101180:	617b      	str	r3, [r7, #20]
      __attribute__((__always_inline__))
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8101182:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8101186:	68bb      	ldr	r3, [r7, #8]
 8101188:	4293      	cmp	r3, r2
 810118a:	bf8c      	ite	hi
 810118c:	2301      	movhi	r3, #1
 810118e:	2300      	movls	r3, #0
 8101190:	b2db      	uxtb	r3, r3
 8101192:	2b00      	cmp	r3, #0
 8101194:	bf14      	ite	ne
 8101196:	2301      	movne	r3, #1
 8101198:	2300      	moveq	r3, #0
 810119a:	b2db      	uxtb	r3, r3
 810119c:	2b00      	cmp	r3, #0
 810119e:	d007      	beq.n	81011b0 <_ZNSt15__new_allocatorIPhE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 81011a0:	68bb      	ldr	r3, [r7, #8]
 81011a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81011a6:	d301      	bcc.n	81011ac <_ZNSt15__new_allocatorIPhE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 81011a8:	f00c fdde 	bl	810dd68 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 81011ac:	f00c fdd9 	bl	810dd62 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 81011b0:	68bb      	ldr	r3, [r7, #8]
 81011b2:	009b      	lsls	r3, r3, #2
 81011b4:	4618      	mov	r0, r3
 81011b6:	f00c fd05 	bl	810dbc4 <_Znwj>
 81011ba:	4603      	mov	r3, r0
      }
 81011bc:	4618      	mov	r0, r3
 81011be:	3718      	adds	r7, #24
 81011c0:	46bd      	mov	sp, r7
 81011c2:	bd80      	pop	{r7, pc}

081011c4 <_ZNSt15__new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 81011c4:	b580      	push	{r7, lr}
 81011c6:	b084      	sub	sp, #16
 81011c8:	af00      	add	r7, sp, #0
 81011ca:	60f8      	str	r0, [r7, #12]
 81011cc:	60b9      	str	r1, [r7, #8]
 81011ce:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 81011d0:	6879      	ldr	r1, [r7, #4]
 81011d2:	68b8      	ldr	r0, [r7, #8]
 81011d4:	f00c fcf4 	bl	810dbc0 <_ZdlPvj>
      }
 81011d8:	bf00      	nop
 81011da:	3710      	adds	r7, #16
 81011dc:	46bd      	mov	sp, r7
 81011de:	bd80      	pop	{r7, pc}

081011e0 <_ZNSt15__new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 81011e0:	b580      	push	{r7, lr}
 81011e2:	b086      	sub	sp, #24
 81011e4:	af00      	add	r7, sp, #0
 81011e6:	60f8      	str	r0, [r7, #12]
 81011e8:	60b9      	str	r1, [r7, #8]
 81011ea:	607a      	str	r2, [r7, #4]
 81011ec:	68fb      	ldr	r3, [r7, #12]
 81011ee:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 81011f0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
	if (__builtin_expect(__n > this->_M_max_size(), false))
 81011f4:	68bb      	ldr	r3, [r7, #8]
 81011f6:	4293      	cmp	r3, r2
 81011f8:	bf8c      	ite	hi
 81011fa:	2301      	movhi	r3, #1
 81011fc:	2300      	movls	r3, #0
 81011fe:	b2db      	uxtb	r3, r3
 8101200:	2b00      	cmp	r3, #0
 8101202:	bf14      	ite	ne
 8101204:	2301      	movne	r3, #1
 8101206:	2300      	moveq	r3, #0
 8101208:	b2db      	uxtb	r3, r3
 810120a:	2b00      	cmp	r3, #0
 810120c:	d001      	beq.n	8101212 <_ZNSt15__new_allocatorIhE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 810120e:	f00c fda8 	bl	810dd62 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8101212:	68b8      	ldr	r0, [r7, #8]
 8101214:	f00c fcd6 	bl	810dbc4 <_Znwj>
 8101218:	4603      	mov	r3, r0
      }
 810121a:	4618      	mov	r0, r3
 810121c:	3718      	adds	r7, #24
 810121e:	46bd      	mov	sp, r7
 8101220:	bd80      	pop	{r7, pc}
	...

08101224 <_ZN6DayCamC1EP20__UART_HandleTypeDef>:
#include <cstdio>
#include <iostream>
#include <cstring>
#include <queue>

DayCam::DayCam(UART_HandleTypeDef* huart)
 8101224:	b580      	push	{r7, lr}
 8101226:	b082      	sub	sp, #8
 8101228:	af00      	add	r7, sp, #0
 810122a:	6078      	str	r0, [r7, #4]
 810122c:	6039      	str	r1, [r7, #0]
    : UartEndpoint(huart) {}
 810122e:	687b      	ldr	r3, [r7, #4]
 8101230:	6839      	ldr	r1, [r7, #0]
 8101232:	4618      	mov	r0, r3
 8101234:	f001 fabe 	bl	81027b4 <_ZN12UartEndpointC1EP20__UART_HandleTypeDef>
 8101238:	4a6e      	ldr	r2, [pc, #440]	@ (81013f4 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1d0>)
 810123a:	687b      	ldr	r3, [r7, #4]
 810123c:	601a      	str	r2, [r3, #0]
 810123e:	687b      	ldr	r3, [r7, #4]
 8101240:	4a6d      	ldr	r2, [pc, #436]	@ (81013f8 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1d4>)
 8101242:	3379      	adds	r3, #121	@ 0x79
 8101244:	6810      	ldr	r0, [r2, #0]
 8101246:	6018      	str	r0, [r3, #0]
 8101248:	687b      	ldr	r3, [r7, #4]
 810124a:	4a6c      	ldr	r2, [pc, #432]	@ (81013fc <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1d8>)
 810124c:	337d      	adds	r3, #125	@ 0x7d
 810124e:	6810      	ldr	r0, [r2, #0]
 8101250:	6018      	str	r0, [r3, #0]
 8101252:	7912      	ldrb	r2, [r2, #4]
 8101254:	711a      	strb	r2, [r3, #4]
 8101256:	687b      	ldr	r3, [r7, #4]
 8101258:	4a69      	ldr	r2, [pc, #420]	@ (8101400 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1dc>)
 810125a:	3382      	adds	r3, #130	@ 0x82
 810125c:	8811      	ldrh	r1, [r2, #0]
 810125e:	7892      	ldrb	r2, [r2, #2]
 8101260:	8019      	strh	r1, [r3, #0]
 8101262:	709a      	strb	r2, [r3, #2]
 8101264:	687b      	ldr	r3, [r7, #4]
 8101266:	22fa      	movs	r2, #250	@ 0xfa
 8101268:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
 810126c:	687b      	ldr	r3, [r7, #4]
 810126e:	4a65      	ldr	r2, [pc, #404]	@ (8101404 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1e0>)
 8101270:	3388      	adds	r3, #136	@ 0x88
 8101272:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101276:	6018      	str	r0, [r3, #0]
 8101278:	3304      	adds	r3, #4
 810127a:	8019      	strh	r1, [r3, #0]
 810127c:	687b      	ldr	r3, [r7, #4]
 810127e:	4a62      	ldr	r2, [pc, #392]	@ (8101408 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1e4>)
 8101280:	338e      	adds	r3, #142	@ 0x8e
 8101282:	6810      	ldr	r0, [r2, #0]
 8101284:	6018      	str	r0, [r3, #0]
 8101286:	8892      	ldrh	r2, [r2, #4]
 8101288:	809a      	strh	r2, [r3, #4]
 810128a:	687b      	ldr	r3, [r7, #4]
 810128c:	4a5f      	ldr	r2, [pc, #380]	@ (810140c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1e8>)
 810128e:	3394      	adds	r3, #148	@ 0x94
 8101290:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101294:	6018      	str	r0, [r3, #0]
 8101296:	3304      	adds	r3, #4
 8101298:	8019      	strh	r1, [r3, #0]
 810129a:	687b      	ldr	r3, [r7, #4]
 810129c:	4a5c      	ldr	r2, [pc, #368]	@ (8101410 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1ec>)
 810129e:	339a      	adds	r3, #154	@ 0x9a
 81012a0:	6810      	ldr	r0, [r2, #0]
 81012a2:	6018      	str	r0, [r3, #0]
 81012a4:	8892      	ldrh	r2, [r2, #4]
 81012a6:	809a      	strh	r2, [r3, #4]
 81012a8:	687b      	ldr	r3, [r7, #4]
 81012aa:	4a5a      	ldr	r2, [pc, #360]	@ (8101414 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1f0>)
 81012ac:	33a0      	adds	r3, #160	@ 0xa0
 81012ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 81012b2:	6018      	str	r0, [r3, #0]
 81012b4:	3304      	adds	r3, #4
 81012b6:	8019      	strh	r1, [r3, #0]
 81012b8:	687b      	ldr	r3, [r7, #4]
 81012ba:	4957      	ldr	r1, [pc, #348]	@ (8101418 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1f4>)
 81012bc:	f103 02a6 	add.w	r2, r3, #166	@ 0xa6
 81012c0:	460b      	mov	r3, r1
 81012c2:	cb03      	ldmia	r3!, {r0, r1}
 81012c4:	6010      	str	r0, [r2, #0]
 81012c6:	6051      	str	r1, [r2, #4]
 81012c8:	781b      	ldrb	r3, [r3, #0]
 81012ca:	7213      	strb	r3, [r2, #8]
 81012cc:	687b      	ldr	r3, [r7, #4]
 81012ce:	4a53      	ldr	r2, [pc, #332]	@ (810141c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1f8>)
 81012d0:	33af      	adds	r3, #175	@ 0xaf
 81012d2:	6810      	ldr	r0, [r2, #0]
 81012d4:	6018      	str	r0, [r3, #0]
 81012d6:	8892      	ldrh	r2, [r2, #4]
 81012d8:	809a      	strh	r2, [r3, #4]
 81012da:	687b      	ldr	r3, [r7, #4]
 81012dc:	4a49      	ldr	r2, [pc, #292]	@ (8101404 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1e0>)
 81012de:	33b5      	adds	r3, #181	@ 0xb5
 81012e0:	6810      	ldr	r0, [r2, #0]
 81012e2:	6018      	str	r0, [r3, #0]
 81012e4:	8892      	ldrh	r2, [r2, #4]
 81012e6:	809a      	strh	r2, [r3, #4]
 81012e8:	687b      	ldr	r3, [r7, #4]
 81012ea:	4a47      	ldr	r2, [pc, #284]	@ (8101408 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1e4>)
 81012ec:	33bb      	adds	r3, #187	@ 0xbb
 81012ee:	6810      	ldr	r0, [r2, #0]
 81012f0:	6018      	str	r0, [r3, #0]
 81012f2:	8892      	ldrh	r2, [r2, #4]
 81012f4:	809a      	strh	r2, [r3, #4]
 81012f6:	687b      	ldr	r3, [r7, #4]
 81012f8:	4a49      	ldr	r2, [pc, #292]	@ (8101420 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x1fc>)
 81012fa:	33c1      	adds	r3, #193	@ 0xc1
 81012fc:	6810      	ldr	r0, [r2, #0]
 81012fe:	6018      	str	r0, [r3, #0]
 8101300:	8892      	ldrh	r2, [r2, #4]
 8101302:	809a      	strh	r2, [r3, #4]
 8101304:	687b      	ldr	r3, [r7, #4]
 8101306:	4a47      	ldr	r2, [pc, #284]	@ (8101424 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x200>)
 8101308:	33c7      	adds	r3, #199	@ 0xc7
 810130a:	6810      	ldr	r0, [r2, #0]
 810130c:	6018      	str	r0, [r3, #0]
 810130e:	8892      	ldrh	r2, [r2, #4]
 8101310:	809a      	strh	r2, [r3, #4]
 8101312:	687b      	ldr	r3, [r7, #4]
 8101314:	4a44      	ldr	r2, [pc, #272]	@ (8101428 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x204>)
 8101316:	33cd      	adds	r3, #205	@ 0xcd
 8101318:	6810      	ldr	r0, [r2, #0]
 810131a:	6018      	str	r0, [r3, #0]
 810131c:	8892      	ldrh	r2, [r2, #4]
 810131e:	809a      	strh	r2, [r3, #4]
 8101320:	687b      	ldr	r3, [r7, #4]
 8101322:	4a42      	ldr	r2, [pc, #264]	@ (810142c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x208>)
 8101324:	33d3      	adds	r3, #211	@ 0xd3
 8101326:	6810      	ldr	r0, [r2, #0]
 8101328:	6018      	str	r0, [r3, #0]
 810132a:	8892      	ldrh	r2, [r2, #4]
 810132c:	809a      	strh	r2, [r3, #4]
 810132e:	687b      	ldr	r3, [r7, #4]
 8101330:	4a3f      	ldr	r2, [pc, #252]	@ (8101430 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x20c>)
 8101332:	33d9      	adds	r3, #217	@ 0xd9
 8101334:	6810      	ldr	r0, [r2, #0]
 8101336:	6018      	str	r0, [r3, #0]
 8101338:	8892      	ldrh	r2, [r2, #4]
 810133a:	809a      	strh	r2, [r3, #4]
 810133c:	687b      	ldr	r3, [r7, #4]
 810133e:	493d      	ldr	r1, [pc, #244]	@ (8101434 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x210>)
 8101340:	f103 02df 	add.w	r2, r3, #223	@ 0xdf
 8101344:	460b      	mov	r3, r1
 8101346:	cb03      	ldmia	r3!, {r0, r1}
 8101348:	6010      	str	r0, [r2, #0]
 810134a:	6051      	str	r1, [r2, #4]
 810134c:	781b      	ldrb	r3, [r3, #0]
 810134e:	7213      	strb	r3, [r2, #8]
 8101350:	687b      	ldr	r3, [r7, #4]
 8101352:	4a39      	ldr	r2, [pc, #228]	@ (8101438 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x214>)
 8101354:	33e8      	adds	r3, #232	@ 0xe8
 8101356:	e892 0003 	ldmia.w	r2, {r0, r1}
 810135a:	6018      	str	r0, [r3, #0]
 810135c:	3304      	adds	r3, #4
 810135e:	8019      	strh	r1, [r3, #0]
 8101360:	687b      	ldr	r3, [r7, #4]
 8101362:	4a36      	ldr	r2, [pc, #216]	@ (810143c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x218>)
 8101364:	33ee      	adds	r3, #238	@ 0xee
 8101366:	6810      	ldr	r0, [r2, #0]
 8101368:	6018      	str	r0, [r3, #0]
 810136a:	8892      	ldrh	r2, [r2, #4]
 810136c:	809a      	strh	r2, [r3, #4]
 810136e:	687b      	ldr	r3, [r7, #4]
 8101370:	4a33      	ldr	r2, [pc, #204]	@ (8101440 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x21c>)
 8101372:	33f4      	adds	r3, #244	@ 0xf4
 8101374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101378:	6018      	str	r0, [r3, #0]
 810137a:	3304      	adds	r3, #4
 810137c:	8019      	strh	r1, [r3, #0]
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	4a30      	ldr	r2, [pc, #192]	@ (8101444 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x220>)
 8101382:	33fa      	adds	r3, #250	@ 0xfa
 8101384:	6810      	ldr	r0, [r2, #0]
 8101386:	6018      	str	r0, [r3, #0]
 8101388:	7912      	ldrb	r2, [r2, #4]
 810138a:	711a      	strb	r2, [r3, #4]
 810138c:	687b      	ldr	r3, [r7, #4]
 810138e:	4a2e      	ldr	r2, [pc, #184]	@ (8101448 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x224>)
 8101390:	33ff      	adds	r3, #255	@ 0xff
 8101392:	6810      	ldr	r0, [r2, #0]
 8101394:	6018      	str	r0, [r3, #0]
 8101396:	7912      	ldrb	r2, [r2, #4]
 8101398:	711a      	strb	r2, [r3, #4]
 810139a:	687b      	ldr	r3, [r7, #4]
 810139c:	4a2b      	ldr	r2, [pc, #172]	@ (810144c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x228>)
 810139e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 81013a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 81013a6:	6018      	str	r0, [r3, #0]
 81013a8:	3304      	adds	r3, #4
 81013aa:	7019      	strb	r1, [r3, #0]
 81013ac:	687b      	ldr	r3, [r7, #4]
 81013ae:	4a28      	ldr	r2, [pc, #160]	@ (8101450 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x22c>)
 81013b0:	f203 1309 	addw	r3, r3, #265	@ 0x109
 81013b4:	6810      	ldr	r0, [r2, #0]
 81013b6:	6018      	str	r0, [r3, #0]
 81013b8:	687b      	ldr	r3, [r7, #4]
 81013ba:	4a26      	ldr	r2, [pc, #152]	@ (8101454 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x230>)
 81013bc:	f203 130d 	addw	r3, r3, #269	@ 0x10d
 81013c0:	6810      	ldr	r0, [r2, #0]
 81013c2:	6018      	str	r0, [r3, #0]
 81013c4:	8892      	ldrh	r2, [r2, #4]
 81013c6:	809a      	strh	r2, [r3, #4]
 81013c8:	687b      	ldr	r3, [r7, #4]
 81013ca:	4a23      	ldr	r2, [pc, #140]	@ (8101458 <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x234>)
 81013cc:	f203 1313 	addw	r3, r3, #275	@ 0x113
 81013d0:	6810      	ldr	r0, [r2, #0]
 81013d2:	6018      	str	r0, [r3, #0]
 81013d4:	8892      	ldrh	r2, [r2, #4]
 81013d6:	809a      	strh	r2, [r3, #4]
 81013d8:	687b      	ldr	r3, [r7, #4]
 81013da:	4a20      	ldr	r2, [pc, #128]	@ (810145c <_ZN6DayCamC1EP20__UART_HandleTypeDef+0x238>)
 81013dc:	f203 1319 	addw	r3, r3, #281	@ 0x119
 81013e0:	6810      	ldr	r0, [r2, #0]
 81013e2:	6018      	str	r0, [r3, #0]
 81013e4:	8892      	ldrh	r2, [r2, #4]
 81013e6:	809a      	strh	r2, [r3, #4]
 81013e8:	687b      	ldr	r3, [r7, #4]
 81013ea:	4618      	mov	r0, r3
 81013ec:	3708      	adds	r7, #8
 81013ee:	46bd      	mov	sp, r7
 81013f0:	bd80      	pop	{r7, pc}
 81013f2:	bf00      	nop
 81013f4:	0810f1d8 	.word	0x0810f1d8
 81013f8:	0810ef34 	.word	0x0810ef34
 81013fc:	0810ef38 	.word	0x0810ef38
 8101400:	0810ef40 	.word	0x0810ef40
 8101404:	0810ef44 	.word	0x0810ef44
 8101408:	0810ef4c 	.word	0x0810ef4c
 810140c:	0810ef54 	.word	0x0810ef54
 8101410:	0810ef5c 	.word	0x0810ef5c
 8101414:	0810ef64 	.word	0x0810ef64
 8101418:	0810ef6c 	.word	0x0810ef6c
 810141c:	0810ef78 	.word	0x0810ef78
 8101420:	0810ef80 	.word	0x0810ef80
 8101424:	0810ef88 	.word	0x0810ef88
 8101428:	0810ef90 	.word	0x0810ef90
 810142c:	0810ef98 	.word	0x0810ef98
 8101430:	0810efa0 	.word	0x0810efa0
 8101434:	0810efa8 	.word	0x0810efa8
 8101438:	0810efb4 	.word	0x0810efb4
 810143c:	0810efbc 	.word	0x0810efbc
 8101440:	0810efc4 	.word	0x0810efc4
 8101444:	0810efcc 	.word	0x0810efcc
 8101448:	0810efd4 	.word	0x0810efd4
 810144c:	0810efdc 	.word	0x0810efdc
 8101450:	0810efe4 	.word	0x0810efe4
 8101454:	0810efe8 	.word	0x0810efe8
 8101458:	0810eff0 	.word	0x0810eff0
 810145c:	0810eff8 	.word	0x0810eff8

08101460 <_ZN6DayCam4InitEv>:

void DayCam::Init() {
 8101460:	b580      	push	{r7, lr}
 8101462:	b082      	sub	sp, #8
 8101464:	af00      	add	r7, sp, #0
 8101466:	6078      	str	r0, [r7, #4]
//    static uint8_t byte;

	setAddress();
 8101468:	6878      	ldr	r0, [r7, #4]
 810146a:	f000 f8ef 	bl	810164c <_ZN6DayCam10setAddressEv>
    if (!StartReceive(&byte_, 1)) {
 810146e:	6878      	ldr	r0, [r7, #4]
 8101470:	687b      	ldr	r3, [r7, #4]
 8101472:	3378      	adds	r3, #120	@ 0x78
 8101474:	2201      	movs	r2, #1
 8101476:	4619      	mov	r1, r3
 8101478:	f001 f9be 	bl	81027f8 <_ZN12UartEndpoint12StartReceiveEPhj>
 810147c:	4603      	mov	r3, r0
 810147e:	f083 0301 	eor.w	r3, r3, #1
 8101482:	b2db      	uxtb	r3, r3
 8101484:	2b00      	cmp	r3, #0
 8101486:	d003      	beq.n	8101490 <_ZN6DayCam4InitEv+0x30>
        printf("❌ StartReceive failed\n");
 8101488:	4805      	ldr	r0, [pc, #20]	@ (81014a0 <_ZN6DayCam4InitEv+0x40>)
 810148a:	f00c fe75 	bl	810e178 <puts>
    }
    else printf("❌ StartReceive success\n");
}
 810148e:	e002      	b.n	8101496 <_ZN6DayCam4InitEv+0x36>
    else printf("❌ StartReceive success\n");
 8101490:	4804      	ldr	r0, [pc, #16]	@ (81014a4 <_ZN6DayCam4InitEv+0x44>)
 8101492:	f00c fe71 	bl	810e178 <puts>
}
 8101496:	bf00      	nop
 8101498:	3708      	adds	r7, #8
 810149a:	46bd      	mov	sp, r7
 810149c:	bd80      	pop	{r7, pc}
 810149e:	bf00      	nop
 81014a0:	0810f000 	.word	0x0810f000
 81014a4:	0810f018 	.word	0x0810f018

081014a8 <_ZNSt5queueIhSt5dequeIhSaIhEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 81014a8:	b580      	push	{r7, lr}
 81014aa:	b082      	sub	sp, #8
 81014ac:	af00      	add	r7, sp, #0
 81014ae:	6078      	str	r0, [r7, #4]
 81014b0:	687b      	ldr	r3, [r7, #4]
 81014b2:	4618      	mov	r0, r3
 81014b4:	f000 fa52 	bl	810195c <_ZNSt5dequeIhSaIhEED1Ev>
 81014b8:	687b      	ldr	r3, [r7, #4]
 81014ba:	4618      	mov	r0, r3
 81014bc:	3708      	adds	r7, #8
 81014be:	46bd      	mov	sp, r7
 81014c0:	bd80      	pop	{r7, pc}
	...

081014c4 <_ZN6DayCam13onReceiveByteEh>:



void DayCam::onReceiveByte(uint8_t byte) {
 81014c4:	b580      	push	{r7, lr}
 81014c6:	b096      	sub	sp, #88	@ 0x58
 81014c8:	af00      	add	r7, sp, #0
 81014ca:	6078      	str	r0, [r7, #4]
 81014cc:	460b      	mov	r3, r1
 81014ce:	70fb      	strb	r3, [r7, #3]

	std::queue<uint8_t> tempQueue{std::deque<uint8_t>(rxQueue_)};
 81014d0:	687b      	ldr	r3, [r7, #4]
 81014d2:	f103 0210 	add.w	r2, r3, #16
 81014d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81014da:	4611      	mov	r1, r2
 81014dc:	4618      	mov	r0, r3
 81014de:	f000 fa62 	bl	81019a6 <_ZNSt5dequeIhSaIhEEC1ERKS1_>
 81014e2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 81014e6:	f107 0308 	add.w	r3, r7, #8
 81014ea:	4611      	mov	r1, r2
 81014ec:	4618      	mov	r0, r3
 81014ee:	f000 fabc 	bl	8101a6a <_ZNSt5queueIhSt5dequeIhSaIhEEEC1EOS2_>
 81014f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81014f6:	4618      	mov	r0, r3
 81014f8:	f000 fa30 	bl	810195c <_ZNSt5dequeIhSaIhEED1Ev>

//    printf("📥 Received byte: 0x%02X\n", byte);
//    rxBuffer_[rxLength_] = byte_;

	if (rxQueue_.back() == 0xff){
 81014fc:	687b      	ldr	r3, [r7, #4]
 81014fe:	3310      	adds	r3, #16
 8101500:	4618      	mov	r0, r3
 8101502:	f000 fac5 	bl	8101a90 <_ZNSt5dequeIhSaIhEE4backEv>
 8101506:	4603      	mov	r3, r0
 8101508:	781b      	ldrb	r3, [r3, #0]
 810150a:	2bff      	cmp	r3, #255	@ 0xff
 810150c:	bf0c      	ite	eq
 810150e:	2301      	moveq	r3, #1
 8101510:	2300      	movne	r3, #0
 8101512:	b2db      	uxtb	r3, r3
 8101514:	2b00      	cmp	r3, #0
 8101516:	d021      	beq.n	810155c <_ZN6DayCam13onReceiveByteEh+0x98>
	    printf("rxQueue_: ");
 8101518:	4818      	ldr	r0, [pc, #96]	@ (810157c <_ZN6DayCam13onReceiveByteEh+0xb8>)
 810151a:	f00c fdbd 	bl	810e098 <iprintf>
	    while (!rxQueue_.empty()) {
 810151e:	e00f      	b.n	8101540 <_ZN6DayCam13onReceiveByteEh+0x7c>
	        printf("0x%02X ", rxQueue_.front());
 8101520:	687b      	ldr	r3, [r7, #4]
 8101522:	3310      	adds	r3, #16
 8101524:	4618      	mov	r0, r3
 8101526:	f7ff fbfd 	bl	8100d24 <_ZNSt5dequeIhSaIhEE5frontEv>
 810152a:	4603      	mov	r3, r0
 810152c:	781b      	ldrb	r3, [r3, #0]
 810152e:	4619      	mov	r1, r3
 8101530:	4813      	ldr	r0, [pc, #76]	@ (8101580 <_ZN6DayCam13onReceiveByteEh+0xbc>)
 8101532:	f00c fdb1 	bl	810e098 <iprintf>
	        rxQueue_.pop_front();
 8101536:	687b      	ldr	r3, [r7, #4]
 8101538:	3310      	adds	r3, #16
 810153a:	4618      	mov	r0, r3
 810153c:	f7ff fc06 	bl	8100d4c <_ZNSt5dequeIhSaIhEE9pop_frontEv>
	    while (!rxQueue_.empty()) {
 8101540:	687b      	ldr	r3, [r7, #4]
 8101542:	3310      	adds	r3, #16
 8101544:	4618      	mov	r0, r3
 8101546:	f7ff fbdb 	bl	8100d00 <_ZNKSt5dequeIhSaIhEE5emptyEv>
 810154a:	4603      	mov	r3, r0
 810154c:	f083 0301 	eor.w	r3, r3, #1
 8101550:	b2db      	uxtb	r3, r3
 8101552:	2b00      	cmp	r3, #0
 8101554:	d1e4      	bne.n	8101520 <_ZN6DayCam13onReceiveByteEh+0x5c>
	    }
	    printf("\n");
 8101556:	200a      	movs	r0, #10
 8101558:	f00c fdb0 	bl	810e0bc <putchar>
	}


    StartReceive(&byte_, 1);  // Re-arm
 810155c:	6878      	ldr	r0, [r7, #4]
 810155e:	687b      	ldr	r3, [r7, #4]
 8101560:	3378      	adds	r3, #120	@ 0x78
 8101562:	2201      	movs	r2, #1
 8101564:	4619      	mov	r1, r3
 8101566:	f001 f947 	bl	81027f8 <_ZN12UartEndpoint12StartReceiveEPhj>

}
 810156a:	f107 0308 	add.w	r3, r7, #8
 810156e:	4618      	mov	r0, r3
 8101570:	f7ff ff9a 	bl	81014a8 <_ZNSt5queueIhSt5dequeIhSaIhEEED1Ev>
 8101574:	3758      	adds	r7, #88	@ 0x58
 8101576:	46bd      	mov	sp, r7
 8101578:	bd80      	pop	{r7, pc}
 810157a:	bf00      	nop
 810157c:	0810f034 	.word	0x0810f034
 8101580:	0810f040 	.word	0x0810f040

08101584 <_ZN6DayCam15processIncomingEv>:

void DayCam::processIncoming() {
 8101584:	b580      	push	{r7, lr}
 8101586:	b08e      	sub	sp, #56	@ 0x38
 8101588:	af00      	add	r7, sp, #0
 810158a:	6078      	str	r0, [r7, #4]
    while (!rxQueue_.empty()) {
 810158c:	e04a      	b.n	8101624 <_ZN6DayCam15processIncomingEv+0xa0>
        uint8_t byte = rxQueue_.front();
 810158e:	687b      	ldr	r3, [r7, #4]
 8101590:	3310      	adds	r3, #16
 8101592:	4618      	mov	r0, r3
 8101594:	f7ff fbc6 	bl	8100d24 <_ZNSt5dequeIhSaIhEE5frontEv>
 8101598:	4603      	mov	r3, r0
 810159a:	781b      	ldrb	r3, [r3, #0]
 810159c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        rxQueue_.pop_front();
 81015a0:	687b      	ldr	r3, [r7, #4]
 81015a2:	3310      	adds	r3, #16
 81015a4:	4618      	mov	r0, r3
 81015a6:	f7ff fbd1 	bl	8100d4c <_ZNSt5dequeIhSaIhEE9pop_frontEv>
//        message_.push_back(byte);

        // Example: parse line-terminated message
        if (byte == '\n') {
 81015aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 81015ae:	2b0a      	cmp	r3, #10
 81015b0:	d138      	bne.n	8101624 <_ZN6DayCam15processIncomingEv+0xa0>
            printf("Client received: ");
 81015b2:	4824      	ldr	r0, [pc, #144]	@ (8101644 <_ZN6DayCam15processIncomingEv+0xc0>)
 81015b4:	f00c fd70 	bl	810e098 <iprintf>
            for (uint8_t c : rxQueue_)
 81015b8:	687b      	ldr	r3, [r7, #4]
 81015ba:	3310      	adds	r3, #16
 81015bc:	633b      	str	r3, [r7, #48]	@ 0x30
 81015be:	f107 031c 	add.w	r3, r7, #28
 81015c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 81015c4:	4618      	mov	r0, r3
 81015c6:	f7ff fbe8 	bl	8100d9a <_ZNSt5dequeIhSaIhEE5beginEv>
 81015ca:	f107 030c 	add.w	r3, r7, #12
 81015ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 81015d0:	4618      	mov	r0, r3
 81015d2:	f000 fa76 	bl	8101ac2 <_ZNSt5dequeIhSaIhEE3endEv>
 81015d6:	e012      	b.n	81015fe <_ZN6DayCam15processIncomingEv+0x7a>
 81015d8:	f107 031c 	add.w	r3, r7, #28
 81015dc:	4618      	mov	r0, r3
 81015de:	f7ff fc99 	bl	8100f14 <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>
 81015e2:	4603      	mov	r3, r0
 81015e4:	781b      	ldrb	r3, [r3, #0]
 81015e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                printf("%c", c);
 81015ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 81015ee:	4618      	mov	r0, r3
 81015f0:	f00c fd64 	bl	810e0bc <putchar>
            for (uint8_t c : rxQueue_)
 81015f4:	f107 031c 	add.w	r3, r7, #28
 81015f8:	4618      	mov	r0, r3
 81015fa:	f000 fa82 	bl	8101b02 <_ZNSt15_Deque_iteratorIhRhPhEppEv>
 81015fe:	f107 020c 	add.w	r2, r7, #12
 8101602:	f107 031c 	add.w	r3, r7, #28
 8101606:	4611      	mov	r1, r2
 8101608:	4618      	mov	r0, r3
 810160a:	f000 fa69 	bl	8101ae0 <_ZStneRKSt15_Deque_iteratorIhRhPhES4_>
 810160e:	4603      	mov	r3, r0
 8101610:	2b00      	cmp	r3, #0
 8101612:	d1e1      	bne.n	81015d8 <_ZN6DayCam15processIncomingEv+0x54>
            printf("\r\n");
 8101614:	480c      	ldr	r0, [pc, #48]	@ (8101648 <_ZN6DayCam15processIncomingEv+0xc4>)
 8101616:	f00c fdaf 	bl	810e178 <puts>

            rxQueue_.clear();  // ready for next message
 810161a:	687b      	ldr	r3, [r7, #4]
 810161c:	3310      	adds	r3, #16
 810161e:	4618      	mov	r0, r3
 8101620:	f000 fa8e 	bl	8101b40 <_ZNSt5dequeIhSaIhEE5clearEv>
    while (!rxQueue_.empty()) {
 8101624:	687b      	ldr	r3, [r7, #4]
 8101626:	3310      	adds	r3, #16
 8101628:	4618      	mov	r0, r3
 810162a:	f7ff fb69 	bl	8100d00 <_ZNKSt5dequeIhSaIhEE5emptyEv>
 810162e:	4603      	mov	r3, r0
 8101630:	f083 0301 	eor.w	r3, r3, #1
 8101634:	b2db      	uxtb	r3, r3
 8101636:	2b00      	cmp	r3, #0
 8101638:	d1a9      	bne.n	810158e <_ZN6DayCam15processIncomingEv+0xa>
        }
    }
}
 810163a:	bf00      	nop
 810163c:	bf00      	nop
 810163e:	3738      	adds	r7, #56	@ 0x38
 8101640:	46bd      	mov	sp, r7
 8101642:	bd80      	pop	{r7, pc}
 8101644:	0810f048 	.word	0x0810f048
 8101648:	0810f05c 	.word	0x0810f05c

0810164c <_ZN6DayCam10setAddressEv>:

void DayCam::setAddress() {
 810164c:	b580      	push	{r7, lr}
 810164e:	b084      	sub	sp, #16
 8101650:	af00      	add	r7, sp, #0
 8101652:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 8101654:	2300      	movs	r3, #0
 8101656:	60fb      	str	r3, [r7, #12]
 8101658:	e00c      	b.n	8101674 <_ZN6DayCam10setAddressEv+0x28>
    	SendCommand(&address_command[i],4);
 810165a:	6878      	ldr	r0, [r7, #4]
 810165c:	68fb      	ldr	r3, [r7, #12]
 810165e:	3378      	adds	r3, #120	@ 0x78
 8101660:	687a      	ldr	r2, [r7, #4]
 8101662:	4413      	add	r3, r2
 8101664:	3301      	adds	r3, #1
 8101666:	2204      	movs	r2, #4
 8101668:	4619      	mov	r1, r3
 810166a:	f001 f8e5 	bl	8102838 <_ZN12UartEndpoint11SendCommandEPKhj>
    for (int i = 0; i < 4; i++) {
 810166e:	68fb      	ldr	r3, [r7, #12]
 8101670:	3301      	adds	r3, #1
 8101672:	60fb      	str	r3, [r7, #12]
 8101674:	68fb      	ldr	r3, [r7, #12]
 8101676:	2b03      	cmp	r3, #3
 8101678:	ddef      	ble.n	810165a <_ZN6DayCam10setAddressEv+0xe>
    }
}
 810167a:	bf00      	nop
 810167c:	bf00      	nop
 810167e:	3710      	adds	r7, #16
 8101680:	46bd      	mov	sp, r7
 8101682:	bd80      	pop	{r7, pc}

08101684 <_ZN6DayCam12handleZoomInEPhh>:

void DayCam::handleZoomIn(uint8_t* speed, uint8_t length){
 8101684:	b580      	push	{r7, lr}
 8101686:	b086      	sub	sp, #24
 8101688:	af00      	add	r7, sp, #0
 810168a:	60f8      	str	r0, [r7, #12]
 810168c:	60b9      	str	r1, [r7, #8]
 810168e:	4613      	mov	r3, r2
 8101690:	71fb      	strb	r3, [r7, #7]

	uint8_t temp_buff[sizeof(zoom_teleVar)] = {0};
 8101692:	f107 0310 	add.w	r3, r7, #16
 8101696:	2200      	movs	r2, #0
 8101698:	601a      	str	r2, [r3, #0]
 810169a:	809a      	strh	r2, [r3, #4]

	memcpy(temp_buff,zoom_teleVar,sizeof(zoom_teleVar));
 810169c:	68fb      	ldr	r3, [r7, #12]
 810169e:	f103 0294 	add.w	r2, r3, #148	@ 0x94
 81016a2:	f107 0310 	add.w	r3, r7, #16
 81016a6:	6810      	ldr	r0, [r2, #0]
 81016a8:	6018      	str	r0, [r3, #0]
 81016aa:	8892      	ldrh	r2, [r2, #4]
 81016ac:	809a      	strh	r2, [r3, #4]

	if (speed[0] > 0 && speed[0] < 8)
 81016ae:	68bb      	ldr	r3, [r7, #8]
 81016b0:	781b      	ldrb	r3, [r3, #0]
 81016b2:	2b00      	cmp	r3, #0
 81016b4:	d016      	beq.n	81016e4 <_ZN6DayCam12handleZoomInEPhh+0x60>
 81016b6:	68bb      	ldr	r3, [r7, #8]
 81016b8:	781b      	ldrb	r3, [r3, #0]
 81016ba:	2b07      	cmp	r3, #7
 81016bc:	d812      	bhi.n	81016e4 <_ZN6DayCam12handleZoomInEPhh+0x60>
		temp_buff [4] = (temp_buff [4] & 0xF0 | (speed[0] & 0x0f));
 81016be:	7d3b      	ldrb	r3, [r7, #20]
 81016c0:	f023 030f 	bic.w	r3, r3, #15
 81016c4:	b2da      	uxtb	r2, r3
 81016c6:	68bb      	ldr	r3, [r7, #8]
 81016c8:	781b      	ldrb	r3, [r3, #0]
 81016ca:	f003 030f 	and.w	r3, r3, #15
 81016ce:	b2db      	uxtb	r3, r3
 81016d0:	4313      	orrs	r3, r2
 81016d2:	b2db      	uxtb	r3, r3
 81016d4:	753b      	strb	r3, [r7, #20]
	else
		return;

	SendCommand(temp_buff, sizeof(temp_buff));
 81016d6:	68fb      	ldr	r3, [r7, #12]
 81016d8:	f107 0110 	add.w	r1, r7, #16
 81016dc:	2206      	movs	r2, #6
 81016de:	4618      	mov	r0, r3
 81016e0:	f001 f8aa 	bl	8102838 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 81016e4:	3718      	adds	r7, #24
 81016e6:	46bd      	mov	sp, r7
 81016e8:	bd80      	pop	{r7, pc}

081016ea <_ZN6DayCam13handleZoomOutEPhh>:

void DayCam::handleZoomOut(uint8_t* speed, uint8_t length){
 81016ea:	b580      	push	{r7, lr}
 81016ec:	b086      	sub	sp, #24
 81016ee:	af00      	add	r7, sp, #0
 81016f0:	60f8      	str	r0, [r7, #12]
 81016f2:	60b9      	str	r1, [r7, #8]
 81016f4:	4613      	mov	r3, r2
 81016f6:	71fb      	strb	r3, [r7, #7]

	uint8_t temp_buff[sizeof(zoom_teleVar)] = {0};
 81016f8:	f107 0310 	add.w	r3, r7, #16
 81016fc:	2200      	movs	r2, #0
 81016fe:	601a      	str	r2, [r3, #0]
 8101700:	809a      	strh	r2, [r3, #4]

	memcpy(temp_buff,zoom_wideVar,sizeof(zoom_teleVar));
 8101702:	68fb      	ldr	r3, [r7, #12]
 8101704:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 8101708:	f107 0310 	add.w	r3, r7, #16
 810170c:	6810      	ldr	r0, [r2, #0]
 810170e:	6018      	str	r0, [r3, #0]
 8101710:	8892      	ldrh	r2, [r2, #4]
 8101712:	809a      	strh	r2, [r3, #4]

	if (speed[0] > 0 && speed[0] < 8)
 8101714:	68bb      	ldr	r3, [r7, #8]
 8101716:	781b      	ldrb	r3, [r3, #0]
 8101718:	2b00      	cmp	r3, #0
 810171a:	d016      	beq.n	810174a <_ZN6DayCam13handleZoomOutEPhh+0x60>
 810171c:	68bb      	ldr	r3, [r7, #8]
 810171e:	781b      	ldrb	r3, [r3, #0]
 8101720:	2b07      	cmp	r3, #7
 8101722:	d812      	bhi.n	810174a <_ZN6DayCam13handleZoomOutEPhh+0x60>
		temp_buff [4] = (temp_buff [4] & 0xF0 | (speed[0] & 0x0f));
 8101724:	7d3b      	ldrb	r3, [r7, #20]
 8101726:	f023 030f 	bic.w	r3, r3, #15
 810172a:	b2da      	uxtb	r2, r3
 810172c:	68bb      	ldr	r3, [r7, #8]
 810172e:	781b      	ldrb	r3, [r3, #0]
 8101730:	f003 030f 	and.w	r3, r3, #15
 8101734:	b2db      	uxtb	r3, r3
 8101736:	4313      	orrs	r3, r2
 8101738:	b2db      	uxtb	r3, r3
 810173a:	753b      	strb	r3, [r7, #20]
	else
		return;

	SendCommand(temp_buff, sizeof(temp_buff));
 810173c:	68fb      	ldr	r3, [r7, #12]
 810173e:	f107 0110 	add.w	r1, r7, #16
 8101742:	2206      	movs	r2, #6
 8101744:	4618      	mov	r0, r3
 8101746:	f001 f877 	bl	8102838 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 810174a:	3718      	adds	r7, #24
 810174c:	46bd      	mov	sp, r7
 810174e:	bd80      	pop	{r7, pc}

08101750 <_ZN6DayCam19handleZoom2PositionEt>:

void DayCam::handleZoom2Position(uint16_t position){
 8101750:	b580      	push	{r7, lr}
 8101752:	b086      	sub	sp, #24
 8101754:	af00      	add	r7, sp, #0
 8101756:	6078      	str	r0, [r7, #4]
 8101758:	460b      	mov	r3, r1
 810175a:	807b      	strh	r3, [r7, #2]

	uint8_t temp_buff[sizeof(zoom2Position)] = {0};
 810175c:	f107 030c 	add.w	r3, r7, #12
 8101760:	2200      	movs	r2, #0
 8101762:	601a      	str	r2, [r3, #0]
 8101764:	605a      	str	r2, [r3, #4]
 8101766:	721a      	strb	r2, [r3, #8]

	memcpy(temp_buff,zoom2Position,sizeof(zoom2Position));
 8101768:	687b      	ldr	r3, [r7, #4]
 810176a:	f103 02a6 	add.w	r2, r3, #166	@ 0xa6
 810176e:	f107 030c 	add.w	r3, r7, #12
 8101772:	6810      	ldr	r0, [r2, #0]
 8101774:	6851      	ldr	r1, [r2, #4]
 8101776:	c303      	stmia	r3!, {r0, r1}
 8101778:	7a12      	ldrb	r2, [r2, #8]
 810177a:	701a      	strb	r2, [r3, #0]

	if (position <= 0x4000){
 810177c:	887b      	ldrh	r3, [r7, #2]
 810177e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101782:	d822      	bhi.n	81017ca <_ZN6DayCam19handleZoom2PositionEt+0x7a>
		temp_buff[4] = (position & 0xF000) >> 12;
 8101784:	887b      	ldrh	r3, [r7, #2]
 8101786:	0b1b      	lsrs	r3, r3, #12
 8101788:	b29b      	uxth	r3, r3
 810178a:	b2db      	uxtb	r3, r3
 810178c:	743b      	strb	r3, [r7, #16]
		temp_buff[5] = (position & 0x0F00) >> 8;
 810178e:	887b      	ldrh	r3, [r7, #2]
 8101790:	0a1b      	lsrs	r3, r3, #8
 8101792:	b29b      	uxth	r3, r3
 8101794:	b2db      	uxtb	r3, r3
 8101796:	f003 030f 	and.w	r3, r3, #15
 810179a:	b2db      	uxtb	r3, r3
 810179c:	747b      	strb	r3, [r7, #17]
		temp_buff[6] = (position & 0x00F0) >> 4;
 810179e:	887b      	ldrh	r3, [r7, #2]
 81017a0:	091b      	lsrs	r3, r3, #4
 81017a2:	b29b      	uxth	r3, r3
 81017a4:	b2db      	uxtb	r3, r3
 81017a6:	f003 030f 	and.w	r3, r3, #15
 81017aa:	b2db      	uxtb	r3, r3
 81017ac:	74bb      	strb	r3, [r7, #18]
		temp_buff[7] = (position & 0x000F) ;
 81017ae:	887b      	ldrh	r3, [r7, #2]
 81017b0:	b2db      	uxtb	r3, r3
 81017b2:	f003 030f 	and.w	r3, r3, #15
 81017b6:	b2db      	uxtb	r3, r3
 81017b8:	74fb      	strb	r3, [r7, #19]
	}
	else
		return;
	SendCommand(temp_buff, sizeof(temp_buff));
 81017ba:	687b      	ldr	r3, [r7, #4]
 81017bc:	f107 010c 	add.w	r1, r7, #12
 81017c0:	2209      	movs	r2, #9
 81017c2:	4618      	mov	r0, r3
 81017c4:	f001 f838 	bl	8102838 <_ZN12UartEndpoint11SendCommandEPKhj>
 81017c8:	e000      	b.n	81017cc <_ZN6DayCam19handleZoom2PositionEt+0x7c>
		return;
 81017ca:	bf00      	nop

}
 81017cc:	3718      	adds	r7, #24
 81017ce:	46bd      	mov	sp, r7
 81017d0:	bd80      	pop	{r7, pc}

081017d2 <_ZN6DayCam14handleZoomStopEv>:

void DayCam::handleZoomStop(){
 81017d2:	b580      	push	{r7, lr}
 81017d4:	b082      	sub	sp, #8
 81017d6:	af00      	add	r7, sp, #0
 81017d8:	6078      	str	r0, [r7, #4]
	SendCommand(zoom_stop, sizeof(zoom_stop));
 81017da:	6878      	ldr	r0, [r7, #4]
 81017dc:	687b      	ldr	r3, [r7, #4]
 81017de:	33a0      	adds	r3, #160	@ 0xa0
 81017e0:	2206      	movs	r2, #6
 81017e2:	4619      	mov	r1, r3
 81017e4:	f001 f828 	bl	8102838 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 81017e8:	bf00      	nop
 81017ea:	3708      	adds	r7, #8
 81017ec:	46bd      	mov	sp, r7
 81017ee:	bd80      	pop	{r7, pc}

081017f0 <_ZN6DayCam14handleFocusFarEPhh>:

void DayCam::handleFocusFar(uint8_t* speed, uint8_t length){
 81017f0:	b580      	push	{r7, lr}
 81017f2:	b086      	sub	sp, #24
 81017f4:	af00      	add	r7, sp, #0
 81017f6:	60f8      	str	r0, [r7, #12]
 81017f8:	60b9      	str	r1, [r7, #8]
 81017fa:	4613      	mov	r3, r2
 81017fc:	71fb      	strb	r3, [r7, #7]

	uint8_t temp_buff[sizeof(focus_farVar)] = {0};
 81017fe:	f107 0310 	add.w	r3, r7, #16
 8101802:	2200      	movs	r2, #0
 8101804:	601a      	str	r2, [r3, #0]
 8101806:	809a      	strh	r2, [r3, #4]

	memcpy(temp_buff,focus_farVar,sizeof(focus_farVar));
 8101808:	68fb      	ldr	r3, [r7, #12]
 810180a:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 810180e:	f107 0310 	add.w	r3, r7, #16
 8101812:	6810      	ldr	r0, [r2, #0]
 8101814:	6018      	str	r0, [r3, #0]
 8101816:	8892      	ldrh	r2, [r2, #4]
 8101818:	809a      	strh	r2, [r3, #4]

	if (speed[0] > 0 && speed[0] < 8)
 810181a:	68bb      	ldr	r3, [r7, #8]
 810181c:	781b      	ldrb	r3, [r3, #0]
 810181e:	2b00      	cmp	r3, #0
 8101820:	d016      	beq.n	8101850 <_ZN6DayCam14handleFocusFarEPhh+0x60>
 8101822:	68bb      	ldr	r3, [r7, #8]
 8101824:	781b      	ldrb	r3, [r3, #0]
 8101826:	2b07      	cmp	r3, #7
 8101828:	d812      	bhi.n	8101850 <_ZN6DayCam14handleFocusFarEPhh+0x60>
		temp_buff [4] = (temp_buff [4] & 0xF0 | (speed[0] & 0x0f));
 810182a:	7d3b      	ldrb	r3, [r7, #20]
 810182c:	f023 030f 	bic.w	r3, r3, #15
 8101830:	b2da      	uxtb	r2, r3
 8101832:	68bb      	ldr	r3, [r7, #8]
 8101834:	781b      	ldrb	r3, [r3, #0]
 8101836:	f003 030f 	and.w	r3, r3, #15
 810183a:	b2db      	uxtb	r3, r3
 810183c:	4313      	orrs	r3, r2
 810183e:	b2db      	uxtb	r3, r3
 8101840:	753b      	strb	r3, [r7, #20]
	else
		return;

	SendCommand(temp_buff, sizeof(temp_buff));
 8101842:	68fb      	ldr	r3, [r7, #12]
 8101844:	f107 0110 	add.w	r1, r7, #16
 8101848:	2206      	movs	r2, #6
 810184a:	4618      	mov	r0, r3
 810184c:	f000 fff4 	bl	8102838 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 8101850:	3718      	adds	r7, #24
 8101852:	46bd      	mov	sp, r7
 8101854:	bd80      	pop	{r7, pc}

08101856 <_ZN6DayCam15handleFocusNearEPhh>:

void DayCam::handleFocusNear(uint8_t* speed, uint8_t length){
 8101856:	b580      	push	{r7, lr}
 8101858:	b086      	sub	sp, #24
 810185a:	af00      	add	r7, sp, #0
 810185c:	60f8      	str	r0, [r7, #12]
 810185e:	60b9      	str	r1, [r7, #8]
 8101860:	4613      	mov	r3, r2
 8101862:	71fb      	strb	r3, [r7, #7]

	uint8_t temp_buff[sizeof(focus_nearVar)] = {0};
 8101864:	f107 0310 	add.w	r3, r7, #16
 8101868:	2200      	movs	r2, #0
 810186a:	601a      	str	r2, [r3, #0]
 810186c:	809a      	strh	r2, [r3, #4]

	memcpy(temp_buff,focus_nearVar,sizeof(focus_nearVar));
 810186e:	68fb      	ldr	r3, [r7, #12]
 8101870:	f103 02d3 	add.w	r2, r3, #211	@ 0xd3
 8101874:	f107 0310 	add.w	r3, r7, #16
 8101878:	6810      	ldr	r0, [r2, #0]
 810187a:	6018      	str	r0, [r3, #0]
 810187c:	8892      	ldrh	r2, [r2, #4]
 810187e:	809a      	strh	r2, [r3, #4]

	if (speed[0] > 0 && speed[0] < 8)
 8101880:	68bb      	ldr	r3, [r7, #8]
 8101882:	781b      	ldrb	r3, [r3, #0]
 8101884:	2b00      	cmp	r3, #0
 8101886:	d016      	beq.n	81018b6 <_ZN6DayCam15handleFocusNearEPhh+0x60>
 8101888:	68bb      	ldr	r3, [r7, #8]
 810188a:	781b      	ldrb	r3, [r3, #0]
 810188c:	2b07      	cmp	r3, #7
 810188e:	d812      	bhi.n	81018b6 <_ZN6DayCam15handleFocusNearEPhh+0x60>
		temp_buff [4] = (temp_buff [4] & 0xF0 | (speed[0] & 0x0f));
 8101890:	7d3b      	ldrb	r3, [r7, #20]
 8101892:	f023 030f 	bic.w	r3, r3, #15
 8101896:	b2da      	uxtb	r2, r3
 8101898:	68bb      	ldr	r3, [r7, #8]
 810189a:	781b      	ldrb	r3, [r3, #0]
 810189c:	f003 030f 	and.w	r3, r3, #15
 81018a0:	b2db      	uxtb	r3, r3
 81018a2:	4313      	orrs	r3, r2
 81018a4:	b2db      	uxtb	r3, r3
 81018a6:	753b      	strb	r3, [r7, #20]
	else
		return;

	SendCommand(temp_buff, sizeof(temp_buff));
 81018a8:	68fb      	ldr	r3, [r7, #12]
 81018aa:	f107 0110 	add.w	r1, r7, #16
 81018ae:	2206      	movs	r2, #6
 81018b0:	4618      	mov	r0, r3
 81018b2:	f000 ffc1 	bl	8102838 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 81018b6:	3718      	adds	r7, #24
 81018b8:	46bd      	mov	sp, r7
 81018ba:	bd80      	pop	{r7, pc}

081018bc <_ZN6DayCam20handleFocus2PositionEt>:

void DayCam::handleFocus2Position(uint16_t position){
 81018bc:	b580      	push	{r7, lr}
 81018be:	b086      	sub	sp, #24
 81018c0:	af00      	add	r7, sp, #0
 81018c2:	6078      	str	r0, [r7, #4]
 81018c4:	460b      	mov	r3, r1
 81018c6:	807b      	strh	r3, [r7, #2]

	uint8_t temp_buff[sizeof(focus2Position)] = {0};
 81018c8:	f107 030c 	add.w	r3, r7, #12
 81018cc:	2200      	movs	r2, #0
 81018ce:	601a      	str	r2, [r3, #0]
 81018d0:	605a      	str	r2, [r3, #4]
 81018d2:	721a      	strb	r2, [r3, #8]

	memcpy(temp_buff,focus2Position,sizeof(focus2Position));
 81018d4:	687b      	ldr	r3, [r7, #4]
 81018d6:	f103 02df 	add.w	r2, r3, #223	@ 0xdf
 81018da:	f107 030c 	add.w	r3, r7, #12
 81018de:	6810      	ldr	r0, [r2, #0]
 81018e0:	6851      	ldr	r1, [r2, #4]
 81018e2:	c303      	stmia	r3!, {r0, r1}
 81018e4:	7a12      	ldrb	r2, [r2, #8]
 81018e6:	701a      	strb	r2, [r3, #0]

	if (position <= 0x4000){
 81018e8:	887b      	ldrh	r3, [r7, #2]
 81018ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81018ee:	d822      	bhi.n	8101936 <_ZN6DayCam20handleFocus2PositionEt+0x7a>
		temp_buff[4] = (position & 0xF000) >> 12;
 81018f0:	887b      	ldrh	r3, [r7, #2]
 81018f2:	0b1b      	lsrs	r3, r3, #12
 81018f4:	b29b      	uxth	r3, r3
 81018f6:	b2db      	uxtb	r3, r3
 81018f8:	743b      	strb	r3, [r7, #16]
		temp_buff[5] = (position & 0x0F00) >> 8;
 81018fa:	887b      	ldrh	r3, [r7, #2]
 81018fc:	0a1b      	lsrs	r3, r3, #8
 81018fe:	b29b      	uxth	r3, r3
 8101900:	b2db      	uxtb	r3, r3
 8101902:	f003 030f 	and.w	r3, r3, #15
 8101906:	b2db      	uxtb	r3, r3
 8101908:	747b      	strb	r3, [r7, #17]
		temp_buff[6] = (position & 0x00F0) >> 4;
 810190a:	887b      	ldrh	r3, [r7, #2]
 810190c:	091b      	lsrs	r3, r3, #4
 810190e:	b29b      	uxth	r3, r3
 8101910:	b2db      	uxtb	r3, r3
 8101912:	f003 030f 	and.w	r3, r3, #15
 8101916:	b2db      	uxtb	r3, r3
 8101918:	74bb      	strb	r3, [r7, #18]
		temp_buff[7] = (position & 0x000F) ;
 810191a:	887b      	ldrh	r3, [r7, #2]
 810191c:	b2db      	uxtb	r3, r3
 810191e:	f003 030f 	and.w	r3, r3, #15
 8101922:	b2db      	uxtb	r3, r3
 8101924:	74fb      	strb	r3, [r7, #19]
	}
	else
		return;
	SendCommand(temp_buff, sizeof(temp_buff));
 8101926:	687b      	ldr	r3, [r7, #4]
 8101928:	f107 010c 	add.w	r1, r7, #12
 810192c:	2209      	movs	r2, #9
 810192e:	4618      	mov	r0, r3
 8101930:	f000 ff82 	bl	8102838 <_ZN12UartEndpoint11SendCommandEPKhj>
 8101934:	e000      	b.n	8101938 <_ZN6DayCam20handleFocus2PositionEt+0x7c>
		return;
 8101936:	bf00      	nop

}
 8101938:	3718      	adds	r7, #24
 810193a:	46bd      	mov	sp, r7
 810193c:	bd80      	pop	{r7, pc}

0810193e <_ZN6DayCam15handleFocusStopEv>:

void DayCam::handleFocusStop(){
 810193e:	b580      	push	{r7, lr}
 8101940:	b082      	sub	sp, #8
 8101942:	af00      	add	r7, sp, #0
 8101944:	6078      	str	r0, [r7, #4]
	SendCommand(focus_stop, sizeof(focus_stop));
 8101946:	6878      	ldr	r0, [r7, #4]
 8101948:	687b      	ldr	r3, [r7, #4]
 810194a:	33d9      	adds	r3, #217	@ 0xd9
 810194c:	2206      	movs	r2, #6
 810194e:	4619      	mov	r1, r3
 8101950:	f000 ff72 	bl	8102838 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 8101954:	bf00      	nop
 8101956:	3708      	adds	r7, #8
 8101958:	46bd      	mov	sp, r7
 810195a:	bd80      	pop	{r7, pc}

0810195c <_ZNSt5dequeIhSaIhEED1Ev>:
      ~deque()
 810195c:	b580      	push	{r7, lr}
 810195e:	b08a      	sub	sp, #40	@ 0x28
 8101960:	af00      	add	r7, sp, #0
 8101962:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8101964:	f107 0308 	add.w	r3, r7, #8
 8101968:	6879      	ldr	r1, [r7, #4]
 810196a:	4618      	mov	r0, r3
 810196c:	f7ff fa15 	bl	8100d9a <_ZNSt5dequeIhSaIhEE5beginEv>
 8101970:	f107 0318 	add.w	r3, r7, #24
 8101974:	6879      	ldr	r1, [r7, #4]
 8101976:	4618      	mov	r0, r3
 8101978:	f000 f8a3 	bl	8101ac2 <_ZNSt5dequeIhSaIhEE3endEv>
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	4618      	mov	r0, r3
 8101980:	f7ff fa1a 	bl	8100db8 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8101984:	4603      	mov	r3, r0
 8101986:	f107 0218 	add.w	r2, r7, #24
 810198a:	f107 0108 	add.w	r1, r7, #8
 810198e:	6878      	ldr	r0, [r7, #4]
 8101990:	f000 f91a 	bl	8101bc8 <_ZNSt5dequeIhSaIhEE15_M_destroy_dataESt15_Deque_iteratorIhRhPhES5_RKS0_>
 8101994:	687b      	ldr	r3, [r7, #4]
 8101996:	4618      	mov	r0, r3
 8101998:	f000 f8f4 	bl	8101b84 <_ZNSt11_Deque_baseIhSaIhEED1Ev>
 810199c:	687b      	ldr	r3, [r7, #4]
 810199e:	4618      	mov	r0, r3
 81019a0:	3728      	adds	r7, #40	@ 0x28
 81019a2:	46bd      	mov	sp, r7
 81019a4:	bd80      	pop	{r7, pc}

081019a6 <_ZNSt5dequeIhSaIhEEC1ERKS1_>:
      deque(const deque& __x)
 81019a6:	b590      	push	{r4, r7, lr}
 81019a8:	b09d      	sub	sp, #116	@ 0x74
 81019aa:	af02      	add	r7, sp, #8
 81019ac:	6078      	str	r0, [r7, #4]
 81019ae:	6039      	str	r1, [r7, #0]
	      __x.size())
 81019b0:	687c      	ldr	r4, [r7, #4]
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
 81019b2:	683b      	ldr	r3, [r7, #0]
 81019b4:	4618      	mov	r0, r3
 81019b6:	f7ff fbc6 	bl	8101146 <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 81019ba:	4603      	mov	r3, r0
 81019bc:	667b      	str	r3, [r7, #100]	@ 0x64
 81019be:	f107 030c 	add.w	r3, r7, #12
 81019c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 81019c4:	663a      	str	r2, [r7, #96]	@ 0x60
 81019c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81019c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 81019ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 81019cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81019ce:	657b      	str	r3, [r7, #84]	@ 0x54
 81019d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 81019d2:	653b      	str	r3, [r7, #80]	@ 0x50
       *  @return @c __rhs
      */
      [[__gnu__::__always_inline__]]
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
 81019d4:	bf00      	nop
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    [[__gnu__::__always_inline__]]
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }
 81019d6:	bf00      	nop
	      __x.size())
 81019d8:	6838      	ldr	r0, [r7, #0]
 81019da:	f000 f902 	bl	8101be2 <_ZNKSt5dequeIhSaIhEE4sizeEv>
 81019de:	4602      	mov	r2, r0
 81019e0:	f107 030c 	add.w	r3, r7, #12
 81019e4:	4619      	mov	r1, r3
 81019e6:	4620      	mov	r0, r4
 81019e8:	f000 f90d 	bl	8101c06 <_ZNSt11_Deque_baseIhSaIhEEC1ERKS0_j>
 81019ec:	f107 030c 	add.w	r3, r7, #12
 81019f0:	4618      	mov	r0, r3
 81019f2:	f000 fa3a 	bl	8101e6a <_ZNSt15__new_allocatorIhED1Ev>
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 81019f6:	f107 0320 	add.w	r3, r7, #32
 81019fa:	6839      	ldr	r1, [r7, #0]
 81019fc:	4618      	mov	r0, r3
 81019fe:	f000 f916 	bl	8101c2e <_ZNKSt5dequeIhSaIhEE5beginEv>
 8101a02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101a06:	6839      	ldr	r1, [r7, #0]
 8101a08:	4618      	mov	r0, r3
 8101a0a:	f000 f91f 	bl	8101c4c <_ZNKSt5dequeIhSaIhEE3endEv>
				    this->_M_impl._M_start,
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	f103 0208 	add.w	r2, r3, #8
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8101a14:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101a18:	4611      	mov	r1, r2
 8101a1a:	4618      	mov	r0, r3
 8101a1c:	f7ff f9d7 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
				    _M_get_Tp_allocator()); }
 8101a20:	687b      	ldr	r3, [r7, #4]
 8101a22:	4618      	mov	r0, r3
 8101a24:	f7ff f9c8 	bl	8100db8 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8101a28:	4604      	mov	r4, r0
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8101a2a:	f107 0010 	add.w	r0, r7, #16
 8101a2e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101a32:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8101a36:	f107 0120 	add.w	r1, r7, #32
 8101a3a:	9400      	str	r4, [sp, #0]
 8101a3c:	f000 f931 	bl	8101ca2 <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEhET0_T_S9_S8_RSaIT1_E>
				    _M_get_Tp_allocator()); }
 8101a40:	687b      	ldr	r3, [r7, #4]
 8101a42:	4618      	mov	r0, r3
 8101a44:	376c      	adds	r7, #108	@ 0x6c
 8101a46:	46bd      	mov	sp, r7
 8101a48:	bd90      	pop	{r4, r7, pc}

08101a4a <_ZNSt5dequeIhSaIhEEC1EOS1_>:
      deque(deque&&) = default;
 8101a4a:	b580      	push	{r7, lr}
 8101a4c:	b082      	sub	sp, #8
 8101a4e:	af00      	add	r7, sp, #0
 8101a50:	6078      	str	r0, [r7, #4]
 8101a52:	6039      	str	r1, [r7, #0]
 8101a54:	687b      	ldr	r3, [r7, #4]
 8101a56:	683a      	ldr	r2, [r7, #0]
 8101a58:	4611      	mov	r1, r2
 8101a5a:	4618      	mov	r0, r3
 8101a5c:	f000 f952 	bl	8101d04 <_ZNSt11_Deque_baseIhSaIhEEC1EOS1_>
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	4618      	mov	r0, r3
 8101a64:	3708      	adds	r7, #8
 8101a66:	46bd      	mov	sp, r7
 8101a68:	bd80      	pop	{r7, pc}

08101a6a <_ZNSt5queueIhSt5dequeIhSaIhEEEC1EOS2_>:
      explicit
      queue(const _Sequence& __c)
      : c(__c) { }

      explicit
      queue(_Sequence&& __c)
 8101a6a:	b590      	push	{r4, r7, lr}
 8101a6c:	b083      	sub	sp, #12
 8101a6e:	af00      	add	r7, sp, #0
 8101a70:	6078      	str	r0, [r7, #4]
 8101a72:	6039      	str	r1, [r7, #0]
      : c(std::move(__c)) { }
 8101a74:	687c      	ldr	r4, [r7, #4]
 8101a76:	6838      	ldr	r0, [r7, #0]
 8101a78:	f000 f939 	bl	8101cee <_ZSt4moveIRSt5dequeIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8101a7c:	4603      	mov	r3, r0
 8101a7e:	4619      	mov	r1, r3
 8101a80:	4620      	mov	r0, r4
 8101a82:	f7ff ffe2 	bl	8101a4a <_ZNSt5dequeIhSaIhEEC1EOS1_>
 8101a86:	687b      	ldr	r3, [r7, #4]
 8101a88:	4618      	mov	r0, r3
 8101a8a:	370c      	adds	r7, #12
 8101a8c:	46bd      	mov	sp, r7
 8101a8e:	bd90      	pop	{r4, r7, pc}

08101a90 <_ZNSt5dequeIhSaIhEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8101a90:	b580      	push	{r7, lr}
 8101a92:	b086      	sub	sp, #24
 8101a94:	af00      	add	r7, sp, #0
 8101a96:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 8101a98:	f107 0308 	add.w	r3, r7, #8
 8101a9c:	6879      	ldr	r1, [r7, #4]
 8101a9e:	4618      	mov	r0, r3
 8101aa0:	f000 f80f 	bl	8101ac2 <_ZNSt5dequeIhSaIhEE3endEv>
	--__tmp;
 8101aa4:	f107 0308 	add.w	r3, r7, #8
 8101aa8:	4618      	mov	r0, r3
 8101aaa:	f000 f950 	bl	8101d4e <_ZNSt15_Deque_iteratorIhRhPhEmmEv>
	return *__tmp;
 8101aae:	f107 0308 	add.w	r3, r7, #8
 8101ab2:	4618      	mov	r0, r3
 8101ab4:	f7ff fa2e 	bl	8100f14 <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>
 8101ab8:	4603      	mov	r3, r0
      }
 8101aba:	4618      	mov	r0, r3
 8101abc:	3718      	adds	r7, #24
 8101abe:	46bd      	mov	sp, r7
 8101ac0:	bd80      	pop	{r7, pc}

08101ac2 <_ZNSt5dequeIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101ac2:	b580      	push	{r7, lr}
 8101ac4:	b082      	sub	sp, #8
 8101ac6:	af00      	add	r7, sp, #0
 8101ac8:	6078      	str	r0, [r7, #4]
 8101aca:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8101acc:	683b      	ldr	r3, [r7, #0]
 8101ace:	3318      	adds	r3, #24
 8101ad0:	4619      	mov	r1, r3
 8101ad2:	6878      	ldr	r0, [r7, #4]
 8101ad4:	f7ff f97b 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8101ad8:	6878      	ldr	r0, [r7, #4]
 8101ada:	3708      	adds	r7, #8
 8101adc:	46bd      	mov	sp, r7
 8101ade:	bd80      	pop	{r7, pc}

08101ae0 <_ZStneRKSt15_Deque_iteratorIhRhPhES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8101ae0:	b580      	push	{r7, lr}
 8101ae2:	b082      	sub	sp, #8
 8101ae4:	af00      	add	r7, sp, #0
 8101ae6:	6078      	str	r0, [r7, #4]
 8101ae8:	6039      	str	r1, [r7, #0]
      { return !(__x == __y); }
 8101aea:	6839      	ldr	r1, [r7, #0]
 8101aec:	6878      	ldr	r0, [r7, #4]
 8101aee:	f7ff f9fd 	bl	8100eec <_ZSteqRKSt15_Deque_iteratorIhRhPhES4_>
 8101af2:	4603      	mov	r3, r0
 8101af4:	f083 0301 	eor.w	r3, r3, #1
 8101af8:	b2db      	uxtb	r3, r3
 8101afa:	4618      	mov	r0, r3
 8101afc:	3708      	adds	r7, #8
 8101afe:	46bd      	mov	sp, r7
 8101b00:	bd80      	pop	{r7, pc}

08101b02 <_ZNSt15_Deque_iteratorIhRhPhEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8101b02:	b580      	push	{r7, lr}
 8101b04:	b082      	sub	sp, #8
 8101b06:	af00      	add	r7, sp, #0
 8101b08:	6078      	str	r0, [r7, #4]
	++_M_cur;
 8101b0a:	687b      	ldr	r3, [r7, #4]
 8101b0c:	681b      	ldr	r3, [r3, #0]
 8101b0e:	1c5a      	adds	r2, r3, #1
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 8101b14:	687b      	ldr	r3, [r7, #4]
 8101b16:	681a      	ldr	r2, [r3, #0]
 8101b18:	687b      	ldr	r3, [r7, #4]
 8101b1a:	689b      	ldr	r3, [r3, #8]
 8101b1c:	429a      	cmp	r2, r3
 8101b1e:	d10a      	bne.n	8101b36 <_ZNSt15_Deque_iteratorIhRhPhEppEv+0x34>
	    _M_set_node(_M_node + 1);
 8101b20:	687b      	ldr	r3, [r7, #4]
 8101b22:	68db      	ldr	r3, [r3, #12]
 8101b24:	3304      	adds	r3, #4
 8101b26:	4619      	mov	r1, r3
 8101b28:	6878      	ldr	r0, [r7, #4]
 8101b2a:	f7ff fa94 	bl	8101056 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 8101b2e:	687b      	ldr	r3, [r7, #4]
 8101b30:	685a      	ldr	r2, [r3, #4]
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	601a      	str	r2, [r3, #0]
	return *this;
 8101b36:	687b      	ldr	r3, [r7, #4]
      }
 8101b38:	4618      	mov	r0, r3
 8101b3a:	3708      	adds	r7, #8
 8101b3c:	46bd      	mov	sp, r7
 8101b3e:	bd80      	pop	{r7, pc}

08101b40 <_ZNSt5dequeIhSaIhEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8101b40:	b580      	push	{r7, lr}
 8101b42:	b086      	sub	sp, #24
 8101b44:	af00      	add	r7, sp, #0
 8101b46:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8101b48:	f107 0308 	add.w	r3, r7, #8
 8101b4c:	6879      	ldr	r1, [r7, #4]
 8101b4e:	4618      	mov	r0, r3
 8101b50:	f7ff f923 	bl	8100d9a <_ZNSt5dequeIhSaIhEE5beginEv>
 8101b54:	f107 0308 	add.w	r3, r7, #8
 8101b58:	4619      	mov	r1, r3
 8101b5a:	6878      	ldr	r0, [r7, #4]
 8101b5c:	f000 f916 	bl	8101d8c <_ZNSt5dequeIhSaIhEE15_M_erase_at_endESt15_Deque_iteratorIhRhPhE>
 8101b60:	bf00      	nop
 8101b62:	3718      	adds	r7, #24
 8101b64:	46bd      	mov	sp, r7
 8101b66:	bd80      	pop	{r7, pc}

08101b68 <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8101b68:	b580      	push	{r7, lr}
 8101b6a:	b084      	sub	sp, #16
 8101b6c:	af00      	add	r7, sp, #0
 8101b6e:	6078      	str	r0, [r7, #4]
 8101b70:	687b      	ldr	r3, [r7, #4]
 8101b72:	60fb      	str	r3, [r7, #12]
 8101b74:	68f8      	ldr	r0, [r7, #12]
 8101b76:	f000 f978 	bl	8101e6a <_ZNSt15__new_allocatorIhED1Ev>
 8101b7a:	687b      	ldr	r3, [r7, #4]
 8101b7c:	4618      	mov	r0, r3
 8101b7e:	3710      	adds	r7, #16
 8101b80:	46bd      	mov	sp, r7
 8101b82:	bd80      	pop	{r7, pc}

08101b84 <_ZNSt11_Deque_baseIhSaIhEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8101b84:	b580      	push	{r7, lr}
 8101b86:	b082      	sub	sp, #8
 8101b88:	af00      	add	r7, sp, #0
 8101b8a:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8101b8c:	687b      	ldr	r3, [r7, #4]
 8101b8e:	681b      	ldr	r3, [r3, #0]
 8101b90:	2b00      	cmp	r3, #0
 8101b92:	d010      	beq.n	8101bb6 <_ZNSt11_Deque_baseIhSaIhEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8101b94:	687b      	ldr	r3, [r7, #4]
 8101b96:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8101b9c:	3304      	adds	r3, #4
 8101b9e:	461a      	mov	r2, r3
 8101ba0:	6878      	ldr	r0, [r7, #4]
 8101ba2:	f000 f926 	bl	8101df2 <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8101ba6:	687b      	ldr	r3, [r7, #4]
 8101ba8:	6819      	ldr	r1, [r3, #0]
 8101baa:	687b      	ldr	r3, [r7, #4]
 8101bac:	685b      	ldr	r3, [r3, #4]
 8101bae:	461a      	mov	r2, r3
 8101bb0:	6878      	ldr	r0, [r7, #4]
 8101bb2:	f000 f939 	bl	8101e28 <_ZNSt11_Deque_baseIhSaIhEE17_M_deallocate_mapEPPhj>
    }
 8101bb6:	687b      	ldr	r3, [r7, #4]
 8101bb8:	4618      	mov	r0, r3
 8101bba:	f7ff ffd5 	bl	8101b68 <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implD1Ev>
 8101bbe:	687b      	ldr	r3, [r7, #4]
 8101bc0:	4618      	mov	r0, r3
 8101bc2:	3708      	adds	r7, #8
 8101bc4:	46bd      	mov	sp, r7
 8101bc6:	bd80      	pop	{r7, pc}

08101bc8 <_ZNSt5dequeIhSaIhEE15_M_destroy_dataESt15_Deque_iteratorIhRhPhES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8101bc8:	b480      	push	{r7}
 8101bca:	b08d      	sub	sp, #52	@ 0x34
 8101bcc:	af00      	add	r7, sp, #0
 8101bce:	60f8      	str	r0, [r7, #12]
 8101bd0:	60b9      	str	r1, [r7, #8]
 8101bd2:	607a      	str	r2, [r7, #4]
 8101bd4:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8101bd6:	bf00      	nop
 8101bd8:	3734      	adds	r7, #52	@ 0x34
 8101bda:	46bd      	mov	sp, r7
 8101bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101be0:	4770      	bx	lr

08101be2 <_ZNKSt5dequeIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8101be2:	b580      	push	{r7, lr}
 8101be4:	b082      	sub	sp, #8
 8101be6:	af00      	add	r7, sp, #0
 8101be8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8101bea:	687b      	ldr	r3, [r7, #4]
 8101bec:	f103 0218 	add.w	r2, r3, #24
 8101bf0:	687b      	ldr	r3, [r7, #4]
 8101bf2:	3308      	adds	r3, #8
 8101bf4:	4619      	mov	r1, r3
 8101bf6:	4610      	mov	r0, r2
 8101bf8:	f000 f942 	bl	8101e80 <_ZStmiRKSt15_Deque_iteratorIhRhPhES4_>
 8101bfc:	4603      	mov	r3, r0
 8101bfe:	4618      	mov	r0, r3
 8101c00:	3708      	adds	r7, #8
 8101c02:	46bd      	mov	sp, r7
 8101c04:	bd80      	pop	{r7, pc}

08101c06 <_ZNSt11_Deque_baseIhSaIhEEC1ERKS0_j>:
      _Deque_base(const allocator_type& __a, size_t __num_elements)
 8101c06:	b580      	push	{r7, lr}
 8101c08:	b084      	sub	sp, #16
 8101c0a:	af00      	add	r7, sp, #0
 8101c0c:	60f8      	str	r0, [r7, #12]
 8101c0e:	60b9      	str	r1, [r7, #8]
 8101c10:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8101c12:	68fb      	ldr	r3, [r7, #12]
 8101c14:	68b9      	ldr	r1, [r7, #8]
 8101c16:	4618      	mov	r0, r3
 8101c18:	f000 f95c 	bl	8101ed4 <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1ERKS0_>
      { _M_initialize_map(__num_elements); }
 8101c1c:	6879      	ldr	r1, [r7, #4]
 8101c1e:	68f8      	ldr	r0, [r7, #12]
 8101c20:	f7ff f902 	bl	8100e28 <_ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEj>
 8101c24:	68fb      	ldr	r3, [r7, #12]
 8101c26:	4618      	mov	r0, r3
 8101c28:	3710      	adds	r7, #16
 8101c2a:	46bd      	mov	sp, r7
 8101c2c:	bd80      	pop	{r7, pc}

08101c2e <_ZNKSt5dequeIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8101c2e:	b580      	push	{r7, lr}
 8101c30:	b082      	sub	sp, #8
 8101c32:	af00      	add	r7, sp, #0
 8101c34:	6078      	str	r0, [r7, #4]
 8101c36:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8101c38:	683b      	ldr	r3, [r7, #0]
 8101c3a:	3308      	adds	r3, #8
 8101c3c:	4619      	mov	r1, r3
 8101c3e:	6878      	ldr	r0, [r7, #4]
 8101c40:	f000 f95e 	bl	8101f00 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1IS_IhRhPhEvEERKT_>
 8101c44:	6878      	ldr	r0, [r7, #4]
 8101c46:	3708      	adds	r7, #8
 8101c48:	46bd      	mov	sp, r7
 8101c4a:	bd80      	pop	{r7, pc}

08101c4c <_ZNKSt5dequeIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8101c4c:	b580      	push	{r7, lr}
 8101c4e:	b082      	sub	sp, #8
 8101c50:	af00      	add	r7, sp, #0
 8101c52:	6078      	str	r0, [r7, #4]
 8101c54:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8101c56:	683b      	ldr	r3, [r7, #0]
 8101c58:	3318      	adds	r3, #24
 8101c5a:	4619      	mov	r1, r3
 8101c5c:	6878      	ldr	r0, [r7, #4]
 8101c5e:	f000 f94f 	bl	8101f00 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1IS_IhRhPhEvEERKT_>
 8101c62:	6878      	ldr	r0, [r7, #4]
 8101c64:	3708      	adds	r7, #8
 8101c66:	46bd      	mov	sp, r7
 8101c68:	bd80      	pop	{r7, pc}

08101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8101c6a:	b480      	push	{r7}
 8101c6c:	b083      	sub	sp, #12
 8101c6e:	af00      	add	r7, sp, #0
 8101c70:	6078      	str	r0, [r7, #4]
 8101c72:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8101c74:	683b      	ldr	r3, [r7, #0]
 8101c76:	681a      	ldr	r2, [r3, #0]
 8101c78:	687b      	ldr	r3, [r7, #4]
 8101c7a:	601a      	str	r2, [r3, #0]
 8101c7c:	683b      	ldr	r3, [r7, #0]
 8101c7e:	685a      	ldr	r2, [r3, #4]
 8101c80:	687b      	ldr	r3, [r7, #4]
 8101c82:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8101c84:	683b      	ldr	r3, [r7, #0]
 8101c86:	689a      	ldr	r2, [r3, #8]
 8101c88:	687b      	ldr	r3, [r7, #4]
 8101c8a:	609a      	str	r2, [r3, #8]
 8101c8c:	683b      	ldr	r3, [r7, #0]
 8101c8e:	68da      	ldr	r2, [r3, #12]
 8101c90:	687b      	ldr	r3, [r7, #4]
 8101c92:	60da      	str	r2, [r3, #12]
 8101c94:	687b      	ldr	r3, [r7, #4]
 8101c96:	4618      	mov	r0, r3
 8101c98:	370c      	adds	r7, #12
 8101c9a:	46bd      	mov	sp, r7
 8101c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ca0:	4770      	bx	lr

08101ca2 <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEhET0_T_S9_S8_RSaIT1_E>:

#if _GLIBCXX_HOSTED
  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8101ca2:	b580      	push	{r7, lr}
 8101ca4:	b090      	sub	sp, #64	@ 0x40
 8101ca6:	af00      	add	r7, sp, #0
 8101ca8:	60f8      	str	r0, [r7, #12]
 8101caa:	60b9      	str	r1, [r7, #8]
 8101cac:	607a      	str	r2, [r7, #4]
 8101cae:	603b      	str	r3, [r7, #0]
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return std::__do_uninit_copy(__first, __last, __result);
#endif
      return std::uninitialized_copy(__first, __last, __result);
 8101cb0:	f107 0310 	add.w	r3, r7, #16
 8101cb4:	68b9      	ldr	r1, [r7, #8]
 8101cb6:	4618      	mov	r0, r3
 8101cb8:	f7ff ffd7 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8101cbc:	f107 0320 	add.w	r3, r7, #32
 8101cc0:	6879      	ldr	r1, [r7, #4]
 8101cc2:	4618      	mov	r0, r3
 8101cc4:	f7ff ffd1 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8101cc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101ccc:	6839      	ldr	r1, [r7, #0]
 8101cce:	4618      	mov	r0, r3
 8101cd0:	f7ff f87d 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8101cd4:	68f8      	ldr	r0, [r7, #12]
 8101cd6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101cda:	f107 0220 	add.w	r2, r7, #32
 8101cde:	f107 0110 	add.w	r1, r7, #16
 8101ce2:	f000 f929 	bl	8101f38 <_ZSt18uninitialized_copyISt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEET0_T_S9_S8_>
    }
 8101ce6:	68f8      	ldr	r0, [r7, #12]
 8101ce8:	3740      	adds	r7, #64	@ 0x40
 8101cea:	46bd      	mov	sp, r7
 8101cec:	bd80      	pop	{r7, pc}

08101cee <_ZSt4moveIRSt5dequeIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8101cee:	b480      	push	{r7}
 8101cf0:	b083      	sub	sp, #12
 8101cf2:	af00      	add	r7, sp, #0
 8101cf4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8101cf6:	687b      	ldr	r3, [r7, #4]
 8101cf8:	4618      	mov	r0, r3
 8101cfa:	370c      	adds	r7, #12
 8101cfc:	46bd      	mov	sp, r7
 8101cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d02:	4770      	bx	lr

08101d04 <_ZNSt11_Deque_baseIhSaIhEEC1EOS1_>:
      _Deque_base(_Deque_base&& __x)
 8101d04:	b590      	push	{r4, r7, lr}
 8101d06:	b083      	sub	sp, #12
 8101d08:	af00      	add	r7, sp, #0
 8101d0a:	6078      	str	r0, [r7, #4]
 8101d0c:	6039      	str	r1, [r7, #0]
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
 8101d0e:	687c      	ldr	r4, [r7, #4]
 8101d10:	6838      	ldr	r0, [r7, #0]
 8101d12:	f7ff f851 	bl	8100db8 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8101d16:	4603      	mov	r3, r0
 8101d18:	4618      	mov	r0, r3
 8101d1a:	f000 f939 	bl	8101f90 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8101d1e:	4603      	mov	r3, r0
 8101d20:	4619      	mov	r1, r3
 8101d22:	4620      	mov	r0, r4
 8101d24:	f000 f93f 	bl	8101fa6 <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1EOS0_>
	_M_initialize_map(0);
 8101d28:	2100      	movs	r1, #0
 8101d2a:	6878      	ldr	r0, [r7, #4]
 8101d2c:	f7ff f87c 	bl	8100e28 <_ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEj>
	if (__x._M_impl._M_map)
 8101d30:	683b      	ldr	r3, [r7, #0]
 8101d32:	681b      	ldr	r3, [r3, #0]
 8101d34:	2b00      	cmp	r3, #0
 8101d36:	d005      	beq.n	8101d44 <_ZNSt11_Deque_baseIhSaIhEEC1EOS1_+0x40>
	  this->_M_impl._M_swap_data(__x._M_impl);
 8101d38:	687b      	ldr	r3, [r7, #4]
 8101d3a:	683a      	ldr	r2, [r7, #0]
 8101d3c:	4611      	mov	r1, r2
 8101d3e:	4618      	mov	r0, r3
 8101d40:	f000 f94a 	bl	8101fd8 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_data12_M_swap_dataERS2_>
      }
 8101d44:	687b      	ldr	r3, [r7, #4]
 8101d46:	4618      	mov	r0, r3
 8101d48:	370c      	adds	r7, #12
 8101d4a:	46bd      	mov	sp, r7
 8101d4c:	bd90      	pop	{r4, r7, pc}

08101d4e <_ZNSt15_Deque_iteratorIhRhPhEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8101d4e:	b580      	push	{r7, lr}
 8101d50:	b082      	sub	sp, #8
 8101d52:	af00      	add	r7, sp, #0
 8101d54:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	681a      	ldr	r2, [r3, #0]
 8101d5a:	687b      	ldr	r3, [r7, #4]
 8101d5c:	685b      	ldr	r3, [r3, #4]
 8101d5e:	429a      	cmp	r2, r3
 8101d60:	d10a      	bne.n	8101d78 <_ZNSt15_Deque_iteratorIhRhPhEmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 8101d62:	687b      	ldr	r3, [r7, #4]
 8101d64:	68db      	ldr	r3, [r3, #12]
 8101d66:	3b04      	subs	r3, #4
 8101d68:	4619      	mov	r1, r3
 8101d6a:	6878      	ldr	r0, [r7, #4]
 8101d6c:	f7ff f973 	bl	8101056 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
	    _M_cur = _M_last;
 8101d70:	687b      	ldr	r3, [r7, #4]
 8101d72:	689a      	ldr	r2, [r3, #8]
 8101d74:	687b      	ldr	r3, [r7, #4]
 8101d76:	601a      	str	r2, [r3, #0]
	--_M_cur;
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	681b      	ldr	r3, [r3, #0]
 8101d7c:	1e5a      	subs	r2, r3, #1
 8101d7e:	687b      	ldr	r3, [r7, #4]
 8101d80:	601a      	str	r2, [r3, #0]
	return *this;
 8101d82:	687b      	ldr	r3, [r7, #4]
      }
 8101d84:	4618      	mov	r0, r3
 8101d86:	3708      	adds	r7, #8
 8101d88:	46bd      	mov	sp, r7
 8101d8a:	bd80      	pop	{r7, pc}

08101d8c <_ZNSt5dequeIhSaIhEE15_M_erase_at_endESt15_Deque_iteratorIhRhPhE>:
      }

      // Called by erase(q1, q2), resize(), clear(), _M_assign_aux,
      // _M_fill_assign, operator=.
      void
      _M_erase_at_end(iterator __pos)
 8101d8c:	b590      	push	{r4, r7, lr}
 8101d8e:	b08b      	sub	sp, #44	@ 0x2c
 8101d90:	af00      	add	r7, sp, #0
 8101d92:	6078      	str	r0, [r7, #4]
 8101d94:	6039      	str	r1, [r7, #0]
      {
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8101d96:	f107 0308 	add.w	r3, r7, #8
 8101d9a:	6839      	ldr	r1, [r7, #0]
 8101d9c:	4618      	mov	r0, r3
 8101d9e:	f7ff f816 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8101da2:	f107 0318 	add.w	r3, r7, #24
 8101da6:	6879      	ldr	r1, [r7, #4]
 8101da8:	4618      	mov	r0, r3
 8101daa:	f7ff fe8a 	bl	8101ac2 <_ZNSt5dequeIhSaIhEE3endEv>
 8101dae:	687b      	ldr	r3, [r7, #4]
 8101db0:	4618      	mov	r0, r3
 8101db2:	f7ff f801 	bl	8100db8 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8101db6:	4603      	mov	r3, r0
 8101db8:	f107 0218 	add.w	r2, r7, #24
 8101dbc:	f107 0108 	add.w	r1, r7, #8
 8101dc0:	6878      	ldr	r0, [r7, #4]
 8101dc2:	f7ff ff01 	bl	8101bc8 <_ZNSt5dequeIhSaIhEE15_M_destroy_dataESt15_Deque_iteratorIhRhPhES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 8101dc6:	6878      	ldr	r0, [r7, #4]
 8101dc8:	683b      	ldr	r3, [r7, #0]
 8101dca:	68db      	ldr	r3, [r3, #12]
 8101dcc:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8101dd2:	3304      	adds	r3, #4
 8101dd4:	461a      	mov	r2, r3
 8101dd6:	f000 f80c 	bl	8101df2 <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_>
	this->_M_impl._M_finish = __pos;
 8101dda:	687b      	ldr	r3, [r7, #4]
 8101ddc:	683a      	ldr	r2, [r7, #0]
 8101dde:	f103 0418 	add.w	r4, r3, #24
 8101de2:	4613      	mov	r3, r2
 8101de4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101de6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8101dea:	bf00      	nop
 8101dec:	372c      	adds	r7, #44	@ 0x2c
 8101dee:	46bd      	mov	sp, r7
 8101df0:	bd90      	pop	{r4, r7, pc}

08101df2 <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_>:
    _Deque_base<_Tp, _Alloc>::
 8101df2:	b580      	push	{r7, lr}
 8101df4:	b086      	sub	sp, #24
 8101df6:	af00      	add	r7, sp, #0
 8101df8:	60f8      	str	r0, [r7, #12]
 8101dfa:	60b9      	str	r1, [r7, #8]
 8101dfc:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8101dfe:	68bb      	ldr	r3, [r7, #8]
 8101e00:	617b      	str	r3, [r7, #20]
 8101e02:	e008      	b.n	8101e16 <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_+0x24>
	_M_deallocate_node(*__n);
 8101e04:	697b      	ldr	r3, [r7, #20]
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	4619      	mov	r1, r3
 8101e0a:	68f8      	ldr	r0, [r7, #12]
 8101e0c:	f7ff f93b 	bl	8101086 <_ZNSt11_Deque_baseIhSaIhEE18_M_deallocate_nodeEPh>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8101e10:	697b      	ldr	r3, [r7, #20]
 8101e12:	3304      	adds	r3, #4
 8101e14:	617b      	str	r3, [r7, #20]
 8101e16:	697a      	ldr	r2, [r7, #20]
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	429a      	cmp	r2, r3
 8101e1c:	d3f2      	bcc.n	8101e04 <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_+0x12>
    }
 8101e1e:	bf00      	nop
 8101e20:	bf00      	nop
 8101e22:	3718      	adds	r7, #24
 8101e24:	46bd      	mov	sp, r7
 8101e26:	bd80      	pop	{r7, pc}

08101e28 <_ZNSt11_Deque_baseIhSaIhEE17_M_deallocate_mapEPPhj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8101e28:	b580      	push	{r7, lr}
 8101e2a:	b088      	sub	sp, #32
 8101e2c:	af00      	add	r7, sp, #0
 8101e2e:	60f8      	str	r0, [r7, #12]
 8101e30:	60b9      	str	r1, [r7, #8]
 8101e32:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8101e34:	f107 0314 	add.w	r3, r7, #20
 8101e38:	68f9      	ldr	r1, [r7, #12]
 8101e3a:	4618      	mov	r0, r3
 8101e3c:	f7ff f93b 	bl	81010b6 <_ZNKSt11_Deque_baseIhSaIhEE20_M_get_map_allocatorEv>
 8101e40:	68bb      	ldr	r3, [r7, #8]
 8101e42:	61fb      	str	r3, [r7, #28]
 8101e44:	687b      	ldr	r3, [r7, #4]
 8101e46:	61bb      	str	r3, [r7, #24]
      { __a.deallocate(__p, __n); }
 8101e48:	f107 0314 	add.w	r3, r7, #20
 8101e4c:	69ba      	ldr	r2, [r7, #24]
 8101e4e:	69f9      	ldr	r1, [r7, #28]
 8101e50:	4618      	mov	r0, r3
 8101e52:	f000 f927 	bl	81020a4 <_ZNSt15__new_allocatorIPhE10deallocateEPS0_j>
 8101e56:	bf00      	nop
 8101e58:	f107 0314 	add.w	r3, r7, #20
 8101e5c:	4618      	mov	r0, r3
 8101e5e:	f7ff f97d 	bl	810115c <_ZNSt15__new_allocatorIPhED1Ev>
      }
 8101e62:	bf00      	nop
 8101e64:	3720      	adds	r7, #32
 8101e66:	46bd      	mov	sp, r7
 8101e68:	bd80      	pop	{r7, pc}

08101e6a <_ZNSt15__new_allocatorIhED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8101e6a:	b480      	push	{r7}
 8101e6c:	b083      	sub	sp, #12
 8101e6e:	af00      	add	r7, sp, #0
 8101e70:	6078      	str	r0, [r7, #4]
 8101e72:	687b      	ldr	r3, [r7, #4]
 8101e74:	4618      	mov	r0, r3
 8101e76:	370c      	adds	r7, #12
 8101e78:	46bd      	mov	sp, r7
 8101e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e7e:	4770      	bx	lr

08101e80 <_ZStmiRKSt15_Deque_iteratorIhRhPhES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8101e80:	b580      	push	{r7, lr}
 8101e82:	b082      	sub	sp, #8
 8101e84:	af00      	add	r7, sp, #0
 8101e86:	6078      	str	r0, [r7, #4]
 8101e88:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8101e8a:	f7ff f954 	bl	8101136 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 8101e8e:	4603      	mov	r3, r0
 8101e90:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8101e92:	687b      	ldr	r3, [r7, #4]
 8101e94:	68da      	ldr	r2, [r3, #12]
 8101e96:	683b      	ldr	r3, [r7, #0]
 8101e98:	68db      	ldr	r3, [r3, #12]
 8101e9a:	1ad3      	subs	r3, r2, r3
 8101e9c:	109b      	asrs	r3, r3, #2
 8101e9e:	461a      	mov	r2, r3
 8101ea0:	687b      	ldr	r3, [r7, #4]
 8101ea2:	68db      	ldr	r3, [r3, #12]
 8101ea4:	2b00      	cmp	r3, #0
 8101ea6:	bf14      	ite	ne
 8101ea8:	2301      	movne	r3, #1
 8101eaa:	2300      	moveq	r3, #0
 8101eac:	b2db      	uxtb	r3, r3
 8101eae:	1ad3      	subs	r3, r2, r3
 8101eb0:	fb03 f201 	mul.w	r2, r3, r1
	  + (__x._M_cur - __x._M_first)
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	6819      	ldr	r1, [r3, #0]
 8101eb8:	687b      	ldr	r3, [r7, #4]
 8101eba:	685b      	ldr	r3, [r3, #4]
 8101ebc:	1acb      	subs	r3, r1, r3
 8101ebe:	441a      	add	r2, r3
	  + (__y._M_last - __y._M_cur);
 8101ec0:	683b      	ldr	r3, [r7, #0]
 8101ec2:	6899      	ldr	r1, [r3, #8]
 8101ec4:	683b      	ldr	r3, [r7, #0]
 8101ec6:	681b      	ldr	r3, [r3, #0]
 8101ec8:	1acb      	subs	r3, r1, r3
 8101eca:	4413      	add	r3, r2
      }
 8101ecc:	4618      	mov	r0, r3
 8101ece:	3708      	adds	r7, #8
 8101ed0:	46bd      	mov	sp, r7
 8101ed2:	bd80      	pop	{r7, pc}

08101ed4 <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1ERKS0_>:
	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8101ed4:	b580      	push	{r7, lr}
 8101ed6:	b086      	sub	sp, #24
 8101ed8:	af00      	add	r7, sp, #0
 8101eda:	6078      	str	r0, [r7, #4]
 8101edc:	6039      	str	r1, [r7, #0]
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	617b      	str	r3, [r7, #20]
 8101ee2:	683b      	ldr	r3, [r7, #0]
 8101ee4:	613b      	str	r3, [r7, #16]
 8101ee6:	697b      	ldr	r3, [r7, #20]
 8101ee8:	60fb      	str	r3, [r7, #12]
 8101eea:	693b      	ldr	r3, [r7, #16]
 8101eec:	60bb      	str	r3, [r7, #8]
	: _Tp_alloc_type(__a)
 8101eee:	687b      	ldr	r3, [r7, #4]
 8101ef0:	4618      	mov	r0, r3
 8101ef2:	f7ff f847 	bl	8100f84 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1Ev>
	{ }
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	4618      	mov	r0, r3
 8101efa:	3718      	adds	r7, #24
 8101efc:	46bd      	mov	sp, r7
 8101efe:	bd80      	pop	{r7, pc}

08101f00 <_ZNSt15_Deque_iteratorIhRKhPS0_EC1IS_IhRhPhEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8101f00:	b480      	push	{r7}
 8101f02:	b083      	sub	sp, #12
 8101f04:	af00      	add	r7, sp, #0
 8101f06:	6078      	str	r0, [r7, #4]
 8101f08:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8101f0a:	683b      	ldr	r3, [r7, #0]
 8101f0c:	681a      	ldr	r2, [r3, #0]
 8101f0e:	687b      	ldr	r3, [r7, #4]
 8101f10:	601a      	str	r2, [r3, #0]
 8101f12:	683b      	ldr	r3, [r7, #0]
 8101f14:	685a      	ldr	r2, [r3, #4]
 8101f16:	687b      	ldr	r3, [r7, #4]
 8101f18:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8101f1a:	683b      	ldr	r3, [r7, #0]
 8101f1c:	689a      	ldr	r2, [r3, #8]
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	609a      	str	r2, [r3, #8]
 8101f22:	683b      	ldr	r3, [r7, #0]
 8101f24:	68da      	ldr	r2, [r3, #12]
 8101f26:	687b      	ldr	r3, [r7, #4]
 8101f28:	60da      	str	r2, [r3, #12]
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	4618      	mov	r0, r3
 8101f2e:	370c      	adds	r7, #12
 8101f30:	46bd      	mov	sp, r7
 8101f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f36:	4770      	bx	lr

08101f38 <_ZSt18uninitialized_copyISt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8101f38:	b580      	push	{r7, lr}
 8101f3a:	b092      	sub	sp, #72	@ 0x48
 8101f3c:	af00      	add	r7, sp, #0
 8101f3e:	60f8      	str	r0, [r7, #12]
 8101f40:	60b9      	str	r1, [r7, #8]
 8101f42:	607a      	str	r2, [r7, #4]
 8101f44:	603b      	str	r3, [r7, #0]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8101f46:	2301      	movs	r3, #1
 8101f48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      const bool __assignable
 8101f4c:	2301      	movs	r3, #1
 8101f4e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	__uninit_copy(__first, __last, __result);
 8101f52:	f107 0314 	add.w	r3, r7, #20
 8101f56:	68b9      	ldr	r1, [r7, #8]
 8101f58:	4618      	mov	r0, r3
 8101f5a:	f7ff fe86 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8101f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101f62:	6879      	ldr	r1, [r7, #4]
 8101f64:	4618      	mov	r0, r3
 8101f66:	f7ff fe80 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8101f6a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8101f6e:	6839      	ldr	r1, [r7, #0]
 8101f70:	4618      	mov	r0, r3
 8101f72:	f7fe ff2c 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8101f76:	68f8      	ldr	r0, [r7, #12]
 8101f78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8101f7c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8101f80:	f107 0114 	add.w	r1, r7, #20
 8101f84:	f000 f835 	bl	8101ff2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIhRKhPS3_ES2_IhRhPhEEET0_T_SB_SA_>
    }
 8101f88:	68f8      	ldr	r0, [r7, #12]
 8101f8a:	3748      	adds	r7, #72	@ 0x48
 8101f8c:	46bd      	mov	sp, r7
 8101f8e:	bd80      	pop	{r7, pc}

08101f90 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8101f90:	b480      	push	{r7}
 8101f92:	b083      	sub	sp, #12
 8101f94:	af00      	add	r7, sp, #0
 8101f96:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	4618      	mov	r0, r3
 8101f9c:	370c      	adds	r7, #12
 8101f9e:	46bd      	mov	sp, r7
 8101fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fa4:	4770      	bx	lr

08101fa6 <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1EOS0_>:
	_Deque_impl(_Tp_alloc_type&& __a) noexcept
 8101fa6:	b580      	push	{r7, lr}
 8101fa8:	b086      	sub	sp, #24
 8101faa:	af00      	add	r7, sp, #0
 8101fac:	6078      	str	r0, [r7, #4]
 8101fae:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__a))
 8101fb0:	6838      	ldr	r0, [r7, #0]
 8101fb2:	f7ff ffed 	bl	8101f90 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8101fb6:	4602      	mov	r2, r0
 8101fb8:	687b      	ldr	r3, [r7, #4]
 8101fba:	617b      	str	r3, [r7, #20]
 8101fbc:	613a      	str	r2, [r7, #16]
 8101fbe:	697b      	ldr	r3, [r7, #20]
 8101fc0:	60fb      	str	r3, [r7, #12]
 8101fc2:	693b      	ldr	r3, [r7, #16]
 8101fc4:	60bb      	str	r3, [r7, #8]
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	4618      	mov	r0, r3
 8101fca:	f7fe ffdb 	bl	8100f84 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1Ev>
	{ }
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	4618      	mov	r0, r3
 8101fd2:	3718      	adds	r7, #24
 8101fd4:	46bd      	mov	sp, r7
 8101fd6:	bd80      	pop	{r7, pc}

08101fd8 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8101fd8:	b580      	push	{r7, lr}
 8101fda:	b082      	sub	sp, #8
 8101fdc:	af00      	add	r7, sp, #0
 8101fde:	6078      	str	r0, [r7, #4]
 8101fe0:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8101fe2:	6839      	ldr	r1, [r7, #0]
 8101fe4:	6878      	ldr	r0, [r7, #4]
 8101fe6:	f000 f82a 	bl	810203e <_ZSt4swapINSt11_Deque_baseIhSaIhEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 8101fea:	bf00      	nop
 8101fec:	3708      	adds	r7, #8
 8101fee:	46bd      	mov	sp, r7
 8101ff0:	bd80      	pop	{r7, pc}

08101ff2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIhRKhPS3_ES2_IhRhPhEEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8101ff2:	b580      	push	{r7, lr}
 8101ff4:	b090      	sub	sp, #64	@ 0x40
 8101ff6:	af00      	add	r7, sp, #0
 8101ff8:	60f8      	str	r0, [r7, #12]
 8101ffa:	60b9      	str	r1, [r7, #8]
 8101ffc:	607a      	str	r2, [r7, #4]
 8101ffe:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8102000:	f107 0310 	add.w	r3, r7, #16
 8102004:	68b9      	ldr	r1, [r7, #8]
 8102006:	4618      	mov	r0, r3
 8102008:	f7ff fe2f 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 810200c:	f107 0320 	add.w	r3, r7, #32
 8102010:	6879      	ldr	r1, [r7, #4]
 8102012:	4618      	mov	r0, r3
 8102014:	f7ff fe29 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102018:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810201c:	6839      	ldr	r1, [r7, #0]
 810201e:	4618      	mov	r0, r3
 8102020:	f7fe fed5 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102024:	68f8      	ldr	r0, [r7, #12]
 8102026:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810202a:	f107 0220 	add.w	r2, r7, #32
 810202e:	f107 0110 	add.w	r1, r7, #16
 8102032:	f000 f847 	bl	81020c4 <_ZSt4copyISt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEET0_T_S9_S8_>
 8102036:	68f8      	ldr	r0, [r7, #12]
 8102038:	3740      	adds	r7, #64	@ 0x40
 810203a:	46bd      	mov	sp, r7
 810203c:	bd80      	pop	{r7, pc}

0810203e <_ZSt4swapINSt11_Deque_baseIhSaIhEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 810203e:	b5b0      	push	{r4, r5, r7, lr}
 8102040:	b08c      	sub	sp, #48	@ 0x30
 8102042:	af00      	add	r7, sp, #0
 8102044:	6078      	str	r0, [r7, #4]
 8102046:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8102048:	6878      	ldr	r0, [r7, #4]
 810204a:	f000 f871 	bl	8102130 <_ZSt4moveIRNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 810204e:	4602      	mov	r2, r0
 8102050:	f107 0308 	add.w	r3, r7, #8
 8102054:	4611      	mov	r1, r2
 8102056:	4618      	mov	r0, r3
 8102058:	f000 f899 	bl	810218e <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 810205c:	6838      	ldr	r0, [r7, #0]
 810205e:	f000 f867 	bl	8102130 <_ZSt4moveIRNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8102062:	4602      	mov	r2, r0
 8102064:	687b      	ldr	r3, [r7, #4]
 8102066:	461c      	mov	r4, r3
 8102068:	4615      	mov	r5, r2
 810206a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810206c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810206e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102072:	e895 0003 	ldmia.w	r5, {r0, r1}
 8102076:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 810207a:	f107 0308 	add.w	r3, r7, #8
 810207e:	4618      	mov	r0, r3
 8102080:	f000 f856 	bl	8102130 <_ZSt4moveIRNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8102084:	4602      	mov	r2, r0
 8102086:	683b      	ldr	r3, [r7, #0]
 8102088:	461c      	mov	r4, r3
 810208a:	4615      	mov	r5, r2
 810208c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810208e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102094:	e895 0003 	ldmia.w	r5, {r0, r1}
 8102098:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 810209c:	bf00      	nop
 810209e:	3730      	adds	r7, #48	@ 0x30
 81020a0:	46bd      	mov	sp, r7
 81020a2:	bdb0      	pop	{r4, r5, r7, pc}

081020a4 <_ZNSt15__new_allocatorIPhE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 81020a4:	b580      	push	{r7, lr}
 81020a6:	b084      	sub	sp, #16
 81020a8:	af00      	add	r7, sp, #0
 81020aa:	60f8      	str	r0, [r7, #12]
 81020ac:	60b9      	str	r1, [r7, #8]
 81020ae:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 81020b0:	687b      	ldr	r3, [r7, #4]
 81020b2:	009b      	lsls	r3, r3, #2
 81020b4:	4619      	mov	r1, r3
 81020b6:	68b8      	ldr	r0, [r7, #8]
 81020b8:	f00b fd82 	bl	810dbc0 <_ZdlPvj>
      }
 81020bc:	bf00      	nop
 81020be:	3710      	adds	r7, #16
 81020c0:	46bd      	mov	sp, r7
 81020c2:	bd80      	pop	{r7, pc}

081020c4 <_ZSt4copyISt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 81020c4:	b580      	push	{r7, lr}
 81020c6:	b098      	sub	sp, #96	@ 0x60
 81020c8:	af00      	add	r7, sp, #0
 81020ca:	60f8      	str	r0, [r7, #12]
 81020cc:	60b9      	str	r1, [r7, #8]
 81020ce:	607a      	str	r2, [r7, #4]
 81020d0:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 81020d2:	f107 0320 	add.w	r3, r7, #32
 81020d6:	68b9      	ldr	r1, [r7, #8]
 81020d8:	4618      	mov	r0, r3
 81020da:	f7ff fdc6 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 81020de:	f107 0310 	add.w	r3, r7, #16
 81020e2:	f107 0220 	add.w	r2, r7, #32
 81020e6:	4611      	mov	r1, r2
 81020e8:	4618      	mov	r0, r3
 81020ea:	f000 f870 	bl	81021ce <_ZSt12__miter_baseISt15_Deque_iteratorIhRKhPS1_EET_S5_>
 81020ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 81020f2:	6879      	ldr	r1, [r7, #4]
 81020f4:	4618      	mov	r0, r3
 81020f6:	f7ff fdb8 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 81020fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81020fe:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8102102:	4611      	mov	r1, r2
 8102104:	4618      	mov	r0, r3
 8102106:	f000 f862 	bl	81021ce <_ZSt12__miter_baseISt15_Deque_iteratorIhRKhPS1_EET_S5_>
 810210a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 810210e:	6839      	ldr	r1, [r7, #0]
 8102110:	4618      	mov	r0, r3
 8102112:	f7fe fe5c 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102116:	68f8      	ldr	r0, [r7, #12]
 8102118:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 810211c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8102120:	f107 0110 	add.w	r1, r7, #16
 8102124:	f000 f860 	bl	81021e8 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEET1_T0_S9_S8_>
    }
 8102128:	68f8      	ldr	r0, [r7, #12]
 810212a:	3760      	adds	r7, #96	@ 0x60
 810212c:	46bd      	mov	sp, r7
 810212e:	bd80      	pop	{r7, pc}

08102130 <_ZSt4moveIRNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8102130:	b480      	push	{r7}
 8102132:	b083      	sub	sp, #12
 8102134:	af00      	add	r7, sp, #0
 8102136:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	4618      	mov	r0, r3
 810213c:	370c      	adds	r7, #12
 810213e:	46bd      	mov	sp, r7
 8102140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102144:	4770      	bx	lr

08102146 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8102146:	b580      	push	{r7, lr}
 8102148:	b082      	sub	sp, #8
 810214a:	af00      	add	r7, sp, #0
 810214c:	6078      	str	r0, [r7, #4]
 810214e:	6039      	str	r1, [r7, #0]
 8102150:	683b      	ldr	r3, [r7, #0]
 8102152:	681a      	ldr	r2, [r3, #0]
 8102154:	687b      	ldr	r3, [r7, #4]
 8102156:	601a      	str	r2, [r3, #0]
 8102158:	683b      	ldr	r3, [r7, #0]
 810215a:	685a      	ldr	r2, [r3, #4]
 810215c:	687b      	ldr	r3, [r7, #4]
 810215e:	605a      	str	r2, [r3, #4]
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	f103 0208 	add.w	r2, r3, #8
 8102166:	683b      	ldr	r3, [r7, #0]
 8102168:	3308      	adds	r3, #8
 810216a:	4619      	mov	r1, r3
 810216c:	4610      	mov	r0, r2
 810216e:	f7fe fe2e 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102172:	687b      	ldr	r3, [r7, #4]
 8102174:	f103 0218 	add.w	r2, r3, #24
 8102178:	683b      	ldr	r3, [r7, #0]
 810217a:	3318      	adds	r3, #24
 810217c:	4619      	mov	r1, r3
 810217e:	4610      	mov	r0, r2
 8102180:	f7fe fe25 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102184:	687b      	ldr	r3, [r7, #4]
 8102186:	4618      	mov	r0, r3
 8102188:	3708      	adds	r7, #8
 810218a:	46bd      	mov	sp, r7
 810218c:	bd80      	pop	{r7, pc}

0810218e <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 810218e:	b5b0      	push	{r4, r5, r7, lr}
 8102190:	b08c      	sub	sp, #48	@ 0x30
 8102192:	af00      	add	r7, sp, #0
 8102194:	6078      	str	r0, [r7, #4]
 8102196:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8102198:	6839      	ldr	r1, [r7, #0]
 810219a:	6878      	ldr	r0, [r7, #4]
 810219c:	f7ff ffd3 	bl	8102146 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 81021a0:	f107 0308 	add.w	r3, r7, #8
 81021a4:	4618      	mov	r0, r3
 81021a6:	f7fe feed 	bl	8100f84 <_ZNSt11_Deque_baseIhSaIhEE16_Deque_impl_dataC1Ev>
 81021aa:	f107 0308 	add.w	r3, r7, #8
 81021ae:	683a      	ldr	r2, [r7, #0]
 81021b0:	4614      	mov	r4, r2
 81021b2:	461d      	mov	r5, r3
 81021b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81021b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81021b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81021ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81021bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 81021c0:	e884 0003 	stmia.w	r4, {r0, r1}
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	4618      	mov	r0, r3
 81021c8:	3730      	adds	r7, #48	@ 0x30
 81021ca:	46bd      	mov	sp, r7
 81021cc:	bdb0      	pop	{r4, r5, r7, pc}

081021ce <_ZSt12__miter_baseISt15_Deque_iteratorIhRKhPS1_EET_S5_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 81021ce:	b580      	push	{r7, lr}
 81021d0:	b082      	sub	sp, #8
 81021d2:	af00      	add	r7, sp, #0
 81021d4:	6078      	str	r0, [r7, #4]
 81021d6:	6039      	str	r1, [r7, #0]
    { return __it; }
 81021d8:	6839      	ldr	r1, [r7, #0]
 81021da:	6878      	ldr	r0, [r7, #4]
 81021dc:	f7ff fd45 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 81021e0:	6878      	ldr	r0, [r7, #4]
 81021e2:	3708      	adds	r7, #8
 81021e4:	46bd      	mov	sp, r7
 81021e6:	bd80      	pop	{r7, pc}

081021e8 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIhRKhPS1_ES0_IhRhPhEET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 81021e8:	b580      	push	{r7, lr}
 81021ea:	b0a0      	sub	sp, #128	@ 0x80
 81021ec:	af00      	add	r7, sp, #0
 81021ee:	60f8      	str	r0, [r7, #12]
 81021f0:	60b9      	str	r1, [r7, #8]
 81021f2:	607a      	str	r2, [r7, #4]
 81021f4:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 81021f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81021fa:	68b9      	ldr	r1, [r7, #8]
 81021fc:	4618      	mov	r0, r3
 81021fe:	f7ff fd34 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102202:	f107 0320 	add.w	r3, r7, #32
 8102206:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 810220a:	4611      	mov	r1, r2
 810220c:	4618      	mov	r0, r3
 810220e:	f000 f831 	bl	8102274 <_ZSt12__niter_baseISt15_Deque_iteratorIhRKhPS1_EET_S5_>
 8102212:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8102216:	6879      	ldr	r1, [r7, #4]
 8102218:	4618      	mov	r0, r3
 810221a:	f7ff fd26 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 810221e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8102222:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8102226:	4611      	mov	r1, r2
 8102228:	4618      	mov	r0, r3
 810222a:	f000 f823 	bl	8102274 <_ZSt12__niter_baseISt15_Deque_iteratorIhRKhPS1_EET_S5_>
 810222e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8102232:	6839      	ldr	r1, [r7, #0]
 8102234:	4618      	mov	r0, r3
 8102236:	f7fe fdca 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 810223a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 810223e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8102242:	4611      	mov	r1, r2
 8102244:	4618      	mov	r0, r3
 8102246:	f000 f822 	bl	810228e <_ZSt12__niter_baseISt15_Deque_iteratorIhRhPhEET_S4_>
 810224a:	f107 0010 	add.w	r0, r7, #16
 810224e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8102252:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8102256:	f107 0120 	add.w	r1, r7, #32
 810225a:	f000 f825 	bl	81022a8 <_ZSt14__copy_move_a1ILb0EhRKhPS0_hESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 810225e:	68fb      	ldr	r3, [r7, #12]
 8102260:	f107 0210 	add.w	r2, r7, #16
 8102264:	6839      	ldr	r1, [r7, #0]
 8102266:	4618      	mov	r0, r3
 8102268:	f000 f844 	bl	81022f4 <_ZSt12__niter_wrapISt15_Deque_iteratorIhRhPhEET_RKS4_S4_>
    }
 810226c:	68f8      	ldr	r0, [r7, #12]
 810226e:	3780      	adds	r7, #128	@ 0x80
 8102270:	46bd      	mov	sp, r7
 8102272:	bd80      	pop	{r7, pc}

08102274 <_ZSt12__niter_baseISt15_Deque_iteratorIhRKhPS1_EET_S5_>:
    __niter_base(_Iterator __it)
 8102274:	b580      	push	{r7, lr}
 8102276:	b082      	sub	sp, #8
 8102278:	af00      	add	r7, sp, #0
 810227a:	6078      	str	r0, [r7, #4]
 810227c:	6039      	str	r1, [r7, #0]
    { return __it; }
 810227e:	6839      	ldr	r1, [r7, #0]
 8102280:	6878      	ldr	r0, [r7, #4]
 8102282:	f7ff fcf2 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 8102286:	6878      	ldr	r0, [r7, #4]
 8102288:	3708      	adds	r7, #8
 810228a:	46bd      	mov	sp, r7
 810228c:	bd80      	pop	{r7, pc}

0810228e <_ZSt12__niter_baseISt15_Deque_iteratorIhRhPhEET_S4_>:
    __niter_base(_Iterator __it)
 810228e:	b580      	push	{r7, lr}
 8102290:	b082      	sub	sp, #8
 8102292:	af00      	add	r7, sp, #0
 8102294:	6078      	str	r0, [r7, #4]
 8102296:	6039      	str	r1, [r7, #0]
    { return __it; }
 8102298:	6839      	ldr	r1, [r7, #0]
 810229a:	6878      	ldr	r0, [r7, #4]
 810229c:	f7fe fd97 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 81022a0:	6878      	ldr	r0, [r7, #4]
 81022a2:	3708      	adds	r7, #8
 81022a4:	46bd      	mov	sp, r7
 81022a6:	bd80      	pop	{r7, pc}

081022a8 <_ZSt14__copy_move_a1ILb0EhRKhPS0_hESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 81022a8:	b580      	push	{r7, lr}
 81022aa:	b090      	sub	sp, #64	@ 0x40
 81022ac:	af00      	add	r7, sp, #0
 81022ae:	60f8      	str	r0, [r7, #12]
 81022b0:	60b9      	str	r1, [r7, #8]
 81022b2:	607a      	str	r2, [r7, #4]
 81022b4:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 81022b6:	f107 0310 	add.w	r3, r7, #16
 81022ba:	68b9      	ldr	r1, [r7, #8]
 81022bc:	4618      	mov	r0, r3
 81022be:	f7ff fcd4 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 81022c2:	f107 0320 	add.w	r3, r7, #32
 81022c6:	6879      	ldr	r1, [r7, #4]
 81022c8:	4618      	mov	r0, r3
 81022ca:	f7ff fcce 	bl	8101c6a <_ZNSt15_Deque_iteratorIhRKhPS0_EC1ERKS3_>
 81022ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81022d2:	6839      	ldr	r1, [r7, #0]
 81022d4:	4618      	mov	r0, r3
 81022d6:	f7fe fd7a 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 81022da:	68f8      	ldr	r0, [r7, #12]
 81022dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81022e0:	f107 0220 	add.w	r2, r7, #32
 81022e4:	f107 0110 	add.w	r1, r7, #16
 81022e8:	f000 f812 	bl	8102310 <_ZSt15__copy_move_ditILb0EhRKhPS0_St15_Deque_iteratorIhRhPhEET3_S3_IT0_T1_T2_ESB_S7_>
 81022ec:	68f8      	ldr	r0, [r7, #12]
 81022ee:	3740      	adds	r7, #64	@ 0x40
 81022f0:	46bd      	mov	sp, r7
 81022f2:	bd80      	pop	{r7, pc}

081022f4 <_ZSt12__niter_wrapISt15_Deque_iteratorIhRhPhEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 81022f4:	b580      	push	{r7, lr}
 81022f6:	b084      	sub	sp, #16
 81022f8:	af00      	add	r7, sp, #0
 81022fa:	60f8      	str	r0, [r7, #12]
 81022fc:	60b9      	str	r1, [r7, #8]
 81022fe:	607a      	str	r2, [r7, #4]
    { return __res; }
 8102300:	6879      	ldr	r1, [r7, #4]
 8102302:	68f8      	ldr	r0, [r7, #12]
 8102304:	f7fe fd63 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102308:	68f8      	ldr	r0, [r7, #12]
 810230a:	3710      	adds	r7, #16
 810230c:	46bd      	mov	sp, r7
 810230e:	bd80      	pop	{r7, pc}

08102310 <_ZSt15__copy_move_ditILb0EhRKhPS0_St15_Deque_iteratorIhRhPhEET3_S3_IT0_T1_T2_ESB_S7_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 8102310:	b5b0      	push	{r4, r5, r7, lr}
 8102312:	b09e      	sub	sp, #120	@ 0x78
 8102314:	af00      	add	r7, sp, #0
 8102316:	60f8      	str	r0, [r7, #12]
 8102318:	60b9      	str	r1, [r7, #8]
 810231a:	607a      	str	r2, [r7, #4]
 810231c:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 810231e:	68bb      	ldr	r3, [r7, #8]
 8102320:	68da      	ldr	r2, [r3, #12]
 8102322:	687b      	ldr	r3, [r7, #4]
 8102324:	68db      	ldr	r3, [r3, #12]
 8102326:	429a      	cmp	r2, r3
 8102328:	d054      	beq.n	81023d4 <_ZSt15__copy_move_ditILb0EhRKhPS0_St15_Deque_iteratorIhRhPhEET3_S3_IT0_T1_T2_ESB_S7_+0xc4>
	  __result
 810232a:	68bb      	ldr	r3, [r7, #8]
 810232c:	681c      	ldr	r4, [r3, #0]
 810232e:	68bb      	ldr	r3, [r7, #8]
 8102330:	689d      	ldr	r5, [r3, #8]
 8102332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102336:	6839      	ldr	r1, [r7, #0]
 8102338:	4618      	mov	r0, r3
 810233a:	f7fe fd48 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 810233e:	f107 0014 	add.w	r0, r7, #20
 8102342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102346:	462a      	mov	r2, r5
 8102348:	4621      	mov	r1, r4
 810234a:	f000 f86c 	bl	8102426 <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
 810234e:	f107 0314 	add.w	r3, r7, #20
 8102352:	683a      	ldr	r2, [r7, #0]
 8102354:	4614      	mov	r4, r2
 8102356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8102358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 810235c:	68bb      	ldr	r3, [r7, #8]
 810235e:	68db      	ldr	r3, [r3, #12]
 8102360:	3304      	adds	r3, #4
 8102362:	677b      	str	r3, [r7, #116]	@ 0x74
 8102364:	e01f      	b.n	81023a6 <_ZSt15__copy_move_ditILb0EhRKhPS0_St15_Deque_iteratorIhRhPhEET3_S3_IT0_T1_T2_ESB_S7_+0x96>
	    __result
 8102366:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8102368:	681d      	ldr	r5, [r3, #0]
 810236a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810236c:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 810236e:	f000 f897 	bl	81024a0 <_ZNSt15_Deque_iteratorIhRKhPS0_E14_S_buffer_sizeEv>
 8102372:	4603      	mov	r3, r0
	    __result
 8102374:	441c      	add	r4, r3
 8102376:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 810237a:	6839      	ldr	r1, [r7, #0]
 810237c:	4618      	mov	r0, r3
 810237e:	f7fe fd26 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8102382:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8102386:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 810238a:	4622      	mov	r2, r4
 810238c:	4629      	mov	r1, r5
 810238e:	f000 f84a 	bl	8102426 <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
 8102392:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8102396:	683a      	ldr	r2, [r7, #0]
 8102398:	4614      	mov	r4, r2
 810239a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810239c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 81023a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81023a2:	3304      	adds	r3, #4
 81023a4:	677b      	str	r3, [r7, #116]	@ 0x74
	       __node != __last._M_node; ++__node)
 81023a6:	687b      	ldr	r3, [r7, #4]
 81023a8:	68db      	ldr	r3, [r3, #12]
 81023aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 81023ac:	429a      	cmp	r2, r3
 81023ae:	d1da      	bne.n	8102366 <_ZSt15__copy_move_ditILb0EhRKhPS0_St15_Deque_iteratorIhRhPhEET3_S3_IT0_T1_T2_ESB_S7_+0x56>
					      __result);
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	685c      	ldr	r4, [r3, #4]
 81023b4:	687b      	ldr	r3, [r7, #4]
 81023b6:	681d      	ldr	r5, [r3, #0]
 81023b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 81023bc:	6839      	ldr	r1, [r7, #0]
 81023be:	4618      	mov	r0, r3
 81023c0:	f7fe fd05 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 81023c4:	68f8      	ldr	r0, [r7, #12]
 81023c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 81023ca:	462a      	mov	r2, r5
 81023cc:	4621      	mov	r1, r4
 81023ce:	f000 f82a 	bl	8102426 <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
 81023d2:	e010      	b.n	81023f6 <_ZSt15__copy_move_ditILb0EhRKhPS0_St15_Deque_iteratorIhRhPhEET3_S3_IT0_T1_T2_ESB_S7_+0xe6>
					  __result);
 81023d4:	68bb      	ldr	r3, [r7, #8]
 81023d6:	681c      	ldr	r4, [r3, #0]
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	681d      	ldr	r5, [r3, #0]
 81023dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 81023e0:	6839      	ldr	r1, [r7, #0]
 81023e2:	4618      	mov	r0, r3
 81023e4:	f7fe fcf3 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 81023e8:	68f8      	ldr	r0, [r7, #12]
 81023ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 81023ee:	462a      	mov	r2, r5
 81023f0:	4621      	mov	r1, r4
 81023f2:	f000 f818 	bl	8102426 <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
    }
 81023f6:	68f8      	ldr	r0, [r7, #12]
 81023f8:	3778      	adds	r7, #120	@ 0x78
 81023fa:	46bd      	mov	sp, r7
 81023fc:	bdb0      	pop	{r4, r5, r7, pc}

081023fe <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 81023fe:	b480      	push	{r7}
 8102400:	b083      	sub	sp, #12
 8102402:	af00      	add	r7, sp, #0
 8102404:	6078      	str	r0, [r7, #4]
 8102406:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8102408:	683b      	ldr	r3, [r7, #0]
 810240a:	681a      	ldr	r2, [r3, #0]
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	681b      	ldr	r3, [r3, #0]
 8102410:	429a      	cmp	r2, r3
 8102412:	da01      	bge.n	8102418 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8102414:	683b      	ldr	r3, [r7, #0]
 8102416:	e000      	b.n	810241a <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8102418:	687b      	ldr	r3, [r7, #4]
    }
 810241a:	4618      	mov	r0, r3
 810241c:	370c      	adds	r7, #12
 810241e:	46bd      	mov	sp, r7
 8102420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102424:	4770      	bx	lr

08102426 <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8102426:	b580      	push	{r7, lr}
 8102428:	b088      	sub	sp, #32
 810242a:	af00      	add	r7, sp, #0
 810242c:	60f8      	str	r0, [r7, #12]
 810242e:	60b9      	str	r1, [r7, #8]
 8102430:	607a      	str	r2, [r7, #4]
 8102432:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8102434:	687a      	ldr	r2, [r7, #4]
 8102436:	68bb      	ldr	r3, [r7, #8]
 8102438:	1ad3      	subs	r3, r2, r3
 810243a:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 810243c:	e025      	b.n	810248a <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_+0x64>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 810243e:	683b      	ldr	r3, [r7, #0]
 8102440:	689a      	ldr	r2, [r3, #8]
 8102442:	683b      	ldr	r3, [r7, #0]
 8102444:	681b      	ldr	r3, [r3, #0]
 8102446:	1ad3      	subs	r3, r2, r3
 8102448:	61bb      	str	r3, [r7, #24]
 810244a:	f107 0218 	add.w	r2, r7, #24
 810244e:	f107 0314 	add.w	r3, r7, #20
 8102452:	4611      	mov	r1, r2
 8102454:	4618      	mov	r0, r3
 8102456:	f7ff ffd2 	bl	81023fe <_ZSt3minIiERKT_S2_S2_>
 810245a:	4603      	mov	r3, r0
	  const difference_type __clen
 810245c:	681b      	ldr	r3, [r3, #0]
 810245e:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8102460:	69fb      	ldr	r3, [r7, #28]
 8102462:	68ba      	ldr	r2, [r7, #8]
 8102464:	18d1      	adds	r1, r2, r3
 8102466:	683b      	ldr	r3, [r7, #0]
 8102468:	681b      	ldr	r3, [r3, #0]
 810246a:	461a      	mov	r2, r3
 810246c:	68b8      	ldr	r0, [r7, #8]
 810246e:	f000 f81f 	bl	81024b0 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
				       __result._M_cur);

	  __first += __clen;
 8102472:	69fb      	ldr	r3, [r7, #28]
 8102474:	68ba      	ldr	r2, [r7, #8]
 8102476:	4413      	add	r3, r2
 8102478:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 810247a:	69f9      	ldr	r1, [r7, #28]
 810247c:	6838      	ldr	r0, [r7, #0]
 810247e:	f000 f827 	bl	81024d0 <_ZNSt15_Deque_iteratorIhRhPhEpLEi>
	  __len -= __clen;
 8102482:	697a      	ldr	r2, [r7, #20]
 8102484:	69fb      	ldr	r3, [r7, #28]
 8102486:	1ad3      	subs	r3, r2, r3
 8102488:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 810248a:	697b      	ldr	r3, [r7, #20]
 810248c:	2b00      	cmp	r3, #0
 810248e:	dcd6      	bgt.n	810243e <_ZSt14__copy_move_a1ILb0EPhhEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_+0x18>
	}

      return __result;
 8102490:	6839      	ldr	r1, [r7, #0]
 8102492:	68f8      	ldr	r0, [r7, #12]
 8102494:	f7fe fc9b 	bl	8100dce <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
    }
 8102498:	68f8      	ldr	r0, [r7, #12]
 810249a:	3720      	adds	r7, #32
 810249c:	46bd      	mov	sp, r7
 810249e:	bd80      	pop	{r7, pc}

081024a0 <_ZNSt15_Deque_iteratorIhRKhPS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 81024a0:	b580      	push	{r7, lr}
 81024a2:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 81024a4:	2001      	movs	r0, #1
 81024a6:	f7fe f931 	bl	810070c <_ZSt16__deque_buf_sizej>
 81024aa:	4603      	mov	r3, r0
 81024ac:	4618      	mov	r0, r3
 81024ae:	bd80      	pop	{r7, pc}

081024b0 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 81024b0:	b580      	push	{r7, lr}
 81024b2:	b084      	sub	sp, #16
 81024b4:	af00      	add	r7, sp, #0
 81024b6:	60f8      	str	r0, [r7, #12]
 81024b8:	60b9      	str	r1, [r7, #8]
 81024ba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 81024bc:	687a      	ldr	r2, [r7, #4]
 81024be:	68b9      	ldr	r1, [r7, #8]
 81024c0:	68f8      	ldr	r0, [r7, #12]
 81024c2:	f000 f858 	bl	8102576 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 81024c6:	4603      	mov	r3, r0
 81024c8:	4618      	mov	r0, r3
 81024ca:	3710      	adds	r7, #16
 81024cc:	46bd      	mov	sp, r7
 81024ce:	bd80      	pop	{r7, pc}

081024d0 <_ZNSt15_Deque_iteratorIhRhPhEpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 81024d0:	b590      	push	{r4, r7, lr}
 81024d2:	b085      	sub	sp, #20
 81024d4:	af00      	add	r7, sp, #0
 81024d6:	6078      	str	r0, [r7, #4]
 81024d8:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	681a      	ldr	r2, [r3, #0]
 81024de:	687b      	ldr	r3, [r7, #4]
 81024e0:	685b      	ldr	r3, [r3, #4]
 81024e2:	1ad3      	subs	r3, r2, r3
 81024e4:	683a      	ldr	r2, [r7, #0]
 81024e6:	4413      	add	r3, r2
 81024e8:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 81024ea:	68fb      	ldr	r3, [r7, #12]
 81024ec:	2b00      	cmp	r3, #0
 81024ee:	db08      	blt.n	8102502 <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x32>
 81024f0:	f7fe fe21 	bl	8101136 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 81024f4:	4603      	mov	r3, r0
 81024f6:	461a      	mov	r2, r3
 81024f8:	68fb      	ldr	r3, [r7, #12]
 81024fa:	4293      	cmp	r3, r2
 81024fc:	da01      	bge.n	8102502 <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x32>
 81024fe:	2301      	movs	r3, #1
 8102500:	e000      	b.n	8102504 <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x34>
 8102502:	2300      	movs	r3, #0
 8102504:	2b00      	cmp	r3, #0
 8102506:	d006      	beq.n	8102516 <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x46>
	  _M_cur += __n;
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	681a      	ldr	r2, [r3, #0]
 810250c:	683b      	ldr	r3, [r7, #0]
 810250e:	441a      	add	r2, r3
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	601a      	str	r2, [r3, #0]
 8102514:	e02a      	b.n	810256c <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x9c>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8102516:	68fb      	ldr	r3, [r7, #12]
 8102518:	2b00      	cmp	r3, #0
 810251a:	dd07      	ble.n	810252c <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x5c>
 810251c:	f7fe fe0b 	bl	8101136 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 8102520:	4603      	mov	r3, r0
 8102522:	461a      	mov	r2, r3
 8102524:	68fb      	ldr	r3, [r7, #12]
 8102526:	fb93 f3f2 	sdiv	r3, r3, r2
 810252a:	e007      	b.n	810253c <_ZNSt15_Deque_iteratorIhRhPhEpLEi+0x6c>
			   : -difference_type((-__offset - 1)
 810252c:	68fb      	ldr	r3, [r7, #12]
 810252e:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8102530:	f7fe fe01 	bl	8101136 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 8102534:	4603      	mov	r3, r0
 8102536:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 810253a:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 810253c:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	68da      	ldr	r2, [r3, #12]
 8102542:	68bb      	ldr	r3, [r7, #8]
 8102544:	009b      	lsls	r3, r3, #2
 8102546:	4413      	add	r3, r2
 8102548:	4619      	mov	r1, r3
 810254a:	6878      	ldr	r0, [r7, #4]
 810254c:	f7fe fd83 	bl	8101056 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
	    _M_cur = _M_first + (__offset - __node_offset
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8102554:	f7fe fdef 	bl	8101136 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 8102558:	4603      	mov	r3, r0
 810255a:	461a      	mov	r2, r3
 810255c:	68bb      	ldr	r3, [r7, #8]
 810255e:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8102562:	68fa      	ldr	r2, [r7, #12]
 8102564:	1ad3      	subs	r3, r2, r3
 8102566:	18e2      	adds	r2, r4, r3
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	601a      	str	r2, [r3, #0]
	return *this;
 810256c:	687b      	ldr	r3, [r7, #4]
      }
 810256e:	4618      	mov	r0, r3
 8102570:	3714      	adds	r7, #20
 8102572:	46bd      	mov	sp, r7
 8102574:	bd90      	pop	{r4, r7, pc}

08102576 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8102576:	b580      	push	{r7, lr}
 8102578:	b084      	sub	sp, #16
 810257a:	af00      	add	r7, sp, #0
 810257c:	60f8      	str	r0, [r7, #12]
 810257e:	60b9      	str	r1, [r7, #8]
 8102580:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8102582:	687a      	ldr	r2, [r7, #4]
 8102584:	68b9      	ldr	r1, [r7, #8]
 8102586:	68f8      	ldr	r0, [r7, #12]
 8102588:	f000 f805 	bl	8102596 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_>
 810258c:	4603      	mov	r3, r0
    }
 810258e:	4618      	mov	r0, r3
 8102590:	3710      	adds	r7, #16
 8102592:	46bd      	mov	sp, r7
 8102594:	bd80      	pop	{r7, pc}

08102596 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_>:
	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
 8102596:	b580      	push	{r7, lr}
 8102598:	b086      	sub	sp, #24
 810259a:	af00      	add	r7, sp, #0
 810259c:	60f8      	str	r0, [r7, #12]
 810259e:	60b9      	str	r1, [r7, #8]
 81025a0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 81025a2:	68ba      	ldr	r2, [r7, #8]
 81025a4:	68fb      	ldr	r3, [r7, #12]
 81025a6:	1ad3      	subs	r3, r2, r3
 81025a8:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 81025aa:	697b      	ldr	r3, [r7, #20]
 81025ac:	2b01      	cmp	r3, #1
 81025ae:	bfcc      	ite	gt
 81025b0:	2301      	movgt	r3, #1
 81025b2:	2300      	movle	r3, #0
 81025b4:	b2db      	uxtb	r3, r3
 81025b6:	2b00      	cmp	r3, #0
 81025b8:	d006      	beq.n	81025c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x32>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 81025ba:	697b      	ldr	r3, [r7, #20]
 81025bc:	461a      	mov	r2, r3
 81025be:	68f9      	ldr	r1, [r7, #12]
 81025c0:	6878      	ldr	r0, [r7, #4]
 81025c2:	f00b feb9 	bl	810e338 <memmove>
 81025c6:	e006      	b.n	81025d6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x40>
	  else if (_Num == 1)
 81025c8:	697b      	ldr	r3, [r7, #20]
 81025ca:	2b01      	cmp	r3, #1
 81025cc:	d103      	bne.n	81025d6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x40>
	      __assign_one(__result, __first);
 81025ce:	68f9      	ldr	r1, [r7, #12]
 81025d0:	6878      	ldr	r0, [r7, #4]
 81025d2:	f000 f807 	bl	81025e4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIhhEEvPT_PT0_>
	  return __result + _Num;
 81025d6:	697b      	ldr	r3, [r7, #20]
 81025d8:	687a      	ldr	r2, [r7, #4]
 81025da:	4413      	add	r3, r2
	}
 81025dc:	4618      	mov	r0, r3
 81025de:	3718      	adds	r7, #24
 81025e0:	46bd      	mov	sp, r7
 81025e2:	bd80      	pop	{r7, pc}

081025e4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIhhEEvPT_PT0_>:
	__assign_one(_Tp* __to, _Up* __from)
 81025e4:	b480      	push	{r7}
 81025e6:	b083      	sub	sp, #12
 81025e8:	af00      	add	r7, sp, #0
 81025ea:	6078      	str	r0, [r7, #4]
 81025ec:	6039      	str	r1, [r7, #0]
	{ *__to = *__from; }
 81025ee:	683b      	ldr	r3, [r7, #0]
 81025f0:	781a      	ldrb	r2, [r3, #0]
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	701a      	strb	r2, [r3, #0]
 81025f6:	bf00      	nop
 81025f8:	370c      	adds	r7, #12
 81025fa:	46bd      	mov	sp, r7
 81025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102600:	4770      	bx	lr

08102602 <_ZN6LRX20A22SetMinimumRangeCommandEv>:
	}
}
//============================================================================================
//  Minimum Range Command
void LRX20A::SetMinimumRangeCommand()
{
 8102602:	b580      	push	{r7, lr}
 8102604:	b084      	sub	sp, #16
 8102606:	af00      	add	r7, sp, #0
 8102608:	6078      	str	r0, [r7, #4]
	// Send "Get distance" command
	const char cmd[] = { (char)SET_MIN_RANGE_CMD, (char)MIN_RANGE, (char)0x00, (char)0x00 };
 810260a:	f641 1331 	movw	r3, #6449	@ 0x1931
 810260e:	60fb      	str	r3, [r7, #12]
	UpdateCRC((char*)&cmd, (uint8_t)sizeof(cmd));
 8102610:	f107 030c 	add.w	r3, r7, #12
 8102614:	2204      	movs	r2, #4
 8102616:	4619      	mov	r1, r3
 8102618:	6878      	ldr	r0, [r7, #4]
 810261a:	f000 f843 	bl	81026a4 <_ZN6LRX20A9UpdateCRCEPch>
	SendCommand((uint8_t*)&cmd, sizeof(cmd));
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	f107 010c 	add.w	r1, r7, #12
 8102624:	2204      	movs	r2, #4
 8102626:	4618      	mov	r0, r3
 8102628:	f000 f906 	bl	8102838 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 810262c:	bf00      	nop
 810262e:	3710      	adds	r7, #16
 8102630:	46bd      	mov	sp, r7
 8102632:	bd80      	pop	{r7, pc}

08102634 <_ZN6LRX20A22SetMaximumRangeCommandEv>:
//============================================================================================
//  Maximum Range Command
void LRX20A::SetMaximumRangeCommand()
{
 8102634:	b580      	push	{r7, lr}
 8102636:	b084      	sub	sp, #16
 8102638:	af00      	add	r7, sp, #0
 810263a:	6078      	str	r0, [r7, #4]
	// Send "Get distance" command
	const char cmd[] = { (char)SET_MAX_RANGE_CMD, (char)MAX_RANGE_LSB, (char)MAX_RANGE_MSB, (char)0x00 };
 810263c:	4b09      	ldr	r3, [pc, #36]	@ (8102664 <_ZN6LRX20A22SetMaximumRangeCommandEv+0x30>)
 810263e:	60fb      	str	r3, [r7, #12]
	UpdateCRC((char*)&cmd, (uint8_t)sizeof(cmd));
 8102640:	f107 030c 	add.w	r3, r7, #12
 8102644:	2204      	movs	r2, #4
 8102646:	4619      	mov	r1, r3
 8102648:	6878      	ldr	r0, [r7, #4]
 810264a:	f000 f82b 	bl	81026a4 <_ZN6LRX20A9UpdateCRCEPch>
	SendCommand((uint8_t*)&cmd, sizeof(cmd));
 810264e:	687b      	ldr	r3, [r7, #4]
 8102650:	f107 010c 	add.w	r1, r7, #12
 8102654:	2204      	movs	r2, #4
 8102656:	4618      	mov	r0, r3
 8102658:	f000 f8ee 	bl	8102838 <_ZN12UartEndpoint11SendCommandEPKhj>

}
 810265c:	bf00      	nop
 810265e:	3710      	adds	r7, #16
 8102660:	46bd      	mov	sp, r7
 8102662:	bd80      	pop	{r7, pc}
 8102664:	007d6432 	.word	0x007d6432

08102668 <_ZN6LRX20A17RangesDataCommandEv>:
}
//------------------------------------------------------------------------------
//================================================================================
// Ranges Command
bool LRX20A::RangesDataCommand()
{
 8102668:	b580      	push	{r7, lr}
 810266a:	b084      	sub	sp, #16
 810266c:	af00      	add	r7, sp, #0
 810266e:	6078      	str	r0, [r7, #4]
	eRangesState = ERangesState::eRangesUpdating;
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	2201      	movs	r2, #1
 8102674:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	const uint8_t getDistanceCmd[] = { (char)EXEC_RANGE_MEASURE, (char)MEASURE_MODE_SSM, (char)BIT_RESERVED, (char)BIT_RESERVED, (char)0x9C };
 8102678:	4a09      	ldr	r2, [pc, #36]	@ (81026a0 <_ZN6LRX20A17RangesDataCommandEv+0x38>)
 810267a:	f107 0308 	add.w	r3, r7, #8
 810267e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8102682:	6018      	str	r0, [r3, #0]
 8102684:	3304      	adds	r3, #4
 8102686:	7019      	strb	r1, [r3, #0]
	SendCommand(getDistanceCmd, sizeof(getDistanceCmd));
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	f107 0108 	add.w	r1, r7, #8
 810268e:	2205      	movs	r2, #5
 8102690:	4618      	mov	r0, r3
 8102692:	f000 f8d1 	bl	8102838 <_ZN12UartEndpoint11SendCommandEPKhj>
	return 0;
 8102696:	2300      	movs	r3, #0
}
 8102698:	4618      	mov	r0, r3
 810269a:	3710      	adds	r7, #16
 810269c:	46bd      	mov	sp, r7
 810269e:	bd80      	pop	{r7, pc}
 81026a0:	0810f064 	.word	0x0810f064

081026a4 <_ZN6LRX20A9UpdateCRCEPch>:
	return true;
}

//------------------------------------------------------------------------------
void LRX20A::UpdateCRC(char* pbyBuff, uint8_t size)
{
 81026a4:	b480      	push	{r7}
 81026a6:	b087      	sub	sp, #28
 81026a8:	af00      	add	r7, sp, #0
 81026aa:	60f8      	str	r0, [r7, #12]
 81026ac:	60b9      	str	r1, [r7, #8]
 81026ae:	4613      	mov	r3, r2
 81026b0:	71fb      	strb	r3, [r7, #7]
	long ii;
	char byXorSum;
	byXorSum = 0;
 81026b2:	2300      	movs	r3, #0
 81026b4:	74fb      	strb	r3, [r7, #19]
	for (ii = 0; ii < size - 1; ++ii) {
 81026b6:	2300      	movs	r3, #0
 81026b8:	617b      	str	r3, [r7, #20]
 81026ba:	e009      	b.n	81026d0 <_ZN6LRX20A9UpdateCRCEPch+0x2c>
		byXorSum = byXorSum ^ pbyBuff[ii];
 81026bc:	697b      	ldr	r3, [r7, #20]
 81026be:	68ba      	ldr	r2, [r7, #8]
 81026c0:	4413      	add	r3, r2
 81026c2:	781a      	ldrb	r2, [r3, #0]
 81026c4:	7cfb      	ldrb	r3, [r7, #19]
 81026c6:	4053      	eors	r3, r2
 81026c8:	74fb      	strb	r3, [r7, #19]
	for (ii = 0; ii < size - 1; ++ii) {
 81026ca:	697b      	ldr	r3, [r7, #20]
 81026cc:	3301      	adds	r3, #1
 81026ce:	617b      	str	r3, [r7, #20]
 81026d0:	79fb      	ldrb	r3, [r7, #7]
 81026d2:	3b01      	subs	r3, #1
 81026d4:	697a      	ldr	r2, [r7, #20]
 81026d6:	429a      	cmp	r2, r3
 81026d8:	dbf0      	blt.n	81026bc <_ZN6LRX20A9UpdateCRCEPch+0x18>
	}
	pbyBuff[size - 1] = byXorSum;
 81026da:	79fb      	ldrb	r3, [r7, #7]
 81026dc:	3b01      	subs	r3, #1
 81026de:	68ba      	ldr	r2, [r7, #8]
 81026e0:	4413      	add	r3, r2
 81026e2:	7cfa      	ldrb	r2, [r7, #19]
 81026e4:	701a      	strb	r2, [r3, #0]
}
 81026e6:	bf00      	nop
 81026e8:	371c      	adds	r7, #28
 81026ea:	46bd      	mov	sp, r7
 81026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026f0:	4770      	bx	lr

081026f2 <__is_constant_evaluated>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 81026f2:	b480      	push	{r7}
 81026f4:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 81026f6:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 81026f8:	4618      	mov	r0, r3
 81026fa:	46bd      	mov	sp, r7
 81026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102700:	4770      	bx	lr

08102702 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8102702:	b480      	push	{r7}
 8102704:	b083      	sub	sp, #12
 8102706:	af00      	add	r7, sp, #0
 8102708:	6078      	str	r0, [r7, #4]
 810270a:	6039      	str	r1, [r7, #0]
 810270c:	683b      	ldr	r3, [r7, #0]
 810270e:	4618      	mov	r0, r3
 8102710:	370c      	adds	r7, #12
 8102712:	46bd      	mov	sp, r7
 8102714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102718:	4770      	bx	lr

0810271a <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 810271a:	b580      	push	{r7, lr}
 810271c:	b082      	sub	sp, #8
 810271e:	af00      	add	r7, sp, #0
 8102720:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	2200      	movs	r2, #0
 8102726:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8102728:	6878      	ldr	r0, [r7, #4]
 810272a:	f000 f805 	bl	8102738 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	4618      	mov	r0, r3
 8102732:	3708      	adds	r7, #8
 8102734:	46bd      	mov	sp, r7
 8102736:	bd80      	pop	{r7, pc}

08102738 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8102738:	b480      	push	{r7}
 810273a:	b083      	sub	sp, #12
 810273c:	af00      	add	r7, sp, #0
 810273e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	2200      	movs	r2, #0
 8102744:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8102746:	687a      	ldr	r2, [r7, #4]
 8102748:	687b      	ldr	r3, [r7, #4]
 810274a:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 810274c:	687a      	ldr	r2, [r7, #4]
 810274e:	687b      	ldr	r3, [r7, #4]
 8102750:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8102752:	687b      	ldr	r3, [r7, #4]
 8102754:	2200      	movs	r2, #0
 8102756:	611a      	str	r2, [r3, #16]
    }
 8102758:	bf00      	nop
 810275a:	370c      	adds	r7, #12
 810275c:	46bd      	mov	sp, r7
 810275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102762:	4770      	bx	lr

08102764 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8102764:	b580      	push	{r7, lr}
 8102766:	b084      	sub	sp, #16
 8102768:	af00      	add	r7, sp, #0
 810276a:	6078      	str	r0, [r7, #4]
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	60fb      	str	r3, [r7, #12]
 8102770:	68f8      	ldr	r0, [r7, #12]
 8102772:	f000 f9ee 	bl	8102b52 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEED1Ev>
 8102776:	687b      	ldr	r3, [r7, #4]
 8102778:	4618      	mov	r0, r3
 810277a:	3710      	adds	r7, #16
 810277c:	46bd      	mov	sp, r7
 810277e:	bd80      	pop	{r7, pc}

08102780 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8102780:	b580      	push	{r7, lr}
 8102782:	b082      	sub	sp, #8
 8102784:	af00      	add	r7, sp, #0
 8102786:	6078      	str	r0, [r7, #4]
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	4618      	mov	r0, r3
 810278c:	f000 f8d7 	bl	810293e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	4618      	mov	r0, r3
 8102794:	3708      	adds	r7, #8
 8102796:	46bd      	mov	sp, r7
 8102798:	bd80      	pop	{r7, pc}

0810279a <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 810279a:	b580      	push	{r7, lr}
 810279c:	b082      	sub	sp, #8
 810279e:	af00      	add	r7, sp, #0
 81027a0:	6078      	str	r0, [r7, #4]
 81027a2:	687b      	ldr	r3, [r7, #4]
 81027a4:	4618      	mov	r0, r3
 81027a6:	f7ff ffeb 	bl	8102780 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	4618      	mov	r0, r3
 81027ae:	3708      	adds	r7, #8
 81027b0:	46bd      	mov	sp, r7
 81027b2:	bd80      	pop	{r7, pc}

081027b4 <_ZN12UartEndpointC1EP20__UART_HandleTypeDef>:
#include "UartEndpoint.hpp"
#include <map>

std::map<UART_HandleTypeDef*, UartEndpoint*> UartEndpoint::instanceMap;

UartEndpoint::UartEndpoint(UART_HandleTypeDef* huart) : huart_(huart) {
 81027b4:	b580      	push	{r7, lr}
 81027b6:	b082      	sub	sp, #8
 81027b8:	af00      	add	r7, sp, #0
 81027ba:	6078      	str	r0, [r7, #4]
 81027bc:	6039      	str	r1, [r7, #0]
 81027be:	4a0c      	ldr	r2, [pc, #48]	@ (81027f0 <_ZN12UartEndpointC1EP20__UART_HandleTypeDef+0x3c>)
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	601a      	str	r2, [r3, #0]
 81027c4:	683a      	ldr	r2, [r7, #0]
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	605a      	str	r2, [r3, #4]
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	3310      	adds	r3, #16
 81027ce:	4618      	mov	r0, r3
 81027d0:	f7fd ffb1 	bl	8100736 <_ZNSt5dequeIhSaIhEEC1Ev>
    instanceMap[huart] = this;
 81027d4:	463b      	mov	r3, r7
 81027d6:	4619      	mov	r1, r3
 81027d8:	4806      	ldr	r0, [pc, #24]	@ (81027f4 <_ZN12UartEndpointC1EP20__UART_HandleTypeDef+0x40>)
 81027da:	f000 f8db 	bl	8102994 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 81027de:	4602      	mov	r2, r0
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	6013      	str	r3, [r2, #0]
}
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	4618      	mov	r0, r3
 81027e8:	3708      	adds	r7, #8
 81027ea:	46bd      	mov	sp, r7
 81027ec:	bd80      	pop	{r7, pc}
 81027ee:	bf00      	nop
 81027f0:	0810f1ec 	.word	0x0810f1ec
 81027f4:	10000244 	.word	0x10000244

081027f8 <_ZN12UartEndpoint12StartReceiveEPhj>:

bool UartEndpoint::StartReceive(uint8_t* buffer, size_t len) {
 81027f8:	b580      	push	{r7, lr}
 81027fa:	b084      	sub	sp, #16
 81027fc:	af00      	add	r7, sp, #0
 81027fe:	60f8      	str	r0, [r7, #12]
 8102800:	60b9      	str	r1, [r7, #8]
 8102802:	607a      	str	r2, [r7, #4]
    rxBuffer_ = buffer;
 8102804:	68fb      	ldr	r3, [r7, #12]
 8102806:	68ba      	ldr	r2, [r7, #8]
 8102808:	609a      	str	r2, [r3, #8]
    rxLength_ = len;
 810280a:	68fb      	ldr	r3, [r7, #12]
 810280c:	687a      	ldr	r2, [r7, #4]
 810280e:	60da      	str	r2, [r3, #12]
    return HAL_UART_Receive_IT(huart_, rxBuffer_, rxLength_) == HAL_OK;
 8102810:	68fb      	ldr	r3, [r7, #12]
 8102812:	6858      	ldr	r0, [r3, #4]
 8102814:	68fb      	ldr	r3, [r7, #12]
 8102816:	6899      	ldr	r1, [r3, #8]
 8102818:	68fb      	ldr	r3, [r7, #12]
 810281a:	68db      	ldr	r3, [r3, #12]
 810281c:	b29b      	uxth	r3, r3
 810281e:	461a      	mov	r2, r3
 8102820:	f005 fee8 	bl	81085f4 <HAL_UART_Receive_IT>
 8102824:	4603      	mov	r3, r0
 8102826:	2b00      	cmp	r3, #0
 8102828:	bf0c      	ite	eq
 810282a:	2301      	moveq	r3, #1
 810282c:	2300      	movne	r3, #0
 810282e:	b2db      	uxtb	r3, r3
}
 8102830:	4618      	mov	r0, r3
 8102832:	3710      	adds	r7, #16
 8102834:	46bd      	mov	sp, r7
 8102836:	bd80      	pop	{r7, pc}

08102838 <_ZN12UartEndpoint11SendCommandEPKhj>:

uint16_t UartEndpoint::SendCommand(const uint8_t* command, size_t length)
{
 8102838:	b580      	push	{r7, lr}
 810283a:	b084      	sub	sp, #16
 810283c:	af00      	add	r7, sp, #0
 810283e:	60f8      	str	r0, [r7, #12]
 8102840:	60b9      	str	r1, [r7, #8]
 8102842:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit(huart_, command, length,500) == HAL_OK)
 8102844:	68fb      	ldr	r3, [r7, #12]
 8102846:	6858      	ldr	r0, [r3, #4]
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	b29a      	uxth	r2, r3
 810284c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8102850:	68b9      	ldr	r1, [r7, #8]
 8102852:	f005 fe40 	bl	81084d6 <HAL_UART_Transmit>
 8102856:	4603      	mov	r3, r0
 8102858:	2b00      	cmp	r3, #0
 810285a:	bf0c      	ite	eq
 810285c:	2301      	moveq	r3, #1
 810285e:	2300      	movne	r3, #0
 8102860:	b2db      	uxtb	r3, r3
 8102862:	2b00      	cmp	r3, #0
 8102864:	d002      	beq.n	810286c <_ZN12UartEndpoint11SendCommandEPKhj+0x34>
		return length;
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	b29b      	uxth	r3, r3
 810286a:	e000      	b.n	810286e <_ZN12UartEndpoint11SendCommandEPKhj+0x36>
	else
		return 0;
 810286c:	2300      	movs	r3, #0
}
 810286e:	4618      	mov	r0, r3
 8102870:	3710      	adds	r7, #16
 8102872:	46bd      	mov	sp, r7
 8102874:	bd80      	pop	{r7, pc}
	...

08102878 <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef>:

void UartEndpoint::DispatchRxComplete(UART_HandleTypeDef* huart) {
 8102878:	b580      	push	{r7, lr}
 810287a:	b086      	sub	sp, #24
 810287c:	af00      	add	r7, sp, #0
 810287e:	6078      	str	r0, [r7, #4]
    auto it = instanceMap.find(huart);
 8102880:	1d3b      	adds	r3, r7, #4
 8102882:	4619      	mov	r1, r3
 8102884:	4822      	ldr	r0, [pc, #136]	@ (8102910 <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef+0x98>)
 8102886:	f000 f8e3 	bl	8102a50 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 810288a:	4603      	mov	r3, r0
 810288c:	60fb      	str	r3, [r7, #12]
    if (it != instanceMap.end()) {
 810288e:	4820      	ldr	r0, [pc, #128]	@ (8102910 <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef+0x98>)
 8102890:	f000 f8ed 	bl	8102a6e <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8102894:	4603      	mov	r3, r0
 8102896:	613b      	str	r3, [r7, #16]
 8102898:	f107 0210 	add.w	r2, r7, #16
 810289c:	f107 030c 	add.w	r3, r7, #12
 81028a0:	4611      	mov	r1, r2
 81028a2:	4618      	mov	r0, r3
 81028a4:	f000 f8f0 	bl	8102a88 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEES9_>
 81028a8:	4603      	mov	r3, r0
 81028aa:	2b00      	cmp	r3, #0
 81028ac:	d02b      	beq.n	8102906 <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef+0x8e>
        UartEndpoint* instance = it->second;
 81028ae:	f107 030c 	add.w	r3, r7, #12
 81028b2:	4618      	mov	r0, r3
 81028b4:	f000 f8fc 	bl	8102ab0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEptEv>
 81028b8:	4603      	mov	r3, r0
 81028ba:	685b      	ldr	r3, [r3, #4]
 81028bc:	617b      	str	r3, [r7, #20]
        if (instance && instance->rxBuffer_) {
 81028be:	697b      	ldr	r3, [r7, #20]
 81028c0:	2b00      	cmp	r3, #0
 81028c2:	d020      	beq.n	8102906 <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef+0x8e>
 81028c4:	697b      	ldr	r3, [r7, #20]
 81028c6:	689b      	ldr	r3, [r3, #8]
 81028c8:	2b00      	cmp	r3, #0
 81028ca:	d01c      	beq.n	8102906 <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef+0x8e>
            uint8_t byte = instance->rxBuffer_[0];
 81028cc:	697b      	ldr	r3, [r7, #20]
 81028ce:	689b      	ldr	r3, [r3, #8]
 81028d0:	781b      	ldrb	r3, [r3, #0]
 81028d2:	72fb      	strb	r3, [r7, #11]

            // ✅ Push byte into the queue immediately
            instance->rxQueue_.push_back(byte);
 81028d4:	697b      	ldr	r3, [r7, #20]
 81028d6:	3310      	adds	r3, #16
 81028d8:	f107 020b 	add.w	r2, r7, #11
 81028dc:	4611      	mov	r1, r2
 81028de:	4618      	mov	r0, r3
 81028e0:	f000 f8f4 	bl	8102acc <_ZNSt5dequeIhSaIhEE9push_backERKh>

            // Re-arm UART receive
            HAL_UART_Receive_IT(instance->huart_, instance->rxBuffer_, instance->rxLength_);
 81028e4:	697b      	ldr	r3, [r7, #20]
 81028e6:	6858      	ldr	r0, [r3, #4]
 81028e8:	697b      	ldr	r3, [r7, #20]
 81028ea:	6899      	ldr	r1, [r3, #8]
 81028ec:	697b      	ldr	r3, [r7, #20]
 81028ee:	68db      	ldr	r3, [r3, #12]
 81028f0:	b29b      	uxth	r3, r3
 81028f2:	461a      	mov	r2, r3
 81028f4:	f005 fe7e 	bl	81085f4 <HAL_UART_Receive_IT>

            // Let derived class process the queue
            instance->onReceiveByte(byte);
 81028f8:	697b      	ldr	r3, [r7, #20]
 81028fa:	681b      	ldr	r3, [r3, #0]
 81028fc:	681b      	ldr	r3, [r3, #0]
 81028fe:	7afa      	ldrb	r2, [r7, #11]
 8102900:	4611      	mov	r1, r2
 8102902:	6978      	ldr	r0, [r7, #20]
 8102904:	4798      	blx	r3
        }
    }
}
 8102906:	bf00      	nop
 8102908:	3718      	adds	r7, #24
 810290a:	46bd      	mov	sp, r7
 810290c:	bd80      	pop	{r7, pc}
 810290e:	bf00      	nop
 8102910:	10000244 	.word	0x10000244

08102914 <_ZN12UartEndpoint15processIncomingEv>:

void UartEndpoint::onReceiveByte(uint8_t byte) {
    // no longer queues here
}

void UartEndpoint::processIncoming() {
 8102914:	b480      	push	{r7}
 8102916:	b083      	sub	sp, #12
 8102918:	af00      	add	r7, sp, #0
 810291a:	6078      	str	r0, [r7, #4]
    // Base class: do nothing
}
 810291c:	bf00      	nop
 810291e:	370c      	adds	r7, #12
 8102920:	46bd      	mov	sp, r7
 8102922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102926:	4770      	bx	lr

08102928 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8102928:	b580      	push	{r7, lr}
 810292a:	b082      	sub	sp, #8
 810292c:	af00      	add	r7, sp, #0
 810292e:	6078      	str	r0, [r7, #4]
    UartEndpoint::DispatchRxComplete(huart);
 8102930:	6878      	ldr	r0, [r7, #4]
 8102932:	f7ff ffa1 	bl	8102878 <_ZN12UartEndpoint18DispatchRxCompleteEP20__UART_HandleTypeDef>
}
 8102936:	bf00      	nop
 8102938:	3708      	adds	r7, #8
 810293a:	46bd      	mov	sp, r7
 810293c:	bd80      	pop	{r7, pc}

0810293e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 810293e:	b580      	push	{r7, lr}
 8102940:	b084      	sub	sp, #16
 8102942:	af00      	add	r7, sp, #0
 8102944:	6078      	str	r0, [r7, #4]
 8102946:	687b      	ldr	r3, [r7, #4]
 8102948:	60fb      	str	r3, [r7, #12]
 810294a:	68fb      	ldr	r3, [r7, #12]
 810294c:	60bb      	str	r3, [r7, #8]
	  : _Node_allocator()
 810294e:	687b      	ldr	r3, [r7, #4]
 8102950:	4618      	mov	r0, r3
 8102952:	f000 f8f3 	bl	8102b3c <_ZNSt20_Rb_tree_key_compareISt4lessIP20__UART_HandleTypeDefEEC1Ev>
 8102956:	687b      	ldr	r3, [r7, #4]
 8102958:	3304      	adds	r3, #4
 810295a:	4618      	mov	r0, r3
 810295c:	f7ff fedd 	bl	810271a <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8102960:	687b      	ldr	r3, [r7, #4]
 8102962:	4618      	mov	r0, r3
 8102964:	3710      	adds	r7, #16
 8102966:	46bd      	mov	sp, r7
 8102968:	bd80      	pop	{r7, pc}

0810296a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 810296a:	b580      	push	{r7, lr}
 810296c:	b082      	sub	sp, #8
 810296e:	af00      	add	r7, sp, #0
 8102970:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8102972:	6878      	ldr	r0, [r7, #4]
 8102974:	f000 f918 	bl	8102ba8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8102978:	4603      	mov	r3, r0
 810297a:	4619      	mov	r1, r3
 810297c:	6878      	ldr	r0, [r7, #4]
 810297e:	f000 f8f3 	bl	8102b68 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8102982:	687b      	ldr	r3, [r7, #4]
 8102984:	4618      	mov	r0, r3
 8102986:	f7ff feed 	bl	8102764 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 810298a:	687b      	ldr	r3, [r7, #4]
 810298c:	4618      	mov	r0, r3
 810298e:	3708      	adds	r7, #8
 8102990:	46bd      	mov	sp, r7
 8102992:	bd80      	pop	{r7, pc}

08102994 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8102994:	b590      	push	{r4, r7, lr}
 8102996:	b08b      	sub	sp, #44	@ 0x2c
 8102998:	af02      	add	r7, sp, #8
 810299a:	6078      	str	r0, [r7, #4]
 810299c:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 810299e:	6839      	ldr	r1, [r7, #0]
 81029a0:	6878      	ldr	r0, [r7, #4]
 81029a2:	f000 f90d 	bl	8102bc0 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 81029a6:	4603      	mov	r3, r0
 81029a8:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 81029aa:	6878      	ldr	r0, [r7, #4]
 81029ac:	f000 f85f 	bl	8102a6e <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81029b0:	4603      	mov	r3, r0
 81029b2:	60fb      	str	r3, [r7, #12]
 81029b4:	f107 020c 	add.w	r2, r7, #12
 81029b8:	f107 0308 	add.w	r3, r7, #8
 81029bc:	4611      	mov	r1, r2
 81029be:	4618      	mov	r0, r3
 81029c0:	f000 f90d 	bl	8102bde <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEES9_>
 81029c4:	4603      	mov	r3, r0
 81029c6:	2b00      	cmp	r3, #0
 81029c8:	d114      	bne.n	81029f4 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 81029ca:	6878      	ldr	r0, [r7, #4]
 81029cc:	f000 f91b 	bl	8102c06 <_ZNKSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 81029d0:	683b      	ldr	r3, [r7, #0]
 81029d2:	681c      	ldr	r4, [r3, #0]
 81029d4:	f107 0308 	add.w	r3, r7, #8
 81029d8:	4618      	mov	r0, r3
 81029da:	f000 f921 	bl	8102c20 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEdeEv>
 81029de:	4603      	mov	r3, r0
 81029e0:	681a      	ldr	r2, [r3, #0]
 81029e2:	f107 0310 	add.w	r3, r7, #16
 81029e6:	4621      	mov	r1, r4
 81029e8:	4618      	mov	r0, r3
 81029ea:	f000 f927 	bl	8102c3c <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 81029ee:	4603      	mov	r3, r0
 81029f0:	2b00      	cmp	r3, #0
 81029f2:	d001      	beq.n	81029f8 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 81029f4:	2301      	movs	r3, #1
 81029f6:	e000      	b.n	81029fa <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 81029f8:	2300      	movs	r3, #0
 81029fa:	2b00      	cmp	r3, #0
 81029fc:	d01b      	beq.n	8102a36 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 81029fe:	687c      	ldr	r4, [r7, #4]
 8102a00:	f107 0208 	add.w	r2, r7, #8
 8102a04:	f107 0314 	add.w	r3, r7, #20
 8102a08:	4611      	mov	r1, r2
 8102a0a:	4618      	mov	r0, r3
 8102a0c:	f000 f943 	bl	8102c96 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8102a10:	f107 0318 	add.w	r3, r7, #24
 8102a14:	6839      	ldr	r1, [r7, #0]
 8102a16:	4618      	mov	r0, r3
 8102a18:	f000 f92e 	bl	8102c78 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8102a1c:	f107 0218 	add.w	r2, r7, #24
 8102a20:	f107 031c 	add.w	r3, r7, #28
 8102a24:	9300      	str	r3, [sp, #0]
 8102a26:	4613      	mov	r3, r2
 8102a28:	4a08      	ldr	r2, [pc, #32]	@ (8102a4c <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8102a2a:	6979      	ldr	r1, [r7, #20]
 8102a2c:	4620      	mov	r0, r4
 8102a2e:	f000 f942 	bl	8102cb6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8102a32:	4603      	mov	r3, r0
 8102a34:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 8102a36:	f107 0308 	add.w	r3, r7, #8
 8102a3a:	4618      	mov	r0, r3
 8102a3c:	f000 f8f0 	bl	8102c20 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEdeEv>
 8102a40:	4603      	mov	r3, r0
 8102a42:	3304      	adds	r3, #4
      }
 8102a44:	4618      	mov	r0, r3
 8102a46:	3724      	adds	r7, #36	@ 0x24
 8102a48:	46bd      	mov	sp, r7
 8102a4a:	bd90      	pop	{r4, r7, pc}
 8102a4c:	0810f1e0 	.word	0x0810f1e0

08102a50 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8102a50:	b580      	push	{r7, lr}
 8102a52:	b082      	sub	sp, #8
 8102a54:	af00      	add	r7, sp, #0
 8102a56:	6078      	str	r0, [r7, #4]
 8102a58:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	6839      	ldr	r1, [r7, #0]
 8102a5e:	4618      	mov	r0, r3
 8102a60:	f000 f96f 	bl	8102d42 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 8102a64:	4603      	mov	r3, r0
 8102a66:	4618      	mov	r0, r3
 8102a68:	3708      	adds	r7, #8
 8102a6a:	46bd      	mov	sp, r7
 8102a6c:	bd80      	pop	{r7, pc}

08102a6e <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8102a6e:	b580      	push	{r7, lr}
 8102a70:	b082      	sub	sp, #8
 8102a72:	af00      	add	r7, sp, #0
 8102a74:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8102a76:	687b      	ldr	r3, [r7, #4]
 8102a78:	4618      	mov	r0, r3
 8102a7a:	f000 f9a1 	bl	8102dc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8102a7e:	4603      	mov	r3, r0
 8102a80:	4618      	mov	r0, r3
 8102a82:	3708      	adds	r7, #8
 8102a84:	46bd      	mov	sp, r7
 8102a86:	bd80      	pop	{r7, pc}

08102a88 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8102a88:	b480      	push	{r7}
 8102a8a:	b083      	sub	sp, #12
 8102a8c:	af00      	add	r7, sp, #0
 8102a8e:	6078      	str	r0, [r7, #4]
 8102a90:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	681a      	ldr	r2, [r3, #0]
 8102a96:	683b      	ldr	r3, [r7, #0]
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	429a      	cmp	r2, r3
 8102a9c:	bf14      	ite	ne
 8102a9e:	2301      	movne	r3, #1
 8102aa0:	2300      	moveq	r3, #0
 8102aa2:	b2db      	uxtb	r3, r3
 8102aa4:	4618      	mov	r0, r3
 8102aa6:	370c      	adds	r7, #12
 8102aa8:	46bd      	mov	sp, r7
 8102aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aae:	4770      	bx	lr

08102ab0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8102ab0:	b580      	push	{r7, lr}
 8102ab2:	b082      	sub	sp, #8
 8102ab4:	af00      	add	r7, sp, #0
 8102ab6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	4618      	mov	r0, r3
 8102abe:	f000 f990 	bl	8102de2 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>
 8102ac2:	4603      	mov	r3, r0
 8102ac4:	4618      	mov	r0, r3
 8102ac6:	3708      	adds	r7, #8
 8102ac8:	46bd      	mov	sp, r7
 8102aca:	bd80      	pop	{r7, pc}

08102acc <_ZNSt5dequeIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 8102acc:	b590      	push	{r4, r7, lr}
 8102ace:	b089      	sub	sp, #36	@ 0x24
 8102ad0:	af00      	add	r7, sp, #0
 8102ad2:	6078      	str	r0, [r7, #4]
 8102ad4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8102ad6:	687b      	ldr	r3, [r7, #4]
 8102ad8:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	6a1b      	ldr	r3, [r3, #32]
 8102ade:	3b01      	subs	r3, #1
	if (this->_M_impl._M_finish._M_cur
 8102ae0:	429a      	cmp	r2, r3
 8102ae2:	d023      	beq.n	8102b2c <_ZNSt5dequeIhSaIhEE9push_backERKh+0x60>
	    _Alloc_traits::construct(this->_M_impl,
 8102ae4:	687a      	ldr	r2, [r7, #4]
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	699b      	ldr	r3, [r3, #24]
 8102aea:	61fa      	str	r2, [r7, #28]
 8102aec:	61bb      	str	r3, [r7, #24]
 8102aee:	683b      	ldr	r3, [r7, #0]
 8102af0:	617b      	str	r3, [r7, #20]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8102af2:	6978      	ldr	r0, [r7, #20]
 8102af4:	f000 fc59 	bl	81033aa <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8102af8:	4602      	mov	r2, r0
 8102afa:	69fb      	ldr	r3, [r7, #28]
 8102afc:	613b      	str	r3, [r7, #16]
 8102afe:	69bb      	ldr	r3, [r7, #24]
 8102b00:	60fb      	str	r3, [r7, #12]
 8102b02:	60ba      	str	r2, [r7, #8]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8102b04:	68fb      	ldr	r3, [r7, #12]
 8102b06:	4619      	mov	r1, r3
 8102b08:	2001      	movs	r0, #1
 8102b0a:	f7ff fdfa 	bl	8102702 <_ZnwjPv>
 8102b0e:	4604      	mov	r4, r0
 8102b10:	68b8      	ldr	r0, [r7, #8]
 8102b12:	f000 fc4a 	bl	81033aa <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8102b16:	4603      	mov	r3, r0
 8102b18:	781b      	ldrb	r3, [r3, #0]
 8102b1a:	7023      	strb	r3, [r4, #0]
 8102b1c:	bf00      	nop
	}
 8102b1e:	bf00      	nop
	    ++this->_M_impl._M_finish._M_cur;
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	699b      	ldr	r3, [r3, #24]
 8102b24:	1c5a      	adds	r2, r3, #1
 8102b26:	687b      	ldr	r3, [r7, #4]
 8102b28:	619a      	str	r2, [r3, #24]
      }
 8102b2a:	e003      	b.n	8102b34 <_ZNSt5dequeIhSaIhEE9push_backERKh+0x68>
	  _M_push_back_aux(__x);
 8102b2c:	6839      	ldr	r1, [r7, #0]
 8102b2e:	6878      	ldr	r0, [r7, #4]
 8102b30:	f000 f966 	bl	8102e00 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJRKhEEEvDpOT_>
      }
 8102b34:	bf00      	nop
 8102b36:	3724      	adds	r7, #36	@ 0x24
 8102b38:	46bd      	mov	sp, r7
 8102b3a:	bd90      	pop	{r4, r7, pc}

08102b3c <_ZNSt20_Rb_tree_key_compareISt4lessIP20__UART_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8102b3c:	b480      	push	{r7}
 8102b3e:	b083      	sub	sp, #12
 8102b40:	af00      	add	r7, sp, #0
 8102b42:	6078      	str	r0, [r7, #4]
      { }
 8102b44:	687b      	ldr	r3, [r7, #4]
 8102b46:	4618      	mov	r0, r3
 8102b48:	370c      	adds	r7, #12
 8102b4a:	46bd      	mov	sp, r7
 8102b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b50:	4770      	bx	lr

08102b52 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8102b52:	b480      	push	{r7}
 8102b54:	b083      	sub	sp, #12
 8102b56:	af00      	add	r7, sp, #0
 8102b58:	6078      	str	r0, [r7, #4]
 8102b5a:	687b      	ldr	r3, [r7, #4]
 8102b5c:	4618      	mov	r0, r3
 8102b5e:	370c      	adds	r7, #12
 8102b60:	46bd      	mov	sp, r7
 8102b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b66:	4770      	bx	lr

08102b68 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102b68:	b580      	push	{r7, lr}
 8102b6a:	b084      	sub	sp, #16
 8102b6c:	af00      	add	r7, sp, #0
 8102b6e:	6078      	str	r0, [r7, #4]
 8102b70:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8102b72:	e011      	b.n	8102b98 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x30>
	{
	  _M_erase(_S_right(__x));
 8102b74:	6838      	ldr	r0, [r7, #0]
 8102b76:	f000 f99d 	bl	8102eb4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102b7a:	4603      	mov	r3, r0
 8102b7c:	4619      	mov	r1, r3
 8102b7e:	6878      	ldr	r0, [r7, #4]
 8102b80:	f7ff fff2 	bl	8102b68 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8102b84:	6838      	ldr	r0, [r7, #0]
 8102b86:	f000 f9a1 	bl	8102ecc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8102b8a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8102b8c:	6839      	ldr	r1, [r7, #0]
 8102b8e:	6878      	ldr	r0, [r7, #4]
 8102b90:	f000 f9a8 	bl	8102ee4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8102b94:	68fb      	ldr	r3, [r7, #12]
 8102b96:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8102b98:	683b      	ldr	r3, [r7, #0]
 8102b9a:	2b00      	cmp	r3, #0
 8102b9c:	d1ea      	bne.n	8102b74 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xc>
	}
    }
 8102b9e:	bf00      	nop
 8102ba0:	bf00      	nop
 8102ba2:	3710      	adds	r7, #16
 8102ba4:	46bd      	mov	sp, r7
 8102ba6:	bd80      	pop	{r7, pc}

08102ba8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8102ba8:	b580      	push	{r7, lr}
 8102baa:	b082      	sub	sp, #8
 8102bac:	af00      	add	r7, sp, #0
 8102bae:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8102bb0:	6878      	ldr	r0, [r7, #4]
 8102bb2:	f000 f9a8 	bl	8102f06 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 8102bb6:	4603      	mov	r3, r0
 8102bb8:	4618      	mov	r0, r3
 8102bba:	3708      	adds	r7, #8
 8102bbc:	46bd      	mov	sp, r7
 8102bbe:	bd80      	pop	{r7, pc}

08102bc0 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8102bc0:	b580      	push	{r7, lr}
 8102bc2:	b082      	sub	sp, #8
 8102bc4:	af00      	add	r7, sp, #0
 8102bc6:	6078      	str	r0, [r7, #4]
 8102bc8:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8102bca:	687b      	ldr	r3, [r7, #4]
 8102bcc:	6839      	ldr	r1, [r7, #0]
 8102bce:	4618      	mov	r0, r3
 8102bd0:	f000 f9a5 	bl	8102f1e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8102bd4:	4603      	mov	r3, r0
 8102bd6:	4618      	mov	r0, r3
 8102bd8:	3708      	adds	r7, #8
 8102bda:	46bd      	mov	sp, r7
 8102bdc:	bd80      	pop	{r7, pc}

08102bde <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8102bde:	b480      	push	{r7}
 8102be0:	b083      	sub	sp, #12
 8102be2:	af00      	add	r7, sp, #0
 8102be4:	6078      	str	r0, [r7, #4]
 8102be6:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8102be8:	687b      	ldr	r3, [r7, #4]
 8102bea:	681a      	ldr	r2, [r3, #0]
 8102bec:	683b      	ldr	r3, [r7, #0]
 8102bee:	681b      	ldr	r3, [r3, #0]
 8102bf0:	429a      	cmp	r2, r3
 8102bf2:	bf0c      	ite	eq
 8102bf4:	2301      	moveq	r3, #1
 8102bf6:	2300      	movne	r3, #0
 8102bf8:	b2db      	uxtb	r3, r3
 8102bfa:	4618      	mov	r0, r3
 8102bfc:	370c      	adds	r7, #12
 8102bfe:	46bd      	mov	sp, r7
 8102c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c04:	4770      	bx	lr

08102c06 <_ZNKSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8102c06:	b590      	push	{r4, r7, lr}
 8102c08:	b083      	sub	sp, #12
 8102c0a:	af00      	add	r7, sp, #0
 8102c0c:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	4618      	mov	r0, r3
 8102c12:	f000 f99b 	bl	8102f4c <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8102c16:	bf00      	nop
 8102c18:	4620      	mov	r0, r4
 8102c1a:	370c      	adds	r7, #12
 8102c1c:	46bd      	mov	sp, r7
 8102c1e:	bd90      	pop	{r4, r7, pc}

08102c20 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8102c20:	b580      	push	{r7, lr}
 8102c22:	b082      	sub	sp, #8
 8102c24:	af00      	add	r7, sp, #0
 8102c26:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8102c28:	687b      	ldr	r3, [r7, #4]
 8102c2a:	681b      	ldr	r3, [r3, #0]
 8102c2c:	4618      	mov	r0, r3
 8102c2e:	f000 f8d8 	bl	8102de2 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>
 8102c32:	4603      	mov	r3, r0
 8102c34:	4618      	mov	r0, r3
 8102c36:	3708      	adds	r7, #8
 8102c38:	46bd      	mov	sp, r7
 8102c3a:	bd80      	pop	{r7, pc}

08102c3c <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8102c3c:	b580      	push	{r7, lr}
 8102c3e:	b084      	sub	sp, #16
 8102c40:	af00      	add	r7, sp, #0
 8102c42:	60f8      	str	r0, [r7, #12]
 8102c44:	60b9      	str	r1, [r7, #8]
 8102c46:	607a      	str	r2, [r7, #4]
      {
#if __cplusplus >= 201402L
	if (std::__is_constant_evaluated())
 8102c48:	f7ff fd53 	bl	81026f2 <__is_constant_evaluated>
 8102c4c:	4603      	mov	r3, r0
 8102c4e:	2b00      	cmp	r3, #0
 8102c50:	d007      	beq.n	8102c62 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_+0x26>
	  return __x < __y;
 8102c52:	68ba      	ldr	r2, [r7, #8]
 8102c54:	687b      	ldr	r3, [r7, #4]
 8102c56:	429a      	cmp	r2, r3
 8102c58:	bf34      	ite	cc
 8102c5a:	2301      	movcc	r3, #1
 8102c5c:	2300      	movcs	r3, #0
 8102c5e:	b2db      	uxtb	r3, r3
 8102c60:	e006      	b.n	8102c70 <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_+0x34>
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8102c62:	68ba      	ldr	r2, [r7, #8]
 8102c64:	687b      	ldr	r3, [r7, #4]
 8102c66:	429a      	cmp	r2, r3
 8102c68:	bf34      	ite	cc
 8102c6a:	2301      	movcc	r3, #1
 8102c6c:	2300      	movcs	r3, #0
 8102c6e:	b2db      	uxtb	r3, r3
      }
 8102c70:	4618      	mov	r0, r3
 8102c72:	3710      	adds	r7, #16
 8102c74:	46bd      	mov	sp, r7
 8102c76:	bd80      	pop	{r7, pc}

08102c78 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8102c78:	b580      	push	{r7, lr}
 8102c7a:	b082      	sub	sp, #8
 8102c7c:	af00      	add	r7, sp, #0
 8102c7e:	6078      	str	r0, [r7, #4]
 8102c80:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	6839      	ldr	r1, [r7, #0]
 8102c86:	4618      	mov	r0, r3
 8102c88:	f000 f96b 	bl	8102f62 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1ES3_>
 8102c8c:	687b      	ldr	r3, [r7, #4]
 8102c8e:	4618      	mov	r0, r3
 8102c90:	3708      	adds	r7, #8
 8102c92:	46bd      	mov	sp, r7
 8102c94:	bd80      	pop	{r7, pc}

08102c96 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8102c96:	b480      	push	{r7}
 8102c98:	b083      	sub	sp, #12
 8102c9a:	af00      	add	r7, sp, #0
 8102c9c:	6078      	str	r0, [r7, #4]
 8102c9e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8102ca0:	683b      	ldr	r3, [r7, #0]
 8102ca2:	681a      	ldr	r2, [r3, #0]
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	601a      	str	r2, [r3, #0]
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	4618      	mov	r0, r3
 8102cac:	370c      	adds	r7, #12
 8102cae:	46bd      	mov	sp, r7
 8102cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cb4:	4770      	bx	lr

08102cb6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102cb6:	b5b0      	push	{r4, r5, r7, lr}
 8102cb8:	b08c      	sub	sp, #48	@ 0x30
 8102cba:	af02      	add	r7, sp, #8
 8102cbc:	60f8      	str	r0, [r7, #12]
 8102cbe:	60b9      	str	r1, [r7, #8]
 8102cc0:	607a      	str	r2, [r7, #4]
 8102cc2:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8102cc4:	6878      	ldr	r0, [r7, #4]
 8102cc6:	f000 f95b 	bl	8102f80 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102cca:	4604      	mov	r4, r0
 8102ccc:	6838      	ldr	r0, [r7, #0]
 8102cce:	f000 f962 	bl	8102f96 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102cd2:	4605      	mov	r5, r0
 8102cd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8102cd6:	f000 f969 	bl	8102fac <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102cda:	4603      	mov	r3, r0
 8102cdc:	f107 001c 	add.w	r0, r7, #28
 8102ce0:	9300      	str	r3, [sp, #0]
 8102ce2:	462b      	mov	r3, r5
 8102ce4:	4622      	mov	r2, r4
 8102ce6:	68f9      	ldr	r1, [r7, #12]
 8102ce8:	f000 f96b 	bl	8102fc2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8102cec:	f107 031c 	add.w	r3, r7, #28
 8102cf0:	4618      	mov	r0, r3
 8102cf2:	f000 facd 	bl	8103290 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8102cf6:	4603      	mov	r3, r0
 8102cf8:	f107 0014 	add.w	r0, r7, #20
 8102cfc:	68ba      	ldr	r2, [r7, #8]
 8102cfe:	68f9      	ldr	r1, [r7, #12]
 8102d00:	f000 f997 	bl	8103032 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8102d04:	69bb      	ldr	r3, [r7, #24]
 8102d06:	2b00      	cmp	r3, #0
 8102d08:	d009      	beq.n	8102d1e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8102d0a:	f107 001c 	add.w	r0, r7, #28
 8102d0e:	f107 0314 	add.w	r3, r7, #20
 8102d12:	e893 0006 	ldmia.w	r3, {r1, r2}
 8102d16:	f000 fac9 	bl	81032ac <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8102d1a:	4604      	mov	r4, r0
 8102d1c:	e007      	b.n	8102d2e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8102d1e:	697a      	ldr	r2, [r7, #20]
 8102d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102d24:	4611      	mov	r1, r2
 8102d26:	4618      	mov	r0, r3
 8102d28:	f000 fad9 	bl	81032de <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
 8102d2c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8102d2e:	f107 031c 	add.w	r3, r7, #28
 8102d32:	4618      	mov	r0, r3
 8102d34:	f000 f968 	bl	8103008 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8102d38:	4623      	mov	r3, r4
 8102d3a:	4618      	mov	r0, r3
 8102d3c:	3728      	adds	r7, #40	@ 0x28
 8102d3e:	46bd      	mov	sp, r7
 8102d40:	bdb0      	pop	{r4, r5, r7, pc}

08102d42 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102d42:	b5b0      	push	{r4, r5, r7, lr}
 8102d44:	b084      	sub	sp, #16
 8102d46:	af00      	add	r7, sp, #0
 8102d48:	6078      	str	r0, [r7, #4]
 8102d4a:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8102d4c:	6878      	ldr	r0, [r7, #4]
 8102d4e:	f7ff ff2b 	bl	8102ba8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8102d52:	4604      	mov	r4, r0
 8102d54:	6878      	ldr	r0, [r7, #4]
 8102d56:	f000 fad1 	bl	81032fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102d5a:	4602      	mov	r2, r0
 8102d5c:	683b      	ldr	r3, [r7, #0]
 8102d5e:	4621      	mov	r1, r4
 8102d60:	6878      	ldr	r0, [r7, #4]
 8102d62:	f000 fad7 	bl	8103314 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8102d66:	4603      	mov	r3, r0
 8102d68:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8102d6a:	6878      	ldr	r0, [r7, #4]
 8102d6c:	f000 f828 	bl	8102dc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8102d70:	4603      	mov	r3, r0
 8102d72:	60fb      	str	r3, [r7, #12]
 8102d74:	f107 020c 	add.w	r2, r7, #12
 8102d78:	f107 0308 	add.w	r3, r7, #8
 8102d7c:	4611      	mov	r1, r2
 8102d7e:	4618      	mov	r0, r3
 8102d80:	f7ff ff2d 	bl	8102bde <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEES9_>
 8102d84:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8102d86:	2b00      	cmp	r3, #0
 8102d88:	d110      	bne.n	8102dac <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8102d8a:	687c      	ldr	r4, [r7, #4]
 8102d8c:	683b      	ldr	r3, [r7, #0]
 8102d8e:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8102d90:	68bb      	ldr	r3, [r7, #8]
 8102d92:	4618      	mov	r0, r3
 8102d94:	f000 faf1 	bl	810337a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102d98:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8102d9a:	681b      	ldr	r3, [r3, #0]
 8102d9c:	461a      	mov	r2, r3
 8102d9e:	4629      	mov	r1, r5
 8102da0:	4620      	mov	r0, r4
 8102da2:	f7ff ff4b 	bl	8102c3c <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 8102da6:	4603      	mov	r3, r0
 8102da8:	2b00      	cmp	r3, #0
 8102daa:	d004      	beq.n	8102db6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8102dac:	6878      	ldr	r0, [r7, #4]
 8102dae:	f000 f807 	bl	8102dc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8102db2:	4603      	mov	r3, r0
 8102db4:	e000      	b.n	8102db8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8102db6:	68bb      	ldr	r3, [r7, #8]
    }
 8102db8:	4618      	mov	r0, r3
 8102dba:	3710      	adds	r7, #16
 8102dbc:	46bd      	mov	sp, r7
 8102dbe:	bdb0      	pop	{r4, r5, r7, pc}

08102dc0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8102dc0:	b580      	push	{r7, lr}
 8102dc2:	b084      	sub	sp, #16
 8102dc4:	af00      	add	r7, sp, #0
 8102dc6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8102dc8:	687b      	ldr	r3, [r7, #4]
 8102dca:	1d1a      	adds	r2, r3, #4
 8102dcc:	f107 030c 	add.w	r3, r7, #12
 8102dd0:	4611      	mov	r1, r2
 8102dd2:	4618      	mov	r0, r3
 8102dd4:	f000 fa83 	bl	81032de <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
 8102dd8:	68fb      	ldr	r3, [r7, #12]
 8102dda:	4618      	mov	r0, r3
 8102ddc:	3710      	adds	r7, #16
 8102dde:	46bd      	mov	sp, r7
 8102de0:	bd80      	pop	{r7, pc}

08102de2 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>:
      _M_valptr()
 8102de2:	b580      	push	{r7, lr}
 8102de4:	b082      	sub	sp, #8
 8102de6:	af00      	add	r7, sp, #0
 8102de8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	3310      	adds	r3, #16
 8102dee:	4618      	mov	r0, r3
 8102df0:	f000 facf 	bl	8103392 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE6_M_ptrEv>
 8102df4:	4603      	mov	r3, r0
 8102df6:	4618      	mov	r0, r3
 8102df8:	3708      	adds	r7, #8
 8102dfa:	46bd      	mov	sp, r7
 8102dfc:	bd80      	pop	{r7, pc}
	...

08102e00 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJRKhEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8102e00:	b5b0      	push	{r4, r5, r7, lr}
 8102e02:	b088      	sub	sp, #32
 8102e04:	af00      	add	r7, sp, #0
 8102e06:	6078      	str	r0, [r7, #4]
 8102e08:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8102e0a:	6878      	ldr	r0, [r7, #4]
 8102e0c:	f7fe fee9 	bl	8101be2 <_ZNKSt5dequeIhSaIhEE4sizeEv>
 8102e10:	4604      	mov	r4, r0
 8102e12:	6878      	ldr	r0, [r7, #4]
 8102e14:	f000 fad4 	bl	81033c0 <_ZNKSt5dequeIhSaIhEE8max_sizeEv>
 8102e18:	4603      	mov	r3, r0
 8102e1a:	429c      	cmp	r4, r3
 8102e1c:	bf0c      	ite	eq
 8102e1e:	2301      	moveq	r3, #1
 8102e20:	2300      	movne	r3, #0
 8102e22:	b2db      	uxtb	r3, r3
 8102e24:	2b00      	cmp	r3, #0
 8102e26:	d002      	beq.n	8102e2e <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJRKhEEEvDpOT_+0x2e>
	  __throw_length_error(
 8102e28:	4821      	ldr	r0, [pc, #132]	@ (8102eb0 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJRKhEEEvDpOT_+0xb0>)
 8102e2a:	f00a ffa0 	bl	810dd6e <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8102e2e:	2101      	movs	r1, #1
 8102e30:	6878      	ldr	r0, [r7, #4]
 8102e32:	f000 fad6 	bl	81033e2 <_ZNSt5dequeIhSaIhEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8102e36:	687a      	ldr	r2, [r7, #4]
 8102e38:	687b      	ldr	r3, [r7, #4]
 8102e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102e3c:	1d1c      	adds	r4, r3, #4
 8102e3e:	4610      	mov	r0, r2
 8102e40:	f7fe f963 	bl	810110a <_ZNSt11_Deque_baseIhSaIhEE16_M_allocate_nodeEv>
 8102e44:	4603      	mov	r3, r0
 8102e46:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8102e48:	687d      	ldr	r5, [r7, #4]
 8102e4a:	687b      	ldr	r3, [r7, #4]
 8102e4c:	699c      	ldr	r4, [r3, #24]
 8102e4e:	6838      	ldr	r0, [r7, #0]
 8102e50:	f000 faab 	bl	81033aa <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8102e54:	4603      	mov	r3, r0
 8102e56:	61fd      	str	r5, [r7, #28]
 8102e58:	61bc      	str	r4, [r7, #24]
 8102e5a:	617b      	str	r3, [r7, #20]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8102e5c:	6978      	ldr	r0, [r7, #20]
 8102e5e:	f000 faa4 	bl	81033aa <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8102e62:	4602      	mov	r2, r0
 8102e64:	69fb      	ldr	r3, [r7, #28]
 8102e66:	613b      	str	r3, [r7, #16]
 8102e68:	69bb      	ldr	r3, [r7, #24]
 8102e6a:	60fb      	str	r3, [r7, #12]
 8102e6c:	60ba      	str	r2, [r7, #8]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8102e6e:	68fb      	ldr	r3, [r7, #12]
 8102e70:	4619      	mov	r1, r3
 8102e72:	2001      	movs	r0, #1
 8102e74:	f7ff fc45 	bl	8102702 <_ZnwjPv>
 8102e78:	4604      	mov	r4, r0
 8102e7a:	68b8      	ldr	r0, [r7, #8]
 8102e7c:	f000 fa95 	bl	81033aa <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8102e80:	4603      	mov	r3, r0
 8102e82:	781b      	ldrb	r3, [r3, #0]
 8102e84:	7023      	strb	r3, [r4, #0]
 8102e86:	bf00      	nop
	}
 8102e88:	bf00      	nop
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	f103 0218 	add.w	r2, r3, #24
 8102e90:	687b      	ldr	r3, [r7, #4]
 8102e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102e94:	3304      	adds	r3, #4
 8102e96:	4619      	mov	r1, r3
 8102e98:	4610      	mov	r0, r2
 8102e9a:	f7fe f8dc 	bl	8101056 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	69da      	ldr	r2, [r3, #28]
 8102ea2:	687b      	ldr	r3, [r7, #4]
 8102ea4:	619a      	str	r2, [r3, #24]
      }
 8102ea6:	bf00      	nop
 8102ea8:	3720      	adds	r7, #32
 8102eaa:	46bd      	mov	sp, r7
 8102eac:	bdb0      	pop	{r4, r5, r7, pc}
 8102eae:	bf00      	nop
 8102eb0:	0810f084 	.word	0x0810f084

08102eb4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8102eb4:	b480      	push	{r7}
 8102eb6:	b083      	sub	sp, #12
 8102eb8:	af00      	add	r7, sp, #0
 8102eba:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	68db      	ldr	r3, [r3, #12]
 8102ec0:	4618      	mov	r0, r3
 8102ec2:	370c      	adds	r7, #12
 8102ec4:	46bd      	mov	sp, r7
 8102ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eca:	4770      	bx	lr

08102ecc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8102ecc:	b480      	push	{r7}
 8102ece:	b083      	sub	sp, #12
 8102ed0:	af00      	add	r7, sp, #0
 8102ed2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	689b      	ldr	r3, [r3, #8]
 8102ed8:	4618      	mov	r0, r3
 8102eda:	370c      	adds	r7, #12
 8102edc:	46bd      	mov	sp, r7
 8102ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ee2:	4770      	bx	lr

08102ee4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8102ee4:	b580      	push	{r7, lr}
 8102ee6:	b082      	sub	sp, #8
 8102ee8:	af00      	add	r7, sp, #0
 8102eea:	6078      	str	r0, [r7, #4]
 8102eec:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8102eee:	6839      	ldr	r1, [r7, #0]
 8102ef0:	6878      	ldr	r0, [r7, #4]
 8102ef2:	f000 fa91 	bl	8103418 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8102ef6:	6839      	ldr	r1, [r7, #0]
 8102ef8:	6878      	ldr	r0, [r7, #4]
 8102efa:	f000 faa6 	bl	810344a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8102efe:	bf00      	nop
 8102f00:	3708      	adds	r7, #8
 8102f02:	46bd      	mov	sp, r7
 8102f04:	bd80      	pop	{r7, pc}

08102f06 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8102f06:	b480      	push	{r7}
 8102f08:	b083      	sub	sp, #12
 8102f0a:	af00      	add	r7, sp, #0
 8102f0c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	689b      	ldr	r3, [r3, #8]
 8102f12:	4618      	mov	r0, r3
 8102f14:	370c      	adds	r7, #12
 8102f16:	46bd      	mov	sp, r7
 8102f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f1c:	4770      	bx	lr

08102f1e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8102f1e:	b590      	push	{r4, r7, lr}
 8102f20:	b083      	sub	sp, #12
 8102f22:	af00      	add	r7, sp, #0
 8102f24:	6078      	str	r0, [r7, #4]
 8102f26:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8102f28:	6878      	ldr	r0, [r7, #4]
 8102f2a:	f7ff fe3d 	bl	8102ba8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8102f2e:	4604      	mov	r4, r0
 8102f30:	6878      	ldr	r0, [r7, #4]
 8102f32:	f000 f9e3 	bl	81032fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102f36:	4602      	mov	r2, r0
 8102f38:	683b      	ldr	r3, [r7, #0]
 8102f3a:	4621      	mov	r1, r4
 8102f3c:	6878      	ldr	r0, [r7, #4]
 8102f3e:	f000 f9e9 	bl	8103314 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8102f42:	4603      	mov	r3, r0
 8102f44:	4618      	mov	r0, r3
 8102f46:	370c      	adds	r7, #12
 8102f48:	46bd      	mov	sp, r7
 8102f4a:	bd90      	pop	{r4, r7, pc}

08102f4c <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8102f4c:	b480      	push	{r7}
 8102f4e:	b083      	sub	sp, #12
 8102f50:	af00      	add	r7, sp, #0
 8102f52:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8102f54:	bf00      	nop
 8102f56:	4618      	mov	r0, r3
 8102f58:	370c      	adds	r7, #12
 8102f5a:	46bd      	mov	sp, r7
 8102f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f60:	4770      	bx	lr

08102f62 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 8102f62:	b580      	push	{r7, lr}
 8102f64:	b082      	sub	sp, #8
 8102f66:	af00      	add	r7, sp, #0
 8102f68:	6078      	str	r0, [r7, #4]
 8102f6a:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	6839      	ldr	r1, [r7, #0]
 8102f70:	4618      	mov	r0, r3
 8102f72:	f000 fa82 	bl	810347a <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EEC1ES3_>
      { }
 8102f76:	687b      	ldr	r3, [r7, #4]
 8102f78:	4618      	mov	r0, r3
 8102f7a:	3708      	adds	r7, #8
 8102f7c:	46bd      	mov	sp, r7
 8102f7e:	bd80      	pop	{r7, pc}

08102f80 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102f80:	b480      	push	{r7}
 8102f82:	b083      	sub	sp, #12
 8102f84:	af00      	add	r7, sp, #0
 8102f86:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	4618      	mov	r0, r3
 8102f8c:	370c      	adds	r7, #12
 8102f8e:	46bd      	mov	sp, r7
 8102f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f94:	4770      	bx	lr

08102f96 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102f96:	b480      	push	{r7}
 8102f98:	b083      	sub	sp, #12
 8102f9a:	af00      	add	r7, sp, #0
 8102f9c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102f9e:	687b      	ldr	r3, [r7, #4]
 8102fa0:	4618      	mov	r0, r3
 8102fa2:	370c      	adds	r7, #12
 8102fa4:	46bd      	mov	sp, r7
 8102fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102faa:	4770      	bx	lr

08102fac <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102fac:	b480      	push	{r7}
 8102fae:	b083      	sub	sp, #12
 8102fb0:	af00      	add	r7, sp, #0
 8102fb2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	4618      	mov	r0, r3
 8102fb8:	370c      	adds	r7, #12
 8102fba:	46bd      	mov	sp, r7
 8102fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fc0:	4770      	bx	lr

08102fc2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8102fc2:	b5b0      	push	{r4, r5, r7, lr}
 8102fc4:	b084      	sub	sp, #16
 8102fc6:	af00      	add	r7, sp, #0
 8102fc8:	60f8      	str	r0, [r7, #12]
 8102fca:	60b9      	str	r1, [r7, #8]
 8102fcc:	607a      	str	r2, [r7, #4]
 8102fce:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8102fd0:	68fb      	ldr	r3, [r7, #12]
 8102fd2:	68ba      	ldr	r2, [r7, #8]
 8102fd4:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8102fd6:	6878      	ldr	r0, [r7, #4]
 8102fd8:	f7ff ffd2 	bl	8102f80 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102fdc:	4604      	mov	r4, r0
 8102fde:	6838      	ldr	r0, [r7, #0]
 8102fe0:	f7ff ffd9 	bl	8102f96 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102fe4:	4605      	mov	r5, r0
 8102fe6:	6a38      	ldr	r0, [r7, #32]
 8102fe8:	f7ff ffe0 	bl	8102fac <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102fec:	4603      	mov	r3, r0
 8102fee:	462a      	mov	r2, r5
 8102ff0:	4621      	mov	r1, r4
 8102ff2:	68b8      	ldr	r0, [r7, #8]
 8102ff4:	f000 fa50 	bl	8103498 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8102ff8:	4602      	mov	r2, r0
 8102ffa:	68fb      	ldr	r3, [r7, #12]
 8102ffc:	605a      	str	r2, [r3, #4]
	  { }
 8102ffe:	68fb      	ldr	r3, [r7, #12]
 8103000:	4618      	mov	r0, r3
 8103002:	3710      	adds	r7, #16
 8103004:	46bd      	mov	sp, r7
 8103006:	bdb0      	pop	{r4, r5, r7, pc}

08103008 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8103008:	b580      	push	{r7, lr}
 810300a:	b082      	sub	sp, #8
 810300c:	af00      	add	r7, sp, #0
 810300e:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8103010:	687b      	ldr	r3, [r7, #4]
 8103012:	685b      	ldr	r3, [r3, #4]
 8103014:	2b00      	cmp	r3, #0
 8103016:	d007      	beq.n	8103028 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	681a      	ldr	r2, [r3, #0]
 810301c:	687b      	ldr	r3, [r7, #4]
 810301e:	685b      	ldr	r3, [r3, #4]
 8103020:	4619      	mov	r1, r3
 8103022:	4610      	mov	r0, r2
 8103024:	f7ff ff5e 	bl	8102ee4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	4618      	mov	r0, r3
 810302c:	3708      	adds	r7, #8
 810302e:	46bd      	mov	sp, r7
 8103030:	bd80      	pop	{r7, pc}

08103032 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8103032:	b5b0      	push	{r4, r5, r7, lr}
 8103034:	b08c      	sub	sp, #48	@ 0x30
 8103036:	af00      	add	r7, sp, #0
 8103038:	60f8      	str	r0, [r7, #12]
 810303a:	60b9      	str	r1, [r7, #8]
 810303c:	607a      	str	r2, [r7, #4]
 810303e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8103040:	1d3b      	adds	r3, r7, #4
 8103042:	4618      	mov	r0, r3
 8103044:	f000 fa4b 	bl	81034de <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE13_M_const_castEv>
 8103048:	4603      	mov	r3, r0
 810304a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 810304c:	69bc      	ldr	r4, [r7, #24]
 810304e:	68b8      	ldr	r0, [r7, #8]
 8103050:	f000 f954 	bl	81032fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8103054:	4603      	mov	r3, r0
 8103056:	429c      	cmp	r4, r3
 8103058:	bf0c      	ite	eq
 810305a:	2301      	moveq	r3, #1
 810305c:	2300      	movne	r3, #0
 810305e:	b2db      	uxtb	r3, r3
 8103060:	2b00      	cmp	r3, #0
 8103062:	d032      	beq.n	81030ca <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8103064:	68b8      	ldr	r0, [r7, #8]
 8103066:	f000 fa4b 	bl	8103500 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 810306a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 810306c:	2b00      	cmp	r3, #0
 810306e:	d015      	beq.n	810309c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8103070:	68bc      	ldr	r4, [r7, #8]
 8103072:	68b8      	ldr	r0, [r7, #8]
 8103074:	f000 fa50 	bl	8103518 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8103078:	4603      	mov	r3, r0
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	4618      	mov	r0, r3
 810307e:	f000 f97c 	bl	810337a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8103082:	4603      	mov	r3, r0
 8103084:	6819      	ldr	r1, [r3, #0]
 8103086:	683b      	ldr	r3, [r7, #0]
 8103088:	681b      	ldr	r3, [r3, #0]
 810308a:	461a      	mov	r2, r3
 810308c:	4620      	mov	r0, r4
 810308e:	f7ff fdd5 	bl	8102c3c <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 8103092:	4603      	mov	r3, r0
 8103094:	2b00      	cmp	r3, #0
 8103096:	d001      	beq.n	810309c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8103098:	2301      	movs	r3, #1
 810309a:	e000      	b.n	810309e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 810309c:	2300      	movs	r3, #0
	  if (size() > 0
 810309e:	2b00      	cmp	r3, #0
 81030a0:	d00c      	beq.n	81030bc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 81030a2:	2300      	movs	r3, #0
 81030a4:	61fb      	str	r3, [r7, #28]
 81030a6:	68b8      	ldr	r0, [r7, #8]
 81030a8:	f000 fa36 	bl	8103518 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81030ac:	4602      	mov	r2, r0
 81030ae:	f107 031c 	add.w	r3, r7, #28
 81030b2:	4619      	mov	r1, r3
 81030b4:	68f8      	ldr	r0, [r7, #12]
 81030b6:	f000 fa3b 	bl	8103530 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
 81030ba:	e0e5      	b.n	8103288 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 81030bc:	68fb      	ldr	r3, [r7, #12]
 81030be:	683a      	ldr	r2, [r7, #0]
 81030c0:	68b9      	ldr	r1, [r7, #8]
 81030c2:	4618      	mov	r0, r3
 81030c4:	f000 fa49 	bl	810355a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 81030c8:	e0de      	b.n	8103288 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 81030ca:	68bc      	ldr	r4, [r7, #8]
 81030cc:	683b      	ldr	r3, [r7, #0]
 81030ce:	681d      	ldr	r5, [r3, #0]
 81030d0:	69bb      	ldr	r3, [r7, #24]
 81030d2:	4618      	mov	r0, r3
 81030d4:	f000 f951 	bl	810337a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81030d8:	4603      	mov	r3, r0
 81030da:	681b      	ldr	r3, [r3, #0]
 81030dc:	461a      	mov	r2, r3
 81030de:	4629      	mov	r1, r5
 81030e0:	4620      	mov	r0, r4
 81030e2:	f7ff fdab 	bl	8102c3c <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 81030e6:	4603      	mov	r3, r0
 81030e8:	2b00      	cmp	r3, #0
 81030ea:	d059      	beq.n	81031a0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 81030ec:	69bb      	ldr	r3, [r7, #24]
 81030ee:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 81030f0:	69bc      	ldr	r4, [r7, #24]
 81030f2:	68b8      	ldr	r0, [r7, #8]
 81030f4:	f000 fabb 	bl	810366e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81030f8:	4603      	mov	r3, r0
 81030fa:	681b      	ldr	r3, [r3, #0]
 81030fc:	429c      	cmp	r4, r3
 81030fe:	bf0c      	ite	eq
 8103100:	2301      	moveq	r3, #1
 8103102:	2300      	movne	r3, #0
 8103104:	b2db      	uxtb	r3, r3
 8103106:	2b00      	cmp	r3, #0
 8103108:	d00d      	beq.n	8103126 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 810310a:	68b8      	ldr	r0, [r7, #8]
 810310c:	f000 faaf 	bl	810366e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8103110:	4604      	mov	r4, r0
 8103112:	68b8      	ldr	r0, [r7, #8]
 8103114:	f000 faab 	bl	810366e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8103118:	4603      	mov	r3, r0
 810311a:	461a      	mov	r2, r3
 810311c:	4621      	mov	r1, r4
 810311e:	68f8      	ldr	r0, [r7, #12]
 8103120:	f000 fab1 	bl	8103686 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8103124:	e0b0      	b.n	8103288 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8103126:	68bc      	ldr	r4, [r7, #8]
 8103128:	f107 0314 	add.w	r3, r7, #20
 810312c:	4618      	mov	r0, r3
 810312e:	f000 fac3 	bl	81036b8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEmmEv>
 8103132:	4603      	mov	r3, r0
 8103134:	681b      	ldr	r3, [r3, #0]
 8103136:	4618      	mov	r0, r3
 8103138:	f000 f91f 	bl	810337a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810313c:	4603      	mov	r3, r0
 810313e:	6819      	ldr	r1, [r3, #0]
 8103140:	683b      	ldr	r3, [r7, #0]
 8103142:	681b      	ldr	r3, [r3, #0]
 8103144:	461a      	mov	r2, r3
 8103146:	4620      	mov	r0, r4
 8103148:	f7ff fd78 	bl	8102c3c <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 810314c:	4603      	mov	r3, r0
 810314e:	2b00      	cmp	r3, #0
 8103150:	d01f      	beq.n	8103192 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8103152:	697b      	ldr	r3, [r7, #20]
 8103154:	4618      	mov	r0, r3
 8103156:	f7ff fead 	bl	8102eb4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 810315a:	4603      	mov	r3, r0
 810315c:	2b00      	cmp	r3, #0
 810315e:	bf0c      	ite	eq
 8103160:	2301      	moveq	r3, #1
 8103162:	2300      	movne	r3, #0
 8103164:	b2db      	uxtb	r3, r3
 8103166:	2b00      	cmp	r3, #0
 8103168:	d00a      	beq.n	8103180 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 810316a:	2300      	movs	r3, #0
 810316c:	623b      	str	r3, [r7, #32]
 810316e:	f107 0214 	add.w	r2, r7, #20
 8103172:	f107 0320 	add.w	r3, r7, #32
 8103176:	4619      	mov	r1, r3
 8103178:	68f8      	ldr	r0, [r7, #12]
 810317a:	f000 f9d9 	bl	8103530 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 810317e:	e083      	b.n	8103288 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8103180:	f107 0218 	add.w	r2, r7, #24
 8103184:	f107 0318 	add.w	r3, r7, #24
 8103188:	4619      	mov	r1, r3
 810318a:	68f8      	ldr	r0, [r7, #12]
 810318c:	f000 fa7b 	bl	8103686 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8103190:	e07a      	b.n	8103288 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8103192:	68fb      	ldr	r3, [r7, #12]
 8103194:	683a      	ldr	r2, [r7, #0]
 8103196:	68b9      	ldr	r1, [r7, #8]
 8103198:	4618      	mov	r0, r3
 810319a:	f000 f9de 	bl	810355a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 810319e:	e073      	b.n	8103288 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 81031a0:	68bc      	ldr	r4, [r7, #8]
 81031a2:	69bb      	ldr	r3, [r7, #24]
 81031a4:	4618      	mov	r0, r3
 81031a6:	f000 f8e8 	bl	810337a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81031aa:	4603      	mov	r3, r0
 81031ac:	6819      	ldr	r1, [r3, #0]
 81031ae:	683b      	ldr	r3, [r7, #0]
 81031b0:	681b      	ldr	r3, [r3, #0]
 81031b2:	461a      	mov	r2, r3
 81031b4:	4620      	mov	r0, r4
 81031b6:	f7ff fd41 	bl	8102c3c <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 81031ba:	4603      	mov	r3, r0
 81031bc:	2b00      	cmp	r3, #0
 81031be:	d059      	beq.n	8103274 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 81031c0:	69bb      	ldr	r3, [r7, #24]
 81031c2:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 81031c4:	69bc      	ldr	r4, [r7, #24]
 81031c6:	68b8      	ldr	r0, [r7, #8]
 81031c8:	f000 f9a6 	bl	8103518 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81031cc:	4603      	mov	r3, r0
 81031ce:	681b      	ldr	r3, [r3, #0]
 81031d0:	429c      	cmp	r4, r3
 81031d2:	bf0c      	ite	eq
 81031d4:	2301      	moveq	r3, #1
 81031d6:	2300      	movne	r3, #0
 81031d8:	b2db      	uxtb	r3, r3
 81031da:	2b00      	cmp	r3, #0
 81031dc:	d00c      	beq.n	81031f8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 81031de:	2300      	movs	r3, #0
 81031e0:	627b      	str	r3, [r7, #36]	@ 0x24
 81031e2:	68b8      	ldr	r0, [r7, #8]
 81031e4:	f000 f998 	bl	8103518 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81031e8:	4602      	mov	r2, r0
 81031ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81031ee:	4619      	mov	r1, r3
 81031f0:	68f8      	ldr	r0, [r7, #12]
 81031f2:	f000 f99d 	bl	8103530 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
 81031f6:	e047      	b.n	8103288 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 81031f8:	68bc      	ldr	r4, [r7, #8]
 81031fa:	683b      	ldr	r3, [r7, #0]
 81031fc:	681d      	ldr	r5, [r3, #0]
 81031fe:	f107 0310 	add.w	r3, r7, #16
 8103202:	4618      	mov	r0, r3
 8103204:	f000 fa69 	bl	81036da <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEppEv>
 8103208:	4603      	mov	r3, r0
 810320a:	681b      	ldr	r3, [r3, #0]
 810320c:	4618      	mov	r0, r3
 810320e:	f000 f8b4 	bl	810337a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8103212:	4603      	mov	r3, r0
 8103214:	681b      	ldr	r3, [r3, #0]
 8103216:	461a      	mov	r2, r3
 8103218:	4629      	mov	r1, r5
 810321a:	4620      	mov	r0, r4
 810321c:	f7ff fd0e 	bl	8102c3c <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 8103220:	4603      	mov	r3, r0
 8103222:	2b00      	cmp	r3, #0
 8103224:	d01f      	beq.n	8103266 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8103226:	69bb      	ldr	r3, [r7, #24]
 8103228:	4618      	mov	r0, r3
 810322a:	f7ff fe43 	bl	8102eb4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 810322e:	4603      	mov	r3, r0
 8103230:	2b00      	cmp	r3, #0
 8103232:	bf0c      	ite	eq
 8103234:	2301      	moveq	r3, #1
 8103236:	2300      	movne	r3, #0
 8103238:	b2db      	uxtb	r3, r3
 810323a:	2b00      	cmp	r3, #0
 810323c:	d00a      	beq.n	8103254 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 810323e:	2300      	movs	r3, #0
 8103240:	62bb      	str	r3, [r7, #40]	@ 0x28
 8103242:	f107 0218 	add.w	r2, r7, #24
 8103246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810324a:	4619      	mov	r1, r3
 810324c:	68f8      	ldr	r0, [r7, #12]
 810324e:	f000 f96f 	bl	8103530 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8103252:	e019      	b.n	8103288 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8103254:	f107 0210 	add.w	r2, r7, #16
 8103258:	f107 0310 	add.w	r3, r7, #16
 810325c:	4619      	mov	r1, r3
 810325e:	68f8      	ldr	r0, [r7, #12]
 8103260:	f000 fa11 	bl	8103686 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8103264:	e010      	b.n	8103288 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8103266:	68fb      	ldr	r3, [r7, #12]
 8103268:	683a      	ldr	r2, [r7, #0]
 810326a:	68b9      	ldr	r1, [r7, #8]
 810326c:	4618      	mov	r0, r3
 810326e:	f000 f974 	bl	810355a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8103272:	e009      	b.n	8103288 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8103274:	2300      	movs	r3, #0
 8103276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8103278:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 810327c:	f107 0318 	add.w	r3, r7, #24
 8103280:	4619      	mov	r1, r3
 8103282:	68f8      	ldr	r0, [r7, #12]
 8103284:	f000 f954 	bl	8103530 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8103288:	68f8      	ldr	r0, [r7, #12]
 810328a:	3730      	adds	r7, #48	@ 0x30
 810328c:	46bd      	mov	sp, r7
 810328e:	bdb0      	pop	{r4, r5, r7, pc}

08103290 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 8103290:	b580      	push	{r7, lr}
 8103292:	b082      	sub	sp, #8
 8103294:	af00      	add	r7, sp, #0
 8103296:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	685b      	ldr	r3, [r3, #4]
 810329c:	4618      	mov	r0, r3
 810329e:	f000 fa2d 	bl	81036fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81032a2:	4603      	mov	r3, r0
 81032a4:	4618      	mov	r0, r3
 81032a6:	3708      	adds	r7, #8
 81032a8:	46bd      	mov	sp, r7
 81032aa:	bd80      	pop	{r7, pc}

081032ac <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 81032ac:	b580      	push	{r7, lr}
 81032ae:	b086      	sub	sp, #24
 81032b0:	af00      	add	r7, sp, #0
 81032b2:	60f8      	str	r0, [r7, #12]
 81032b4:	1d3b      	adds	r3, r7, #4
 81032b6:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 81032ba:	68fb      	ldr	r3, [r7, #12]
 81032bc:	6818      	ldr	r0, [r3, #0]
 81032be:	6879      	ldr	r1, [r7, #4]
 81032c0:	68ba      	ldr	r2, [r7, #8]
 81032c2:	68fb      	ldr	r3, [r7, #12]
 81032c4:	685b      	ldr	r3, [r3, #4]
 81032c6:	f000 fa2c 	bl	8103722 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 81032ca:	4603      	mov	r3, r0
 81032cc:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 81032ce:	68fb      	ldr	r3, [r7, #12]
 81032d0:	2200      	movs	r2, #0
 81032d2:	605a      	str	r2, [r3, #4]
	  return __it;
 81032d4:	697b      	ldr	r3, [r7, #20]
	}
 81032d6:	4618      	mov	r0, r3
 81032d8:	3718      	adds	r7, #24
 81032da:	46bd      	mov	sp, r7
 81032dc:	bd80      	pop	{r7, pc}

081032de <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 81032de:	b480      	push	{r7}
 81032e0:	b083      	sub	sp, #12
 81032e2:	af00      	add	r7, sp, #0
 81032e4:	6078      	str	r0, [r7, #4]
 81032e6:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 81032e8:	687b      	ldr	r3, [r7, #4]
 81032ea:	683a      	ldr	r2, [r7, #0]
 81032ec:	601a      	str	r2, [r3, #0]
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	4618      	mov	r0, r3
 81032f2:	370c      	adds	r7, #12
 81032f4:	46bd      	mov	sp, r7
 81032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032fa:	4770      	bx	lr

081032fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 81032fc:	b480      	push	{r7}
 81032fe:	b083      	sub	sp, #12
 8103300:	af00      	add	r7, sp, #0
 8103302:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8103304:	687b      	ldr	r3, [r7, #4]
 8103306:	3304      	adds	r3, #4
 8103308:	4618      	mov	r0, r3
 810330a:	370c      	adds	r7, #12
 810330c:	46bd      	mov	sp, r7
 810330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103312:	4770      	bx	lr

08103314 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8103314:	b590      	push	{r4, r7, lr}
 8103316:	b087      	sub	sp, #28
 8103318:	af00      	add	r7, sp, #0
 810331a:	60f8      	str	r0, [r7, #12]
 810331c:	60b9      	str	r1, [r7, #8]
 810331e:	607a      	str	r2, [r7, #4]
 8103320:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8103322:	e01c      	b.n	810335e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x4a>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8103324:	68fc      	ldr	r4, [r7, #12]
 8103326:	68b8      	ldr	r0, [r7, #8]
 8103328:	f000 f9e8 	bl	81036fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810332c:	4603      	mov	r3, r0
 810332e:	6819      	ldr	r1, [r3, #0]
 8103330:	683b      	ldr	r3, [r7, #0]
 8103332:	681b      	ldr	r3, [r3, #0]
 8103334:	461a      	mov	r2, r3
 8103336:	4620      	mov	r0, r4
 8103338:	f7ff fc80 	bl	8102c3c <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 810333c:	4603      	mov	r3, r0
 810333e:	f083 0301 	eor.w	r3, r3, #1
 8103342:	b2db      	uxtb	r3, r3
 8103344:	2b00      	cmp	r3, #0
 8103346:	d006      	beq.n	8103356 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x42>
	  __y = __x, __x = _S_left(__x);
 8103348:	68bb      	ldr	r3, [r7, #8]
 810334a:	607b      	str	r3, [r7, #4]
 810334c:	68b8      	ldr	r0, [r7, #8]
 810334e:	f7ff fdbd 	bl	8102ecc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8103352:	60b8      	str	r0, [r7, #8]
 8103354:	e003      	b.n	810335e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x4a>
	  __x = _S_right(__x);
 8103356:	68b8      	ldr	r0, [r7, #8]
 8103358:	f7ff fdac 	bl	8102eb4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 810335c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 810335e:	68bb      	ldr	r3, [r7, #8]
 8103360:	2b00      	cmp	r3, #0
 8103362:	d1df      	bne.n	8103324 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 8103364:	f107 0314 	add.w	r3, r7, #20
 8103368:	6879      	ldr	r1, [r7, #4]
 810336a:	4618      	mov	r0, r3
 810336c:	f7ff ffb7 	bl	81032de <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
 8103370:	697b      	ldr	r3, [r7, #20]
    }
 8103372:	4618      	mov	r0, r3
 8103374:	371c      	adds	r7, #28
 8103376:	46bd      	mov	sp, r7
 8103378:	bd90      	pop	{r4, r7, pc}

0810337a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 810337a:	b580      	push	{r7, lr}
 810337c:	b082      	sub	sp, #8
 810337e:	af00      	add	r7, sp, #0
 8103380:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8103382:	6878      	ldr	r0, [r7, #4]
 8103384:	f000 f9ba 	bl	81036fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8103388:	4603      	mov	r3, r0
 810338a:	4618      	mov	r0, r3
 810338c:	3708      	adds	r7, #8
 810338e:	46bd      	mov	sp, r7
 8103390:	bd80      	pop	{r7, pc}

08103392 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8103392:	b580      	push	{r7, lr}
 8103394:	b082      	sub	sp, #8
 8103396:	af00      	add	r7, sp, #0
 8103398:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 810339a:	6878      	ldr	r0, [r7, #4]
 810339c:	f000 fa00 	bl	81037a0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE7_M_addrEv>
 81033a0:	4603      	mov	r3, r0
 81033a2:	4618      	mov	r0, r3
 81033a4:	3708      	adds	r7, #8
 81033a6:	46bd      	mov	sp, r7
 81033a8:	bd80      	pop	{r7, pc}

081033aa <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81033aa:	b480      	push	{r7}
 81033ac:	b083      	sub	sp, #12
 81033ae:	af00      	add	r7, sp, #0
 81033b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	4618      	mov	r0, r3
 81033b6:	370c      	adds	r7, #12
 81033b8:	46bd      	mov	sp, r7
 81033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033be:	4770      	bx	lr

081033c0 <_ZNKSt5dequeIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 81033c0:	b580      	push	{r7, lr}
 81033c2:	b082      	sub	sp, #8
 81033c4:	af00      	add	r7, sp, #0
 81033c6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 81033c8:	687b      	ldr	r3, [r7, #4]
 81033ca:	4618      	mov	r0, r3
 81033cc:	f7fd febb 	bl	8101146 <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 81033d0:	4603      	mov	r3, r0
 81033d2:	4618      	mov	r0, r3
 81033d4:	f000 f9ef 	bl	81037b6 <_ZNSt5dequeIhSaIhEE11_S_max_sizeERKS0_>
 81033d8:	4603      	mov	r3, r0
 81033da:	4618      	mov	r0, r3
 81033dc:	3708      	adds	r7, #8
 81033de:	46bd      	mov	sp, r7
 81033e0:	bd80      	pop	{r7, pc}

081033e2 <_ZNSt5dequeIhSaIhEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 81033e2:	b580      	push	{r7, lr}
 81033e4:	b082      	sub	sp, #8
 81033e6:	af00      	add	r7, sp, #0
 81033e8:	6078      	str	r0, [r7, #4]
 81033ea:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 81033ec:	683b      	ldr	r3, [r7, #0]
 81033ee:	1c5a      	adds	r2, r3, #1
 81033f0:	687b      	ldr	r3, [r7, #4]
 81033f2:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 81033f4:	6879      	ldr	r1, [r7, #4]
 81033f6:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 81033f8:	6879      	ldr	r1, [r7, #4]
 81033fa:	6809      	ldr	r1, [r1, #0]
 81033fc:	1a41      	subs	r1, r0, r1
 81033fe:	1089      	asrs	r1, r1, #2
 8103400:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8103402:	429a      	cmp	r2, r3
 8103404:	d904      	bls.n	8103410 <_ZNSt5dequeIhSaIhEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8103406:	2200      	movs	r2, #0
 8103408:	6839      	ldr	r1, [r7, #0]
 810340a:	6878      	ldr	r0, [r7, #4]
 810340c:	f000 f9f3 	bl	81037f6 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb>
      }
 8103410:	bf00      	nop
 8103412:	3708      	adds	r7, #8
 8103414:	46bd      	mov	sp, r7
 8103416:	bd80      	pop	{r7, pc}

08103418 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8103418:	b590      	push	{r4, r7, lr}
 810341a:	b087      	sub	sp, #28
 810341c:	af00      	add	r7, sp, #0
 810341e:	6078      	str	r0, [r7, #4]
 8103420:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8103422:	6878      	ldr	r0, [r7, #4]
 8103424:	f000 fa81 	bl	810392a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8103428:	4604      	mov	r4, r0
 810342a:	6838      	ldr	r0, [r7, #0]
 810342c:	f7ff fcd9 	bl	8102de2 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>
 8103430:	4603      	mov	r3, r0
 8103432:	617c      	str	r4, [r7, #20]
 8103434:	613b      	str	r3, [r7, #16]
 8103436:	697b      	ldr	r3, [r7, #20]
 8103438:	60fb      	str	r3, [r7, #12]
 810343a:	693b      	ldr	r3, [r7, #16]
 810343c:	60bb      	str	r3, [r7, #8]
	{ __p->~_Up(); }
 810343e:	bf00      	nop
	}
 8103440:	bf00      	nop
      }
 8103442:	bf00      	nop
 8103444:	371c      	adds	r7, #28
 8103446:	46bd      	mov	sp, r7
 8103448:	bd90      	pop	{r4, r7, pc}

0810344a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 810344a:	b580      	push	{r7, lr}
 810344c:	b086      	sub	sp, #24
 810344e:	af00      	add	r7, sp, #0
 8103450:	6078      	str	r0, [r7, #4]
 8103452:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8103454:	6878      	ldr	r0, [r7, #4]
 8103456:	f000 fa68 	bl	810392a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810345a:	4603      	mov	r3, r0
 810345c:	617b      	str	r3, [r7, #20]
 810345e:	683b      	ldr	r3, [r7, #0]
 8103460:	613b      	str	r3, [r7, #16]
 8103462:	2301      	movs	r3, #1
 8103464:	60fb      	str	r3, [r7, #12]
      { __a.deallocate(__p, __n); }
 8103466:	68fa      	ldr	r2, [r7, #12]
 8103468:	6939      	ldr	r1, [r7, #16]
 810346a:	6978      	ldr	r0, [r7, #20]
 810346c:	f000 fb6f 	bl	8103b4e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE10deallocateEPS8_j>
 8103470:	bf00      	nop
 8103472:	bf00      	nop
 8103474:	3718      	adds	r7, #24
 8103476:	46bd      	mov	sp, r7
 8103478:	bd80      	pop	{r7, pc}

0810347a <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 810347a:	b480      	push	{r7}
 810347c:	b083      	sub	sp, #12
 810347e:	af00      	add	r7, sp, #0
 8103480:	6078      	str	r0, [r7, #4]
 8103482:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	683a      	ldr	r2, [r7, #0]
 8103488:	601a      	str	r2, [r3, #0]
 810348a:	687b      	ldr	r3, [r7, #4]
 810348c:	4618      	mov	r0, r3
 810348e:	370c      	adds	r7, #12
 8103490:	46bd      	mov	sp, r7
 8103492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103496:	4770      	bx	lr

08103498 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8103498:	b5b0      	push	{r4, r5, r7, lr}
 810349a:	b088      	sub	sp, #32
 810349c:	af02      	add	r7, sp, #8
 810349e:	60f8      	str	r0, [r7, #12]
 81034a0:	60b9      	str	r1, [r7, #8]
 81034a2:	607a      	str	r2, [r7, #4]
 81034a4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 81034a6:	68f8      	ldr	r0, [r7, #12]
 81034a8:	f000 fa4a 	bl	8103940 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 81034ac:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 81034ae:	68b8      	ldr	r0, [r7, #8]
 81034b0:	f7ff fd66 	bl	8102f80 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81034b4:	4604      	mov	r4, r0
 81034b6:	6878      	ldr	r0, [r7, #4]
 81034b8:	f7ff fd6d 	bl	8102f96 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81034bc:	4605      	mov	r5, r0
 81034be:	6838      	ldr	r0, [r7, #0]
 81034c0:	f7ff fd74 	bl	8102fac <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81034c4:	4603      	mov	r3, r0
 81034c6:	9300      	str	r3, [sp, #0]
 81034c8:	462b      	mov	r3, r5
 81034ca:	4622      	mov	r2, r4
 81034cc:	6979      	ldr	r1, [r7, #20]
 81034ce:	68f8      	ldr	r0, [r7, #12]
 81034d0:	f000 fa4c 	bl	810396c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 81034d4:	697b      	ldr	r3, [r7, #20]
	}
 81034d6:	4618      	mov	r0, r3
 81034d8:	3718      	adds	r7, #24
 81034da:	46bd      	mov	sp, r7
 81034dc:	bdb0      	pop	{r4, r5, r7, pc}

081034de <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 81034de:	b580      	push	{r7, lr}
 81034e0:	b084      	sub	sp, #16
 81034e2:	af00      	add	r7, sp, #0
 81034e4:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	681a      	ldr	r2, [r3, #0]
 81034ea:	f107 030c 	add.w	r3, r7, #12
 81034ee:	4611      	mov	r1, r2
 81034f0:	4618      	mov	r0, r3
 81034f2:	f7ff fef4 	bl	81032de <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
 81034f6:	68fb      	ldr	r3, [r7, #12]
 81034f8:	4618      	mov	r0, r3
 81034fa:	3710      	adds	r7, #16
 81034fc:	46bd      	mov	sp, r7
 81034fe:	bd80      	pop	{r7, pc}

08103500 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8103500:	b480      	push	{r7}
 8103502:	b083      	sub	sp, #12
 8103504:	af00      	add	r7, sp, #0
 8103506:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	695b      	ldr	r3, [r3, #20]
 810350c:	4618      	mov	r0, r3
 810350e:	370c      	adds	r7, #12
 8103510:	46bd      	mov	sp, r7
 8103512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103516:	4770      	bx	lr

08103518 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8103518:	b480      	push	{r7}
 810351a:	b083      	sub	sp, #12
 810351c:	af00      	add	r7, sp, #0
 810351e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	3310      	adds	r3, #16
 8103524:	4618      	mov	r0, r3
 8103526:	370c      	adds	r7, #12
 8103528:	46bd      	mov	sp, r7
 810352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810352e:	4770      	bx	lr

08103530 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
	       enable_if<_PCCP::template
			   _ConstructiblePair<_U1, _U2>()
	                 && _PCCP::template
			   _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
 8103530:	b480      	push	{r7}
 8103532:	b085      	sub	sp, #20
 8103534:	af00      	add	r7, sp, #0
 8103536:	60f8      	str	r0, [r7, #12]
 8103538:	60b9      	str	r1, [r7, #8]
 810353a:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 810353c:	68bb      	ldr	r3, [r7, #8]
 810353e:	681a      	ldr	r2, [r3, #0]
 8103540:	68fb      	ldr	r3, [r7, #12]
 8103542:	601a      	str	r2, [r3, #0]
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	681a      	ldr	r2, [r3, #0]
 8103548:	68fb      	ldr	r3, [r7, #12]
 810354a:	605a      	str	r2, [r3, #4]
 810354c:	68fb      	ldr	r3, [r7, #12]
 810354e:	4618      	mov	r0, r3
 8103550:	3714      	adds	r7, #20
 8103552:	46bd      	mov	sp, r7
 8103554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103558:	4770      	bx	lr

0810355a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810355a:	b5b0      	push	{r4, r5, r7, lr}
 810355c:	b08a      	sub	sp, #40	@ 0x28
 810355e:	af00      	add	r7, sp, #0
 8103560:	60f8      	str	r0, [r7, #12]
 8103562:	60b9      	str	r1, [r7, #8]
 8103564:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8103566:	68b8      	ldr	r0, [r7, #8]
 8103568:	f7ff fb1e 	bl	8102ba8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 810356c:	4603      	mov	r3, r0
 810356e:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8103570:	68b8      	ldr	r0, [r7, #8]
 8103572:	f7ff fec3 	bl	81032fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8103576:	4603      	mov	r3, r0
 8103578:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 810357a:	2301      	movs	r3, #1
 810357c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8103580:	e022      	b.n	81035c8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 8103582:	69bb      	ldr	r3, [r7, #24]
 8103584:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8103586:	68bc      	ldr	r4, [r7, #8]
 8103588:	687b      	ldr	r3, [r7, #4]
 810358a:	681d      	ldr	r5, [r3, #0]
 810358c:	69bb      	ldr	r3, [r7, #24]
 810358e:	4618      	mov	r0, r3
 8103590:	f000 f8b4 	bl	81036fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8103594:	4603      	mov	r3, r0
 8103596:	681b      	ldr	r3, [r3, #0]
 8103598:	461a      	mov	r2, r3
 810359a:	4629      	mov	r1, r5
 810359c:	4620      	mov	r0, r4
 810359e:	f7ff fb4d 	bl	8102c3c <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 81035a2:	4603      	mov	r3, r0
 81035a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 81035a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81035ac:	2b00      	cmp	r3, #0
 81035ae:	d005      	beq.n	81035bc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x62>
 81035b0:	69bb      	ldr	r3, [r7, #24]
 81035b2:	4618      	mov	r0, r3
 81035b4:	f7ff fc8a 	bl	8102ecc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 81035b8:	4603      	mov	r3, r0
 81035ba:	e004      	b.n	81035c6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6c>
 81035bc:	69bb      	ldr	r3, [r7, #24]
 81035be:	4618      	mov	r0, r3
 81035c0:	f7ff fc78 	bl	8102eb4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81035c4:	4603      	mov	r3, r0
 81035c6:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 81035c8:	69bb      	ldr	r3, [r7, #24]
 81035ca:	2b00      	cmp	r3, #0
 81035cc:	d1d9      	bne.n	8103582 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 81035ce:	697a      	ldr	r2, [r7, #20]
 81035d0:	f107 0310 	add.w	r3, r7, #16
 81035d4:	4611      	mov	r1, r2
 81035d6:	4618      	mov	r0, r3
 81035d8:	f7ff fe81 	bl	81032de <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 81035dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81035e0:	2b00      	cmp	r3, #0
 81035e2:	d01d      	beq.n	8103620 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 81035e4:	68b8      	ldr	r0, [r7, #8]
 81035e6:	f000 fa1f 	bl	8103a28 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 81035ea:	4603      	mov	r3, r0
 81035ec:	61fb      	str	r3, [r7, #28]
 81035ee:	f107 021c 	add.w	r2, r7, #28
 81035f2:	f107 0310 	add.w	r3, r7, #16
 81035f6:	4611      	mov	r1, r2
 81035f8:	4618      	mov	r0, r3
 81035fa:	f7ff faf0 	bl	8102bde <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEES9_>
 81035fe:	4603      	mov	r3, r0
 8103600:	2b00      	cmp	r3, #0
 8103602:	d008      	beq.n	8103616 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8103604:	f107 0214 	add.w	r2, r7, #20
 8103608:	f107 0318 	add.w	r3, r7, #24
 810360c:	4619      	mov	r1, r3
 810360e:	68f8      	ldr	r0, [r7, #12]
 8103610:	f000 fa1b 	bl	8103a4a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP20__UART_HandleTypeDefP12UartEndpointEERS1_Lb1EEEOT_OT0_>
 8103614:	e027      	b.n	8103666 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8103616:	f107 0310 	add.w	r3, r7, #16
 810361a:	4618      	mov	r0, r3
 810361c:	f000 f84c 	bl	81036b8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8103620:	68bc      	ldr	r4, [r7, #8]
 8103622:	693b      	ldr	r3, [r7, #16]
 8103624:	4618      	mov	r0, r3
 8103626:	f7ff fea8 	bl	810337a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810362a:	4603      	mov	r3, r0
 810362c:	6819      	ldr	r1, [r3, #0]
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	461a      	mov	r2, r3
 8103634:	4620      	mov	r0, r4
 8103636:	f7ff fb01 	bl	8102c3c <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 810363a:	4603      	mov	r3, r0
 810363c:	2b00      	cmp	r3, #0
 810363e:	d008      	beq.n	8103652 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8103640:	f107 0214 	add.w	r2, r7, #20
 8103644:	f107 0318 	add.w	r3, r7, #24
 8103648:	4619      	mov	r1, r3
 810364a:	68f8      	ldr	r0, [r7, #12]
 810364c:	f000 f9fd 	bl	8103a4a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP20__UART_HandleTypeDefP12UartEndpointEERS1_Lb1EEEOT_OT0_>
 8103650:	e009      	b.n	8103666 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8103652:	2300      	movs	r3, #0
 8103654:	623b      	str	r3, [r7, #32]
 8103656:	f107 0220 	add.w	r2, r7, #32
 810365a:	f107 0310 	add.w	r3, r7, #16
 810365e:	4619      	mov	r1, r3
 8103660:	68f8      	ldr	r0, [r7, #12]
 8103662:	f7ff ff65 	bl	8103530 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8103666:	68f8      	ldr	r0, [r7, #12]
 8103668:	3728      	adds	r7, #40	@ 0x28
 810366a:	46bd      	mov	sp, r7
 810366c:	bdb0      	pop	{r4, r5, r7, pc}

0810366e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 810366e:	b480      	push	{r7}
 8103670:	b083      	sub	sp, #12
 8103672:	af00      	add	r7, sp, #0
 8103674:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	330c      	adds	r3, #12
 810367a:	4618      	mov	r0, r3
 810367c:	370c      	adds	r7, #12
 810367e:	46bd      	mov	sp, r7
 8103680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103684:	4770      	bx	lr

08103686 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8103686:	b580      	push	{r7, lr}
 8103688:	b084      	sub	sp, #16
 810368a:	af00      	add	r7, sp, #0
 810368c:	60f8      	str	r0, [r7, #12]
 810368e:	60b9      	str	r1, [r7, #8]
 8103690:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8103692:	68b8      	ldr	r0, [r7, #8]
 8103694:	f000 f9f2 	bl	8103a7c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8103698:	4603      	mov	r3, r0
 810369a:	681a      	ldr	r2, [r3, #0]
 810369c:	68fb      	ldr	r3, [r7, #12]
 810369e:	601a      	str	r2, [r3, #0]
 81036a0:	6878      	ldr	r0, [r7, #4]
 81036a2:	f000 f9eb 	bl	8103a7c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 81036a6:	4603      	mov	r3, r0
 81036a8:	681a      	ldr	r2, [r3, #0]
 81036aa:	68fb      	ldr	r3, [r7, #12]
 81036ac:	605a      	str	r2, [r3, #4]
	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 81036ae:	68fb      	ldr	r3, [r7, #12]
 81036b0:	4618      	mov	r0, r3
 81036b2:	3710      	adds	r7, #16
 81036b4:	46bd      	mov	sp, r7
 81036b6:	bd80      	pop	{r7, pc}

081036b8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 81036b8:	b580      	push	{r7, lr}
 81036ba:	b082      	sub	sp, #8
 81036bc:	af00      	add	r7, sp, #0
 81036be:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	4618      	mov	r0, r3
 81036c6:	f00a fae6 	bl	810dc96 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 81036ca:	4602      	mov	r2, r0
 81036cc:	687b      	ldr	r3, [r7, #4]
 81036ce:	601a      	str	r2, [r3, #0]
	return *this;
 81036d0:	687b      	ldr	r3, [r7, #4]
      }
 81036d2:	4618      	mov	r0, r3
 81036d4:	3708      	adds	r7, #8
 81036d6:	46bd      	mov	sp, r7
 81036d8:	bd80      	pop	{r7, pc}

081036da <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 81036da:	b580      	push	{r7, lr}
 81036dc:	b082      	sub	sp, #8
 81036de:	af00      	add	r7, sp, #0
 81036e0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	4618      	mov	r0, r3
 81036e8:	f00a fad3 	bl	810dc92 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 81036ec:	4602      	mov	r2, r0
 81036ee:	687b      	ldr	r3, [r7, #4]
 81036f0:	601a      	str	r2, [r3, #0]
	return *this;
 81036f2:	687b      	ldr	r3, [r7, #4]
      }
 81036f4:	4618      	mov	r0, r3
 81036f6:	3708      	adds	r7, #8
 81036f8:	46bd      	mov	sp, r7
 81036fa:	bd80      	pop	{r7, pc}

081036fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 81036fc:	b580      	push	{r7, lr}
 81036fe:	b084      	sub	sp, #16
 8103700:	af00      	add	r7, sp, #0
 8103702:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8103704:	6878      	ldr	r0, [r7, #4]
 8103706:	f000 f9c4 	bl	8103a92 <_ZNKSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>
 810370a:	4602      	mov	r2, r0
 810370c:	f107 030c 	add.w	r3, r7, #12
 8103710:	4611      	mov	r1, r2
 8103712:	4618      	mov	r0, r3
 8103714:	f000 f9cb 	bl	8103aae <_ZNKSt10_Select1stISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEclERKS6_>
 8103718:	4603      	mov	r3, r0
      }
 810371a:	4618      	mov	r0, r3
 810371c:	3710      	adds	r7, #16
 810371e:	46bd      	mov	sp, r7
 8103720:	bd80      	pop	{r7, pc}

08103722 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8103722:	b5b0      	push	{r4, r5, r7, lr}
 8103724:	b086      	sub	sp, #24
 8103726:	af00      	add	r7, sp, #0
 8103728:	60f8      	str	r0, [r7, #12]
 810372a:	60b9      	str	r1, [r7, #8]
 810372c:	607a      	str	r2, [r7, #4]
 810372e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8103730:	68bb      	ldr	r3, [r7, #8]
 8103732:	2b00      	cmp	r3, #0
 8103734:	d119      	bne.n	810376a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8103736:	68f8      	ldr	r0, [r7, #12]
 8103738:	f7ff fde0 	bl	81032fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810373c:	4602      	mov	r2, r0
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	4293      	cmp	r3, r2
 8103742:	d012      	beq.n	810376a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8103744:	68fc      	ldr	r4, [r7, #12]
 8103746:	6838      	ldr	r0, [r7, #0]
 8103748:	f7ff ffd8 	bl	81036fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810374c:	4603      	mov	r3, r0
 810374e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8103750:	6878      	ldr	r0, [r7, #4]
 8103752:	f7ff fe12 	bl	810337a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8103756:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8103758:	681b      	ldr	r3, [r3, #0]
 810375a:	461a      	mov	r2, r3
 810375c:	4629      	mov	r1, r5
 810375e:	4620      	mov	r0, r4
 8103760:	f7ff fa6c 	bl	8102c3c <_ZNKSt4lessIP20__UART_HandleTypeDefEclES1_S1_>
 8103764:	4603      	mov	r3, r0
 8103766:	2b00      	cmp	r3, #0
 8103768:	d001      	beq.n	810376e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 810376a:	2301      	movs	r3, #1
 810376c:	e000      	b.n	8103770 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 810376e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8103770:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8103772:	68fb      	ldr	r3, [r7, #12]
 8103774:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8103776:	7df8      	ldrb	r0, [r7, #23]
 8103778:	687a      	ldr	r2, [r7, #4]
 810377a:	6839      	ldr	r1, [r7, #0]
 810377c:	f00a fa8d 	bl	810dc9a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8103780:	68fb      	ldr	r3, [r7, #12]
 8103782:	695b      	ldr	r3, [r3, #20]
 8103784:	1c5a      	adds	r2, r3, #1
 8103786:	68fb      	ldr	r3, [r7, #12]
 8103788:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 810378a:	f107 0310 	add.w	r3, r7, #16
 810378e:	6839      	ldr	r1, [r7, #0]
 8103790:	4618      	mov	r0, r3
 8103792:	f7ff fda4 	bl	81032de <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
 8103796:	693b      	ldr	r3, [r7, #16]
    }
 8103798:	4618      	mov	r0, r3
 810379a:	3718      	adds	r7, #24
 810379c:	46bd      	mov	sp, r7
 810379e:	bdb0      	pop	{r4, r5, r7, pc}

081037a0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE7_M_addrEv>:
      _M_addr() noexcept
 81037a0:	b480      	push	{r7}
 81037a2:	b083      	sub	sp, #12
 81037a4:	af00      	add	r7, sp, #0
 81037a6:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 81037a8:	687b      	ldr	r3, [r7, #4]
 81037aa:	4618      	mov	r0, r3
 81037ac:	370c      	adds	r7, #12
 81037ae:	46bd      	mov	sp, r7
 81037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037b4:	4770      	bx	lr

081037b6 <_ZNSt5dequeIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 81037b6:	b580      	push	{r7, lr}
 81037b8:	b088      	sub	sp, #32
 81037ba:	af00      	add	r7, sp, #0
 81037bc:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 81037be:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 81037c2:	613b      	str	r3, [r7, #16]
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	61fb      	str	r3, [r7, #28]
 81037c8:	69fb      	ldr	r3, [r7, #28]
 81037ca:	61bb      	str	r3, [r7, #24]
 81037cc:	69bb      	ldr	r3, [r7, #24]
 81037ce:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 81037d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
      { return _M_max_size(); }
 81037d4:	bf00      	nop
	return __a.max_size();
 81037d6:	bf00      	nop
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 81037d8:	60fb      	str	r3, [r7, #12]
	return (std::min)(__diffmax, __allocmax);
 81037da:	f107 020c 	add.w	r2, r7, #12
 81037de:	f107 0310 	add.w	r3, r7, #16
 81037e2:	4611      	mov	r1, r2
 81037e4:	4618      	mov	r0, r3
 81037e6:	f000 f96e 	bl	8103ac6 <_ZSt3minIjERKT_S2_S2_>
 81037ea:	4603      	mov	r3, r0
 81037ec:	681b      	ldr	r3, [r3, #0]
      }
 81037ee:	4618      	mov	r0, r3
 81037f0:	3720      	adds	r7, #32
 81037f2:	46bd      	mov	sp, r7
 81037f4:	bd80      	pop	{r7, pc}

081037f6 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 81037f6:	b590      	push	{r4, r7, lr}
 81037f8:	b08b      	sub	sp, #44	@ 0x2c
 81037fa:	af00      	add	r7, sp, #0
 81037fc:	60f8      	str	r0, [r7, #12]
 81037fe:	60b9      	str	r1, [r7, #8]
 8103800:	4613      	mov	r3, r2
 8103802:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8103804:	68fb      	ldr	r3, [r7, #12]
 8103806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8103808:	68fb      	ldr	r3, [r7, #12]
 810380a:	695b      	ldr	r3, [r3, #20]
 810380c:	1ad3      	subs	r3, r2, r3
 810380e:	109b      	asrs	r3, r3, #2
 8103810:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8103812:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8103814:	68bb      	ldr	r3, [r7, #8]
 8103816:	6a3a      	ldr	r2, [r7, #32]
 8103818:	4413      	add	r3, r2
 810381a:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 810381c:	68fb      	ldr	r3, [r7, #12]
 810381e:	685a      	ldr	r2, [r3, #4]
 8103820:	69fb      	ldr	r3, [r7, #28]
 8103822:	005b      	lsls	r3, r3, #1
 8103824:	429a      	cmp	r2, r3
 8103826:	d92d      	bls.n	8103884 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8103828:	68fb      	ldr	r3, [r7, #12]
 810382a:	681a      	ldr	r2, [r3, #0]
 810382c:	68fb      	ldr	r3, [r7, #12]
 810382e:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8103830:	69fb      	ldr	r3, [r7, #28]
 8103832:	1acb      	subs	r3, r1, r3
 8103834:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8103836:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8103838:	79fb      	ldrb	r3, [r7, #7]
 810383a:	2b00      	cmp	r3, #0
 810383c:	d002      	beq.n	8103844 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x4e>
 810383e:	68bb      	ldr	r3, [r7, #8]
 8103840:	009b      	lsls	r3, r3, #2
 8103842:	e000      	b.n	8103846 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x50>
 8103844:	2300      	movs	r3, #0
 8103846:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8103848:	4413      	add	r3, r2
 810384a:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 810384c:	68fb      	ldr	r3, [r7, #12]
 810384e:	695b      	ldr	r3, [r3, #20]
 8103850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8103852:	429a      	cmp	r2, r3
 8103854:	d209      	bcs.n	810386a <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8103856:	68fb      	ldr	r3, [r7, #12]
 8103858:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 810385a:	68fb      	ldr	r3, [r7, #12]
 810385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 810385e:	3304      	adds	r3, #4
 8103860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8103862:	4619      	mov	r1, r3
 8103864:	f000 f943 	bl	8103aee <_ZSt4copyIPPhS1_ET0_T_S3_S2_>
 8103868:	e048      	b.n	81038fc <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 810386a:	68fb      	ldr	r3, [r7, #12]
 810386c:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 810386e:	68fb      	ldr	r3, [r7, #12]
 8103870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8103872:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8103874:	6a3b      	ldr	r3, [r7, #32]
 8103876:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8103878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810387a:	4413      	add	r3, r2
 810387c:	461a      	mov	r2, r3
 810387e:	f000 f94e 	bl	8103b1e <_ZSt13copy_backwardIPPhS1_ET0_T_S3_S2_>
 8103882:	e03b      	b.n	81038fc <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8103884:	68fb      	ldr	r3, [r7, #12]
 8103886:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8103888:	68fb      	ldr	r3, [r7, #12]
 810388a:	3304      	adds	r3, #4
 810388c:	f107 0208 	add.w	r2, r7, #8
 8103890:	4611      	mov	r1, r2
 8103892:	4618      	mov	r0, r3
 8103894:	f7fd fb8f 	bl	8100fb6 <_ZSt3maxIjERKT_S2_S2_>
 8103898:	4603      	mov	r3, r0
 810389a:	681b      	ldr	r3, [r3, #0]
 810389c:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 810389e:	3302      	adds	r3, #2
 81038a0:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 81038a2:	68fb      	ldr	r3, [r7, #12]
 81038a4:	69b9      	ldr	r1, [r7, #24]
 81038a6:	4618      	mov	r0, r3
 81038a8:	f7fd fb99 	bl	8100fde <_ZNSt11_Deque_baseIhSaIhEE15_M_allocate_mapEj>
 81038ac:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 81038ae:	69ba      	ldr	r2, [r7, #24]
 81038b0:	69fb      	ldr	r3, [r7, #28]
 81038b2:	1ad3      	subs	r3, r2, r3
 81038b4:	085b      	lsrs	r3, r3, #1
 81038b6:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 81038b8:	79fb      	ldrb	r3, [r7, #7]
 81038ba:	2b00      	cmp	r3, #0
 81038bc:	d002      	beq.n	81038c4 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0xce>
 81038be:	68bb      	ldr	r3, [r7, #8]
 81038c0:	009b      	lsls	r3, r3, #2
 81038c2:	e000      	b.n	81038c6 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0xd0>
 81038c4:	2300      	movs	r3, #0
 81038c6:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 81038c8:	697a      	ldr	r2, [r7, #20]
 81038ca:	4413      	add	r3, r2
 81038cc:	627b      	str	r3, [r7, #36]	@ 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 81038ce:	68fb      	ldr	r3, [r7, #12]
 81038d0:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 81038d2:	68fb      	ldr	r3, [r7, #12]
 81038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 81038d6:	3304      	adds	r3, #4
 81038d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81038da:	4619      	mov	r1, r3
 81038dc:	f000 f907 	bl	8103aee <_ZSt4copyIPPhS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 81038e0:	68f8      	ldr	r0, [r7, #12]
 81038e2:	68fb      	ldr	r3, [r7, #12]
 81038e4:	6819      	ldr	r1, [r3, #0]
 81038e6:	68fb      	ldr	r3, [r7, #12]
 81038e8:	685b      	ldr	r3, [r3, #4]
 81038ea:	461a      	mov	r2, r3
 81038ec:	f7fe fa9c 	bl	8101e28 <_ZNSt11_Deque_baseIhSaIhEE17_M_deallocate_mapEPPhj>
	  this->_M_impl._M_map = __new_map;
 81038f0:	68fb      	ldr	r3, [r7, #12]
 81038f2:	697a      	ldr	r2, [r7, #20]
 81038f4:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 81038f6:	68fb      	ldr	r3, [r7, #12]
 81038f8:	69ba      	ldr	r2, [r7, #24]
 81038fa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 81038fc:	68fb      	ldr	r3, [r7, #12]
 81038fe:	3308      	adds	r3, #8
 8103900:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8103902:	4618      	mov	r0, r3
 8103904:	f7fd fba7 	bl	8101056 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8103908:	68fb      	ldr	r3, [r7, #12]
 810390a:	f103 0018 	add.w	r0, r3, #24
 810390e:	6a3b      	ldr	r3, [r7, #32]
 8103910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8103914:	3b01      	subs	r3, #1
 8103916:	009b      	lsls	r3, r3, #2
 8103918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810391a:	4413      	add	r3, r2
 810391c:	4619      	mov	r1, r3
 810391e:	f7fd fb9a 	bl	8101056 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
    }
 8103922:	bf00      	nop
 8103924:	372c      	adds	r7, #44	@ 0x2c
 8103926:	46bd      	mov	sp, r7
 8103928:	bd90      	pop	{r4, r7, pc}

0810392a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 810392a:	b480      	push	{r7}
 810392c:	b083      	sub	sp, #12
 810392e:	af00      	add	r7, sp, #0
 8103930:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	4618      	mov	r0, r3
 8103936:	370c      	adds	r7, #12
 8103938:	46bd      	mov	sp, r7
 810393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810393e:	4770      	bx	lr

08103940 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8103940:	b580      	push	{r7, lr}
 8103942:	b084      	sub	sp, #16
 8103944:	af00      	add	r7, sp, #0
 8103946:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8103948:	6878      	ldr	r0, [r7, #4]
 810394a:	f7ff ffee 	bl	810392a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810394e:	4603      	mov	r3, r0
 8103950:	60fb      	str	r3, [r7, #12]
 8103952:	2301      	movs	r3, #1
 8103954:	60bb      	str	r3, [r7, #8]
      { return __a.allocate(__n); }
 8103956:	2200      	movs	r2, #0
 8103958:	68b9      	ldr	r1, [r7, #8]
 810395a:	68f8      	ldr	r0, [r7, #12]
 810395c:	f000 f972 	bl	8103c44 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE8allocateEjPKv>
 8103960:	4603      	mov	r3, r0
 8103962:	bf00      	nop
 8103964:	4618      	mov	r0, r3
 8103966:	3710      	adds	r7, #16
 8103968:	46bd      	mov	sp, r7
 810396a:	bd80      	pop	{r7, pc}

0810396c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 810396c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8103970:	b093      	sub	sp, #76	@ 0x4c
 8103972:	af00      	add	r7, sp, #0
 8103974:	6178      	str	r0, [r7, #20]
 8103976:	6139      	str	r1, [r7, #16]
 8103978:	60fa      	str	r2, [r7, #12]
 810397a:	60bb      	str	r3, [r7, #8]
	      ::new(__node) _Rb_tree_node<_Val>;
 810397c:	693b      	ldr	r3, [r7, #16]
 810397e:	4619      	mov	r1, r3
 8103980:	2018      	movs	r0, #24
 8103982:	f7fe febe 	bl	8102702 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8103986:	6978      	ldr	r0, [r7, #20]
 8103988:	f7ff ffcf 	bl	810392a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810398c:	6078      	str	r0, [r7, #4]
 810398e:	6938      	ldr	r0, [r7, #16]
 8103990:	f7ff fa27 	bl	8102de2 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>
 8103994:	4606      	mov	r6, r0
 8103996:	68f8      	ldr	r0, [r7, #12]
 8103998:	f7ff faf2 	bl	8102f80 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810399c:	4605      	mov	r5, r0
 810399e:	68b8      	ldr	r0, [r7, #8]
 81039a0:	f7ff faf9 	bl	8102f96 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81039a4:	4604      	mov	r4, r0
 81039a6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 81039a8:	f7ff fb00 	bl	8102fac <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81039ac:	4603      	mov	r3, r0
 81039ae:	687a      	ldr	r2, [r7, #4]
 81039b0:	647a      	str	r2, [r7, #68]	@ 0x44
 81039b2:	643e      	str	r6, [r7, #64]	@ 0x40
 81039b4:	63fd      	str	r5, [r7, #60]	@ 0x3c
 81039b6:	63bc      	str	r4, [r7, #56]	@ 0x38
 81039b8:	637b      	str	r3, [r7, #52]	@ 0x34
	  __a.construct(__p, std::forward<_Args>(__args)...);
 81039ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 81039bc:	f7ff fae0 	bl	8102f80 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81039c0:	4605      	mov	r5, r0
 81039c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 81039c4:	f7ff fae7 	bl	8102f96 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81039c8:	4604      	mov	r4, r0
 81039ca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 81039cc:	f7ff faee 	bl	8102fac <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81039d0:	4602      	mov	r2, r0
 81039d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81039d4:	633b      	str	r3, [r7, #48]	@ 0x30
 81039d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81039d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81039da:	62bd      	str	r5, [r7, #40]	@ 0x28
 81039dc:	627c      	str	r4, [r7, #36]	@ 0x24
 81039de:	623a      	str	r2, [r7, #32]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 81039e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81039e2:	4619      	mov	r1, r3
 81039e4:	2008      	movs	r0, #8
 81039e6:	f7fe fe8c 	bl	8102702 <_ZnwjPv>
 81039ea:	4604      	mov	r4, r0
 81039ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81039ee:	f7ff fac7 	bl	8102f80 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81039f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81039f4:	f7ff facf 	bl	8102f96 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81039f8:	4602      	mov	r2, r0
 81039fa:	f107 031c 	add.w	r3, r7, #28
 81039fe:	4611      	mov	r1, r2
 8103a00:	4618      	mov	r0, r3
 8103a02:	f000 f94f 	bl	8103ca4 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1EOS4_>
 8103a06:	6a38      	ldr	r0, [r7, #32]
 8103a08:	f7ff fad0 	bl	8102fac <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103a0c:	f107 021c 	add.w	r2, r7, #28
 8103a10:	464b      	mov	r3, r9
 8103a12:	4641      	mov	r1, r8
 8103a14:	4620      	mov	r0, r4
 8103a16:	f000 f9a7 	bl	8103d68 <_ZNSt4pairIKP20__UART_HandleTypeDefP12UartEndpointEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8103a1a:	bf00      	nop
	}
 8103a1c:	bf00      	nop
	}
 8103a1e:	bf00      	nop
 8103a20:	374c      	adds	r7, #76	@ 0x4c
 8103a22:	46bd      	mov	sp, r7
 8103a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08103a28 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8103a28:	b580      	push	{r7, lr}
 8103a2a:	b084      	sub	sp, #16
 8103a2c:	af00      	add	r7, sp, #0
 8103a2e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	68da      	ldr	r2, [r3, #12]
 8103a34:	f107 030c 	add.w	r3, r7, #12
 8103a38:	4611      	mov	r1, r2
 8103a3a:	4618      	mov	r0, r3
 8103a3c:	f7ff fc4f 	bl	81032de <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEC1EPSt18_Rb_tree_node_base>
 8103a40:	68fb      	ldr	r3, [r7, #12]
 8103a42:	4618      	mov	r0, r3
 8103a44:	3710      	adds	r7, #16
 8103a46:	46bd      	mov	sp, r7
 8103a48:	bd80      	pop	{r7, pc}

08103a4a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP20__UART_HandleTypeDefP12UartEndpointEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8103a4a:	b580      	push	{r7, lr}
 8103a4c:	b084      	sub	sp, #16
 8103a4e:	af00      	add	r7, sp, #0
 8103a50:	60f8      	str	r0, [r7, #12]
 8103a52:	60b9      	str	r1, [r7, #8]
 8103a54:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8103a56:	68b8      	ldr	r0, [r7, #8]
 8103a58:	f000 f88c 	bl	8103b74 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEEOT_RNSt16remove_referenceISB_E4typeE>
 8103a5c:	4603      	mov	r3, r0
 8103a5e:	681a      	ldr	r2, [r3, #0]
 8103a60:	68fb      	ldr	r3, [r7, #12]
 8103a62:	601a      	str	r2, [r3, #0]
 8103a64:	6878      	ldr	r0, [r7, #4]
 8103a66:	f000 f809 	bl	8103a7c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8103a6a:	4603      	mov	r3, r0
 8103a6c:	681a      	ldr	r2, [r3, #0]
 8103a6e:	68fb      	ldr	r3, [r7, #12]
 8103a70:	605a      	str	r2, [r3, #4]
	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 8103a72:	68fb      	ldr	r3, [r7, #12]
 8103a74:	4618      	mov	r0, r3
 8103a76:	3710      	adds	r7, #16
 8103a78:	46bd      	mov	sp, r7
 8103a7a:	bd80      	pop	{r7, pc}

08103a7c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103a7c:	b480      	push	{r7}
 8103a7e:	b083      	sub	sp, #12
 8103a80:	af00      	add	r7, sp, #0
 8103a82:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	4618      	mov	r0, r3
 8103a88:	370c      	adds	r7, #12
 8103a8a:	46bd      	mov	sp, r7
 8103a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a90:	4770      	bx	lr

08103a92 <_ZNKSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE9_M_valptrEv>:
      _M_valptr() const
 8103a92:	b580      	push	{r7, lr}
 8103a94:	b082      	sub	sp, #8
 8103a96:	af00      	add	r7, sp, #0
 8103a98:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	3310      	adds	r3, #16
 8103a9e:	4618      	mov	r0, r3
 8103aa0:	f000 f873 	bl	8103b8a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE6_M_ptrEv>
 8103aa4:	4603      	mov	r3, r0
 8103aa6:	4618      	mov	r0, r3
 8103aa8:	3708      	adds	r7, #8
 8103aaa:	46bd      	mov	sp, r7
 8103aac:	bd80      	pop	{r7, pc}

08103aae <_ZNKSt10_Select1stISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8103aae:	b480      	push	{r7}
 8103ab0:	b083      	sub	sp, #12
 8103ab2:	af00      	add	r7, sp, #0
 8103ab4:	6078      	str	r0, [r7, #4]
 8103ab6:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8103ab8:	683b      	ldr	r3, [r7, #0]
 8103aba:	4618      	mov	r0, r3
 8103abc:	370c      	adds	r7, #12
 8103abe:	46bd      	mov	sp, r7
 8103ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ac4:	4770      	bx	lr

08103ac6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8103ac6:	b480      	push	{r7}
 8103ac8:	b083      	sub	sp, #12
 8103aca:	af00      	add	r7, sp, #0
 8103acc:	6078      	str	r0, [r7, #4]
 8103ace:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8103ad0:	683b      	ldr	r3, [r7, #0]
 8103ad2:	681a      	ldr	r2, [r3, #0]
 8103ad4:	687b      	ldr	r3, [r7, #4]
 8103ad6:	681b      	ldr	r3, [r3, #0]
 8103ad8:	429a      	cmp	r2, r3
 8103ada:	d201      	bcs.n	8103ae0 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8103adc:	683b      	ldr	r3, [r7, #0]
 8103ade:	e000      	b.n	8103ae2 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8103ae0:	687b      	ldr	r3, [r7, #4]
    }
 8103ae2:	4618      	mov	r0, r3
 8103ae4:	370c      	adds	r7, #12
 8103ae6:	46bd      	mov	sp, r7
 8103ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103aec:	4770      	bx	lr

08103aee <_ZSt4copyIPPhS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8103aee:	b590      	push	{r4, r7, lr}
 8103af0:	b085      	sub	sp, #20
 8103af2:	af00      	add	r7, sp, #0
 8103af4:	60f8      	str	r0, [r7, #12]
 8103af6:	60b9      	str	r1, [r7, #8]
 8103af8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8103afa:	68f8      	ldr	r0, [r7, #12]
 8103afc:	f000 f851 	bl	8103ba2 <_ZSt12__miter_baseIPPhET_S2_>
 8103b00:	4604      	mov	r4, r0
 8103b02:	68b8      	ldr	r0, [r7, #8]
 8103b04:	f000 f84d 	bl	8103ba2 <_ZSt12__miter_baseIPPhET_S2_>
 8103b08:	4603      	mov	r3, r0
 8103b0a:	687a      	ldr	r2, [r7, #4]
 8103b0c:	4619      	mov	r1, r3
 8103b0e:	4620      	mov	r0, r4
 8103b10:	f000 f852 	bl	8103bb8 <_ZSt13__copy_move_aILb0EPPhS1_ET1_T0_S3_S2_>
 8103b14:	4603      	mov	r3, r0
    }
 8103b16:	4618      	mov	r0, r3
 8103b18:	3714      	adds	r7, #20
 8103b1a:	46bd      	mov	sp, r7
 8103b1c:	bd90      	pop	{r4, r7, pc}

08103b1e <_ZSt13copy_backwardIPPhS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8103b1e:	b590      	push	{r4, r7, lr}
 8103b20:	b085      	sub	sp, #20
 8103b22:	af00      	add	r7, sp, #0
 8103b24:	60f8      	str	r0, [r7, #12]
 8103b26:	60b9      	str	r1, [r7, #8]
 8103b28:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_BI2,
	    typename iterator_traits<_BI1>::reference>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8103b2a:	68f8      	ldr	r0, [r7, #12]
 8103b2c:	f000 f839 	bl	8103ba2 <_ZSt12__miter_baseIPPhET_S2_>
 8103b30:	4604      	mov	r4, r0
 8103b32:	68b8      	ldr	r0, [r7, #8]
 8103b34:	f000 f835 	bl	8103ba2 <_ZSt12__miter_baseIPPhET_S2_>
 8103b38:	4603      	mov	r3, r0
 8103b3a:	687a      	ldr	r2, [r7, #4]
 8103b3c:	4619      	mov	r1, r3
 8103b3e:	4620      	mov	r0, r4
 8103b40:	f000 f85d 	bl	8103bfe <_ZSt22__copy_move_backward_aILb0EPPhS1_ET1_T0_S3_S2_>
 8103b44:	4603      	mov	r3, r0
    }
 8103b46:	4618      	mov	r0, r3
 8103b48:	3714      	adds	r7, #20
 8103b4a:	46bd      	mov	sp, r7
 8103b4c:	bd90      	pop	{r4, r7, pc}

08103b4e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8103b4e:	b580      	push	{r7, lr}
 8103b50:	b084      	sub	sp, #16
 8103b52:	af00      	add	r7, sp, #0
 8103b54:	60f8      	str	r0, [r7, #12]
 8103b56:	60b9      	str	r1, [r7, #8]
 8103b58:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8103b5a:	687a      	ldr	r2, [r7, #4]
 8103b5c:	4613      	mov	r3, r2
 8103b5e:	005b      	lsls	r3, r3, #1
 8103b60:	4413      	add	r3, r2
 8103b62:	00db      	lsls	r3, r3, #3
 8103b64:	4619      	mov	r1, r3
 8103b66:	68b8      	ldr	r0, [r7, #8]
 8103b68:	f00a f82a 	bl	810dbc0 <_ZdlPvj>
      }
 8103b6c:	bf00      	nop
 8103b6e:	3710      	adds	r7, #16
 8103b70:	46bd      	mov	sp, r7
 8103b72:	bd80      	pop	{r7, pc}

08103b74 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103b74:	b480      	push	{r7}
 8103b76:	b083      	sub	sp, #12
 8103b78:	af00      	add	r7, sp, #0
 8103b7a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103b7c:	687b      	ldr	r3, [r7, #4]
 8103b7e:	4618      	mov	r0, r3
 8103b80:	370c      	adds	r7, #12
 8103b82:	46bd      	mov	sp, r7
 8103b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b88:	4770      	bx	lr

08103b8a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8103b8a:	b580      	push	{r7, lr}
 8103b8c:	b082      	sub	sp, #8
 8103b8e:	af00      	add	r7, sp, #0
 8103b90:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8103b92:	6878      	ldr	r0, [r7, #4]
 8103b94:	f000 f896 	bl	8103cc4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE7_M_addrEv>
 8103b98:	4603      	mov	r3, r0
 8103b9a:	4618      	mov	r0, r3
 8103b9c:	3708      	adds	r7, #8
 8103b9e:	46bd      	mov	sp, r7
 8103ba0:	bd80      	pop	{r7, pc}

08103ba2 <_ZSt12__miter_baseIPPhET_S2_>:
    __miter_base(_Iterator __it)
 8103ba2:	b480      	push	{r7}
 8103ba4:	b083      	sub	sp, #12
 8103ba6:	af00      	add	r7, sp, #0
 8103ba8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8103baa:	687b      	ldr	r3, [r7, #4]
 8103bac:	4618      	mov	r0, r3
 8103bae:	370c      	adds	r7, #12
 8103bb0:	46bd      	mov	sp, r7
 8103bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bb6:	4770      	bx	lr

08103bb8 <_ZSt13__copy_move_aILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8103bb8:	b5b0      	push	{r4, r5, r7, lr}
 8103bba:	b084      	sub	sp, #16
 8103bbc:	af00      	add	r7, sp, #0
 8103bbe:	60f8      	str	r0, [r7, #12]
 8103bc0:	60b9      	str	r1, [r7, #8]
 8103bc2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8103bc4:	68f8      	ldr	r0, [r7, #12]
 8103bc6:	f000 f888 	bl	8103cda <_ZSt12__niter_baseIPPhET_S2_>
 8103bca:	4604      	mov	r4, r0
 8103bcc:	68b8      	ldr	r0, [r7, #8]
 8103bce:	f000 f884 	bl	8103cda <_ZSt12__niter_baseIPPhET_S2_>
 8103bd2:	4605      	mov	r5, r0
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	4618      	mov	r0, r3
 8103bd8:	f000 f87f 	bl	8103cda <_ZSt12__niter_baseIPPhET_S2_>
 8103bdc:	4603      	mov	r3, r0
 8103bde:	461a      	mov	r2, r3
 8103be0:	4629      	mov	r1, r5
 8103be2:	4620      	mov	r0, r4
 8103be4:	f000 f884 	bl	8103cf0 <_ZSt14__copy_move_a1ILb0EPPhS1_ET1_T0_S3_S2_>
 8103be8:	4602      	mov	r2, r0
 8103bea:	1d3b      	adds	r3, r7, #4
 8103bec:	4611      	mov	r1, r2
 8103bee:	4618      	mov	r0, r3
 8103bf0:	f000 f88e 	bl	8103d10 <_ZSt12__niter_wrapIPPhET_RKS2_S2_>
 8103bf4:	4603      	mov	r3, r0
    }
 8103bf6:	4618      	mov	r0, r3
 8103bf8:	3710      	adds	r7, #16
 8103bfa:	46bd      	mov	sp, r7
 8103bfc:	bdb0      	pop	{r4, r5, r7, pc}

08103bfe <_ZSt22__copy_move_backward_aILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8103bfe:	b5b0      	push	{r4, r5, r7, lr}
 8103c00:	b084      	sub	sp, #16
 8103c02:	af00      	add	r7, sp, #0
 8103c04:	60f8      	str	r0, [r7, #12]
 8103c06:	60b9      	str	r1, [r7, #8]
 8103c08:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8103c0a:	68f8      	ldr	r0, [r7, #12]
 8103c0c:	f000 f865 	bl	8103cda <_ZSt12__niter_baseIPPhET_S2_>
 8103c10:	4604      	mov	r4, r0
 8103c12:	68b8      	ldr	r0, [r7, #8]
 8103c14:	f000 f861 	bl	8103cda <_ZSt12__niter_baseIPPhET_S2_>
 8103c18:	4605      	mov	r5, r0
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	4618      	mov	r0, r3
 8103c1e:	f000 f85c 	bl	8103cda <_ZSt12__niter_baseIPPhET_S2_>
 8103c22:	4603      	mov	r3, r0
 8103c24:	461a      	mov	r2, r3
 8103c26:	4629      	mov	r1, r5
 8103c28:	4620      	mov	r0, r4
 8103c2a:	f000 f87d 	bl	8103d28 <_ZSt23__copy_move_backward_a1ILb0EPPhS1_ET1_T0_S3_S2_>
 8103c2e:	4602      	mov	r2, r0
 8103c30:	1d3b      	adds	r3, r7, #4
 8103c32:	4611      	mov	r1, r2
 8103c34:	4618      	mov	r0, r3
 8103c36:	f000 f86b 	bl	8103d10 <_ZSt12__niter_wrapIPPhET_RKS2_S2_>
 8103c3a:	4603      	mov	r3, r0
    }
 8103c3c:	4618      	mov	r0, r3
 8103c3e:	3710      	adds	r7, #16
 8103c40:	46bd      	mov	sp, r7
 8103c42:	bdb0      	pop	{r4, r5, r7, pc}

08103c44 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8103c44:	b580      	push	{r7, lr}
 8103c46:	b086      	sub	sp, #24
 8103c48:	af00      	add	r7, sp, #0
 8103c4a:	60f8      	str	r0, [r7, #12]
 8103c4c:	60b9      	str	r1, [r7, #8]
 8103c4e:	607a      	str	r2, [r7, #4]
 8103c50:	68fb      	ldr	r3, [r7, #12]
 8103c52:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8103c54:	4a11      	ldr	r2, [pc, #68]	@ (8103c9c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE8allocateEjPKv+0x58>)
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8103c56:	68bb      	ldr	r3, [r7, #8]
 8103c58:	4293      	cmp	r3, r2
 8103c5a:	bf8c      	ite	hi
 8103c5c:	2301      	movhi	r3, #1
 8103c5e:	2300      	movls	r3, #0
 8103c60:	b2db      	uxtb	r3, r3
 8103c62:	2b00      	cmp	r3, #0
 8103c64:	bf14      	ite	ne
 8103c66:	2301      	movne	r3, #1
 8103c68:	2300      	moveq	r3, #0
 8103c6a:	b2db      	uxtb	r3, r3
 8103c6c:	2b00      	cmp	r3, #0
 8103c6e:	d007      	beq.n	8103c80 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE8allocateEjPKv+0x3c>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8103c70:	68bb      	ldr	r3, [r7, #8]
 8103c72:	4a0b      	ldr	r2, [pc, #44]	@ (8103ca0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE8allocateEjPKv+0x5c>)
 8103c74:	4293      	cmp	r3, r2
 8103c76:	d901      	bls.n	8103c7c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEEE8allocateEjPKv+0x38>
	      std::__throw_bad_array_new_length();
 8103c78:	f00a f876 	bl	810dd68 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8103c7c:	f00a f871 	bl	810dd62 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8103c80:	68ba      	ldr	r2, [r7, #8]
 8103c82:	4613      	mov	r3, r2
 8103c84:	005b      	lsls	r3, r3, #1
 8103c86:	4413      	add	r3, r2
 8103c88:	00db      	lsls	r3, r3, #3
 8103c8a:	4618      	mov	r0, r3
 8103c8c:	f009 ff9a 	bl	810dbc4 <_Znwj>
 8103c90:	4603      	mov	r3, r0
      }
 8103c92:	4618      	mov	r0, r3
 8103c94:	3718      	adds	r7, #24
 8103c96:	46bd      	mov	sp, r7
 8103c98:	bd80      	pop	{r7, pc}
 8103c9a:	bf00      	nop
 8103c9c:	05555555 	.word	0x05555555
 8103ca0:	0aaaaaaa 	.word	0x0aaaaaaa

08103ca4 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8103ca4:	b580      	push	{r7, lr}
 8103ca6:	b082      	sub	sp, #8
 8103ca8:	af00      	add	r7, sp, #0
 8103caa:	6078      	str	r0, [r7, #4]
 8103cac:	6039      	str	r1, [r7, #0]
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	683a      	ldr	r2, [r7, #0]
 8103cb2:	4611      	mov	r1, r2
 8103cb4:	4618      	mov	r0, r3
 8103cb6:	f000 f847 	bl	8103d48 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1EOS4_>
 8103cba:	687b      	ldr	r3, [r7, #4]
 8103cbc:	4618      	mov	r0, r3
 8103cbe:	3708      	adds	r7, #8
 8103cc0:	46bd      	mov	sp, r7
 8103cc2:	bd80      	pop	{r7, pc}

08103cc4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefP12UartEndpointEE7_M_addrEv>:
      _M_addr() const noexcept
 8103cc4:	b480      	push	{r7}
 8103cc6:	b083      	sub	sp, #12
 8103cc8:	af00      	add	r7, sp, #0
 8103cca:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	4618      	mov	r0, r3
 8103cd0:	370c      	adds	r7, #12
 8103cd2:	46bd      	mov	sp, r7
 8103cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cd8:	4770      	bx	lr

08103cda <_ZSt12__niter_baseIPPhET_S2_>:
    __niter_base(_Iterator __it)
 8103cda:	b480      	push	{r7}
 8103cdc:	b083      	sub	sp, #12
 8103cde:	af00      	add	r7, sp, #0
 8103ce0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8103ce2:	687b      	ldr	r3, [r7, #4]
 8103ce4:	4618      	mov	r0, r3
 8103ce6:	370c      	adds	r7, #12
 8103ce8:	46bd      	mov	sp, r7
 8103cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cee:	4770      	bx	lr

08103cf0 <_ZSt14__copy_move_a1ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8103cf0:	b580      	push	{r7, lr}
 8103cf2:	b084      	sub	sp, #16
 8103cf4:	af00      	add	r7, sp, #0
 8103cf6:	60f8      	str	r0, [r7, #12]
 8103cf8:	60b9      	str	r1, [r7, #8]
 8103cfa:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8103cfc:	687a      	ldr	r2, [r7, #4]
 8103cfe:	68b9      	ldr	r1, [r7, #8]
 8103d00:	68f8      	ldr	r0, [r7, #12]
 8103d02:	f000 f845 	bl	8103d90 <_ZSt14__copy_move_a2ILb0EPPhS1_ET1_T0_S3_S2_>
 8103d06:	4603      	mov	r3, r0
 8103d08:	4618      	mov	r0, r3
 8103d0a:	3710      	adds	r7, #16
 8103d0c:	46bd      	mov	sp, r7
 8103d0e:	bd80      	pop	{r7, pc}

08103d10 <_ZSt12__niter_wrapIPPhET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8103d10:	b480      	push	{r7}
 8103d12:	b083      	sub	sp, #12
 8103d14:	af00      	add	r7, sp, #0
 8103d16:	6078      	str	r0, [r7, #4]
 8103d18:	6039      	str	r1, [r7, #0]
    { return __res; }
 8103d1a:	683b      	ldr	r3, [r7, #0]
 8103d1c:	4618      	mov	r0, r3
 8103d1e:	370c      	adds	r7, #12
 8103d20:	46bd      	mov	sp, r7
 8103d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d26:	4770      	bx	lr

08103d28 <_ZSt23__copy_move_backward_a1ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8103d28:	b580      	push	{r7, lr}
 8103d2a:	b084      	sub	sp, #16
 8103d2c:	af00      	add	r7, sp, #0
 8103d2e:	60f8      	str	r0, [r7, #12]
 8103d30:	60b9      	str	r1, [r7, #8]
 8103d32:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8103d34:	687a      	ldr	r2, [r7, #4]
 8103d36:	68b9      	ldr	r1, [r7, #8]
 8103d38:	68f8      	ldr	r0, [r7, #12]
 8103d3a:	f000 f839 	bl	8103db0 <_ZSt23__copy_move_backward_a2ILb0EPPhS1_ET1_T0_S3_S2_>
 8103d3e:	4603      	mov	r3, r0
 8103d40:	4618      	mov	r0, r3
 8103d42:	3710      	adds	r7, #16
 8103d44:	46bd      	mov	sp, r7
 8103d46:	bd80      	pop	{r7, pc}

08103d48 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8103d48:	b480      	push	{r7}
 8103d4a:	b083      	sub	sp, #12
 8103d4c:	af00      	add	r7, sp, #0
 8103d4e:	6078      	str	r0, [r7, #4]
 8103d50:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	683a      	ldr	r2, [r7, #0]
 8103d56:	6812      	ldr	r2, [r2, #0]
 8103d58:	601a      	str	r2, [r3, #0]
      { }
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	4618      	mov	r0, r3
 8103d5e:	370c      	adds	r7, #12
 8103d60:	46bd      	mov	sp, r7
 8103d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d66:	4770      	bx	lr

08103d68 <_ZNSt4pairIKP20__UART_HandleTypeDefP12UartEndpointEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 8103d68:	b5b0      	push	{r4, r5, r7, lr}
 8103d6a:	b086      	sub	sp, #24
 8103d6c:	af02      	add	r7, sp, #8
 8103d6e:	60f8      	str	r0, [r7, #12]
 8103d70:	7239      	strb	r1, [r7, #8]
 8103d72:	607a      	str	r2, [r7, #4]
 8103d74:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8103d76:	463a      	mov	r2, r7
 8103d78:	f88d 4000 	strb.w	r4, [sp]
 8103d7c:	462b      	mov	r3, r5
 8103d7e:	6879      	ldr	r1, [r7, #4]
 8103d80:	68f8      	ldr	r0, [r7, #12]
 8103d82:	f000 f825 	bl	8103dd0 <_ZNSt4pairIKP20__UART_HandleTypeDefP12UartEndpointEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8103d86:	68fb      	ldr	r3, [r7, #12]
 8103d88:	4618      	mov	r0, r3
 8103d8a:	3710      	adds	r7, #16
 8103d8c:	46bd      	mov	sp, r7
 8103d8e:	bdb0      	pop	{r4, r5, r7, pc}

08103d90 <_ZSt14__copy_move_a2ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8103d90:	b580      	push	{r7, lr}
 8103d92:	b084      	sub	sp, #16
 8103d94:	af00      	add	r7, sp, #0
 8103d96:	60f8      	str	r0, [r7, #12]
 8103d98:	60b9      	str	r1, [r7, #8]
 8103d9a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8103d9c:	687a      	ldr	r2, [r7, #4]
 8103d9e:	68b9      	ldr	r1, [r7, #8]
 8103da0:	68f8      	ldr	r0, [r7, #12]
 8103da2:	f000 f82f 	bl	8103e04 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhS3_EEPT0_PT_S7_S5_>
 8103da6:	4603      	mov	r3, r0
    }
 8103da8:	4618      	mov	r0, r3
 8103daa:	3710      	adds	r7, #16
 8103dac:	46bd      	mov	sp, r7
 8103dae:	bd80      	pop	{r7, pc}

08103db0 <_ZSt23__copy_move_backward_a2ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8103db0:	b580      	push	{r7, lr}
 8103db2:	b084      	sub	sp, #16
 8103db4:	af00      	add	r7, sp, #0
 8103db6:	60f8      	str	r0, [r7, #12]
 8103db8:	60b9      	str	r1, [r7, #8]
 8103dba:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8103dbc:	687a      	ldr	r2, [r7, #4]
 8103dbe:	68b9      	ldr	r1, [r7, #8]
 8103dc0:	68f8      	ldr	r0, [r7, #12]
 8103dc2:	f000 f849 	bl	8103e58 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EEPT0_PT_S7_S5_>
 8103dc6:	4603      	mov	r3, r0
    }
 8103dc8:	4618      	mov	r0, r3
 8103dca:	3710      	adds	r7, #16
 8103dcc:	46bd      	mov	sp, r7
 8103dce:	bd80      	pop	{r7, pc}

08103dd0 <_ZNSt4pairIKP20__UART_HandleTypeDefP12UartEndpointEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8103dd0:	b580      	push	{r7, lr}
 8103dd2:	b084      	sub	sp, #16
 8103dd4:	af00      	add	r7, sp, #0
 8103dd6:	60f8      	str	r0, [r7, #12]
 8103dd8:	60b9      	str	r1, [r7, #8]
 8103dda:	607a      	str	r2, [r7, #4]
 8103ddc:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8103dde:	68b8      	ldr	r0, [r7, #8]
 8103de0:	f000 f86b 	bl	8103eba <_ZSt3getILj0EJRKP20__UART_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8103de4:	4603      	mov	r3, r0
 8103de6:	4618      	mov	r0, r3
 8103de8:	f000 f874 	bl	8103ed4 <_ZSt7forwardIRKP20__UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8103dec:	4603      	mov	r3, r0
 8103dee:	681a      	ldr	r2, [r3, #0]
 8103df0:	68fb      	ldr	r3, [r7, #12]
 8103df2:	601a      	str	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8103df4:	68fb      	ldr	r3, [r7, #12]
 8103df6:	2200      	movs	r2, #0
 8103df8:	605a      	str	r2, [r3, #4]
      { }
 8103dfa:	68fb      	ldr	r3, [r7, #12]
 8103dfc:	4618      	mov	r0, r3
 8103dfe:	3710      	adds	r7, #16
 8103e00:	46bd      	mov	sp, r7
 8103e02:	bd80      	pop	{r7, pc}

08103e04 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhS3_EEPT0_PT_S7_S5_>:
	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
 8103e04:	b580      	push	{r7, lr}
 8103e06:	b086      	sub	sp, #24
 8103e08:	af00      	add	r7, sp, #0
 8103e0a:	60f8      	str	r0, [r7, #12]
 8103e0c:	60b9      	str	r1, [r7, #8]
 8103e0e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8103e10:	68ba      	ldr	r2, [r7, #8]
 8103e12:	68fb      	ldr	r3, [r7, #12]
 8103e14:	1ad3      	subs	r3, r2, r3
 8103e16:	109b      	asrs	r3, r3, #2
 8103e18:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 8103e1a:	697b      	ldr	r3, [r7, #20]
 8103e1c:	2b01      	cmp	r3, #1
 8103e1e:	bfcc      	ite	gt
 8103e20:	2301      	movgt	r3, #1
 8103e22:	2300      	movle	r3, #0
 8103e24:	b2db      	uxtb	r3, r3
 8103e26:	2b00      	cmp	r3, #0
 8103e28:	d007      	beq.n	8103e3a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhS3_EEPT0_PT_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8103e2a:	697b      	ldr	r3, [r7, #20]
 8103e2c:	009b      	lsls	r3, r3, #2
 8103e2e:	461a      	mov	r2, r3
 8103e30:	68f9      	ldr	r1, [r7, #12]
 8103e32:	6878      	ldr	r0, [r7, #4]
 8103e34:	f00a fa80 	bl	810e338 <memmove>
 8103e38:	e006      	b.n	8103e48 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhS3_EEPT0_PT_S7_S5_+0x44>
	  else if (_Num == 1)
 8103e3a:	697b      	ldr	r3, [r7, #20]
 8103e3c:	2b01      	cmp	r3, #1
 8103e3e:	d103      	bne.n	8103e48 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhS3_EEPT0_PT_S7_S5_+0x44>
	      __assign_one(__result, __first);
 8103e40:	68f9      	ldr	r1, [r7, #12]
 8103e42:	6878      	ldr	r0, [r7, #4]
 8103e44:	f000 f851 	bl	8103eea <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIPhS3_EEvPT_PT0_>
	  return __result + _Num;
 8103e48:	697b      	ldr	r3, [r7, #20]
 8103e4a:	009b      	lsls	r3, r3, #2
 8103e4c:	687a      	ldr	r2, [r7, #4]
 8103e4e:	4413      	add	r3, r2
	}
 8103e50:	4618      	mov	r0, r3
 8103e52:	3718      	adds	r7, #24
 8103e54:	46bd      	mov	sp, r7
 8103e56:	bd80      	pop	{r7, pc}

08103e58 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EEPT0_PT_S7_S5_>:
	__copy_move_b(_Tp* __first, _Tp* __last, _Up* __result)
 8103e58:	b580      	push	{r7, lr}
 8103e5a:	b086      	sub	sp, #24
 8103e5c:	af00      	add	r7, sp, #0
 8103e5e:	60f8      	str	r0, [r7, #12]
 8103e60:	60b9      	str	r1, [r7, #8]
 8103e62:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8103e64:	68ba      	ldr	r2, [r7, #8]
 8103e66:	68fb      	ldr	r3, [r7, #12]
 8103e68:	1ad3      	subs	r3, r2, r3
 8103e6a:	109b      	asrs	r3, r3, #2
 8103e6c:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 8103e6e:	697b      	ldr	r3, [r7, #20]
 8103e70:	2b01      	cmp	r3, #1
 8103e72:	bfcc      	ite	gt
 8103e74:	2301      	movgt	r3, #1
 8103e76:	2300      	movle	r3, #0
 8103e78:	b2db      	uxtb	r3, r3
 8103e7a:	2b00      	cmp	r3, #0
 8103e7c:	d00b      	beq.n	8103e96 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EEPT0_PT_S7_S5_+0x3e>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8103e7e:	697b      	ldr	r3, [r7, #20]
 8103e80:	009b      	lsls	r3, r3, #2
 8103e82:	425b      	negs	r3, r3
 8103e84:	687a      	ldr	r2, [r7, #4]
 8103e86:	18d0      	adds	r0, r2, r3
 8103e88:	697b      	ldr	r3, [r7, #20]
 8103e8a:	009b      	lsls	r3, r3, #2
 8103e8c:	461a      	mov	r2, r3
 8103e8e:	68f9      	ldr	r1, [r7, #12]
 8103e90:	f00a fa52 	bl	810e338 <memmove>
 8103e94:	e008      	b.n	8103ea8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EEPT0_PT_S7_S5_+0x50>
	  else if (_Num == 1)
 8103e96:	697b      	ldr	r3, [r7, #20]
 8103e98:	2b01      	cmp	r3, #1
 8103e9a:	d105      	bne.n	8103ea8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EEPT0_PT_S7_S5_+0x50>
	      __assign_one(__result - 1, __first);
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	3b04      	subs	r3, #4
 8103ea0:	68f9      	ldr	r1, [r7, #12]
 8103ea2:	4618      	mov	r0, r3
 8103ea4:	f000 f821 	bl	8103eea <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIPhS3_EEvPT_PT0_>
	  return __result - _Num;
 8103ea8:	697b      	ldr	r3, [r7, #20]
 8103eaa:	009b      	lsls	r3, r3, #2
 8103eac:	425b      	negs	r3, r3
 8103eae:	687a      	ldr	r2, [r7, #4]
 8103eb0:	4413      	add	r3, r2
	}
 8103eb2:	4618      	mov	r0, r3
 8103eb4:	3718      	adds	r7, #24
 8103eb6:	46bd      	mov	sp, r7
 8103eb8:	bd80      	pop	{r7, pc}

08103eba <_ZSt3getILj0EJRKP20__UART_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8103eba:	b580      	push	{r7, lr}
 8103ebc:	b082      	sub	sp, #8
 8103ebe:	af00      	add	r7, sp, #0
 8103ec0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	4618      	mov	r0, r3
 8103ec6:	f000 f81f 	bl	8103f08 <_ZSt12__get_helperILj0ERKP20__UART_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8103eca:	4603      	mov	r3, r0
 8103ecc:	4618      	mov	r0, r3
 8103ece:	3708      	adds	r7, #8
 8103ed0:	46bd      	mov	sp, r7
 8103ed2:	bd80      	pop	{r7, pc}

08103ed4 <_ZSt7forwardIRKP20__UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103ed4:	b480      	push	{r7}
 8103ed6:	b083      	sub	sp, #12
 8103ed8:	af00      	add	r7, sp, #0
 8103eda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103edc:	687b      	ldr	r3, [r7, #4]
 8103ede:	4618      	mov	r0, r3
 8103ee0:	370c      	adds	r7, #12
 8103ee2:	46bd      	mov	sp, r7
 8103ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ee8:	4770      	bx	lr

08103eea <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIPhS3_EEvPT_PT0_>:
	__assign_one(_Tp* __to, _Up* __from)
 8103eea:	b480      	push	{r7}
 8103eec:	b083      	sub	sp, #12
 8103eee:	af00      	add	r7, sp, #0
 8103ef0:	6078      	str	r0, [r7, #4]
 8103ef2:	6039      	str	r1, [r7, #0]
	{ *__to = *__from; }
 8103ef4:	683b      	ldr	r3, [r7, #0]
 8103ef6:	681a      	ldr	r2, [r3, #0]
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	601a      	str	r2, [r3, #0]
 8103efc:	bf00      	nop
 8103efe:	370c      	adds	r7, #12
 8103f00:	46bd      	mov	sp, r7
 8103f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f06:	4770      	bx	lr

08103f08 <_ZSt12__get_helperILj0ERKP20__UART_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8103f08:	b580      	push	{r7, lr}
 8103f0a:	b082      	sub	sp, #8
 8103f0c:	af00      	add	r7, sp, #0
 8103f0e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8103f10:	6878      	ldr	r0, [r7, #4]
 8103f12:	f000 f805 	bl	8103f20 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEE7_M_headERS4_>
 8103f16:	4603      	mov	r3, r0
 8103f18:	4618      	mov	r0, r3
 8103f1a:	3708      	adds	r7, #8
 8103f1c:	46bd      	mov	sp, r7
 8103f1e:	bd80      	pop	{r7, pc}

08103f20 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8103f20:	b580      	push	{r7, lr}
 8103f22:	b082      	sub	sp, #8
 8103f24:	af00      	add	r7, sp, #0
 8103f26:	6078      	str	r0, [r7, #4]
 8103f28:	687b      	ldr	r3, [r7, #4]
 8103f2a:	4618      	mov	r0, r3
 8103f2c:	f000 f805 	bl	8103f3a <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EE7_M_headERS4_>
 8103f30:	4603      	mov	r3, r0
 8103f32:	4618      	mov	r0, r3
 8103f34:	3708      	adds	r7, #8
 8103f36:	46bd      	mov	sp, r7
 8103f38:	bd80      	pop	{r7, pc}

08103f3a <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8103f3a:	b480      	push	{r7}
 8103f3c:	b083      	sub	sp, #12
 8103f3e:	af00      	add	r7, sp, #0
 8103f40:	6078      	str	r0, [r7, #4]
 8103f42:	687b      	ldr	r3, [r7, #4]
 8103f44:	681b      	ldr	r3, [r3, #0]
 8103f46:	4618      	mov	r0, r3
 8103f48:	370c      	adds	r7, #12
 8103f4a:	46bd      	mov	sp, r7
 8103f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f50:	4770      	bx	lr
	...

08103f54 <_Z41__static_initialization_and_destruction_0v>:
 8103f54:	b580      	push	{r7, lr}
 8103f56:	af00      	add	r7, sp, #0
std::map<UART_HandleTypeDef*, UartEndpoint*> UartEndpoint::instanceMap;
 8103f58:	4802      	ldr	r0, [pc, #8]	@ (8103f64 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8103f5a:	f7fe fc1e 	bl	810279a <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
}
 8103f5e:	bf00      	nop
 8103f60:	bd80      	pop	{r7, pc}
 8103f62:	bf00      	nop
 8103f64:	10000244 	.word	0x10000244

08103f68 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8103f68:	b580      	push	{r7, lr}
 8103f6a:	b082      	sub	sp, #8
 8103f6c:	af00      	add	r7, sp, #0
 8103f6e:	6078      	str	r0, [r7, #4]
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	4618      	mov	r0, r3
 8103f74:	f7fe fcf9 	bl	810296a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_P12UartEndpointESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	4618      	mov	r0, r3
 8103f7c:	3708      	adds	r7, #8
 8103f7e:	46bd      	mov	sp, r7
 8103f80:	bd80      	pop	{r7, pc}
	...

08103f84 <_Z41__static_initialization_and_destruction_1v>:
 8103f84:	b580      	push	{r7, lr}
 8103f86:	af00      	add	r7, sp, #0
std::map<UART_HandleTypeDef*, UartEndpoint*> UartEndpoint::instanceMap;
 8103f88:	4802      	ldr	r0, [pc, #8]	@ (8103f94 <_Z41__static_initialization_and_destruction_1v+0x10>)
 8103f8a:	f7ff ffed 	bl	8103f68 <_ZNSt3mapIP20__UART_HandleTypeDefP12UartEndpointSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
}
 8103f8e:	bf00      	nop
 8103f90:	bd80      	pop	{r7, pc}
 8103f92:	bf00      	nop
 8103f94:	10000244 	.word	0x10000244

08103f98 <_GLOBAL__sub_I__ZN12UartEndpoint11instanceMapE>:
 8103f98:	b580      	push	{r7, lr}
 8103f9a:	af00      	add	r7, sp, #0
 8103f9c:	f7ff ffda 	bl	8103f54 <_Z41__static_initialization_and_destruction_0v>
 8103fa0:	bd80      	pop	{r7, pc}

08103fa2 <_GLOBAL__sub_D__ZN12UartEndpoint11instanceMapE>:
 8103fa2:	b580      	push	{r7, lr}
 8103fa4:	af00      	add	r7, sp, #0
 8103fa6:	f7ff ffed 	bl	8103f84 <_Z41__static_initialization_and_destruction_1v>
 8103faa:	bd80      	pop	{r7, pc}

08103fac <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8103fac:	b480      	push	{r7}
 8103fae:	b083      	sub	sp, #12
 8103fb0:	af00      	add	r7, sp, #0
 8103fb2:	6078      	str	r0, [r7, #4]
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	4618      	mov	r0, r3
 8103fb8:	370c      	adds	r7, #12
 8103fba:	46bd      	mov	sp, r7
 8103fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fc0:	4770      	bx	lr

08103fc2 <_ZN4comm7MessageC1Ev>:

namespace comm {

	//extern uint8_t MY_ID;// = 0x00;

	Message::Message()
 8103fc2:	b580      	push	{r7, lr}
 8103fc4:	b084      	sub	sp, #16
 8103fc6:	af00      	add	r7, sp, #0
 8103fc8:	6078      	str	r0, [r7, #4]
	:
		m_Header(0),
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	2200      	movs	r2, #0
 8103fce:	701a      	strb	r2, [r3, #0]
		m_srcID(0),
 8103fd0:	687b      	ldr	r3, [r7, #4]
 8103fd2:	2200      	movs	r2, #0
 8103fd4:	705a      	strb	r2, [r3, #1]
		m_destID(0),
 8103fd6:	687b      	ldr	r3, [r7, #4]
 8103fd8:	2200      	movs	r2, #0
 8103fda:	709a      	strb	r2, [r3, #2]
		m_opCode(0),
 8103fdc:	687b      	ldr	r3, [r7, #4]
 8103fde:	2200      	movs	r2, #0
 8103fe0:	70da      	strb	r2, [r3, #3]
		m_addr(0),
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	2200      	movs	r2, #0
 8103fe6:	711a      	strb	r2, [r3, #4]
		m_length(0),
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	2200      	movs	r2, #0
 8103fec:	715a      	strb	r2, [r3, #5]
		m_payload(0),
 8103fee:	687b      	ldr	r3, [r7, #4]
 8103ff0:	f103 0008 	add.w	r0, r3, #8
 8103ff4:	f107 0308 	add.w	r3, r7, #8
 8103ff8:	60fb      	str	r3, [r7, #12]
 8103ffa:	f107 0308 	add.w	r3, r7, #8
 8103ffe:	461a      	mov	r2, r3
 8104000:	2100      	movs	r1, #0
 8104002:	f000 f810 	bl	8104026 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
 8104006:	f107 0308 	add.w	r3, r7, #8
 810400a:	4618      	mov	r0, r3
 810400c:	f7fd ff2d 	bl	8101e6a <_ZNSt15__new_allocatorIhED1Ev>
		m_dataCRC(0),
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	2200      	movs	r2, #0
 8104014:	751a      	strb	r2, [r3, #20]
		m_Footer(0)
 8104016:	687b      	ldr	r3, [r7, #4]
 8104018:	2200      	movs	r2, #0
 810401a:	755a      	strb	r2, [r3, #21]
	{}
 810401c:	687b      	ldr	r3, [r7, #4]
 810401e:	4618      	mov	r0, r3
 8104020:	3710      	adds	r7, #16
 8104022:	46bd      	mov	sp, r7
 8104024:	bd80      	pop	{r7, pc}

08104026 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>:
       *  This constructor fills the %vector with @a __n default
       *  constructed elements.
       */
      explicit
      _GLIBCXX20_CONSTEXPR
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8104026:	b590      	push	{r4, r7, lr}
 8104028:	b085      	sub	sp, #20
 810402a:	af00      	add	r7, sp, #0
 810402c:	60f8      	str	r0, [r7, #12]
 810402e:	60b9      	str	r1, [r7, #8]
 8104030:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8104032:	68fc      	ldr	r4, [r7, #12]
 8104034:	6879      	ldr	r1, [r7, #4]
 8104036:	68b8      	ldr	r0, [r7, #8]
 8104038:	f000 f810 	bl	810405c <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>
 810403c:	4603      	mov	r3, r0
 810403e:	687a      	ldr	r2, [r7, #4]
 8104040:	4619      	mov	r1, r3
 8104042:	4620      	mov	r0, r4
 8104044:	f000 f834 	bl	81040b0 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
      { _M_default_initialize(__n); }
 8104048:	68b9      	ldr	r1, [r7, #8]
 810404a:	68f8      	ldr	r0, [r7, #12]
 810404c:	f000 f844 	bl	81040d8 <_ZNSt6vectorIhSaIhEE21_M_default_initializeEj>
 8104050:	68fb      	ldr	r3, [r7, #12]
 8104052:	4618      	mov	r0, r3
 8104054:	3714      	adds	r7, #20
 8104056:	46bd      	mov	sp, r7
 8104058:	bd90      	pop	{r4, r7, pc}
	...

0810405c <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 810405c:	b590      	push	{r4, r7, lr}
 810405e:	b087      	sub	sp, #28
 8104060:	af00      	add	r7, sp, #0
 8104062:	6078      	str	r0, [r7, #4]
 8104064:	6039      	str	r1, [r7, #0]
 8104066:	683b      	ldr	r3, [r7, #0]
 8104068:	617b      	str	r3, [r7, #20]
 810406a:	f107 0308 	add.w	r3, r7, #8
 810406e:	613b      	str	r3, [r7, #16]
 8104070:	697b      	ldr	r3, [r7, #20]
 8104072:	60fb      	str	r3, [r7, #12]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8104074:	f107 0308 	add.w	r3, r7, #8
 8104078:	4618      	mov	r0, r3
 810407a:	f000 f850 	bl	810411e <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 810407e:	4602      	mov	r2, r0
 8104080:	687b      	ldr	r3, [r7, #4]
 8104082:	4293      	cmp	r3, r2
 8104084:	bf8c      	ite	hi
 8104086:	2301      	movhi	r3, #1
 8104088:	2300      	movls	r3, #0
 810408a:	b2dc      	uxtb	r4, r3
 810408c:	f107 0308 	add.w	r3, r7, #8
 8104090:	4618      	mov	r0, r3
 8104092:	f7fd feea 	bl	8101e6a <_ZNSt15__new_allocatorIhED1Ev>
 8104096:	2c00      	cmp	r4, #0
 8104098:	d002      	beq.n	81040a0 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x44>
	  __throw_length_error(
 810409a:	4804      	ldr	r0, [pc, #16]	@ (81040ac <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x50>)
 810409c:	f009 fe67 	bl	810dd6e <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 81040a0:	687b      	ldr	r3, [r7, #4]
      }
 81040a2:	4618      	mov	r0, r3
 81040a4:	371c      	adds	r7, #28
 81040a6:	46bd      	mov	sp, r7
 81040a8:	bd90      	pop	{r4, r7, pc}
 81040aa:	bf00      	nop
 81040ac:	0810f0b4 	.word	0x0810f0b4

081040b0 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 81040b0:	b580      	push	{r7, lr}
 81040b2:	b084      	sub	sp, #16
 81040b4:	af00      	add	r7, sp, #0
 81040b6:	60f8      	str	r0, [r7, #12]
 81040b8:	60b9      	str	r1, [r7, #8]
 81040ba:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 81040bc:	68fb      	ldr	r3, [r7, #12]
 81040be:	6879      	ldr	r1, [r7, #4]
 81040c0:	4618      	mov	r0, r3
 81040c2:	f000 f84c 	bl	810415e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 81040c6:	68b9      	ldr	r1, [r7, #8]
 81040c8:	68f8      	ldr	r0, [r7, #12]
 81040ca:	f000 f85e 	bl	810418a <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 81040ce:	68fb      	ldr	r3, [r7, #12]
 81040d0:	4618      	mov	r0, r3
 81040d2:	3710      	adds	r7, #16
 81040d4:	46bd      	mov	sp, r7
 81040d6:	bd80      	pop	{r7, pc}

081040d8 <_ZNSt6vectorIhSaIhEE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 81040d8:	b590      	push	{r4, r7, lr}
 81040da:	b083      	sub	sp, #12
 81040dc:	af00      	add	r7, sp, #0
 81040de:	6078      	str	r0, [r7, #4]
 81040e0:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	4618      	mov	r0, r3
 81040ea:	f000 f80d 	bl	8104108 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 81040ee:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 81040f0:	461a      	mov	r2, r3
 81040f2:	6839      	ldr	r1, [r7, #0]
 81040f4:	4620      	mov	r0, r4
 81040f6:	f000 f862 	bl	81041be <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 81040fa:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	605a      	str	r2, [r3, #4]
      }
 8104100:	bf00      	nop
 8104102:	370c      	adds	r7, #12
 8104104:	46bd      	mov	sp, r7
 8104106:	bd90      	pop	{r4, r7, pc}

08104108 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8104108:	b480      	push	{r7}
 810410a:	b083      	sub	sp, #12
 810410c:	af00      	add	r7, sp, #0
 810410e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	4618      	mov	r0, r3
 8104114:	370c      	adds	r7, #12
 8104116:	46bd      	mov	sp, r7
 8104118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810411c:	4770      	bx	lr

0810411e <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 810411e:	b580      	push	{r7, lr}
 8104120:	b088      	sub	sp, #32
 8104122:	af00      	add	r7, sp, #0
 8104124:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8104126:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 810412a:	613b      	str	r3, [r7, #16]
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	61fb      	str	r3, [r7, #28]
 8104130:	69fb      	ldr	r3, [r7, #28]
 8104132:	61bb      	str	r3, [r7, #24]
 8104134:	69bb      	ldr	r3, [r7, #24]
 8104136:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8104138:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
      { return _M_max_size(); }
 810413c:	bf00      	nop
	return __a.max_size();
 810413e:	bf00      	nop
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8104140:	60fb      	str	r3, [r7, #12]
	return (std::min)(__diffmax, __allocmax);
 8104142:	f107 020c 	add.w	r2, r7, #12
 8104146:	f107 0310 	add.w	r3, r7, #16
 810414a:	4611      	mov	r1, r2
 810414c:	4618      	mov	r0, r3
 810414e:	f7ff fcba 	bl	8103ac6 <_ZSt3minIjERKT_S2_S2_>
 8104152:	4603      	mov	r3, r0
 8104154:	681b      	ldr	r3, [r3, #0]
      }
 8104156:	4618      	mov	r0, r3
 8104158:	3720      	adds	r7, #32
 810415a:	46bd      	mov	sp, r7
 810415c:	bd80      	pop	{r7, pc}

0810415e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 810415e:	b580      	push	{r7, lr}
 8104160:	b086      	sub	sp, #24
 8104162:	af00      	add	r7, sp, #0
 8104164:	6078      	str	r0, [r7, #4]
 8104166:	6039      	str	r1, [r7, #0]
 8104168:	687b      	ldr	r3, [r7, #4]
 810416a:	617b      	str	r3, [r7, #20]
 810416c:	683b      	ldr	r3, [r7, #0]
 810416e:	613b      	str	r3, [r7, #16]
 8104170:	697b      	ldr	r3, [r7, #20]
 8104172:	60fb      	str	r3, [r7, #12]
 8104174:	693b      	ldr	r3, [r7, #16]
 8104176:	60bb      	str	r3, [r7, #8]
	: _Tp_alloc_type(__a)
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	4618      	mov	r0, r3
 810417c:	f000 f847 	bl	810420e <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8104180:	687b      	ldr	r3, [r7, #4]
 8104182:	4618      	mov	r0, r3
 8104184:	3718      	adds	r7, #24
 8104186:	46bd      	mov	sp, r7
 8104188:	bd80      	pop	{r7, pc}

0810418a <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 810418a:	b580      	push	{r7, lr}
 810418c:	b082      	sub	sp, #8
 810418e:	af00      	add	r7, sp, #0
 8104190:	6078      	str	r0, [r7, #4]
 8104192:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8104194:	6839      	ldr	r1, [r7, #0]
 8104196:	6878      	ldr	r0, [r7, #4]
 8104198:	f000 f820 	bl	81041dc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 810419c:	4602      	mov	r2, r0
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 81041a2:	687b      	ldr	r3, [r7, #4]
 81041a4:	681a      	ldr	r2, [r3, #0]
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	681a      	ldr	r2, [r3, #0]
 81041ae:	683b      	ldr	r3, [r7, #0]
 81041b0:	441a      	add	r2, r3
 81041b2:	687b      	ldr	r3, [r7, #4]
 81041b4:	609a      	str	r2, [r3, #8]
      }
 81041b6:	bf00      	nop
 81041b8:	3708      	adds	r7, #8
 81041ba:	46bd      	mov	sp, r7
 81041bc:	bd80      	pop	{r7, pc}

081041be <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
  // __uninitialized_default_n_a specialization for std::allocator,
  // which ignores the allocator and value-initializes the elements.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 81041be:	b580      	push	{r7, lr}
 81041c0:	b084      	sub	sp, #16
 81041c2:	af00      	add	r7, sp, #0
 81041c4:	60f8      	str	r0, [r7, #12]
 81041c6:	60b9      	str	r1, [r7, #8]
 81041c8:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 81041ca:	68b9      	ldr	r1, [r7, #8]
 81041cc:	68f8      	ldr	r0, [r7, #12]
 81041ce:	f000 f832 	bl	8104236 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 81041d2:	4603      	mov	r3, r0
 81041d4:	4618      	mov	r0, r3
 81041d6:	3710      	adds	r7, #16
 81041d8:	46bd      	mov	sp, r7
 81041da:	bd80      	pop	{r7, pc}

081041dc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 81041dc:	b580      	push	{r7, lr}
 81041de:	b084      	sub	sp, #16
 81041e0:	af00      	add	r7, sp, #0
 81041e2:	6078      	str	r0, [r7, #4]
 81041e4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 81041e6:	683b      	ldr	r3, [r7, #0]
 81041e8:	2b00      	cmp	r3, #0
 81041ea:	d00b      	beq.n	8104204 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x28>
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	60fb      	str	r3, [r7, #12]
 81041f0:	683b      	ldr	r3, [r7, #0]
 81041f2:	60bb      	str	r3, [r7, #8]
      { return __a.allocate(__n); }
 81041f4:	2200      	movs	r2, #0
 81041f6:	68b9      	ldr	r1, [r7, #8]
 81041f8:	68f8      	ldr	r0, [r7, #12]
 81041fa:	f7fc fff1 	bl	81011e0 <_ZNSt15__new_allocatorIhE8allocateEjPKv>
 81041fe:	4603      	mov	r3, r0
 8104200:	bf00      	nop
 8104202:	e000      	b.n	8104206 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x2a>
 8104204:	2300      	movs	r3, #0
      }
 8104206:	4618      	mov	r0, r3
 8104208:	3710      	adds	r7, #16
 810420a:	46bd      	mov	sp, r7
 810420c:	bd80      	pop	{r7, pc}

0810420e <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 810420e:	b480      	push	{r7}
 8104210:	b083      	sub	sp, #12
 8104212:	af00      	add	r7, sp, #0
 8104214:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	2200      	movs	r2, #0
 810421a:	601a      	str	r2, [r3, #0]
 810421c:	687b      	ldr	r3, [r7, #4]
 810421e:	2200      	movs	r2, #0
 8104220:	605a      	str	r2, [r3, #4]
 8104222:	687b      	ldr	r3, [r7, #4]
 8104224:	2200      	movs	r2, #0
 8104226:	609a      	str	r2, [r3, #8]
	{ }
 8104228:	687b      	ldr	r3, [r7, #4]
 810422a:	4618      	mov	r0, r3
 810422c:	370c      	adds	r7, #12
 810422e:	46bd      	mov	sp, r7
 8104230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104234:	4770      	bx	lr

08104236 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8104236:	b580      	push	{r7, lr}
 8104238:	b084      	sub	sp, #16
 810423a:	af00      	add	r7, sp, #0
 810423c:	6078      	str	r0, [r7, #4]
 810423e:	6039      	str	r1, [r7, #0]
      constexpr bool __can_fill
 8104240:	2301      	movs	r3, #1
 8104242:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8104244:	6839      	ldr	r1, [r7, #0]
 8104246:	6878      	ldr	r0, [r7, #4]
 8104248:	f000 f805 	bl	8104256 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 810424c:	4603      	mov	r3, r0
    }
 810424e:	4618      	mov	r0, r3
 8104250:	3710      	adds	r7, #16
 8104252:	46bd      	mov	sp, r7
 8104254:	bd80      	pop	{r7, pc}

08104256 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8104256:	b580      	push	{r7, lr}
 8104258:	b084      	sub	sp, #16
 810425a:	af00      	add	r7, sp, #0
 810425c:	6078      	str	r0, [r7, #4]
 810425e:	6039      	str	r1, [r7, #0]
	  if (__n > 0)
 8104260:	683b      	ldr	r3, [r7, #0]
 8104262:	2b00      	cmp	r3, #0
 8104264:	d011      	beq.n	810428a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_+0x34>
		= std::__addressof(*__first);
 8104266:	6878      	ldr	r0, [r7, #4]
 8104268:	f000 f814 	bl	8104294 <_ZSt11__addressofIhEPT_RS0_>
 810426c:	60f8      	str	r0, [r7, #12]
	      std::_Construct(__val);
 810426e:	68f8      	ldr	r0, [r7, #12]
 8104270:	f000 f81b 	bl	81042aa <_ZSt10_ConstructIhJEEvPT_DpOT0_>
	      ++__first;
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	3301      	adds	r3, #1
 8104278:	607b      	str	r3, [r7, #4]
	      __first = std::fill_n(__first, __n - 1, *__val);
 810427a:	683b      	ldr	r3, [r7, #0]
 810427c:	3b01      	subs	r3, #1
 810427e:	68fa      	ldr	r2, [r7, #12]
 8104280:	4619      	mov	r1, r3
 8104282:	6878      	ldr	r0, [r7, #4]
 8104284:	f000 f821 	bl	81042ca <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8104288:	6078      	str	r0, [r7, #4]
	  return __first;
 810428a:	687b      	ldr	r3, [r7, #4]
	}
 810428c:	4618      	mov	r0, r3
 810428e:	3710      	adds	r7, #16
 8104290:	46bd      	mov	sp, r7
 8104292:	bd80      	pop	{r7, pc}

08104294 <_ZSt11__addressofIhEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8104294:	b480      	push	{r7}
 8104296:	b083      	sub	sp, #12
 8104298:	af00      	add	r7, sp, #0
 810429a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 810429c:	687b      	ldr	r3, [r7, #4]
 810429e:	4618      	mov	r0, r3
 81042a0:	370c      	adds	r7, #12
 81042a2:	46bd      	mov	sp, r7
 81042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042a8:	4770      	bx	lr

081042aa <_ZSt10_ConstructIhJEEvPT_DpOT0_>:
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
 81042aa:	b580      	push	{r7, lr}
 81042ac:	b082      	sub	sp, #8
 81042ae:	af00      	add	r7, sp, #0
 81042b0:	6078      	str	r0, [r7, #4]
	  // Allow std::_Construct to be used in constant expressions.
	  std::construct_at(__p, std::forward<_Args>(__args)...);
	  return;
	}
#endif
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 81042b2:	687b      	ldr	r3, [r7, #4]
 81042b4:	4619      	mov	r1, r3
 81042b6:	2001      	movs	r0, #1
 81042b8:	f7fe fa23 	bl	8102702 <_ZnwjPv>
 81042bc:	4603      	mov	r3, r0
 81042be:	2200      	movs	r2, #0
 81042c0:	701a      	strb	r2, [r3, #0]
    }
 81042c2:	bf00      	nop
 81042c4:	3708      	adds	r7, #8
 81042c6:	46bd      	mov	sp, r7
 81042c8:	bd80      	pop	{r7, pc}

081042ca <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 81042ca:	b5b0      	push	{r4, r5, r7, lr}
 81042cc:	b084      	sub	sp, #16
 81042ce:	af00      	add	r7, sp, #0
 81042d0:	60f8      	str	r0, [r7, #12]
 81042d2:	60b9      	str	r1, [r7, #8]
 81042d4:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 81042d6:	68fc      	ldr	r4, [r7, #12]
 81042d8:	68b8      	ldr	r0, [r7, #8]
 81042da:	f7ff fe67 	bl	8103fac <_ZSt17__size_to_integerj>
 81042de:	4601      	mov	r1, r0
  template<typename _Iter>
    __attribute__((__always_inline__))
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
 81042e0:	bf00      	nop
 81042e2:	462b      	mov	r3, r5
 81042e4:	687a      	ldr	r2, [r7, #4]
 81042e6:	4620      	mov	r0, r4
 81042e8:	f000 f805 	bl	81042f6 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 81042ec:	4603      	mov	r3, r0
			       std::__iterator_category(__first));
    }
 81042ee:	4618      	mov	r0, r3
 81042f0:	3710      	adds	r7, #16
 81042f2:	46bd      	mov	sp, r7
 81042f4:	bdb0      	pop	{r4, r5, r7, pc}

081042f6 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 81042f6:	b580      	push	{r7, lr}
 81042f8:	b084      	sub	sp, #16
 81042fa:	af00      	add	r7, sp, #0
 81042fc:	60f8      	str	r0, [r7, #12]
 81042fe:	60b9      	str	r1, [r7, #8]
 8104300:	607a      	str	r2, [r7, #4]
 8104302:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8104304:	68bb      	ldr	r3, [r7, #8]
 8104306:	2b00      	cmp	r3, #0
 8104308:	d101      	bne.n	810430e <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 810430a:	68fb      	ldr	r3, [r7, #12]
 810430c:	e00a      	b.n	8104324 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 810430e:	68fa      	ldr	r2, [r7, #12]
 8104310:	68bb      	ldr	r3, [r7, #8]
 8104312:	4413      	add	r3, r2
 8104314:	687a      	ldr	r2, [r7, #4]
 8104316:	4619      	mov	r1, r3
 8104318:	68f8      	ldr	r0, [r7, #12]
 810431a:	f000 f807 	bl	810432c <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 810431e:	68fa      	ldr	r2, [r7, #12]
 8104320:	68bb      	ldr	r3, [r7, #8]
 8104322:	4413      	add	r3, r2
    }
 8104324:	4618      	mov	r0, r3
 8104326:	3710      	adds	r7, #16
 8104328:	46bd      	mov	sp, r7
 810432a:	bd80      	pop	{r7, pc}

0810432c <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 810432c:	b580      	push	{r7, lr}
 810432e:	b084      	sub	sp, #16
 8104330:	af00      	add	r7, sp, #0
 8104332:	60f8      	str	r0, [r7, #12]
 8104334:	60b9      	str	r1, [r7, #8]
 8104336:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8104338:	687a      	ldr	r2, [r7, #4]
 810433a:	68b9      	ldr	r1, [r7, #8]
 810433c:	68f8      	ldr	r0, [r7, #12]
 810433e:	f000 f804 	bl	810434a <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8104342:	bf00      	nop
 8104344:	3710      	adds	r7, #16
 8104346:	46bd      	mov	sp, r7
 8104348:	bd80      	pop	{r7, pc}

0810434a <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 810434a:	b580      	push	{r7, lr}
 810434c:	b086      	sub	sp, #24
 810434e:	af00      	add	r7, sp, #0
 8104350:	60f8      	str	r0, [r7, #12]
 8104352:	60b9      	str	r1, [r7, #8]
 8104354:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	781b      	ldrb	r3, [r3, #0]
 810435a:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 810435c:	68ba      	ldr	r2, [r7, #8]
 810435e:	68fb      	ldr	r3, [r7, #12]
 8104360:	1ad3      	subs	r3, r2, r3
 8104362:	613b      	str	r3, [r7, #16]
 8104364:	693b      	ldr	r3, [r7, #16]
 8104366:	2b00      	cmp	r3, #0
 8104368:	d005      	beq.n	8104376 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 810436a:	7dfb      	ldrb	r3, [r7, #23]
 810436c:	693a      	ldr	r2, [r7, #16]
 810436e:	4619      	mov	r1, r3
 8104370:	68f8      	ldr	r0, [r7, #12]
 8104372:	f009 fffb 	bl	810e36c <memset>
    }
 8104376:	bf00      	nop
 8104378:	3718      	adds	r7, #24
 810437a:	46bd      	mov	sp, r7
 810437c:	bd80      	pop	{r7, pc}
	...

08104380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8104380:	b580      	push	{r7, lr}
 8104382:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8104384:	f000 fdee 	bl	8104f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Resource Manager Utility initialisation ---------------------------------*/
  MX_RESMGR_UTILITY_Init();
 8104388:	f000 fa2c 	bl	81047e4 <MX_RESMGR_UTILITY_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810438c:	f000 f984 	bl	8104698 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8104390:	f000 f87a 	bl	8104488 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8104394:	f000 f928 	bl	81045e8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8104398:	f000 f8ce 	bl	8104538 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 810439c:	f000 f814 	bl	81043c8 <MX_SPI2_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 81043a0:	f006 fcc8 	bl	810ad34 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81043a4:	4a05      	ldr	r2, [pc, #20]	@ (81043bc <main+0x3c>)
 81043a6:	2100      	movs	r1, #0
 81043a8:	4805      	ldr	r0, [pc, #20]	@ (81043c0 <main+0x40>)
 81043aa:	f006 fd0d 	bl	810adc8 <osThreadNew>
 81043ae:	4603      	mov	r3, r0
 81043b0:	4a04      	ldr	r2, [pc, #16]	@ (81043c4 <main+0x44>)
 81043b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 81043b4:	f006 fce2 	bl	810ad7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81043b8:	bf00      	nop
 81043ba:	e7fd      	b.n	81043b8 <main+0x38>
 81043bc:	0810f1f4 	.word	0x0810f1f4
 81043c0:	08104799 	.word	0x08104799
 81043c4:	100004a0 	.word	0x100004a0

081043c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 81043c8:	b580      	push	{r7, lr}
 81043ca:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_SPI2, RESMGR_FLAGS_ACCESS_NORMAL | \
 81043cc:	2300      	movs	r3, #0
 81043ce:	2200      	movs	r2, #0
 81043d0:	2112      	movs	r1, #18
 81043d2:	200d      	movs	r0, #13
 81043d4:	f009 fae4 	bl	810d9a0 <ResMgr_Request>
 81043d8:	4603      	mov	r3, r0
 81043da:	2b00      	cmp	r3, #0
 81043dc:	d001      	beq.n	81043e2 <MX_SPI2_Init+0x1a>
                  RESMGR_FLAGS_CPU2 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_SPI2 */
    Error_Handler();
 81043de:	f000 f9fb 	bl	81047d8 <Error_Handler>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 81043e2:	4b27      	ldr	r3, [pc, #156]	@ (8104480 <MX_SPI2_Init+0xb8>)
 81043e4:	4a27      	ldr	r2, [pc, #156]	@ (8104484 <MX_SPI2_Init+0xbc>)
 81043e6:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 81043e8:	4b25      	ldr	r3, [pc, #148]	@ (8104480 <MX_SPI2_Init+0xb8>)
 81043ea:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 81043ee:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 81043f0:	4b23      	ldr	r3, [pc, #140]	@ (8104480 <MX_SPI2_Init+0xb8>)
 81043f2:	2200      	movs	r2, #0
 81043f4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 81043f6:	4b22      	ldr	r3, [pc, #136]	@ (8104480 <MX_SPI2_Init+0xb8>)
 81043f8:	2203      	movs	r2, #3
 81043fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 81043fc:	4b20      	ldr	r3, [pc, #128]	@ (8104480 <MX_SPI2_Init+0xb8>)
 81043fe:	2200      	movs	r2, #0
 8104400:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8104402:	4b1f      	ldr	r3, [pc, #124]	@ (8104480 <MX_SPI2_Init+0xb8>)
 8104404:	2200      	movs	r2, #0
 8104406:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8104408:	4b1d      	ldr	r3, [pc, #116]	@ (8104480 <MX_SPI2_Init+0xb8>)
 810440a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 810440e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8104410:	4b1b      	ldr	r3, [pc, #108]	@ (8104480 <MX_SPI2_Init+0xb8>)
 8104412:	2200      	movs	r2, #0
 8104414:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8104416:	4b1a      	ldr	r3, [pc, #104]	@ (8104480 <MX_SPI2_Init+0xb8>)
 8104418:	2200      	movs	r2, #0
 810441a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 810441c:	4b18      	ldr	r3, [pc, #96]	@ (8104480 <MX_SPI2_Init+0xb8>)
 810441e:	2200      	movs	r2, #0
 8104420:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8104422:	4b17      	ldr	r3, [pc, #92]	@ (8104480 <MX_SPI2_Init+0xb8>)
 8104424:	2200      	movs	r2, #0
 8104426:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8104428:	4b15      	ldr	r3, [pc, #84]	@ (8104480 <MX_SPI2_Init+0xb8>)
 810442a:	2200      	movs	r2, #0
 810442c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810442e:	4b14      	ldr	r3, [pc, #80]	@ (8104480 <MX_SPI2_Init+0xb8>)
 8104430:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8104434:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8104436:	4b12      	ldr	r3, [pc, #72]	@ (8104480 <MX_SPI2_Init+0xb8>)
 8104438:	2200      	movs	r2, #0
 810443a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810443c:	4b10      	ldr	r3, [pc, #64]	@ (8104480 <MX_SPI2_Init+0xb8>)
 810443e:	2200      	movs	r2, #0
 8104440:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8104442:	4b0f      	ldr	r3, [pc, #60]	@ (8104480 <MX_SPI2_Init+0xb8>)
 8104444:	2200      	movs	r2, #0
 8104446:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8104448:	4b0d      	ldr	r3, [pc, #52]	@ (8104480 <MX_SPI2_Init+0xb8>)
 810444a:	2200      	movs	r2, #0
 810444c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810444e:	4b0c      	ldr	r3, [pc, #48]	@ (8104480 <MX_SPI2_Init+0xb8>)
 8104450:	2200      	movs	r2, #0
 8104452:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8104454:	4b0a      	ldr	r3, [pc, #40]	@ (8104480 <MX_SPI2_Init+0xb8>)
 8104456:	2200      	movs	r2, #0
 8104458:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810445a:	4b09      	ldr	r3, [pc, #36]	@ (8104480 <MX_SPI2_Init+0xb8>)
 810445c:	2200      	movs	r2, #0
 810445e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8104460:	4b07      	ldr	r3, [pc, #28]	@ (8104480 <MX_SPI2_Init+0xb8>)
 8104462:	2200      	movs	r2, #0
 8104464:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8104466:	4b06      	ldr	r3, [pc, #24]	@ (8104480 <MX_SPI2_Init+0xb8>)
 8104468:	2200      	movs	r2, #0
 810446a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 810446c:	4804      	ldr	r0, [pc, #16]	@ (8104480 <MX_SPI2_Init+0xb8>)
 810446e:	f003 fea3 	bl	81081b8 <HAL_SPI_Init>
 8104472:	4603      	mov	r3, r0
 8104474:	2b00      	cmp	r3, #0
 8104476:	d001      	beq.n	810447c <MX_SPI2_Init+0xb4>
  {
    Error_Handler();
 8104478:	f000 f9ae 	bl	81047d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 810447c:	bf00      	nop
 810447e:	bd80      	pop	{r7, pc}
 8104480:	1000025c 	.word	0x1000025c
 8104484:	40003800 	.word	0x40003800

08104488 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8104488:	b580      	push	{r7, lr}
 810448a:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_USART1, RESMGR_FLAGS_ACCESS_NORMAL | \
 810448c:	2300      	movs	r3, #0
 810448e:	2200      	movs	r2, #0
 8104490:	2112      	movs	r1, #18
 8104492:	200f      	movs	r0, #15
 8104494:	f009 fa84 	bl	810d9a0 <ResMgr_Request>
 8104498:	4603      	mov	r3, r0
 810449a:	2b00      	cmp	r3, #0
 810449c:	d001      	beq.n	81044a2 <MX_USART1_UART_Init+0x1a>
                  RESMGR_FLAGS_CPU2 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_USART1 */
    Error_Handler();
 810449e:	f000 f99b 	bl	81047d8 <Error_Handler>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 81044a2:	4b23      	ldr	r3, [pc, #140]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044a4:	4a23      	ldr	r2, [pc, #140]	@ (8104534 <MX_USART1_UART_Init+0xac>)
 81044a6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 81044a8:	4b21      	ldr	r3, [pc, #132]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044aa:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81044ae:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 81044b0:	4b1f      	ldr	r3, [pc, #124]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044b2:	2200      	movs	r2, #0
 81044b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 81044b6:	4b1e      	ldr	r3, [pc, #120]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044b8:	2200      	movs	r2, #0
 81044ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 81044bc:	4b1c      	ldr	r3, [pc, #112]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044be:	2200      	movs	r2, #0
 81044c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 81044c2:	4b1b      	ldr	r3, [pc, #108]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044c4:	220c      	movs	r2, #12
 81044c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81044c8:	4b19      	ldr	r3, [pc, #100]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044ca:	2200      	movs	r2, #0
 81044cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 81044ce:	4b18      	ldr	r3, [pc, #96]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044d0:	2200      	movs	r2, #0
 81044d2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81044d4:	4b16      	ldr	r3, [pc, #88]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044d6:	2200      	movs	r2, #0
 81044d8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81044da:	4b15      	ldr	r3, [pc, #84]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044dc:	2200      	movs	r2, #0
 81044de:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81044e0:	4b13      	ldr	r3, [pc, #76]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044e2:	2200      	movs	r2, #0
 81044e4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 81044e6:	4812      	ldr	r0, [pc, #72]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044e8:	f003 ffa5 	bl	8108436 <HAL_UART_Init>
 81044ec:	4603      	mov	r3, r0
 81044ee:	2b00      	cmp	r3, #0
 81044f0:	d001      	beq.n	81044f6 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 81044f2:	f000 f971 	bl	81047d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81044f6:	2100      	movs	r1, #0
 81044f8:	480d      	ldr	r0, [pc, #52]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 81044fa:	f006 fb1c 	bl	810ab36 <HAL_UARTEx_SetTxFifoThreshold>
 81044fe:	4603      	mov	r3, r0
 8104500:	2b00      	cmp	r3, #0
 8104502:	d001      	beq.n	8104508 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8104504:	f000 f968 	bl	81047d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104508:	2100      	movs	r1, #0
 810450a:	4809      	ldr	r0, [pc, #36]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 810450c:	f006 fb51 	bl	810abb2 <HAL_UARTEx_SetRxFifoThreshold>
 8104510:	4603      	mov	r3, r0
 8104512:	2b00      	cmp	r3, #0
 8104514:	d001      	beq.n	810451a <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8104516:	f000 f95f 	bl	81047d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 810451a:	4805      	ldr	r0, [pc, #20]	@ (8104530 <MX_USART1_UART_Init+0xa8>)
 810451c:	f006 fad2 	bl	810aac4 <HAL_UARTEx_DisableFifoMode>
 8104520:	4603      	mov	r3, r0
 8104522:	2b00      	cmp	r3, #0
 8104524:	d001      	beq.n	810452a <MX_USART1_UART_Init+0xa2>
  {
    Error_Handler();
 8104526:	f000 f957 	bl	81047d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 810452a:	bf00      	nop
 810452c:	bd80      	pop	{r7, pc}
 810452e:	bf00      	nop
 8104530:	100002e4 	.word	0x100002e4
 8104534:	40011000 	.word	0x40011000

08104538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8104538:	b580      	push	{r7, lr}
 810453a:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_USART2, RESMGR_FLAGS_ACCESS_NORMAL | \
 810453c:	2300      	movs	r3, #0
 810453e:	2200      	movs	r2, #0
 8104540:	2112      	movs	r1, #18
 8104542:	2010      	movs	r0, #16
 8104544:	f009 fa2c 	bl	810d9a0 <ResMgr_Request>
 8104548:	4603      	mov	r3, r0
 810454a:	2b00      	cmp	r3, #0
 810454c:	d001      	beq.n	8104552 <MX_USART2_UART_Init+0x1a>
                  RESMGR_FLAGS_CPU2 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_USART2 */
    Error_Handler();
 810454e:	f000 f943 	bl	81047d8 <Error_Handler>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8104552:	4b23      	ldr	r3, [pc, #140]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 8104554:	4a23      	ldr	r2, [pc, #140]	@ (81045e4 <MX_USART2_UART_Init+0xac>)
 8104556:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8104558:	4b21      	ldr	r3, [pc, #132]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 810455a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 810455e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8104560:	4b1f      	ldr	r3, [pc, #124]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 8104562:	2200      	movs	r2, #0
 8104564:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8104566:	4b1e      	ldr	r3, [pc, #120]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 8104568:	2200      	movs	r2, #0
 810456a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 810456c:	4b1c      	ldr	r3, [pc, #112]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 810456e:	2200      	movs	r2, #0
 8104570:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8104572:	4b1b      	ldr	r3, [pc, #108]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 8104574:	220c      	movs	r2, #12
 8104576:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8104578:	4b19      	ldr	r3, [pc, #100]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 810457a:	2200      	movs	r2, #0
 810457c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 810457e:	4b18      	ldr	r3, [pc, #96]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 8104580:	2200      	movs	r2, #0
 8104582:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8104584:	4b16      	ldr	r3, [pc, #88]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 8104586:	2200      	movs	r2, #0
 8104588:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810458a:	4b15      	ldr	r3, [pc, #84]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 810458c:	2200      	movs	r2, #0
 810458e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8104590:	4b13      	ldr	r3, [pc, #76]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 8104592:	2200      	movs	r2, #0
 8104594:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8104596:	4812      	ldr	r0, [pc, #72]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 8104598:	f003 ff4d 	bl	8108436 <HAL_UART_Init>
 810459c:	4603      	mov	r3, r0
 810459e:	2b00      	cmp	r3, #0
 81045a0:	d001      	beq.n	81045a6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 81045a2:	f000 f919 	bl	81047d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81045a6:	2100      	movs	r1, #0
 81045a8:	480d      	ldr	r0, [pc, #52]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 81045aa:	f006 fac4 	bl	810ab36 <HAL_UARTEx_SetTxFifoThreshold>
 81045ae:	4603      	mov	r3, r0
 81045b0:	2b00      	cmp	r3, #0
 81045b2:	d001      	beq.n	81045b8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 81045b4:	f000 f910 	bl	81047d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81045b8:	2100      	movs	r1, #0
 81045ba:	4809      	ldr	r0, [pc, #36]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 81045bc:	f006 faf9 	bl	810abb2 <HAL_UARTEx_SetRxFifoThreshold>
 81045c0:	4603      	mov	r3, r0
 81045c2:	2b00      	cmp	r3, #0
 81045c4:	d001      	beq.n	81045ca <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 81045c6:	f000 f907 	bl	81047d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 81045ca:	4805      	ldr	r0, [pc, #20]	@ (81045e0 <MX_USART2_UART_Init+0xa8>)
 81045cc:	f006 fa7a 	bl	810aac4 <HAL_UARTEx_DisableFifoMode>
 81045d0:	4603      	mov	r3, r0
 81045d2:	2b00      	cmp	r3, #0
 81045d4:	d001      	beq.n	81045da <MX_USART2_UART_Init+0xa2>
  {
    Error_Handler();
 81045d6:	f000 f8ff 	bl	81047d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 81045da:	bf00      	nop
 81045dc:	bd80      	pop	{r7, pc}
 81045de:	bf00      	nop
 81045e0:	10000378 	.word	0x10000378
 81045e4:	40004400 	.word	0x40004400

081045e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 81045e8:	b580      	push	{r7, lr}
 81045ea:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_USART3, RESMGR_FLAGS_ACCESS_NORMAL | \
 81045ec:	2300      	movs	r3, #0
 81045ee:	2200      	movs	r2, #0
 81045f0:	2112      	movs	r1, #18
 81045f2:	2011      	movs	r0, #17
 81045f4:	f009 f9d4 	bl	810d9a0 <ResMgr_Request>
 81045f8:	4603      	mov	r3, r0
 81045fa:	2b00      	cmp	r3, #0
 81045fc:	d001      	beq.n	8104602 <MX_USART3_UART_Init+0x1a>
                  RESMGR_FLAGS_CPU2 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_USART3 */
    Error_Handler();
 81045fe:	f000 f8eb 	bl	81047d8 <Error_Handler>
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8104602:	4b23      	ldr	r3, [pc, #140]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 8104604:	4a23      	ldr	r2, [pc, #140]	@ (8104694 <MX_USART3_UART_Init+0xac>)
 8104606:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8104608:	4b21      	ldr	r3, [pc, #132]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 810460a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 810460e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8104610:	4b1f      	ldr	r3, [pc, #124]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 8104612:	2200      	movs	r2, #0
 8104614:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8104616:	4b1e      	ldr	r3, [pc, #120]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 8104618:	2200      	movs	r2, #0
 810461a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810461c:	4b1c      	ldr	r3, [pc, #112]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 810461e:	2200      	movs	r2, #0
 8104620:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8104622:	4b1b      	ldr	r3, [pc, #108]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 8104624:	220c      	movs	r2, #12
 8104626:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8104628:	4b19      	ldr	r3, [pc, #100]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 810462a:	2200      	movs	r2, #0
 810462c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 810462e:	4b18      	ldr	r3, [pc, #96]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 8104630:	2200      	movs	r2, #0
 8104632:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8104634:	4b16      	ldr	r3, [pc, #88]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 8104636:	2200      	movs	r2, #0
 8104638:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810463a:	4b15      	ldr	r3, [pc, #84]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 810463c:	2200      	movs	r2, #0
 810463e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8104640:	4b13      	ldr	r3, [pc, #76]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 8104642:	2200      	movs	r2, #0
 8104644:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8104646:	4812      	ldr	r0, [pc, #72]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 8104648:	f003 fef5 	bl	8108436 <HAL_UART_Init>
 810464c:	4603      	mov	r3, r0
 810464e:	2b00      	cmp	r3, #0
 8104650:	d001      	beq.n	8104656 <MX_USART3_UART_Init+0x6e>
  {
    Error_Handler();
 8104652:	f000 f8c1 	bl	81047d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104656:	2100      	movs	r1, #0
 8104658:	480d      	ldr	r0, [pc, #52]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 810465a:	f006 fa6c 	bl	810ab36 <HAL_UARTEx_SetTxFifoThreshold>
 810465e:	4603      	mov	r3, r0
 8104660:	2b00      	cmp	r3, #0
 8104662:	d001      	beq.n	8104668 <MX_USART3_UART_Init+0x80>
  {
    Error_Handler();
 8104664:	f000 f8b8 	bl	81047d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104668:	2100      	movs	r1, #0
 810466a:	4809      	ldr	r0, [pc, #36]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 810466c:	f006 faa1 	bl	810abb2 <HAL_UARTEx_SetRxFifoThreshold>
 8104670:	4603      	mov	r3, r0
 8104672:	2b00      	cmp	r3, #0
 8104674:	d001      	beq.n	810467a <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8104676:	f000 f8af 	bl	81047d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810467a:	4805      	ldr	r0, [pc, #20]	@ (8104690 <MX_USART3_UART_Init+0xa8>)
 810467c:	f006 fa22 	bl	810aac4 <HAL_UARTEx_DisableFifoMode>
 8104680:	4603      	mov	r3, r0
 8104682:	2b00      	cmp	r3, #0
 8104684:	d001      	beq.n	810468a <MX_USART3_UART_Init+0xa2>
  {
    Error_Handler();
 8104686:	f000 f8a7 	bl	81047d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 810468a:	bf00      	nop
 810468c:	bd80      	pop	{r7, pc}
 810468e:	bf00      	nop
 8104690:	1000040c 	.word	0x1000040c
 8104694:	40004800 	.word	0x40004800

08104698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8104698:	b580      	push	{r7, lr}
 810469a:	b08a      	sub	sp, #40	@ 0x28
 810469c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810469e:	f107 0314 	add.w	r3, r7, #20
 81046a2:	2200      	movs	r2, #0
 81046a4:	601a      	str	r2, [r3, #0]
 81046a6:	605a      	str	r2, [r3, #4]
 81046a8:	609a      	str	r2, [r3, #8]
 81046aa:	60da      	str	r2, [r3, #12]
 81046ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81046ae:	4b37      	ldr	r3, [pc, #220]	@ (810478c <MX_GPIO_Init+0xf4>)
 81046b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046b4:	4a35      	ldr	r2, [pc, #212]	@ (810478c <MX_GPIO_Init+0xf4>)
 81046b6:	f043 0301 	orr.w	r3, r3, #1
 81046ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81046be:	4b33      	ldr	r3, [pc, #204]	@ (810478c <MX_GPIO_Init+0xf4>)
 81046c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046c4:	f003 0301 	and.w	r3, r3, #1
 81046c8:	613b      	str	r3, [r7, #16]
 81046ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81046cc:	4b2f      	ldr	r3, [pc, #188]	@ (810478c <MX_GPIO_Init+0xf4>)
 81046ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046d2:	4a2e      	ldr	r2, [pc, #184]	@ (810478c <MX_GPIO_Init+0xf4>)
 81046d4:	f043 0302 	orr.w	r3, r3, #2
 81046d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81046dc:	4b2b      	ldr	r3, [pc, #172]	@ (810478c <MX_GPIO_Init+0xf4>)
 81046de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046e2:	f003 0302 	and.w	r3, r3, #2
 81046e6:	60fb      	str	r3, [r7, #12]
 81046e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81046ea:	4b28      	ldr	r3, [pc, #160]	@ (810478c <MX_GPIO_Init+0xf4>)
 81046ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046f0:	4a26      	ldr	r2, [pc, #152]	@ (810478c <MX_GPIO_Init+0xf4>)
 81046f2:	f043 0308 	orr.w	r3, r3, #8
 81046f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81046fa:	4b24      	ldr	r3, [pc, #144]	@ (810478c <MX_GPIO_Init+0xf4>)
 81046fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104700:	f003 0308 	and.w	r3, r3, #8
 8104704:	60bb      	str	r3, [r7, #8]
 8104706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8104708:	4b20      	ldr	r3, [pc, #128]	@ (810478c <MX_GPIO_Init+0xf4>)
 810470a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810470e:	4a1f      	ldr	r2, [pc, #124]	@ (810478c <MX_GPIO_Init+0xf4>)
 8104710:	f043 0304 	orr.w	r3, r3, #4
 8104714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104718:	4b1c      	ldr	r3, [pc, #112]	@ (810478c <MX_GPIO_Init+0xf4>)
 810471a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810471e:	f003 0304 	and.w	r3, r3, #4
 8104722:	607b      	str	r3, [r7, #4]
 8104724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8104726:	4b19      	ldr	r3, [pc, #100]	@ (810478c <MX_GPIO_Init+0xf4>)
 8104728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810472c:	4a17      	ldr	r2, [pc, #92]	@ (810478c <MX_GPIO_Init+0xf4>)
 810472e:	f043 0310 	orr.w	r3, r3, #16
 8104732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104736:	4b15      	ldr	r3, [pc, #84]	@ (810478c <MX_GPIO_Init+0xf4>)
 8104738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810473c:	f003 0310 	and.w	r3, r3, #16
 8104740:	603b      	str	r3, [r7, #0]
 8104742:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED2_GPIO_Port, USER_LED2_Pin, GPIO_PIN_RESET);
 8104744:	2200      	movs	r2, #0
 8104746:	2102      	movs	r1, #2
 8104748:	4811      	ldr	r0, [pc, #68]	@ (8104790 <MX_GPIO_Init+0xf8>)
 810474a:	f001 fccf 	bl	81060ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_FOCUS_NEAR_Pin BTN_FOCUS_FAR_Pin BTN_ZOOM_OUT_Pin BTN_ZOOM_IN_Pin */
  GPIO_InitStruct.Pin = BTN_FOCUS_NEAR_Pin|BTN_FOCUS_FAR_Pin|BTN_ZOOM_OUT_Pin|BTN_ZOOM_IN_Pin;
 810474e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8104752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8104754:	2300      	movs	r3, #0
 8104756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8104758:	2302      	movs	r3, #2
 810475a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810475c:	f107 0314 	add.w	r3, r7, #20
 8104760:	4619      	mov	r1, r3
 8104762:	480c      	ldr	r0, [pc, #48]	@ (8104794 <MX_GPIO_Init+0xfc>)
 8104764:	f001 fb12 	bl	8105d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED2_Pin;
 8104768:	2302      	movs	r3, #2
 810476a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810476c:	2301      	movs	r3, #1
 810476e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104770:	2300      	movs	r3, #0
 8104772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104774:	2300      	movs	r3, #0
 8104776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED2_GPIO_Port, &GPIO_InitStruct);
 8104778:	f107 0314 	add.w	r3, r7, #20
 810477c:	4619      	mov	r1, r3
 810477e:	4804      	ldr	r0, [pc, #16]	@ (8104790 <MX_GPIO_Init+0xf8>)
 8104780:	f001 fb04 	bl	8105d8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8104784:	bf00      	nop
 8104786:	3728      	adds	r7, #40	@ 0x28
 8104788:	46bd      	mov	sp, r7
 810478a:	bd80      	pop	{r7, pc}
 810478c:	58024400 	.word	0x58024400
 8104790:	58021000 	.word	0x58021000
 8104794:	58020800 	.word	0x58020800

08104798 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8104798:	b580      	push	{r7, lr}
 810479a:	b082      	sub	sp, #8
 810479c:	af00      	add	r7, sp, #0
 810479e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("Before App Free heap: %u bytes\n", xPortGetFreeHeapSize());
 81047a0:	f006 fd26 	bl	810b1f0 <xPortGetFreeHeapSize>
 81047a4:	4603      	mov	r3, r0
 81047a6:	4619      	mov	r1, r3
 81047a8:	4808      	ldr	r0, [pc, #32]	@ (81047cc <StartDefaultTask+0x34>)
 81047aa:	f009 fc75 	bl	810e098 <iprintf>

	  // ✅ Call the C++ application entry point

	  cpp_app_main();
 81047ae:	f000 f8ad 	bl	810490c <cpp_app_main>

		printf("Application ended");
 81047b2:	4807      	ldr	r0, [pc, #28]	@ (81047d0 <StartDefaultTask+0x38>)
 81047b4:	f009 fc70 	bl	810e098 <iprintf>
	//osThreadExit();

  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 81047b8:	2102      	movs	r1, #2
 81047ba:	4806      	ldr	r0, [pc, #24]	@ (81047d4 <StartDefaultTask+0x3c>)
 81047bc:	f001 fcaf 	bl	810611e <HAL_GPIO_TogglePin>
    osDelay(2000);
 81047c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 81047c4:	f006 fb92 	bl	810aeec <osDelay>
    HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 81047c8:	bf00      	nop
 81047ca:	e7f5      	b.n	81047b8 <StartDefaultTask+0x20>
 81047cc:	0810f0f4 	.word	0x0810f0f4
 81047d0:	0810f114 	.word	0x0810f114
 81047d4:	58021000 	.word	0x58021000

081047d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81047d8:	b480      	push	{r7}
 81047da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81047dc:	b672      	cpsid	i
}
 81047de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81047e0:	bf00      	nop
 81047e2:	e7fd      	b.n	81047e0 <Error_Handler+0x8>

081047e4 <MX_RESMGR_UTILITY_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* RESMGR_UTILITY init function */
void MX_RESMGR_UTILITY_Init(void)
{
 81047e4:	b580      	push	{r7, lr}
 81047e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  if (ResMgr_Init(MX_RESMGR_UTILITY_SendMsg, MX_RESMGR_UTILITY_Callback) != RESMGR_OK)
 81047e8:	4905      	ldr	r1, [pc, #20]	@ (8104800 <MX_RESMGR_UTILITY_Init+0x1c>)
 81047ea:	4806      	ldr	r0, [pc, #24]	@ (8104804 <MX_RESMGR_UTILITY_Init+0x20>)
 81047ec:	f009 f83a 	bl	810d864 <ResMgr_Init>
 81047f0:	4603      	mov	r3, r0
 81047f2:	2b00      	cmp	r3, #0
 81047f4:	d001      	beq.n	81047fa <MX_RESMGR_UTILITY_Init+0x16>
  {
    Error_Handler();
 81047f6:	f7ff ffef 	bl	81047d8 <Error_Handler>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 81047fa:	bf00      	nop
 81047fc:	bd80      	pop	{r7, pc}
 81047fe:	bf00      	nop
 8104800:	08104855 	.word	0x08104855
 8104804:	08104809 	.word	0x08104809

08104808 <MX_RESMGR_UTILITY_SendMsg>:

/* Resource Manager send message function */
__weak void MX_RESMGR_UTILITY_SendMsg(uint32_t id, uint32_t msg)
{
 8104808:	b480      	push	{r7}
 810480a:	b083      	sub	sp, #12
 810480c:	af00      	add	r7, sp, #0
 810480e:	6078      	str	r0, [r7, #4]
 8104810:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 4 */
    switch (msg)
 8104812:	683b      	ldr	r3, [r7, #0]
 8104814:	2b05      	cmp	r3, #5
 8104816:	d811      	bhi.n	810483c <MX_RESMGR_UTILITY_SendMsg+0x34>
 8104818:	683b      	ldr	r3, [r7, #0]
 810481a:	2b05      	cmp	r3, #5
 810481c:	d811      	bhi.n	8104842 <MX_RESMGR_UTILITY_SendMsg+0x3a>
 810481e:	a201      	add	r2, pc, #4	@ (adr r2, 8104824 <MX_RESMGR_UTILITY_SendMsg+0x1c>)
 8104820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104824:	08104843 	.word	0x08104843
 8104828:	08104843 	.word	0x08104843
 810482c:	08104843 	.word	0x08104843
 8104830:	08104843 	.word	0x08104843
 8104834:	08104843 	.word	0x08104843
 8104838:	08104843 	.word	0x08104843
 810483c:	683b      	ldr	r3, [r7, #0]
 810483e:	2bff      	cmp	r3, #255	@ 0xff
 8104840:	d001      	beq.n	8104846 <MX_RESMGR_UTILITY_SendMsg+0x3e>
        case RESMGR_MSG_REJECT:
            //User Code
            break;

        default:
            break;
 8104842:	bf00      	nop
 8104844:	e000      	b.n	8104848 <MX_RESMGR_UTILITY_SendMsg+0x40>
            break;
 8104846:	bf00      	nop
    }
      /* USER CODE END 4 */

    return;
 8104848:	bf00      	nop
}
 810484a:	370c      	adds	r7, #12
 810484c:	46bd      	mov	sp, r7
 810484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104852:	4770      	bx	lr

08104854 <MX_RESMGR_UTILITY_Callback>:

/* Resource Manager callback function */
__weak void MX_RESMGR_UTILITY_Callback(uint32_t id, uint32_t msg)
{
 8104854:	b480      	push	{r7}
 8104856:	b083      	sub	sp, #12
 8104858:	af00      	add	r7, sp, #0
 810485a:	6078      	str	r0, [r7, #4]
 810485c:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 5 */
    switch (msg)
 810485e:	683b      	ldr	r3, [r7, #0]
 8104860:	2b15      	cmp	r3, #21
 8104862:	d831      	bhi.n	81048c8 <MX_RESMGR_UTILITY_Callback+0x74>
 8104864:	683b      	ldr	r3, [r7, #0]
 8104866:	2b15      	cmp	r3, #21
 8104868:	d831      	bhi.n	81048ce <MX_RESMGR_UTILITY_Callback+0x7a>
 810486a:	a201      	add	r2, pc, #4	@ (adr r2, 8104870 <MX_RESMGR_UTILITY_Callback+0x1c>)
 810486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104870:	081048cf 	.word	0x081048cf
 8104874:	081048cf 	.word	0x081048cf
 8104878:	081048cf 	.word	0x081048cf
 810487c:	081048cf 	.word	0x081048cf
 8104880:	081048cf 	.word	0x081048cf
 8104884:	081048cf 	.word	0x081048cf
 8104888:	081048cf 	.word	0x081048cf
 810488c:	081048cf 	.word	0x081048cf
 8104890:	081048cf 	.word	0x081048cf
 8104894:	081048cf 	.word	0x081048cf
 8104898:	081048cf 	.word	0x081048cf
 810489c:	081048cf 	.word	0x081048cf
 81048a0:	081048cf 	.word	0x081048cf
 81048a4:	081048cf 	.word	0x081048cf
 81048a8:	081048cf 	.word	0x081048cf
 81048ac:	081048cf 	.word	0x081048cf
 81048b0:	081048cf 	.word	0x081048cf
 81048b4:	081048cf 	.word	0x081048cf
 81048b8:	081048cf 	.word	0x081048cf
 81048bc:	081048cf 	.word	0x081048cf
 81048c0:	081048cf 	.word	0x081048cf
 81048c4:	081048cf 	.word	0x081048cf
 81048c8:	683b      	ldr	r3, [r7, #0]
 81048ca:	2bff      	cmp	r3, #255	@ 0xff
 81048cc:	d001      	beq.n	81048d2 <MX_RESMGR_UTILITY_Callback+0x7e>
        case RESMGR_MSG_REJECTED:
            //User Code
            break;

        default:
            break;
 81048ce:	bf00      	nop
 81048d0:	e000      	b.n	81048d4 <MX_RESMGR_UTILITY_Callback+0x80>
            break;
 81048d2:	bf00      	nop
    }
      /* USER CODE END 5 */

    return;
 81048d4:	bf00      	nop
}
 81048d6:	370c      	adds	r7, #12
 81048d8:	46bd      	mov	sp, r7
 81048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048de:	4770      	bx	lr

081048e0 <_write>:

extern "C" void cpp_app_main(void);
extern "C" void MyTaskFunction(void *argument);  // Forward declaration

// Provide _write syscall for printf redirection
extern "C" int _write(int file, char *ptr, int len) {
 81048e0:	b580      	push	{r7, lr}
 81048e2:	b084      	sub	sp, #16
 81048e4:	af00      	add	r7, sp, #0
 81048e6:	60f8      	str	r0, [r7, #12]
 81048e8:	60b9      	str	r1, [r7, #8]
 81048ea:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	b29a      	uxth	r2, r3
 81048f0:	f04f 33ff 	mov.w	r3, #4294967295
 81048f4:	68b9      	ldr	r1, [r7, #8]
 81048f6:	4804      	ldr	r0, [pc, #16]	@ (8104908 <_write+0x28>)
 81048f8:	f003 fded 	bl	81084d6 <HAL_UART_Transmit>
    return len;
 81048fc:	687b      	ldr	r3, [r7, #4]
}
 81048fe:	4618      	mov	r0, r3
 8104900:	3710      	adds	r7, #16
 8104902:	46bd      	mov	sp, r7
 8104904:	bd80      	pop	{r7, pc}
 8104906:	bf00      	nop
 8104908:	1000040c 	.word	0x1000040c

0810490c <cpp_app_main>:



// 🚀 Application entry point called from StartDefaultTask
extern "C" void cpp_app_main(void)
{
 810490c:	b580      	push	{r7, lr}
 810490e:	b08a      	sub	sp, #40	@ 0x28
 8104910:	af00      	add	r7, sp, #0
    printf("🔧 cpp_app_main started\n");
 8104912:	4812      	ldr	r0, [pc, #72]	@ (810495c <cpp_app_main+0x50>)
 8104914:	f009 fc30 	bl	810e178 <puts>

    // Create a new task
    const osThreadAttr_t myTask_attributes = {
 8104918:	463b      	mov	r3, r7
 810491a:	2224      	movs	r2, #36	@ 0x24
 810491c:	2100      	movs	r1, #0
 810491e:	4618      	mov	r0, r3
 8104920:	f009 fd24 	bl	810e36c <memset>
 8104924:	4b0e      	ldr	r3, [pc, #56]	@ (8104960 <cpp_app_main+0x54>)
 8104926:	603b      	str	r3, [r7, #0]
 8104928:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810492c:	617b      	str	r3, [r7, #20]
 810492e:	2318      	movs	r3, #24
 8104930:	61bb      	str	r3, [r7, #24]
        .name = "myTask",
        .stack_size = 512 * 4,  // 2KB stack
        .priority = (osPriority_t) osPriorityNormal,
    };

    osThreadId_t myTaskHandle = osThreadNew(MyTaskFunction, nullptr, &myTask_attributes);
 8104932:	463b      	mov	r3, r7
 8104934:	461a      	mov	r2, r3
 8104936:	2100      	movs	r1, #0
 8104938:	480a      	ldr	r0, [pc, #40]	@ (8104964 <cpp_app_main+0x58>)
 810493a:	f006 fa45 	bl	810adc8 <osThreadNew>
 810493e:	6278      	str	r0, [r7, #36]	@ 0x24
    if (myTaskHandle == nullptr) {
 8104940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104942:	2b00      	cmp	r3, #0
 8104944:	d103      	bne.n	810494e <cpp_app_main+0x42>
        printf("❌ Failed to create MyTaskFunction\n");
 8104946:	4808      	ldr	r0, [pc, #32]	@ (8104968 <cpp_app_main+0x5c>)
 8104948:	f009 fc16 	bl	810e178 <puts>
        printf("✅ MyTaskFunction created successfully\n");
    }

    // You can return here — or sleep forever if this is the main task
    // osDelay(osWaitForever); // Optional if not returning
}
 810494c:	e002      	b.n	8104954 <cpp_app_main+0x48>
        printf("✅ MyTaskFunction created successfully\n");
 810494e:	4807      	ldr	r0, [pc, #28]	@ (810496c <cpp_app_main+0x60>)
 8104950:	f009 fc12 	bl	810e178 <puts>
}
 8104954:	bf00      	nop
 8104956:	3728      	adds	r7, #40	@ 0x28
 8104958:	46bd      	mov	sp, r7
 810495a:	bd80      	pop	{r7, pc}
 810495c:	0810f128 	.word	0x0810f128
 8104960:	0810f144 	.word	0x0810f144
 8104964:	08104971 	.word	0x08104971
 8104968:	0810f14c 	.word	0x0810f14c
 810496c:	0810f170 	.word	0x0810f170

08104970 <MyTaskFunction>:

extern  void MyTaskFunction(void *argument)
{
 8104970:	b590      	push	{r4, r7, lr}
 8104972:	b0e9      	sub	sp, #420	@ 0x1a4
 8104974:	af00      	add	r7, sp, #0
 8104976:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 810497a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 810497e:	6018      	str	r0, [r3, #0]


	DayCam* dayCam = new DayCam(&huart1);
 8104980:	f44f 7090 	mov.w	r0, #288	@ 0x120
 8104984:	f009 f91e 	bl	810dbc4 <_Znwj>
 8104988:	4603      	mov	r3, r0
 810498a:	461c      	mov	r4, r3
 810498c:	4912      	ldr	r1, [pc, #72]	@ (81049d8 <MyTaskFunction+0x68>)
 810498e:	4620      	mov	r0, r4
 8104990:	f7fc fc48 	bl	8101224 <_ZN6DayCamC1EP20__UART_HandleTypeDef>
 8104994:	f8c7 419c 	str.w	r4, [r7, #412]	@ 0x19c
	Client client(&huart3);
 8104998:	f107 0308 	add.w	r3, r7, #8
 810499c:	490f      	ldr	r1, [pc, #60]	@ (81049dc <MyTaskFunction+0x6c>)
 810499e:	4618      	mov	r0, r3
 81049a0:	f7fb fed6 	bl	8100750 <_ZN6ClientC1EP20__UART_HandleTypeDef>
//	LRX20A* lrx20A = new LRX20A(&huart1);

//   IRay iRay(&huart1);
    client.Init();
 81049a4:	f107 0308 	add.w	r3, r7, #8
 81049a8:	4618      	mov	r0, r3
 81049aa:	f7fb ff07 	bl	81007bc <_ZN6Client4InitEv>
//   iRay.Init();


    client.setDayCam(dayCam);
 81049ae:	f107 0308 	add.w	r3, r7, #8
 81049b2:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 81049b6:	4618      	mov	r0, r3
 81049b8:	f7fc f982 	bl	8100cc0 <_ZN6Client9setDayCamEP6DayCam>

 //   client.setLRF(lrx20A);

    dayCam->Init();
 81049bc:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 81049c0:	f7fc fd4e 	bl	8101460 <_ZN6DayCam4InitEv>
  //  dayCam->address_command;

    for (;;)
    {
    //    printf("📣 Hello from MyTaskFunction!\r\n");
        HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);  // Optional
 81049c4:	2102      	movs	r1, #2
 81049c6:	4806      	ldr	r0, [pc, #24]	@ (81049e0 <MyTaskFunction+0x70>)
 81049c8:	f001 fba9 	bl	810611e <HAL_GPIO_TogglePin>
        osDelay(1000);  // delay 1 second
 81049cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 81049d0:	f006 fa8c 	bl	810aeec <osDelay>
        HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);  // Optional
 81049d4:	bf00      	nop
 81049d6:	e7f5      	b.n	81049c4 <MyTaskFunction+0x54>
 81049d8:	100002e4 	.word	0x100002e4
 81049dc:	1000040c 	.word	0x1000040c
 81049e0:	58021000 	.word	0x58021000

081049e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81049e4:	b580      	push	{r7, lr}
 81049e6:	b082      	sub	sp, #8
 81049e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81049ea:	4b0c      	ldr	r3, [pc, #48]	@ (8104a1c <HAL_MspInit+0x38>)
 81049ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81049f0:	4a0a      	ldr	r2, [pc, #40]	@ (8104a1c <HAL_MspInit+0x38>)
 81049f2:	f043 0302 	orr.w	r3, r3, #2
 81049f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81049fa:	4b08      	ldr	r3, [pc, #32]	@ (8104a1c <HAL_MspInit+0x38>)
 81049fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104a00:	f003 0302 	and.w	r3, r3, #2
 8104a04:	607b      	str	r3, [r7, #4]
 8104a06:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8104a08:	2200      	movs	r2, #0
 8104a0a:	210f      	movs	r1, #15
 8104a0c:	f06f 0001 	mvn.w	r0, #1
 8104a10:	f000 fc23 	bl	810525a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8104a14:	bf00      	nop
 8104a16:	3708      	adds	r7, #8
 8104a18:	46bd      	mov	sp, r7
 8104a1a:	bd80      	pop	{r7, pc}
 8104a1c:	58024400 	.word	0x58024400

08104a20 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8104a20:	b580      	push	{r7, lr}
 8104a22:	b0ba      	sub	sp, #232	@ 0xe8
 8104a24:	af00      	add	r7, sp, #0
 8104a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104a28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8104a2c:	2200      	movs	r2, #0
 8104a2e:	601a      	str	r2, [r3, #0]
 8104a30:	605a      	str	r2, [r3, #4]
 8104a32:	609a      	str	r2, [r3, #8]
 8104a34:	60da      	str	r2, [r3, #12]
 8104a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8104a38:	f107 0310 	add.w	r3, r7, #16
 8104a3c:	22c0      	movs	r2, #192	@ 0xc0
 8104a3e:	2100      	movs	r1, #0
 8104a40:	4618      	mov	r0, r3
 8104a42:	f009 fc93 	bl	810e36c <memset>
  if(hspi->Instance==SPI2)
 8104a46:	687b      	ldr	r3, [r7, #4]
 8104a48:	681b      	ldr	r3, [r3, #0]
 8104a4a:	4a27      	ldr	r2, [pc, #156]	@ (8104ae8 <HAL_SPI_MspInit+0xc8>)
 8104a4c:	4293      	cmp	r3, r2
 8104a4e:	d146      	bne.n	8104ade <HAL_SPI_MspInit+0xbe>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8104a50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8104a54:	f04f 0300 	mov.w	r3, #0
 8104a58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8104a5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104a60:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8104a62:	f107 0310 	add.w	r3, r7, #16
 8104a66:	4618      	mov	r0, r3
 8104a68:	f001 fd7a 	bl	8106560 <HAL_RCCEx_PeriphCLKConfig>
 8104a6c:	4603      	mov	r3, r0
 8104a6e:	2b00      	cmp	r3, #0
 8104a70:	d001      	beq.n	8104a76 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8104a72:	f7ff feb1 	bl	81047d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8104a76:	4b1d      	ldr	r3, [pc, #116]	@ (8104aec <HAL_SPI_MspInit+0xcc>)
 8104a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8104aec <HAL_SPI_MspInit+0xcc>)
 8104a7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8104a82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104a86:	4b19      	ldr	r3, [pc, #100]	@ (8104aec <HAL_SPI_MspInit+0xcc>)
 8104a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104a90:	60fb      	str	r3, [r7, #12]
 8104a92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8104a94:	4b15      	ldr	r3, [pc, #84]	@ (8104aec <HAL_SPI_MspInit+0xcc>)
 8104a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104a9a:	4a14      	ldr	r2, [pc, #80]	@ (8104aec <HAL_SPI_MspInit+0xcc>)
 8104a9c:	f043 0302 	orr.w	r3, r3, #2
 8104aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104aa4:	4b11      	ldr	r3, [pc, #68]	@ (8104aec <HAL_SPI_MspInit+0xcc>)
 8104aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104aaa:	f003 0302 	and.w	r3, r3, #2
 8104aae:	60bb      	str	r3, [r7, #8]
 8104ab0:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8104ab2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8104ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104aba:	2302      	movs	r3, #2
 8104abc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104ac0:	2300      	movs	r3, #0
 8104ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104ac6:	2300      	movs	r3, #0
 8104ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8104acc:	2305      	movs	r3, #5
 8104ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8104ad2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8104ad6:	4619      	mov	r1, r3
 8104ad8:	4805      	ldr	r0, [pc, #20]	@ (8104af0 <HAL_SPI_MspInit+0xd0>)
 8104ada:	f001 f957 	bl	8105d8c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8104ade:	bf00      	nop
 8104ae0:	37e8      	adds	r7, #232	@ 0xe8
 8104ae2:	46bd      	mov	sp, r7
 8104ae4:	bd80      	pop	{r7, pc}
 8104ae6:	bf00      	nop
 8104ae8:	40003800 	.word	0x40003800
 8104aec:	58024400 	.word	0x58024400
 8104af0:	58020400 	.word	0x58020400

08104af4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8104af4:	b580      	push	{r7, lr}
 8104af6:	b0be      	sub	sp, #248	@ 0xf8
 8104af8:	af00      	add	r7, sp, #0
 8104afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104afc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8104b00:	2200      	movs	r2, #0
 8104b02:	601a      	str	r2, [r3, #0]
 8104b04:	605a      	str	r2, [r3, #4]
 8104b06:	609a      	str	r2, [r3, #8]
 8104b08:	60da      	str	r2, [r3, #12]
 8104b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8104b0c:	f107 0320 	add.w	r3, r7, #32
 8104b10:	22c0      	movs	r2, #192	@ 0xc0
 8104b12:	2100      	movs	r1, #0
 8104b14:	4618      	mov	r0, r3
 8104b16:	f009 fc29 	bl	810e36c <memset>
  if(huart->Instance==USART1)
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	681b      	ldr	r3, [r3, #0]
 8104b1e:	4a7f      	ldr	r2, [pc, #508]	@ (8104d1c <HAL_UART_MspInit+0x228>)
 8104b20:	4293      	cmp	r3, r2
 8104b22:	d14e      	bne.n	8104bc2 <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8104b24:	f04f 0201 	mov.w	r2, #1
 8104b28:	f04f 0300 	mov.w	r3, #0
 8104b2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8104b30:	2300      	movs	r3, #0
 8104b32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8104b36:	f107 0320 	add.w	r3, r7, #32
 8104b3a:	4618      	mov	r0, r3
 8104b3c:	f001 fd10 	bl	8106560 <HAL_RCCEx_PeriphCLKConfig>
 8104b40:	4603      	mov	r3, r0
 8104b42:	2b00      	cmp	r3, #0
 8104b44:	d001      	beq.n	8104b4a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8104b46:	f7ff fe47 	bl	81047d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8104b4a:	4b75      	ldr	r3, [pc, #468]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8104b50:	4a73      	ldr	r2, [pc, #460]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104b52:	f043 0310 	orr.w	r3, r3, #16
 8104b56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8104b5a:	4b71      	ldr	r3, [pc, #452]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8104b60:	f003 0310 	and.w	r3, r3, #16
 8104b64:	61fb      	str	r3, [r7, #28]
 8104b66:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8104b68:	4b6d      	ldr	r3, [pc, #436]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104b6e:	4a6c      	ldr	r2, [pc, #432]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104b70:	f043 0302 	orr.w	r3, r3, #2
 8104b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104b78:	4b69      	ldr	r3, [pc, #420]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104b7e:	f003 0302 	and.w	r3, r3, #2
 8104b82:	61bb      	str	r3, [r7, #24]
 8104b84:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8104b86:	23c0      	movs	r3, #192	@ 0xc0
 8104b88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104b8c:	2302      	movs	r3, #2
 8104b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104b92:	2300      	movs	r3, #0
 8104b94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104b98:	2300      	movs	r3, #0
 8104b9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8104b9e:	2307      	movs	r3, #7
 8104ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8104ba4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8104ba8:	4619      	mov	r1, r3
 8104baa:	485e      	ldr	r0, [pc, #376]	@ (8104d24 <HAL_UART_MspInit+0x230>)
 8104bac:	f001 f8ee 	bl	8105d8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8104bb0:	2200      	movs	r2, #0
 8104bb2:	2105      	movs	r1, #5
 8104bb4:	2025      	movs	r0, #37	@ 0x25
 8104bb6:	f000 fb50 	bl	810525a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8104bba:	2025      	movs	r0, #37	@ 0x25
 8104bbc:	f000 fb67 	bl	810528e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8104bc0:	e0a7      	b.n	8104d12 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART2)
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	681b      	ldr	r3, [r3, #0]
 8104bc6:	4a58      	ldr	r2, [pc, #352]	@ (8104d28 <HAL_UART_MspInit+0x234>)
 8104bc8:	4293      	cmp	r3, r2
 8104bca:	d14e      	bne.n	8104c6a <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8104bcc:	f04f 0202 	mov.w	r2, #2
 8104bd0:	f04f 0300 	mov.w	r3, #0
 8104bd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8104bd8:	2300      	movs	r3, #0
 8104bda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8104bde:	f107 0320 	add.w	r3, r7, #32
 8104be2:	4618      	mov	r0, r3
 8104be4:	f001 fcbc 	bl	8106560 <HAL_RCCEx_PeriphCLKConfig>
 8104be8:	4603      	mov	r3, r0
 8104bea:	2b00      	cmp	r3, #0
 8104bec:	d001      	beq.n	8104bf2 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8104bee:	f7ff fdf3 	bl	81047d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8104bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104bf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104bf8:	4a49      	ldr	r2, [pc, #292]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104bfe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104c02:	4b47      	ldr	r3, [pc, #284]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104c0c:	617b      	str	r3, [r7, #20]
 8104c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8104c10:	4b43      	ldr	r3, [pc, #268]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104c16:	4a42      	ldr	r2, [pc, #264]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104c18:	f043 0301 	orr.w	r3, r3, #1
 8104c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104c20:	4b3f      	ldr	r3, [pc, #252]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104c26:	f003 0301 	and.w	r3, r3, #1
 8104c2a:	613b      	str	r3, [r7, #16]
 8104c2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8104c2e:	230c      	movs	r3, #12
 8104c30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104c34:	2302      	movs	r3, #2
 8104c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104c3a:	2300      	movs	r3, #0
 8104c3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104c40:	2300      	movs	r3, #0
 8104c42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8104c46:	2307      	movs	r3, #7
 8104c48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8104c4c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8104c50:	4619      	mov	r1, r3
 8104c52:	4836      	ldr	r0, [pc, #216]	@ (8104d2c <HAL_UART_MspInit+0x238>)
 8104c54:	f001 f89a 	bl	8105d8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8104c58:	2200      	movs	r2, #0
 8104c5a:	2105      	movs	r1, #5
 8104c5c:	2026      	movs	r0, #38	@ 0x26
 8104c5e:	f000 fafc 	bl	810525a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8104c62:	2026      	movs	r0, #38	@ 0x26
 8104c64:	f000 fb13 	bl	810528e <HAL_NVIC_EnableIRQ>
}
 8104c68:	e053      	b.n	8104d12 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 8104c6a:	687b      	ldr	r3, [r7, #4]
 8104c6c:	681b      	ldr	r3, [r3, #0]
 8104c6e:	4a30      	ldr	r2, [pc, #192]	@ (8104d30 <HAL_UART_MspInit+0x23c>)
 8104c70:	4293      	cmp	r3, r2
 8104c72:	d14e      	bne.n	8104d12 <HAL_UART_MspInit+0x21e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8104c74:	f04f 0202 	mov.w	r2, #2
 8104c78:	f04f 0300 	mov.w	r3, #0
 8104c7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8104c80:	2300      	movs	r3, #0
 8104c82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8104c86:	f107 0320 	add.w	r3, r7, #32
 8104c8a:	4618      	mov	r0, r3
 8104c8c:	f001 fc68 	bl	8106560 <HAL_RCCEx_PeriphCLKConfig>
 8104c90:	4603      	mov	r3, r0
 8104c92:	2b00      	cmp	r3, #0
 8104c94:	d001      	beq.n	8104c9a <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8104c96:	f7ff fd9f 	bl	81047d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8104c9a:	4b21      	ldr	r3, [pc, #132]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104ca2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8104ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104caa:	4b1d      	ldr	r3, [pc, #116]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104cb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8104cb4:	60fb      	str	r3, [r7, #12]
 8104cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8104cb8:	4b19      	ldr	r3, [pc, #100]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104cbe:	4a18      	ldr	r2, [pc, #96]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104cc0:	f043 0308 	orr.w	r3, r3, #8
 8104cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104cc8:	4b15      	ldr	r3, [pc, #84]	@ (8104d20 <HAL_UART_MspInit+0x22c>)
 8104cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104cce:	f003 0308 	and.w	r3, r3, #8
 8104cd2:	60bb      	str	r3, [r7, #8]
 8104cd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8104cd6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8104cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104cde:	2302      	movs	r3, #2
 8104ce0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104ce4:	2300      	movs	r3, #0
 8104ce6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104cea:	2300      	movs	r3, #0
 8104cec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8104cf0:	2307      	movs	r3, #7
 8104cf2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8104cf6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8104cfa:	4619      	mov	r1, r3
 8104cfc:	480d      	ldr	r0, [pc, #52]	@ (8104d34 <HAL_UART_MspInit+0x240>)
 8104cfe:	f001 f845 	bl	8105d8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8104d02:	2200      	movs	r2, #0
 8104d04:	2105      	movs	r1, #5
 8104d06:	2027      	movs	r0, #39	@ 0x27
 8104d08:	f000 faa7 	bl	810525a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8104d0c:	2027      	movs	r0, #39	@ 0x27
 8104d0e:	f000 fabe 	bl	810528e <HAL_NVIC_EnableIRQ>
}
 8104d12:	bf00      	nop
 8104d14:	37f8      	adds	r7, #248	@ 0xf8
 8104d16:	46bd      	mov	sp, r7
 8104d18:	bd80      	pop	{r7, pc}
 8104d1a:	bf00      	nop
 8104d1c:	40011000 	.word	0x40011000
 8104d20:	58024400 	.word	0x58024400
 8104d24:	58020400 	.word	0x58020400
 8104d28:	40004400 	.word	0x40004400
 8104d2c:	58020000 	.word	0x58020000
 8104d30:	40004800 	.word	0x40004800
 8104d34:	58020c00 	.word	0x58020c00

08104d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8104d38:	b480      	push	{r7}
 8104d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8104d3c:	bf00      	nop
 8104d3e:	e7fd      	b.n	8104d3c <NMI_Handler+0x4>

08104d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8104d40:	b480      	push	{r7}
 8104d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8104d44:	bf00      	nop
 8104d46:	e7fd      	b.n	8104d44 <HardFault_Handler+0x4>

08104d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8104d48:	b480      	push	{r7}
 8104d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8104d4c:	bf00      	nop
 8104d4e:	e7fd      	b.n	8104d4c <MemManage_Handler+0x4>

08104d50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8104d50:	b480      	push	{r7}
 8104d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8104d54:	bf00      	nop
 8104d56:	e7fd      	b.n	8104d54 <BusFault_Handler+0x4>

08104d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8104d58:	b480      	push	{r7}
 8104d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8104d5c:	bf00      	nop
 8104d5e:	e7fd      	b.n	8104d5c <UsageFault_Handler+0x4>

08104d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8104d60:	b480      	push	{r7}
 8104d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8104d64:	bf00      	nop
 8104d66:	46bd      	mov	sp, r7
 8104d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d6c:	4770      	bx	lr

08104d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8104d6e:	b480      	push	{r7}
 8104d70:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8104d72:	bf00      	nop
 8104d74:	46bd      	mov	sp, r7
 8104d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d7a:	4770      	bx	lr

08104d7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8104d7c:	b580      	push	{r7, lr}
 8104d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8104d80:	4802      	ldr	r0, [pc, #8]	@ (8104d8c <USART1_IRQHandler+0x10>)
 8104d82:	f003 fc83 	bl	810868c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8104d86:	bf00      	nop
 8104d88:	bd80      	pop	{r7, pc}
 8104d8a:	bf00      	nop
 8104d8c:	100002e4 	.word	0x100002e4

08104d90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8104d90:	b580      	push	{r7, lr}
 8104d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8104d94:	4802      	ldr	r0, [pc, #8]	@ (8104da0 <USART2_IRQHandler+0x10>)
 8104d96:	f003 fc79 	bl	810868c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8104d9a:	bf00      	nop
 8104d9c:	bd80      	pop	{r7, pc}
 8104d9e:	bf00      	nop
 8104da0:	10000378 	.word	0x10000378

08104da4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8104da4:	b580      	push	{r7, lr}
 8104da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8104da8:	4802      	ldr	r0, [pc, #8]	@ (8104db4 <USART3_IRQHandler+0x10>)
 8104daa:	f003 fc6f 	bl	810868c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8104dae:	bf00      	nop
 8104db0:	bd80      	pop	{r7, pc}
 8104db2:	bf00      	nop
 8104db4:	1000040c 	.word	0x1000040c

08104db8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8104db8:	b480      	push	{r7}
 8104dba:	af00      	add	r7, sp, #0
  return 1;
 8104dbc:	2301      	movs	r3, #1
}
 8104dbe:	4618      	mov	r0, r3
 8104dc0:	46bd      	mov	sp, r7
 8104dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dc6:	4770      	bx	lr

08104dc8 <_kill>:

int _kill(int pid, int sig)
{
 8104dc8:	b580      	push	{r7, lr}
 8104dca:	b082      	sub	sp, #8
 8104dcc:	af00      	add	r7, sp, #0
 8104dce:	6078      	str	r0, [r7, #4]
 8104dd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8104dd2:	f009 fbcb 	bl	810e56c <__errno>
 8104dd6:	4603      	mov	r3, r0
 8104dd8:	2216      	movs	r2, #22
 8104dda:	601a      	str	r2, [r3, #0]
  return -1;
 8104ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8104de0:	4618      	mov	r0, r3
 8104de2:	3708      	adds	r7, #8
 8104de4:	46bd      	mov	sp, r7
 8104de6:	bd80      	pop	{r7, pc}

08104de8 <_exit>:

void _exit (int status)
{
 8104de8:	b580      	push	{r7, lr}
 8104dea:	b082      	sub	sp, #8
 8104dec:	af00      	add	r7, sp, #0
 8104dee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8104df0:	f04f 31ff 	mov.w	r1, #4294967295
 8104df4:	6878      	ldr	r0, [r7, #4]
 8104df6:	f7ff ffe7 	bl	8104dc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8104dfa:	bf00      	nop
 8104dfc:	e7fd      	b.n	8104dfa <_exit+0x12>

08104dfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8104dfe:	b580      	push	{r7, lr}
 8104e00:	b086      	sub	sp, #24
 8104e02:	af00      	add	r7, sp, #0
 8104e04:	60f8      	str	r0, [r7, #12]
 8104e06:	60b9      	str	r1, [r7, #8]
 8104e08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104e0a:	2300      	movs	r3, #0
 8104e0c:	617b      	str	r3, [r7, #20]
 8104e0e:	e00a      	b.n	8104e26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8104e10:	f3af 8000 	nop.w
 8104e14:	4601      	mov	r1, r0
 8104e16:	68bb      	ldr	r3, [r7, #8]
 8104e18:	1c5a      	adds	r2, r3, #1
 8104e1a:	60ba      	str	r2, [r7, #8]
 8104e1c:	b2ca      	uxtb	r2, r1
 8104e1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104e20:	697b      	ldr	r3, [r7, #20]
 8104e22:	3301      	adds	r3, #1
 8104e24:	617b      	str	r3, [r7, #20]
 8104e26:	697a      	ldr	r2, [r7, #20]
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	429a      	cmp	r2, r3
 8104e2c:	dbf0      	blt.n	8104e10 <_read+0x12>
  }

  return len;
 8104e2e:	687b      	ldr	r3, [r7, #4]
}
 8104e30:	4618      	mov	r0, r3
 8104e32:	3718      	adds	r7, #24
 8104e34:	46bd      	mov	sp, r7
 8104e36:	bd80      	pop	{r7, pc}

08104e38 <_close>:
  }
  return len;
}

int _close(int file)
{
 8104e38:	b480      	push	{r7}
 8104e3a:	b083      	sub	sp, #12
 8104e3c:	af00      	add	r7, sp, #0
 8104e3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8104e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8104e44:	4618      	mov	r0, r3
 8104e46:	370c      	adds	r7, #12
 8104e48:	46bd      	mov	sp, r7
 8104e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e4e:	4770      	bx	lr

08104e50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8104e50:	b480      	push	{r7}
 8104e52:	b083      	sub	sp, #12
 8104e54:	af00      	add	r7, sp, #0
 8104e56:	6078      	str	r0, [r7, #4]
 8104e58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8104e5a:	683b      	ldr	r3, [r7, #0]
 8104e5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8104e60:	605a      	str	r2, [r3, #4]
  return 0;
 8104e62:	2300      	movs	r3, #0
}
 8104e64:	4618      	mov	r0, r3
 8104e66:	370c      	adds	r7, #12
 8104e68:	46bd      	mov	sp, r7
 8104e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e6e:	4770      	bx	lr

08104e70 <_isatty>:

int _isatty(int file)
{
 8104e70:	b480      	push	{r7}
 8104e72:	b083      	sub	sp, #12
 8104e74:	af00      	add	r7, sp, #0
 8104e76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8104e78:	2301      	movs	r3, #1
}
 8104e7a:	4618      	mov	r0, r3
 8104e7c:	370c      	adds	r7, #12
 8104e7e:	46bd      	mov	sp, r7
 8104e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e84:	4770      	bx	lr

08104e86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8104e86:	b480      	push	{r7}
 8104e88:	b085      	sub	sp, #20
 8104e8a:	af00      	add	r7, sp, #0
 8104e8c:	60f8      	str	r0, [r7, #12]
 8104e8e:	60b9      	str	r1, [r7, #8]
 8104e90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8104e92:	2300      	movs	r3, #0
}
 8104e94:	4618      	mov	r0, r3
 8104e96:	3714      	adds	r7, #20
 8104e98:	46bd      	mov	sp, r7
 8104e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e9e:	4770      	bx	lr

08104ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8104ea0:	b580      	push	{r7, lr}
 8104ea2:	b086      	sub	sp, #24
 8104ea4:	af00      	add	r7, sp, #0
 8104ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8104ea8:	4a14      	ldr	r2, [pc, #80]	@ (8104efc <_sbrk+0x5c>)
 8104eaa:	4b15      	ldr	r3, [pc, #84]	@ (8104f00 <_sbrk+0x60>)
 8104eac:	1ad3      	subs	r3, r2, r3
 8104eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8104eb0:	697b      	ldr	r3, [r7, #20]
 8104eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8104eb4:	4b13      	ldr	r3, [pc, #76]	@ (8104f04 <_sbrk+0x64>)
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	2b00      	cmp	r3, #0
 8104eba:	d102      	bne.n	8104ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8104ebc:	4b11      	ldr	r3, [pc, #68]	@ (8104f04 <_sbrk+0x64>)
 8104ebe:	4a12      	ldr	r2, [pc, #72]	@ (8104f08 <_sbrk+0x68>)
 8104ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8104ec2:	4b10      	ldr	r3, [pc, #64]	@ (8104f04 <_sbrk+0x64>)
 8104ec4:	681a      	ldr	r2, [r3, #0]
 8104ec6:	687b      	ldr	r3, [r7, #4]
 8104ec8:	4413      	add	r3, r2
 8104eca:	693a      	ldr	r2, [r7, #16]
 8104ecc:	429a      	cmp	r2, r3
 8104ece:	d207      	bcs.n	8104ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8104ed0:	f009 fb4c 	bl	810e56c <__errno>
 8104ed4:	4603      	mov	r3, r0
 8104ed6:	220c      	movs	r2, #12
 8104ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8104eda:	f04f 33ff 	mov.w	r3, #4294967295
 8104ede:	e009      	b.n	8104ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8104ee0:	4b08      	ldr	r3, [pc, #32]	@ (8104f04 <_sbrk+0x64>)
 8104ee2:	681b      	ldr	r3, [r3, #0]
 8104ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8104ee6:	4b07      	ldr	r3, [pc, #28]	@ (8104f04 <_sbrk+0x64>)
 8104ee8:	681a      	ldr	r2, [r3, #0]
 8104eea:	687b      	ldr	r3, [r7, #4]
 8104eec:	4413      	add	r3, r2
 8104eee:	4a05      	ldr	r2, [pc, #20]	@ (8104f04 <_sbrk+0x64>)
 8104ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8104ef2:	68fb      	ldr	r3, [r7, #12]
}
 8104ef4:	4618      	mov	r0, r3
 8104ef6:	3718      	adds	r7, #24
 8104ef8:	46bd      	mov	sp, r7
 8104efa:	bd80      	pop	{r7, pc}
 8104efc:	10048000 	.word	0x10048000
 8104f00:	00000400 	.word	0x00000400
 8104f04:	100004a4 	.word	0x100004a4
 8104f08:	10004ff0 	.word	0x10004ff0

08104f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8104f0c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8104f48 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8104f10:	f7fb fbe4 	bl	81006dc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8104f14:	f7fb fbca 	bl	81006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8104f18:	480c      	ldr	r0, [pc, #48]	@ (8104f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8104f1a:	490d      	ldr	r1, [pc, #52]	@ (8104f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8104f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8104f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8104f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8104f20:	e002      	b.n	8104f28 <LoopCopyDataInit>

08104f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8104f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8104f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8104f26:	3304      	adds	r3, #4

08104f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8104f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8104f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8104f2c:	d3f9      	bcc.n	8104f22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8104f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8104f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8104f30:	4c0a      	ldr	r4, [pc, #40]	@ (8104f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8104f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8104f34:	e001      	b.n	8104f3a <LoopFillZerobss>

08104f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8104f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8104f38:	3204      	adds	r2, #4

08104f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8104f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8104f3c:	d3fb      	bcc.n	8104f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8104f3e:	f009 fb1b 	bl	810e578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8104f42:	f7ff fa1d 	bl	8104380 <main>
  bx  lr
 8104f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8104f48:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8104f4c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8104f50:	10000070 	.word	0x10000070
  ldr r2, =_sidata
 8104f54:	0810f2a4 	.word	0x0810f2a4
  ldr r2, =_sbss
 8104f58:	10000228 	.word	0x10000228
  ldr r4, =_ebss
 8104f5c:	10004fec 	.word	0x10004fec

08104f60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8104f60:	e7fe      	b.n	8104f60 <ADC3_IRQHandler>
	...

08104f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8104f64:	b580      	push	{r7, lr}
 8104f66:	b082      	sub	sp, #8
 8104f68:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8104f6a:	4b28      	ldr	r3, [pc, #160]	@ (810500c <HAL_Init+0xa8>)
 8104f6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104f70:	4a26      	ldr	r2, [pc, #152]	@ (810500c <HAL_Init+0xa8>)
 8104f72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8104f76:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104f7a:	4b24      	ldr	r3, [pc, #144]	@ (810500c <HAL_Init+0xa8>)
 8104f7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104f84:	603b      	str	r3, [r7, #0]
 8104f86:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8104f88:	4b21      	ldr	r3, [pc, #132]	@ (8105010 <HAL_Init+0xac>)
 8104f8a:	681b      	ldr	r3, [r3, #0]
 8104f8c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8104f90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104f94:	4a1e      	ldr	r2, [pc, #120]	@ (8105010 <HAL_Init+0xac>)
 8104f96:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8104f9a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8104f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8105010 <HAL_Init+0xac>)
 8104f9e:	681b      	ldr	r3, [r3, #0]
 8104fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8105010 <HAL_Init+0xac>)
 8104fa2:	f043 0301 	orr.w	r3, r3, #1
 8104fa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8104fa8:	2003      	movs	r0, #3
 8104faa:	f000 f94b 	bl	8105244 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8104fae:	f001 f8ff 	bl	81061b0 <HAL_RCC_GetSysClockFreq>
 8104fb2:	4602      	mov	r2, r0
 8104fb4:	4b15      	ldr	r3, [pc, #84]	@ (810500c <HAL_Init+0xa8>)
 8104fb6:	699b      	ldr	r3, [r3, #24]
 8104fb8:	0a1b      	lsrs	r3, r3, #8
 8104fba:	f003 030f 	and.w	r3, r3, #15
 8104fbe:	4915      	ldr	r1, [pc, #84]	@ (8105014 <HAL_Init+0xb0>)
 8104fc0:	5ccb      	ldrb	r3, [r1, r3]
 8104fc2:	f003 031f 	and.w	r3, r3, #31
 8104fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8104fca:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104fcc:	4b0f      	ldr	r3, [pc, #60]	@ (810500c <HAL_Init+0xa8>)
 8104fce:	699b      	ldr	r3, [r3, #24]
 8104fd0:	f003 030f 	and.w	r3, r3, #15
 8104fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8105014 <HAL_Init+0xb0>)
 8104fd6:	5cd3      	ldrb	r3, [r2, r3]
 8104fd8:	f003 031f 	and.w	r3, r3, #31
 8104fdc:	687a      	ldr	r2, [r7, #4]
 8104fde:	fa22 f303 	lsr.w	r3, r2, r3
 8104fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8105018 <HAL_Init+0xb4>)
 8104fe4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8105018 <HAL_Init+0xb4>)
 8104fe8:	681b      	ldr	r3, [r3, #0]
 8104fea:	4a0c      	ldr	r2, [pc, #48]	@ (810501c <HAL_Init+0xb8>)
 8104fec:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8104fee:	200f      	movs	r0, #15
 8104ff0:	f000 f816 	bl	8105020 <HAL_InitTick>
 8104ff4:	4603      	mov	r3, r0
 8104ff6:	2b00      	cmp	r3, #0
 8104ff8:	d001      	beq.n	8104ffe <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8104ffa:	2301      	movs	r3, #1
 8104ffc:	e002      	b.n	8105004 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8104ffe:	f7ff fcf1 	bl	81049e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8105002:	2300      	movs	r3, #0
}
 8105004:	4618      	mov	r0, r3
 8105006:	3708      	adds	r7, #8
 8105008:	46bd      	mov	sp, r7
 810500a:	bd80      	pop	{r7, pc}
 810500c:	58024400 	.word	0x58024400
 8105010:	40024400 	.word	0x40024400
 8105014:	0810f1b0 	.word	0x0810f1b0
 8105018:	10000004 	.word	0x10000004
 810501c:	10000000 	.word	0x10000000

08105020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8105020:	b580      	push	{r7, lr}
 8105022:	b082      	sub	sp, #8
 8105024:	af00      	add	r7, sp, #0
 8105026:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8105028:	4b15      	ldr	r3, [pc, #84]	@ (8105080 <HAL_InitTick+0x60>)
 810502a:	781b      	ldrb	r3, [r3, #0]
 810502c:	2b00      	cmp	r3, #0
 810502e:	d101      	bne.n	8105034 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8105030:	2301      	movs	r3, #1
 8105032:	e021      	b.n	8105078 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8105034:	4b13      	ldr	r3, [pc, #76]	@ (8105084 <HAL_InitTick+0x64>)
 8105036:	681a      	ldr	r2, [r3, #0]
 8105038:	4b11      	ldr	r3, [pc, #68]	@ (8105080 <HAL_InitTick+0x60>)
 810503a:	781b      	ldrb	r3, [r3, #0]
 810503c:	4619      	mov	r1, r3
 810503e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8105042:	fbb3 f3f1 	udiv	r3, r3, r1
 8105046:	fbb2 f3f3 	udiv	r3, r2, r3
 810504a:	4618      	mov	r0, r3
 810504c:	f000 f92d 	bl	81052aa <HAL_SYSTICK_Config>
 8105050:	4603      	mov	r3, r0
 8105052:	2b00      	cmp	r3, #0
 8105054:	d001      	beq.n	810505a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8105056:	2301      	movs	r3, #1
 8105058:	e00e      	b.n	8105078 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810505a:	687b      	ldr	r3, [r7, #4]
 810505c:	2b0f      	cmp	r3, #15
 810505e:	d80a      	bhi.n	8105076 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8105060:	2200      	movs	r2, #0
 8105062:	6879      	ldr	r1, [r7, #4]
 8105064:	f04f 30ff 	mov.w	r0, #4294967295
 8105068:	f000 f8f7 	bl	810525a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810506c:	4a06      	ldr	r2, [pc, #24]	@ (8105088 <HAL_InitTick+0x68>)
 810506e:	687b      	ldr	r3, [r7, #4]
 8105070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8105072:	2300      	movs	r3, #0
 8105074:	e000      	b.n	8105078 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8105076:	2301      	movs	r3, #1
}
 8105078:	4618      	mov	r0, r3
 810507a:	3708      	adds	r7, #8
 810507c:	46bd      	mov	sp, r7
 810507e:	bd80      	pop	{r7, pc}
 8105080:	1000000c 	.word	0x1000000c
 8105084:	10000000 	.word	0x10000000
 8105088:	10000008 	.word	0x10000008

0810508c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810508c:	b480      	push	{r7}
 810508e:	af00      	add	r7, sp, #0
  return uwTick;
 8105090:	4b03      	ldr	r3, [pc, #12]	@ (81050a0 <HAL_GetTick+0x14>)
 8105092:	681b      	ldr	r3, [r3, #0]
}
 8105094:	4618      	mov	r0, r3
 8105096:	46bd      	mov	sp, r7
 8105098:	f85d 7b04 	ldr.w	r7, [sp], #4
 810509c:	4770      	bx	lr
 810509e:	bf00      	nop
 81050a0:	100004a8 	.word	0x100004a8

081050a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81050a4:	b480      	push	{r7}
 81050a6:	b085      	sub	sp, #20
 81050a8:	af00      	add	r7, sp, #0
 81050aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81050ac:	687b      	ldr	r3, [r7, #4]
 81050ae:	f003 0307 	and.w	r3, r3, #7
 81050b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81050b4:	4b0c      	ldr	r3, [pc, #48]	@ (81050e8 <__NVIC_SetPriorityGrouping+0x44>)
 81050b6:	68db      	ldr	r3, [r3, #12]
 81050b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81050ba:	68ba      	ldr	r2, [r7, #8]
 81050bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81050c0:	4013      	ands	r3, r2
 81050c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81050c4:	68fb      	ldr	r3, [r7, #12]
 81050c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81050c8:	68bb      	ldr	r3, [r7, #8]
 81050ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81050cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81050d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81050d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81050d6:	4a04      	ldr	r2, [pc, #16]	@ (81050e8 <__NVIC_SetPriorityGrouping+0x44>)
 81050d8:	68bb      	ldr	r3, [r7, #8]
 81050da:	60d3      	str	r3, [r2, #12]
}
 81050dc:	bf00      	nop
 81050de:	3714      	adds	r7, #20
 81050e0:	46bd      	mov	sp, r7
 81050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050e6:	4770      	bx	lr
 81050e8:	e000ed00 	.word	0xe000ed00

081050ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81050ec:	b480      	push	{r7}
 81050ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81050f0:	4b04      	ldr	r3, [pc, #16]	@ (8105104 <__NVIC_GetPriorityGrouping+0x18>)
 81050f2:	68db      	ldr	r3, [r3, #12]
 81050f4:	0a1b      	lsrs	r3, r3, #8
 81050f6:	f003 0307 	and.w	r3, r3, #7
}
 81050fa:	4618      	mov	r0, r3
 81050fc:	46bd      	mov	sp, r7
 81050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105102:	4770      	bx	lr
 8105104:	e000ed00 	.word	0xe000ed00

08105108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105108:	b480      	push	{r7}
 810510a:	b083      	sub	sp, #12
 810510c:	af00      	add	r7, sp, #0
 810510e:	4603      	mov	r3, r0
 8105110:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105116:	2b00      	cmp	r3, #0
 8105118:	db0b      	blt.n	8105132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810511a:	88fb      	ldrh	r3, [r7, #6]
 810511c:	f003 021f 	and.w	r2, r3, #31
 8105120:	4907      	ldr	r1, [pc, #28]	@ (8105140 <__NVIC_EnableIRQ+0x38>)
 8105122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105126:	095b      	lsrs	r3, r3, #5
 8105128:	2001      	movs	r0, #1
 810512a:	fa00 f202 	lsl.w	r2, r0, r2
 810512e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8105132:	bf00      	nop
 8105134:	370c      	adds	r7, #12
 8105136:	46bd      	mov	sp, r7
 8105138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810513c:	4770      	bx	lr
 810513e:	bf00      	nop
 8105140:	e000e100 	.word	0xe000e100

08105144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8105144:	b480      	push	{r7}
 8105146:	b083      	sub	sp, #12
 8105148:	af00      	add	r7, sp, #0
 810514a:	4603      	mov	r3, r0
 810514c:	6039      	str	r1, [r7, #0]
 810514e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105154:	2b00      	cmp	r3, #0
 8105156:	db0a      	blt.n	810516e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105158:	683b      	ldr	r3, [r7, #0]
 810515a:	b2da      	uxtb	r2, r3
 810515c:	490c      	ldr	r1, [pc, #48]	@ (8105190 <__NVIC_SetPriority+0x4c>)
 810515e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105162:	0112      	lsls	r2, r2, #4
 8105164:	b2d2      	uxtb	r2, r2
 8105166:	440b      	add	r3, r1
 8105168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810516c:	e00a      	b.n	8105184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810516e:	683b      	ldr	r3, [r7, #0]
 8105170:	b2da      	uxtb	r2, r3
 8105172:	4908      	ldr	r1, [pc, #32]	@ (8105194 <__NVIC_SetPriority+0x50>)
 8105174:	88fb      	ldrh	r3, [r7, #6]
 8105176:	f003 030f 	and.w	r3, r3, #15
 810517a:	3b04      	subs	r3, #4
 810517c:	0112      	lsls	r2, r2, #4
 810517e:	b2d2      	uxtb	r2, r2
 8105180:	440b      	add	r3, r1
 8105182:	761a      	strb	r2, [r3, #24]
}
 8105184:	bf00      	nop
 8105186:	370c      	adds	r7, #12
 8105188:	46bd      	mov	sp, r7
 810518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810518e:	4770      	bx	lr
 8105190:	e000e100 	.word	0xe000e100
 8105194:	e000ed00 	.word	0xe000ed00

08105198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105198:	b480      	push	{r7}
 810519a:	b089      	sub	sp, #36	@ 0x24
 810519c:	af00      	add	r7, sp, #0
 810519e:	60f8      	str	r0, [r7, #12]
 81051a0:	60b9      	str	r1, [r7, #8]
 81051a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81051a4:	68fb      	ldr	r3, [r7, #12]
 81051a6:	f003 0307 	and.w	r3, r3, #7
 81051aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81051ac:	69fb      	ldr	r3, [r7, #28]
 81051ae:	f1c3 0307 	rsb	r3, r3, #7
 81051b2:	2b04      	cmp	r3, #4
 81051b4:	bf28      	it	cs
 81051b6:	2304      	movcs	r3, #4
 81051b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81051ba:	69fb      	ldr	r3, [r7, #28]
 81051bc:	3304      	adds	r3, #4
 81051be:	2b06      	cmp	r3, #6
 81051c0:	d902      	bls.n	81051c8 <NVIC_EncodePriority+0x30>
 81051c2:	69fb      	ldr	r3, [r7, #28]
 81051c4:	3b03      	subs	r3, #3
 81051c6:	e000      	b.n	81051ca <NVIC_EncodePriority+0x32>
 81051c8:	2300      	movs	r3, #0
 81051ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81051cc:	f04f 32ff 	mov.w	r2, #4294967295
 81051d0:	69bb      	ldr	r3, [r7, #24]
 81051d2:	fa02 f303 	lsl.w	r3, r2, r3
 81051d6:	43da      	mvns	r2, r3
 81051d8:	68bb      	ldr	r3, [r7, #8]
 81051da:	401a      	ands	r2, r3
 81051dc:	697b      	ldr	r3, [r7, #20]
 81051de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81051e0:	f04f 31ff 	mov.w	r1, #4294967295
 81051e4:	697b      	ldr	r3, [r7, #20]
 81051e6:	fa01 f303 	lsl.w	r3, r1, r3
 81051ea:	43d9      	mvns	r1, r3
 81051ec:	687b      	ldr	r3, [r7, #4]
 81051ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81051f0:	4313      	orrs	r3, r2
         );
}
 81051f2:	4618      	mov	r0, r3
 81051f4:	3724      	adds	r7, #36	@ 0x24
 81051f6:	46bd      	mov	sp, r7
 81051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051fc:	4770      	bx	lr
	...

08105200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8105200:	b580      	push	{r7, lr}
 8105202:	b082      	sub	sp, #8
 8105204:	af00      	add	r7, sp, #0
 8105206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	3b01      	subs	r3, #1
 810520c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105210:	d301      	bcc.n	8105216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8105212:	2301      	movs	r3, #1
 8105214:	e00f      	b.n	8105236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8105216:	4a0a      	ldr	r2, [pc, #40]	@ (8105240 <SysTick_Config+0x40>)
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	3b01      	subs	r3, #1
 810521c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810521e:	210f      	movs	r1, #15
 8105220:	f04f 30ff 	mov.w	r0, #4294967295
 8105224:	f7ff ff8e 	bl	8105144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8105228:	4b05      	ldr	r3, [pc, #20]	@ (8105240 <SysTick_Config+0x40>)
 810522a:	2200      	movs	r2, #0
 810522c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810522e:	4b04      	ldr	r3, [pc, #16]	@ (8105240 <SysTick_Config+0x40>)
 8105230:	2207      	movs	r2, #7
 8105232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8105234:	2300      	movs	r3, #0
}
 8105236:	4618      	mov	r0, r3
 8105238:	3708      	adds	r7, #8
 810523a:	46bd      	mov	sp, r7
 810523c:	bd80      	pop	{r7, pc}
 810523e:	bf00      	nop
 8105240:	e000e010 	.word	0xe000e010

08105244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105244:	b580      	push	{r7, lr}
 8105246:	b082      	sub	sp, #8
 8105248:	af00      	add	r7, sp, #0
 810524a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810524c:	6878      	ldr	r0, [r7, #4]
 810524e:	f7ff ff29 	bl	81050a4 <__NVIC_SetPriorityGrouping>
}
 8105252:	bf00      	nop
 8105254:	3708      	adds	r7, #8
 8105256:	46bd      	mov	sp, r7
 8105258:	bd80      	pop	{r7, pc}

0810525a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810525a:	b580      	push	{r7, lr}
 810525c:	b086      	sub	sp, #24
 810525e:	af00      	add	r7, sp, #0
 8105260:	4603      	mov	r3, r0
 8105262:	60b9      	str	r1, [r7, #8]
 8105264:	607a      	str	r2, [r7, #4]
 8105266:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8105268:	f7ff ff40 	bl	81050ec <__NVIC_GetPriorityGrouping>
 810526c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810526e:	687a      	ldr	r2, [r7, #4]
 8105270:	68b9      	ldr	r1, [r7, #8]
 8105272:	6978      	ldr	r0, [r7, #20]
 8105274:	f7ff ff90 	bl	8105198 <NVIC_EncodePriority>
 8105278:	4602      	mov	r2, r0
 810527a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810527e:	4611      	mov	r1, r2
 8105280:	4618      	mov	r0, r3
 8105282:	f7ff ff5f 	bl	8105144 <__NVIC_SetPriority>
}
 8105286:	bf00      	nop
 8105288:	3718      	adds	r7, #24
 810528a:	46bd      	mov	sp, r7
 810528c:	bd80      	pop	{r7, pc}

0810528e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810528e:	b580      	push	{r7, lr}
 8105290:	b082      	sub	sp, #8
 8105292:	af00      	add	r7, sp, #0
 8105294:	4603      	mov	r3, r0
 8105296:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8105298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810529c:	4618      	mov	r0, r3
 810529e:	f7ff ff33 	bl	8105108 <__NVIC_EnableIRQ>
}
 81052a2:	bf00      	nop
 81052a4:	3708      	adds	r7, #8
 81052a6:	46bd      	mov	sp, r7
 81052a8:	bd80      	pop	{r7, pc}

081052aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81052aa:	b580      	push	{r7, lr}
 81052ac:	b082      	sub	sp, #8
 81052ae:	af00      	add	r7, sp, #0
 81052b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81052b2:	6878      	ldr	r0, [r7, #4]
 81052b4:	f7ff ffa4 	bl	8105200 <SysTick_Config>
 81052b8:	4603      	mov	r3, r0
}
 81052ba:	4618      	mov	r0, r3
 81052bc:	3708      	adds	r7, #8
 81052be:	46bd      	mov	sp, r7
 81052c0:	bd80      	pop	{r7, pc}
	...

081052c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 81052c4:	b580      	push	{r7, lr}
 81052c6:	b086      	sub	sp, #24
 81052c8:	af00      	add	r7, sp, #0
 81052ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 81052cc:	f7ff fede 	bl	810508c <HAL_GetTick>
 81052d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81052d2:	687b      	ldr	r3, [r7, #4]
 81052d4:	2b00      	cmp	r3, #0
 81052d6:	d101      	bne.n	81052dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 81052d8:	2301      	movs	r3, #1
 81052da:	e2dc      	b.n	8105896 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81052e2:	b2db      	uxtb	r3, r3
 81052e4:	2b02      	cmp	r3, #2
 81052e6:	d008      	beq.n	81052fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81052e8:	687b      	ldr	r3, [r7, #4]
 81052ea:	2280      	movs	r2, #128	@ 0x80
 81052ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81052ee:	687b      	ldr	r3, [r7, #4]
 81052f0:	2200      	movs	r2, #0
 81052f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 81052f6:	2301      	movs	r3, #1
 81052f8:	e2cd      	b.n	8105896 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81052fa:	687b      	ldr	r3, [r7, #4]
 81052fc:	681b      	ldr	r3, [r3, #0]
 81052fe:	4a76      	ldr	r2, [pc, #472]	@ (81054d8 <HAL_DMA_Abort+0x214>)
 8105300:	4293      	cmp	r3, r2
 8105302:	d04a      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 8105304:	687b      	ldr	r3, [r7, #4]
 8105306:	681b      	ldr	r3, [r3, #0]
 8105308:	4a74      	ldr	r2, [pc, #464]	@ (81054dc <HAL_DMA_Abort+0x218>)
 810530a:	4293      	cmp	r3, r2
 810530c:	d045      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 810530e:	687b      	ldr	r3, [r7, #4]
 8105310:	681b      	ldr	r3, [r3, #0]
 8105312:	4a73      	ldr	r2, [pc, #460]	@ (81054e0 <HAL_DMA_Abort+0x21c>)
 8105314:	4293      	cmp	r3, r2
 8105316:	d040      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 8105318:	687b      	ldr	r3, [r7, #4]
 810531a:	681b      	ldr	r3, [r3, #0]
 810531c:	4a71      	ldr	r2, [pc, #452]	@ (81054e4 <HAL_DMA_Abort+0x220>)
 810531e:	4293      	cmp	r3, r2
 8105320:	d03b      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 8105322:	687b      	ldr	r3, [r7, #4]
 8105324:	681b      	ldr	r3, [r3, #0]
 8105326:	4a70      	ldr	r2, [pc, #448]	@ (81054e8 <HAL_DMA_Abort+0x224>)
 8105328:	4293      	cmp	r3, r2
 810532a:	d036      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 810532c:	687b      	ldr	r3, [r7, #4]
 810532e:	681b      	ldr	r3, [r3, #0]
 8105330:	4a6e      	ldr	r2, [pc, #440]	@ (81054ec <HAL_DMA_Abort+0x228>)
 8105332:	4293      	cmp	r3, r2
 8105334:	d031      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	681b      	ldr	r3, [r3, #0]
 810533a:	4a6d      	ldr	r2, [pc, #436]	@ (81054f0 <HAL_DMA_Abort+0x22c>)
 810533c:	4293      	cmp	r3, r2
 810533e:	d02c      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 8105340:	687b      	ldr	r3, [r7, #4]
 8105342:	681b      	ldr	r3, [r3, #0]
 8105344:	4a6b      	ldr	r2, [pc, #428]	@ (81054f4 <HAL_DMA_Abort+0x230>)
 8105346:	4293      	cmp	r3, r2
 8105348:	d027      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 810534a:	687b      	ldr	r3, [r7, #4]
 810534c:	681b      	ldr	r3, [r3, #0]
 810534e:	4a6a      	ldr	r2, [pc, #424]	@ (81054f8 <HAL_DMA_Abort+0x234>)
 8105350:	4293      	cmp	r3, r2
 8105352:	d022      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 8105354:	687b      	ldr	r3, [r7, #4]
 8105356:	681b      	ldr	r3, [r3, #0]
 8105358:	4a68      	ldr	r2, [pc, #416]	@ (81054fc <HAL_DMA_Abort+0x238>)
 810535a:	4293      	cmp	r3, r2
 810535c:	d01d      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 810535e:	687b      	ldr	r3, [r7, #4]
 8105360:	681b      	ldr	r3, [r3, #0]
 8105362:	4a67      	ldr	r2, [pc, #412]	@ (8105500 <HAL_DMA_Abort+0x23c>)
 8105364:	4293      	cmp	r3, r2
 8105366:	d018      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 8105368:	687b      	ldr	r3, [r7, #4]
 810536a:	681b      	ldr	r3, [r3, #0]
 810536c:	4a65      	ldr	r2, [pc, #404]	@ (8105504 <HAL_DMA_Abort+0x240>)
 810536e:	4293      	cmp	r3, r2
 8105370:	d013      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	681b      	ldr	r3, [r3, #0]
 8105376:	4a64      	ldr	r2, [pc, #400]	@ (8105508 <HAL_DMA_Abort+0x244>)
 8105378:	4293      	cmp	r3, r2
 810537a:	d00e      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	681b      	ldr	r3, [r3, #0]
 8105380:	4a62      	ldr	r2, [pc, #392]	@ (810550c <HAL_DMA_Abort+0x248>)
 8105382:	4293      	cmp	r3, r2
 8105384:	d009      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 8105386:	687b      	ldr	r3, [r7, #4]
 8105388:	681b      	ldr	r3, [r3, #0]
 810538a:	4a61      	ldr	r2, [pc, #388]	@ (8105510 <HAL_DMA_Abort+0x24c>)
 810538c:	4293      	cmp	r3, r2
 810538e:	d004      	beq.n	810539a <HAL_DMA_Abort+0xd6>
 8105390:	687b      	ldr	r3, [r7, #4]
 8105392:	681b      	ldr	r3, [r3, #0]
 8105394:	4a5f      	ldr	r2, [pc, #380]	@ (8105514 <HAL_DMA_Abort+0x250>)
 8105396:	4293      	cmp	r3, r2
 8105398:	d101      	bne.n	810539e <HAL_DMA_Abort+0xda>
 810539a:	2301      	movs	r3, #1
 810539c:	e000      	b.n	81053a0 <HAL_DMA_Abort+0xdc>
 810539e:	2300      	movs	r3, #0
 81053a0:	2b00      	cmp	r3, #0
 81053a2:	d013      	beq.n	81053cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81053a4:	687b      	ldr	r3, [r7, #4]
 81053a6:	681b      	ldr	r3, [r3, #0]
 81053a8:	681a      	ldr	r2, [r3, #0]
 81053aa:	687b      	ldr	r3, [r7, #4]
 81053ac:	681b      	ldr	r3, [r3, #0]
 81053ae:	f022 021e 	bic.w	r2, r2, #30
 81053b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81053b4:	687b      	ldr	r3, [r7, #4]
 81053b6:	681b      	ldr	r3, [r3, #0]
 81053b8:	695a      	ldr	r2, [r3, #20]
 81053ba:	687b      	ldr	r3, [r7, #4]
 81053bc:	681b      	ldr	r3, [r3, #0]
 81053be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 81053c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	681b      	ldr	r3, [r3, #0]
 81053c8:	617b      	str	r3, [r7, #20]
 81053ca:	e00a      	b.n	81053e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81053cc:	687b      	ldr	r3, [r7, #4]
 81053ce:	681b      	ldr	r3, [r3, #0]
 81053d0:	681a      	ldr	r2, [r3, #0]
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	681b      	ldr	r3, [r3, #0]
 81053d6:	f022 020e 	bic.w	r2, r2, #14
 81053da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81053dc:	687b      	ldr	r3, [r7, #4]
 81053de:	681b      	ldr	r3, [r3, #0]
 81053e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81053e2:	687b      	ldr	r3, [r7, #4]
 81053e4:	681b      	ldr	r3, [r3, #0]
 81053e6:	4a3c      	ldr	r2, [pc, #240]	@ (81054d8 <HAL_DMA_Abort+0x214>)
 81053e8:	4293      	cmp	r3, r2
 81053ea:	d072      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 81053ec:	687b      	ldr	r3, [r7, #4]
 81053ee:	681b      	ldr	r3, [r3, #0]
 81053f0:	4a3a      	ldr	r2, [pc, #232]	@ (81054dc <HAL_DMA_Abort+0x218>)
 81053f2:	4293      	cmp	r3, r2
 81053f4:	d06d      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	4a39      	ldr	r2, [pc, #228]	@ (81054e0 <HAL_DMA_Abort+0x21c>)
 81053fc:	4293      	cmp	r3, r2
 81053fe:	d068      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 8105400:	687b      	ldr	r3, [r7, #4]
 8105402:	681b      	ldr	r3, [r3, #0]
 8105404:	4a37      	ldr	r2, [pc, #220]	@ (81054e4 <HAL_DMA_Abort+0x220>)
 8105406:	4293      	cmp	r3, r2
 8105408:	d063      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	681b      	ldr	r3, [r3, #0]
 810540e:	4a36      	ldr	r2, [pc, #216]	@ (81054e8 <HAL_DMA_Abort+0x224>)
 8105410:	4293      	cmp	r3, r2
 8105412:	d05e      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	681b      	ldr	r3, [r3, #0]
 8105418:	4a34      	ldr	r2, [pc, #208]	@ (81054ec <HAL_DMA_Abort+0x228>)
 810541a:	4293      	cmp	r3, r2
 810541c:	d059      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 810541e:	687b      	ldr	r3, [r7, #4]
 8105420:	681b      	ldr	r3, [r3, #0]
 8105422:	4a33      	ldr	r2, [pc, #204]	@ (81054f0 <HAL_DMA_Abort+0x22c>)
 8105424:	4293      	cmp	r3, r2
 8105426:	d054      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	681b      	ldr	r3, [r3, #0]
 810542c:	4a31      	ldr	r2, [pc, #196]	@ (81054f4 <HAL_DMA_Abort+0x230>)
 810542e:	4293      	cmp	r3, r2
 8105430:	d04f      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 8105432:	687b      	ldr	r3, [r7, #4]
 8105434:	681b      	ldr	r3, [r3, #0]
 8105436:	4a30      	ldr	r2, [pc, #192]	@ (81054f8 <HAL_DMA_Abort+0x234>)
 8105438:	4293      	cmp	r3, r2
 810543a:	d04a      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	681b      	ldr	r3, [r3, #0]
 8105440:	4a2e      	ldr	r2, [pc, #184]	@ (81054fc <HAL_DMA_Abort+0x238>)
 8105442:	4293      	cmp	r3, r2
 8105444:	d045      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	681b      	ldr	r3, [r3, #0]
 810544a:	4a2d      	ldr	r2, [pc, #180]	@ (8105500 <HAL_DMA_Abort+0x23c>)
 810544c:	4293      	cmp	r3, r2
 810544e:	d040      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 8105450:	687b      	ldr	r3, [r7, #4]
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	4a2b      	ldr	r2, [pc, #172]	@ (8105504 <HAL_DMA_Abort+0x240>)
 8105456:	4293      	cmp	r3, r2
 8105458:	d03b      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	681b      	ldr	r3, [r3, #0]
 810545e:	4a2a      	ldr	r2, [pc, #168]	@ (8105508 <HAL_DMA_Abort+0x244>)
 8105460:	4293      	cmp	r3, r2
 8105462:	d036      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	681b      	ldr	r3, [r3, #0]
 8105468:	4a28      	ldr	r2, [pc, #160]	@ (810550c <HAL_DMA_Abort+0x248>)
 810546a:	4293      	cmp	r3, r2
 810546c:	d031      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	4a27      	ldr	r2, [pc, #156]	@ (8105510 <HAL_DMA_Abort+0x24c>)
 8105474:	4293      	cmp	r3, r2
 8105476:	d02c      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	4a25      	ldr	r2, [pc, #148]	@ (8105514 <HAL_DMA_Abort+0x250>)
 810547e:	4293      	cmp	r3, r2
 8105480:	d027      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	681b      	ldr	r3, [r3, #0]
 8105486:	4a24      	ldr	r2, [pc, #144]	@ (8105518 <HAL_DMA_Abort+0x254>)
 8105488:	4293      	cmp	r3, r2
 810548a:	d022      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	681b      	ldr	r3, [r3, #0]
 8105490:	4a22      	ldr	r2, [pc, #136]	@ (810551c <HAL_DMA_Abort+0x258>)
 8105492:	4293      	cmp	r3, r2
 8105494:	d01d      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	681b      	ldr	r3, [r3, #0]
 810549a:	4a21      	ldr	r2, [pc, #132]	@ (8105520 <HAL_DMA_Abort+0x25c>)
 810549c:	4293      	cmp	r3, r2
 810549e:	d018      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	4a1f      	ldr	r2, [pc, #124]	@ (8105524 <HAL_DMA_Abort+0x260>)
 81054a6:	4293      	cmp	r3, r2
 81054a8:	d013      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	4a1e      	ldr	r2, [pc, #120]	@ (8105528 <HAL_DMA_Abort+0x264>)
 81054b0:	4293      	cmp	r3, r2
 81054b2:	d00e      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 81054b4:	687b      	ldr	r3, [r7, #4]
 81054b6:	681b      	ldr	r3, [r3, #0]
 81054b8:	4a1c      	ldr	r2, [pc, #112]	@ (810552c <HAL_DMA_Abort+0x268>)
 81054ba:	4293      	cmp	r3, r2
 81054bc:	d009      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 81054be:	687b      	ldr	r3, [r7, #4]
 81054c0:	681b      	ldr	r3, [r3, #0]
 81054c2:	4a1b      	ldr	r2, [pc, #108]	@ (8105530 <HAL_DMA_Abort+0x26c>)
 81054c4:	4293      	cmp	r3, r2
 81054c6:	d004      	beq.n	81054d2 <HAL_DMA_Abort+0x20e>
 81054c8:	687b      	ldr	r3, [r7, #4]
 81054ca:	681b      	ldr	r3, [r3, #0]
 81054cc:	4a19      	ldr	r2, [pc, #100]	@ (8105534 <HAL_DMA_Abort+0x270>)
 81054ce:	4293      	cmp	r3, r2
 81054d0:	d132      	bne.n	8105538 <HAL_DMA_Abort+0x274>
 81054d2:	2301      	movs	r3, #1
 81054d4:	e031      	b.n	810553a <HAL_DMA_Abort+0x276>
 81054d6:	bf00      	nop
 81054d8:	40020010 	.word	0x40020010
 81054dc:	40020028 	.word	0x40020028
 81054e0:	40020040 	.word	0x40020040
 81054e4:	40020058 	.word	0x40020058
 81054e8:	40020070 	.word	0x40020070
 81054ec:	40020088 	.word	0x40020088
 81054f0:	400200a0 	.word	0x400200a0
 81054f4:	400200b8 	.word	0x400200b8
 81054f8:	40020410 	.word	0x40020410
 81054fc:	40020428 	.word	0x40020428
 8105500:	40020440 	.word	0x40020440
 8105504:	40020458 	.word	0x40020458
 8105508:	40020470 	.word	0x40020470
 810550c:	40020488 	.word	0x40020488
 8105510:	400204a0 	.word	0x400204a0
 8105514:	400204b8 	.word	0x400204b8
 8105518:	58025408 	.word	0x58025408
 810551c:	5802541c 	.word	0x5802541c
 8105520:	58025430 	.word	0x58025430
 8105524:	58025444 	.word	0x58025444
 8105528:	58025458 	.word	0x58025458
 810552c:	5802546c 	.word	0x5802546c
 8105530:	58025480 	.word	0x58025480
 8105534:	58025494 	.word	0x58025494
 8105538:	2300      	movs	r3, #0
 810553a:	2b00      	cmp	r3, #0
 810553c:	d007      	beq.n	810554e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105542:	681a      	ldr	r2, [r3, #0]
 8105544:	687b      	ldr	r3, [r7, #4]
 8105546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810554c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810554e:	687b      	ldr	r3, [r7, #4]
 8105550:	681b      	ldr	r3, [r3, #0]
 8105552:	4a6d      	ldr	r2, [pc, #436]	@ (8105708 <HAL_DMA_Abort+0x444>)
 8105554:	4293      	cmp	r3, r2
 8105556:	d04a      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 8105558:	687b      	ldr	r3, [r7, #4]
 810555a:	681b      	ldr	r3, [r3, #0]
 810555c:	4a6b      	ldr	r2, [pc, #428]	@ (810570c <HAL_DMA_Abort+0x448>)
 810555e:	4293      	cmp	r3, r2
 8105560:	d045      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 8105562:	687b      	ldr	r3, [r7, #4]
 8105564:	681b      	ldr	r3, [r3, #0]
 8105566:	4a6a      	ldr	r2, [pc, #424]	@ (8105710 <HAL_DMA_Abort+0x44c>)
 8105568:	4293      	cmp	r3, r2
 810556a:	d040      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 810556c:	687b      	ldr	r3, [r7, #4]
 810556e:	681b      	ldr	r3, [r3, #0]
 8105570:	4a68      	ldr	r2, [pc, #416]	@ (8105714 <HAL_DMA_Abort+0x450>)
 8105572:	4293      	cmp	r3, r2
 8105574:	d03b      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 8105576:	687b      	ldr	r3, [r7, #4]
 8105578:	681b      	ldr	r3, [r3, #0]
 810557a:	4a67      	ldr	r2, [pc, #412]	@ (8105718 <HAL_DMA_Abort+0x454>)
 810557c:	4293      	cmp	r3, r2
 810557e:	d036      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 8105580:	687b      	ldr	r3, [r7, #4]
 8105582:	681b      	ldr	r3, [r3, #0]
 8105584:	4a65      	ldr	r2, [pc, #404]	@ (810571c <HAL_DMA_Abort+0x458>)
 8105586:	4293      	cmp	r3, r2
 8105588:	d031      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 810558a:	687b      	ldr	r3, [r7, #4]
 810558c:	681b      	ldr	r3, [r3, #0]
 810558e:	4a64      	ldr	r2, [pc, #400]	@ (8105720 <HAL_DMA_Abort+0x45c>)
 8105590:	4293      	cmp	r3, r2
 8105592:	d02c      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 8105594:	687b      	ldr	r3, [r7, #4]
 8105596:	681b      	ldr	r3, [r3, #0]
 8105598:	4a62      	ldr	r2, [pc, #392]	@ (8105724 <HAL_DMA_Abort+0x460>)
 810559a:	4293      	cmp	r3, r2
 810559c:	d027      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	681b      	ldr	r3, [r3, #0]
 81055a2:	4a61      	ldr	r2, [pc, #388]	@ (8105728 <HAL_DMA_Abort+0x464>)
 81055a4:	4293      	cmp	r3, r2
 81055a6:	d022      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 81055a8:	687b      	ldr	r3, [r7, #4]
 81055aa:	681b      	ldr	r3, [r3, #0]
 81055ac:	4a5f      	ldr	r2, [pc, #380]	@ (810572c <HAL_DMA_Abort+0x468>)
 81055ae:	4293      	cmp	r3, r2
 81055b0:	d01d      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 81055b2:	687b      	ldr	r3, [r7, #4]
 81055b4:	681b      	ldr	r3, [r3, #0]
 81055b6:	4a5e      	ldr	r2, [pc, #376]	@ (8105730 <HAL_DMA_Abort+0x46c>)
 81055b8:	4293      	cmp	r3, r2
 81055ba:	d018      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	681b      	ldr	r3, [r3, #0]
 81055c0:	4a5c      	ldr	r2, [pc, #368]	@ (8105734 <HAL_DMA_Abort+0x470>)
 81055c2:	4293      	cmp	r3, r2
 81055c4:	d013      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 81055c6:	687b      	ldr	r3, [r7, #4]
 81055c8:	681b      	ldr	r3, [r3, #0]
 81055ca:	4a5b      	ldr	r2, [pc, #364]	@ (8105738 <HAL_DMA_Abort+0x474>)
 81055cc:	4293      	cmp	r3, r2
 81055ce:	d00e      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 81055d0:	687b      	ldr	r3, [r7, #4]
 81055d2:	681b      	ldr	r3, [r3, #0]
 81055d4:	4a59      	ldr	r2, [pc, #356]	@ (810573c <HAL_DMA_Abort+0x478>)
 81055d6:	4293      	cmp	r3, r2
 81055d8:	d009      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 81055da:	687b      	ldr	r3, [r7, #4]
 81055dc:	681b      	ldr	r3, [r3, #0]
 81055de:	4a58      	ldr	r2, [pc, #352]	@ (8105740 <HAL_DMA_Abort+0x47c>)
 81055e0:	4293      	cmp	r3, r2
 81055e2:	d004      	beq.n	81055ee <HAL_DMA_Abort+0x32a>
 81055e4:	687b      	ldr	r3, [r7, #4]
 81055e6:	681b      	ldr	r3, [r3, #0]
 81055e8:	4a56      	ldr	r2, [pc, #344]	@ (8105744 <HAL_DMA_Abort+0x480>)
 81055ea:	4293      	cmp	r3, r2
 81055ec:	d108      	bne.n	8105600 <HAL_DMA_Abort+0x33c>
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	681b      	ldr	r3, [r3, #0]
 81055f2:	681a      	ldr	r2, [r3, #0]
 81055f4:	687b      	ldr	r3, [r7, #4]
 81055f6:	681b      	ldr	r3, [r3, #0]
 81055f8:	f022 0201 	bic.w	r2, r2, #1
 81055fc:	601a      	str	r2, [r3, #0]
 81055fe:	e007      	b.n	8105610 <HAL_DMA_Abort+0x34c>
 8105600:	687b      	ldr	r3, [r7, #4]
 8105602:	681b      	ldr	r3, [r3, #0]
 8105604:	681a      	ldr	r2, [r3, #0]
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	681b      	ldr	r3, [r3, #0]
 810560a:	f022 0201 	bic.w	r2, r2, #1
 810560e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8105610:	e013      	b.n	810563a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8105612:	f7ff fd3b 	bl	810508c <HAL_GetTick>
 8105616:	4602      	mov	r2, r0
 8105618:	693b      	ldr	r3, [r7, #16]
 810561a:	1ad3      	subs	r3, r2, r3
 810561c:	2b05      	cmp	r3, #5
 810561e:	d90c      	bls.n	810563a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	2220      	movs	r2, #32
 8105624:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	2203      	movs	r2, #3
 810562a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810562e:	687b      	ldr	r3, [r7, #4]
 8105630:	2200      	movs	r2, #0
 8105632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8105636:	2301      	movs	r3, #1
 8105638:	e12d      	b.n	8105896 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810563a:	697b      	ldr	r3, [r7, #20]
 810563c:	681b      	ldr	r3, [r3, #0]
 810563e:	f003 0301 	and.w	r3, r3, #1
 8105642:	2b00      	cmp	r3, #0
 8105644:	d1e5      	bne.n	8105612 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	681b      	ldr	r3, [r3, #0]
 810564a:	4a2f      	ldr	r2, [pc, #188]	@ (8105708 <HAL_DMA_Abort+0x444>)
 810564c:	4293      	cmp	r3, r2
 810564e:	d04a      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 8105650:	687b      	ldr	r3, [r7, #4]
 8105652:	681b      	ldr	r3, [r3, #0]
 8105654:	4a2d      	ldr	r2, [pc, #180]	@ (810570c <HAL_DMA_Abort+0x448>)
 8105656:	4293      	cmp	r3, r2
 8105658:	d045      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	681b      	ldr	r3, [r3, #0]
 810565e:	4a2c      	ldr	r2, [pc, #176]	@ (8105710 <HAL_DMA_Abort+0x44c>)
 8105660:	4293      	cmp	r3, r2
 8105662:	d040      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	681b      	ldr	r3, [r3, #0]
 8105668:	4a2a      	ldr	r2, [pc, #168]	@ (8105714 <HAL_DMA_Abort+0x450>)
 810566a:	4293      	cmp	r3, r2
 810566c:	d03b      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	681b      	ldr	r3, [r3, #0]
 8105672:	4a29      	ldr	r2, [pc, #164]	@ (8105718 <HAL_DMA_Abort+0x454>)
 8105674:	4293      	cmp	r3, r2
 8105676:	d036      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	681b      	ldr	r3, [r3, #0]
 810567c:	4a27      	ldr	r2, [pc, #156]	@ (810571c <HAL_DMA_Abort+0x458>)
 810567e:	4293      	cmp	r3, r2
 8105680:	d031      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	681b      	ldr	r3, [r3, #0]
 8105686:	4a26      	ldr	r2, [pc, #152]	@ (8105720 <HAL_DMA_Abort+0x45c>)
 8105688:	4293      	cmp	r3, r2
 810568a:	d02c      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 810568c:	687b      	ldr	r3, [r7, #4]
 810568e:	681b      	ldr	r3, [r3, #0]
 8105690:	4a24      	ldr	r2, [pc, #144]	@ (8105724 <HAL_DMA_Abort+0x460>)
 8105692:	4293      	cmp	r3, r2
 8105694:	d027      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 8105696:	687b      	ldr	r3, [r7, #4]
 8105698:	681b      	ldr	r3, [r3, #0]
 810569a:	4a23      	ldr	r2, [pc, #140]	@ (8105728 <HAL_DMA_Abort+0x464>)
 810569c:	4293      	cmp	r3, r2
 810569e:	d022      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 81056a0:	687b      	ldr	r3, [r7, #4]
 81056a2:	681b      	ldr	r3, [r3, #0]
 81056a4:	4a21      	ldr	r2, [pc, #132]	@ (810572c <HAL_DMA_Abort+0x468>)
 81056a6:	4293      	cmp	r3, r2
 81056a8:	d01d      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 81056aa:	687b      	ldr	r3, [r7, #4]
 81056ac:	681b      	ldr	r3, [r3, #0]
 81056ae:	4a20      	ldr	r2, [pc, #128]	@ (8105730 <HAL_DMA_Abort+0x46c>)
 81056b0:	4293      	cmp	r3, r2
 81056b2:	d018      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	681b      	ldr	r3, [r3, #0]
 81056b8:	4a1e      	ldr	r2, [pc, #120]	@ (8105734 <HAL_DMA_Abort+0x470>)
 81056ba:	4293      	cmp	r3, r2
 81056bc:	d013      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 81056be:	687b      	ldr	r3, [r7, #4]
 81056c0:	681b      	ldr	r3, [r3, #0]
 81056c2:	4a1d      	ldr	r2, [pc, #116]	@ (8105738 <HAL_DMA_Abort+0x474>)
 81056c4:	4293      	cmp	r3, r2
 81056c6:	d00e      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	4a1b      	ldr	r2, [pc, #108]	@ (810573c <HAL_DMA_Abort+0x478>)
 81056ce:	4293      	cmp	r3, r2
 81056d0:	d009      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	681b      	ldr	r3, [r3, #0]
 81056d6:	4a1a      	ldr	r2, [pc, #104]	@ (8105740 <HAL_DMA_Abort+0x47c>)
 81056d8:	4293      	cmp	r3, r2
 81056da:	d004      	beq.n	81056e6 <HAL_DMA_Abort+0x422>
 81056dc:	687b      	ldr	r3, [r7, #4]
 81056de:	681b      	ldr	r3, [r3, #0]
 81056e0:	4a18      	ldr	r2, [pc, #96]	@ (8105744 <HAL_DMA_Abort+0x480>)
 81056e2:	4293      	cmp	r3, r2
 81056e4:	d101      	bne.n	81056ea <HAL_DMA_Abort+0x426>
 81056e6:	2301      	movs	r3, #1
 81056e8:	e000      	b.n	81056ec <HAL_DMA_Abort+0x428>
 81056ea:	2300      	movs	r3, #0
 81056ec:	2b00      	cmp	r3, #0
 81056ee:	d02b      	beq.n	8105748 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81056f0:	687b      	ldr	r3, [r7, #4]
 81056f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81056f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81056f6:	687b      	ldr	r3, [r7, #4]
 81056f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81056fa:	f003 031f 	and.w	r3, r3, #31
 81056fe:	223f      	movs	r2, #63	@ 0x3f
 8105700:	409a      	lsls	r2, r3
 8105702:	68bb      	ldr	r3, [r7, #8]
 8105704:	609a      	str	r2, [r3, #8]
 8105706:	e02a      	b.n	810575e <HAL_DMA_Abort+0x49a>
 8105708:	40020010 	.word	0x40020010
 810570c:	40020028 	.word	0x40020028
 8105710:	40020040 	.word	0x40020040
 8105714:	40020058 	.word	0x40020058
 8105718:	40020070 	.word	0x40020070
 810571c:	40020088 	.word	0x40020088
 8105720:	400200a0 	.word	0x400200a0
 8105724:	400200b8 	.word	0x400200b8
 8105728:	40020410 	.word	0x40020410
 810572c:	40020428 	.word	0x40020428
 8105730:	40020440 	.word	0x40020440
 8105734:	40020458 	.word	0x40020458
 8105738:	40020470 	.word	0x40020470
 810573c:	40020488 	.word	0x40020488
 8105740:	400204a0 	.word	0x400204a0
 8105744:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105748:	687b      	ldr	r3, [r7, #4]
 810574a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810574c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810574e:	687b      	ldr	r3, [r7, #4]
 8105750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105752:	f003 031f 	and.w	r3, r3, #31
 8105756:	2201      	movs	r2, #1
 8105758:	409a      	lsls	r2, r3
 810575a:	68fb      	ldr	r3, [r7, #12]
 810575c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810575e:	687b      	ldr	r3, [r7, #4]
 8105760:	681b      	ldr	r3, [r3, #0]
 8105762:	4a4f      	ldr	r2, [pc, #316]	@ (81058a0 <HAL_DMA_Abort+0x5dc>)
 8105764:	4293      	cmp	r3, r2
 8105766:	d072      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 8105768:	687b      	ldr	r3, [r7, #4]
 810576a:	681b      	ldr	r3, [r3, #0]
 810576c:	4a4d      	ldr	r2, [pc, #308]	@ (81058a4 <HAL_DMA_Abort+0x5e0>)
 810576e:	4293      	cmp	r3, r2
 8105770:	d06d      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 8105772:	687b      	ldr	r3, [r7, #4]
 8105774:	681b      	ldr	r3, [r3, #0]
 8105776:	4a4c      	ldr	r2, [pc, #304]	@ (81058a8 <HAL_DMA_Abort+0x5e4>)
 8105778:	4293      	cmp	r3, r2
 810577a:	d068      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 810577c:	687b      	ldr	r3, [r7, #4]
 810577e:	681b      	ldr	r3, [r3, #0]
 8105780:	4a4a      	ldr	r2, [pc, #296]	@ (81058ac <HAL_DMA_Abort+0x5e8>)
 8105782:	4293      	cmp	r3, r2
 8105784:	d063      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	681b      	ldr	r3, [r3, #0]
 810578a:	4a49      	ldr	r2, [pc, #292]	@ (81058b0 <HAL_DMA_Abort+0x5ec>)
 810578c:	4293      	cmp	r3, r2
 810578e:	d05e      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 8105790:	687b      	ldr	r3, [r7, #4]
 8105792:	681b      	ldr	r3, [r3, #0]
 8105794:	4a47      	ldr	r2, [pc, #284]	@ (81058b4 <HAL_DMA_Abort+0x5f0>)
 8105796:	4293      	cmp	r3, r2
 8105798:	d059      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 810579a:	687b      	ldr	r3, [r7, #4]
 810579c:	681b      	ldr	r3, [r3, #0]
 810579e:	4a46      	ldr	r2, [pc, #280]	@ (81058b8 <HAL_DMA_Abort+0x5f4>)
 81057a0:	4293      	cmp	r3, r2
 81057a2:	d054      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 81057a4:	687b      	ldr	r3, [r7, #4]
 81057a6:	681b      	ldr	r3, [r3, #0]
 81057a8:	4a44      	ldr	r2, [pc, #272]	@ (81058bc <HAL_DMA_Abort+0x5f8>)
 81057aa:	4293      	cmp	r3, r2
 81057ac:	d04f      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 81057ae:	687b      	ldr	r3, [r7, #4]
 81057b0:	681b      	ldr	r3, [r3, #0]
 81057b2:	4a43      	ldr	r2, [pc, #268]	@ (81058c0 <HAL_DMA_Abort+0x5fc>)
 81057b4:	4293      	cmp	r3, r2
 81057b6:	d04a      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 81057b8:	687b      	ldr	r3, [r7, #4]
 81057ba:	681b      	ldr	r3, [r3, #0]
 81057bc:	4a41      	ldr	r2, [pc, #260]	@ (81058c4 <HAL_DMA_Abort+0x600>)
 81057be:	4293      	cmp	r3, r2
 81057c0:	d045      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 81057c2:	687b      	ldr	r3, [r7, #4]
 81057c4:	681b      	ldr	r3, [r3, #0]
 81057c6:	4a40      	ldr	r2, [pc, #256]	@ (81058c8 <HAL_DMA_Abort+0x604>)
 81057c8:	4293      	cmp	r3, r2
 81057ca:	d040      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 81057cc:	687b      	ldr	r3, [r7, #4]
 81057ce:	681b      	ldr	r3, [r3, #0]
 81057d0:	4a3e      	ldr	r2, [pc, #248]	@ (81058cc <HAL_DMA_Abort+0x608>)
 81057d2:	4293      	cmp	r3, r2
 81057d4:	d03b      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 81057d6:	687b      	ldr	r3, [r7, #4]
 81057d8:	681b      	ldr	r3, [r3, #0]
 81057da:	4a3d      	ldr	r2, [pc, #244]	@ (81058d0 <HAL_DMA_Abort+0x60c>)
 81057dc:	4293      	cmp	r3, r2
 81057de:	d036      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 81057e0:	687b      	ldr	r3, [r7, #4]
 81057e2:	681b      	ldr	r3, [r3, #0]
 81057e4:	4a3b      	ldr	r2, [pc, #236]	@ (81058d4 <HAL_DMA_Abort+0x610>)
 81057e6:	4293      	cmp	r3, r2
 81057e8:	d031      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 81057ea:	687b      	ldr	r3, [r7, #4]
 81057ec:	681b      	ldr	r3, [r3, #0]
 81057ee:	4a3a      	ldr	r2, [pc, #232]	@ (81058d8 <HAL_DMA_Abort+0x614>)
 81057f0:	4293      	cmp	r3, r2
 81057f2:	d02c      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 81057f4:	687b      	ldr	r3, [r7, #4]
 81057f6:	681b      	ldr	r3, [r3, #0]
 81057f8:	4a38      	ldr	r2, [pc, #224]	@ (81058dc <HAL_DMA_Abort+0x618>)
 81057fa:	4293      	cmp	r3, r2
 81057fc:	d027      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 81057fe:	687b      	ldr	r3, [r7, #4]
 8105800:	681b      	ldr	r3, [r3, #0]
 8105802:	4a37      	ldr	r2, [pc, #220]	@ (81058e0 <HAL_DMA_Abort+0x61c>)
 8105804:	4293      	cmp	r3, r2
 8105806:	d022      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 8105808:	687b      	ldr	r3, [r7, #4]
 810580a:	681b      	ldr	r3, [r3, #0]
 810580c:	4a35      	ldr	r2, [pc, #212]	@ (81058e4 <HAL_DMA_Abort+0x620>)
 810580e:	4293      	cmp	r3, r2
 8105810:	d01d      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 8105812:	687b      	ldr	r3, [r7, #4]
 8105814:	681b      	ldr	r3, [r3, #0]
 8105816:	4a34      	ldr	r2, [pc, #208]	@ (81058e8 <HAL_DMA_Abort+0x624>)
 8105818:	4293      	cmp	r3, r2
 810581a:	d018      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 810581c:	687b      	ldr	r3, [r7, #4]
 810581e:	681b      	ldr	r3, [r3, #0]
 8105820:	4a32      	ldr	r2, [pc, #200]	@ (81058ec <HAL_DMA_Abort+0x628>)
 8105822:	4293      	cmp	r3, r2
 8105824:	d013      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 8105826:	687b      	ldr	r3, [r7, #4]
 8105828:	681b      	ldr	r3, [r3, #0]
 810582a:	4a31      	ldr	r2, [pc, #196]	@ (81058f0 <HAL_DMA_Abort+0x62c>)
 810582c:	4293      	cmp	r3, r2
 810582e:	d00e      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	4a2f      	ldr	r2, [pc, #188]	@ (81058f4 <HAL_DMA_Abort+0x630>)
 8105836:	4293      	cmp	r3, r2
 8105838:	d009      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 810583a:	687b      	ldr	r3, [r7, #4]
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	4a2e      	ldr	r2, [pc, #184]	@ (81058f8 <HAL_DMA_Abort+0x634>)
 8105840:	4293      	cmp	r3, r2
 8105842:	d004      	beq.n	810584e <HAL_DMA_Abort+0x58a>
 8105844:	687b      	ldr	r3, [r7, #4]
 8105846:	681b      	ldr	r3, [r3, #0]
 8105848:	4a2c      	ldr	r2, [pc, #176]	@ (81058fc <HAL_DMA_Abort+0x638>)
 810584a:	4293      	cmp	r3, r2
 810584c:	d101      	bne.n	8105852 <HAL_DMA_Abort+0x58e>
 810584e:	2301      	movs	r3, #1
 8105850:	e000      	b.n	8105854 <HAL_DMA_Abort+0x590>
 8105852:	2300      	movs	r3, #0
 8105854:	2b00      	cmp	r3, #0
 8105856:	d015      	beq.n	8105884 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810585c:	687a      	ldr	r2, [r7, #4]
 810585e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8105860:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8105862:	687b      	ldr	r3, [r7, #4]
 8105864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105866:	2b00      	cmp	r3, #0
 8105868:	d00c      	beq.n	8105884 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810586e:	681a      	ldr	r2, [r3, #0]
 8105870:	687b      	ldr	r3, [r7, #4]
 8105872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8105878:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810587a:	687b      	ldr	r3, [r7, #4]
 810587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810587e:	687a      	ldr	r2, [r7, #4]
 8105880:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8105882:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8105884:	687b      	ldr	r3, [r7, #4]
 8105886:	2201      	movs	r2, #1
 8105888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810588c:	687b      	ldr	r3, [r7, #4]
 810588e:	2200      	movs	r2, #0
 8105890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8105894:	2300      	movs	r3, #0
}
 8105896:	4618      	mov	r0, r3
 8105898:	3718      	adds	r7, #24
 810589a:	46bd      	mov	sp, r7
 810589c:	bd80      	pop	{r7, pc}
 810589e:	bf00      	nop
 81058a0:	40020010 	.word	0x40020010
 81058a4:	40020028 	.word	0x40020028
 81058a8:	40020040 	.word	0x40020040
 81058ac:	40020058 	.word	0x40020058
 81058b0:	40020070 	.word	0x40020070
 81058b4:	40020088 	.word	0x40020088
 81058b8:	400200a0 	.word	0x400200a0
 81058bc:	400200b8 	.word	0x400200b8
 81058c0:	40020410 	.word	0x40020410
 81058c4:	40020428 	.word	0x40020428
 81058c8:	40020440 	.word	0x40020440
 81058cc:	40020458 	.word	0x40020458
 81058d0:	40020470 	.word	0x40020470
 81058d4:	40020488 	.word	0x40020488
 81058d8:	400204a0 	.word	0x400204a0
 81058dc:	400204b8 	.word	0x400204b8
 81058e0:	58025408 	.word	0x58025408
 81058e4:	5802541c 	.word	0x5802541c
 81058e8:	58025430 	.word	0x58025430
 81058ec:	58025444 	.word	0x58025444
 81058f0:	58025458 	.word	0x58025458
 81058f4:	5802546c 	.word	0x5802546c
 81058f8:	58025480 	.word	0x58025480
 81058fc:	58025494 	.word	0x58025494

08105900 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8105900:	b580      	push	{r7, lr}
 8105902:	b084      	sub	sp, #16
 8105904:	af00      	add	r7, sp, #0
 8105906:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8105908:	687b      	ldr	r3, [r7, #4]
 810590a:	2b00      	cmp	r3, #0
 810590c:	d101      	bne.n	8105912 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810590e:	2301      	movs	r3, #1
 8105910:	e237      	b.n	8105d82 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8105912:	687b      	ldr	r3, [r7, #4]
 8105914:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8105918:	b2db      	uxtb	r3, r3
 810591a:	2b02      	cmp	r3, #2
 810591c:	d004      	beq.n	8105928 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810591e:	687b      	ldr	r3, [r7, #4]
 8105920:	2280      	movs	r2, #128	@ 0x80
 8105922:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8105924:	2301      	movs	r3, #1
 8105926:	e22c      	b.n	8105d82 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105928:	687b      	ldr	r3, [r7, #4]
 810592a:	681b      	ldr	r3, [r3, #0]
 810592c:	4a5c      	ldr	r2, [pc, #368]	@ (8105aa0 <HAL_DMA_Abort_IT+0x1a0>)
 810592e:	4293      	cmp	r3, r2
 8105930:	d04a      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 8105932:	687b      	ldr	r3, [r7, #4]
 8105934:	681b      	ldr	r3, [r3, #0]
 8105936:	4a5b      	ldr	r2, [pc, #364]	@ (8105aa4 <HAL_DMA_Abort_IT+0x1a4>)
 8105938:	4293      	cmp	r3, r2
 810593a:	d045      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 810593c:	687b      	ldr	r3, [r7, #4]
 810593e:	681b      	ldr	r3, [r3, #0]
 8105940:	4a59      	ldr	r2, [pc, #356]	@ (8105aa8 <HAL_DMA_Abort_IT+0x1a8>)
 8105942:	4293      	cmp	r3, r2
 8105944:	d040      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	681b      	ldr	r3, [r3, #0]
 810594a:	4a58      	ldr	r2, [pc, #352]	@ (8105aac <HAL_DMA_Abort_IT+0x1ac>)
 810594c:	4293      	cmp	r3, r2
 810594e:	d03b      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 8105950:	687b      	ldr	r3, [r7, #4]
 8105952:	681b      	ldr	r3, [r3, #0]
 8105954:	4a56      	ldr	r2, [pc, #344]	@ (8105ab0 <HAL_DMA_Abort_IT+0x1b0>)
 8105956:	4293      	cmp	r3, r2
 8105958:	d036      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 810595a:	687b      	ldr	r3, [r7, #4]
 810595c:	681b      	ldr	r3, [r3, #0]
 810595e:	4a55      	ldr	r2, [pc, #340]	@ (8105ab4 <HAL_DMA_Abort_IT+0x1b4>)
 8105960:	4293      	cmp	r3, r2
 8105962:	d031      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 8105964:	687b      	ldr	r3, [r7, #4]
 8105966:	681b      	ldr	r3, [r3, #0]
 8105968:	4a53      	ldr	r2, [pc, #332]	@ (8105ab8 <HAL_DMA_Abort_IT+0x1b8>)
 810596a:	4293      	cmp	r3, r2
 810596c:	d02c      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	681b      	ldr	r3, [r3, #0]
 8105972:	4a52      	ldr	r2, [pc, #328]	@ (8105abc <HAL_DMA_Abort_IT+0x1bc>)
 8105974:	4293      	cmp	r3, r2
 8105976:	d027      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	681b      	ldr	r3, [r3, #0]
 810597c:	4a50      	ldr	r2, [pc, #320]	@ (8105ac0 <HAL_DMA_Abort_IT+0x1c0>)
 810597e:	4293      	cmp	r3, r2
 8105980:	d022      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	681b      	ldr	r3, [r3, #0]
 8105986:	4a4f      	ldr	r2, [pc, #316]	@ (8105ac4 <HAL_DMA_Abort_IT+0x1c4>)
 8105988:	4293      	cmp	r3, r2
 810598a:	d01d      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	4a4d      	ldr	r2, [pc, #308]	@ (8105ac8 <HAL_DMA_Abort_IT+0x1c8>)
 8105992:	4293      	cmp	r3, r2
 8105994:	d018      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 8105996:	687b      	ldr	r3, [r7, #4]
 8105998:	681b      	ldr	r3, [r3, #0]
 810599a:	4a4c      	ldr	r2, [pc, #304]	@ (8105acc <HAL_DMA_Abort_IT+0x1cc>)
 810599c:	4293      	cmp	r3, r2
 810599e:	d013      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	681b      	ldr	r3, [r3, #0]
 81059a4:	4a4a      	ldr	r2, [pc, #296]	@ (8105ad0 <HAL_DMA_Abort_IT+0x1d0>)
 81059a6:	4293      	cmp	r3, r2
 81059a8:	d00e      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	681b      	ldr	r3, [r3, #0]
 81059ae:	4a49      	ldr	r2, [pc, #292]	@ (8105ad4 <HAL_DMA_Abort_IT+0x1d4>)
 81059b0:	4293      	cmp	r3, r2
 81059b2:	d009      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 81059b4:	687b      	ldr	r3, [r7, #4]
 81059b6:	681b      	ldr	r3, [r3, #0]
 81059b8:	4a47      	ldr	r2, [pc, #284]	@ (8105ad8 <HAL_DMA_Abort_IT+0x1d8>)
 81059ba:	4293      	cmp	r3, r2
 81059bc:	d004      	beq.n	81059c8 <HAL_DMA_Abort_IT+0xc8>
 81059be:	687b      	ldr	r3, [r7, #4]
 81059c0:	681b      	ldr	r3, [r3, #0]
 81059c2:	4a46      	ldr	r2, [pc, #280]	@ (8105adc <HAL_DMA_Abort_IT+0x1dc>)
 81059c4:	4293      	cmp	r3, r2
 81059c6:	d101      	bne.n	81059cc <HAL_DMA_Abort_IT+0xcc>
 81059c8:	2301      	movs	r3, #1
 81059ca:	e000      	b.n	81059ce <HAL_DMA_Abort_IT+0xce>
 81059cc:	2300      	movs	r3, #0
 81059ce:	2b00      	cmp	r3, #0
 81059d0:	f000 8086 	beq.w	8105ae0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81059d4:	687b      	ldr	r3, [r7, #4]
 81059d6:	2204      	movs	r2, #4
 81059d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	681b      	ldr	r3, [r3, #0]
 81059e0:	4a2f      	ldr	r2, [pc, #188]	@ (8105aa0 <HAL_DMA_Abort_IT+0x1a0>)
 81059e2:	4293      	cmp	r3, r2
 81059e4:	d04a      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 81059e6:	687b      	ldr	r3, [r7, #4]
 81059e8:	681b      	ldr	r3, [r3, #0]
 81059ea:	4a2e      	ldr	r2, [pc, #184]	@ (8105aa4 <HAL_DMA_Abort_IT+0x1a4>)
 81059ec:	4293      	cmp	r3, r2
 81059ee:	d045      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 81059f0:	687b      	ldr	r3, [r7, #4]
 81059f2:	681b      	ldr	r3, [r3, #0]
 81059f4:	4a2c      	ldr	r2, [pc, #176]	@ (8105aa8 <HAL_DMA_Abort_IT+0x1a8>)
 81059f6:	4293      	cmp	r3, r2
 81059f8:	d040      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 81059fa:	687b      	ldr	r3, [r7, #4]
 81059fc:	681b      	ldr	r3, [r3, #0]
 81059fe:	4a2b      	ldr	r2, [pc, #172]	@ (8105aac <HAL_DMA_Abort_IT+0x1ac>)
 8105a00:	4293      	cmp	r3, r2
 8105a02:	d03b      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	681b      	ldr	r3, [r3, #0]
 8105a08:	4a29      	ldr	r2, [pc, #164]	@ (8105ab0 <HAL_DMA_Abort_IT+0x1b0>)
 8105a0a:	4293      	cmp	r3, r2
 8105a0c:	d036      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	681b      	ldr	r3, [r3, #0]
 8105a12:	4a28      	ldr	r2, [pc, #160]	@ (8105ab4 <HAL_DMA_Abort_IT+0x1b4>)
 8105a14:	4293      	cmp	r3, r2
 8105a16:	d031      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 8105a18:	687b      	ldr	r3, [r7, #4]
 8105a1a:	681b      	ldr	r3, [r3, #0]
 8105a1c:	4a26      	ldr	r2, [pc, #152]	@ (8105ab8 <HAL_DMA_Abort_IT+0x1b8>)
 8105a1e:	4293      	cmp	r3, r2
 8105a20:	d02c      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	681b      	ldr	r3, [r3, #0]
 8105a26:	4a25      	ldr	r2, [pc, #148]	@ (8105abc <HAL_DMA_Abort_IT+0x1bc>)
 8105a28:	4293      	cmp	r3, r2
 8105a2a:	d027      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	681b      	ldr	r3, [r3, #0]
 8105a30:	4a23      	ldr	r2, [pc, #140]	@ (8105ac0 <HAL_DMA_Abort_IT+0x1c0>)
 8105a32:	4293      	cmp	r3, r2
 8105a34:	d022      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 8105a36:	687b      	ldr	r3, [r7, #4]
 8105a38:	681b      	ldr	r3, [r3, #0]
 8105a3a:	4a22      	ldr	r2, [pc, #136]	@ (8105ac4 <HAL_DMA_Abort_IT+0x1c4>)
 8105a3c:	4293      	cmp	r3, r2
 8105a3e:	d01d      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 8105a40:	687b      	ldr	r3, [r7, #4]
 8105a42:	681b      	ldr	r3, [r3, #0]
 8105a44:	4a20      	ldr	r2, [pc, #128]	@ (8105ac8 <HAL_DMA_Abort_IT+0x1c8>)
 8105a46:	4293      	cmp	r3, r2
 8105a48:	d018      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	681b      	ldr	r3, [r3, #0]
 8105a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8105acc <HAL_DMA_Abort_IT+0x1cc>)
 8105a50:	4293      	cmp	r3, r2
 8105a52:	d013      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 8105a54:	687b      	ldr	r3, [r7, #4]
 8105a56:	681b      	ldr	r3, [r3, #0]
 8105a58:	4a1d      	ldr	r2, [pc, #116]	@ (8105ad0 <HAL_DMA_Abort_IT+0x1d0>)
 8105a5a:	4293      	cmp	r3, r2
 8105a5c:	d00e      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	681b      	ldr	r3, [r3, #0]
 8105a62:	4a1c      	ldr	r2, [pc, #112]	@ (8105ad4 <HAL_DMA_Abort_IT+0x1d4>)
 8105a64:	4293      	cmp	r3, r2
 8105a66:	d009      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 8105a68:	687b      	ldr	r3, [r7, #4]
 8105a6a:	681b      	ldr	r3, [r3, #0]
 8105a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8105ad8 <HAL_DMA_Abort_IT+0x1d8>)
 8105a6e:	4293      	cmp	r3, r2
 8105a70:	d004      	beq.n	8105a7c <HAL_DMA_Abort_IT+0x17c>
 8105a72:	687b      	ldr	r3, [r7, #4]
 8105a74:	681b      	ldr	r3, [r3, #0]
 8105a76:	4a19      	ldr	r2, [pc, #100]	@ (8105adc <HAL_DMA_Abort_IT+0x1dc>)
 8105a78:	4293      	cmp	r3, r2
 8105a7a:	d108      	bne.n	8105a8e <HAL_DMA_Abort_IT+0x18e>
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	681b      	ldr	r3, [r3, #0]
 8105a80:	681a      	ldr	r2, [r3, #0]
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	681b      	ldr	r3, [r3, #0]
 8105a86:	f022 0201 	bic.w	r2, r2, #1
 8105a8a:	601a      	str	r2, [r3, #0]
 8105a8c:	e178      	b.n	8105d80 <HAL_DMA_Abort_IT+0x480>
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	681b      	ldr	r3, [r3, #0]
 8105a92:	681a      	ldr	r2, [r3, #0]
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	681b      	ldr	r3, [r3, #0]
 8105a98:	f022 0201 	bic.w	r2, r2, #1
 8105a9c:	601a      	str	r2, [r3, #0]
 8105a9e:	e16f      	b.n	8105d80 <HAL_DMA_Abort_IT+0x480>
 8105aa0:	40020010 	.word	0x40020010
 8105aa4:	40020028 	.word	0x40020028
 8105aa8:	40020040 	.word	0x40020040
 8105aac:	40020058 	.word	0x40020058
 8105ab0:	40020070 	.word	0x40020070
 8105ab4:	40020088 	.word	0x40020088
 8105ab8:	400200a0 	.word	0x400200a0
 8105abc:	400200b8 	.word	0x400200b8
 8105ac0:	40020410 	.word	0x40020410
 8105ac4:	40020428 	.word	0x40020428
 8105ac8:	40020440 	.word	0x40020440
 8105acc:	40020458 	.word	0x40020458
 8105ad0:	40020470 	.word	0x40020470
 8105ad4:	40020488 	.word	0x40020488
 8105ad8:	400204a0 	.word	0x400204a0
 8105adc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8105ae0:	687b      	ldr	r3, [r7, #4]
 8105ae2:	681b      	ldr	r3, [r3, #0]
 8105ae4:	681a      	ldr	r2, [r3, #0]
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	681b      	ldr	r3, [r3, #0]
 8105aea:	f022 020e 	bic.w	r2, r2, #14
 8105aee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	681b      	ldr	r3, [r3, #0]
 8105af4:	4a6c      	ldr	r2, [pc, #432]	@ (8105ca8 <HAL_DMA_Abort_IT+0x3a8>)
 8105af6:	4293      	cmp	r3, r2
 8105af8:	d04a      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105afa:	687b      	ldr	r3, [r7, #4]
 8105afc:	681b      	ldr	r3, [r3, #0]
 8105afe:	4a6b      	ldr	r2, [pc, #428]	@ (8105cac <HAL_DMA_Abort_IT+0x3ac>)
 8105b00:	4293      	cmp	r3, r2
 8105b02:	d045      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b04:	687b      	ldr	r3, [r7, #4]
 8105b06:	681b      	ldr	r3, [r3, #0]
 8105b08:	4a69      	ldr	r2, [pc, #420]	@ (8105cb0 <HAL_DMA_Abort_IT+0x3b0>)
 8105b0a:	4293      	cmp	r3, r2
 8105b0c:	d040      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b0e:	687b      	ldr	r3, [r7, #4]
 8105b10:	681b      	ldr	r3, [r3, #0]
 8105b12:	4a68      	ldr	r2, [pc, #416]	@ (8105cb4 <HAL_DMA_Abort_IT+0x3b4>)
 8105b14:	4293      	cmp	r3, r2
 8105b16:	d03b      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b18:	687b      	ldr	r3, [r7, #4]
 8105b1a:	681b      	ldr	r3, [r3, #0]
 8105b1c:	4a66      	ldr	r2, [pc, #408]	@ (8105cb8 <HAL_DMA_Abort_IT+0x3b8>)
 8105b1e:	4293      	cmp	r3, r2
 8105b20:	d036      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b22:	687b      	ldr	r3, [r7, #4]
 8105b24:	681b      	ldr	r3, [r3, #0]
 8105b26:	4a65      	ldr	r2, [pc, #404]	@ (8105cbc <HAL_DMA_Abort_IT+0x3bc>)
 8105b28:	4293      	cmp	r3, r2
 8105b2a:	d031      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b2c:	687b      	ldr	r3, [r7, #4]
 8105b2e:	681b      	ldr	r3, [r3, #0]
 8105b30:	4a63      	ldr	r2, [pc, #396]	@ (8105cc0 <HAL_DMA_Abort_IT+0x3c0>)
 8105b32:	4293      	cmp	r3, r2
 8105b34:	d02c      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	681b      	ldr	r3, [r3, #0]
 8105b3a:	4a62      	ldr	r2, [pc, #392]	@ (8105cc4 <HAL_DMA_Abort_IT+0x3c4>)
 8105b3c:	4293      	cmp	r3, r2
 8105b3e:	d027      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b40:	687b      	ldr	r3, [r7, #4]
 8105b42:	681b      	ldr	r3, [r3, #0]
 8105b44:	4a60      	ldr	r2, [pc, #384]	@ (8105cc8 <HAL_DMA_Abort_IT+0x3c8>)
 8105b46:	4293      	cmp	r3, r2
 8105b48:	d022      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b4a:	687b      	ldr	r3, [r7, #4]
 8105b4c:	681b      	ldr	r3, [r3, #0]
 8105b4e:	4a5f      	ldr	r2, [pc, #380]	@ (8105ccc <HAL_DMA_Abort_IT+0x3cc>)
 8105b50:	4293      	cmp	r3, r2
 8105b52:	d01d      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b54:	687b      	ldr	r3, [r7, #4]
 8105b56:	681b      	ldr	r3, [r3, #0]
 8105b58:	4a5d      	ldr	r2, [pc, #372]	@ (8105cd0 <HAL_DMA_Abort_IT+0x3d0>)
 8105b5a:	4293      	cmp	r3, r2
 8105b5c:	d018      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b5e:	687b      	ldr	r3, [r7, #4]
 8105b60:	681b      	ldr	r3, [r3, #0]
 8105b62:	4a5c      	ldr	r2, [pc, #368]	@ (8105cd4 <HAL_DMA_Abort_IT+0x3d4>)
 8105b64:	4293      	cmp	r3, r2
 8105b66:	d013      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b68:	687b      	ldr	r3, [r7, #4]
 8105b6a:	681b      	ldr	r3, [r3, #0]
 8105b6c:	4a5a      	ldr	r2, [pc, #360]	@ (8105cd8 <HAL_DMA_Abort_IT+0x3d8>)
 8105b6e:	4293      	cmp	r3, r2
 8105b70:	d00e      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b72:	687b      	ldr	r3, [r7, #4]
 8105b74:	681b      	ldr	r3, [r3, #0]
 8105b76:	4a59      	ldr	r2, [pc, #356]	@ (8105cdc <HAL_DMA_Abort_IT+0x3dc>)
 8105b78:	4293      	cmp	r3, r2
 8105b7a:	d009      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	681b      	ldr	r3, [r3, #0]
 8105b80:	4a57      	ldr	r2, [pc, #348]	@ (8105ce0 <HAL_DMA_Abort_IT+0x3e0>)
 8105b82:	4293      	cmp	r3, r2
 8105b84:	d004      	beq.n	8105b90 <HAL_DMA_Abort_IT+0x290>
 8105b86:	687b      	ldr	r3, [r7, #4]
 8105b88:	681b      	ldr	r3, [r3, #0]
 8105b8a:	4a56      	ldr	r2, [pc, #344]	@ (8105ce4 <HAL_DMA_Abort_IT+0x3e4>)
 8105b8c:	4293      	cmp	r3, r2
 8105b8e:	d108      	bne.n	8105ba2 <HAL_DMA_Abort_IT+0x2a2>
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	681b      	ldr	r3, [r3, #0]
 8105b94:	681a      	ldr	r2, [r3, #0]
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	681b      	ldr	r3, [r3, #0]
 8105b9a:	f022 0201 	bic.w	r2, r2, #1
 8105b9e:	601a      	str	r2, [r3, #0]
 8105ba0:	e007      	b.n	8105bb2 <HAL_DMA_Abort_IT+0x2b2>
 8105ba2:	687b      	ldr	r3, [r7, #4]
 8105ba4:	681b      	ldr	r3, [r3, #0]
 8105ba6:	681a      	ldr	r2, [r3, #0]
 8105ba8:	687b      	ldr	r3, [r7, #4]
 8105baa:	681b      	ldr	r3, [r3, #0]
 8105bac:	f022 0201 	bic.w	r2, r2, #1
 8105bb0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105bb2:	687b      	ldr	r3, [r7, #4]
 8105bb4:	681b      	ldr	r3, [r3, #0]
 8105bb6:	4a3c      	ldr	r2, [pc, #240]	@ (8105ca8 <HAL_DMA_Abort_IT+0x3a8>)
 8105bb8:	4293      	cmp	r3, r2
 8105bba:	d072      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105bbc:	687b      	ldr	r3, [r7, #4]
 8105bbe:	681b      	ldr	r3, [r3, #0]
 8105bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8105cac <HAL_DMA_Abort_IT+0x3ac>)
 8105bc2:	4293      	cmp	r3, r2
 8105bc4:	d06d      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105bc6:	687b      	ldr	r3, [r7, #4]
 8105bc8:	681b      	ldr	r3, [r3, #0]
 8105bca:	4a39      	ldr	r2, [pc, #228]	@ (8105cb0 <HAL_DMA_Abort_IT+0x3b0>)
 8105bcc:	4293      	cmp	r3, r2
 8105bce:	d068      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105bd0:	687b      	ldr	r3, [r7, #4]
 8105bd2:	681b      	ldr	r3, [r3, #0]
 8105bd4:	4a37      	ldr	r2, [pc, #220]	@ (8105cb4 <HAL_DMA_Abort_IT+0x3b4>)
 8105bd6:	4293      	cmp	r3, r2
 8105bd8:	d063      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105bda:	687b      	ldr	r3, [r7, #4]
 8105bdc:	681b      	ldr	r3, [r3, #0]
 8105bde:	4a36      	ldr	r2, [pc, #216]	@ (8105cb8 <HAL_DMA_Abort_IT+0x3b8>)
 8105be0:	4293      	cmp	r3, r2
 8105be2:	d05e      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105be4:	687b      	ldr	r3, [r7, #4]
 8105be6:	681b      	ldr	r3, [r3, #0]
 8105be8:	4a34      	ldr	r2, [pc, #208]	@ (8105cbc <HAL_DMA_Abort_IT+0x3bc>)
 8105bea:	4293      	cmp	r3, r2
 8105bec:	d059      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105bee:	687b      	ldr	r3, [r7, #4]
 8105bf0:	681b      	ldr	r3, [r3, #0]
 8105bf2:	4a33      	ldr	r2, [pc, #204]	@ (8105cc0 <HAL_DMA_Abort_IT+0x3c0>)
 8105bf4:	4293      	cmp	r3, r2
 8105bf6:	d054      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105bf8:	687b      	ldr	r3, [r7, #4]
 8105bfa:	681b      	ldr	r3, [r3, #0]
 8105bfc:	4a31      	ldr	r2, [pc, #196]	@ (8105cc4 <HAL_DMA_Abort_IT+0x3c4>)
 8105bfe:	4293      	cmp	r3, r2
 8105c00:	d04f      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c02:	687b      	ldr	r3, [r7, #4]
 8105c04:	681b      	ldr	r3, [r3, #0]
 8105c06:	4a30      	ldr	r2, [pc, #192]	@ (8105cc8 <HAL_DMA_Abort_IT+0x3c8>)
 8105c08:	4293      	cmp	r3, r2
 8105c0a:	d04a      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c0c:	687b      	ldr	r3, [r7, #4]
 8105c0e:	681b      	ldr	r3, [r3, #0]
 8105c10:	4a2e      	ldr	r2, [pc, #184]	@ (8105ccc <HAL_DMA_Abort_IT+0x3cc>)
 8105c12:	4293      	cmp	r3, r2
 8105c14:	d045      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c16:	687b      	ldr	r3, [r7, #4]
 8105c18:	681b      	ldr	r3, [r3, #0]
 8105c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8105cd0 <HAL_DMA_Abort_IT+0x3d0>)
 8105c1c:	4293      	cmp	r3, r2
 8105c1e:	d040      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c20:	687b      	ldr	r3, [r7, #4]
 8105c22:	681b      	ldr	r3, [r3, #0]
 8105c24:	4a2b      	ldr	r2, [pc, #172]	@ (8105cd4 <HAL_DMA_Abort_IT+0x3d4>)
 8105c26:	4293      	cmp	r3, r2
 8105c28:	d03b      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c2a:	687b      	ldr	r3, [r7, #4]
 8105c2c:	681b      	ldr	r3, [r3, #0]
 8105c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8105cd8 <HAL_DMA_Abort_IT+0x3d8>)
 8105c30:	4293      	cmp	r3, r2
 8105c32:	d036      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	681b      	ldr	r3, [r3, #0]
 8105c38:	4a28      	ldr	r2, [pc, #160]	@ (8105cdc <HAL_DMA_Abort_IT+0x3dc>)
 8105c3a:	4293      	cmp	r3, r2
 8105c3c:	d031      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c3e:	687b      	ldr	r3, [r7, #4]
 8105c40:	681b      	ldr	r3, [r3, #0]
 8105c42:	4a27      	ldr	r2, [pc, #156]	@ (8105ce0 <HAL_DMA_Abort_IT+0x3e0>)
 8105c44:	4293      	cmp	r3, r2
 8105c46:	d02c      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c48:	687b      	ldr	r3, [r7, #4]
 8105c4a:	681b      	ldr	r3, [r3, #0]
 8105c4c:	4a25      	ldr	r2, [pc, #148]	@ (8105ce4 <HAL_DMA_Abort_IT+0x3e4>)
 8105c4e:	4293      	cmp	r3, r2
 8105c50:	d027      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c52:	687b      	ldr	r3, [r7, #4]
 8105c54:	681b      	ldr	r3, [r3, #0]
 8105c56:	4a24      	ldr	r2, [pc, #144]	@ (8105ce8 <HAL_DMA_Abort_IT+0x3e8>)
 8105c58:	4293      	cmp	r3, r2
 8105c5a:	d022      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c5c:	687b      	ldr	r3, [r7, #4]
 8105c5e:	681b      	ldr	r3, [r3, #0]
 8105c60:	4a22      	ldr	r2, [pc, #136]	@ (8105cec <HAL_DMA_Abort_IT+0x3ec>)
 8105c62:	4293      	cmp	r3, r2
 8105c64:	d01d      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c66:	687b      	ldr	r3, [r7, #4]
 8105c68:	681b      	ldr	r3, [r3, #0]
 8105c6a:	4a21      	ldr	r2, [pc, #132]	@ (8105cf0 <HAL_DMA_Abort_IT+0x3f0>)
 8105c6c:	4293      	cmp	r3, r2
 8105c6e:	d018      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	681b      	ldr	r3, [r3, #0]
 8105c74:	4a1f      	ldr	r2, [pc, #124]	@ (8105cf4 <HAL_DMA_Abort_IT+0x3f4>)
 8105c76:	4293      	cmp	r3, r2
 8105c78:	d013      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	681b      	ldr	r3, [r3, #0]
 8105c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8105cf8 <HAL_DMA_Abort_IT+0x3f8>)
 8105c80:	4293      	cmp	r3, r2
 8105c82:	d00e      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	681b      	ldr	r3, [r3, #0]
 8105c88:	4a1c      	ldr	r2, [pc, #112]	@ (8105cfc <HAL_DMA_Abort_IT+0x3fc>)
 8105c8a:	4293      	cmp	r3, r2
 8105c8c:	d009      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c8e:	687b      	ldr	r3, [r7, #4]
 8105c90:	681b      	ldr	r3, [r3, #0]
 8105c92:	4a1b      	ldr	r2, [pc, #108]	@ (8105d00 <HAL_DMA_Abort_IT+0x400>)
 8105c94:	4293      	cmp	r3, r2
 8105c96:	d004      	beq.n	8105ca2 <HAL_DMA_Abort_IT+0x3a2>
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	681b      	ldr	r3, [r3, #0]
 8105c9c:	4a19      	ldr	r2, [pc, #100]	@ (8105d04 <HAL_DMA_Abort_IT+0x404>)
 8105c9e:	4293      	cmp	r3, r2
 8105ca0:	d132      	bne.n	8105d08 <HAL_DMA_Abort_IT+0x408>
 8105ca2:	2301      	movs	r3, #1
 8105ca4:	e031      	b.n	8105d0a <HAL_DMA_Abort_IT+0x40a>
 8105ca6:	bf00      	nop
 8105ca8:	40020010 	.word	0x40020010
 8105cac:	40020028 	.word	0x40020028
 8105cb0:	40020040 	.word	0x40020040
 8105cb4:	40020058 	.word	0x40020058
 8105cb8:	40020070 	.word	0x40020070
 8105cbc:	40020088 	.word	0x40020088
 8105cc0:	400200a0 	.word	0x400200a0
 8105cc4:	400200b8 	.word	0x400200b8
 8105cc8:	40020410 	.word	0x40020410
 8105ccc:	40020428 	.word	0x40020428
 8105cd0:	40020440 	.word	0x40020440
 8105cd4:	40020458 	.word	0x40020458
 8105cd8:	40020470 	.word	0x40020470
 8105cdc:	40020488 	.word	0x40020488
 8105ce0:	400204a0 	.word	0x400204a0
 8105ce4:	400204b8 	.word	0x400204b8
 8105ce8:	58025408 	.word	0x58025408
 8105cec:	5802541c 	.word	0x5802541c
 8105cf0:	58025430 	.word	0x58025430
 8105cf4:	58025444 	.word	0x58025444
 8105cf8:	58025458 	.word	0x58025458
 8105cfc:	5802546c 	.word	0x5802546c
 8105d00:	58025480 	.word	0x58025480
 8105d04:	58025494 	.word	0x58025494
 8105d08:	2300      	movs	r3, #0
 8105d0a:	2b00      	cmp	r3, #0
 8105d0c:	d028      	beq.n	8105d60 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105d12:	681a      	ldr	r2, [r3, #0]
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105d18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8105d1c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105d1e:	687b      	ldr	r3, [r7, #4]
 8105d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105d22:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105d28:	f003 031f 	and.w	r3, r3, #31
 8105d2c:	2201      	movs	r2, #1
 8105d2e:	409a      	lsls	r2, r3
 8105d30:	68fb      	ldr	r3, [r7, #12]
 8105d32:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105d34:	687b      	ldr	r3, [r7, #4]
 8105d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105d38:	687a      	ldr	r2, [r7, #4]
 8105d3a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8105d3c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8105d3e:	687b      	ldr	r3, [r7, #4]
 8105d40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105d42:	2b00      	cmp	r3, #0
 8105d44:	d00c      	beq.n	8105d60 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105d4a:	681a      	ldr	r2, [r3, #0]
 8105d4c:	687b      	ldr	r3, [r7, #4]
 8105d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105d50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8105d54:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105d56:	687b      	ldr	r3, [r7, #4]
 8105d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105d5a:	687a      	ldr	r2, [r7, #4]
 8105d5c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8105d5e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105d60:	687b      	ldr	r3, [r7, #4]
 8105d62:	2201      	movs	r2, #1
 8105d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	2200      	movs	r2, #0
 8105d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8105d70:	687b      	ldr	r3, [r7, #4]
 8105d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105d74:	2b00      	cmp	r3, #0
 8105d76:	d003      	beq.n	8105d80 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8105d78:	687b      	ldr	r3, [r7, #4]
 8105d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105d7c:	6878      	ldr	r0, [r7, #4]
 8105d7e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8105d80:	2300      	movs	r3, #0
}
 8105d82:	4618      	mov	r0, r3
 8105d84:	3710      	adds	r7, #16
 8105d86:	46bd      	mov	sp, r7
 8105d88:	bd80      	pop	{r7, pc}
 8105d8a:	bf00      	nop

08105d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8105d8c:	b480      	push	{r7}
 8105d8e:	b089      	sub	sp, #36	@ 0x24
 8105d90:	af00      	add	r7, sp, #0
 8105d92:	6078      	str	r0, [r7, #4]
 8105d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8105d96:	2300      	movs	r3, #0
 8105d98:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8105d9a:	4b89      	ldr	r3, [pc, #548]	@ (8105fc0 <HAL_GPIO_Init+0x234>)
 8105d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105d9e:	e194      	b.n	81060ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8105da0:	683b      	ldr	r3, [r7, #0]
 8105da2:	681a      	ldr	r2, [r3, #0]
 8105da4:	2101      	movs	r1, #1
 8105da6:	69fb      	ldr	r3, [r7, #28]
 8105da8:	fa01 f303 	lsl.w	r3, r1, r3
 8105dac:	4013      	ands	r3, r2
 8105dae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8105db0:	693b      	ldr	r3, [r7, #16]
 8105db2:	2b00      	cmp	r3, #0
 8105db4:	f000 8186 	beq.w	81060c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8105db8:	683b      	ldr	r3, [r7, #0]
 8105dba:	685b      	ldr	r3, [r3, #4]
 8105dbc:	f003 0303 	and.w	r3, r3, #3
 8105dc0:	2b01      	cmp	r3, #1
 8105dc2:	d005      	beq.n	8105dd0 <HAL_GPIO_Init+0x44>
 8105dc4:	683b      	ldr	r3, [r7, #0]
 8105dc6:	685b      	ldr	r3, [r3, #4]
 8105dc8:	f003 0303 	and.w	r3, r3, #3
 8105dcc:	2b02      	cmp	r3, #2
 8105dce:	d130      	bne.n	8105e32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8105dd0:	687b      	ldr	r3, [r7, #4]
 8105dd2:	689b      	ldr	r3, [r3, #8]
 8105dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105dd6:	69fb      	ldr	r3, [r7, #28]
 8105dd8:	005b      	lsls	r3, r3, #1
 8105dda:	2203      	movs	r2, #3
 8105ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8105de0:	43db      	mvns	r3, r3
 8105de2:	69ba      	ldr	r2, [r7, #24]
 8105de4:	4013      	ands	r3, r2
 8105de6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105de8:	683b      	ldr	r3, [r7, #0]
 8105dea:	68da      	ldr	r2, [r3, #12]
 8105dec:	69fb      	ldr	r3, [r7, #28]
 8105dee:	005b      	lsls	r3, r3, #1
 8105df0:	fa02 f303 	lsl.w	r3, r2, r3
 8105df4:	69ba      	ldr	r2, [r7, #24]
 8105df6:	4313      	orrs	r3, r2
 8105df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8105dfa:	687b      	ldr	r3, [r7, #4]
 8105dfc:	69ba      	ldr	r2, [r7, #24]
 8105dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8105e00:	687b      	ldr	r3, [r7, #4]
 8105e02:	685b      	ldr	r3, [r3, #4]
 8105e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8105e06:	2201      	movs	r2, #1
 8105e08:	69fb      	ldr	r3, [r7, #28]
 8105e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8105e0e:	43db      	mvns	r3, r3
 8105e10:	69ba      	ldr	r2, [r7, #24]
 8105e12:	4013      	ands	r3, r2
 8105e14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8105e16:	683b      	ldr	r3, [r7, #0]
 8105e18:	685b      	ldr	r3, [r3, #4]
 8105e1a:	091b      	lsrs	r3, r3, #4
 8105e1c:	f003 0201 	and.w	r2, r3, #1
 8105e20:	69fb      	ldr	r3, [r7, #28]
 8105e22:	fa02 f303 	lsl.w	r3, r2, r3
 8105e26:	69ba      	ldr	r2, [r7, #24]
 8105e28:	4313      	orrs	r3, r2
 8105e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	69ba      	ldr	r2, [r7, #24]
 8105e30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8105e32:	683b      	ldr	r3, [r7, #0]
 8105e34:	685b      	ldr	r3, [r3, #4]
 8105e36:	f003 0303 	and.w	r3, r3, #3
 8105e3a:	2b03      	cmp	r3, #3
 8105e3c:	d017      	beq.n	8105e6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8105e3e:	687b      	ldr	r3, [r7, #4]
 8105e40:	68db      	ldr	r3, [r3, #12]
 8105e42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8105e44:	69fb      	ldr	r3, [r7, #28]
 8105e46:	005b      	lsls	r3, r3, #1
 8105e48:	2203      	movs	r2, #3
 8105e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8105e4e:	43db      	mvns	r3, r3
 8105e50:	69ba      	ldr	r2, [r7, #24]
 8105e52:	4013      	ands	r3, r2
 8105e54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8105e56:	683b      	ldr	r3, [r7, #0]
 8105e58:	689a      	ldr	r2, [r3, #8]
 8105e5a:	69fb      	ldr	r3, [r7, #28]
 8105e5c:	005b      	lsls	r3, r3, #1
 8105e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8105e62:	69ba      	ldr	r2, [r7, #24]
 8105e64:	4313      	orrs	r3, r2
 8105e66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	69ba      	ldr	r2, [r7, #24]
 8105e6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8105e6e:	683b      	ldr	r3, [r7, #0]
 8105e70:	685b      	ldr	r3, [r3, #4]
 8105e72:	f003 0303 	and.w	r3, r3, #3
 8105e76:	2b02      	cmp	r3, #2
 8105e78:	d123      	bne.n	8105ec2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8105e7a:	69fb      	ldr	r3, [r7, #28]
 8105e7c:	08da      	lsrs	r2, r3, #3
 8105e7e:	687b      	ldr	r3, [r7, #4]
 8105e80:	3208      	adds	r2, #8
 8105e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8105e88:	69fb      	ldr	r3, [r7, #28]
 8105e8a:	f003 0307 	and.w	r3, r3, #7
 8105e8e:	009b      	lsls	r3, r3, #2
 8105e90:	220f      	movs	r2, #15
 8105e92:	fa02 f303 	lsl.w	r3, r2, r3
 8105e96:	43db      	mvns	r3, r3
 8105e98:	69ba      	ldr	r2, [r7, #24]
 8105e9a:	4013      	ands	r3, r2
 8105e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8105e9e:	683b      	ldr	r3, [r7, #0]
 8105ea0:	691a      	ldr	r2, [r3, #16]
 8105ea2:	69fb      	ldr	r3, [r7, #28]
 8105ea4:	f003 0307 	and.w	r3, r3, #7
 8105ea8:	009b      	lsls	r3, r3, #2
 8105eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8105eae:	69ba      	ldr	r2, [r7, #24]
 8105eb0:	4313      	orrs	r3, r2
 8105eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105eb4:	69fb      	ldr	r3, [r7, #28]
 8105eb6:	08da      	lsrs	r2, r3, #3
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	3208      	adds	r2, #8
 8105ebc:	69b9      	ldr	r1, [r7, #24]
 8105ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105ec2:	687b      	ldr	r3, [r7, #4]
 8105ec4:	681b      	ldr	r3, [r3, #0]
 8105ec6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8105ec8:	69fb      	ldr	r3, [r7, #28]
 8105eca:	005b      	lsls	r3, r3, #1
 8105ecc:	2203      	movs	r2, #3
 8105ece:	fa02 f303 	lsl.w	r3, r2, r3
 8105ed2:	43db      	mvns	r3, r3
 8105ed4:	69ba      	ldr	r2, [r7, #24]
 8105ed6:	4013      	ands	r3, r2
 8105ed8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8105eda:	683b      	ldr	r3, [r7, #0]
 8105edc:	685b      	ldr	r3, [r3, #4]
 8105ede:	f003 0203 	and.w	r2, r3, #3
 8105ee2:	69fb      	ldr	r3, [r7, #28]
 8105ee4:	005b      	lsls	r3, r3, #1
 8105ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8105eea:	69ba      	ldr	r2, [r7, #24]
 8105eec:	4313      	orrs	r3, r2
 8105eee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105ef0:	687b      	ldr	r3, [r7, #4]
 8105ef2:	69ba      	ldr	r2, [r7, #24]
 8105ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8105ef6:	683b      	ldr	r3, [r7, #0]
 8105ef8:	685b      	ldr	r3, [r3, #4]
 8105efa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105efe:	2b00      	cmp	r3, #0
 8105f00:	f000 80e0 	beq.w	81060c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105f04:	4b2f      	ldr	r3, [pc, #188]	@ (8105fc4 <HAL_GPIO_Init+0x238>)
 8105f06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8105fc4 <HAL_GPIO_Init+0x238>)
 8105f0c:	f043 0302 	orr.w	r3, r3, #2
 8105f10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8105f14:	4b2b      	ldr	r3, [pc, #172]	@ (8105fc4 <HAL_GPIO_Init+0x238>)
 8105f16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105f1a:	f003 0302 	and.w	r3, r3, #2
 8105f1e:	60fb      	str	r3, [r7, #12]
 8105f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8105f22:	4a29      	ldr	r2, [pc, #164]	@ (8105fc8 <HAL_GPIO_Init+0x23c>)
 8105f24:	69fb      	ldr	r3, [r7, #28]
 8105f26:	089b      	lsrs	r3, r3, #2
 8105f28:	3302      	adds	r3, #2
 8105f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8105f30:	69fb      	ldr	r3, [r7, #28]
 8105f32:	f003 0303 	and.w	r3, r3, #3
 8105f36:	009b      	lsls	r3, r3, #2
 8105f38:	220f      	movs	r2, #15
 8105f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8105f3e:	43db      	mvns	r3, r3
 8105f40:	69ba      	ldr	r2, [r7, #24]
 8105f42:	4013      	ands	r3, r2
 8105f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105f46:	687b      	ldr	r3, [r7, #4]
 8105f48:	4a20      	ldr	r2, [pc, #128]	@ (8105fcc <HAL_GPIO_Init+0x240>)
 8105f4a:	4293      	cmp	r3, r2
 8105f4c:	d052      	beq.n	8105ff4 <HAL_GPIO_Init+0x268>
 8105f4e:	687b      	ldr	r3, [r7, #4]
 8105f50:	4a1f      	ldr	r2, [pc, #124]	@ (8105fd0 <HAL_GPIO_Init+0x244>)
 8105f52:	4293      	cmp	r3, r2
 8105f54:	d031      	beq.n	8105fba <HAL_GPIO_Init+0x22e>
 8105f56:	687b      	ldr	r3, [r7, #4]
 8105f58:	4a1e      	ldr	r2, [pc, #120]	@ (8105fd4 <HAL_GPIO_Init+0x248>)
 8105f5a:	4293      	cmp	r3, r2
 8105f5c:	d02b      	beq.n	8105fb6 <HAL_GPIO_Init+0x22a>
 8105f5e:	687b      	ldr	r3, [r7, #4]
 8105f60:	4a1d      	ldr	r2, [pc, #116]	@ (8105fd8 <HAL_GPIO_Init+0x24c>)
 8105f62:	4293      	cmp	r3, r2
 8105f64:	d025      	beq.n	8105fb2 <HAL_GPIO_Init+0x226>
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	4a1c      	ldr	r2, [pc, #112]	@ (8105fdc <HAL_GPIO_Init+0x250>)
 8105f6a:	4293      	cmp	r3, r2
 8105f6c:	d01f      	beq.n	8105fae <HAL_GPIO_Init+0x222>
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	4a1b      	ldr	r2, [pc, #108]	@ (8105fe0 <HAL_GPIO_Init+0x254>)
 8105f72:	4293      	cmp	r3, r2
 8105f74:	d019      	beq.n	8105faa <HAL_GPIO_Init+0x21e>
 8105f76:	687b      	ldr	r3, [r7, #4]
 8105f78:	4a1a      	ldr	r2, [pc, #104]	@ (8105fe4 <HAL_GPIO_Init+0x258>)
 8105f7a:	4293      	cmp	r3, r2
 8105f7c:	d013      	beq.n	8105fa6 <HAL_GPIO_Init+0x21a>
 8105f7e:	687b      	ldr	r3, [r7, #4]
 8105f80:	4a19      	ldr	r2, [pc, #100]	@ (8105fe8 <HAL_GPIO_Init+0x25c>)
 8105f82:	4293      	cmp	r3, r2
 8105f84:	d00d      	beq.n	8105fa2 <HAL_GPIO_Init+0x216>
 8105f86:	687b      	ldr	r3, [r7, #4]
 8105f88:	4a18      	ldr	r2, [pc, #96]	@ (8105fec <HAL_GPIO_Init+0x260>)
 8105f8a:	4293      	cmp	r3, r2
 8105f8c:	d007      	beq.n	8105f9e <HAL_GPIO_Init+0x212>
 8105f8e:	687b      	ldr	r3, [r7, #4]
 8105f90:	4a17      	ldr	r2, [pc, #92]	@ (8105ff0 <HAL_GPIO_Init+0x264>)
 8105f92:	4293      	cmp	r3, r2
 8105f94:	d101      	bne.n	8105f9a <HAL_GPIO_Init+0x20e>
 8105f96:	2309      	movs	r3, #9
 8105f98:	e02d      	b.n	8105ff6 <HAL_GPIO_Init+0x26a>
 8105f9a:	230a      	movs	r3, #10
 8105f9c:	e02b      	b.n	8105ff6 <HAL_GPIO_Init+0x26a>
 8105f9e:	2308      	movs	r3, #8
 8105fa0:	e029      	b.n	8105ff6 <HAL_GPIO_Init+0x26a>
 8105fa2:	2307      	movs	r3, #7
 8105fa4:	e027      	b.n	8105ff6 <HAL_GPIO_Init+0x26a>
 8105fa6:	2306      	movs	r3, #6
 8105fa8:	e025      	b.n	8105ff6 <HAL_GPIO_Init+0x26a>
 8105faa:	2305      	movs	r3, #5
 8105fac:	e023      	b.n	8105ff6 <HAL_GPIO_Init+0x26a>
 8105fae:	2304      	movs	r3, #4
 8105fb0:	e021      	b.n	8105ff6 <HAL_GPIO_Init+0x26a>
 8105fb2:	2303      	movs	r3, #3
 8105fb4:	e01f      	b.n	8105ff6 <HAL_GPIO_Init+0x26a>
 8105fb6:	2302      	movs	r3, #2
 8105fb8:	e01d      	b.n	8105ff6 <HAL_GPIO_Init+0x26a>
 8105fba:	2301      	movs	r3, #1
 8105fbc:	e01b      	b.n	8105ff6 <HAL_GPIO_Init+0x26a>
 8105fbe:	bf00      	nop
 8105fc0:	580000c0 	.word	0x580000c0
 8105fc4:	58024400 	.word	0x58024400
 8105fc8:	58000400 	.word	0x58000400
 8105fcc:	58020000 	.word	0x58020000
 8105fd0:	58020400 	.word	0x58020400
 8105fd4:	58020800 	.word	0x58020800
 8105fd8:	58020c00 	.word	0x58020c00
 8105fdc:	58021000 	.word	0x58021000
 8105fe0:	58021400 	.word	0x58021400
 8105fe4:	58021800 	.word	0x58021800
 8105fe8:	58021c00 	.word	0x58021c00
 8105fec:	58022000 	.word	0x58022000
 8105ff0:	58022400 	.word	0x58022400
 8105ff4:	2300      	movs	r3, #0
 8105ff6:	69fa      	ldr	r2, [r7, #28]
 8105ff8:	f002 0203 	and.w	r2, r2, #3
 8105ffc:	0092      	lsls	r2, r2, #2
 8105ffe:	4093      	lsls	r3, r2
 8106000:	69ba      	ldr	r2, [r7, #24]
 8106002:	4313      	orrs	r3, r2
 8106004:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8106006:	4938      	ldr	r1, [pc, #224]	@ (81060e8 <HAL_GPIO_Init+0x35c>)
 8106008:	69fb      	ldr	r3, [r7, #28]
 810600a:	089b      	lsrs	r3, r3, #2
 810600c:	3302      	adds	r3, #2
 810600e:	69ba      	ldr	r2, [r7, #24]
 8106010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106018:	681b      	ldr	r3, [r3, #0]
 810601a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810601c:	693b      	ldr	r3, [r7, #16]
 810601e:	43db      	mvns	r3, r3
 8106020:	69ba      	ldr	r2, [r7, #24]
 8106022:	4013      	ands	r3, r2
 8106024:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8106026:	683b      	ldr	r3, [r7, #0]
 8106028:	685b      	ldr	r3, [r3, #4]
 810602a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810602e:	2b00      	cmp	r3, #0
 8106030:	d003      	beq.n	810603a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8106032:	69ba      	ldr	r2, [r7, #24]
 8106034:	693b      	ldr	r3, [r7, #16]
 8106036:	4313      	orrs	r3, r2
 8106038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810603a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810603e:	69bb      	ldr	r3, [r7, #24]
 8106040:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106046:	685b      	ldr	r3, [r3, #4]
 8106048:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810604a:	693b      	ldr	r3, [r7, #16]
 810604c:	43db      	mvns	r3, r3
 810604e:	69ba      	ldr	r2, [r7, #24]
 8106050:	4013      	ands	r3, r2
 8106052:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8106054:	683b      	ldr	r3, [r7, #0]
 8106056:	685b      	ldr	r3, [r3, #4]
 8106058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810605c:	2b00      	cmp	r3, #0
 810605e:	d003      	beq.n	8106068 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8106060:	69ba      	ldr	r2, [r7, #24]
 8106062:	693b      	ldr	r3, [r7, #16]
 8106064:	4313      	orrs	r3, r2
 8106066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106068:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810606c:	69bb      	ldr	r3, [r7, #24]
 810606e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8106070:	697b      	ldr	r3, [r7, #20]
 8106072:	685b      	ldr	r3, [r3, #4]
 8106074:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106076:	693b      	ldr	r3, [r7, #16]
 8106078:	43db      	mvns	r3, r3
 810607a:	69ba      	ldr	r2, [r7, #24]
 810607c:	4013      	ands	r3, r2
 810607e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8106080:	683b      	ldr	r3, [r7, #0]
 8106082:	685b      	ldr	r3, [r3, #4]
 8106084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106088:	2b00      	cmp	r3, #0
 810608a:	d003      	beq.n	8106094 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810608c:	69ba      	ldr	r2, [r7, #24]
 810608e:	693b      	ldr	r3, [r7, #16]
 8106090:	4313      	orrs	r3, r2
 8106092:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8106094:	697b      	ldr	r3, [r7, #20]
 8106096:	69ba      	ldr	r2, [r7, #24]
 8106098:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810609a:	697b      	ldr	r3, [r7, #20]
 810609c:	681b      	ldr	r3, [r3, #0]
 810609e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81060a0:	693b      	ldr	r3, [r7, #16]
 81060a2:	43db      	mvns	r3, r3
 81060a4:	69ba      	ldr	r2, [r7, #24]
 81060a6:	4013      	ands	r3, r2
 81060a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81060aa:	683b      	ldr	r3, [r7, #0]
 81060ac:	685b      	ldr	r3, [r3, #4]
 81060ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81060b2:	2b00      	cmp	r3, #0
 81060b4:	d003      	beq.n	81060be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81060b6:	69ba      	ldr	r2, [r7, #24]
 81060b8:	693b      	ldr	r3, [r7, #16]
 81060ba:	4313      	orrs	r3, r2
 81060bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81060be:	697b      	ldr	r3, [r7, #20]
 81060c0:	69ba      	ldr	r2, [r7, #24]
 81060c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81060c4:	69fb      	ldr	r3, [r7, #28]
 81060c6:	3301      	adds	r3, #1
 81060c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81060ca:	683b      	ldr	r3, [r7, #0]
 81060cc:	681a      	ldr	r2, [r3, #0]
 81060ce:	69fb      	ldr	r3, [r7, #28]
 81060d0:	fa22 f303 	lsr.w	r3, r2, r3
 81060d4:	2b00      	cmp	r3, #0
 81060d6:	f47f ae63 	bne.w	8105da0 <HAL_GPIO_Init+0x14>
  }
}
 81060da:	bf00      	nop
 81060dc:	bf00      	nop
 81060de:	3724      	adds	r7, #36	@ 0x24
 81060e0:	46bd      	mov	sp, r7
 81060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060e6:	4770      	bx	lr
 81060e8:	58000400 	.word	0x58000400

081060ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81060ec:	b480      	push	{r7}
 81060ee:	b083      	sub	sp, #12
 81060f0:	af00      	add	r7, sp, #0
 81060f2:	6078      	str	r0, [r7, #4]
 81060f4:	460b      	mov	r3, r1
 81060f6:	807b      	strh	r3, [r7, #2]
 81060f8:	4613      	mov	r3, r2
 81060fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81060fc:	787b      	ldrb	r3, [r7, #1]
 81060fe:	2b00      	cmp	r3, #0
 8106100:	d003      	beq.n	810610a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8106102:	887a      	ldrh	r2, [r7, #2]
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8106108:	e003      	b.n	8106112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810610a:	887b      	ldrh	r3, [r7, #2]
 810610c:	041a      	lsls	r2, r3, #16
 810610e:	687b      	ldr	r3, [r7, #4]
 8106110:	619a      	str	r2, [r3, #24]
}
 8106112:	bf00      	nop
 8106114:	370c      	adds	r7, #12
 8106116:	46bd      	mov	sp, r7
 8106118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810611c:	4770      	bx	lr

0810611e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 810611e:	b480      	push	{r7}
 8106120:	b085      	sub	sp, #20
 8106122:	af00      	add	r7, sp, #0
 8106124:	6078      	str	r0, [r7, #4]
 8106126:	460b      	mov	r3, r1
 8106128:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	695b      	ldr	r3, [r3, #20]
 810612e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8106130:	887a      	ldrh	r2, [r7, #2]
 8106132:	68fb      	ldr	r3, [r7, #12]
 8106134:	4013      	ands	r3, r2
 8106136:	041a      	lsls	r2, r3, #16
 8106138:	68fb      	ldr	r3, [r7, #12]
 810613a:	43d9      	mvns	r1, r3
 810613c:	887b      	ldrh	r3, [r7, #2]
 810613e:	400b      	ands	r3, r1
 8106140:	431a      	orrs	r2, r3
 8106142:	687b      	ldr	r3, [r7, #4]
 8106144:	619a      	str	r2, [r3, #24]
}
 8106146:	bf00      	nop
 8106148:	3714      	adds	r7, #20
 810614a:	46bd      	mov	sp, r7
 810614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106150:	4770      	bx	lr
	...

08106154 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8106154:	b480      	push	{r7}
 8106156:	b083      	sub	sp, #12
 8106158:	af00      	add	r7, sp, #0
 810615a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 810615c:	4a08      	ldr	r2, [pc, #32]	@ (8106180 <HAL_HSEM_FastTake+0x2c>)
 810615e:	687b      	ldr	r3, [r7, #4]
 8106160:	3320      	adds	r3, #32
 8106162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106166:	4a07      	ldr	r2, [pc, #28]	@ (8106184 <HAL_HSEM_FastTake+0x30>)
 8106168:	4293      	cmp	r3, r2
 810616a:	d101      	bne.n	8106170 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 810616c:	2300      	movs	r3, #0
 810616e:	e000      	b.n	8106172 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8106170:	2301      	movs	r3, #1
}
 8106172:	4618      	mov	r0, r3
 8106174:	370c      	adds	r7, #12
 8106176:	46bd      	mov	sp, r7
 8106178:	f85d 7b04 	ldr.w	r7, [sp], #4
 810617c:	4770      	bx	lr
 810617e:	bf00      	nop
 8106180:	58026400 	.word	0x58026400
 8106184:	80000100 	.word	0x80000100

08106188 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8106188:	b480      	push	{r7}
 810618a:	b083      	sub	sp, #12
 810618c:	af00      	add	r7, sp, #0
 810618e:	6078      	str	r0, [r7, #4]
 8106190:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8106192:	4906      	ldr	r1, [pc, #24]	@ (81061ac <HAL_HSEM_Release+0x24>)
 8106194:	683b      	ldr	r3, [r7, #0]
 8106196:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81061a0:	bf00      	nop
 81061a2:	370c      	adds	r7, #12
 81061a4:	46bd      	mov	sp, r7
 81061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061aa:	4770      	bx	lr
 81061ac:	58026400 	.word	0x58026400

081061b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81061b0:	b480      	push	{r7}
 81061b2:	b089      	sub	sp, #36	@ 0x24
 81061b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81061b6:	4bb3      	ldr	r3, [pc, #716]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81061b8:	691b      	ldr	r3, [r3, #16]
 81061ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81061be:	2b18      	cmp	r3, #24
 81061c0:	f200 8155 	bhi.w	810646e <HAL_RCC_GetSysClockFreq+0x2be>
 81061c4:	a201      	add	r2, pc, #4	@ (adr r2, 81061cc <HAL_RCC_GetSysClockFreq+0x1c>)
 81061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061ca:	bf00      	nop
 81061cc:	08106231 	.word	0x08106231
 81061d0:	0810646f 	.word	0x0810646f
 81061d4:	0810646f 	.word	0x0810646f
 81061d8:	0810646f 	.word	0x0810646f
 81061dc:	0810646f 	.word	0x0810646f
 81061e0:	0810646f 	.word	0x0810646f
 81061e4:	0810646f 	.word	0x0810646f
 81061e8:	0810646f 	.word	0x0810646f
 81061ec:	08106257 	.word	0x08106257
 81061f0:	0810646f 	.word	0x0810646f
 81061f4:	0810646f 	.word	0x0810646f
 81061f8:	0810646f 	.word	0x0810646f
 81061fc:	0810646f 	.word	0x0810646f
 8106200:	0810646f 	.word	0x0810646f
 8106204:	0810646f 	.word	0x0810646f
 8106208:	0810646f 	.word	0x0810646f
 810620c:	0810625d 	.word	0x0810625d
 8106210:	0810646f 	.word	0x0810646f
 8106214:	0810646f 	.word	0x0810646f
 8106218:	0810646f 	.word	0x0810646f
 810621c:	0810646f 	.word	0x0810646f
 8106220:	0810646f 	.word	0x0810646f
 8106224:	0810646f 	.word	0x0810646f
 8106228:	0810646f 	.word	0x0810646f
 810622c:	08106263 	.word	0x08106263
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106230:	4b94      	ldr	r3, [pc, #592]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106232:	681b      	ldr	r3, [r3, #0]
 8106234:	f003 0320 	and.w	r3, r3, #32
 8106238:	2b00      	cmp	r3, #0
 810623a:	d009      	beq.n	8106250 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810623c:	4b91      	ldr	r3, [pc, #580]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810623e:	681b      	ldr	r3, [r3, #0]
 8106240:	08db      	lsrs	r3, r3, #3
 8106242:	f003 0303 	and.w	r3, r3, #3
 8106246:	4a90      	ldr	r2, [pc, #576]	@ (8106488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106248:	fa22 f303 	lsr.w	r3, r2, r3
 810624c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810624e:	e111      	b.n	8106474 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106250:	4b8d      	ldr	r3, [pc, #564]	@ (8106488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106252:	61bb      	str	r3, [r7, #24]
      break;
 8106254:	e10e      	b.n	8106474 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8106256:	4b8d      	ldr	r3, [pc, #564]	@ (810648c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106258:	61bb      	str	r3, [r7, #24]
      break;
 810625a:	e10b      	b.n	8106474 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810625c:	4b8c      	ldr	r3, [pc, #560]	@ (8106490 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810625e:	61bb      	str	r3, [r7, #24]
      break;
 8106260:	e108      	b.n	8106474 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106262:	4b88      	ldr	r3, [pc, #544]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106266:	f003 0303 	and.w	r3, r3, #3
 810626a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810626c:	4b85      	ldr	r3, [pc, #532]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810626e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106270:	091b      	lsrs	r3, r3, #4
 8106272:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106276:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8106278:	4b82      	ldr	r3, [pc, #520]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810627a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810627c:	f003 0301 	and.w	r3, r3, #1
 8106280:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8106282:	4b80      	ldr	r3, [pc, #512]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106286:	08db      	lsrs	r3, r3, #3
 8106288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810628c:	68fa      	ldr	r2, [r7, #12]
 810628e:	fb02 f303 	mul.w	r3, r2, r3
 8106292:	ee07 3a90 	vmov	s15, r3
 8106296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810629a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810629e:	693b      	ldr	r3, [r7, #16]
 81062a0:	2b00      	cmp	r3, #0
 81062a2:	f000 80e1 	beq.w	8106468 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 81062a6:	697b      	ldr	r3, [r7, #20]
 81062a8:	2b02      	cmp	r3, #2
 81062aa:	f000 8083 	beq.w	81063b4 <HAL_RCC_GetSysClockFreq+0x204>
 81062ae:	697b      	ldr	r3, [r7, #20]
 81062b0:	2b02      	cmp	r3, #2
 81062b2:	f200 80a1 	bhi.w	81063f8 <HAL_RCC_GetSysClockFreq+0x248>
 81062b6:	697b      	ldr	r3, [r7, #20]
 81062b8:	2b00      	cmp	r3, #0
 81062ba:	d003      	beq.n	81062c4 <HAL_RCC_GetSysClockFreq+0x114>
 81062bc:	697b      	ldr	r3, [r7, #20]
 81062be:	2b01      	cmp	r3, #1
 81062c0:	d056      	beq.n	8106370 <HAL_RCC_GetSysClockFreq+0x1c0>
 81062c2:	e099      	b.n	81063f8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81062c4:	4b6f      	ldr	r3, [pc, #444]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062c6:	681b      	ldr	r3, [r3, #0]
 81062c8:	f003 0320 	and.w	r3, r3, #32
 81062cc:	2b00      	cmp	r3, #0
 81062ce:	d02d      	beq.n	810632c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81062d0:	4b6c      	ldr	r3, [pc, #432]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062d2:	681b      	ldr	r3, [r3, #0]
 81062d4:	08db      	lsrs	r3, r3, #3
 81062d6:	f003 0303 	and.w	r3, r3, #3
 81062da:	4a6b      	ldr	r2, [pc, #428]	@ (8106488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81062dc:	fa22 f303 	lsr.w	r3, r2, r3
 81062e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81062e2:	687b      	ldr	r3, [r7, #4]
 81062e4:	ee07 3a90 	vmov	s15, r3
 81062e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062ec:	693b      	ldr	r3, [r7, #16]
 81062ee:	ee07 3a90 	vmov	s15, r3
 81062f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81062fa:	4b62      	ldr	r3, [pc, #392]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81062fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106302:	ee07 3a90 	vmov	s15, r3
 8106306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810630a:	ed97 6a02 	vldr	s12, [r7, #8]
 810630e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8106494 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810631a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810631e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106326:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810632a:	e087      	b.n	810643c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810632c:	693b      	ldr	r3, [r7, #16]
 810632e:	ee07 3a90 	vmov	s15, r3
 8106332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106336:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8106498 <HAL_RCC_GetSysClockFreq+0x2e8>
 810633a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810633e:	4b51      	ldr	r3, [pc, #324]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106346:	ee07 3a90 	vmov	s15, r3
 810634a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810634e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106352:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8106494 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810635a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810635e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106366:	ee67 7a27 	vmul.f32	s15, s14, s15
 810636a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810636e:	e065      	b.n	810643c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106370:	693b      	ldr	r3, [r7, #16]
 8106372:	ee07 3a90 	vmov	s15, r3
 8106376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810637a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810649c <HAL_RCC_GetSysClockFreq+0x2ec>
 810637e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106382:	4b40      	ldr	r3, [pc, #256]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810638a:	ee07 3a90 	vmov	s15, r3
 810638e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106392:	ed97 6a02 	vldr	s12, [r7, #8]
 8106396:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8106494 <HAL_RCC_GetSysClockFreq+0x2e4>
 810639a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810639e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81063a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81063b2:	e043      	b.n	810643c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81063b4:	693b      	ldr	r3, [r7, #16]
 81063b6:	ee07 3a90 	vmov	s15, r3
 81063ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81064a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 81063c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81063c6:	4b2f      	ldr	r3, [pc, #188]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81063ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063ce:	ee07 3a90 	vmov	s15, r3
 81063d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063d6:	ed97 6a02 	vldr	s12, [r7, #8]
 81063da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8106494 <HAL_RCC_GetSysClockFreq+0x2e4>
 81063de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81063ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81063f6:	e021      	b.n	810643c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81063f8:	693b      	ldr	r3, [r7, #16]
 81063fa:	ee07 3a90 	vmov	s15, r3
 81063fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106402:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810649c <HAL_RCC_GetSysClockFreq+0x2ec>
 8106406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810640a:	4b1e      	ldr	r3, [pc, #120]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810640c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810640e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106412:	ee07 3a90 	vmov	s15, r3
 8106416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810641a:	ed97 6a02 	vldr	s12, [r7, #8]
 810641e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8106494 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810642a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810642e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810643a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810643c:	4b11      	ldr	r3, [pc, #68]	@ (8106484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810643e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106440:	0a5b      	lsrs	r3, r3, #9
 8106442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106446:	3301      	adds	r3, #1
 8106448:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810644a:	683b      	ldr	r3, [r7, #0]
 810644c:	ee07 3a90 	vmov	s15, r3
 8106450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106454:	edd7 6a07 	vldr	s13, [r7, #28]
 8106458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810645c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106460:	ee17 3a90 	vmov	r3, s15
 8106464:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8106466:	e005      	b.n	8106474 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8106468:	2300      	movs	r3, #0
 810646a:	61bb      	str	r3, [r7, #24]
      break;
 810646c:	e002      	b.n	8106474 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810646e:	4b07      	ldr	r3, [pc, #28]	@ (810648c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106470:	61bb      	str	r3, [r7, #24]
      break;
 8106472:	bf00      	nop
  }

  return sysclockfreq;
 8106474:	69bb      	ldr	r3, [r7, #24]
}
 8106476:	4618      	mov	r0, r3
 8106478:	3724      	adds	r7, #36	@ 0x24
 810647a:	46bd      	mov	sp, r7
 810647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106480:	4770      	bx	lr
 8106482:	bf00      	nop
 8106484:	58024400 	.word	0x58024400
 8106488:	03d09000 	.word	0x03d09000
 810648c:	003d0900 	.word	0x003d0900
 8106490:	017d7840 	.word	0x017d7840
 8106494:	46000000 	.word	0x46000000
 8106498:	4c742400 	.word	0x4c742400
 810649c:	4a742400 	.word	0x4a742400
 81064a0:	4bbebc20 	.word	0x4bbebc20

081064a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81064a4:	b580      	push	{r7, lr}
 81064a6:	b082      	sub	sp, #8
 81064a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81064aa:	f7ff fe81 	bl	81061b0 <HAL_RCC_GetSysClockFreq>
 81064ae:	4602      	mov	r2, r0
 81064b0:	4b11      	ldr	r3, [pc, #68]	@ (81064f8 <HAL_RCC_GetHCLKFreq+0x54>)
 81064b2:	699b      	ldr	r3, [r3, #24]
 81064b4:	0a1b      	lsrs	r3, r3, #8
 81064b6:	f003 030f 	and.w	r3, r3, #15
 81064ba:	4910      	ldr	r1, [pc, #64]	@ (81064fc <HAL_RCC_GetHCLKFreq+0x58>)
 81064bc:	5ccb      	ldrb	r3, [r1, r3]
 81064be:	f003 031f 	and.w	r3, r3, #31
 81064c2:	fa22 f303 	lsr.w	r3, r2, r3
 81064c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81064c8:	4b0b      	ldr	r3, [pc, #44]	@ (81064f8 <HAL_RCC_GetHCLKFreq+0x54>)
 81064ca:	699b      	ldr	r3, [r3, #24]
 81064cc:	f003 030f 	and.w	r3, r3, #15
 81064d0:	4a0a      	ldr	r2, [pc, #40]	@ (81064fc <HAL_RCC_GetHCLKFreq+0x58>)
 81064d2:	5cd3      	ldrb	r3, [r2, r3]
 81064d4:	f003 031f 	and.w	r3, r3, #31
 81064d8:	687a      	ldr	r2, [r7, #4]
 81064da:	fa22 f303 	lsr.w	r3, r2, r3
 81064de:	4a08      	ldr	r2, [pc, #32]	@ (8106500 <HAL_RCC_GetHCLKFreq+0x5c>)
 81064e0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81064e2:	4b07      	ldr	r3, [pc, #28]	@ (8106500 <HAL_RCC_GetHCLKFreq+0x5c>)
 81064e4:	681b      	ldr	r3, [r3, #0]
 81064e6:	4a07      	ldr	r2, [pc, #28]	@ (8106504 <HAL_RCC_GetHCLKFreq+0x60>)
 81064e8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81064ea:	4b05      	ldr	r3, [pc, #20]	@ (8106500 <HAL_RCC_GetHCLKFreq+0x5c>)
 81064ec:	681b      	ldr	r3, [r3, #0]
}
 81064ee:	4618      	mov	r0, r3
 81064f0:	3708      	adds	r7, #8
 81064f2:	46bd      	mov	sp, r7
 81064f4:	bd80      	pop	{r7, pc}
 81064f6:	bf00      	nop
 81064f8:	58024400 	.word	0x58024400
 81064fc:	0810f1b0 	.word	0x0810f1b0
 8106500:	10000004 	.word	0x10000004
 8106504:	10000000 	.word	0x10000000

08106508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106508:	b580      	push	{r7, lr}
 810650a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810650c:	f7ff ffca 	bl	81064a4 <HAL_RCC_GetHCLKFreq>
 8106510:	4602      	mov	r2, r0
 8106512:	4b06      	ldr	r3, [pc, #24]	@ (810652c <HAL_RCC_GetPCLK1Freq+0x24>)
 8106514:	69db      	ldr	r3, [r3, #28]
 8106516:	091b      	lsrs	r3, r3, #4
 8106518:	f003 0307 	and.w	r3, r3, #7
 810651c:	4904      	ldr	r1, [pc, #16]	@ (8106530 <HAL_RCC_GetPCLK1Freq+0x28>)
 810651e:	5ccb      	ldrb	r3, [r1, r3]
 8106520:	f003 031f 	and.w	r3, r3, #31
 8106524:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106528:	4618      	mov	r0, r3
 810652a:	bd80      	pop	{r7, pc}
 810652c:	58024400 	.word	0x58024400
 8106530:	0810f1b0 	.word	0x0810f1b0

08106534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106534:	b580      	push	{r7, lr}
 8106536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106538:	f7ff ffb4 	bl	81064a4 <HAL_RCC_GetHCLKFreq>
 810653c:	4602      	mov	r2, r0
 810653e:	4b06      	ldr	r3, [pc, #24]	@ (8106558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8106540:	69db      	ldr	r3, [r3, #28]
 8106542:	0a1b      	lsrs	r3, r3, #8
 8106544:	f003 0307 	and.w	r3, r3, #7
 8106548:	4904      	ldr	r1, [pc, #16]	@ (810655c <HAL_RCC_GetPCLK2Freq+0x28>)
 810654a:	5ccb      	ldrb	r3, [r1, r3]
 810654c:	f003 031f 	and.w	r3, r3, #31
 8106550:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106554:	4618      	mov	r0, r3
 8106556:	bd80      	pop	{r7, pc}
 8106558:	58024400 	.word	0x58024400
 810655c:	0810f1b0 	.word	0x0810f1b0

08106560 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8106560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106564:	b0ca      	sub	sp, #296	@ 0x128
 8106566:	af00      	add	r7, sp, #0
 8106568:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810656c:	2300      	movs	r3, #0
 810656e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8106572:	2300      	movs	r3, #0
 8106574:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8106578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106580:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8106584:	2500      	movs	r5, #0
 8106586:	ea54 0305 	orrs.w	r3, r4, r5
 810658a:	d049      	beq.n	8106620 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810658c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106592:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106596:	d02f      	beq.n	81065f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8106598:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810659c:	d828      	bhi.n	81065f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810659e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81065a2:	d01a      	beq.n	81065da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81065a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81065a8:	d822      	bhi.n	81065f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81065aa:	2b00      	cmp	r3, #0
 81065ac:	d003      	beq.n	81065b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 81065ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81065b2:	d007      	beq.n	81065c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81065b4:	e01c      	b.n	81065f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81065b6:	4bb8      	ldr	r3, [pc, #736]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81065ba:	4ab7      	ldr	r2, [pc, #732]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81065bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81065c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81065c2:	e01a      	b.n	81065fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81065c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065c8:	3308      	adds	r3, #8
 81065ca:	2102      	movs	r1, #2
 81065cc:	4618      	mov	r0, r3
 81065ce:	f001 fc8f 	bl	8107ef0 <RCCEx_PLL2_Config>
 81065d2:	4603      	mov	r3, r0
 81065d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81065d8:	e00f      	b.n	81065fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065de:	3328      	adds	r3, #40	@ 0x28
 81065e0:	2102      	movs	r1, #2
 81065e2:	4618      	mov	r0, r3
 81065e4:	f001 fd36 	bl	8108054 <RCCEx_PLL3_Config>
 81065e8:	4603      	mov	r3, r0
 81065ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81065ee:	e004      	b.n	81065fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81065f0:	2301      	movs	r3, #1
 81065f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81065f6:	e000      	b.n	81065fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81065f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81065fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81065fe:	2b00      	cmp	r3, #0
 8106600:	d10a      	bne.n	8106618 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8106602:	4ba5      	ldr	r3, [pc, #660]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106606:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810660e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106610:	4aa1      	ldr	r2, [pc, #644]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106612:	430b      	orrs	r3, r1
 8106614:	6513      	str	r3, [r2, #80]	@ 0x50
 8106616:	e003      	b.n	8106620 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810661c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8106620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106628:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810662c:	f04f 0900 	mov.w	r9, #0
 8106630:	ea58 0309 	orrs.w	r3, r8, r9
 8106634:	d047      	beq.n	81066c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8106636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810663a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810663c:	2b04      	cmp	r3, #4
 810663e:	d82a      	bhi.n	8106696 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8106640:	a201      	add	r2, pc, #4	@ (adr r2, 8106648 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8106642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106646:	bf00      	nop
 8106648:	0810665d 	.word	0x0810665d
 810664c:	0810666b 	.word	0x0810666b
 8106650:	08106681 	.word	0x08106681
 8106654:	0810669f 	.word	0x0810669f
 8106658:	0810669f 	.word	0x0810669f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810665c:	4b8e      	ldr	r3, [pc, #568]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106660:	4a8d      	ldr	r2, [pc, #564]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106668:	e01a      	b.n	81066a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810666a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810666e:	3308      	adds	r3, #8
 8106670:	2100      	movs	r1, #0
 8106672:	4618      	mov	r0, r3
 8106674:	f001 fc3c 	bl	8107ef0 <RCCEx_PLL2_Config>
 8106678:	4603      	mov	r3, r0
 810667a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810667e:	e00f      	b.n	81066a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106684:	3328      	adds	r3, #40	@ 0x28
 8106686:	2100      	movs	r1, #0
 8106688:	4618      	mov	r0, r3
 810668a:	f001 fce3 	bl	8108054 <RCCEx_PLL3_Config>
 810668e:	4603      	mov	r3, r0
 8106690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106694:	e004      	b.n	81066a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106696:	2301      	movs	r3, #1
 8106698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810669c:	e000      	b.n	81066a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810669e:	bf00      	nop
    }

    if (ret == HAL_OK)
 81066a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81066a4:	2b00      	cmp	r3, #0
 81066a6:	d10a      	bne.n	81066be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81066a8:	4b7b      	ldr	r3, [pc, #492]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81066aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81066ac:	f023 0107 	bic.w	r1, r3, #7
 81066b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81066b6:	4a78      	ldr	r2, [pc, #480]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81066b8:	430b      	orrs	r3, r1
 81066ba:	6513      	str	r3, [r2, #80]	@ 0x50
 81066bc:	e003      	b.n	81066c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81066c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81066c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066ce:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81066d2:	f04f 0b00 	mov.w	fp, #0
 81066d6:	ea5a 030b 	orrs.w	r3, sl, fp
 81066da:	d04c      	beq.n	8106776 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81066dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81066e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81066e6:	d030      	beq.n	810674a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81066e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81066ec:	d829      	bhi.n	8106742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81066ee:	2bc0      	cmp	r3, #192	@ 0xc0
 81066f0:	d02d      	beq.n	810674e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81066f2:	2bc0      	cmp	r3, #192	@ 0xc0
 81066f4:	d825      	bhi.n	8106742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81066f6:	2b80      	cmp	r3, #128	@ 0x80
 81066f8:	d018      	beq.n	810672c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81066fa:	2b80      	cmp	r3, #128	@ 0x80
 81066fc:	d821      	bhi.n	8106742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81066fe:	2b00      	cmp	r3, #0
 8106700:	d002      	beq.n	8106708 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8106702:	2b40      	cmp	r3, #64	@ 0x40
 8106704:	d007      	beq.n	8106716 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8106706:	e01c      	b.n	8106742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106708:	4b63      	ldr	r3, [pc, #396]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810670a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810670c:	4a62      	ldr	r2, [pc, #392]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810670e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106714:	e01c      	b.n	8106750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810671a:	3308      	adds	r3, #8
 810671c:	2100      	movs	r1, #0
 810671e:	4618      	mov	r0, r3
 8106720:	f001 fbe6 	bl	8107ef0 <RCCEx_PLL2_Config>
 8106724:	4603      	mov	r3, r0
 8106726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810672a:	e011      	b.n	8106750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106730:	3328      	adds	r3, #40	@ 0x28
 8106732:	2100      	movs	r1, #0
 8106734:	4618      	mov	r0, r3
 8106736:	f001 fc8d 	bl	8108054 <RCCEx_PLL3_Config>
 810673a:	4603      	mov	r3, r0
 810673c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106740:	e006      	b.n	8106750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106742:	2301      	movs	r3, #1
 8106744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106748:	e002      	b.n	8106750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810674a:	bf00      	nop
 810674c:	e000      	b.n	8106750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810674e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106754:	2b00      	cmp	r3, #0
 8106756:	d10a      	bne.n	810676e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8106758:	4b4f      	ldr	r3, [pc, #316]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810675a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810675c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8106760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106766:	4a4c      	ldr	r2, [pc, #304]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106768:	430b      	orrs	r3, r1
 810676a:	6513      	str	r3, [r2, #80]	@ 0x50
 810676c:	e003      	b.n	8106776 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810676e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106772:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8106776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810677e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8106782:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8106786:	2300      	movs	r3, #0
 8106788:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810678c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8106790:	460b      	mov	r3, r1
 8106792:	4313      	orrs	r3, r2
 8106794:	d053      	beq.n	810683e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8106796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810679a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810679e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81067a2:	d035      	beq.n	8106810 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81067a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81067a8:	d82e      	bhi.n	8106808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81067aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81067ae:	d031      	beq.n	8106814 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81067b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81067b4:	d828      	bhi.n	8106808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81067b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81067ba:	d01a      	beq.n	81067f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81067bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81067c0:	d822      	bhi.n	8106808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81067c2:	2b00      	cmp	r3, #0
 81067c4:	d003      	beq.n	81067ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81067c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81067ca:	d007      	beq.n	81067dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81067cc:	e01c      	b.n	8106808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81067ce:	4b32      	ldr	r3, [pc, #200]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81067d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81067d2:	4a31      	ldr	r2, [pc, #196]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81067d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81067d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81067da:	e01c      	b.n	8106816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81067dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067e0:	3308      	adds	r3, #8
 81067e2:	2100      	movs	r1, #0
 81067e4:	4618      	mov	r0, r3
 81067e6:	f001 fb83 	bl	8107ef0 <RCCEx_PLL2_Config>
 81067ea:	4603      	mov	r3, r0
 81067ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81067f0:	e011      	b.n	8106816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067f6:	3328      	adds	r3, #40	@ 0x28
 81067f8:	2100      	movs	r1, #0
 81067fa:	4618      	mov	r0, r3
 81067fc:	f001 fc2a 	bl	8108054 <RCCEx_PLL3_Config>
 8106800:	4603      	mov	r3, r0
 8106802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106806:	e006      	b.n	8106816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106808:	2301      	movs	r3, #1
 810680a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810680e:	e002      	b.n	8106816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106810:	bf00      	nop
 8106812:	e000      	b.n	8106816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810681a:	2b00      	cmp	r3, #0
 810681c:	d10b      	bne.n	8106836 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810681e:	4b1e      	ldr	r3, [pc, #120]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106822:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8106826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810682a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810682e:	4a1a      	ldr	r2, [pc, #104]	@ (8106898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106830:	430b      	orrs	r3, r1
 8106832:	6593      	str	r3, [r2, #88]	@ 0x58
 8106834:	e003      	b.n	810683e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810683a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106846:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810684a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810684e:	2300      	movs	r3, #0
 8106850:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8106854:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8106858:	460b      	mov	r3, r1
 810685a:	4313      	orrs	r3, r2
 810685c:	d056      	beq.n	810690c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106862:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8106866:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810686a:	d038      	beq.n	81068de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810686c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106870:	d831      	bhi.n	81068d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106872:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106876:	d034      	beq.n	81068e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8106878:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810687c:	d82b      	bhi.n	81068d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810687e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106882:	d01d      	beq.n	81068c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8106884:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106888:	d825      	bhi.n	81068d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810688a:	2b00      	cmp	r3, #0
 810688c:	d006      	beq.n	810689c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810688e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8106892:	d00a      	beq.n	81068aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8106894:	e01f      	b.n	81068d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106896:	bf00      	nop
 8106898:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810689c:	4ba2      	ldr	r3, [pc, #648]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810689e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81068a0:	4aa1      	ldr	r2, [pc, #644]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81068a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81068a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81068a8:	e01c      	b.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068ae:	3308      	adds	r3, #8
 81068b0:	2100      	movs	r1, #0
 81068b2:	4618      	mov	r0, r3
 81068b4:	f001 fb1c 	bl	8107ef0 <RCCEx_PLL2_Config>
 81068b8:	4603      	mov	r3, r0
 81068ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81068be:	e011      	b.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81068c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068c4:	3328      	adds	r3, #40	@ 0x28
 81068c6:	2100      	movs	r1, #0
 81068c8:	4618      	mov	r0, r3
 81068ca:	f001 fbc3 	bl	8108054 <RCCEx_PLL3_Config>
 81068ce:	4603      	mov	r3, r0
 81068d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81068d4:	e006      	b.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81068d6:	2301      	movs	r3, #1
 81068d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81068dc:	e002      	b.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81068de:	bf00      	nop
 81068e0:	e000      	b.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81068e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81068e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81068e8:	2b00      	cmp	r3, #0
 81068ea:	d10b      	bne.n	8106904 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81068ec:	4b8e      	ldr	r3, [pc, #568]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81068ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81068f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81068fc:	4a8a      	ldr	r2, [pc, #552]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81068fe:	430b      	orrs	r3, r1
 8106900:	6593      	str	r3, [r2, #88]	@ 0x58
 8106902:	e003      	b.n	810690c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106908:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810690c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106914:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8106918:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810691c:	2300      	movs	r3, #0
 810691e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8106922:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8106926:	460b      	mov	r3, r1
 8106928:	4313      	orrs	r3, r2
 810692a:	d03a      	beq.n	81069a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810692c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106932:	2b30      	cmp	r3, #48	@ 0x30
 8106934:	d01f      	beq.n	8106976 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8106936:	2b30      	cmp	r3, #48	@ 0x30
 8106938:	d819      	bhi.n	810696e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810693a:	2b20      	cmp	r3, #32
 810693c:	d00c      	beq.n	8106958 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810693e:	2b20      	cmp	r3, #32
 8106940:	d815      	bhi.n	810696e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106942:	2b00      	cmp	r3, #0
 8106944:	d019      	beq.n	810697a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8106946:	2b10      	cmp	r3, #16
 8106948:	d111      	bne.n	810696e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810694a:	4b77      	ldr	r3, [pc, #476]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810694c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810694e:	4a76      	ldr	r2, [pc, #472]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106954:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106956:	e011      	b.n	810697c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810695c:	3308      	adds	r3, #8
 810695e:	2102      	movs	r1, #2
 8106960:	4618      	mov	r0, r3
 8106962:	f001 fac5 	bl	8107ef0 <RCCEx_PLL2_Config>
 8106966:	4603      	mov	r3, r0
 8106968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810696c:	e006      	b.n	810697c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810696e:	2301      	movs	r3, #1
 8106970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106974:	e002      	b.n	810697c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106976:	bf00      	nop
 8106978:	e000      	b.n	810697c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810697a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810697c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106980:	2b00      	cmp	r3, #0
 8106982:	d10a      	bne.n	810699a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106984:	4b68      	ldr	r3, [pc, #416]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106988:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 810698c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106992:	4a65      	ldr	r2, [pc, #404]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106994:	430b      	orrs	r3, r1
 8106996:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106998:	e003      	b.n	81069a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810699a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810699e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81069a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81069ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81069b2:	2300      	movs	r3, #0
 81069b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81069b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81069bc:	460b      	mov	r3, r1
 81069be:	4313      	orrs	r3, r2
 81069c0:	d051      	beq.n	8106a66 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81069c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81069c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81069cc:	d035      	beq.n	8106a3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81069ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81069d2:	d82e      	bhi.n	8106a32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81069d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81069d8:	d031      	beq.n	8106a3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81069da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81069de:	d828      	bhi.n	8106a32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81069e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81069e4:	d01a      	beq.n	8106a1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81069e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81069ea:	d822      	bhi.n	8106a32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81069ec:	2b00      	cmp	r3, #0
 81069ee:	d003      	beq.n	81069f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81069f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81069f4:	d007      	beq.n	8106a06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81069f6:	e01c      	b.n	8106a32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81069f8:	4b4b      	ldr	r3, [pc, #300]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069fc:	4a4a      	ldr	r2, [pc, #296]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81069fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106a04:	e01c      	b.n	8106a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a0a:	3308      	adds	r3, #8
 8106a0c:	2100      	movs	r1, #0
 8106a0e:	4618      	mov	r0, r3
 8106a10:	f001 fa6e 	bl	8107ef0 <RCCEx_PLL2_Config>
 8106a14:	4603      	mov	r3, r0
 8106a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106a1a:	e011      	b.n	8106a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a20:	3328      	adds	r3, #40	@ 0x28
 8106a22:	2100      	movs	r1, #0
 8106a24:	4618      	mov	r0, r3
 8106a26:	f001 fb15 	bl	8108054 <RCCEx_PLL3_Config>
 8106a2a:	4603      	mov	r3, r0
 8106a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106a30:	e006      	b.n	8106a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106a32:	2301      	movs	r3, #1
 8106a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106a38:	e002      	b.n	8106a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106a3a:	bf00      	nop
 8106a3c:	e000      	b.n	8106a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a44:	2b00      	cmp	r3, #0
 8106a46:	d10a      	bne.n	8106a5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8106a48:	4b37      	ldr	r3, [pc, #220]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106a4c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8106a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106a56:	4a34      	ldr	r2, [pc, #208]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a58:	430b      	orrs	r3, r1
 8106a5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8106a5c:	e003      	b.n	8106a66 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a6e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8106a72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8106a76:	2300      	movs	r3, #0
 8106a78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8106a7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8106a80:	460b      	mov	r3, r1
 8106a82:	4313      	orrs	r3, r2
 8106a84:	d056      	beq.n	8106b34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8106a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106a90:	d033      	beq.n	8106afa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8106a92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106a96:	d82c      	bhi.n	8106af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106a98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106a9c:	d02f      	beq.n	8106afe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8106a9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106aa2:	d826      	bhi.n	8106af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106aa4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106aa8:	d02b      	beq.n	8106b02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8106aaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106aae:	d820      	bhi.n	8106af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106ab0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106ab4:	d012      	beq.n	8106adc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8106ab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106aba:	d81a      	bhi.n	8106af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106abc:	2b00      	cmp	r3, #0
 8106abe:	d022      	beq.n	8106b06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8106ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106ac4:	d115      	bne.n	8106af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106aca:	3308      	adds	r3, #8
 8106acc:	2101      	movs	r1, #1
 8106ace:	4618      	mov	r0, r3
 8106ad0:	f001 fa0e 	bl	8107ef0 <RCCEx_PLL2_Config>
 8106ad4:	4603      	mov	r3, r0
 8106ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106ada:	e015      	b.n	8106b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ae0:	3328      	adds	r3, #40	@ 0x28
 8106ae2:	2101      	movs	r1, #1
 8106ae4:	4618      	mov	r0, r3
 8106ae6:	f001 fab5 	bl	8108054 <RCCEx_PLL3_Config>
 8106aea:	4603      	mov	r3, r0
 8106aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106af0:	e00a      	b.n	8106b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106af2:	2301      	movs	r3, #1
 8106af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106af8:	e006      	b.n	8106b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106afa:	bf00      	nop
 8106afc:	e004      	b.n	8106b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106afe:	bf00      	nop
 8106b00:	e002      	b.n	8106b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106b02:	bf00      	nop
 8106b04:	e000      	b.n	8106b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106b0c:	2b00      	cmp	r3, #0
 8106b0e:	d10d      	bne.n	8106b2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106b10:	4b05      	ldr	r3, [pc, #20]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106b14:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8106b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106b1e:	4a02      	ldr	r2, [pc, #8]	@ (8106b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b20:	430b      	orrs	r3, r1
 8106b22:	6513      	str	r3, [r2, #80]	@ 0x50
 8106b24:	e006      	b.n	8106b34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8106b26:	bf00      	nop
 8106b28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106b30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b3c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8106b40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8106b44:	2300      	movs	r3, #0
 8106b46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8106b4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8106b4e:	460b      	mov	r3, r1
 8106b50:	4313      	orrs	r3, r2
 8106b52:	d055      	beq.n	8106c00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106b60:	d033      	beq.n	8106bca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8106b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106b66:	d82c      	bhi.n	8106bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106b6c:	d02f      	beq.n	8106bce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8106b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106b72:	d826      	bhi.n	8106bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106b74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106b78:	d02b      	beq.n	8106bd2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8106b7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106b7e:	d820      	bhi.n	8106bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106b84:	d012      	beq.n	8106bac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8106b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106b8a:	d81a      	bhi.n	8106bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106b8c:	2b00      	cmp	r3, #0
 8106b8e:	d022      	beq.n	8106bd6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8106b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106b94:	d115      	bne.n	8106bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b9a:	3308      	adds	r3, #8
 8106b9c:	2101      	movs	r1, #1
 8106b9e:	4618      	mov	r0, r3
 8106ba0:	f001 f9a6 	bl	8107ef0 <RCCEx_PLL2_Config>
 8106ba4:	4603      	mov	r3, r0
 8106ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106baa:	e015      	b.n	8106bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bb0:	3328      	adds	r3, #40	@ 0x28
 8106bb2:	2101      	movs	r1, #1
 8106bb4:	4618      	mov	r0, r3
 8106bb6:	f001 fa4d 	bl	8108054 <RCCEx_PLL3_Config>
 8106bba:	4603      	mov	r3, r0
 8106bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106bc0:	e00a      	b.n	8106bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8106bc2:	2301      	movs	r3, #1
 8106bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106bc8:	e006      	b.n	8106bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106bca:	bf00      	nop
 8106bcc:	e004      	b.n	8106bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106bce:	bf00      	nop
 8106bd0:	e002      	b.n	8106bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106bd2:	bf00      	nop
 8106bd4:	e000      	b.n	8106bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106bdc:	2b00      	cmp	r3, #0
 8106bde:	d10b      	bne.n	8106bf8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106be0:	4ba4      	ldr	r3, [pc, #656]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106be4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106bf0:	4aa0      	ldr	r2, [pc, #640]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106bf2:	430b      	orrs	r3, r1
 8106bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8106bf6:	e003      	b.n	8106c00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c08:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8106c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8106c10:	2300      	movs	r3, #0
 8106c12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8106c16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8106c1a:	460b      	mov	r3, r1
 8106c1c:	4313      	orrs	r3, r2
 8106c1e:	d037      	beq.n	8106c90 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106c2a:	d00e      	beq.n	8106c4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8106c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106c30:	d816      	bhi.n	8106c60 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8106c32:	2b00      	cmp	r3, #0
 8106c34:	d018      	beq.n	8106c68 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8106c36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106c3a:	d111      	bne.n	8106c60 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106c3c:	4b8d      	ldr	r3, [pc, #564]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106c40:	4a8c      	ldr	r2, [pc, #560]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106c46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106c48:	e00f      	b.n	8106c6a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c4e:	3308      	adds	r3, #8
 8106c50:	2101      	movs	r1, #1
 8106c52:	4618      	mov	r0, r3
 8106c54:	f001 f94c 	bl	8107ef0 <RCCEx_PLL2_Config>
 8106c58:	4603      	mov	r3, r0
 8106c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106c5e:	e004      	b.n	8106c6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106c60:	2301      	movs	r3, #1
 8106c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106c66:	e000      	b.n	8106c6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8106c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c6e:	2b00      	cmp	r3, #0
 8106c70:	d10a      	bne.n	8106c88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106c72:	4b80      	ldr	r3, [pc, #512]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106c76:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106c80:	4a7c      	ldr	r2, [pc, #496]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106c82:	430b      	orrs	r3, r1
 8106c84:	6513      	str	r3, [r2, #80]	@ 0x50
 8106c86:	e003      	b.n	8106c90 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c98:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8106c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8106ca0:	2300      	movs	r3, #0
 8106ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8106ca6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8106caa:	460b      	mov	r3, r1
 8106cac:	4313      	orrs	r3, r2
 8106cae:	d039      	beq.n	8106d24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8106cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106cb6:	2b03      	cmp	r3, #3
 8106cb8:	d81c      	bhi.n	8106cf4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8106cba:	a201      	add	r2, pc, #4	@ (adr r2, 8106cc0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8106cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106cc0:	08106cfd 	.word	0x08106cfd
 8106cc4:	08106cd1 	.word	0x08106cd1
 8106cc8:	08106cdf 	.word	0x08106cdf
 8106ccc:	08106cfd 	.word	0x08106cfd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106cd0:	4b68      	ldr	r3, [pc, #416]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106cd4:	4a67      	ldr	r2, [pc, #412]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106cda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106cdc:	e00f      	b.n	8106cfe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ce2:	3308      	adds	r3, #8
 8106ce4:	2102      	movs	r1, #2
 8106ce6:	4618      	mov	r0, r3
 8106ce8:	f001 f902 	bl	8107ef0 <RCCEx_PLL2_Config>
 8106cec:	4603      	mov	r3, r0
 8106cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106cf2:	e004      	b.n	8106cfe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106cf4:	2301      	movs	r3, #1
 8106cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106cfa:	e000      	b.n	8106cfe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8106cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d02:	2b00      	cmp	r3, #0
 8106d04:	d10a      	bne.n	8106d1c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106d06:	4b5b      	ldr	r3, [pc, #364]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106d0a:	f023 0103 	bic.w	r1, r3, #3
 8106d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106d14:	4a57      	ldr	r2, [pc, #348]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d16:	430b      	orrs	r3, r1
 8106d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106d1a:	e003      	b.n	8106d24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d2c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8106d30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8106d34:	2300      	movs	r3, #0
 8106d36:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8106d3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8106d3e:	460b      	mov	r3, r1
 8106d40:	4313      	orrs	r3, r2
 8106d42:	f000 809f 	beq.w	8106e84 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106d46:	4b4c      	ldr	r3, [pc, #304]	@ (8106e78 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106d48:	681b      	ldr	r3, [r3, #0]
 8106d4a:	4a4b      	ldr	r2, [pc, #300]	@ (8106e78 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106d50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106d52:	f7fe f99b 	bl	810508c <HAL_GetTick>
 8106d56:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106d5a:	e00b      	b.n	8106d74 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106d5c:	f7fe f996 	bl	810508c <HAL_GetTick>
 8106d60:	4602      	mov	r2, r0
 8106d62:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8106d66:	1ad3      	subs	r3, r2, r3
 8106d68:	2b64      	cmp	r3, #100	@ 0x64
 8106d6a:	d903      	bls.n	8106d74 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8106d6c:	2303      	movs	r3, #3
 8106d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106d72:	e005      	b.n	8106d80 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106d74:	4b40      	ldr	r3, [pc, #256]	@ (8106e78 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106d76:	681b      	ldr	r3, [r3, #0]
 8106d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106d7c:	2b00      	cmp	r3, #0
 8106d7e:	d0ed      	beq.n	8106d5c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8106d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d84:	2b00      	cmp	r3, #0
 8106d86:	d179      	bne.n	8106e7c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106d88:	4b3a      	ldr	r3, [pc, #232]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8106d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106d94:	4053      	eors	r3, r2
 8106d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106d9a:	2b00      	cmp	r3, #0
 8106d9c:	d015      	beq.n	8106dca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106d9e:	4b35      	ldr	r3, [pc, #212]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106da6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106daa:	4b32      	ldr	r3, [pc, #200]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106dae:	4a31      	ldr	r2, [pc, #196]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8106db4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106db6:	4b2f      	ldr	r3, [pc, #188]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106dba:	4a2e      	ldr	r2, [pc, #184]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106dc0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106dc8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106dce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106dd6:	d118      	bne.n	8106e0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106dd8:	f7fe f958 	bl	810508c <HAL_GetTick>
 8106ddc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106de0:	e00d      	b.n	8106dfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106de2:	f7fe f953 	bl	810508c <HAL_GetTick>
 8106de6:	4602      	mov	r2, r0
 8106de8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8106dec:	1ad2      	subs	r2, r2, r3
 8106dee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8106df2:	429a      	cmp	r2, r3
 8106df4:	d903      	bls.n	8106dfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8106df6:	2303      	movs	r3, #3
 8106df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8106dfc:	e005      	b.n	8106e0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106e02:	f003 0302 	and.w	r3, r3, #2
 8106e06:	2b00      	cmp	r3, #0
 8106e08:	d0eb      	beq.n	8106de2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8106e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e0e:	2b00      	cmp	r3, #0
 8106e10:	d12b      	bne.n	8106e6a <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106e1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106e22:	d110      	bne.n	8106e46 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8106e24:	4b13      	ldr	r3, [pc, #76]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e26:	691b      	ldr	r3, [r3, #16]
 8106e28:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8106e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106e34:	091b      	lsrs	r3, r3, #4
 8106e36:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8106e3a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8106e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e40:	430b      	orrs	r3, r1
 8106e42:	6113      	str	r3, [r2, #16]
 8106e44:	e005      	b.n	8106e52 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8106e46:	4b0b      	ldr	r3, [pc, #44]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e48:	691b      	ldr	r3, [r3, #16]
 8106e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106e50:	6113      	str	r3, [r2, #16]
 8106e52:	4b08      	ldr	r3, [pc, #32]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e54:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8106e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106e62:	4a04      	ldr	r2, [pc, #16]	@ (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e64:	430b      	orrs	r3, r1
 8106e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8106e68:	e00c      	b.n	8106e84 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8106e72:	e007      	b.n	8106e84 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8106e74:	58024400 	.word	0x58024400
 8106e78:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e8c:	f002 0301 	and.w	r3, r2, #1
 8106e90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8106e94:	2300      	movs	r3, #0
 8106e96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8106e9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8106e9e:	460b      	mov	r3, r1
 8106ea0:	4313      	orrs	r3, r2
 8106ea2:	f000 8089 	beq.w	8106fb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8106ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106eaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106eac:	2b28      	cmp	r3, #40	@ 0x28
 8106eae:	d86b      	bhi.n	8106f88 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8106eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8106eb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8106eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106eb6:	bf00      	nop
 8106eb8:	08106f91 	.word	0x08106f91
 8106ebc:	08106f89 	.word	0x08106f89
 8106ec0:	08106f89 	.word	0x08106f89
 8106ec4:	08106f89 	.word	0x08106f89
 8106ec8:	08106f89 	.word	0x08106f89
 8106ecc:	08106f89 	.word	0x08106f89
 8106ed0:	08106f89 	.word	0x08106f89
 8106ed4:	08106f89 	.word	0x08106f89
 8106ed8:	08106f5d 	.word	0x08106f5d
 8106edc:	08106f89 	.word	0x08106f89
 8106ee0:	08106f89 	.word	0x08106f89
 8106ee4:	08106f89 	.word	0x08106f89
 8106ee8:	08106f89 	.word	0x08106f89
 8106eec:	08106f89 	.word	0x08106f89
 8106ef0:	08106f89 	.word	0x08106f89
 8106ef4:	08106f89 	.word	0x08106f89
 8106ef8:	08106f73 	.word	0x08106f73
 8106efc:	08106f89 	.word	0x08106f89
 8106f00:	08106f89 	.word	0x08106f89
 8106f04:	08106f89 	.word	0x08106f89
 8106f08:	08106f89 	.word	0x08106f89
 8106f0c:	08106f89 	.word	0x08106f89
 8106f10:	08106f89 	.word	0x08106f89
 8106f14:	08106f89 	.word	0x08106f89
 8106f18:	08106f91 	.word	0x08106f91
 8106f1c:	08106f89 	.word	0x08106f89
 8106f20:	08106f89 	.word	0x08106f89
 8106f24:	08106f89 	.word	0x08106f89
 8106f28:	08106f89 	.word	0x08106f89
 8106f2c:	08106f89 	.word	0x08106f89
 8106f30:	08106f89 	.word	0x08106f89
 8106f34:	08106f89 	.word	0x08106f89
 8106f38:	08106f91 	.word	0x08106f91
 8106f3c:	08106f89 	.word	0x08106f89
 8106f40:	08106f89 	.word	0x08106f89
 8106f44:	08106f89 	.word	0x08106f89
 8106f48:	08106f89 	.word	0x08106f89
 8106f4c:	08106f89 	.word	0x08106f89
 8106f50:	08106f89 	.word	0x08106f89
 8106f54:	08106f89 	.word	0x08106f89
 8106f58:	08106f91 	.word	0x08106f91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f60:	3308      	adds	r3, #8
 8106f62:	2101      	movs	r1, #1
 8106f64:	4618      	mov	r0, r3
 8106f66:	f000 ffc3 	bl	8107ef0 <RCCEx_PLL2_Config>
 8106f6a:	4603      	mov	r3, r0
 8106f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106f70:	e00f      	b.n	8106f92 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f76:	3328      	adds	r3, #40	@ 0x28
 8106f78:	2101      	movs	r1, #1
 8106f7a:	4618      	mov	r0, r3
 8106f7c:	f001 f86a 	bl	8108054 <RCCEx_PLL3_Config>
 8106f80:	4603      	mov	r3, r0
 8106f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106f86:	e004      	b.n	8106f92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106f88:	2301      	movs	r3, #1
 8106f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106f8e:	e000      	b.n	8106f92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8106f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106f96:	2b00      	cmp	r3, #0
 8106f98:	d10a      	bne.n	8106fb0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106f9a:	4bbf      	ldr	r3, [pc, #764]	@ (8107298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106f9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8106fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106fa8:	4abb      	ldr	r2, [pc, #748]	@ (8107298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106faa:	430b      	orrs	r3, r1
 8106fac:	6553      	str	r3, [r2, #84]	@ 0x54
 8106fae:	e003      	b.n	8106fb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106fb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fc0:	f002 0302 	and.w	r3, r2, #2
 8106fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8106fc8:	2300      	movs	r3, #0
 8106fca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8106fce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8106fd2:	460b      	mov	r3, r1
 8106fd4:	4313      	orrs	r3, r2
 8106fd6:	d041      	beq.n	810705c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8106fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8106fde:	2b05      	cmp	r3, #5
 8106fe0:	d824      	bhi.n	810702c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8106fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8106fe8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8106fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106fe8:	08107035 	.word	0x08107035
 8106fec:	08107001 	.word	0x08107001
 8106ff0:	08107017 	.word	0x08107017
 8106ff4:	08107035 	.word	0x08107035
 8106ff8:	08107035 	.word	0x08107035
 8106ffc:	08107035 	.word	0x08107035
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107004:	3308      	adds	r3, #8
 8107006:	2101      	movs	r1, #1
 8107008:	4618      	mov	r0, r3
 810700a:	f000 ff71 	bl	8107ef0 <RCCEx_PLL2_Config>
 810700e:	4603      	mov	r3, r0
 8107010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8107014:	e00f      	b.n	8107036 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810701a:	3328      	adds	r3, #40	@ 0x28
 810701c:	2101      	movs	r1, #1
 810701e:	4618      	mov	r0, r3
 8107020:	f001 f818 	bl	8108054 <RCCEx_PLL3_Config>
 8107024:	4603      	mov	r3, r0
 8107026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810702a:	e004      	b.n	8107036 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810702c:	2301      	movs	r3, #1
 810702e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107032:	e000      	b.n	8107036 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8107034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810703a:	2b00      	cmp	r3, #0
 810703c:	d10a      	bne.n	8107054 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810703e:	4b96      	ldr	r3, [pc, #600]	@ (8107298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107042:	f023 0107 	bic.w	r1, r3, #7
 8107046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810704a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810704c:	4a92      	ldr	r2, [pc, #584]	@ (8107298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810704e:	430b      	orrs	r3, r1
 8107050:	6553      	str	r3, [r2, #84]	@ 0x54
 8107052:	e003      	b.n	810705c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810705c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107064:	f002 0304 	and.w	r3, r2, #4
 8107068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810706c:	2300      	movs	r3, #0
 810706e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8107072:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8107076:	460b      	mov	r3, r1
 8107078:	4313      	orrs	r3, r2
 810707a:	d044      	beq.n	8107106 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810707c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107080:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8107084:	2b05      	cmp	r3, #5
 8107086:	d825      	bhi.n	81070d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8107088:	a201      	add	r2, pc, #4	@ (adr r2, 8107090 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810708e:	bf00      	nop
 8107090:	081070dd 	.word	0x081070dd
 8107094:	081070a9 	.word	0x081070a9
 8107098:	081070bf 	.word	0x081070bf
 810709c:	081070dd 	.word	0x081070dd
 81070a0:	081070dd 	.word	0x081070dd
 81070a4:	081070dd 	.word	0x081070dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81070a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070ac:	3308      	adds	r3, #8
 81070ae:	2101      	movs	r1, #1
 81070b0:	4618      	mov	r0, r3
 81070b2:	f000 ff1d 	bl	8107ef0 <RCCEx_PLL2_Config>
 81070b6:	4603      	mov	r3, r0
 81070b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81070bc:	e00f      	b.n	81070de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81070be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070c2:	3328      	adds	r3, #40	@ 0x28
 81070c4:	2101      	movs	r1, #1
 81070c6:	4618      	mov	r0, r3
 81070c8:	f000 ffc4 	bl	8108054 <RCCEx_PLL3_Config>
 81070cc:	4603      	mov	r3, r0
 81070ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81070d2:	e004      	b.n	81070de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81070d4:	2301      	movs	r3, #1
 81070d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81070da:	e000      	b.n	81070de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81070dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81070de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070e2:	2b00      	cmp	r3, #0
 81070e4:	d10b      	bne.n	81070fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81070e6:	4b6c      	ldr	r3, [pc, #432]	@ (8107298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81070e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81070ea:	f023 0107 	bic.w	r1, r3, #7
 81070ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81070f6:	4a68      	ldr	r2, [pc, #416]	@ (8107298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81070f8:	430b      	orrs	r3, r1
 81070fa:	6593      	str	r3, [r2, #88]	@ 0x58
 81070fc:	e003      	b.n	8107106 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81070fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107102:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8107106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810710e:	f002 0320 	and.w	r3, r2, #32
 8107112:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8107116:	2300      	movs	r3, #0
 8107118:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810711c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8107120:	460b      	mov	r3, r1
 8107122:	4313      	orrs	r3, r2
 8107124:	d055      	beq.n	81071d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8107126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810712a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810712e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107132:	d033      	beq.n	810719c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8107134:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107138:	d82c      	bhi.n	8107194 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810713a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810713e:	d02f      	beq.n	81071a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8107140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107144:	d826      	bhi.n	8107194 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107146:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810714a:	d02b      	beq.n	81071a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 810714c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107150:	d820      	bhi.n	8107194 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107156:	d012      	beq.n	810717e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8107158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810715c:	d81a      	bhi.n	8107194 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810715e:	2b00      	cmp	r3, #0
 8107160:	d022      	beq.n	81071a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8107162:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107166:	d115      	bne.n	8107194 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810716c:	3308      	adds	r3, #8
 810716e:	2100      	movs	r1, #0
 8107170:	4618      	mov	r0, r3
 8107172:	f000 febd 	bl	8107ef0 <RCCEx_PLL2_Config>
 8107176:	4603      	mov	r3, r0
 8107178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810717c:	e015      	b.n	81071aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107182:	3328      	adds	r3, #40	@ 0x28
 8107184:	2102      	movs	r1, #2
 8107186:	4618      	mov	r0, r3
 8107188:	f000 ff64 	bl	8108054 <RCCEx_PLL3_Config>
 810718c:	4603      	mov	r3, r0
 810718e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8107192:	e00a      	b.n	81071aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107194:	2301      	movs	r3, #1
 8107196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810719a:	e006      	b.n	81071aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810719c:	bf00      	nop
 810719e:	e004      	b.n	81071aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81071a0:	bf00      	nop
 81071a2:	e002      	b.n	81071aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81071a4:	bf00      	nop
 81071a6:	e000      	b.n	81071aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81071a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81071aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81071ae:	2b00      	cmp	r3, #0
 81071b0:	d10b      	bne.n	81071ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81071b2:	4b39      	ldr	r3, [pc, #228]	@ (8107298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81071b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81071b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81071ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81071c2:	4a35      	ldr	r2, [pc, #212]	@ (8107298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81071c4:	430b      	orrs	r3, r1
 81071c6:	6553      	str	r3, [r2, #84]	@ 0x54
 81071c8:	e003      	b.n	81071d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81071ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81071de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81071e2:	2300      	movs	r3, #0
 81071e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81071e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81071ec:	460b      	mov	r3, r1
 81071ee:	4313      	orrs	r3, r2
 81071f0:	d058      	beq.n	81072a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81071f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81071fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81071fe:	d033      	beq.n	8107268 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8107200:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107204:	d82c      	bhi.n	8107260 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810720a:	d02f      	beq.n	810726c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 810720c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107210:	d826      	bhi.n	8107260 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107212:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107216:	d02b      	beq.n	8107270 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8107218:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810721c:	d820      	bhi.n	8107260 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810721e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107222:	d012      	beq.n	810724a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8107224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107228:	d81a      	bhi.n	8107260 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810722a:	2b00      	cmp	r3, #0
 810722c:	d022      	beq.n	8107274 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810722e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8107232:	d115      	bne.n	8107260 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107238:	3308      	adds	r3, #8
 810723a:	2100      	movs	r1, #0
 810723c:	4618      	mov	r0, r3
 810723e:	f000 fe57 	bl	8107ef0 <RCCEx_PLL2_Config>
 8107242:	4603      	mov	r3, r0
 8107244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8107248:	e015      	b.n	8107276 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810724a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810724e:	3328      	adds	r3, #40	@ 0x28
 8107250:	2102      	movs	r1, #2
 8107252:	4618      	mov	r0, r3
 8107254:	f000 fefe 	bl	8108054 <RCCEx_PLL3_Config>
 8107258:	4603      	mov	r3, r0
 810725a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810725e:	e00a      	b.n	8107276 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107260:	2301      	movs	r3, #1
 8107262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107266:	e006      	b.n	8107276 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107268:	bf00      	nop
 810726a:	e004      	b.n	8107276 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810726c:	bf00      	nop
 810726e:	e002      	b.n	8107276 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107270:	bf00      	nop
 8107272:	e000      	b.n	8107276 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810727a:	2b00      	cmp	r3, #0
 810727c:	d10e      	bne.n	810729c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810727e:	4b06      	ldr	r3, [pc, #24]	@ (8107298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107282:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8107286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810728a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810728e:	4a02      	ldr	r2, [pc, #8]	@ (8107298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107290:	430b      	orrs	r3, r1
 8107292:	6593      	str	r3, [r2, #88]	@ 0x58
 8107294:	e006      	b.n	81072a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8107296:	bf00      	nop
 8107298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810729c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81072a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81072a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81072ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81072b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81072b4:	2300      	movs	r3, #0
 81072b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81072ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81072be:	460b      	mov	r3, r1
 81072c0:	4313      	orrs	r3, r2
 81072c2:	d055      	beq.n	8107370 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81072c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81072cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81072d0:	d033      	beq.n	810733a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81072d2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81072d6:	d82c      	bhi.n	8107332 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81072d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81072dc:	d02f      	beq.n	810733e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81072de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81072e2:	d826      	bhi.n	8107332 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81072e4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81072e8:	d02b      	beq.n	8107342 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81072ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81072ee:	d820      	bhi.n	8107332 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81072f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81072f4:	d012      	beq.n	810731c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81072f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81072fa:	d81a      	bhi.n	8107332 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81072fc:	2b00      	cmp	r3, #0
 81072fe:	d022      	beq.n	8107346 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8107300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107304:	d115      	bne.n	8107332 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810730a:	3308      	adds	r3, #8
 810730c:	2100      	movs	r1, #0
 810730e:	4618      	mov	r0, r3
 8107310:	f000 fdee 	bl	8107ef0 <RCCEx_PLL2_Config>
 8107314:	4603      	mov	r3, r0
 8107316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810731a:	e015      	b.n	8107348 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107320:	3328      	adds	r3, #40	@ 0x28
 8107322:	2102      	movs	r1, #2
 8107324:	4618      	mov	r0, r3
 8107326:	f000 fe95 	bl	8108054 <RCCEx_PLL3_Config>
 810732a:	4603      	mov	r3, r0
 810732c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107330:	e00a      	b.n	8107348 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107332:	2301      	movs	r3, #1
 8107334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107338:	e006      	b.n	8107348 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810733a:	bf00      	nop
 810733c:	e004      	b.n	8107348 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810733e:	bf00      	nop
 8107340:	e002      	b.n	8107348 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107342:	bf00      	nop
 8107344:	e000      	b.n	8107348 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810734c:	2b00      	cmp	r3, #0
 810734e:	d10b      	bne.n	8107368 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8107350:	4ba1      	ldr	r3, [pc, #644]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107354:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8107358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810735c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8107360:	4a9d      	ldr	r2, [pc, #628]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107362:	430b      	orrs	r3, r1
 8107364:	6593      	str	r3, [r2, #88]	@ 0x58
 8107366:	e003      	b.n	8107370 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810736c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8107370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107378:	f002 0308 	and.w	r3, r2, #8
 810737c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8107380:	2300      	movs	r3, #0
 8107382:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8107386:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810738a:	460b      	mov	r3, r1
 810738c:	4313      	orrs	r3, r2
 810738e:	d01e      	beq.n	81073ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8107390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810739c:	d10c      	bne.n	81073b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073a2:	3328      	adds	r3, #40	@ 0x28
 81073a4:	2102      	movs	r1, #2
 81073a6:	4618      	mov	r0, r3
 81073a8:	f000 fe54 	bl	8108054 <RCCEx_PLL3_Config>
 81073ac:	4603      	mov	r3, r0
 81073ae:	2b00      	cmp	r3, #0
 81073b0:	d002      	beq.n	81073b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81073b2:	2301      	movs	r3, #1
 81073b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81073b8:	4b87      	ldr	r3, [pc, #540]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81073ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81073bc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81073c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81073c8:	4a83      	ldr	r2, [pc, #524]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81073ca:	430b      	orrs	r3, r1
 81073cc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81073ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073d6:	f002 0310 	and.w	r3, r2, #16
 81073da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81073de:	2300      	movs	r3, #0
 81073e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81073e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81073e8:	460b      	mov	r3, r1
 81073ea:	4313      	orrs	r3, r2
 81073ec:	d01e      	beq.n	810742c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81073f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81073fa:	d10c      	bne.n	8107416 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107400:	3328      	adds	r3, #40	@ 0x28
 8107402:	2102      	movs	r1, #2
 8107404:	4618      	mov	r0, r3
 8107406:	f000 fe25 	bl	8108054 <RCCEx_PLL3_Config>
 810740a:	4603      	mov	r3, r0
 810740c:	2b00      	cmp	r3, #0
 810740e:	d002      	beq.n	8107416 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8107410:	2301      	movs	r3, #1
 8107412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8107416:	4b70      	ldr	r3, [pc, #448]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810741a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810741e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107422:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107426:	4a6c      	ldr	r2, [pc, #432]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107428:	430b      	orrs	r3, r1
 810742a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810742c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107434:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8107438:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810743c:	2300      	movs	r3, #0
 810743e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8107442:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8107446:	460b      	mov	r3, r1
 8107448:	4313      	orrs	r3, r2
 810744a:	d03e      	beq.n	81074ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107450:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8107454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107458:	d022      	beq.n	81074a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810745a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810745e:	d81b      	bhi.n	8107498 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8107460:	2b00      	cmp	r3, #0
 8107462:	d003      	beq.n	810746c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8107464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107468:	d00b      	beq.n	8107482 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810746a:	e015      	b.n	8107498 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810746c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107470:	3308      	adds	r3, #8
 8107472:	2100      	movs	r1, #0
 8107474:	4618      	mov	r0, r3
 8107476:	f000 fd3b 	bl	8107ef0 <RCCEx_PLL2_Config>
 810747a:	4603      	mov	r3, r0
 810747c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107480:	e00f      	b.n	81074a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107486:	3328      	adds	r3, #40	@ 0x28
 8107488:	2102      	movs	r1, #2
 810748a:	4618      	mov	r0, r3
 810748c:	f000 fde2 	bl	8108054 <RCCEx_PLL3_Config>
 8107490:	4603      	mov	r3, r0
 8107492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107496:	e004      	b.n	81074a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107498:	2301      	movs	r3, #1
 810749a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810749e:	e000      	b.n	81074a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81074a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81074a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074a6:	2b00      	cmp	r3, #0
 81074a8:	d10b      	bne.n	81074c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81074aa:	4b4b      	ldr	r3, [pc, #300]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81074ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81074ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81074ba:	4a47      	ldr	r2, [pc, #284]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81074bc:	430b      	orrs	r3, r1
 81074be:	6593      	str	r3, [r2, #88]	@ 0x58
 81074c0:	e003      	b.n	81074ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81074c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81074ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81074d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 81074d8:	2300      	movs	r3, #0
 81074da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81074dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81074e0:	460b      	mov	r3, r1
 81074e2:	4313      	orrs	r3, r2
 81074e4:	d03b      	beq.n	810755e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81074ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81074f2:	d01f      	beq.n	8107534 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81074f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81074f8:	d818      	bhi.n	810752c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81074fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81074fe:	d003      	beq.n	8107508 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8107500:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107504:	d007      	beq.n	8107516 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8107506:	e011      	b.n	810752c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107508:	4b33      	ldr	r3, [pc, #204]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810750a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810750c:	4a32      	ldr	r2, [pc, #200]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810750e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8107514:	e00f      	b.n	8107536 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810751a:	3328      	adds	r3, #40	@ 0x28
 810751c:	2101      	movs	r1, #1
 810751e:	4618      	mov	r0, r3
 8107520:	f000 fd98 	bl	8108054 <RCCEx_PLL3_Config>
 8107524:	4603      	mov	r3, r0
 8107526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810752a:	e004      	b.n	8107536 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810752c:	2301      	movs	r3, #1
 810752e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107532:	e000      	b.n	8107536 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8107534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810753a:	2b00      	cmp	r3, #0
 810753c:	d10b      	bne.n	8107556 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810753e:	4b26      	ldr	r3, [pc, #152]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107542:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8107546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810754a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810754e:	4a22      	ldr	r2, [pc, #136]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107550:	430b      	orrs	r3, r1
 8107552:	6553      	str	r3, [r2, #84]	@ 0x54
 8107554:	e003      	b.n	810755e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810755a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107566:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810756a:	673b      	str	r3, [r7, #112]	@ 0x70
 810756c:	2300      	movs	r3, #0
 810756e:	677b      	str	r3, [r7, #116]	@ 0x74
 8107570:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8107574:	460b      	mov	r3, r1
 8107576:	4313      	orrs	r3, r2
 8107578:	d034      	beq.n	81075e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810757a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810757e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107580:	2b00      	cmp	r3, #0
 8107582:	d003      	beq.n	810758c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8107584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107588:	d007      	beq.n	810759a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810758a:	e011      	b.n	81075b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810758c:	4b12      	ldr	r3, [pc, #72]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810758e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107590:	4a11      	ldr	r2, [pc, #68]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8107598:	e00e      	b.n	81075b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810759e:	3308      	adds	r3, #8
 81075a0:	2102      	movs	r1, #2
 81075a2:	4618      	mov	r0, r3
 81075a4:	f000 fca4 	bl	8107ef0 <RCCEx_PLL2_Config>
 81075a8:	4603      	mov	r3, r0
 81075aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81075ae:	e003      	b.n	81075b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81075b0:	2301      	movs	r3, #1
 81075b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81075b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81075b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075bc:	2b00      	cmp	r3, #0
 81075be:	d10d      	bne.n	81075dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81075c0:	4b05      	ldr	r3, [pc, #20]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81075c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81075c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81075c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81075ce:	4a02      	ldr	r2, [pc, #8]	@ (81075d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81075d0:	430b      	orrs	r3, r1
 81075d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81075d4:	e006      	b.n	81075e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81075d6:	bf00      	nop
 81075d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81075dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81075ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81075f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 81075f2:	2300      	movs	r3, #0
 81075f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81075f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81075fa:	460b      	mov	r3, r1
 81075fc:	4313      	orrs	r3, r2
 81075fe:	d00c      	beq.n	810761a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107604:	3328      	adds	r3, #40	@ 0x28
 8107606:	2102      	movs	r1, #2
 8107608:	4618      	mov	r0, r3
 810760a:	f000 fd23 	bl	8108054 <RCCEx_PLL3_Config>
 810760e:	4603      	mov	r3, r0
 8107610:	2b00      	cmp	r3, #0
 8107612:	d002      	beq.n	810761a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8107614:	2301      	movs	r3, #1
 8107616:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107622:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8107626:	663b      	str	r3, [r7, #96]	@ 0x60
 8107628:	2300      	movs	r3, #0
 810762a:	667b      	str	r3, [r7, #100]	@ 0x64
 810762c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8107630:	460b      	mov	r3, r1
 8107632:	4313      	orrs	r3, r2
 8107634:	d038      	beq.n	81076a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8107636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810763a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810763e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107642:	d018      	beq.n	8107676 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8107644:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107648:	d811      	bhi.n	810766e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810764a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810764e:	d014      	beq.n	810767a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8107650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107654:	d80b      	bhi.n	810766e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8107656:	2b00      	cmp	r3, #0
 8107658:	d011      	beq.n	810767e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810765a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810765e:	d106      	bne.n	810766e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107660:	4bc3      	ldr	r3, [pc, #780]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107664:	4ac2      	ldr	r2, [pc, #776]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810766a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810766c:	e008      	b.n	8107680 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810766e:	2301      	movs	r3, #1
 8107670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107674:	e004      	b.n	8107680 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8107676:	bf00      	nop
 8107678:	e002      	b.n	8107680 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810767a:	bf00      	nop
 810767c:	e000      	b.n	8107680 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810767e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107684:	2b00      	cmp	r3, #0
 8107686:	d10b      	bne.n	81076a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8107688:	4bb9      	ldr	r3, [pc, #740]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810768a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810768c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8107690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8107698:	4ab5      	ldr	r2, [pc, #724]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810769a:	430b      	orrs	r3, r1
 810769c:	6553      	str	r3, [r2, #84]	@ 0x54
 810769e:	e003      	b.n	81076a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81076a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81076a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81076a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81076b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81076b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 81076b6:	2300      	movs	r3, #0
 81076b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81076ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81076be:	460b      	mov	r3, r1
 81076c0:	4313      	orrs	r3, r2
 81076c2:	d009      	beq.n	81076d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81076c4:	4baa      	ldr	r3, [pc, #680]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81076c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81076c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81076cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81076d2:	4aa7      	ldr	r2, [pc, #668]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81076d4:	430b      	orrs	r3, r1
 81076d6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81076d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81076e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81076e4:	653b      	str	r3, [r7, #80]	@ 0x50
 81076e6:	2300      	movs	r3, #0
 81076e8:	657b      	str	r3, [r7, #84]	@ 0x54
 81076ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81076ee:	460b      	mov	r3, r1
 81076f0:	4313      	orrs	r3, r2
 81076f2:	d00a      	beq.n	810770a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81076f4:	4b9e      	ldr	r3, [pc, #632]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81076f6:	691b      	ldr	r3, [r3, #16]
 81076f8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81076fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107700:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8107704:	4a9a      	ldr	r2, [pc, #616]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107706:	430b      	orrs	r3, r1
 8107708:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810770a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107712:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8107716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107718:	2300      	movs	r3, #0
 810771a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810771c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8107720:	460b      	mov	r3, r1
 8107722:	4313      	orrs	r3, r2
 8107724:	d009      	beq.n	810773a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8107726:	4b92      	ldr	r3, [pc, #584]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810772a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810772e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107734:	4a8e      	ldr	r2, [pc, #568]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107736:	430b      	orrs	r3, r1
 8107738:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810773a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107742:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8107746:	643b      	str	r3, [r7, #64]	@ 0x40
 8107748:	2300      	movs	r3, #0
 810774a:	647b      	str	r3, [r7, #68]	@ 0x44
 810774c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8107750:	460b      	mov	r3, r1
 8107752:	4313      	orrs	r3, r2
 8107754:	d00e      	beq.n	8107774 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8107756:	4b86      	ldr	r3, [pc, #536]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107758:	691b      	ldr	r3, [r3, #16]
 810775a:	4a85      	ldr	r2, [pc, #532]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810775c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8107760:	6113      	str	r3, [r2, #16]
 8107762:	4b83      	ldr	r3, [pc, #524]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107764:	6919      	ldr	r1, [r3, #16]
 8107766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810776a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810776e:	4a80      	ldr	r2, [pc, #512]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107770:	430b      	orrs	r3, r1
 8107772:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8107774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107778:	e9d3 2300 	ldrd	r2, r3, [r3]
 810777c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8107780:	63bb      	str	r3, [r7, #56]	@ 0x38
 8107782:	2300      	movs	r3, #0
 8107784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107786:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810778a:	460b      	mov	r3, r1
 810778c:	4313      	orrs	r3, r2
 810778e:	d009      	beq.n	81077a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8107790:	4b77      	ldr	r3, [pc, #476]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107794:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8107798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810779c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810779e:	4a74      	ldr	r2, [pc, #464]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077a0:	430b      	orrs	r3, r1
 81077a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81077a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81077ac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81077b0:	633b      	str	r3, [r7, #48]	@ 0x30
 81077b2:	2300      	movs	r3, #0
 81077b4:	637b      	str	r3, [r7, #52]	@ 0x34
 81077b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81077ba:	460b      	mov	r3, r1
 81077bc:	4313      	orrs	r3, r2
 81077be:	d00a      	beq.n	81077d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81077c0:	4b6b      	ldr	r3, [pc, #428]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81077c4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81077d0:	4a67      	ldr	r2, [pc, #412]	@ (8107970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077d2:	430b      	orrs	r3, r1
 81077d4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81077de:	2100      	movs	r1, #0
 81077e0:	62b9      	str	r1, [r7, #40]	@ 0x28
 81077e2:	f003 0301 	and.w	r3, r3, #1
 81077e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81077e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81077ec:	460b      	mov	r3, r1
 81077ee:	4313      	orrs	r3, r2
 81077f0:	d011      	beq.n	8107816 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077f6:	3308      	adds	r3, #8
 81077f8:	2100      	movs	r1, #0
 81077fa:	4618      	mov	r0, r3
 81077fc:	f000 fb78 	bl	8107ef0 <RCCEx_PLL2_Config>
 8107800:	4603      	mov	r3, r0
 8107802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810780a:	2b00      	cmp	r3, #0
 810780c:	d003      	beq.n	8107816 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810780e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8107816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810781e:	2100      	movs	r1, #0
 8107820:	6239      	str	r1, [r7, #32]
 8107822:	f003 0302 	and.w	r3, r3, #2
 8107826:	627b      	str	r3, [r7, #36]	@ 0x24
 8107828:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810782c:	460b      	mov	r3, r1
 810782e:	4313      	orrs	r3, r2
 8107830:	d011      	beq.n	8107856 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107836:	3308      	adds	r3, #8
 8107838:	2101      	movs	r1, #1
 810783a:	4618      	mov	r0, r3
 810783c:	f000 fb58 	bl	8107ef0 <RCCEx_PLL2_Config>
 8107840:	4603      	mov	r3, r0
 8107842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810784a:	2b00      	cmp	r3, #0
 810784c:	d003      	beq.n	8107856 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810784e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8107856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810785e:	2100      	movs	r1, #0
 8107860:	61b9      	str	r1, [r7, #24]
 8107862:	f003 0304 	and.w	r3, r3, #4
 8107866:	61fb      	str	r3, [r7, #28]
 8107868:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810786c:	460b      	mov	r3, r1
 810786e:	4313      	orrs	r3, r2
 8107870:	d011      	beq.n	8107896 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107876:	3308      	adds	r3, #8
 8107878:	2102      	movs	r1, #2
 810787a:	4618      	mov	r0, r3
 810787c:	f000 fb38 	bl	8107ef0 <RCCEx_PLL2_Config>
 8107880:	4603      	mov	r3, r0
 8107882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810788a:	2b00      	cmp	r3, #0
 810788c:	d003      	beq.n	8107896 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810788e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8107896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810789e:	2100      	movs	r1, #0
 81078a0:	6139      	str	r1, [r7, #16]
 81078a2:	f003 0308 	and.w	r3, r3, #8
 81078a6:	617b      	str	r3, [r7, #20]
 81078a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81078ac:	460b      	mov	r3, r1
 81078ae:	4313      	orrs	r3, r2
 81078b0:	d011      	beq.n	81078d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078b6:	3328      	adds	r3, #40	@ 0x28
 81078b8:	2100      	movs	r1, #0
 81078ba:	4618      	mov	r0, r3
 81078bc:	f000 fbca 	bl	8108054 <RCCEx_PLL3_Config>
 81078c0:	4603      	mov	r3, r0
 81078c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81078c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81078ca:	2b00      	cmp	r3, #0
 81078cc:	d003      	beq.n	81078d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81078ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81078d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81078de:	2100      	movs	r1, #0
 81078e0:	60b9      	str	r1, [r7, #8]
 81078e2:	f003 0310 	and.w	r3, r3, #16
 81078e6:	60fb      	str	r3, [r7, #12]
 81078e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81078ec:	460b      	mov	r3, r1
 81078ee:	4313      	orrs	r3, r2
 81078f0:	d011      	beq.n	8107916 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078f6:	3328      	adds	r3, #40	@ 0x28
 81078f8:	2101      	movs	r1, #1
 81078fa:	4618      	mov	r0, r3
 81078fc:	f000 fbaa 	bl	8108054 <RCCEx_PLL3_Config>
 8107900:	4603      	mov	r3, r0
 8107902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810790a:	2b00      	cmp	r3, #0
 810790c:	d003      	beq.n	8107916 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810790e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8107916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810791e:	2100      	movs	r1, #0
 8107920:	6039      	str	r1, [r7, #0]
 8107922:	f003 0320 	and.w	r3, r3, #32
 8107926:	607b      	str	r3, [r7, #4]
 8107928:	e9d7 1200 	ldrd	r1, r2, [r7]
 810792c:	460b      	mov	r3, r1
 810792e:	4313      	orrs	r3, r2
 8107930:	d011      	beq.n	8107956 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107936:	3328      	adds	r3, #40	@ 0x28
 8107938:	2102      	movs	r1, #2
 810793a:	4618      	mov	r0, r3
 810793c:	f000 fb8a 	bl	8108054 <RCCEx_PLL3_Config>
 8107940:	4603      	mov	r3, r0
 8107942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810794a:	2b00      	cmp	r3, #0
 810794c:	d003      	beq.n	8107956 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810794e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8107956:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810795a:	2b00      	cmp	r3, #0
 810795c:	d101      	bne.n	8107962 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810795e:	2300      	movs	r3, #0
 8107960:	e000      	b.n	8107964 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8107962:	2301      	movs	r3, #1
}
 8107964:	4618      	mov	r0, r3
 8107966:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810796a:	46bd      	mov	sp, r7
 810796c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107970:	58024400 	.word	0x58024400

08107974 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8107974:	b580      	push	{r7, lr}
 8107976:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8107978:	f7fe fd94 	bl	81064a4 <HAL_RCC_GetHCLKFreq>
 810797c:	4602      	mov	r2, r0
 810797e:	4b06      	ldr	r3, [pc, #24]	@ (8107998 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107980:	6a1b      	ldr	r3, [r3, #32]
 8107982:	091b      	lsrs	r3, r3, #4
 8107984:	f003 0307 	and.w	r3, r3, #7
 8107988:	4904      	ldr	r1, [pc, #16]	@ (810799c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810798a:	5ccb      	ldrb	r3, [r1, r3]
 810798c:	f003 031f 	and.w	r3, r3, #31
 8107990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107994:	4618      	mov	r0, r3
 8107996:	bd80      	pop	{r7, pc}
 8107998:	58024400 	.word	0x58024400
 810799c:	0810f1b0 	.word	0x0810f1b0

081079a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81079a0:	b480      	push	{r7}
 81079a2:	b089      	sub	sp, #36	@ 0x24
 81079a4:	af00      	add	r7, sp, #0
 81079a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81079a8:	4ba1      	ldr	r3, [pc, #644]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81079ac:	f003 0303 	and.w	r3, r3, #3
 81079b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81079b2:	4b9f      	ldr	r3, [pc, #636]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81079b6:	0b1b      	lsrs	r3, r3, #12
 81079b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81079bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81079be:	4b9c      	ldr	r3, [pc, #624]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81079c2:	091b      	lsrs	r3, r3, #4
 81079c4:	f003 0301 	and.w	r3, r3, #1
 81079c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81079ca:	4b99      	ldr	r3, [pc, #612]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81079ce:	08db      	lsrs	r3, r3, #3
 81079d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81079d4:	693a      	ldr	r2, [r7, #16]
 81079d6:	fb02 f303 	mul.w	r3, r2, r3
 81079da:	ee07 3a90 	vmov	s15, r3
 81079de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81079e6:	697b      	ldr	r3, [r7, #20]
 81079e8:	2b00      	cmp	r3, #0
 81079ea:	f000 8111 	beq.w	8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81079ee:	69bb      	ldr	r3, [r7, #24]
 81079f0:	2b02      	cmp	r3, #2
 81079f2:	f000 8083 	beq.w	8107afc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81079f6:	69bb      	ldr	r3, [r7, #24]
 81079f8:	2b02      	cmp	r3, #2
 81079fa:	f200 80a1 	bhi.w	8107b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81079fe:	69bb      	ldr	r3, [r7, #24]
 8107a00:	2b00      	cmp	r3, #0
 8107a02:	d003      	beq.n	8107a0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107a04:	69bb      	ldr	r3, [r7, #24]
 8107a06:	2b01      	cmp	r3, #1
 8107a08:	d056      	beq.n	8107ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8107a0a:	e099      	b.n	8107b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107a0c:	4b88      	ldr	r3, [pc, #544]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a0e:	681b      	ldr	r3, [r3, #0]
 8107a10:	f003 0320 	and.w	r3, r3, #32
 8107a14:	2b00      	cmp	r3, #0
 8107a16:	d02d      	beq.n	8107a74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107a18:	4b85      	ldr	r3, [pc, #532]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a1a:	681b      	ldr	r3, [r3, #0]
 8107a1c:	08db      	lsrs	r3, r3, #3
 8107a1e:	f003 0303 	and.w	r3, r3, #3
 8107a22:	4a84      	ldr	r2, [pc, #528]	@ (8107c34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107a24:	fa22 f303 	lsr.w	r3, r2, r3
 8107a28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a2a:	68bb      	ldr	r3, [r7, #8]
 8107a2c:	ee07 3a90 	vmov	s15, r3
 8107a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a34:	697b      	ldr	r3, [r7, #20]
 8107a36:	ee07 3a90 	vmov	s15, r3
 8107a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a42:	4b7b      	ldr	r3, [pc, #492]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a4a:	ee07 3a90 	vmov	s15, r3
 8107a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8107c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107a72:	e087      	b.n	8107b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a74:	697b      	ldr	r3, [r7, #20]
 8107a76:	ee07 3a90 	vmov	s15, r3
 8107a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8107c3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a86:	4b6a      	ldr	r3, [pc, #424]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a8e:	ee07 3a90 	vmov	s15, r3
 8107a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8107c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107ab6:	e065      	b.n	8107b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107ab8:	697b      	ldr	r3, [r7, #20]
 8107aba:	ee07 3a90 	vmov	s15, r3
 8107abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ac2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8107c40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107aca:	4b59      	ldr	r3, [pc, #356]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107ad2:	ee07 3a90 	vmov	s15, r3
 8107ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8107ade:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8107c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107afa:	e043      	b.n	8107b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107afc:	697b      	ldr	r3, [r7, #20]
 8107afe:	ee07 3a90 	vmov	s15, r3
 8107b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107b0e:	4b48      	ldr	r3, [pc, #288]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107b16:	ee07 3a90 	vmov	s15, r3
 8107b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107b22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8107c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b3e:	e021      	b.n	8107b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107b40:	697b      	ldr	r3, [r7, #20]
 8107b42:	ee07 3a90 	vmov	s15, r3
 8107b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8107c40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107b52:	4b37      	ldr	r3, [pc, #220]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107b5a:	ee07 3a90 	vmov	s15, r3
 8107b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8107b66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8107c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107b84:	4b2a      	ldr	r3, [pc, #168]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107b88:	0a5b      	lsrs	r3, r3, #9
 8107b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107b8e:	ee07 3a90 	vmov	s15, r3
 8107b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107baa:	ee17 2a90 	vmov	r2, s15
 8107bae:	687b      	ldr	r3, [r7, #4]
 8107bb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8107bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107bb6:	0c1b      	lsrs	r3, r3, #16
 8107bb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107bbc:	ee07 3a90 	vmov	s15, r3
 8107bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107bc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8107bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107bd8:	ee17 2a90 	vmov	r2, s15
 8107bdc:	687b      	ldr	r3, [r7, #4]
 8107bde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8107be0:	4b13      	ldr	r3, [pc, #76]	@ (8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107be4:	0e1b      	lsrs	r3, r3, #24
 8107be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107bea:	ee07 3a90 	vmov	s15, r3
 8107bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107bf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8107bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107c06:	ee17 2a90 	vmov	r2, s15
 8107c0a:	687b      	ldr	r3, [r7, #4]
 8107c0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107c0e:	e008      	b.n	8107c22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107c10:	687b      	ldr	r3, [r7, #4]
 8107c12:	2200      	movs	r2, #0
 8107c14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8107c16:	687b      	ldr	r3, [r7, #4]
 8107c18:	2200      	movs	r2, #0
 8107c1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107c1c:	687b      	ldr	r3, [r7, #4]
 8107c1e:	2200      	movs	r2, #0
 8107c20:	609a      	str	r2, [r3, #8]
}
 8107c22:	bf00      	nop
 8107c24:	3724      	adds	r7, #36	@ 0x24
 8107c26:	46bd      	mov	sp, r7
 8107c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c2c:	4770      	bx	lr
 8107c2e:	bf00      	nop
 8107c30:	58024400 	.word	0x58024400
 8107c34:	03d09000 	.word	0x03d09000
 8107c38:	46000000 	.word	0x46000000
 8107c3c:	4c742400 	.word	0x4c742400
 8107c40:	4a742400 	.word	0x4a742400
 8107c44:	4bbebc20 	.word	0x4bbebc20

08107c48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8107c48:	b480      	push	{r7}
 8107c4a:	b089      	sub	sp, #36	@ 0x24
 8107c4c:	af00      	add	r7, sp, #0
 8107c4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107c50:	4ba1      	ldr	r3, [pc, #644]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c54:	f003 0303 	and.w	r3, r3, #3
 8107c58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8107c5a:	4b9f      	ldr	r3, [pc, #636]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c5e:	0d1b      	lsrs	r3, r3, #20
 8107c60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107c64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107c66:	4b9c      	ldr	r3, [pc, #624]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107c6a:	0a1b      	lsrs	r3, r3, #8
 8107c6c:	f003 0301 	and.w	r3, r3, #1
 8107c70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8107c72:	4b99      	ldr	r3, [pc, #612]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107c76:	08db      	lsrs	r3, r3, #3
 8107c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107c7c:	693a      	ldr	r2, [r7, #16]
 8107c7e:	fb02 f303 	mul.w	r3, r2, r3
 8107c82:	ee07 3a90 	vmov	s15, r3
 8107c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107c8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8107c8e:	697b      	ldr	r3, [r7, #20]
 8107c90:	2b00      	cmp	r3, #0
 8107c92:	f000 8111 	beq.w	8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107c96:	69bb      	ldr	r3, [r7, #24]
 8107c98:	2b02      	cmp	r3, #2
 8107c9a:	f000 8083 	beq.w	8107da4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8107c9e:	69bb      	ldr	r3, [r7, #24]
 8107ca0:	2b02      	cmp	r3, #2
 8107ca2:	f200 80a1 	bhi.w	8107de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8107ca6:	69bb      	ldr	r3, [r7, #24]
 8107ca8:	2b00      	cmp	r3, #0
 8107caa:	d003      	beq.n	8107cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8107cac:	69bb      	ldr	r3, [r7, #24]
 8107cae:	2b01      	cmp	r3, #1
 8107cb0:	d056      	beq.n	8107d60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107cb2:	e099      	b.n	8107de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107cb4:	4b88      	ldr	r3, [pc, #544]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107cb6:	681b      	ldr	r3, [r3, #0]
 8107cb8:	f003 0320 	and.w	r3, r3, #32
 8107cbc:	2b00      	cmp	r3, #0
 8107cbe:	d02d      	beq.n	8107d1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107cc0:	4b85      	ldr	r3, [pc, #532]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107cc2:	681b      	ldr	r3, [r3, #0]
 8107cc4:	08db      	lsrs	r3, r3, #3
 8107cc6:	f003 0303 	and.w	r3, r3, #3
 8107cca:	4a84      	ldr	r2, [pc, #528]	@ (8107edc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8107cd0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107cd2:	68bb      	ldr	r3, [r7, #8]
 8107cd4:	ee07 3a90 	vmov	s15, r3
 8107cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107cdc:	697b      	ldr	r3, [r7, #20]
 8107cde:	ee07 3a90 	vmov	s15, r3
 8107ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107cea:	4b7b      	ldr	r3, [pc, #492]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107cf2:	ee07 3a90 	vmov	s15, r3
 8107cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8107cfe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8107ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107d1a:	e087      	b.n	8107e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107d1c:	697b      	ldr	r3, [r7, #20]
 8107d1e:	ee07 3a90 	vmov	s15, r3
 8107d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8107ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8107d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d36:	ee07 3a90 	vmov	s15, r3
 8107d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8107ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107d5e:	e065      	b.n	8107e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107d60:	697b      	ldr	r3, [r7, #20]
 8107d62:	ee07 3a90 	vmov	s15, r3
 8107d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8107ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d72:	4b59      	ldr	r3, [pc, #356]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d7a:	ee07 3a90 	vmov	s15, r3
 8107d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8107ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107da2:	e043      	b.n	8107e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107da4:	697b      	ldr	r3, [r7, #20]
 8107da6:	ee07 3a90 	vmov	s15, r3
 8107daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107dae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8107db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107db6:	4b48      	ldr	r3, [pc, #288]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107dbe:	ee07 3a90 	vmov	s15, r3
 8107dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8107dca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8107ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107de6:	e021      	b.n	8107e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107de8:	697b      	ldr	r3, [r7, #20]
 8107dea:	ee07 3a90 	vmov	s15, r3
 8107dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107df2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8107ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107dfa:	4b37      	ldr	r3, [pc, #220]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107e02:	ee07 3a90 	vmov	s15, r3
 8107e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8107e0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8107ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107e2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8107e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107e30:	0a5b      	lsrs	r3, r3, #9
 8107e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107e36:	ee07 3a90 	vmov	s15, r3
 8107e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107e52:	ee17 2a90 	vmov	r2, s15
 8107e56:	687b      	ldr	r3, [r7, #4]
 8107e58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8107e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107e5e:	0c1b      	lsrs	r3, r3, #16
 8107e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107e64:	ee07 3a90 	vmov	s15, r3
 8107e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107e70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107e80:	ee17 2a90 	vmov	r2, s15
 8107e84:	687b      	ldr	r3, [r7, #4]
 8107e86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8107e88:	4b13      	ldr	r3, [pc, #76]	@ (8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107e8c:	0e1b      	lsrs	r3, r3, #24
 8107e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107e92:	ee07 3a90 	vmov	s15, r3
 8107e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8107ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107eae:	ee17 2a90 	vmov	r2, s15
 8107eb2:	687b      	ldr	r3, [r7, #4]
 8107eb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8107eb6:	e008      	b.n	8107eca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	2200      	movs	r2, #0
 8107ebc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8107ebe:	687b      	ldr	r3, [r7, #4]
 8107ec0:	2200      	movs	r2, #0
 8107ec2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107ec4:	687b      	ldr	r3, [r7, #4]
 8107ec6:	2200      	movs	r2, #0
 8107ec8:	609a      	str	r2, [r3, #8]
}
 8107eca:	bf00      	nop
 8107ecc:	3724      	adds	r7, #36	@ 0x24
 8107ece:	46bd      	mov	sp, r7
 8107ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ed4:	4770      	bx	lr
 8107ed6:	bf00      	nop
 8107ed8:	58024400 	.word	0x58024400
 8107edc:	03d09000 	.word	0x03d09000
 8107ee0:	46000000 	.word	0x46000000
 8107ee4:	4c742400 	.word	0x4c742400
 8107ee8:	4a742400 	.word	0x4a742400
 8107eec:	4bbebc20 	.word	0x4bbebc20

08107ef0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107ef0:	b580      	push	{r7, lr}
 8107ef2:	b084      	sub	sp, #16
 8107ef4:	af00      	add	r7, sp, #0
 8107ef6:	6078      	str	r0, [r7, #4]
 8107ef8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107efa:	2300      	movs	r3, #0
 8107efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107efe:	4b54      	ldr	r3, [pc, #336]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107f02:	f003 0303 	and.w	r3, r3, #3
 8107f06:	2b03      	cmp	r3, #3
 8107f08:	d101      	bne.n	8107f0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8107f0a:	2301      	movs	r3, #1
 8107f0c:	e09b      	b.n	8108046 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107f0e:	4b50      	ldr	r3, [pc, #320]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107f10:	681b      	ldr	r3, [r3, #0]
 8107f12:	4a4f      	ldr	r2, [pc, #316]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107f14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8107f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107f1a:	f7fd f8b7 	bl	810508c <HAL_GetTick>
 8107f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107f20:	e008      	b.n	8107f34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8107f22:	f7fd f8b3 	bl	810508c <HAL_GetTick>
 8107f26:	4602      	mov	r2, r0
 8107f28:	68bb      	ldr	r3, [r7, #8]
 8107f2a:	1ad3      	subs	r3, r2, r3
 8107f2c:	2b02      	cmp	r3, #2
 8107f2e:	d901      	bls.n	8107f34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107f30:	2303      	movs	r3, #3
 8107f32:	e088      	b.n	8108046 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107f34:	4b46      	ldr	r3, [pc, #280]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107f36:	681b      	ldr	r3, [r3, #0]
 8107f38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107f3c:	2b00      	cmp	r3, #0
 8107f3e:	d1f0      	bne.n	8107f22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107f40:	4b43      	ldr	r3, [pc, #268]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107f44:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8107f48:	687b      	ldr	r3, [r7, #4]
 8107f4a:	681b      	ldr	r3, [r3, #0]
 8107f4c:	031b      	lsls	r3, r3, #12
 8107f4e:	4940      	ldr	r1, [pc, #256]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107f50:	4313      	orrs	r3, r2
 8107f52:	628b      	str	r3, [r1, #40]	@ 0x28
 8107f54:	687b      	ldr	r3, [r7, #4]
 8107f56:	685b      	ldr	r3, [r3, #4]
 8107f58:	3b01      	subs	r3, #1
 8107f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107f5e:	687b      	ldr	r3, [r7, #4]
 8107f60:	689b      	ldr	r3, [r3, #8]
 8107f62:	3b01      	subs	r3, #1
 8107f64:	025b      	lsls	r3, r3, #9
 8107f66:	b29b      	uxth	r3, r3
 8107f68:	431a      	orrs	r2, r3
 8107f6a:	687b      	ldr	r3, [r7, #4]
 8107f6c:	68db      	ldr	r3, [r3, #12]
 8107f6e:	3b01      	subs	r3, #1
 8107f70:	041b      	lsls	r3, r3, #16
 8107f72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8107f76:	431a      	orrs	r2, r3
 8107f78:	687b      	ldr	r3, [r7, #4]
 8107f7a:	691b      	ldr	r3, [r3, #16]
 8107f7c:	3b01      	subs	r3, #1
 8107f7e:	061b      	lsls	r3, r3, #24
 8107f80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8107f84:	4932      	ldr	r1, [pc, #200]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107f86:	4313      	orrs	r3, r2
 8107f88:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107f8a:	4b31      	ldr	r3, [pc, #196]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107f8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8107f92:	687b      	ldr	r3, [r7, #4]
 8107f94:	695b      	ldr	r3, [r3, #20]
 8107f96:	492e      	ldr	r1, [pc, #184]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107f98:	4313      	orrs	r3, r2
 8107f9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107fa0:	f023 0220 	bic.w	r2, r3, #32
 8107fa4:	687b      	ldr	r3, [r7, #4]
 8107fa6:	699b      	ldr	r3, [r3, #24]
 8107fa8:	4929      	ldr	r1, [pc, #164]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107faa:	4313      	orrs	r3, r2
 8107fac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107fae:	4b28      	ldr	r3, [pc, #160]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107fb2:	4a27      	ldr	r2, [pc, #156]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107fb4:	f023 0310 	bic.w	r3, r3, #16
 8107fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8107fba:	4b25      	ldr	r3, [pc, #148]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8107fc2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8107fc6:	687a      	ldr	r2, [r7, #4]
 8107fc8:	69d2      	ldr	r2, [r2, #28]
 8107fca:	00d2      	lsls	r2, r2, #3
 8107fcc:	4920      	ldr	r1, [pc, #128]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107fce:	4313      	orrs	r3, r2
 8107fd0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107fd8:	f043 0310 	orr.w	r3, r3, #16
 8107fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8107fde:	683b      	ldr	r3, [r7, #0]
 8107fe0:	2b00      	cmp	r3, #0
 8107fe2:	d106      	bne.n	8107ff2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107fe8:	4a19      	ldr	r2, [pc, #100]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107fea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8107fee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107ff0:	e00f      	b.n	8108012 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8107ff2:	683b      	ldr	r3, [r7, #0]
 8107ff4:	2b01      	cmp	r3, #1
 8107ff6:	d106      	bne.n	8108006 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107ff8:	4b15      	ldr	r3, [pc, #84]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107ffc:	4a14      	ldr	r2, [pc, #80]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8107ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108002:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108004:	e005      	b.n	8108012 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8108006:	4b12      	ldr	r3, [pc, #72]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8108008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810800a:	4a11      	ldr	r2, [pc, #68]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 810800c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108010:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8108012:	4b0f      	ldr	r3, [pc, #60]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8108014:	681b      	ldr	r3, [r3, #0]
 8108016:	4a0e      	ldr	r2, [pc, #56]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 8108018:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810801c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810801e:	f7fd f835 	bl	810508c <HAL_GetTick>
 8108022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108024:	e008      	b.n	8108038 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108026:	f7fd f831 	bl	810508c <HAL_GetTick>
 810802a:	4602      	mov	r2, r0
 810802c:	68bb      	ldr	r3, [r7, #8]
 810802e:	1ad3      	subs	r3, r2, r3
 8108030:	2b02      	cmp	r3, #2
 8108032:	d901      	bls.n	8108038 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108034:	2303      	movs	r3, #3
 8108036:	e006      	b.n	8108046 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108038:	4b05      	ldr	r3, [pc, #20]	@ (8108050 <RCCEx_PLL2_Config+0x160>)
 810803a:	681b      	ldr	r3, [r3, #0]
 810803c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108040:	2b00      	cmp	r3, #0
 8108042:	d0f0      	beq.n	8108026 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108044:	7bfb      	ldrb	r3, [r7, #15]
}
 8108046:	4618      	mov	r0, r3
 8108048:	3710      	adds	r7, #16
 810804a:	46bd      	mov	sp, r7
 810804c:	bd80      	pop	{r7, pc}
 810804e:	bf00      	nop
 8108050:	58024400 	.word	0x58024400

08108054 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108054:	b580      	push	{r7, lr}
 8108056:	b084      	sub	sp, #16
 8108058:	af00      	add	r7, sp, #0
 810805a:	6078      	str	r0, [r7, #4]
 810805c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810805e:	2300      	movs	r3, #0
 8108060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108062:	4b54      	ldr	r3, [pc, #336]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 8108064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108066:	f003 0303 	and.w	r3, r3, #3
 810806a:	2b03      	cmp	r3, #3
 810806c:	d101      	bne.n	8108072 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810806e:	2301      	movs	r3, #1
 8108070:	e09b      	b.n	81081aa <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8108072:	4b50      	ldr	r3, [pc, #320]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 8108074:	681b      	ldr	r3, [r3, #0]
 8108076:	4a4f      	ldr	r2, [pc, #316]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 8108078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810807c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810807e:	f7fd f805 	bl	810508c <HAL_GetTick>
 8108082:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108084:	e008      	b.n	8108098 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108086:	f7fd f801 	bl	810508c <HAL_GetTick>
 810808a:	4602      	mov	r2, r0
 810808c:	68bb      	ldr	r3, [r7, #8]
 810808e:	1ad3      	subs	r3, r2, r3
 8108090:	2b02      	cmp	r3, #2
 8108092:	d901      	bls.n	8108098 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108094:	2303      	movs	r3, #3
 8108096:	e088      	b.n	81081aa <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108098:	4b46      	ldr	r3, [pc, #280]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 810809a:	681b      	ldr	r3, [r3, #0]
 810809c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81080a0:	2b00      	cmp	r3, #0
 81080a2:	d1f0      	bne.n	8108086 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81080a4:	4b43      	ldr	r3, [pc, #268]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 81080a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81080a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81080ac:	687b      	ldr	r3, [r7, #4]
 81080ae:	681b      	ldr	r3, [r3, #0]
 81080b0:	051b      	lsls	r3, r3, #20
 81080b2:	4940      	ldr	r1, [pc, #256]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 81080b4:	4313      	orrs	r3, r2
 81080b6:	628b      	str	r3, [r1, #40]	@ 0x28
 81080b8:	687b      	ldr	r3, [r7, #4]
 81080ba:	685b      	ldr	r3, [r3, #4]
 81080bc:	3b01      	subs	r3, #1
 81080be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81080c2:	687b      	ldr	r3, [r7, #4]
 81080c4:	689b      	ldr	r3, [r3, #8]
 81080c6:	3b01      	subs	r3, #1
 81080c8:	025b      	lsls	r3, r3, #9
 81080ca:	b29b      	uxth	r3, r3
 81080cc:	431a      	orrs	r2, r3
 81080ce:	687b      	ldr	r3, [r7, #4]
 81080d0:	68db      	ldr	r3, [r3, #12]
 81080d2:	3b01      	subs	r3, #1
 81080d4:	041b      	lsls	r3, r3, #16
 81080d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81080da:	431a      	orrs	r2, r3
 81080dc:	687b      	ldr	r3, [r7, #4]
 81080de:	691b      	ldr	r3, [r3, #16]
 81080e0:	3b01      	subs	r3, #1
 81080e2:	061b      	lsls	r3, r3, #24
 81080e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81080e8:	4932      	ldr	r1, [pc, #200]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 81080ea:	4313      	orrs	r3, r2
 81080ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81080ee:	4b31      	ldr	r3, [pc, #196]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 81080f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81080f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81080f6:	687b      	ldr	r3, [r7, #4]
 81080f8:	695b      	ldr	r3, [r3, #20]
 81080fa:	492e      	ldr	r1, [pc, #184]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 81080fc:	4313      	orrs	r3, r2
 81080fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8108100:	4b2c      	ldr	r3, [pc, #176]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 8108102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108104:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8108108:	687b      	ldr	r3, [r7, #4]
 810810a:	699b      	ldr	r3, [r3, #24]
 810810c:	4929      	ldr	r1, [pc, #164]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 810810e:	4313      	orrs	r3, r2
 8108110:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8108112:	4b28      	ldr	r3, [pc, #160]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 8108114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108116:	4a27      	ldr	r2, [pc, #156]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 8108118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810811c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810811e:	4b25      	ldr	r3, [pc, #148]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 8108120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108122:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108126:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810812a:	687a      	ldr	r2, [r7, #4]
 810812c:	69d2      	ldr	r2, [r2, #28]
 810812e:	00d2      	lsls	r2, r2, #3
 8108130:	4920      	ldr	r1, [pc, #128]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 8108132:	4313      	orrs	r3, r2
 8108134:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8108136:	4b1f      	ldr	r3, [pc, #124]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 8108138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810813a:	4a1e      	ldr	r2, [pc, #120]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 810813c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8108140:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108142:	683b      	ldr	r3, [r7, #0]
 8108144:	2b00      	cmp	r3, #0
 8108146:	d106      	bne.n	8108156 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8108148:	4b1a      	ldr	r3, [pc, #104]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 810814a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810814c:	4a19      	ldr	r2, [pc, #100]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 810814e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8108152:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108154:	e00f      	b.n	8108176 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108156:	683b      	ldr	r3, [r7, #0]
 8108158:	2b01      	cmp	r3, #1
 810815a:	d106      	bne.n	810816a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810815c:	4b15      	ldr	r3, [pc, #84]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 810815e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108160:	4a14      	ldr	r2, [pc, #80]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 8108162:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8108166:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108168:	e005      	b.n	8108176 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810816a:	4b12      	ldr	r3, [pc, #72]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 810816c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810816e:	4a11      	ldr	r2, [pc, #68]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 8108170:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8108174:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8108176:	4b0f      	ldr	r3, [pc, #60]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 8108178:	681b      	ldr	r3, [r3, #0]
 810817a:	4a0e      	ldr	r2, [pc, #56]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 810817c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8108180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108182:	f7fc ff83 	bl	810508c <HAL_GetTick>
 8108186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108188:	e008      	b.n	810819c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810818a:	f7fc ff7f 	bl	810508c <HAL_GetTick>
 810818e:	4602      	mov	r2, r0
 8108190:	68bb      	ldr	r3, [r7, #8]
 8108192:	1ad3      	subs	r3, r2, r3
 8108194:	2b02      	cmp	r3, #2
 8108196:	d901      	bls.n	810819c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108198:	2303      	movs	r3, #3
 810819a:	e006      	b.n	81081aa <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810819c:	4b05      	ldr	r3, [pc, #20]	@ (81081b4 <RCCEx_PLL3_Config+0x160>)
 810819e:	681b      	ldr	r3, [r3, #0]
 81081a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81081a4:	2b00      	cmp	r3, #0
 81081a6:	d0f0      	beq.n	810818a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81081a8:	7bfb      	ldrb	r3, [r7, #15]
}
 81081aa:	4618      	mov	r0, r3
 81081ac:	3710      	adds	r7, #16
 81081ae:	46bd      	mov	sp, r7
 81081b0:	bd80      	pop	{r7, pc}
 81081b2:	bf00      	nop
 81081b4:	58024400 	.word	0x58024400

081081b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 81081b8:	b580      	push	{r7, lr}
 81081ba:	b084      	sub	sp, #16
 81081bc:	af00      	add	r7, sp, #0
 81081be:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 81081c0:	687b      	ldr	r3, [r7, #4]
 81081c2:	2b00      	cmp	r3, #0
 81081c4:	d101      	bne.n	81081ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 81081c6:	2301      	movs	r3, #1
 81081c8:	e10f      	b.n	81083ea <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81081ca:	687b      	ldr	r3, [r7, #4]
 81081cc:	2200      	movs	r2, #0
 81081ce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81081d0:	687b      	ldr	r3, [r7, #4]
 81081d2:	681b      	ldr	r3, [r3, #0]
 81081d4:	4a87      	ldr	r2, [pc, #540]	@ (81083f4 <HAL_SPI_Init+0x23c>)
 81081d6:	4293      	cmp	r3, r2
 81081d8:	d00f      	beq.n	81081fa <HAL_SPI_Init+0x42>
 81081da:	687b      	ldr	r3, [r7, #4]
 81081dc:	681b      	ldr	r3, [r3, #0]
 81081de:	4a86      	ldr	r2, [pc, #536]	@ (81083f8 <HAL_SPI_Init+0x240>)
 81081e0:	4293      	cmp	r3, r2
 81081e2:	d00a      	beq.n	81081fa <HAL_SPI_Init+0x42>
 81081e4:	687b      	ldr	r3, [r7, #4]
 81081e6:	681b      	ldr	r3, [r3, #0]
 81081e8:	4a84      	ldr	r2, [pc, #528]	@ (81083fc <HAL_SPI_Init+0x244>)
 81081ea:	4293      	cmp	r3, r2
 81081ec:	d005      	beq.n	81081fa <HAL_SPI_Init+0x42>
 81081ee:	687b      	ldr	r3, [r7, #4]
 81081f0:	68db      	ldr	r3, [r3, #12]
 81081f2:	2b0f      	cmp	r3, #15
 81081f4:	d901      	bls.n	81081fa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81081f6:	2301      	movs	r3, #1
 81081f8:	e0f7      	b.n	81083ea <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81081fa:	6878      	ldr	r0, [r7, #4]
 81081fc:	f000 f900 	bl	8108400 <SPI_GetPacketSize>
 8108200:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8108202:	687b      	ldr	r3, [r7, #4]
 8108204:	681b      	ldr	r3, [r3, #0]
 8108206:	4a7b      	ldr	r2, [pc, #492]	@ (81083f4 <HAL_SPI_Init+0x23c>)
 8108208:	4293      	cmp	r3, r2
 810820a:	d00c      	beq.n	8108226 <HAL_SPI_Init+0x6e>
 810820c:	687b      	ldr	r3, [r7, #4]
 810820e:	681b      	ldr	r3, [r3, #0]
 8108210:	4a79      	ldr	r2, [pc, #484]	@ (81083f8 <HAL_SPI_Init+0x240>)
 8108212:	4293      	cmp	r3, r2
 8108214:	d007      	beq.n	8108226 <HAL_SPI_Init+0x6e>
 8108216:	687b      	ldr	r3, [r7, #4]
 8108218:	681b      	ldr	r3, [r3, #0]
 810821a:	4a78      	ldr	r2, [pc, #480]	@ (81083fc <HAL_SPI_Init+0x244>)
 810821c:	4293      	cmp	r3, r2
 810821e:	d002      	beq.n	8108226 <HAL_SPI_Init+0x6e>
 8108220:	68fb      	ldr	r3, [r7, #12]
 8108222:	2b08      	cmp	r3, #8
 8108224:	d811      	bhi.n	810824a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8108226:	687b      	ldr	r3, [r7, #4]
 8108228:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810822a:	4a72      	ldr	r2, [pc, #456]	@ (81083f4 <HAL_SPI_Init+0x23c>)
 810822c:	4293      	cmp	r3, r2
 810822e:	d009      	beq.n	8108244 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8108230:	687b      	ldr	r3, [r7, #4]
 8108232:	681b      	ldr	r3, [r3, #0]
 8108234:	4a70      	ldr	r2, [pc, #448]	@ (81083f8 <HAL_SPI_Init+0x240>)
 8108236:	4293      	cmp	r3, r2
 8108238:	d004      	beq.n	8108244 <HAL_SPI_Init+0x8c>
 810823a:	687b      	ldr	r3, [r7, #4]
 810823c:	681b      	ldr	r3, [r3, #0]
 810823e:	4a6f      	ldr	r2, [pc, #444]	@ (81083fc <HAL_SPI_Init+0x244>)
 8108240:	4293      	cmp	r3, r2
 8108242:	d104      	bne.n	810824e <HAL_SPI_Init+0x96>
 8108244:	68fb      	ldr	r3, [r7, #12]
 8108246:	2b10      	cmp	r3, #16
 8108248:	d901      	bls.n	810824e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810824a:	2301      	movs	r3, #1
 810824c:	e0cd      	b.n	81083ea <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810824e:	687b      	ldr	r3, [r7, #4]
 8108250:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8108254:	b2db      	uxtb	r3, r3
 8108256:	2b00      	cmp	r3, #0
 8108258:	d106      	bne.n	8108268 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810825a:	687b      	ldr	r3, [r7, #4]
 810825c:	2200      	movs	r2, #0
 810825e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8108262:	6878      	ldr	r0, [r7, #4]
 8108264:	f7fc fbdc 	bl	8104a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8108268:	687b      	ldr	r3, [r7, #4]
 810826a:	2202      	movs	r2, #2
 810826c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8108270:	687b      	ldr	r3, [r7, #4]
 8108272:	681b      	ldr	r3, [r3, #0]
 8108274:	681a      	ldr	r2, [r3, #0]
 8108276:	687b      	ldr	r3, [r7, #4]
 8108278:	681b      	ldr	r3, [r3, #0]
 810827a:	f022 0201 	bic.w	r2, r2, #1
 810827e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8108280:	687b      	ldr	r3, [r7, #4]
 8108282:	681b      	ldr	r3, [r3, #0]
 8108284:	689b      	ldr	r3, [r3, #8]
 8108286:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 810828a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810828c:	687b      	ldr	r3, [r7, #4]
 810828e:	699b      	ldr	r3, [r3, #24]
 8108290:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8108294:	d119      	bne.n	81082ca <HAL_SPI_Init+0x112>
 8108296:	687b      	ldr	r3, [r7, #4]
 8108298:	685b      	ldr	r3, [r3, #4]
 810829a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810829e:	d103      	bne.n	81082a8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81082a0:	687b      	ldr	r3, [r7, #4]
 81082a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81082a4:	2b00      	cmp	r3, #0
 81082a6:	d008      	beq.n	81082ba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81082a8:	687b      	ldr	r3, [r7, #4]
 81082aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81082ac:	2b00      	cmp	r3, #0
 81082ae:	d10c      	bne.n	81082ca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81082b0:	687b      	ldr	r3, [r7, #4]
 81082b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81082b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81082b8:	d107      	bne.n	81082ca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81082ba:	687b      	ldr	r3, [r7, #4]
 81082bc:	681b      	ldr	r3, [r3, #0]
 81082be:	681a      	ldr	r2, [r3, #0]
 81082c0:	687b      	ldr	r3, [r7, #4]
 81082c2:	681b      	ldr	r3, [r3, #0]
 81082c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 81082c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 81082ca:	687b      	ldr	r3, [r7, #4]
 81082cc:	685b      	ldr	r3, [r3, #4]
 81082ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81082d2:	2b00      	cmp	r3, #0
 81082d4:	d00f      	beq.n	81082f6 <HAL_SPI_Init+0x13e>
 81082d6:	687b      	ldr	r3, [r7, #4]
 81082d8:	68db      	ldr	r3, [r3, #12]
 81082da:	2b06      	cmp	r3, #6
 81082dc:	d90b      	bls.n	81082f6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 81082de:	687b      	ldr	r3, [r7, #4]
 81082e0:	681b      	ldr	r3, [r3, #0]
 81082e2:	681b      	ldr	r3, [r3, #0]
 81082e4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 81082e8:	687b      	ldr	r3, [r7, #4]
 81082ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81082ec:	687b      	ldr	r3, [r7, #4]
 81082ee:	681b      	ldr	r3, [r3, #0]
 81082f0:	430a      	orrs	r2, r1
 81082f2:	601a      	str	r2, [r3, #0]
 81082f4:	e007      	b.n	8108306 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 81082f6:	687b      	ldr	r3, [r7, #4]
 81082f8:	681b      	ldr	r3, [r3, #0]
 81082fa:	681a      	ldr	r2, [r3, #0]
 81082fc:	687b      	ldr	r3, [r7, #4]
 81082fe:	681b      	ldr	r3, [r3, #0]
 8108300:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8108304:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8108306:	687b      	ldr	r3, [r7, #4]
 8108308:	69da      	ldr	r2, [r3, #28]
 810830a:	687b      	ldr	r3, [r7, #4]
 810830c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810830e:	431a      	orrs	r2, r3
 8108310:	68bb      	ldr	r3, [r7, #8]
 8108312:	431a      	orrs	r2, r3
 8108314:	687b      	ldr	r3, [r7, #4]
 8108316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108318:	ea42 0103 	orr.w	r1, r2, r3
 810831c:	687b      	ldr	r3, [r7, #4]
 810831e:	68da      	ldr	r2, [r3, #12]
 8108320:	687b      	ldr	r3, [r7, #4]
 8108322:	681b      	ldr	r3, [r3, #0]
 8108324:	430a      	orrs	r2, r1
 8108326:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8108328:	687b      	ldr	r3, [r7, #4]
 810832a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810832c:	687b      	ldr	r3, [r7, #4]
 810832e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108330:	431a      	orrs	r2, r3
 8108332:	687b      	ldr	r3, [r7, #4]
 8108334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108336:	431a      	orrs	r2, r3
 8108338:	687b      	ldr	r3, [r7, #4]
 810833a:	699b      	ldr	r3, [r3, #24]
 810833c:	431a      	orrs	r2, r3
 810833e:	687b      	ldr	r3, [r7, #4]
 8108340:	691b      	ldr	r3, [r3, #16]
 8108342:	431a      	orrs	r2, r3
 8108344:	687b      	ldr	r3, [r7, #4]
 8108346:	695b      	ldr	r3, [r3, #20]
 8108348:	431a      	orrs	r2, r3
 810834a:	687b      	ldr	r3, [r7, #4]
 810834c:	6a1b      	ldr	r3, [r3, #32]
 810834e:	431a      	orrs	r2, r3
 8108350:	687b      	ldr	r3, [r7, #4]
 8108352:	685b      	ldr	r3, [r3, #4]
 8108354:	431a      	orrs	r2, r3
 8108356:	687b      	ldr	r3, [r7, #4]
 8108358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810835a:	431a      	orrs	r2, r3
 810835c:	687b      	ldr	r3, [r7, #4]
 810835e:	689b      	ldr	r3, [r3, #8]
 8108360:	431a      	orrs	r2, r3
 8108362:	687b      	ldr	r3, [r7, #4]
 8108364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8108366:	ea42 0103 	orr.w	r1, r2, r3
 810836a:	687b      	ldr	r3, [r7, #4]
 810836c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	681b      	ldr	r3, [r3, #0]
 8108372:	430a      	orrs	r2, r1
 8108374:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8108376:	687b      	ldr	r3, [r7, #4]
 8108378:	685b      	ldr	r3, [r3, #4]
 810837a:	2b00      	cmp	r3, #0
 810837c:	d113      	bne.n	81083a6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810837e:	687b      	ldr	r3, [r7, #4]
 8108380:	681b      	ldr	r3, [r3, #0]
 8108382:	689b      	ldr	r3, [r3, #8]
 8108384:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8108388:	687b      	ldr	r3, [r7, #4]
 810838a:	681b      	ldr	r3, [r3, #0]
 810838c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8108390:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8108392:	687b      	ldr	r3, [r7, #4]
 8108394:	681b      	ldr	r3, [r3, #0]
 8108396:	689b      	ldr	r3, [r3, #8]
 8108398:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 810839c:	687b      	ldr	r3, [r7, #4]
 810839e:	681b      	ldr	r3, [r3, #0]
 81083a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 81083a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81083a6:	687b      	ldr	r3, [r7, #4]
 81083a8:	681b      	ldr	r3, [r3, #0]
 81083aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81083ac:	687b      	ldr	r3, [r7, #4]
 81083ae:	681b      	ldr	r3, [r3, #0]
 81083b0:	f022 0201 	bic.w	r2, r2, #1
 81083b4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81083b6:	687b      	ldr	r3, [r7, #4]
 81083b8:	685b      	ldr	r3, [r3, #4]
 81083ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81083be:	2b00      	cmp	r3, #0
 81083c0:	d00a      	beq.n	81083d8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81083c2:	687b      	ldr	r3, [r7, #4]
 81083c4:	681b      	ldr	r3, [r3, #0]
 81083c6:	68db      	ldr	r3, [r3, #12]
 81083c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81083cc:	687b      	ldr	r3, [r7, #4]
 81083ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81083d0:	687b      	ldr	r3, [r7, #4]
 81083d2:	681b      	ldr	r3, [r3, #0]
 81083d4:	430a      	orrs	r2, r1
 81083d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81083d8:	687b      	ldr	r3, [r7, #4]
 81083da:	2200      	movs	r2, #0
 81083dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81083e0:	687b      	ldr	r3, [r7, #4]
 81083e2:	2201      	movs	r2, #1
 81083e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 81083e8:	2300      	movs	r3, #0
}
 81083ea:	4618      	mov	r0, r3
 81083ec:	3710      	adds	r7, #16
 81083ee:	46bd      	mov	sp, r7
 81083f0:	bd80      	pop	{r7, pc}
 81083f2:	bf00      	nop
 81083f4:	40013000 	.word	0x40013000
 81083f8:	40003800 	.word	0x40003800
 81083fc:	40003c00 	.word	0x40003c00

08108400 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8108400:	b480      	push	{r7}
 8108402:	b085      	sub	sp, #20
 8108404:	af00      	add	r7, sp, #0
 8108406:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8108408:	687b      	ldr	r3, [r7, #4]
 810840a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810840c:	095b      	lsrs	r3, r3, #5
 810840e:	3301      	adds	r3, #1
 8108410:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8108412:	687b      	ldr	r3, [r7, #4]
 8108414:	68db      	ldr	r3, [r3, #12]
 8108416:	3301      	adds	r3, #1
 8108418:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810841a:	68bb      	ldr	r3, [r7, #8]
 810841c:	3307      	adds	r3, #7
 810841e:	08db      	lsrs	r3, r3, #3
 8108420:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8108422:	68bb      	ldr	r3, [r7, #8]
 8108424:	68fa      	ldr	r2, [r7, #12]
 8108426:	fb02 f303 	mul.w	r3, r2, r3
}
 810842a:	4618      	mov	r0, r3
 810842c:	3714      	adds	r7, #20
 810842e:	46bd      	mov	sp, r7
 8108430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108434:	4770      	bx	lr

08108436 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8108436:	b580      	push	{r7, lr}
 8108438:	b082      	sub	sp, #8
 810843a:	af00      	add	r7, sp, #0
 810843c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810843e:	687b      	ldr	r3, [r7, #4]
 8108440:	2b00      	cmp	r3, #0
 8108442:	d101      	bne.n	8108448 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8108444:	2301      	movs	r3, #1
 8108446:	e042      	b.n	81084ce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8108448:	687b      	ldr	r3, [r7, #4]
 810844a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810844e:	2b00      	cmp	r3, #0
 8108450:	d106      	bne.n	8108460 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8108452:	687b      	ldr	r3, [r7, #4]
 8108454:	2200      	movs	r2, #0
 8108456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810845a:	6878      	ldr	r0, [r7, #4]
 810845c:	f7fc fb4a 	bl	8104af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8108460:	687b      	ldr	r3, [r7, #4]
 8108462:	2224      	movs	r2, #36	@ 0x24
 8108464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8108468:	687b      	ldr	r3, [r7, #4]
 810846a:	681b      	ldr	r3, [r3, #0]
 810846c:	681a      	ldr	r2, [r3, #0]
 810846e:	687b      	ldr	r3, [r7, #4]
 8108470:	681b      	ldr	r3, [r3, #0]
 8108472:	f022 0201 	bic.w	r2, r2, #1
 8108476:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8108478:	687b      	ldr	r3, [r7, #4]
 810847a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810847c:	2b00      	cmp	r3, #0
 810847e:	d002      	beq.n	8108486 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8108480:	6878      	ldr	r0, [r7, #4]
 8108482:	f001 fa61 	bl	8109948 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8108486:	6878      	ldr	r0, [r7, #4]
 8108488:	f000 fcf6 	bl	8108e78 <UART_SetConfig>
 810848c:	4603      	mov	r3, r0
 810848e:	2b01      	cmp	r3, #1
 8108490:	d101      	bne.n	8108496 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8108492:	2301      	movs	r3, #1
 8108494:	e01b      	b.n	81084ce <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8108496:	687b      	ldr	r3, [r7, #4]
 8108498:	681b      	ldr	r3, [r3, #0]
 810849a:	685a      	ldr	r2, [r3, #4]
 810849c:	687b      	ldr	r3, [r7, #4]
 810849e:	681b      	ldr	r3, [r3, #0]
 81084a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 81084a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81084a6:	687b      	ldr	r3, [r7, #4]
 81084a8:	681b      	ldr	r3, [r3, #0]
 81084aa:	689a      	ldr	r2, [r3, #8]
 81084ac:	687b      	ldr	r3, [r7, #4]
 81084ae:	681b      	ldr	r3, [r3, #0]
 81084b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 81084b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81084b6:	687b      	ldr	r3, [r7, #4]
 81084b8:	681b      	ldr	r3, [r3, #0]
 81084ba:	681a      	ldr	r2, [r3, #0]
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	681b      	ldr	r3, [r3, #0]
 81084c0:	f042 0201 	orr.w	r2, r2, #1
 81084c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81084c6:	6878      	ldr	r0, [r7, #4]
 81084c8:	f001 fae0 	bl	8109a8c <UART_CheckIdleState>
 81084cc:	4603      	mov	r3, r0
}
 81084ce:	4618      	mov	r0, r3
 81084d0:	3708      	adds	r7, #8
 81084d2:	46bd      	mov	sp, r7
 81084d4:	bd80      	pop	{r7, pc}

081084d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81084d6:	b580      	push	{r7, lr}
 81084d8:	b08a      	sub	sp, #40	@ 0x28
 81084da:	af02      	add	r7, sp, #8
 81084dc:	60f8      	str	r0, [r7, #12]
 81084de:	60b9      	str	r1, [r7, #8]
 81084e0:	603b      	str	r3, [r7, #0]
 81084e2:	4613      	mov	r3, r2
 81084e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81084e6:	68fb      	ldr	r3, [r7, #12]
 81084e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81084ec:	2b20      	cmp	r3, #32
 81084ee:	d17b      	bne.n	81085e8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 81084f0:	68bb      	ldr	r3, [r7, #8]
 81084f2:	2b00      	cmp	r3, #0
 81084f4:	d002      	beq.n	81084fc <HAL_UART_Transmit+0x26>
 81084f6:	88fb      	ldrh	r3, [r7, #6]
 81084f8:	2b00      	cmp	r3, #0
 81084fa:	d101      	bne.n	8108500 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 81084fc:	2301      	movs	r3, #1
 81084fe:	e074      	b.n	81085ea <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108500:	68fb      	ldr	r3, [r7, #12]
 8108502:	2200      	movs	r2, #0
 8108504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108508:	68fb      	ldr	r3, [r7, #12]
 810850a:	2221      	movs	r2, #33	@ 0x21
 810850c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8108510:	f7fc fdbc 	bl	810508c <HAL_GetTick>
 8108514:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8108516:	68fb      	ldr	r3, [r7, #12]
 8108518:	88fa      	ldrh	r2, [r7, #6]
 810851a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810851e:	68fb      	ldr	r3, [r7, #12]
 8108520:	88fa      	ldrh	r2, [r7, #6]
 8108522:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8108526:	68fb      	ldr	r3, [r7, #12]
 8108528:	689b      	ldr	r3, [r3, #8]
 810852a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810852e:	d108      	bne.n	8108542 <HAL_UART_Transmit+0x6c>
 8108530:	68fb      	ldr	r3, [r7, #12]
 8108532:	691b      	ldr	r3, [r3, #16]
 8108534:	2b00      	cmp	r3, #0
 8108536:	d104      	bne.n	8108542 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8108538:	2300      	movs	r3, #0
 810853a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810853c:	68bb      	ldr	r3, [r7, #8]
 810853e:	61bb      	str	r3, [r7, #24]
 8108540:	e003      	b.n	810854a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8108542:	68bb      	ldr	r3, [r7, #8]
 8108544:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8108546:	2300      	movs	r3, #0
 8108548:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810854a:	e030      	b.n	81085ae <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810854c:	683b      	ldr	r3, [r7, #0]
 810854e:	9300      	str	r3, [sp, #0]
 8108550:	697b      	ldr	r3, [r7, #20]
 8108552:	2200      	movs	r2, #0
 8108554:	2180      	movs	r1, #128	@ 0x80
 8108556:	68f8      	ldr	r0, [r7, #12]
 8108558:	f001 fb42 	bl	8109be0 <UART_WaitOnFlagUntilTimeout>
 810855c:	4603      	mov	r3, r0
 810855e:	2b00      	cmp	r3, #0
 8108560:	d005      	beq.n	810856e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8108562:	68fb      	ldr	r3, [r7, #12]
 8108564:	2220      	movs	r2, #32
 8108566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810856a:	2303      	movs	r3, #3
 810856c:	e03d      	b.n	81085ea <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810856e:	69fb      	ldr	r3, [r7, #28]
 8108570:	2b00      	cmp	r3, #0
 8108572:	d10b      	bne.n	810858c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8108574:	69bb      	ldr	r3, [r7, #24]
 8108576:	881b      	ldrh	r3, [r3, #0]
 8108578:	461a      	mov	r2, r3
 810857a:	68fb      	ldr	r3, [r7, #12]
 810857c:	681b      	ldr	r3, [r3, #0]
 810857e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108582:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8108584:	69bb      	ldr	r3, [r7, #24]
 8108586:	3302      	adds	r3, #2
 8108588:	61bb      	str	r3, [r7, #24]
 810858a:	e007      	b.n	810859c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810858c:	69fb      	ldr	r3, [r7, #28]
 810858e:	781a      	ldrb	r2, [r3, #0]
 8108590:	68fb      	ldr	r3, [r7, #12]
 8108592:	681b      	ldr	r3, [r3, #0]
 8108594:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8108596:	69fb      	ldr	r3, [r7, #28]
 8108598:	3301      	adds	r3, #1
 810859a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810859c:	68fb      	ldr	r3, [r7, #12]
 810859e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81085a2:	b29b      	uxth	r3, r3
 81085a4:	3b01      	subs	r3, #1
 81085a6:	b29a      	uxth	r2, r3
 81085a8:	68fb      	ldr	r3, [r7, #12]
 81085aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 81085ae:	68fb      	ldr	r3, [r7, #12]
 81085b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81085b4:	b29b      	uxth	r3, r3
 81085b6:	2b00      	cmp	r3, #0
 81085b8:	d1c8      	bne.n	810854c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81085ba:	683b      	ldr	r3, [r7, #0]
 81085bc:	9300      	str	r3, [sp, #0]
 81085be:	697b      	ldr	r3, [r7, #20]
 81085c0:	2200      	movs	r2, #0
 81085c2:	2140      	movs	r1, #64	@ 0x40
 81085c4:	68f8      	ldr	r0, [r7, #12]
 81085c6:	f001 fb0b 	bl	8109be0 <UART_WaitOnFlagUntilTimeout>
 81085ca:	4603      	mov	r3, r0
 81085cc:	2b00      	cmp	r3, #0
 81085ce:	d005      	beq.n	81085dc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 81085d0:	68fb      	ldr	r3, [r7, #12]
 81085d2:	2220      	movs	r2, #32
 81085d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 81085d8:	2303      	movs	r3, #3
 81085da:	e006      	b.n	81085ea <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81085dc:	68fb      	ldr	r3, [r7, #12]
 81085de:	2220      	movs	r2, #32
 81085e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 81085e4:	2300      	movs	r3, #0
 81085e6:	e000      	b.n	81085ea <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 81085e8:	2302      	movs	r3, #2
  }
}
 81085ea:	4618      	mov	r0, r3
 81085ec:	3720      	adds	r7, #32
 81085ee:	46bd      	mov	sp, r7
 81085f0:	bd80      	pop	{r7, pc}
	...

081085f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 81085f4:	b580      	push	{r7, lr}
 81085f6:	b08a      	sub	sp, #40	@ 0x28
 81085f8:	af00      	add	r7, sp, #0
 81085fa:	60f8      	str	r0, [r7, #12]
 81085fc:	60b9      	str	r1, [r7, #8]
 81085fe:	4613      	mov	r3, r2
 8108600:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8108602:	68fb      	ldr	r3, [r7, #12]
 8108604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8108608:	2b20      	cmp	r3, #32
 810860a:	d137      	bne.n	810867c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 810860c:	68bb      	ldr	r3, [r7, #8]
 810860e:	2b00      	cmp	r3, #0
 8108610:	d002      	beq.n	8108618 <HAL_UART_Receive_IT+0x24>
 8108612:	88fb      	ldrh	r3, [r7, #6]
 8108614:	2b00      	cmp	r3, #0
 8108616:	d101      	bne.n	810861c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8108618:	2301      	movs	r3, #1
 810861a:	e030      	b.n	810867e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810861c:	68fb      	ldr	r3, [r7, #12]
 810861e:	2200      	movs	r2, #0
 8108620:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8108622:	68fb      	ldr	r3, [r7, #12]
 8108624:	681b      	ldr	r3, [r3, #0]
 8108626:	4a18      	ldr	r2, [pc, #96]	@ (8108688 <HAL_UART_Receive_IT+0x94>)
 8108628:	4293      	cmp	r3, r2
 810862a:	d01f      	beq.n	810866c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810862c:	68fb      	ldr	r3, [r7, #12]
 810862e:	681b      	ldr	r3, [r3, #0]
 8108630:	685b      	ldr	r3, [r3, #4]
 8108632:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8108636:	2b00      	cmp	r3, #0
 8108638:	d018      	beq.n	810866c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810863a:	68fb      	ldr	r3, [r7, #12]
 810863c:	681b      	ldr	r3, [r3, #0]
 810863e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108640:	697b      	ldr	r3, [r7, #20]
 8108642:	e853 3f00 	ldrex	r3, [r3]
 8108646:	613b      	str	r3, [r7, #16]
   return(result);
 8108648:	693b      	ldr	r3, [r7, #16]
 810864a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810864e:	627b      	str	r3, [r7, #36]	@ 0x24
 8108650:	68fb      	ldr	r3, [r7, #12]
 8108652:	681b      	ldr	r3, [r3, #0]
 8108654:	461a      	mov	r2, r3
 8108656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108658:	623b      	str	r3, [r7, #32]
 810865a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810865c:	69f9      	ldr	r1, [r7, #28]
 810865e:	6a3a      	ldr	r2, [r7, #32]
 8108660:	e841 2300 	strex	r3, r2, [r1]
 8108664:	61bb      	str	r3, [r7, #24]
   return(result);
 8108666:	69bb      	ldr	r3, [r7, #24]
 8108668:	2b00      	cmp	r3, #0
 810866a:	d1e6      	bne.n	810863a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 810866c:	88fb      	ldrh	r3, [r7, #6]
 810866e:	461a      	mov	r2, r3
 8108670:	68b9      	ldr	r1, [r7, #8]
 8108672:	68f8      	ldr	r0, [r7, #12]
 8108674:	f001 fb22 	bl	8109cbc <UART_Start_Receive_IT>
 8108678:	4603      	mov	r3, r0
 810867a:	e000      	b.n	810867e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810867c:	2302      	movs	r3, #2
  }
}
 810867e:	4618      	mov	r0, r3
 8108680:	3728      	adds	r7, #40	@ 0x28
 8108682:	46bd      	mov	sp, r7
 8108684:	bd80      	pop	{r7, pc}
 8108686:	bf00      	nop
 8108688:	58000c00 	.word	0x58000c00

0810868c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810868c:	b580      	push	{r7, lr}
 810868e:	b0ba      	sub	sp, #232	@ 0xe8
 8108690:	af00      	add	r7, sp, #0
 8108692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8108694:	687b      	ldr	r3, [r7, #4]
 8108696:	681b      	ldr	r3, [r3, #0]
 8108698:	69db      	ldr	r3, [r3, #28]
 810869a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810869e:	687b      	ldr	r3, [r7, #4]
 81086a0:	681b      	ldr	r3, [r3, #0]
 81086a2:	681b      	ldr	r3, [r3, #0]
 81086a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 81086a8:	687b      	ldr	r3, [r7, #4]
 81086aa:	681b      	ldr	r3, [r3, #0]
 81086ac:	689b      	ldr	r3, [r3, #8]
 81086ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 81086b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 81086b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 81086ba:	4013      	ands	r3, r2
 81086bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 81086c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 81086c4:	2b00      	cmp	r3, #0
 81086c6:	d11b      	bne.n	8108700 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81086c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81086cc:	f003 0320 	and.w	r3, r3, #32
 81086d0:	2b00      	cmp	r3, #0
 81086d2:	d015      	beq.n	8108700 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81086d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81086d8:	f003 0320 	and.w	r3, r3, #32
 81086dc:	2b00      	cmp	r3, #0
 81086de:	d105      	bne.n	81086ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81086e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 81086e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81086e8:	2b00      	cmp	r3, #0
 81086ea:	d009      	beq.n	8108700 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 81086ec:	687b      	ldr	r3, [r7, #4]
 81086ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81086f0:	2b00      	cmp	r3, #0
 81086f2:	f000 8395 	beq.w	8108e20 <HAL_UART_IRQHandler+0x794>
      {
        huart->RxISR(huart);
 81086f6:	687b      	ldr	r3, [r7, #4]
 81086f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81086fa:	6878      	ldr	r0, [r7, #4]
 81086fc:	4798      	blx	r3
      }
      return;
 81086fe:	e38f      	b.n	8108e20 <HAL_UART_IRQHandler+0x794>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8108700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8108704:	2b00      	cmp	r3, #0
 8108706:	f000 8123 	beq.w	8108950 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810870a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810870e:	4b8d      	ldr	r3, [pc, #564]	@ (8108944 <HAL_UART_IRQHandler+0x2b8>)
 8108710:	4013      	ands	r3, r2
 8108712:	2b00      	cmp	r3, #0
 8108714:	d106      	bne.n	8108724 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8108716:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 810871a:	4b8b      	ldr	r3, [pc, #556]	@ (8108948 <HAL_UART_IRQHandler+0x2bc>)
 810871c:	4013      	ands	r3, r2
 810871e:	2b00      	cmp	r3, #0
 8108720:	f000 8116 	beq.w	8108950 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8108724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8108728:	f003 0301 	and.w	r3, r3, #1
 810872c:	2b00      	cmp	r3, #0
 810872e:	d011      	beq.n	8108754 <HAL_UART_IRQHandler+0xc8>
 8108730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8108734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108738:	2b00      	cmp	r3, #0
 810873a:	d00b      	beq.n	8108754 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810873c:	687b      	ldr	r3, [r7, #4]
 810873e:	681b      	ldr	r3, [r3, #0]
 8108740:	2201      	movs	r2, #1
 8108742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8108744:	687b      	ldr	r3, [r7, #4]
 8108746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810874a:	f043 0201 	orr.w	r2, r3, #1
 810874e:	687b      	ldr	r3, [r7, #4]
 8108750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8108758:	f003 0302 	and.w	r3, r3, #2
 810875c:	2b00      	cmp	r3, #0
 810875e:	d011      	beq.n	8108784 <HAL_UART_IRQHandler+0xf8>
 8108760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8108764:	f003 0301 	and.w	r3, r3, #1
 8108768:	2b00      	cmp	r3, #0
 810876a:	d00b      	beq.n	8108784 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810876c:	687b      	ldr	r3, [r7, #4]
 810876e:	681b      	ldr	r3, [r3, #0]
 8108770:	2202      	movs	r2, #2
 8108772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8108774:	687b      	ldr	r3, [r7, #4]
 8108776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810877a:	f043 0204 	orr.w	r2, r3, #4
 810877e:	687b      	ldr	r3, [r7, #4]
 8108780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8108788:	f003 0304 	and.w	r3, r3, #4
 810878c:	2b00      	cmp	r3, #0
 810878e:	d011      	beq.n	81087b4 <HAL_UART_IRQHandler+0x128>
 8108790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8108794:	f003 0301 	and.w	r3, r3, #1
 8108798:	2b00      	cmp	r3, #0
 810879a:	d00b      	beq.n	81087b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810879c:	687b      	ldr	r3, [r7, #4]
 810879e:	681b      	ldr	r3, [r3, #0]
 81087a0:	2204      	movs	r2, #4
 81087a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 81087a4:	687b      	ldr	r3, [r7, #4]
 81087a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81087aa:	f043 0202 	orr.w	r2, r3, #2
 81087ae:	687b      	ldr	r3, [r7, #4]
 81087b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 81087b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81087b8:	f003 0308 	and.w	r3, r3, #8
 81087bc:	2b00      	cmp	r3, #0
 81087be:	d017      	beq.n	81087f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81087c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81087c4:	f003 0320 	and.w	r3, r3, #32
 81087c8:	2b00      	cmp	r3, #0
 81087ca:	d105      	bne.n	81087d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 81087cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 81087d0:	4b5c      	ldr	r3, [pc, #368]	@ (8108944 <HAL_UART_IRQHandler+0x2b8>)
 81087d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81087d4:	2b00      	cmp	r3, #0
 81087d6:	d00b      	beq.n	81087f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81087d8:	687b      	ldr	r3, [r7, #4]
 81087da:	681b      	ldr	r3, [r3, #0]
 81087dc:	2208      	movs	r2, #8
 81087de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 81087e0:	687b      	ldr	r3, [r7, #4]
 81087e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81087e6:	f043 0208 	orr.w	r2, r3, #8
 81087ea:	687b      	ldr	r3, [r7, #4]
 81087ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 81087f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81087f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81087f8:	2b00      	cmp	r3, #0
 81087fa:	d012      	beq.n	8108822 <HAL_UART_IRQHandler+0x196>
 81087fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8108800:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8108804:	2b00      	cmp	r3, #0
 8108806:	d00c      	beq.n	8108822 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108808:	687b      	ldr	r3, [r7, #4]
 810880a:	681b      	ldr	r3, [r3, #0]
 810880c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8108810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8108812:	687b      	ldr	r3, [r7, #4]
 8108814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108818:	f043 0220 	orr.w	r2, r3, #32
 810881c:	687b      	ldr	r3, [r7, #4]
 810881e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8108822:	687b      	ldr	r3, [r7, #4]
 8108824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108828:	2b00      	cmp	r3, #0
 810882a:	f000 82fb 	beq.w	8108e24 <HAL_UART_IRQHandler+0x798>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810882e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8108832:	f003 0320 	and.w	r3, r3, #32
 8108836:	2b00      	cmp	r3, #0
 8108838:	d013      	beq.n	8108862 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810883a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810883e:	f003 0320 	and.w	r3, r3, #32
 8108842:	2b00      	cmp	r3, #0
 8108844:	d105      	bne.n	8108852 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8108846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810884a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810884e:	2b00      	cmp	r3, #0
 8108850:	d007      	beq.n	8108862 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8108852:	687b      	ldr	r3, [r7, #4]
 8108854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8108856:	2b00      	cmp	r3, #0
 8108858:	d003      	beq.n	8108862 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 810885a:	687b      	ldr	r3, [r7, #4]
 810885c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810885e:	6878      	ldr	r0, [r7, #4]
 8108860:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8108862:	687b      	ldr	r3, [r7, #4]
 8108864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108868:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810886c:	687b      	ldr	r3, [r7, #4]
 810886e:	681b      	ldr	r3, [r3, #0]
 8108870:	689b      	ldr	r3, [r3, #8]
 8108872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108876:	2b40      	cmp	r3, #64	@ 0x40
 8108878:	d005      	beq.n	8108886 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810887a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 810887e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8108882:	2b00      	cmp	r3, #0
 8108884:	d054      	beq.n	8108930 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8108886:	6878      	ldr	r0, [r7, #4]
 8108888:	f001 fb3a 	bl	8109f00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810888c:	687b      	ldr	r3, [r7, #4]
 810888e:	681b      	ldr	r3, [r3, #0]
 8108890:	689b      	ldr	r3, [r3, #8]
 8108892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108896:	2b40      	cmp	r3, #64	@ 0x40
 8108898:	d146      	bne.n	8108928 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810889a:	687b      	ldr	r3, [r7, #4]
 810889c:	681b      	ldr	r3, [r3, #0]
 810889e:	3308      	adds	r3, #8
 81088a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81088a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 81088a8:	e853 3f00 	ldrex	r3, [r3]
 81088ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 81088b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 81088b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 81088b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81088bc:	687b      	ldr	r3, [r7, #4]
 81088be:	681b      	ldr	r3, [r3, #0]
 81088c0:	3308      	adds	r3, #8
 81088c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 81088c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 81088ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81088ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 81088d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 81088d6:	e841 2300 	strex	r3, r2, [r1]
 81088da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 81088de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 81088e2:	2b00      	cmp	r3, #0
 81088e4:	d1d9      	bne.n	810889a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 81088e6:	687b      	ldr	r3, [r7, #4]
 81088e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81088ec:	2b00      	cmp	r3, #0
 81088ee:	d017      	beq.n	8108920 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 81088f0:	687b      	ldr	r3, [r7, #4]
 81088f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81088f6:	4a15      	ldr	r2, [pc, #84]	@ (810894c <HAL_UART_IRQHandler+0x2c0>)
 81088f8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 81088fa:	687b      	ldr	r3, [r7, #4]
 81088fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108900:	4618      	mov	r0, r3
 8108902:	f7fc fffd 	bl	8105900 <HAL_DMA_Abort_IT>
 8108906:	4603      	mov	r3, r0
 8108908:	2b00      	cmp	r3, #0
 810890a:	d019      	beq.n	8108940 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810890c:	687b      	ldr	r3, [r7, #4]
 810890e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108914:	687a      	ldr	r2, [r7, #4]
 8108916:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 810891a:	4610      	mov	r0, r2
 810891c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810891e:	e00f      	b.n	8108940 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8108920:	6878      	ldr	r0, [r7, #4]
 8108922:	f000 fa93 	bl	8108e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8108926:	e00b      	b.n	8108940 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8108928:	6878      	ldr	r0, [r7, #4]
 810892a:	f000 fa8f 	bl	8108e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810892e:	e007      	b.n	8108940 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8108930:	6878      	ldr	r0, [r7, #4]
 8108932:	f000 fa8b 	bl	8108e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108936:	687b      	ldr	r3, [r7, #4]
 8108938:	2200      	movs	r2, #0
 810893a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 810893e:	e271      	b.n	8108e24 <HAL_UART_IRQHandler+0x798>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8108940:	bf00      	nop
    return;
 8108942:	e26f      	b.n	8108e24 <HAL_UART_IRQHandler+0x798>
 8108944:	10000001 	.word	0x10000001
 8108948:	04000120 	.word	0x04000120
 810894c:	08109fcd 	.word	0x08109fcd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108950:	687b      	ldr	r3, [r7, #4]
 8108952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108954:	2b01      	cmp	r3, #1
 8108956:	f040 8205 	bne.w	8108d64 <HAL_UART_IRQHandler+0x6d8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810895a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810895e:	f003 0310 	and.w	r3, r3, #16
 8108962:	2b00      	cmp	r3, #0
 8108964:	f000 81fe 	beq.w	8108d64 <HAL_UART_IRQHandler+0x6d8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8108968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810896c:	f003 0310 	and.w	r3, r3, #16
 8108970:	2b00      	cmp	r3, #0
 8108972:	f000 81f7 	beq.w	8108d64 <HAL_UART_IRQHandler+0x6d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8108976:	687b      	ldr	r3, [r7, #4]
 8108978:	681b      	ldr	r3, [r3, #0]
 810897a:	2210      	movs	r2, #16
 810897c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810897e:	687b      	ldr	r3, [r7, #4]
 8108980:	681b      	ldr	r3, [r3, #0]
 8108982:	689b      	ldr	r3, [r3, #8]
 8108984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108988:	2b40      	cmp	r3, #64	@ 0x40
 810898a:	f040 816d 	bne.w	8108c68 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108994:	681b      	ldr	r3, [r3, #0]
 8108996:	4aa4      	ldr	r2, [pc, #656]	@ (8108c28 <HAL_UART_IRQHandler+0x59c>)
 8108998:	4293      	cmp	r3, r2
 810899a:	d068      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 810899c:	687b      	ldr	r3, [r7, #4]
 810899e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81089a2:	681b      	ldr	r3, [r3, #0]
 81089a4:	4aa1      	ldr	r2, [pc, #644]	@ (8108c2c <HAL_UART_IRQHandler+0x5a0>)
 81089a6:	4293      	cmp	r3, r2
 81089a8:	d061      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 81089aa:	687b      	ldr	r3, [r7, #4]
 81089ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81089b0:	681b      	ldr	r3, [r3, #0]
 81089b2:	4a9f      	ldr	r2, [pc, #636]	@ (8108c30 <HAL_UART_IRQHandler+0x5a4>)
 81089b4:	4293      	cmp	r3, r2
 81089b6:	d05a      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 81089b8:	687b      	ldr	r3, [r7, #4]
 81089ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81089be:	681b      	ldr	r3, [r3, #0]
 81089c0:	4a9c      	ldr	r2, [pc, #624]	@ (8108c34 <HAL_UART_IRQHandler+0x5a8>)
 81089c2:	4293      	cmp	r3, r2
 81089c4:	d053      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 81089c6:	687b      	ldr	r3, [r7, #4]
 81089c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81089cc:	681b      	ldr	r3, [r3, #0]
 81089ce:	4a9a      	ldr	r2, [pc, #616]	@ (8108c38 <HAL_UART_IRQHandler+0x5ac>)
 81089d0:	4293      	cmp	r3, r2
 81089d2:	d04c      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 81089d4:	687b      	ldr	r3, [r7, #4]
 81089d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81089da:	681b      	ldr	r3, [r3, #0]
 81089dc:	4a97      	ldr	r2, [pc, #604]	@ (8108c3c <HAL_UART_IRQHandler+0x5b0>)
 81089de:	4293      	cmp	r3, r2
 81089e0:	d045      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 81089e2:	687b      	ldr	r3, [r7, #4]
 81089e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81089e8:	681b      	ldr	r3, [r3, #0]
 81089ea:	4a95      	ldr	r2, [pc, #596]	@ (8108c40 <HAL_UART_IRQHandler+0x5b4>)
 81089ec:	4293      	cmp	r3, r2
 81089ee:	d03e      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 81089f0:	687b      	ldr	r3, [r7, #4]
 81089f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81089f6:	681b      	ldr	r3, [r3, #0]
 81089f8:	4a92      	ldr	r2, [pc, #584]	@ (8108c44 <HAL_UART_IRQHandler+0x5b8>)
 81089fa:	4293      	cmp	r3, r2
 81089fc:	d037      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 81089fe:	687b      	ldr	r3, [r7, #4]
 8108a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108a04:	681b      	ldr	r3, [r3, #0]
 8108a06:	4a90      	ldr	r2, [pc, #576]	@ (8108c48 <HAL_UART_IRQHandler+0x5bc>)
 8108a08:	4293      	cmp	r3, r2
 8108a0a:	d030      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 8108a0c:	687b      	ldr	r3, [r7, #4]
 8108a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108a12:	681b      	ldr	r3, [r3, #0]
 8108a14:	4a8d      	ldr	r2, [pc, #564]	@ (8108c4c <HAL_UART_IRQHandler+0x5c0>)
 8108a16:	4293      	cmp	r3, r2
 8108a18:	d029      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 8108a1a:	687b      	ldr	r3, [r7, #4]
 8108a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108a20:	681b      	ldr	r3, [r3, #0]
 8108a22:	4a8b      	ldr	r2, [pc, #556]	@ (8108c50 <HAL_UART_IRQHandler+0x5c4>)
 8108a24:	4293      	cmp	r3, r2
 8108a26:	d022      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 8108a28:	687b      	ldr	r3, [r7, #4]
 8108a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108a2e:	681b      	ldr	r3, [r3, #0]
 8108a30:	4a88      	ldr	r2, [pc, #544]	@ (8108c54 <HAL_UART_IRQHandler+0x5c8>)
 8108a32:	4293      	cmp	r3, r2
 8108a34:	d01b      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 8108a36:	687b      	ldr	r3, [r7, #4]
 8108a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108a3c:	681b      	ldr	r3, [r3, #0]
 8108a3e:	4a86      	ldr	r2, [pc, #536]	@ (8108c58 <HAL_UART_IRQHandler+0x5cc>)
 8108a40:	4293      	cmp	r3, r2
 8108a42:	d014      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 8108a44:	687b      	ldr	r3, [r7, #4]
 8108a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108a4a:	681b      	ldr	r3, [r3, #0]
 8108a4c:	4a83      	ldr	r2, [pc, #524]	@ (8108c5c <HAL_UART_IRQHandler+0x5d0>)
 8108a4e:	4293      	cmp	r3, r2
 8108a50:	d00d      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 8108a52:	687b      	ldr	r3, [r7, #4]
 8108a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108a58:	681b      	ldr	r3, [r3, #0]
 8108a5a:	4a81      	ldr	r2, [pc, #516]	@ (8108c60 <HAL_UART_IRQHandler+0x5d4>)
 8108a5c:	4293      	cmp	r3, r2
 8108a5e:	d006      	beq.n	8108a6e <HAL_UART_IRQHandler+0x3e2>
 8108a60:	687b      	ldr	r3, [r7, #4]
 8108a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108a66:	681b      	ldr	r3, [r3, #0]
 8108a68:	4a7e      	ldr	r2, [pc, #504]	@ (8108c64 <HAL_UART_IRQHandler+0x5d8>)
 8108a6a:	4293      	cmp	r3, r2
 8108a6c:	d106      	bne.n	8108a7c <HAL_UART_IRQHandler+0x3f0>
 8108a6e:	687b      	ldr	r3, [r7, #4]
 8108a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108a74:	681b      	ldr	r3, [r3, #0]
 8108a76:	685b      	ldr	r3, [r3, #4]
 8108a78:	b29b      	uxth	r3, r3
 8108a7a:	e005      	b.n	8108a88 <HAL_UART_IRQHandler+0x3fc>
 8108a7c:	687b      	ldr	r3, [r7, #4]
 8108a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108a82:	681b      	ldr	r3, [r3, #0]
 8108a84:	685b      	ldr	r3, [r3, #4]
 8108a86:	b29b      	uxth	r3, r3
 8108a88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8108a8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8108a90:	2b00      	cmp	r3, #0
 8108a92:	f000 80ad 	beq.w	8108bf0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8108a96:	687b      	ldr	r3, [r7, #4]
 8108a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8108a9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8108aa0:	429a      	cmp	r2, r3
 8108aa2:	f080 80a5 	bcs.w	8108bf0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8108aa6:	687b      	ldr	r3, [r7, #4]
 8108aa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8108aac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8108ab0:	687b      	ldr	r3, [r7, #4]
 8108ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108ab6:	69db      	ldr	r3, [r3, #28]
 8108ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108abc:	f000 8087 	beq.w	8108bce <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8108ac0:	687b      	ldr	r3, [r7, #4]
 8108ac2:	681b      	ldr	r3, [r3, #0]
 8108ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8108acc:	e853 3f00 	ldrex	r3, [r3]
 8108ad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8108ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8108ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8108adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8108ae0:	687b      	ldr	r3, [r7, #4]
 8108ae2:	681b      	ldr	r3, [r3, #0]
 8108ae4:	461a      	mov	r2, r3
 8108ae6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8108aea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8108aee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108af2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8108af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8108afa:	e841 2300 	strex	r3, r2, [r1]
 8108afe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8108b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8108b06:	2b00      	cmp	r3, #0
 8108b08:	d1da      	bne.n	8108ac0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108b0a:	687b      	ldr	r3, [r7, #4]
 8108b0c:	681b      	ldr	r3, [r3, #0]
 8108b0e:	3308      	adds	r3, #8
 8108b10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8108b14:	e853 3f00 	ldrex	r3, [r3]
 8108b18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8108b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8108b1c:	f023 0301 	bic.w	r3, r3, #1
 8108b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8108b24:	687b      	ldr	r3, [r7, #4]
 8108b26:	681b      	ldr	r3, [r3, #0]
 8108b28:	3308      	adds	r3, #8
 8108b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8108b2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8108b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108b34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8108b36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8108b3a:	e841 2300 	strex	r3, r2, [r1]
 8108b3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8108b40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8108b42:	2b00      	cmp	r3, #0
 8108b44:	d1e1      	bne.n	8108b0a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8108b46:	687b      	ldr	r3, [r7, #4]
 8108b48:	681b      	ldr	r3, [r3, #0]
 8108b4a:	3308      	adds	r3, #8
 8108b4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108b4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8108b50:	e853 3f00 	ldrex	r3, [r3]
 8108b54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8108b56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8108b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8108b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8108b60:	687b      	ldr	r3, [r7, #4]
 8108b62:	681b      	ldr	r3, [r3, #0]
 8108b64:	3308      	adds	r3, #8
 8108b66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8108b6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8108b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108b6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8108b70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8108b72:	e841 2300 	strex	r3, r2, [r1]
 8108b76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8108b78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8108b7a:	2b00      	cmp	r3, #0
 8108b7c:	d1e3      	bne.n	8108b46 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8108b7e:	687b      	ldr	r3, [r7, #4]
 8108b80:	2220      	movs	r2, #32
 8108b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108b86:	687b      	ldr	r3, [r7, #4]
 8108b88:	2200      	movs	r2, #0
 8108b8a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108b8c:	687b      	ldr	r3, [r7, #4]
 8108b8e:	681b      	ldr	r3, [r3, #0]
 8108b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8108b94:	e853 3f00 	ldrex	r3, [r3]
 8108b98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8108b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8108b9c:	f023 0310 	bic.w	r3, r3, #16
 8108ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8108ba4:	687b      	ldr	r3, [r7, #4]
 8108ba6:	681b      	ldr	r3, [r3, #0]
 8108ba8:	461a      	mov	r2, r3
 8108baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8108bae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8108bb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108bb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8108bb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8108bb6:	e841 2300 	strex	r3, r2, [r1]
 8108bba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8108bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8108bbe:	2b00      	cmp	r3, #0
 8108bc0:	d1e4      	bne.n	8108b8c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8108bc2:	687b      	ldr	r3, [r7, #4]
 8108bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108bc8:	4618      	mov	r0, r3
 8108bca:	f7fc fb7b 	bl	81052c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8108bce:	687b      	ldr	r3, [r7, #4]
 8108bd0:	2202      	movs	r2, #2
 8108bd2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8108bd4:	687b      	ldr	r3, [r7, #4]
 8108bd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8108bda:	687b      	ldr	r3, [r7, #4]
 8108bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8108be0:	b29b      	uxth	r3, r3
 8108be2:	1ad3      	subs	r3, r2, r3
 8108be4:	b29b      	uxth	r3, r3
 8108be6:	4619      	mov	r1, r3
 8108be8:	6878      	ldr	r0, [r7, #4]
 8108bea:	f000 f939 	bl	8108e60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8108bee:	e11b      	b.n	8108e28 <HAL_UART_IRQHandler+0x79c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8108bf0:	687b      	ldr	r3, [r7, #4]
 8108bf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8108bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8108bfa:	429a      	cmp	r2, r3
 8108bfc:	f040 8114 	bne.w	8108e28 <HAL_UART_IRQHandler+0x79c>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8108c00:	687b      	ldr	r3, [r7, #4]
 8108c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108c06:	69db      	ldr	r3, [r3, #28]
 8108c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108c0c:	f040 810c 	bne.w	8108e28 <HAL_UART_IRQHandler+0x79c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8108c10:	687b      	ldr	r3, [r7, #4]
 8108c12:	2202      	movs	r2, #2
 8108c14:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8108c16:	687b      	ldr	r3, [r7, #4]
 8108c18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8108c1c:	4619      	mov	r1, r3
 8108c1e:	6878      	ldr	r0, [r7, #4]
 8108c20:	f000 f91e 	bl	8108e60 <HAL_UARTEx_RxEventCallback>
      return;
 8108c24:	e100      	b.n	8108e28 <HAL_UART_IRQHandler+0x79c>
 8108c26:	bf00      	nop
 8108c28:	40020010 	.word	0x40020010
 8108c2c:	40020028 	.word	0x40020028
 8108c30:	40020040 	.word	0x40020040
 8108c34:	40020058 	.word	0x40020058
 8108c38:	40020070 	.word	0x40020070
 8108c3c:	40020088 	.word	0x40020088
 8108c40:	400200a0 	.word	0x400200a0
 8108c44:	400200b8 	.word	0x400200b8
 8108c48:	40020410 	.word	0x40020410
 8108c4c:	40020428 	.word	0x40020428
 8108c50:	40020440 	.word	0x40020440
 8108c54:	40020458 	.word	0x40020458
 8108c58:	40020470 	.word	0x40020470
 8108c5c:	40020488 	.word	0x40020488
 8108c60:	400204a0 	.word	0x400204a0
 8108c64:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8108c68:	687b      	ldr	r3, [r7, #4]
 8108c6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8108c74:	b29b      	uxth	r3, r3
 8108c76:	1ad3      	subs	r3, r2, r3
 8108c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8108c7c:	687b      	ldr	r3, [r7, #4]
 8108c7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8108c82:	b29b      	uxth	r3, r3
 8108c84:	2b00      	cmp	r3, #0
 8108c86:	f000 80d1 	beq.w	8108e2c <HAL_UART_IRQHandler+0x7a0>
          && (nb_rx_data > 0U))
 8108c8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8108c8e:	2b00      	cmp	r3, #0
 8108c90:	f000 80cc 	beq.w	8108e2c <HAL_UART_IRQHandler+0x7a0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108c94:	687b      	ldr	r3, [r7, #4]
 8108c96:	681b      	ldr	r3, [r3, #0]
 8108c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108c9c:	e853 3f00 	ldrex	r3, [r3]
 8108ca0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8108ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8108ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8108cac:	687b      	ldr	r3, [r7, #4]
 8108cae:	681b      	ldr	r3, [r3, #0]
 8108cb0:	461a      	mov	r2, r3
 8108cb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8108cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8108cb8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108cba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8108cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8108cbe:	e841 2300 	strex	r3, r2, [r1]
 8108cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8108cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108cc6:	2b00      	cmp	r3, #0
 8108cc8:	d1e4      	bne.n	8108c94 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108cca:	687b      	ldr	r3, [r7, #4]
 8108ccc:	681b      	ldr	r3, [r3, #0]
 8108cce:	3308      	adds	r3, #8
 8108cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108cd4:	e853 3f00 	ldrex	r3, [r3]
 8108cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8108cda:	6a3b      	ldr	r3, [r7, #32]
 8108cdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108ce0:	f023 0301 	bic.w	r3, r3, #1
 8108ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8108ce8:	687b      	ldr	r3, [r7, #4]
 8108cea:	681b      	ldr	r3, [r3, #0]
 8108cec:	3308      	adds	r3, #8
 8108cee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8108cf2:	633a      	str	r2, [r7, #48]	@ 0x30
 8108cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108cf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8108cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108cfa:	e841 2300 	strex	r3, r2, [r1]
 8108cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8108d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108d02:	2b00      	cmp	r3, #0
 8108d04:	d1e1      	bne.n	8108cca <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8108d06:	687b      	ldr	r3, [r7, #4]
 8108d08:	2220      	movs	r2, #32
 8108d0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108d0e:	687b      	ldr	r3, [r7, #4]
 8108d10:	2200      	movs	r2, #0
 8108d12:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8108d14:	687b      	ldr	r3, [r7, #4]
 8108d16:	2200      	movs	r2, #0
 8108d18:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108d1a:	687b      	ldr	r3, [r7, #4]
 8108d1c:	681b      	ldr	r3, [r3, #0]
 8108d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108d20:	693b      	ldr	r3, [r7, #16]
 8108d22:	e853 3f00 	ldrex	r3, [r3]
 8108d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8108d28:	68fb      	ldr	r3, [r7, #12]
 8108d2a:	f023 0310 	bic.w	r3, r3, #16
 8108d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8108d32:	687b      	ldr	r3, [r7, #4]
 8108d34:	681b      	ldr	r3, [r3, #0]
 8108d36:	461a      	mov	r2, r3
 8108d38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8108d3c:	61fb      	str	r3, [r7, #28]
 8108d3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108d40:	69b9      	ldr	r1, [r7, #24]
 8108d42:	69fa      	ldr	r2, [r7, #28]
 8108d44:	e841 2300 	strex	r3, r2, [r1]
 8108d48:	617b      	str	r3, [r7, #20]
   return(result);
 8108d4a:	697b      	ldr	r3, [r7, #20]
 8108d4c:	2b00      	cmp	r3, #0
 8108d4e:	d1e4      	bne.n	8108d1a <HAL_UART_IRQHandler+0x68e>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8108d50:	687b      	ldr	r3, [r7, #4]
 8108d52:	2202      	movs	r2, #2
 8108d54:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8108d56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8108d5a:	4619      	mov	r1, r3
 8108d5c:	6878      	ldr	r0, [r7, #4]
 8108d5e:	f000 f87f 	bl	8108e60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8108d62:	e063      	b.n	8108e2c <HAL_UART_IRQHandler+0x7a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8108d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8108d68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8108d6c:	2b00      	cmp	r3, #0
 8108d6e:	d00e      	beq.n	8108d8e <HAL_UART_IRQHandler+0x702>
 8108d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8108d74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8108d78:	2b00      	cmp	r3, #0
 8108d7a:	d008      	beq.n	8108d8e <HAL_UART_IRQHandler+0x702>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8108d7c:	687b      	ldr	r3, [r7, #4]
 8108d7e:	681b      	ldr	r3, [r3, #0]
 8108d80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8108d84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8108d86:	6878      	ldr	r0, [r7, #4]
 8108d88:	f001 fe7e 	bl	810aa88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8108d8c:	e051      	b.n	8108e32 <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8108d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8108d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108d96:	2b00      	cmp	r3, #0
 8108d98:	d014      	beq.n	8108dc4 <HAL_UART_IRQHandler+0x738>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8108d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8108d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108da2:	2b00      	cmp	r3, #0
 8108da4:	d105      	bne.n	8108db2 <HAL_UART_IRQHandler+0x726>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8108da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8108daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8108dae:	2b00      	cmp	r3, #0
 8108db0:	d008      	beq.n	8108dc4 <HAL_UART_IRQHandler+0x738>
  {
    if (huart->TxISR != NULL)
 8108db2:	687b      	ldr	r3, [r7, #4]
 8108db4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8108db6:	2b00      	cmp	r3, #0
 8108db8:	d03a      	beq.n	8108e30 <HAL_UART_IRQHandler+0x7a4>
    {
      huart->TxISR(huart);
 8108dba:	687b      	ldr	r3, [r7, #4]
 8108dbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8108dbe:	6878      	ldr	r0, [r7, #4]
 8108dc0:	4798      	blx	r3
    }
    return;
 8108dc2:	e035      	b.n	8108e30 <HAL_UART_IRQHandler+0x7a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8108dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8108dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108dcc:	2b00      	cmp	r3, #0
 8108dce:	d009      	beq.n	8108de4 <HAL_UART_IRQHandler+0x758>
 8108dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8108dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108dd8:	2b00      	cmp	r3, #0
 8108dda:	d003      	beq.n	8108de4 <HAL_UART_IRQHandler+0x758>
  {
    UART_EndTransmit_IT(huart);
 8108ddc:	6878      	ldr	r0, [r7, #4]
 8108dde:	f001 f907 	bl	8109ff0 <UART_EndTransmit_IT>
    return;
 8108de2:	e026      	b.n	8108e32 <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8108de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8108de8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8108dec:	2b00      	cmp	r3, #0
 8108dee:	d009      	beq.n	8108e04 <HAL_UART_IRQHandler+0x778>
 8108df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8108df4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8108df8:	2b00      	cmp	r3, #0
 8108dfa:	d003      	beq.n	8108e04 <HAL_UART_IRQHandler+0x778>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8108dfc:	6878      	ldr	r0, [r7, #4]
 8108dfe:	f001 fe57 	bl	810aab0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8108e02:	e016      	b.n	8108e32 <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8108e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8108e08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8108e0c:	2b00      	cmp	r3, #0
 8108e0e:	d010      	beq.n	8108e32 <HAL_UART_IRQHandler+0x7a6>
 8108e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8108e14:	2b00      	cmp	r3, #0
 8108e16:	da0c      	bge.n	8108e32 <HAL_UART_IRQHandler+0x7a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8108e18:	6878      	ldr	r0, [r7, #4]
 8108e1a:	f001 fe3f 	bl	810aa9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8108e1e:	e008      	b.n	8108e32 <HAL_UART_IRQHandler+0x7a6>
      return;
 8108e20:	bf00      	nop
 8108e22:	e006      	b.n	8108e32 <HAL_UART_IRQHandler+0x7a6>
    return;
 8108e24:	bf00      	nop
 8108e26:	e004      	b.n	8108e32 <HAL_UART_IRQHandler+0x7a6>
      return;
 8108e28:	bf00      	nop
 8108e2a:	e002      	b.n	8108e32 <HAL_UART_IRQHandler+0x7a6>
      return;
 8108e2c:	bf00      	nop
 8108e2e:	e000      	b.n	8108e32 <HAL_UART_IRQHandler+0x7a6>
    return;
 8108e30:	bf00      	nop
  }
}
 8108e32:	37e8      	adds	r7, #232	@ 0xe8
 8108e34:	46bd      	mov	sp, r7
 8108e36:	bd80      	pop	{r7, pc}

08108e38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8108e38:	b480      	push	{r7}
 8108e3a:	b083      	sub	sp, #12
 8108e3c:	af00      	add	r7, sp, #0
 8108e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8108e40:	bf00      	nop
 8108e42:	370c      	adds	r7, #12
 8108e44:	46bd      	mov	sp, r7
 8108e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e4a:	4770      	bx	lr

08108e4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8108e4c:	b480      	push	{r7}
 8108e4e:	b083      	sub	sp, #12
 8108e50:	af00      	add	r7, sp, #0
 8108e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8108e54:	bf00      	nop
 8108e56:	370c      	adds	r7, #12
 8108e58:	46bd      	mov	sp, r7
 8108e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e5e:	4770      	bx	lr

08108e60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8108e60:	b480      	push	{r7}
 8108e62:	b083      	sub	sp, #12
 8108e64:	af00      	add	r7, sp, #0
 8108e66:	6078      	str	r0, [r7, #4]
 8108e68:	460b      	mov	r3, r1
 8108e6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8108e6c:	bf00      	nop
 8108e6e:	370c      	adds	r7, #12
 8108e70:	46bd      	mov	sp, r7
 8108e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e76:	4770      	bx	lr

08108e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8108e7c:	b092      	sub	sp, #72	@ 0x48
 8108e7e:	af00      	add	r7, sp, #0
 8108e80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8108e82:	2300      	movs	r3, #0
 8108e84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108e88:	697b      	ldr	r3, [r7, #20]
 8108e8a:	689a      	ldr	r2, [r3, #8]
 8108e8c:	697b      	ldr	r3, [r7, #20]
 8108e8e:	691b      	ldr	r3, [r3, #16]
 8108e90:	431a      	orrs	r2, r3
 8108e92:	697b      	ldr	r3, [r7, #20]
 8108e94:	695b      	ldr	r3, [r3, #20]
 8108e96:	431a      	orrs	r2, r3
 8108e98:	697b      	ldr	r3, [r7, #20]
 8108e9a:	69db      	ldr	r3, [r3, #28]
 8108e9c:	4313      	orrs	r3, r2
 8108e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108ea0:	697b      	ldr	r3, [r7, #20]
 8108ea2:	681b      	ldr	r3, [r3, #0]
 8108ea4:	681a      	ldr	r2, [r3, #0]
 8108ea6:	4bbd      	ldr	r3, [pc, #756]	@ (810919c <UART_SetConfig+0x324>)
 8108ea8:	4013      	ands	r3, r2
 8108eaa:	697a      	ldr	r2, [r7, #20]
 8108eac:	6812      	ldr	r2, [r2, #0]
 8108eae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8108eb0:	430b      	orrs	r3, r1
 8108eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8108eb4:	697b      	ldr	r3, [r7, #20]
 8108eb6:	681b      	ldr	r3, [r3, #0]
 8108eb8:	685b      	ldr	r3, [r3, #4]
 8108eba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8108ebe:	697b      	ldr	r3, [r7, #20]
 8108ec0:	68da      	ldr	r2, [r3, #12]
 8108ec2:	697b      	ldr	r3, [r7, #20]
 8108ec4:	681b      	ldr	r3, [r3, #0]
 8108ec6:	430a      	orrs	r2, r1
 8108ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8108eca:	697b      	ldr	r3, [r7, #20]
 8108ecc:	699b      	ldr	r3, [r3, #24]
 8108ece:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108ed0:	697b      	ldr	r3, [r7, #20]
 8108ed2:	681b      	ldr	r3, [r3, #0]
 8108ed4:	4ab2      	ldr	r2, [pc, #712]	@ (81091a0 <UART_SetConfig+0x328>)
 8108ed6:	4293      	cmp	r3, r2
 8108ed8:	d004      	beq.n	8108ee4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8108eda:	697b      	ldr	r3, [r7, #20]
 8108edc:	6a1b      	ldr	r3, [r3, #32]
 8108ede:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8108ee0:	4313      	orrs	r3, r2
 8108ee2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108ee4:	697b      	ldr	r3, [r7, #20]
 8108ee6:	681b      	ldr	r3, [r3, #0]
 8108ee8:	689b      	ldr	r3, [r3, #8]
 8108eea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8108eee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8108ef2:	697a      	ldr	r2, [r7, #20]
 8108ef4:	6812      	ldr	r2, [r2, #0]
 8108ef6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8108ef8:	430b      	orrs	r3, r1
 8108efa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8108efc:	697b      	ldr	r3, [r7, #20]
 8108efe:	681b      	ldr	r3, [r3, #0]
 8108f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f02:	f023 010f 	bic.w	r1, r3, #15
 8108f06:	697b      	ldr	r3, [r7, #20]
 8108f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8108f0a:	697b      	ldr	r3, [r7, #20]
 8108f0c:	681b      	ldr	r3, [r3, #0]
 8108f0e:	430a      	orrs	r2, r1
 8108f10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108f12:	697b      	ldr	r3, [r7, #20]
 8108f14:	681b      	ldr	r3, [r3, #0]
 8108f16:	4aa3      	ldr	r2, [pc, #652]	@ (81091a4 <UART_SetConfig+0x32c>)
 8108f18:	4293      	cmp	r3, r2
 8108f1a:	d177      	bne.n	810900c <UART_SetConfig+0x194>
 8108f1c:	4ba2      	ldr	r3, [pc, #648]	@ (81091a8 <UART_SetConfig+0x330>)
 8108f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108f20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8108f24:	2b28      	cmp	r3, #40	@ 0x28
 8108f26:	d86d      	bhi.n	8109004 <UART_SetConfig+0x18c>
 8108f28:	a201      	add	r2, pc, #4	@ (adr r2, 8108f30 <UART_SetConfig+0xb8>)
 8108f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108f2e:	bf00      	nop
 8108f30:	08108fd5 	.word	0x08108fd5
 8108f34:	08109005 	.word	0x08109005
 8108f38:	08109005 	.word	0x08109005
 8108f3c:	08109005 	.word	0x08109005
 8108f40:	08109005 	.word	0x08109005
 8108f44:	08109005 	.word	0x08109005
 8108f48:	08109005 	.word	0x08109005
 8108f4c:	08109005 	.word	0x08109005
 8108f50:	08108fdd 	.word	0x08108fdd
 8108f54:	08109005 	.word	0x08109005
 8108f58:	08109005 	.word	0x08109005
 8108f5c:	08109005 	.word	0x08109005
 8108f60:	08109005 	.word	0x08109005
 8108f64:	08109005 	.word	0x08109005
 8108f68:	08109005 	.word	0x08109005
 8108f6c:	08109005 	.word	0x08109005
 8108f70:	08108fe5 	.word	0x08108fe5
 8108f74:	08109005 	.word	0x08109005
 8108f78:	08109005 	.word	0x08109005
 8108f7c:	08109005 	.word	0x08109005
 8108f80:	08109005 	.word	0x08109005
 8108f84:	08109005 	.word	0x08109005
 8108f88:	08109005 	.word	0x08109005
 8108f8c:	08109005 	.word	0x08109005
 8108f90:	08108fed 	.word	0x08108fed
 8108f94:	08109005 	.word	0x08109005
 8108f98:	08109005 	.word	0x08109005
 8108f9c:	08109005 	.word	0x08109005
 8108fa0:	08109005 	.word	0x08109005
 8108fa4:	08109005 	.word	0x08109005
 8108fa8:	08109005 	.word	0x08109005
 8108fac:	08109005 	.word	0x08109005
 8108fb0:	08108ff5 	.word	0x08108ff5
 8108fb4:	08109005 	.word	0x08109005
 8108fb8:	08109005 	.word	0x08109005
 8108fbc:	08109005 	.word	0x08109005
 8108fc0:	08109005 	.word	0x08109005
 8108fc4:	08109005 	.word	0x08109005
 8108fc8:	08109005 	.word	0x08109005
 8108fcc:	08109005 	.word	0x08109005
 8108fd0:	08108ffd 	.word	0x08108ffd
 8108fd4:	2301      	movs	r3, #1
 8108fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108fda:	e220      	b.n	810941e <UART_SetConfig+0x5a6>
 8108fdc:	2304      	movs	r3, #4
 8108fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108fe2:	e21c      	b.n	810941e <UART_SetConfig+0x5a6>
 8108fe4:	2308      	movs	r3, #8
 8108fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108fea:	e218      	b.n	810941e <UART_SetConfig+0x5a6>
 8108fec:	2310      	movs	r3, #16
 8108fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ff2:	e214      	b.n	810941e <UART_SetConfig+0x5a6>
 8108ff4:	2320      	movs	r3, #32
 8108ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ffa:	e210      	b.n	810941e <UART_SetConfig+0x5a6>
 8108ffc:	2340      	movs	r3, #64	@ 0x40
 8108ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109002:	e20c      	b.n	810941e <UART_SetConfig+0x5a6>
 8109004:	2380      	movs	r3, #128	@ 0x80
 8109006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810900a:	e208      	b.n	810941e <UART_SetConfig+0x5a6>
 810900c:	697b      	ldr	r3, [r7, #20]
 810900e:	681b      	ldr	r3, [r3, #0]
 8109010:	4a66      	ldr	r2, [pc, #408]	@ (81091ac <UART_SetConfig+0x334>)
 8109012:	4293      	cmp	r3, r2
 8109014:	d130      	bne.n	8109078 <UART_SetConfig+0x200>
 8109016:	4b64      	ldr	r3, [pc, #400]	@ (81091a8 <UART_SetConfig+0x330>)
 8109018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810901a:	f003 0307 	and.w	r3, r3, #7
 810901e:	2b05      	cmp	r3, #5
 8109020:	d826      	bhi.n	8109070 <UART_SetConfig+0x1f8>
 8109022:	a201      	add	r2, pc, #4	@ (adr r2, 8109028 <UART_SetConfig+0x1b0>)
 8109024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109028:	08109041 	.word	0x08109041
 810902c:	08109049 	.word	0x08109049
 8109030:	08109051 	.word	0x08109051
 8109034:	08109059 	.word	0x08109059
 8109038:	08109061 	.word	0x08109061
 810903c:	08109069 	.word	0x08109069
 8109040:	2300      	movs	r3, #0
 8109042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109046:	e1ea      	b.n	810941e <UART_SetConfig+0x5a6>
 8109048:	2304      	movs	r3, #4
 810904a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810904e:	e1e6      	b.n	810941e <UART_SetConfig+0x5a6>
 8109050:	2308      	movs	r3, #8
 8109052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109056:	e1e2      	b.n	810941e <UART_SetConfig+0x5a6>
 8109058:	2310      	movs	r3, #16
 810905a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810905e:	e1de      	b.n	810941e <UART_SetConfig+0x5a6>
 8109060:	2320      	movs	r3, #32
 8109062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109066:	e1da      	b.n	810941e <UART_SetConfig+0x5a6>
 8109068:	2340      	movs	r3, #64	@ 0x40
 810906a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810906e:	e1d6      	b.n	810941e <UART_SetConfig+0x5a6>
 8109070:	2380      	movs	r3, #128	@ 0x80
 8109072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109076:	e1d2      	b.n	810941e <UART_SetConfig+0x5a6>
 8109078:	697b      	ldr	r3, [r7, #20]
 810907a:	681b      	ldr	r3, [r3, #0]
 810907c:	4a4c      	ldr	r2, [pc, #304]	@ (81091b0 <UART_SetConfig+0x338>)
 810907e:	4293      	cmp	r3, r2
 8109080:	d130      	bne.n	81090e4 <UART_SetConfig+0x26c>
 8109082:	4b49      	ldr	r3, [pc, #292]	@ (81091a8 <UART_SetConfig+0x330>)
 8109084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109086:	f003 0307 	and.w	r3, r3, #7
 810908a:	2b05      	cmp	r3, #5
 810908c:	d826      	bhi.n	81090dc <UART_SetConfig+0x264>
 810908e:	a201      	add	r2, pc, #4	@ (adr r2, 8109094 <UART_SetConfig+0x21c>)
 8109090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109094:	081090ad 	.word	0x081090ad
 8109098:	081090b5 	.word	0x081090b5
 810909c:	081090bd 	.word	0x081090bd
 81090a0:	081090c5 	.word	0x081090c5
 81090a4:	081090cd 	.word	0x081090cd
 81090a8:	081090d5 	.word	0x081090d5
 81090ac:	2300      	movs	r3, #0
 81090ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090b2:	e1b4      	b.n	810941e <UART_SetConfig+0x5a6>
 81090b4:	2304      	movs	r3, #4
 81090b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090ba:	e1b0      	b.n	810941e <UART_SetConfig+0x5a6>
 81090bc:	2308      	movs	r3, #8
 81090be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090c2:	e1ac      	b.n	810941e <UART_SetConfig+0x5a6>
 81090c4:	2310      	movs	r3, #16
 81090c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090ca:	e1a8      	b.n	810941e <UART_SetConfig+0x5a6>
 81090cc:	2320      	movs	r3, #32
 81090ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090d2:	e1a4      	b.n	810941e <UART_SetConfig+0x5a6>
 81090d4:	2340      	movs	r3, #64	@ 0x40
 81090d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090da:	e1a0      	b.n	810941e <UART_SetConfig+0x5a6>
 81090dc:	2380      	movs	r3, #128	@ 0x80
 81090de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090e2:	e19c      	b.n	810941e <UART_SetConfig+0x5a6>
 81090e4:	697b      	ldr	r3, [r7, #20]
 81090e6:	681b      	ldr	r3, [r3, #0]
 81090e8:	4a32      	ldr	r2, [pc, #200]	@ (81091b4 <UART_SetConfig+0x33c>)
 81090ea:	4293      	cmp	r3, r2
 81090ec:	d130      	bne.n	8109150 <UART_SetConfig+0x2d8>
 81090ee:	4b2e      	ldr	r3, [pc, #184]	@ (81091a8 <UART_SetConfig+0x330>)
 81090f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81090f2:	f003 0307 	and.w	r3, r3, #7
 81090f6:	2b05      	cmp	r3, #5
 81090f8:	d826      	bhi.n	8109148 <UART_SetConfig+0x2d0>
 81090fa:	a201      	add	r2, pc, #4	@ (adr r2, 8109100 <UART_SetConfig+0x288>)
 81090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109100:	08109119 	.word	0x08109119
 8109104:	08109121 	.word	0x08109121
 8109108:	08109129 	.word	0x08109129
 810910c:	08109131 	.word	0x08109131
 8109110:	08109139 	.word	0x08109139
 8109114:	08109141 	.word	0x08109141
 8109118:	2300      	movs	r3, #0
 810911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810911e:	e17e      	b.n	810941e <UART_SetConfig+0x5a6>
 8109120:	2304      	movs	r3, #4
 8109122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109126:	e17a      	b.n	810941e <UART_SetConfig+0x5a6>
 8109128:	2308      	movs	r3, #8
 810912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810912e:	e176      	b.n	810941e <UART_SetConfig+0x5a6>
 8109130:	2310      	movs	r3, #16
 8109132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109136:	e172      	b.n	810941e <UART_SetConfig+0x5a6>
 8109138:	2320      	movs	r3, #32
 810913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810913e:	e16e      	b.n	810941e <UART_SetConfig+0x5a6>
 8109140:	2340      	movs	r3, #64	@ 0x40
 8109142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109146:	e16a      	b.n	810941e <UART_SetConfig+0x5a6>
 8109148:	2380      	movs	r3, #128	@ 0x80
 810914a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810914e:	e166      	b.n	810941e <UART_SetConfig+0x5a6>
 8109150:	697b      	ldr	r3, [r7, #20]
 8109152:	681b      	ldr	r3, [r3, #0]
 8109154:	4a18      	ldr	r2, [pc, #96]	@ (81091b8 <UART_SetConfig+0x340>)
 8109156:	4293      	cmp	r3, r2
 8109158:	d140      	bne.n	81091dc <UART_SetConfig+0x364>
 810915a:	4b13      	ldr	r3, [pc, #76]	@ (81091a8 <UART_SetConfig+0x330>)
 810915c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810915e:	f003 0307 	and.w	r3, r3, #7
 8109162:	2b05      	cmp	r3, #5
 8109164:	d836      	bhi.n	81091d4 <UART_SetConfig+0x35c>
 8109166:	a201      	add	r2, pc, #4	@ (adr r2, 810916c <UART_SetConfig+0x2f4>)
 8109168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810916c:	08109185 	.word	0x08109185
 8109170:	0810918d 	.word	0x0810918d
 8109174:	08109195 	.word	0x08109195
 8109178:	081091bd 	.word	0x081091bd
 810917c:	081091c5 	.word	0x081091c5
 8109180:	081091cd 	.word	0x081091cd
 8109184:	2300      	movs	r3, #0
 8109186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810918a:	e148      	b.n	810941e <UART_SetConfig+0x5a6>
 810918c:	2304      	movs	r3, #4
 810918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109192:	e144      	b.n	810941e <UART_SetConfig+0x5a6>
 8109194:	2308      	movs	r3, #8
 8109196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810919a:	e140      	b.n	810941e <UART_SetConfig+0x5a6>
 810919c:	cfff69f3 	.word	0xcfff69f3
 81091a0:	58000c00 	.word	0x58000c00
 81091a4:	40011000 	.word	0x40011000
 81091a8:	58024400 	.word	0x58024400
 81091ac:	40004400 	.word	0x40004400
 81091b0:	40004800 	.word	0x40004800
 81091b4:	40004c00 	.word	0x40004c00
 81091b8:	40005000 	.word	0x40005000
 81091bc:	2310      	movs	r3, #16
 81091be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81091c2:	e12c      	b.n	810941e <UART_SetConfig+0x5a6>
 81091c4:	2320      	movs	r3, #32
 81091c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81091ca:	e128      	b.n	810941e <UART_SetConfig+0x5a6>
 81091cc:	2340      	movs	r3, #64	@ 0x40
 81091ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81091d2:	e124      	b.n	810941e <UART_SetConfig+0x5a6>
 81091d4:	2380      	movs	r3, #128	@ 0x80
 81091d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81091da:	e120      	b.n	810941e <UART_SetConfig+0x5a6>
 81091dc:	697b      	ldr	r3, [r7, #20]
 81091de:	681b      	ldr	r3, [r3, #0]
 81091e0:	4acb      	ldr	r2, [pc, #812]	@ (8109510 <UART_SetConfig+0x698>)
 81091e2:	4293      	cmp	r3, r2
 81091e4:	d176      	bne.n	81092d4 <UART_SetConfig+0x45c>
 81091e6:	4bcb      	ldr	r3, [pc, #812]	@ (8109514 <UART_SetConfig+0x69c>)
 81091e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81091ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81091ee:	2b28      	cmp	r3, #40	@ 0x28
 81091f0:	d86c      	bhi.n	81092cc <UART_SetConfig+0x454>
 81091f2:	a201      	add	r2, pc, #4	@ (adr r2, 81091f8 <UART_SetConfig+0x380>)
 81091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81091f8:	0810929d 	.word	0x0810929d
 81091fc:	081092cd 	.word	0x081092cd
 8109200:	081092cd 	.word	0x081092cd
 8109204:	081092cd 	.word	0x081092cd
 8109208:	081092cd 	.word	0x081092cd
 810920c:	081092cd 	.word	0x081092cd
 8109210:	081092cd 	.word	0x081092cd
 8109214:	081092cd 	.word	0x081092cd
 8109218:	081092a5 	.word	0x081092a5
 810921c:	081092cd 	.word	0x081092cd
 8109220:	081092cd 	.word	0x081092cd
 8109224:	081092cd 	.word	0x081092cd
 8109228:	081092cd 	.word	0x081092cd
 810922c:	081092cd 	.word	0x081092cd
 8109230:	081092cd 	.word	0x081092cd
 8109234:	081092cd 	.word	0x081092cd
 8109238:	081092ad 	.word	0x081092ad
 810923c:	081092cd 	.word	0x081092cd
 8109240:	081092cd 	.word	0x081092cd
 8109244:	081092cd 	.word	0x081092cd
 8109248:	081092cd 	.word	0x081092cd
 810924c:	081092cd 	.word	0x081092cd
 8109250:	081092cd 	.word	0x081092cd
 8109254:	081092cd 	.word	0x081092cd
 8109258:	081092b5 	.word	0x081092b5
 810925c:	081092cd 	.word	0x081092cd
 8109260:	081092cd 	.word	0x081092cd
 8109264:	081092cd 	.word	0x081092cd
 8109268:	081092cd 	.word	0x081092cd
 810926c:	081092cd 	.word	0x081092cd
 8109270:	081092cd 	.word	0x081092cd
 8109274:	081092cd 	.word	0x081092cd
 8109278:	081092bd 	.word	0x081092bd
 810927c:	081092cd 	.word	0x081092cd
 8109280:	081092cd 	.word	0x081092cd
 8109284:	081092cd 	.word	0x081092cd
 8109288:	081092cd 	.word	0x081092cd
 810928c:	081092cd 	.word	0x081092cd
 8109290:	081092cd 	.word	0x081092cd
 8109294:	081092cd 	.word	0x081092cd
 8109298:	081092c5 	.word	0x081092c5
 810929c:	2301      	movs	r3, #1
 810929e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092a2:	e0bc      	b.n	810941e <UART_SetConfig+0x5a6>
 81092a4:	2304      	movs	r3, #4
 81092a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092aa:	e0b8      	b.n	810941e <UART_SetConfig+0x5a6>
 81092ac:	2308      	movs	r3, #8
 81092ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092b2:	e0b4      	b.n	810941e <UART_SetConfig+0x5a6>
 81092b4:	2310      	movs	r3, #16
 81092b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092ba:	e0b0      	b.n	810941e <UART_SetConfig+0x5a6>
 81092bc:	2320      	movs	r3, #32
 81092be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092c2:	e0ac      	b.n	810941e <UART_SetConfig+0x5a6>
 81092c4:	2340      	movs	r3, #64	@ 0x40
 81092c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092ca:	e0a8      	b.n	810941e <UART_SetConfig+0x5a6>
 81092cc:	2380      	movs	r3, #128	@ 0x80
 81092ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092d2:	e0a4      	b.n	810941e <UART_SetConfig+0x5a6>
 81092d4:	697b      	ldr	r3, [r7, #20]
 81092d6:	681b      	ldr	r3, [r3, #0]
 81092d8:	4a8f      	ldr	r2, [pc, #572]	@ (8109518 <UART_SetConfig+0x6a0>)
 81092da:	4293      	cmp	r3, r2
 81092dc:	d130      	bne.n	8109340 <UART_SetConfig+0x4c8>
 81092de:	4b8d      	ldr	r3, [pc, #564]	@ (8109514 <UART_SetConfig+0x69c>)
 81092e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81092e2:	f003 0307 	and.w	r3, r3, #7
 81092e6:	2b05      	cmp	r3, #5
 81092e8:	d826      	bhi.n	8109338 <UART_SetConfig+0x4c0>
 81092ea:	a201      	add	r2, pc, #4	@ (adr r2, 81092f0 <UART_SetConfig+0x478>)
 81092ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81092f0:	08109309 	.word	0x08109309
 81092f4:	08109311 	.word	0x08109311
 81092f8:	08109319 	.word	0x08109319
 81092fc:	08109321 	.word	0x08109321
 8109300:	08109329 	.word	0x08109329
 8109304:	08109331 	.word	0x08109331
 8109308:	2300      	movs	r3, #0
 810930a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810930e:	e086      	b.n	810941e <UART_SetConfig+0x5a6>
 8109310:	2304      	movs	r3, #4
 8109312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109316:	e082      	b.n	810941e <UART_SetConfig+0x5a6>
 8109318:	2308      	movs	r3, #8
 810931a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810931e:	e07e      	b.n	810941e <UART_SetConfig+0x5a6>
 8109320:	2310      	movs	r3, #16
 8109322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109326:	e07a      	b.n	810941e <UART_SetConfig+0x5a6>
 8109328:	2320      	movs	r3, #32
 810932a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810932e:	e076      	b.n	810941e <UART_SetConfig+0x5a6>
 8109330:	2340      	movs	r3, #64	@ 0x40
 8109332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109336:	e072      	b.n	810941e <UART_SetConfig+0x5a6>
 8109338:	2380      	movs	r3, #128	@ 0x80
 810933a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810933e:	e06e      	b.n	810941e <UART_SetConfig+0x5a6>
 8109340:	697b      	ldr	r3, [r7, #20]
 8109342:	681b      	ldr	r3, [r3, #0]
 8109344:	4a75      	ldr	r2, [pc, #468]	@ (810951c <UART_SetConfig+0x6a4>)
 8109346:	4293      	cmp	r3, r2
 8109348:	d130      	bne.n	81093ac <UART_SetConfig+0x534>
 810934a:	4b72      	ldr	r3, [pc, #456]	@ (8109514 <UART_SetConfig+0x69c>)
 810934c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810934e:	f003 0307 	and.w	r3, r3, #7
 8109352:	2b05      	cmp	r3, #5
 8109354:	d826      	bhi.n	81093a4 <UART_SetConfig+0x52c>
 8109356:	a201      	add	r2, pc, #4	@ (adr r2, 810935c <UART_SetConfig+0x4e4>)
 8109358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810935c:	08109375 	.word	0x08109375
 8109360:	0810937d 	.word	0x0810937d
 8109364:	08109385 	.word	0x08109385
 8109368:	0810938d 	.word	0x0810938d
 810936c:	08109395 	.word	0x08109395
 8109370:	0810939d 	.word	0x0810939d
 8109374:	2300      	movs	r3, #0
 8109376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810937a:	e050      	b.n	810941e <UART_SetConfig+0x5a6>
 810937c:	2304      	movs	r3, #4
 810937e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109382:	e04c      	b.n	810941e <UART_SetConfig+0x5a6>
 8109384:	2308      	movs	r3, #8
 8109386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810938a:	e048      	b.n	810941e <UART_SetConfig+0x5a6>
 810938c:	2310      	movs	r3, #16
 810938e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109392:	e044      	b.n	810941e <UART_SetConfig+0x5a6>
 8109394:	2320      	movs	r3, #32
 8109396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810939a:	e040      	b.n	810941e <UART_SetConfig+0x5a6>
 810939c:	2340      	movs	r3, #64	@ 0x40
 810939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093a2:	e03c      	b.n	810941e <UART_SetConfig+0x5a6>
 81093a4:	2380      	movs	r3, #128	@ 0x80
 81093a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093aa:	e038      	b.n	810941e <UART_SetConfig+0x5a6>
 81093ac:	697b      	ldr	r3, [r7, #20]
 81093ae:	681b      	ldr	r3, [r3, #0]
 81093b0:	4a5b      	ldr	r2, [pc, #364]	@ (8109520 <UART_SetConfig+0x6a8>)
 81093b2:	4293      	cmp	r3, r2
 81093b4:	d130      	bne.n	8109418 <UART_SetConfig+0x5a0>
 81093b6:	4b57      	ldr	r3, [pc, #348]	@ (8109514 <UART_SetConfig+0x69c>)
 81093b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81093ba:	f003 0307 	and.w	r3, r3, #7
 81093be:	2b05      	cmp	r3, #5
 81093c0:	d826      	bhi.n	8109410 <UART_SetConfig+0x598>
 81093c2:	a201      	add	r2, pc, #4	@ (adr r2, 81093c8 <UART_SetConfig+0x550>)
 81093c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81093c8:	081093e1 	.word	0x081093e1
 81093cc:	081093e9 	.word	0x081093e9
 81093d0:	081093f1 	.word	0x081093f1
 81093d4:	081093f9 	.word	0x081093f9
 81093d8:	08109401 	.word	0x08109401
 81093dc:	08109409 	.word	0x08109409
 81093e0:	2302      	movs	r3, #2
 81093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093e6:	e01a      	b.n	810941e <UART_SetConfig+0x5a6>
 81093e8:	2304      	movs	r3, #4
 81093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093ee:	e016      	b.n	810941e <UART_SetConfig+0x5a6>
 81093f0:	2308      	movs	r3, #8
 81093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093f6:	e012      	b.n	810941e <UART_SetConfig+0x5a6>
 81093f8:	2310      	movs	r3, #16
 81093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093fe:	e00e      	b.n	810941e <UART_SetConfig+0x5a6>
 8109400:	2320      	movs	r3, #32
 8109402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109406:	e00a      	b.n	810941e <UART_SetConfig+0x5a6>
 8109408:	2340      	movs	r3, #64	@ 0x40
 810940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810940e:	e006      	b.n	810941e <UART_SetConfig+0x5a6>
 8109410:	2380      	movs	r3, #128	@ 0x80
 8109412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109416:	e002      	b.n	810941e <UART_SetConfig+0x5a6>
 8109418:	2380      	movs	r3, #128	@ 0x80
 810941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810941e:	697b      	ldr	r3, [r7, #20]
 8109420:	681b      	ldr	r3, [r3, #0]
 8109422:	4a3f      	ldr	r2, [pc, #252]	@ (8109520 <UART_SetConfig+0x6a8>)
 8109424:	4293      	cmp	r3, r2
 8109426:	f040 80f8 	bne.w	810961a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810942a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810942e:	2b20      	cmp	r3, #32
 8109430:	dc46      	bgt.n	81094c0 <UART_SetConfig+0x648>
 8109432:	2b02      	cmp	r3, #2
 8109434:	f2c0 8082 	blt.w	810953c <UART_SetConfig+0x6c4>
 8109438:	3b02      	subs	r3, #2
 810943a:	2b1e      	cmp	r3, #30
 810943c:	d87e      	bhi.n	810953c <UART_SetConfig+0x6c4>
 810943e:	a201      	add	r2, pc, #4	@ (adr r2, 8109444 <UART_SetConfig+0x5cc>)
 8109440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109444:	081094c7 	.word	0x081094c7
 8109448:	0810953d 	.word	0x0810953d
 810944c:	081094cf 	.word	0x081094cf
 8109450:	0810953d 	.word	0x0810953d
 8109454:	0810953d 	.word	0x0810953d
 8109458:	0810953d 	.word	0x0810953d
 810945c:	081094df 	.word	0x081094df
 8109460:	0810953d 	.word	0x0810953d
 8109464:	0810953d 	.word	0x0810953d
 8109468:	0810953d 	.word	0x0810953d
 810946c:	0810953d 	.word	0x0810953d
 8109470:	0810953d 	.word	0x0810953d
 8109474:	0810953d 	.word	0x0810953d
 8109478:	0810953d 	.word	0x0810953d
 810947c:	081094ef 	.word	0x081094ef
 8109480:	0810953d 	.word	0x0810953d
 8109484:	0810953d 	.word	0x0810953d
 8109488:	0810953d 	.word	0x0810953d
 810948c:	0810953d 	.word	0x0810953d
 8109490:	0810953d 	.word	0x0810953d
 8109494:	0810953d 	.word	0x0810953d
 8109498:	0810953d 	.word	0x0810953d
 810949c:	0810953d 	.word	0x0810953d
 81094a0:	0810953d 	.word	0x0810953d
 81094a4:	0810953d 	.word	0x0810953d
 81094a8:	0810953d 	.word	0x0810953d
 81094ac:	0810953d 	.word	0x0810953d
 81094b0:	0810953d 	.word	0x0810953d
 81094b4:	0810953d 	.word	0x0810953d
 81094b8:	0810953d 	.word	0x0810953d
 81094bc:	0810952f 	.word	0x0810952f
 81094c0:	2b40      	cmp	r3, #64	@ 0x40
 81094c2:	d037      	beq.n	8109534 <UART_SetConfig+0x6bc>
 81094c4:	e03a      	b.n	810953c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81094c6:	f7fe fa55 	bl	8107974 <HAL_RCCEx_GetD3PCLK1Freq>
 81094ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81094cc:	e03c      	b.n	8109548 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81094ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81094d2:	4618      	mov	r0, r3
 81094d4:	f7fe fa64 	bl	81079a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81094d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81094da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81094dc:	e034      	b.n	8109548 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81094de:	f107 0318 	add.w	r3, r7, #24
 81094e2:	4618      	mov	r0, r3
 81094e4:	f7fe fbb0 	bl	8107c48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81094e8:	69fb      	ldr	r3, [r7, #28]
 81094ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81094ec:	e02c      	b.n	8109548 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81094ee:	4b09      	ldr	r3, [pc, #36]	@ (8109514 <UART_SetConfig+0x69c>)
 81094f0:	681b      	ldr	r3, [r3, #0]
 81094f2:	f003 0320 	and.w	r3, r3, #32
 81094f6:	2b00      	cmp	r3, #0
 81094f8:	d016      	beq.n	8109528 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81094fa:	4b06      	ldr	r3, [pc, #24]	@ (8109514 <UART_SetConfig+0x69c>)
 81094fc:	681b      	ldr	r3, [r3, #0]
 81094fe:	08db      	lsrs	r3, r3, #3
 8109500:	f003 0303 	and.w	r3, r3, #3
 8109504:	4a07      	ldr	r2, [pc, #28]	@ (8109524 <UART_SetConfig+0x6ac>)
 8109506:	fa22 f303 	lsr.w	r3, r2, r3
 810950a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810950c:	e01c      	b.n	8109548 <UART_SetConfig+0x6d0>
 810950e:	bf00      	nop
 8109510:	40011400 	.word	0x40011400
 8109514:	58024400 	.word	0x58024400
 8109518:	40007800 	.word	0x40007800
 810951c:	40007c00 	.word	0x40007c00
 8109520:	58000c00 	.word	0x58000c00
 8109524:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8109528:	4b9d      	ldr	r3, [pc, #628]	@ (81097a0 <UART_SetConfig+0x928>)
 810952a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810952c:	e00c      	b.n	8109548 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810952e:	4b9d      	ldr	r3, [pc, #628]	@ (81097a4 <UART_SetConfig+0x92c>)
 8109530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109532:	e009      	b.n	8109548 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109534:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8109538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810953a:	e005      	b.n	8109548 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810953c:	2300      	movs	r3, #0
 810953e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8109540:	2301      	movs	r3, #1
 8109542:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8109546:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8109548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810954a:	2b00      	cmp	r3, #0
 810954c:	f000 81de 	beq.w	810990c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8109550:	697b      	ldr	r3, [r7, #20]
 8109552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109554:	4a94      	ldr	r2, [pc, #592]	@ (81097a8 <UART_SetConfig+0x930>)
 8109556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810955a:	461a      	mov	r2, r3
 810955c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810955e:	fbb3 f3f2 	udiv	r3, r3, r2
 8109562:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109564:	697b      	ldr	r3, [r7, #20]
 8109566:	685a      	ldr	r2, [r3, #4]
 8109568:	4613      	mov	r3, r2
 810956a:	005b      	lsls	r3, r3, #1
 810956c:	4413      	add	r3, r2
 810956e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109570:	429a      	cmp	r2, r3
 8109572:	d305      	bcc.n	8109580 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8109574:	697b      	ldr	r3, [r7, #20]
 8109576:	685b      	ldr	r3, [r3, #4]
 8109578:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810957a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810957c:	429a      	cmp	r2, r3
 810957e:	d903      	bls.n	8109588 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8109580:	2301      	movs	r3, #1
 8109582:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8109586:	e1c1      	b.n	810990c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810958a:	2200      	movs	r2, #0
 810958c:	60bb      	str	r3, [r7, #8]
 810958e:	60fa      	str	r2, [r7, #12]
 8109590:	697b      	ldr	r3, [r7, #20]
 8109592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109594:	4a84      	ldr	r2, [pc, #528]	@ (81097a8 <UART_SetConfig+0x930>)
 8109596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810959a:	b29b      	uxth	r3, r3
 810959c:	2200      	movs	r2, #0
 810959e:	603b      	str	r3, [r7, #0]
 81095a0:	607a      	str	r2, [r7, #4]
 81095a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81095a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81095aa:	f7f6 fee9 	bl	8100380 <__aeabi_uldivmod>
 81095ae:	4602      	mov	r2, r0
 81095b0:	460b      	mov	r3, r1
 81095b2:	4610      	mov	r0, r2
 81095b4:	4619      	mov	r1, r3
 81095b6:	f04f 0200 	mov.w	r2, #0
 81095ba:	f04f 0300 	mov.w	r3, #0
 81095be:	020b      	lsls	r3, r1, #8
 81095c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81095c4:	0202      	lsls	r2, r0, #8
 81095c6:	6979      	ldr	r1, [r7, #20]
 81095c8:	6849      	ldr	r1, [r1, #4]
 81095ca:	0849      	lsrs	r1, r1, #1
 81095cc:	2000      	movs	r0, #0
 81095ce:	460c      	mov	r4, r1
 81095d0:	4605      	mov	r5, r0
 81095d2:	eb12 0804 	adds.w	r8, r2, r4
 81095d6:	eb43 0905 	adc.w	r9, r3, r5
 81095da:	697b      	ldr	r3, [r7, #20]
 81095dc:	685b      	ldr	r3, [r3, #4]
 81095de:	2200      	movs	r2, #0
 81095e0:	469a      	mov	sl, r3
 81095e2:	4693      	mov	fp, r2
 81095e4:	4652      	mov	r2, sl
 81095e6:	465b      	mov	r3, fp
 81095e8:	4640      	mov	r0, r8
 81095ea:	4649      	mov	r1, r9
 81095ec:	f7f6 fec8 	bl	8100380 <__aeabi_uldivmod>
 81095f0:	4602      	mov	r2, r0
 81095f2:	460b      	mov	r3, r1
 81095f4:	4613      	mov	r3, r2
 81095f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81095f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81095fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81095fe:	d308      	bcc.n	8109612 <UART_SetConfig+0x79a>
 8109600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8109606:	d204      	bcs.n	8109612 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8109608:	697b      	ldr	r3, [r7, #20]
 810960a:	681b      	ldr	r3, [r3, #0]
 810960c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810960e:	60da      	str	r2, [r3, #12]
 8109610:	e17c      	b.n	810990c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8109612:	2301      	movs	r3, #1
 8109614:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8109618:	e178      	b.n	810990c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810961a:	697b      	ldr	r3, [r7, #20]
 810961c:	69db      	ldr	r3, [r3, #28]
 810961e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8109622:	f040 80c5 	bne.w	81097b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8109626:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810962a:	2b20      	cmp	r3, #32
 810962c:	dc48      	bgt.n	81096c0 <UART_SetConfig+0x848>
 810962e:	2b00      	cmp	r3, #0
 8109630:	db7b      	blt.n	810972a <UART_SetConfig+0x8b2>
 8109632:	2b20      	cmp	r3, #32
 8109634:	d879      	bhi.n	810972a <UART_SetConfig+0x8b2>
 8109636:	a201      	add	r2, pc, #4	@ (adr r2, 810963c <UART_SetConfig+0x7c4>)
 8109638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810963c:	081096c7 	.word	0x081096c7
 8109640:	081096cf 	.word	0x081096cf
 8109644:	0810972b 	.word	0x0810972b
 8109648:	0810972b 	.word	0x0810972b
 810964c:	081096d7 	.word	0x081096d7
 8109650:	0810972b 	.word	0x0810972b
 8109654:	0810972b 	.word	0x0810972b
 8109658:	0810972b 	.word	0x0810972b
 810965c:	081096e7 	.word	0x081096e7
 8109660:	0810972b 	.word	0x0810972b
 8109664:	0810972b 	.word	0x0810972b
 8109668:	0810972b 	.word	0x0810972b
 810966c:	0810972b 	.word	0x0810972b
 8109670:	0810972b 	.word	0x0810972b
 8109674:	0810972b 	.word	0x0810972b
 8109678:	0810972b 	.word	0x0810972b
 810967c:	081096f7 	.word	0x081096f7
 8109680:	0810972b 	.word	0x0810972b
 8109684:	0810972b 	.word	0x0810972b
 8109688:	0810972b 	.word	0x0810972b
 810968c:	0810972b 	.word	0x0810972b
 8109690:	0810972b 	.word	0x0810972b
 8109694:	0810972b 	.word	0x0810972b
 8109698:	0810972b 	.word	0x0810972b
 810969c:	0810972b 	.word	0x0810972b
 81096a0:	0810972b 	.word	0x0810972b
 81096a4:	0810972b 	.word	0x0810972b
 81096a8:	0810972b 	.word	0x0810972b
 81096ac:	0810972b 	.word	0x0810972b
 81096b0:	0810972b 	.word	0x0810972b
 81096b4:	0810972b 	.word	0x0810972b
 81096b8:	0810972b 	.word	0x0810972b
 81096bc:	0810971d 	.word	0x0810971d
 81096c0:	2b40      	cmp	r3, #64	@ 0x40
 81096c2:	d02e      	beq.n	8109722 <UART_SetConfig+0x8aa>
 81096c4:	e031      	b.n	810972a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81096c6:	f7fc ff1f 	bl	8106508 <HAL_RCC_GetPCLK1Freq>
 81096ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81096cc:	e033      	b.n	8109736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81096ce:	f7fc ff31 	bl	8106534 <HAL_RCC_GetPCLK2Freq>
 81096d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81096d4:	e02f      	b.n	8109736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81096d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81096da:	4618      	mov	r0, r3
 81096dc:	f7fe f960 	bl	81079a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81096e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81096e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81096e4:	e027      	b.n	8109736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81096e6:	f107 0318 	add.w	r3, r7, #24
 81096ea:	4618      	mov	r0, r3
 81096ec:	f7fe faac 	bl	8107c48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81096f0:	69fb      	ldr	r3, [r7, #28]
 81096f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81096f4:	e01f      	b.n	8109736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81096f6:	4b2d      	ldr	r3, [pc, #180]	@ (81097ac <UART_SetConfig+0x934>)
 81096f8:	681b      	ldr	r3, [r3, #0]
 81096fa:	f003 0320 	and.w	r3, r3, #32
 81096fe:	2b00      	cmp	r3, #0
 8109700:	d009      	beq.n	8109716 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109702:	4b2a      	ldr	r3, [pc, #168]	@ (81097ac <UART_SetConfig+0x934>)
 8109704:	681b      	ldr	r3, [r3, #0]
 8109706:	08db      	lsrs	r3, r3, #3
 8109708:	f003 0303 	and.w	r3, r3, #3
 810970c:	4a24      	ldr	r2, [pc, #144]	@ (81097a0 <UART_SetConfig+0x928>)
 810970e:	fa22 f303 	lsr.w	r3, r2, r3
 8109712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109714:	e00f      	b.n	8109736 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8109716:	4b22      	ldr	r3, [pc, #136]	@ (81097a0 <UART_SetConfig+0x928>)
 8109718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810971a:	e00c      	b.n	8109736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810971c:	4b21      	ldr	r3, [pc, #132]	@ (81097a4 <UART_SetConfig+0x92c>)
 810971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109720:	e009      	b.n	8109736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8109726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109728:	e005      	b.n	8109736 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810972a:	2300      	movs	r3, #0
 810972c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810972e:	2301      	movs	r3, #1
 8109730:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8109734:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8109736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109738:	2b00      	cmp	r3, #0
 810973a:	f000 80e7 	beq.w	810990c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810973e:	697b      	ldr	r3, [r7, #20]
 8109740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109742:	4a19      	ldr	r2, [pc, #100]	@ (81097a8 <UART_SetConfig+0x930>)
 8109744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109748:	461a      	mov	r2, r3
 810974a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810974c:	fbb3 f3f2 	udiv	r3, r3, r2
 8109750:	005a      	lsls	r2, r3, #1
 8109752:	697b      	ldr	r3, [r7, #20]
 8109754:	685b      	ldr	r3, [r3, #4]
 8109756:	085b      	lsrs	r3, r3, #1
 8109758:	441a      	add	r2, r3
 810975a:	697b      	ldr	r3, [r7, #20]
 810975c:	685b      	ldr	r3, [r3, #4]
 810975e:	fbb2 f3f3 	udiv	r3, r2, r3
 8109762:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109766:	2b0f      	cmp	r3, #15
 8109768:	d916      	bls.n	8109798 <UART_SetConfig+0x920>
 810976a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810976c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109770:	d212      	bcs.n	8109798 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8109772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109774:	b29b      	uxth	r3, r3
 8109776:	f023 030f 	bic.w	r3, r3, #15
 810977a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810977c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810977e:	085b      	lsrs	r3, r3, #1
 8109780:	b29b      	uxth	r3, r3
 8109782:	f003 0307 	and.w	r3, r3, #7
 8109786:	b29a      	uxth	r2, r3
 8109788:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810978a:	4313      	orrs	r3, r2
 810978c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810978e:	697b      	ldr	r3, [r7, #20]
 8109790:	681b      	ldr	r3, [r3, #0]
 8109792:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8109794:	60da      	str	r2, [r3, #12]
 8109796:	e0b9      	b.n	810990c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109798:	2301      	movs	r3, #1
 810979a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810979e:	e0b5      	b.n	810990c <UART_SetConfig+0xa94>
 81097a0:	03d09000 	.word	0x03d09000
 81097a4:	003d0900 	.word	0x003d0900
 81097a8:	0810f218 	.word	0x0810f218
 81097ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81097b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81097b4:	2b20      	cmp	r3, #32
 81097b6:	dc49      	bgt.n	810984c <UART_SetConfig+0x9d4>
 81097b8:	2b00      	cmp	r3, #0
 81097ba:	db7c      	blt.n	81098b6 <UART_SetConfig+0xa3e>
 81097bc:	2b20      	cmp	r3, #32
 81097be:	d87a      	bhi.n	81098b6 <UART_SetConfig+0xa3e>
 81097c0:	a201      	add	r2, pc, #4	@ (adr r2, 81097c8 <UART_SetConfig+0x950>)
 81097c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81097c6:	bf00      	nop
 81097c8:	08109853 	.word	0x08109853
 81097cc:	0810985b 	.word	0x0810985b
 81097d0:	081098b7 	.word	0x081098b7
 81097d4:	081098b7 	.word	0x081098b7
 81097d8:	08109863 	.word	0x08109863
 81097dc:	081098b7 	.word	0x081098b7
 81097e0:	081098b7 	.word	0x081098b7
 81097e4:	081098b7 	.word	0x081098b7
 81097e8:	08109873 	.word	0x08109873
 81097ec:	081098b7 	.word	0x081098b7
 81097f0:	081098b7 	.word	0x081098b7
 81097f4:	081098b7 	.word	0x081098b7
 81097f8:	081098b7 	.word	0x081098b7
 81097fc:	081098b7 	.word	0x081098b7
 8109800:	081098b7 	.word	0x081098b7
 8109804:	081098b7 	.word	0x081098b7
 8109808:	08109883 	.word	0x08109883
 810980c:	081098b7 	.word	0x081098b7
 8109810:	081098b7 	.word	0x081098b7
 8109814:	081098b7 	.word	0x081098b7
 8109818:	081098b7 	.word	0x081098b7
 810981c:	081098b7 	.word	0x081098b7
 8109820:	081098b7 	.word	0x081098b7
 8109824:	081098b7 	.word	0x081098b7
 8109828:	081098b7 	.word	0x081098b7
 810982c:	081098b7 	.word	0x081098b7
 8109830:	081098b7 	.word	0x081098b7
 8109834:	081098b7 	.word	0x081098b7
 8109838:	081098b7 	.word	0x081098b7
 810983c:	081098b7 	.word	0x081098b7
 8109840:	081098b7 	.word	0x081098b7
 8109844:	081098b7 	.word	0x081098b7
 8109848:	081098a9 	.word	0x081098a9
 810984c:	2b40      	cmp	r3, #64	@ 0x40
 810984e:	d02e      	beq.n	81098ae <UART_SetConfig+0xa36>
 8109850:	e031      	b.n	81098b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109852:	f7fc fe59 	bl	8106508 <HAL_RCC_GetPCLK1Freq>
 8109856:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109858:	e033      	b.n	81098c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810985a:	f7fc fe6b 	bl	8106534 <HAL_RCC_GetPCLK2Freq>
 810985e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109860:	e02f      	b.n	81098c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109866:	4618      	mov	r0, r3
 8109868:	f7fe f89a 	bl	81079a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810986c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810986e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109870:	e027      	b.n	81098c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109872:	f107 0318 	add.w	r3, r7, #24
 8109876:	4618      	mov	r0, r3
 8109878:	f7fe f9e6 	bl	8107c48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810987c:	69fb      	ldr	r3, [r7, #28]
 810987e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109880:	e01f      	b.n	81098c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109882:	4b2d      	ldr	r3, [pc, #180]	@ (8109938 <UART_SetConfig+0xac0>)
 8109884:	681b      	ldr	r3, [r3, #0]
 8109886:	f003 0320 	and.w	r3, r3, #32
 810988a:	2b00      	cmp	r3, #0
 810988c:	d009      	beq.n	81098a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810988e:	4b2a      	ldr	r3, [pc, #168]	@ (8109938 <UART_SetConfig+0xac0>)
 8109890:	681b      	ldr	r3, [r3, #0]
 8109892:	08db      	lsrs	r3, r3, #3
 8109894:	f003 0303 	and.w	r3, r3, #3
 8109898:	4a28      	ldr	r2, [pc, #160]	@ (810993c <UART_SetConfig+0xac4>)
 810989a:	fa22 f303 	lsr.w	r3, r2, r3
 810989e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81098a0:	e00f      	b.n	81098c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81098a2:	4b26      	ldr	r3, [pc, #152]	@ (810993c <UART_SetConfig+0xac4>)
 81098a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81098a6:	e00c      	b.n	81098c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81098a8:	4b25      	ldr	r3, [pc, #148]	@ (8109940 <UART_SetConfig+0xac8>)
 81098aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81098ac:	e009      	b.n	81098c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81098ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81098b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81098b4:	e005      	b.n	81098c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81098b6:	2300      	movs	r3, #0
 81098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81098ba:	2301      	movs	r3, #1
 81098bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81098c0:	bf00      	nop
    }

    if (pclk != 0U)
 81098c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81098c4:	2b00      	cmp	r3, #0
 81098c6:	d021      	beq.n	810990c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81098c8:	697b      	ldr	r3, [r7, #20]
 81098ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81098cc:	4a1d      	ldr	r2, [pc, #116]	@ (8109944 <UART_SetConfig+0xacc>)
 81098ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81098d2:	461a      	mov	r2, r3
 81098d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81098d6:	fbb3 f2f2 	udiv	r2, r3, r2
 81098da:	697b      	ldr	r3, [r7, #20]
 81098dc:	685b      	ldr	r3, [r3, #4]
 81098de:	085b      	lsrs	r3, r3, #1
 81098e0:	441a      	add	r2, r3
 81098e2:	697b      	ldr	r3, [r7, #20]
 81098e4:	685b      	ldr	r3, [r3, #4]
 81098e6:	fbb2 f3f3 	udiv	r3, r2, r3
 81098ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81098ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098ee:	2b0f      	cmp	r3, #15
 81098f0:	d909      	bls.n	8109906 <UART_SetConfig+0xa8e>
 81098f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81098f8:	d205      	bcs.n	8109906 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81098fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098fc:	b29a      	uxth	r2, r3
 81098fe:	697b      	ldr	r3, [r7, #20]
 8109900:	681b      	ldr	r3, [r3, #0]
 8109902:	60da      	str	r2, [r3, #12]
 8109904:	e002      	b.n	810990c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109906:	2301      	movs	r3, #1
 8109908:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810990c:	697b      	ldr	r3, [r7, #20]
 810990e:	2201      	movs	r2, #1
 8109910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8109914:	697b      	ldr	r3, [r7, #20]
 8109916:	2201      	movs	r2, #1
 8109918:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810991c:	697b      	ldr	r3, [r7, #20]
 810991e:	2200      	movs	r2, #0
 8109920:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8109922:	697b      	ldr	r3, [r7, #20]
 8109924:	2200      	movs	r2, #0
 8109926:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8109928:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810992c:	4618      	mov	r0, r3
 810992e:	3748      	adds	r7, #72	@ 0x48
 8109930:	46bd      	mov	sp, r7
 8109932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8109936:	bf00      	nop
 8109938:	58024400 	.word	0x58024400
 810993c:	03d09000 	.word	0x03d09000
 8109940:	003d0900 	.word	0x003d0900
 8109944:	0810f218 	.word	0x0810f218

08109948 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109948:	b480      	push	{r7}
 810994a:	b083      	sub	sp, #12
 810994c:	af00      	add	r7, sp, #0
 810994e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8109950:	687b      	ldr	r3, [r7, #4]
 8109952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109954:	f003 0308 	and.w	r3, r3, #8
 8109958:	2b00      	cmp	r3, #0
 810995a:	d00a      	beq.n	8109972 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810995c:	687b      	ldr	r3, [r7, #4]
 810995e:	681b      	ldr	r3, [r3, #0]
 8109960:	685b      	ldr	r3, [r3, #4]
 8109962:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8109966:	687b      	ldr	r3, [r7, #4]
 8109968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810996a:	687b      	ldr	r3, [r7, #4]
 810996c:	681b      	ldr	r3, [r3, #0]
 810996e:	430a      	orrs	r2, r1
 8109970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109972:	687b      	ldr	r3, [r7, #4]
 8109974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109976:	f003 0301 	and.w	r3, r3, #1
 810997a:	2b00      	cmp	r3, #0
 810997c:	d00a      	beq.n	8109994 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810997e:	687b      	ldr	r3, [r7, #4]
 8109980:	681b      	ldr	r3, [r3, #0]
 8109982:	685b      	ldr	r3, [r3, #4]
 8109984:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8109988:	687b      	ldr	r3, [r7, #4]
 810998a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810998c:	687b      	ldr	r3, [r7, #4]
 810998e:	681b      	ldr	r3, [r3, #0]
 8109990:	430a      	orrs	r2, r1
 8109992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8109994:	687b      	ldr	r3, [r7, #4]
 8109996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109998:	f003 0302 	and.w	r3, r3, #2
 810999c:	2b00      	cmp	r3, #0
 810999e:	d00a      	beq.n	81099b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81099a0:	687b      	ldr	r3, [r7, #4]
 81099a2:	681b      	ldr	r3, [r3, #0]
 81099a4:	685b      	ldr	r3, [r3, #4]
 81099a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81099aa:	687b      	ldr	r3, [r7, #4]
 81099ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81099ae:	687b      	ldr	r3, [r7, #4]
 81099b0:	681b      	ldr	r3, [r3, #0]
 81099b2:	430a      	orrs	r2, r1
 81099b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81099b6:	687b      	ldr	r3, [r7, #4]
 81099b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81099ba:	f003 0304 	and.w	r3, r3, #4
 81099be:	2b00      	cmp	r3, #0
 81099c0:	d00a      	beq.n	81099d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81099c2:	687b      	ldr	r3, [r7, #4]
 81099c4:	681b      	ldr	r3, [r3, #0]
 81099c6:	685b      	ldr	r3, [r3, #4]
 81099c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 81099cc:	687b      	ldr	r3, [r7, #4]
 81099ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81099d0:	687b      	ldr	r3, [r7, #4]
 81099d2:	681b      	ldr	r3, [r3, #0]
 81099d4:	430a      	orrs	r2, r1
 81099d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81099d8:	687b      	ldr	r3, [r7, #4]
 81099da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81099dc:	f003 0310 	and.w	r3, r3, #16
 81099e0:	2b00      	cmp	r3, #0
 81099e2:	d00a      	beq.n	81099fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81099e4:	687b      	ldr	r3, [r7, #4]
 81099e6:	681b      	ldr	r3, [r3, #0]
 81099e8:	689b      	ldr	r3, [r3, #8]
 81099ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 81099ee:	687b      	ldr	r3, [r7, #4]
 81099f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81099f2:	687b      	ldr	r3, [r7, #4]
 81099f4:	681b      	ldr	r3, [r3, #0]
 81099f6:	430a      	orrs	r2, r1
 81099f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81099fa:	687b      	ldr	r3, [r7, #4]
 81099fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81099fe:	f003 0320 	and.w	r3, r3, #32
 8109a02:	2b00      	cmp	r3, #0
 8109a04:	d00a      	beq.n	8109a1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8109a06:	687b      	ldr	r3, [r7, #4]
 8109a08:	681b      	ldr	r3, [r3, #0]
 8109a0a:	689b      	ldr	r3, [r3, #8]
 8109a0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8109a10:	687b      	ldr	r3, [r7, #4]
 8109a12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8109a14:	687b      	ldr	r3, [r7, #4]
 8109a16:	681b      	ldr	r3, [r3, #0]
 8109a18:	430a      	orrs	r2, r1
 8109a1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8109a1c:	687b      	ldr	r3, [r7, #4]
 8109a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109a24:	2b00      	cmp	r3, #0
 8109a26:	d01a      	beq.n	8109a5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8109a28:	687b      	ldr	r3, [r7, #4]
 8109a2a:	681b      	ldr	r3, [r3, #0]
 8109a2c:	685b      	ldr	r3, [r3, #4]
 8109a2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8109a32:	687b      	ldr	r3, [r7, #4]
 8109a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8109a36:	687b      	ldr	r3, [r7, #4]
 8109a38:	681b      	ldr	r3, [r3, #0]
 8109a3a:	430a      	orrs	r2, r1
 8109a3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8109a3e:	687b      	ldr	r3, [r7, #4]
 8109a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8109a46:	d10a      	bne.n	8109a5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8109a48:	687b      	ldr	r3, [r7, #4]
 8109a4a:	681b      	ldr	r3, [r3, #0]
 8109a4c:	685b      	ldr	r3, [r3, #4]
 8109a4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8109a52:	687b      	ldr	r3, [r7, #4]
 8109a54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8109a56:	687b      	ldr	r3, [r7, #4]
 8109a58:	681b      	ldr	r3, [r3, #0]
 8109a5a:	430a      	orrs	r2, r1
 8109a5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8109a5e:	687b      	ldr	r3, [r7, #4]
 8109a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109a66:	2b00      	cmp	r3, #0
 8109a68:	d00a      	beq.n	8109a80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8109a6a:	687b      	ldr	r3, [r7, #4]
 8109a6c:	681b      	ldr	r3, [r3, #0]
 8109a6e:	685b      	ldr	r3, [r3, #4]
 8109a70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8109a74:	687b      	ldr	r3, [r7, #4]
 8109a76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8109a78:	687b      	ldr	r3, [r7, #4]
 8109a7a:	681b      	ldr	r3, [r3, #0]
 8109a7c:	430a      	orrs	r2, r1
 8109a7e:	605a      	str	r2, [r3, #4]
  }
}
 8109a80:	bf00      	nop
 8109a82:	370c      	adds	r7, #12
 8109a84:	46bd      	mov	sp, r7
 8109a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a8a:	4770      	bx	lr

08109a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8109a8c:	b580      	push	{r7, lr}
 8109a8e:	b098      	sub	sp, #96	@ 0x60
 8109a90:	af02      	add	r7, sp, #8
 8109a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109a94:	687b      	ldr	r3, [r7, #4]
 8109a96:	2200      	movs	r2, #0
 8109a98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8109a9c:	f7fb faf6 	bl	810508c <HAL_GetTick>
 8109aa0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8109aa2:	687b      	ldr	r3, [r7, #4]
 8109aa4:	681b      	ldr	r3, [r3, #0]
 8109aa6:	681b      	ldr	r3, [r3, #0]
 8109aa8:	f003 0308 	and.w	r3, r3, #8
 8109aac:	2b08      	cmp	r3, #8
 8109aae:	d12f      	bne.n	8109b10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8109ab0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8109ab4:	9300      	str	r3, [sp, #0]
 8109ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8109ab8:	2200      	movs	r2, #0
 8109aba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8109abe:	6878      	ldr	r0, [r7, #4]
 8109ac0:	f000 f88e 	bl	8109be0 <UART_WaitOnFlagUntilTimeout>
 8109ac4:	4603      	mov	r3, r0
 8109ac6:	2b00      	cmp	r3, #0
 8109ac8:	d022      	beq.n	8109b10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8109aca:	687b      	ldr	r3, [r7, #4]
 8109acc:	681b      	ldr	r3, [r3, #0]
 8109ace:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109ad2:	e853 3f00 	ldrex	r3, [r3]
 8109ad6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8109ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8109ade:	653b      	str	r3, [r7, #80]	@ 0x50
 8109ae0:	687b      	ldr	r3, [r7, #4]
 8109ae2:	681b      	ldr	r3, [r3, #0]
 8109ae4:	461a      	mov	r2, r3
 8109ae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8109ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8109aea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109aec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8109aee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109af0:	e841 2300 	strex	r3, r2, [r1]
 8109af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8109af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109af8:	2b00      	cmp	r3, #0
 8109afa:	d1e6      	bne.n	8109aca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8109afc:	687b      	ldr	r3, [r7, #4]
 8109afe:	2220      	movs	r2, #32
 8109b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8109b04:	687b      	ldr	r3, [r7, #4]
 8109b06:	2200      	movs	r2, #0
 8109b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8109b0c:	2303      	movs	r3, #3
 8109b0e:	e063      	b.n	8109bd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8109b10:	687b      	ldr	r3, [r7, #4]
 8109b12:	681b      	ldr	r3, [r3, #0]
 8109b14:	681b      	ldr	r3, [r3, #0]
 8109b16:	f003 0304 	and.w	r3, r3, #4
 8109b1a:	2b04      	cmp	r3, #4
 8109b1c:	d149      	bne.n	8109bb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8109b1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8109b22:	9300      	str	r3, [sp, #0]
 8109b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8109b26:	2200      	movs	r2, #0
 8109b28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8109b2c:	6878      	ldr	r0, [r7, #4]
 8109b2e:	f000 f857 	bl	8109be0 <UART_WaitOnFlagUntilTimeout>
 8109b32:	4603      	mov	r3, r0
 8109b34:	2b00      	cmp	r3, #0
 8109b36:	d03c      	beq.n	8109bb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109b38:	687b      	ldr	r3, [r7, #4]
 8109b3a:	681b      	ldr	r3, [r3, #0]
 8109b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109b40:	e853 3f00 	ldrex	r3, [r3]
 8109b44:	623b      	str	r3, [r7, #32]
   return(result);
 8109b46:	6a3b      	ldr	r3, [r7, #32]
 8109b48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8109b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8109b4e:	687b      	ldr	r3, [r7, #4]
 8109b50:	681b      	ldr	r3, [r3, #0]
 8109b52:	461a      	mov	r2, r3
 8109b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109b56:	633b      	str	r3, [r7, #48]	@ 0x30
 8109b58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8109b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109b5e:	e841 2300 	strex	r3, r2, [r1]
 8109b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8109b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109b66:	2b00      	cmp	r3, #0
 8109b68:	d1e6      	bne.n	8109b38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109b6a:	687b      	ldr	r3, [r7, #4]
 8109b6c:	681b      	ldr	r3, [r3, #0]
 8109b6e:	3308      	adds	r3, #8
 8109b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109b72:	693b      	ldr	r3, [r7, #16]
 8109b74:	e853 3f00 	ldrex	r3, [r3]
 8109b78:	60fb      	str	r3, [r7, #12]
   return(result);
 8109b7a:	68fb      	ldr	r3, [r7, #12]
 8109b7c:	f023 0301 	bic.w	r3, r3, #1
 8109b80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109b82:	687b      	ldr	r3, [r7, #4]
 8109b84:	681b      	ldr	r3, [r3, #0]
 8109b86:	3308      	adds	r3, #8
 8109b88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8109b8a:	61fa      	str	r2, [r7, #28]
 8109b8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109b8e:	69b9      	ldr	r1, [r7, #24]
 8109b90:	69fa      	ldr	r2, [r7, #28]
 8109b92:	e841 2300 	strex	r3, r2, [r1]
 8109b96:	617b      	str	r3, [r7, #20]
   return(result);
 8109b98:	697b      	ldr	r3, [r7, #20]
 8109b9a:	2b00      	cmp	r3, #0
 8109b9c:	d1e5      	bne.n	8109b6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8109b9e:	687b      	ldr	r3, [r7, #4]
 8109ba0:	2220      	movs	r2, #32
 8109ba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8109ba6:	687b      	ldr	r3, [r7, #4]
 8109ba8:	2200      	movs	r2, #0
 8109baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8109bae:	2303      	movs	r3, #3
 8109bb0:	e012      	b.n	8109bd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8109bb2:	687b      	ldr	r3, [r7, #4]
 8109bb4:	2220      	movs	r2, #32
 8109bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8109bba:	687b      	ldr	r3, [r7, #4]
 8109bbc:	2220      	movs	r2, #32
 8109bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109bc2:	687b      	ldr	r3, [r7, #4]
 8109bc4:	2200      	movs	r2, #0
 8109bc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8109bc8:	687b      	ldr	r3, [r7, #4]
 8109bca:	2200      	movs	r2, #0
 8109bcc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8109bce:	687b      	ldr	r3, [r7, #4]
 8109bd0:	2200      	movs	r2, #0
 8109bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8109bd6:	2300      	movs	r3, #0
}
 8109bd8:	4618      	mov	r0, r3
 8109bda:	3758      	adds	r7, #88	@ 0x58
 8109bdc:	46bd      	mov	sp, r7
 8109bde:	bd80      	pop	{r7, pc}

08109be0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8109be0:	b580      	push	{r7, lr}
 8109be2:	b084      	sub	sp, #16
 8109be4:	af00      	add	r7, sp, #0
 8109be6:	60f8      	str	r0, [r7, #12]
 8109be8:	60b9      	str	r1, [r7, #8]
 8109bea:	603b      	str	r3, [r7, #0]
 8109bec:	4613      	mov	r3, r2
 8109bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109bf0:	e04f      	b.n	8109c92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109bf2:	69bb      	ldr	r3, [r7, #24]
 8109bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109bf8:	d04b      	beq.n	8109c92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109bfa:	f7fb fa47 	bl	810508c <HAL_GetTick>
 8109bfe:	4602      	mov	r2, r0
 8109c00:	683b      	ldr	r3, [r7, #0]
 8109c02:	1ad3      	subs	r3, r2, r3
 8109c04:	69ba      	ldr	r2, [r7, #24]
 8109c06:	429a      	cmp	r2, r3
 8109c08:	d302      	bcc.n	8109c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8109c0a:	69bb      	ldr	r3, [r7, #24]
 8109c0c:	2b00      	cmp	r3, #0
 8109c0e:	d101      	bne.n	8109c14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8109c10:	2303      	movs	r3, #3
 8109c12:	e04e      	b.n	8109cb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8109c14:	68fb      	ldr	r3, [r7, #12]
 8109c16:	681b      	ldr	r3, [r3, #0]
 8109c18:	681b      	ldr	r3, [r3, #0]
 8109c1a:	f003 0304 	and.w	r3, r3, #4
 8109c1e:	2b00      	cmp	r3, #0
 8109c20:	d037      	beq.n	8109c92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8109c22:	68bb      	ldr	r3, [r7, #8]
 8109c24:	2b80      	cmp	r3, #128	@ 0x80
 8109c26:	d034      	beq.n	8109c92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8109c28:	68bb      	ldr	r3, [r7, #8]
 8109c2a:	2b40      	cmp	r3, #64	@ 0x40
 8109c2c:	d031      	beq.n	8109c92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8109c2e:	68fb      	ldr	r3, [r7, #12]
 8109c30:	681b      	ldr	r3, [r3, #0]
 8109c32:	69db      	ldr	r3, [r3, #28]
 8109c34:	f003 0308 	and.w	r3, r3, #8
 8109c38:	2b08      	cmp	r3, #8
 8109c3a:	d110      	bne.n	8109c5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8109c3c:	68fb      	ldr	r3, [r7, #12]
 8109c3e:	681b      	ldr	r3, [r3, #0]
 8109c40:	2208      	movs	r2, #8
 8109c42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8109c44:	68f8      	ldr	r0, [r7, #12]
 8109c46:	f000 f95b 	bl	8109f00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8109c4a:	68fb      	ldr	r3, [r7, #12]
 8109c4c:	2208      	movs	r2, #8
 8109c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8109c52:	68fb      	ldr	r3, [r7, #12]
 8109c54:	2200      	movs	r2, #0
 8109c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8109c5a:	2301      	movs	r3, #1
 8109c5c:	e029      	b.n	8109cb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8109c5e:	68fb      	ldr	r3, [r7, #12]
 8109c60:	681b      	ldr	r3, [r3, #0]
 8109c62:	69db      	ldr	r3, [r3, #28]
 8109c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8109c68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8109c6c:	d111      	bne.n	8109c92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8109c6e:	68fb      	ldr	r3, [r7, #12]
 8109c70:	681b      	ldr	r3, [r3, #0]
 8109c72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8109c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8109c78:	68f8      	ldr	r0, [r7, #12]
 8109c7a:	f000 f941 	bl	8109f00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8109c7e:	68fb      	ldr	r3, [r7, #12]
 8109c80:	2220      	movs	r2, #32
 8109c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8109c86:	68fb      	ldr	r3, [r7, #12]
 8109c88:	2200      	movs	r2, #0
 8109c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8109c8e:	2303      	movs	r3, #3
 8109c90:	e00f      	b.n	8109cb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109c92:	68fb      	ldr	r3, [r7, #12]
 8109c94:	681b      	ldr	r3, [r3, #0]
 8109c96:	69da      	ldr	r2, [r3, #28]
 8109c98:	68bb      	ldr	r3, [r7, #8]
 8109c9a:	4013      	ands	r3, r2
 8109c9c:	68ba      	ldr	r2, [r7, #8]
 8109c9e:	429a      	cmp	r2, r3
 8109ca0:	bf0c      	ite	eq
 8109ca2:	2301      	moveq	r3, #1
 8109ca4:	2300      	movne	r3, #0
 8109ca6:	b2db      	uxtb	r3, r3
 8109ca8:	461a      	mov	r2, r3
 8109caa:	79fb      	ldrb	r3, [r7, #7]
 8109cac:	429a      	cmp	r2, r3
 8109cae:	d0a0      	beq.n	8109bf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8109cb0:	2300      	movs	r3, #0
}
 8109cb2:	4618      	mov	r0, r3
 8109cb4:	3710      	adds	r7, #16
 8109cb6:	46bd      	mov	sp, r7
 8109cb8:	bd80      	pop	{r7, pc}
	...

08109cbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8109cbc:	b480      	push	{r7}
 8109cbe:	b0a3      	sub	sp, #140	@ 0x8c
 8109cc0:	af00      	add	r7, sp, #0
 8109cc2:	60f8      	str	r0, [r7, #12]
 8109cc4:	60b9      	str	r1, [r7, #8]
 8109cc6:	4613      	mov	r3, r2
 8109cc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8109cca:	68fb      	ldr	r3, [r7, #12]
 8109ccc:	68ba      	ldr	r2, [r7, #8]
 8109cce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8109cd0:	68fb      	ldr	r3, [r7, #12]
 8109cd2:	88fa      	ldrh	r2, [r7, #6]
 8109cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8109cd8:	68fb      	ldr	r3, [r7, #12]
 8109cda:	88fa      	ldrh	r2, [r7, #6]
 8109cdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8109ce0:	68fb      	ldr	r3, [r7, #12]
 8109ce2:	2200      	movs	r2, #0
 8109ce4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8109ce6:	68fb      	ldr	r3, [r7, #12]
 8109ce8:	689b      	ldr	r3, [r3, #8]
 8109cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109cee:	d10e      	bne.n	8109d0e <UART_Start_Receive_IT+0x52>
 8109cf0:	68fb      	ldr	r3, [r7, #12]
 8109cf2:	691b      	ldr	r3, [r3, #16]
 8109cf4:	2b00      	cmp	r3, #0
 8109cf6:	d105      	bne.n	8109d04 <UART_Start_Receive_IT+0x48>
 8109cf8:	68fb      	ldr	r3, [r7, #12]
 8109cfa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8109cfe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8109d02:	e02d      	b.n	8109d60 <UART_Start_Receive_IT+0xa4>
 8109d04:	68fb      	ldr	r3, [r7, #12]
 8109d06:	22ff      	movs	r2, #255	@ 0xff
 8109d08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8109d0c:	e028      	b.n	8109d60 <UART_Start_Receive_IT+0xa4>
 8109d0e:	68fb      	ldr	r3, [r7, #12]
 8109d10:	689b      	ldr	r3, [r3, #8]
 8109d12:	2b00      	cmp	r3, #0
 8109d14:	d10d      	bne.n	8109d32 <UART_Start_Receive_IT+0x76>
 8109d16:	68fb      	ldr	r3, [r7, #12]
 8109d18:	691b      	ldr	r3, [r3, #16]
 8109d1a:	2b00      	cmp	r3, #0
 8109d1c:	d104      	bne.n	8109d28 <UART_Start_Receive_IT+0x6c>
 8109d1e:	68fb      	ldr	r3, [r7, #12]
 8109d20:	22ff      	movs	r2, #255	@ 0xff
 8109d22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8109d26:	e01b      	b.n	8109d60 <UART_Start_Receive_IT+0xa4>
 8109d28:	68fb      	ldr	r3, [r7, #12]
 8109d2a:	227f      	movs	r2, #127	@ 0x7f
 8109d2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8109d30:	e016      	b.n	8109d60 <UART_Start_Receive_IT+0xa4>
 8109d32:	68fb      	ldr	r3, [r7, #12]
 8109d34:	689b      	ldr	r3, [r3, #8]
 8109d36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109d3a:	d10d      	bne.n	8109d58 <UART_Start_Receive_IT+0x9c>
 8109d3c:	68fb      	ldr	r3, [r7, #12]
 8109d3e:	691b      	ldr	r3, [r3, #16]
 8109d40:	2b00      	cmp	r3, #0
 8109d42:	d104      	bne.n	8109d4e <UART_Start_Receive_IT+0x92>
 8109d44:	68fb      	ldr	r3, [r7, #12]
 8109d46:	227f      	movs	r2, #127	@ 0x7f
 8109d48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8109d4c:	e008      	b.n	8109d60 <UART_Start_Receive_IT+0xa4>
 8109d4e:	68fb      	ldr	r3, [r7, #12]
 8109d50:	223f      	movs	r2, #63	@ 0x3f
 8109d52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8109d56:	e003      	b.n	8109d60 <UART_Start_Receive_IT+0xa4>
 8109d58:	68fb      	ldr	r3, [r7, #12]
 8109d5a:	2200      	movs	r2, #0
 8109d5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109d60:	68fb      	ldr	r3, [r7, #12]
 8109d62:	2200      	movs	r2, #0
 8109d64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8109d68:	68fb      	ldr	r3, [r7, #12]
 8109d6a:	2222      	movs	r2, #34	@ 0x22
 8109d6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109d70:	68fb      	ldr	r3, [r7, #12]
 8109d72:	681b      	ldr	r3, [r3, #0]
 8109d74:	3308      	adds	r3, #8
 8109d76:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109d78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8109d7a:	e853 3f00 	ldrex	r3, [r3]
 8109d7e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8109d80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8109d82:	f043 0301 	orr.w	r3, r3, #1
 8109d86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8109d8a:	68fb      	ldr	r3, [r7, #12]
 8109d8c:	681b      	ldr	r3, [r3, #0]
 8109d8e:	3308      	adds	r3, #8
 8109d90:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8109d94:	673a      	str	r2, [r7, #112]	@ 0x70
 8109d96:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109d98:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8109d9a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8109d9c:	e841 2300 	strex	r3, r2, [r1]
 8109da0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8109da2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8109da4:	2b00      	cmp	r3, #0
 8109da6:	d1e3      	bne.n	8109d70 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8109da8:	68fb      	ldr	r3, [r7, #12]
 8109daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109dac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109db0:	d14f      	bne.n	8109e52 <UART_Start_Receive_IT+0x196>
 8109db2:	68fb      	ldr	r3, [r7, #12]
 8109db4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8109db8:	88fa      	ldrh	r2, [r7, #6]
 8109dba:	429a      	cmp	r2, r3
 8109dbc:	d349      	bcc.n	8109e52 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8109dbe:	68fb      	ldr	r3, [r7, #12]
 8109dc0:	689b      	ldr	r3, [r3, #8]
 8109dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109dc6:	d107      	bne.n	8109dd8 <UART_Start_Receive_IT+0x11c>
 8109dc8:	68fb      	ldr	r3, [r7, #12]
 8109dca:	691b      	ldr	r3, [r3, #16]
 8109dcc:	2b00      	cmp	r3, #0
 8109dce:	d103      	bne.n	8109dd8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8109dd0:	68fb      	ldr	r3, [r7, #12]
 8109dd2:	4a47      	ldr	r2, [pc, #284]	@ (8109ef0 <UART_Start_Receive_IT+0x234>)
 8109dd4:	675a      	str	r2, [r3, #116]	@ 0x74
 8109dd6:	e002      	b.n	8109dde <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8109dd8:	68fb      	ldr	r3, [r7, #12]
 8109dda:	4a46      	ldr	r2, [pc, #280]	@ (8109ef4 <UART_Start_Receive_IT+0x238>)
 8109ddc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8109dde:	68fb      	ldr	r3, [r7, #12]
 8109de0:	691b      	ldr	r3, [r3, #16]
 8109de2:	2b00      	cmp	r3, #0
 8109de4:	d01a      	beq.n	8109e1c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8109de6:	68fb      	ldr	r3, [r7, #12]
 8109de8:	681b      	ldr	r3, [r3, #0]
 8109dea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8109dee:	e853 3f00 	ldrex	r3, [r3]
 8109df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8109df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8109dfa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8109dfe:	68fb      	ldr	r3, [r7, #12]
 8109e00:	681b      	ldr	r3, [r3, #0]
 8109e02:	461a      	mov	r2, r3
 8109e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8109e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8109e0a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109e0c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8109e0e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8109e10:	e841 2300 	strex	r3, r2, [r1]
 8109e14:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8109e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8109e18:	2b00      	cmp	r3, #0
 8109e1a:	d1e4      	bne.n	8109de6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8109e1c:	68fb      	ldr	r3, [r7, #12]
 8109e1e:	681b      	ldr	r3, [r3, #0]
 8109e20:	3308      	adds	r3, #8
 8109e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109e26:	e853 3f00 	ldrex	r3, [r3]
 8109e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8109e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8109e32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8109e34:	68fb      	ldr	r3, [r7, #12]
 8109e36:	681b      	ldr	r3, [r3, #0]
 8109e38:	3308      	adds	r3, #8
 8109e3a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8109e3c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8109e3e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109e40:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8109e42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8109e44:	e841 2300 	strex	r3, r2, [r1]
 8109e48:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8109e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109e4c:	2b00      	cmp	r3, #0
 8109e4e:	d1e5      	bne.n	8109e1c <UART_Start_Receive_IT+0x160>
 8109e50:	e046      	b.n	8109ee0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8109e52:	68fb      	ldr	r3, [r7, #12]
 8109e54:	689b      	ldr	r3, [r3, #8]
 8109e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109e5a:	d107      	bne.n	8109e6c <UART_Start_Receive_IT+0x1b0>
 8109e5c:	68fb      	ldr	r3, [r7, #12]
 8109e5e:	691b      	ldr	r3, [r3, #16]
 8109e60:	2b00      	cmp	r3, #0
 8109e62:	d103      	bne.n	8109e6c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8109e64:	68fb      	ldr	r3, [r7, #12]
 8109e66:	4a24      	ldr	r2, [pc, #144]	@ (8109ef8 <UART_Start_Receive_IT+0x23c>)
 8109e68:	675a      	str	r2, [r3, #116]	@ 0x74
 8109e6a:	e002      	b.n	8109e72 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8109e6c:	68fb      	ldr	r3, [r7, #12]
 8109e6e:	4a23      	ldr	r2, [pc, #140]	@ (8109efc <UART_Start_Receive_IT+0x240>)
 8109e70:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8109e72:	68fb      	ldr	r3, [r7, #12]
 8109e74:	691b      	ldr	r3, [r3, #16]
 8109e76:	2b00      	cmp	r3, #0
 8109e78:	d019      	beq.n	8109eae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8109e7a:	68fb      	ldr	r3, [r7, #12]
 8109e7c:	681b      	ldr	r3, [r3, #0]
 8109e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109e82:	e853 3f00 	ldrex	r3, [r3]
 8109e86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8109e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109e8a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8109e8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8109e90:	68fb      	ldr	r3, [r7, #12]
 8109e92:	681b      	ldr	r3, [r3, #0]
 8109e94:	461a      	mov	r2, r3
 8109e96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8109e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8109e9a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109e9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8109e9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8109ea0:	e841 2300 	strex	r3, r2, [r1]
 8109ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8109ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109ea8:	2b00      	cmp	r3, #0
 8109eaa:	d1e6      	bne.n	8109e7a <UART_Start_Receive_IT+0x1be>
 8109eac:	e018      	b.n	8109ee0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8109eae:	68fb      	ldr	r3, [r7, #12]
 8109eb0:	681b      	ldr	r3, [r3, #0]
 8109eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109eb4:	697b      	ldr	r3, [r7, #20]
 8109eb6:	e853 3f00 	ldrex	r3, [r3]
 8109eba:	613b      	str	r3, [r7, #16]
   return(result);
 8109ebc:	693b      	ldr	r3, [r7, #16]
 8109ebe:	f043 0320 	orr.w	r3, r3, #32
 8109ec2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8109ec4:	68fb      	ldr	r3, [r7, #12]
 8109ec6:	681b      	ldr	r3, [r3, #0]
 8109ec8:	461a      	mov	r2, r3
 8109eca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8109ecc:	623b      	str	r3, [r7, #32]
 8109ece:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109ed0:	69f9      	ldr	r1, [r7, #28]
 8109ed2:	6a3a      	ldr	r2, [r7, #32]
 8109ed4:	e841 2300 	strex	r3, r2, [r1]
 8109ed8:	61bb      	str	r3, [r7, #24]
   return(result);
 8109eda:	69bb      	ldr	r3, [r7, #24]
 8109edc:	2b00      	cmp	r3, #0
 8109ede:	d1e6      	bne.n	8109eae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8109ee0:	2300      	movs	r3, #0
}
 8109ee2:	4618      	mov	r0, r3
 8109ee4:	378c      	adds	r7, #140	@ 0x8c
 8109ee6:	46bd      	mov	sp, r7
 8109ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109eec:	4770      	bx	lr
 8109eee:	bf00      	nop
 8109ef0:	0810a71d 	.word	0x0810a71d
 8109ef4:	0810a3b9 	.word	0x0810a3b9
 8109ef8:	0810a201 	.word	0x0810a201
 8109efc:	0810a049 	.word	0x0810a049

08109f00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8109f00:	b480      	push	{r7}
 8109f02:	b095      	sub	sp, #84	@ 0x54
 8109f04:	af00      	add	r7, sp, #0
 8109f06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109f08:	687b      	ldr	r3, [r7, #4]
 8109f0a:	681b      	ldr	r3, [r3, #0]
 8109f0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109f10:	e853 3f00 	ldrex	r3, [r3]
 8109f14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8109f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8109f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8109f1e:	687b      	ldr	r3, [r7, #4]
 8109f20:	681b      	ldr	r3, [r3, #0]
 8109f22:	461a      	mov	r2, r3
 8109f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109f26:	643b      	str	r3, [r7, #64]	@ 0x40
 8109f28:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109f2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8109f2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8109f2e:	e841 2300 	strex	r3, r2, [r1]
 8109f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8109f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109f36:	2b00      	cmp	r3, #0
 8109f38:	d1e6      	bne.n	8109f08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8109f3a:	687b      	ldr	r3, [r7, #4]
 8109f3c:	681b      	ldr	r3, [r3, #0]
 8109f3e:	3308      	adds	r3, #8
 8109f40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109f42:	6a3b      	ldr	r3, [r7, #32]
 8109f44:	e853 3f00 	ldrex	r3, [r3]
 8109f48:	61fb      	str	r3, [r7, #28]
   return(result);
 8109f4a:	69fb      	ldr	r3, [r7, #28]
 8109f4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8109f50:	f023 0301 	bic.w	r3, r3, #1
 8109f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109f56:	687b      	ldr	r3, [r7, #4]
 8109f58:	681b      	ldr	r3, [r3, #0]
 8109f5a:	3308      	adds	r3, #8
 8109f5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8109f5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8109f60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109f62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8109f64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8109f66:	e841 2300 	strex	r3, r2, [r1]
 8109f6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8109f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109f6e:	2b00      	cmp	r3, #0
 8109f70:	d1e3      	bne.n	8109f3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109f72:	687b      	ldr	r3, [r7, #4]
 8109f74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109f76:	2b01      	cmp	r3, #1
 8109f78:	d118      	bne.n	8109fac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109f7a:	687b      	ldr	r3, [r7, #4]
 8109f7c:	681b      	ldr	r3, [r3, #0]
 8109f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109f80:	68fb      	ldr	r3, [r7, #12]
 8109f82:	e853 3f00 	ldrex	r3, [r3]
 8109f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8109f88:	68bb      	ldr	r3, [r7, #8]
 8109f8a:	f023 0310 	bic.w	r3, r3, #16
 8109f8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8109f90:	687b      	ldr	r3, [r7, #4]
 8109f92:	681b      	ldr	r3, [r3, #0]
 8109f94:	461a      	mov	r2, r3
 8109f96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109f98:	61bb      	str	r3, [r7, #24]
 8109f9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109f9c:	6979      	ldr	r1, [r7, #20]
 8109f9e:	69ba      	ldr	r2, [r7, #24]
 8109fa0:	e841 2300 	strex	r3, r2, [r1]
 8109fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8109fa6:	693b      	ldr	r3, [r7, #16]
 8109fa8:	2b00      	cmp	r3, #0
 8109faa:	d1e6      	bne.n	8109f7a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8109fac:	687b      	ldr	r3, [r7, #4]
 8109fae:	2220      	movs	r2, #32
 8109fb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109fb4:	687b      	ldr	r3, [r7, #4]
 8109fb6:	2200      	movs	r2, #0
 8109fb8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8109fba:	687b      	ldr	r3, [r7, #4]
 8109fbc:	2200      	movs	r2, #0
 8109fbe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8109fc0:	bf00      	nop
 8109fc2:	3754      	adds	r7, #84	@ 0x54
 8109fc4:	46bd      	mov	sp, r7
 8109fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fca:	4770      	bx	lr

08109fcc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8109fcc:	b580      	push	{r7, lr}
 8109fce:	b084      	sub	sp, #16
 8109fd0:	af00      	add	r7, sp, #0
 8109fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8109fd4:	687b      	ldr	r3, [r7, #4]
 8109fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109fd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8109fda:	68fb      	ldr	r3, [r7, #12]
 8109fdc:	2200      	movs	r2, #0
 8109fde:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8109fe2:	68f8      	ldr	r0, [r7, #12]
 8109fe4:	f7fe ff32 	bl	8108e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8109fe8:	bf00      	nop
 8109fea:	3710      	adds	r7, #16
 8109fec:	46bd      	mov	sp, r7
 8109fee:	bd80      	pop	{r7, pc}

08109ff0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8109ff0:	b580      	push	{r7, lr}
 8109ff2:	b088      	sub	sp, #32
 8109ff4:	af00      	add	r7, sp, #0
 8109ff6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8109ff8:	687b      	ldr	r3, [r7, #4]
 8109ffa:	681b      	ldr	r3, [r3, #0]
 8109ffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109ffe:	68fb      	ldr	r3, [r7, #12]
 810a000:	e853 3f00 	ldrex	r3, [r3]
 810a004:	60bb      	str	r3, [r7, #8]
   return(result);
 810a006:	68bb      	ldr	r3, [r7, #8]
 810a008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810a00c:	61fb      	str	r3, [r7, #28]
 810a00e:	687b      	ldr	r3, [r7, #4]
 810a010:	681b      	ldr	r3, [r3, #0]
 810a012:	461a      	mov	r2, r3
 810a014:	69fb      	ldr	r3, [r7, #28]
 810a016:	61bb      	str	r3, [r7, #24]
 810a018:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a01a:	6979      	ldr	r1, [r7, #20]
 810a01c:	69ba      	ldr	r2, [r7, #24]
 810a01e:	e841 2300 	strex	r3, r2, [r1]
 810a022:	613b      	str	r3, [r7, #16]
   return(result);
 810a024:	693b      	ldr	r3, [r7, #16]
 810a026:	2b00      	cmp	r3, #0
 810a028:	d1e6      	bne.n	8109ff8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810a02a:	687b      	ldr	r3, [r7, #4]
 810a02c:	2220      	movs	r2, #32
 810a02e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810a032:	687b      	ldr	r3, [r7, #4]
 810a034:	2200      	movs	r2, #0
 810a036:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810a038:	6878      	ldr	r0, [r7, #4]
 810a03a:	f7fe fefd 	bl	8108e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810a03e:	bf00      	nop
 810a040:	3720      	adds	r7, #32
 810a042:	46bd      	mov	sp, r7
 810a044:	bd80      	pop	{r7, pc}
	...

0810a048 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 810a048:	b580      	push	{r7, lr}
 810a04a:	b09c      	sub	sp, #112	@ 0x70
 810a04c:	af00      	add	r7, sp, #0
 810a04e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 810a050:	687b      	ldr	r3, [r7, #4]
 810a052:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810a056:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810a05a:	687b      	ldr	r3, [r7, #4]
 810a05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810a060:	2b22      	cmp	r3, #34	@ 0x22
 810a062:	f040 80be 	bne.w	810a1e2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810a066:	687b      	ldr	r3, [r7, #4]
 810a068:	681b      	ldr	r3, [r3, #0]
 810a06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a06c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810a070:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 810a074:	b2d9      	uxtb	r1, r3
 810a076:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810a07a:	b2da      	uxtb	r2, r3
 810a07c:	687b      	ldr	r3, [r7, #4]
 810a07e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a080:	400a      	ands	r2, r1
 810a082:	b2d2      	uxtb	r2, r2
 810a084:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 810a086:	687b      	ldr	r3, [r7, #4]
 810a088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a08a:	1c5a      	adds	r2, r3, #1
 810a08c:	687b      	ldr	r3, [r7, #4]
 810a08e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810a090:	687b      	ldr	r3, [r7, #4]
 810a092:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a096:	b29b      	uxth	r3, r3
 810a098:	3b01      	subs	r3, #1
 810a09a:	b29a      	uxth	r2, r3
 810a09c:	687b      	ldr	r3, [r7, #4]
 810a09e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810a0a2:	687b      	ldr	r3, [r7, #4]
 810a0a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a0a8:	b29b      	uxth	r3, r3
 810a0aa:	2b00      	cmp	r3, #0
 810a0ac:	f040 80a1 	bne.w	810a1f2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a0b0:	687b      	ldr	r3, [r7, #4]
 810a0b2:	681b      	ldr	r3, [r3, #0]
 810a0b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a0b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a0b8:	e853 3f00 	ldrex	r3, [r3]
 810a0bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810a0be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810a0c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810a0c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 810a0c6:	687b      	ldr	r3, [r7, #4]
 810a0c8:	681b      	ldr	r3, [r3, #0]
 810a0ca:	461a      	mov	r2, r3
 810a0cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810a0ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 810a0d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a0d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810a0d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810a0d6:	e841 2300 	strex	r3, r2, [r1]
 810a0da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810a0dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810a0de:	2b00      	cmp	r3, #0
 810a0e0:	d1e6      	bne.n	810a0b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a0e2:	687b      	ldr	r3, [r7, #4]
 810a0e4:	681b      	ldr	r3, [r3, #0]
 810a0e6:	3308      	adds	r3, #8
 810a0e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a0ec:	e853 3f00 	ldrex	r3, [r3]
 810a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810a0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a0f4:	f023 0301 	bic.w	r3, r3, #1
 810a0f8:	667b      	str	r3, [r7, #100]	@ 0x64
 810a0fa:	687b      	ldr	r3, [r7, #4]
 810a0fc:	681b      	ldr	r3, [r3, #0]
 810a0fe:	3308      	adds	r3, #8
 810a100:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 810a102:	647a      	str	r2, [r7, #68]	@ 0x44
 810a104:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a106:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810a108:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810a10a:	e841 2300 	strex	r3, r2, [r1]
 810a10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810a110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a112:	2b00      	cmp	r3, #0
 810a114:	d1e5      	bne.n	810a0e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810a116:	687b      	ldr	r3, [r7, #4]
 810a118:	2220      	movs	r2, #32
 810a11a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810a11e:	687b      	ldr	r3, [r7, #4]
 810a120:	2200      	movs	r2, #0
 810a122:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810a124:	687b      	ldr	r3, [r7, #4]
 810a126:	2200      	movs	r2, #0
 810a128:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810a12a:	687b      	ldr	r3, [r7, #4]
 810a12c:	681b      	ldr	r3, [r3, #0]
 810a12e:	4a33      	ldr	r2, [pc, #204]	@ (810a1fc <UART_RxISR_8BIT+0x1b4>)
 810a130:	4293      	cmp	r3, r2
 810a132:	d01f      	beq.n	810a174 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810a134:	687b      	ldr	r3, [r7, #4]
 810a136:	681b      	ldr	r3, [r3, #0]
 810a138:	685b      	ldr	r3, [r3, #4]
 810a13a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810a13e:	2b00      	cmp	r3, #0
 810a140:	d018      	beq.n	810a174 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810a142:	687b      	ldr	r3, [r7, #4]
 810a144:	681b      	ldr	r3, [r3, #0]
 810a146:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a14a:	e853 3f00 	ldrex	r3, [r3]
 810a14e:	623b      	str	r3, [r7, #32]
   return(result);
 810a150:	6a3b      	ldr	r3, [r7, #32]
 810a152:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810a156:	663b      	str	r3, [r7, #96]	@ 0x60
 810a158:	687b      	ldr	r3, [r7, #4]
 810a15a:	681b      	ldr	r3, [r3, #0]
 810a15c:	461a      	mov	r2, r3
 810a15e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810a160:	633b      	str	r3, [r7, #48]	@ 0x30
 810a162:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a164:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810a166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a168:	e841 2300 	strex	r3, r2, [r1]
 810a16c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810a16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a170:	2b00      	cmp	r3, #0
 810a172:	d1e6      	bne.n	810a142 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810a174:	687b      	ldr	r3, [r7, #4]
 810a176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a178:	2b01      	cmp	r3, #1
 810a17a:	d12e      	bne.n	810a1da <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a17c:	687b      	ldr	r3, [r7, #4]
 810a17e:	2200      	movs	r2, #0
 810a180:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810a182:	687b      	ldr	r3, [r7, #4]
 810a184:	681b      	ldr	r3, [r3, #0]
 810a186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a188:	693b      	ldr	r3, [r7, #16]
 810a18a:	e853 3f00 	ldrex	r3, [r3]
 810a18e:	60fb      	str	r3, [r7, #12]
   return(result);
 810a190:	68fb      	ldr	r3, [r7, #12]
 810a192:	f023 0310 	bic.w	r3, r3, #16
 810a196:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810a198:	687b      	ldr	r3, [r7, #4]
 810a19a:	681b      	ldr	r3, [r3, #0]
 810a19c:	461a      	mov	r2, r3
 810a19e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810a1a0:	61fb      	str	r3, [r7, #28]
 810a1a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a1a4:	69b9      	ldr	r1, [r7, #24]
 810a1a6:	69fa      	ldr	r2, [r7, #28]
 810a1a8:	e841 2300 	strex	r3, r2, [r1]
 810a1ac:	617b      	str	r3, [r7, #20]
   return(result);
 810a1ae:	697b      	ldr	r3, [r7, #20]
 810a1b0:	2b00      	cmp	r3, #0
 810a1b2:	d1e6      	bne.n	810a182 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810a1b4:	687b      	ldr	r3, [r7, #4]
 810a1b6:	681b      	ldr	r3, [r3, #0]
 810a1b8:	69db      	ldr	r3, [r3, #28]
 810a1ba:	f003 0310 	and.w	r3, r3, #16
 810a1be:	2b10      	cmp	r3, #16
 810a1c0:	d103      	bne.n	810a1ca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810a1c2:	687b      	ldr	r3, [r7, #4]
 810a1c4:	681b      	ldr	r3, [r3, #0]
 810a1c6:	2210      	movs	r2, #16
 810a1c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810a1ca:	687b      	ldr	r3, [r7, #4]
 810a1cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810a1d0:	4619      	mov	r1, r3
 810a1d2:	6878      	ldr	r0, [r7, #4]
 810a1d4:	f7fe fe44 	bl	8108e60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810a1d8:	e00b      	b.n	810a1f2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810a1da:	6878      	ldr	r0, [r7, #4]
 810a1dc:	f7f8 fba4 	bl	8102928 <HAL_UART_RxCpltCallback>
}
 810a1e0:	e007      	b.n	810a1f2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810a1e2:	687b      	ldr	r3, [r7, #4]
 810a1e4:	681b      	ldr	r3, [r3, #0]
 810a1e6:	699a      	ldr	r2, [r3, #24]
 810a1e8:	687b      	ldr	r3, [r7, #4]
 810a1ea:	681b      	ldr	r3, [r3, #0]
 810a1ec:	f042 0208 	orr.w	r2, r2, #8
 810a1f0:	619a      	str	r2, [r3, #24]
}
 810a1f2:	bf00      	nop
 810a1f4:	3770      	adds	r7, #112	@ 0x70
 810a1f6:	46bd      	mov	sp, r7
 810a1f8:	bd80      	pop	{r7, pc}
 810a1fa:	bf00      	nop
 810a1fc:	58000c00 	.word	0x58000c00

0810a200 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 810a200:	b580      	push	{r7, lr}
 810a202:	b09c      	sub	sp, #112	@ 0x70
 810a204:	af00      	add	r7, sp, #0
 810a206:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 810a208:	687b      	ldr	r3, [r7, #4]
 810a20a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810a20e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810a212:	687b      	ldr	r3, [r7, #4]
 810a214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810a218:	2b22      	cmp	r3, #34	@ 0x22
 810a21a:	f040 80be 	bne.w	810a39a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810a21e:	687b      	ldr	r3, [r7, #4]
 810a220:	681b      	ldr	r3, [r3, #0]
 810a222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a224:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 810a228:	687b      	ldr	r3, [r7, #4]
 810a22a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a22c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 810a22e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 810a232:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810a236:	4013      	ands	r3, r2
 810a238:	b29a      	uxth	r2, r3
 810a23a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810a23c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 810a23e:	687b      	ldr	r3, [r7, #4]
 810a240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a242:	1c9a      	adds	r2, r3, #2
 810a244:	687b      	ldr	r3, [r7, #4]
 810a246:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810a248:	687b      	ldr	r3, [r7, #4]
 810a24a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a24e:	b29b      	uxth	r3, r3
 810a250:	3b01      	subs	r3, #1
 810a252:	b29a      	uxth	r2, r3
 810a254:	687b      	ldr	r3, [r7, #4]
 810a256:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810a25a:	687b      	ldr	r3, [r7, #4]
 810a25c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a260:	b29b      	uxth	r3, r3
 810a262:	2b00      	cmp	r3, #0
 810a264:	f040 80a1 	bne.w	810a3aa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a268:	687b      	ldr	r3, [r7, #4]
 810a26a:	681b      	ldr	r3, [r3, #0]
 810a26c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a26e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810a270:	e853 3f00 	ldrex	r3, [r3]
 810a274:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810a276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810a27c:	667b      	str	r3, [r7, #100]	@ 0x64
 810a27e:	687b      	ldr	r3, [r7, #4]
 810a280:	681b      	ldr	r3, [r3, #0]
 810a282:	461a      	mov	r2, r3
 810a284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810a286:	657b      	str	r3, [r7, #84]	@ 0x54
 810a288:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a28a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810a28c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810a28e:	e841 2300 	strex	r3, r2, [r1]
 810a292:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810a294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a296:	2b00      	cmp	r3, #0
 810a298:	d1e6      	bne.n	810a268 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a29a:	687b      	ldr	r3, [r7, #4]
 810a29c:	681b      	ldr	r3, [r3, #0]
 810a29e:	3308      	adds	r3, #8
 810a2a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a2a4:	e853 3f00 	ldrex	r3, [r3]
 810a2a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a2ac:	f023 0301 	bic.w	r3, r3, #1
 810a2b0:	663b      	str	r3, [r7, #96]	@ 0x60
 810a2b2:	687b      	ldr	r3, [r7, #4]
 810a2b4:	681b      	ldr	r3, [r3, #0]
 810a2b6:	3308      	adds	r3, #8
 810a2b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 810a2ba:	643a      	str	r2, [r7, #64]	@ 0x40
 810a2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a2be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810a2c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810a2c2:	e841 2300 	strex	r3, r2, [r1]
 810a2c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810a2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a2ca:	2b00      	cmp	r3, #0
 810a2cc:	d1e5      	bne.n	810a29a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810a2ce:	687b      	ldr	r3, [r7, #4]
 810a2d0:	2220      	movs	r2, #32
 810a2d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810a2d6:	687b      	ldr	r3, [r7, #4]
 810a2d8:	2200      	movs	r2, #0
 810a2da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810a2dc:	687b      	ldr	r3, [r7, #4]
 810a2de:	2200      	movs	r2, #0
 810a2e0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810a2e2:	687b      	ldr	r3, [r7, #4]
 810a2e4:	681b      	ldr	r3, [r3, #0]
 810a2e6:	4a33      	ldr	r2, [pc, #204]	@ (810a3b4 <UART_RxISR_16BIT+0x1b4>)
 810a2e8:	4293      	cmp	r3, r2
 810a2ea:	d01f      	beq.n	810a32c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810a2ec:	687b      	ldr	r3, [r7, #4]
 810a2ee:	681b      	ldr	r3, [r3, #0]
 810a2f0:	685b      	ldr	r3, [r3, #4]
 810a2f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810a2f6:	2b00      	cmp	r3, #0
 810a2f8:	d018      	beq.n	810a32c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810a2fa:	687b      	ldr	r3, [r7, #4]
 810a2fc:	681b      	ldr	r3, [r3, #0]
 810a2fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a300:	6a3b      	ldr	r3, [r7, #32]
 810a302:	e853 3f00 	ldrex	r3, [r3]
 810a306:	61fb      	str	r3, [r7, #28]
   return(result);
 810a308:	69fb      	ldr	r3, [r7, #28]
 810a30a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810a30e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810a310:	687b      	ldr	r3, [r7, #4]
 810a312:	681b      	ldr	r3, [r3, #0]
 810a314:	461a      	mov	r2, r3
 810a316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810a318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810a31a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a31c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810a31e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810a320:	e841 2300 	strex	r3, r2, [r1]
 810a324:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810a326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a328:	2b00      	cmp	r3, #0
 810a32a:	d1e6      	bne.n	810a2fa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810a32c:	687b      	ldr	r3, [r7, #4]
 810a32e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a330:	2b01      	cmp	r3, #1
 810a332:	d12e      	bne.n	810a392 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a334:	687b      	ldr	r3, [r7, #4]
 810a336:	2200      	movs	r2, #0
 810a338:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810a33a:	687b      	ldr	r3, [r7, #4]
 810a33c:	681b      	ldr	r3, [r3, #0]
 810a33e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a340:	68fb      	ldr	r3, [r7, #12]
 810a342:	e853 3f00 	ldrex	r3, [r3]
 810a346:	60bb      	str	r3, [r7, #8]
   return(result);
 810a348:	68bb      	ldr	r3, [r7, #8]
 810a34a:	f023 0310 	bic.w	r3, r3, #16
 810a34e:	65bb      	str	r3, [r7, #88]	@ 0x58
 810a350:	687b      	ldr	r3, [r7, #4]
 810a352:	681b      	ldr	r3, [r3, #0]
 810a354:	461a      	mov	r2, r3
 810a356:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810a358:	61bb      	str	r3, [r7, #24]
 810a35a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a35c:	6979      	ldr	r1, [r7, #20]
 810a35e:	69ba      	ldr	r2, [r7, #24]
 810a360:	e841 2300 	strex	r3, r2, [r1]
 810a364:	613b      	str	r3, [r7, #16]
   return(result);
 810a366:	693b      	ldr	r3, [r7, #16]
 810a368:	2b00      	cmp	r3, #0
 810a36a:	d1e6      	bne.n	810a33a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810a36c:	687b      	ldr	r3, [r7, #4]
 810a36e:	681b      	ldr	r3, [r3, #0]
 810a370:	69db      	ldr	r3, [r3, #28]
 810a372:	f003 0310 	and.w	r3, r3, #16
 810a376:	2b10      	cmp	r3, #16
 810a378:	d103      	bne.n	810a382 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810a37a:	687b      	ldr	r3, [r7, #4]
 810a37c:	681b      	ldr	r3, [r3, #0]
 810a37e:	2210      	movs	r2, #16
 810a380:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810a382:	687b      	ldr	r3, [r7, #4]
 810a384:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810a388:	4619      	mov	r1, r3
 810a38a:	6878      	ldr	r0, [r7, #4]
 810a38c:	f7fe fd68 	bl	8108e60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810a390:	e00b      	b.n	810a3aa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810a392:	6878      	ldr	r0, [r7, #4]
 810a394:	f7f8 fac8 	bl	8102928 <HAL_UART_RxCpltCallback>
}
 810a398:	e007      	b.n	810a3aa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810a39a:	687b      	ldr	r3, [r7, #4]
 810a39c:	681b      	ldr	r3, [r3, #0]
 810a39e:	699a      	ldr	r2, [r3, #24]
 810a3a0:	687b      	ldr	r3, [r7, #4]
 810a3a2:	681b      	ldr	r3, [r3, #0]
 810a3a4:	f042 0208 	orr.w	r2, r2, #8
 810a3a8:	619a      	str	r2, [r3, #24]
}
 810a3aa:	bf00      	nop
 810a3ac:	3770      	adds	r7, #112	@ 0x70
 810a3ae:	46bd      	mov	sp, r7
 810a3b0:	bd80      	pop	{r7, pc}
 810a3b2:	bf00      	nop
 810a3b4:	58000c00 	.word	0x58000c00

0810a3b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810a3b8:	b580      	push	{r7, lr}
 810a3ba:	b0ac      	sub	sp, #176	@ 0xb0
 810a3bc:	af00      	add	r7, sp, #0
 810a3be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 810a3c0:	687b      	ldr	r3, [r7, #4]
 810a3c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810a3c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810a3ca:	687b      	ldr	r3, [r7, #4]
 810a3cc:	681b      	ldr	r3, [r3, #0]
 810a3ce:	69db      	ldr	r3, [r3, #28]
 810a3d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810a3d4:	687b      	ldr	r3, [r7, #4]
 810a3d6:	681b      	ldr	r3, [r3, #0]
 810a3d8:	681b      	ldr	r3, [r3, #0]
 810a3da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810a3de:	687b      	ldr	r3, [r7, #4]
 810a3e0:	681b      	ldr	r3, [r3, #0]
 810a3e2:	689b      	ldr	r3, [r3, #8]
 810a3e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810a3e8:	687b      	ldr	r3, [r7, #4]
 810a3ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810a3ee:	2b22      	cmp	r3, #34	@ 0x22
 810a3f0:	f040 8183 	bne.w	810a6fa <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810a3f4:	687b      	ldr	r3, [r7, #4]
 810a3f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810a3fa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810a3fe:	e126      	b.n	810a64e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810a400:	687b      	ldr	r3, [r7, #4]
 810a402:	681b      	ldr	r3, [r3, #0]
 810a404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a406:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810a40a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 810a40e:	b2d9      	uxtb	r1, r3
 810a410:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 810a414:	b2da      	uxtb	r2, r3
 810a416:	687b      	ldr	r3, [r7, #4]
 810a418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a41a:	400a      	ands	r2, r1
 810a41c:	b2d2      	uxtb	r2, r2
 810a41e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 810a420:	687b      	ldr	r3, [r7, #4]
 810a422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a424:	1c5a      	adds	r2, r3, #1
 810a426:	687b      	ldr	r3, [r7, #4]
 810a428:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810a42a:	687b      	ldr	r3, [r7, #4]
 810a42c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a430:	b29b      	uxth	r3, r3
 810a432:	3b01      	subs	r3, #1
 810a434:	b29a      	uxth	r2, r3
 810a436:	687b      	ldr	r3, [r7, #4]
 810a438:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810a43c:	687b      	ldr	r3, [r7, #4]
 810a43e:	681b      	ldr	r3, [r3, #0]
 810a440:	69db      	ldr	r3, [r3, #28]
 810a442:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810a446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810a44a:	f003 0307 	and.w	r3, r3, #7
 810a44e:	2b00      	cmp	r3, #0
 810a450:	d053      	beq.n	810a4fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810a452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810a456:	f003 0301 	and.w	r3, r3, #1
 810a45a:	2b00      	cmp	r3, #0
 810a45c:	d011      	beq.n	810a482 <UART_RxISR_8BIT_FIFOEN+0xca>
 810a45e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 810a462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810a466:	2b00      	cmp	r3, #0
 810a468:	d00b      	beq.n	810a482 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810a46a:	687b      	ldr	r3, [r7, #4]
 810a46c:	681b      	ldr	r3, [r3, #0]
 810a46e:	2201      	movs	r2, #1
 810a470:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810a472:	687b      	ldr	r3, [r7, #4]
 810a474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810a478:	f043 0201 	orr.w	r2, r3, #1
 810a47c:	687b      	ldr	r3, [r7, #4]
 810a47e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810a482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810a486:	f003 0302 	and.w	r3, r3, #2
 810a48a:	2b00      	cmp	r3, #0
 810a48c:	d011      	beq.n	810a4b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 810a48e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810a492:	f003 0301 	and.w	r3, r3, #1
 810a496:	2b00      	cmp	r3, #0
 810a498:	d00b      	beq.n	810a4b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810a49a:	687b      	ldr	r3, [r7, #4]
 810a49c:	681b      	ldr	r3, [r3, #0]
 810a49e:	2202      	movs	r2, #2
 810a4a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810a4a2:	687b      	ldr	r3, [r7, #4]
 810a4a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810a4a8:	f043 0204 	orr.w	r2, r3, #4
 810a4ac:	687b      	ldr	r3, [r7, #4]
 810a4ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810a4b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810a4b6:	f003 0304 	and.w	r3, r3, #4
 810a4ba:	2b00      	cmp	r3, #0
 810a4bc:	d011      	beq.n	810a4e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 810a4be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810a4c2:	f003 0301 	and.w	r3, r3, #1
 810a4c6:	2b00      	cmp	r3, #0
 810a4c8:	d00b      	beq.n	810a4e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810a4ca:	687b      	ldr	r3, [r7, #4]
 810a4cc:	681b      	ldr	r3, [r3, #0]
 810a4ce:	2204      	movs	r2, #4
 810a4d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810a4d2:	687b      	ldr	r3, [r7, #4]
 810a4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810a4d8:	f043 0202 	orr.w	r2, r3, #2
 810a4dc:	687b      	ldr	r3, [r7, #4]
 810a4de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810a4e2:	687b      	ldr	r3, [r7, #4]
 810a4e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810a4e8:	2b00      	cmp	r3, #0
 810a4ea:	d006      	beq.n	810a4fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810a4ec:	6878      	ldr	r0, [r7, #4]
 810a4ee:	f7fe fcad 	bl	8108e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a4f2:	687b      	ldr	r3, [r7, #4]
 810a4f4:	2200      	movs	r2, #0
 810a4f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810a4fa:	687b      	ldr	r3, [r7, #4]
 810a4fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a500:	b29b      	uxth	r3, r3
 810a502:	2b00      	cmp	r3, #0
 810a504:	f040 80a3 	bne.w	810a64e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810a508:	687b      	ldr	r3, [r7, #4]
 810a50a:	681b      	ldr	r3, [r3, #0]
 810a50c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a50e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810a510:	e853 3f00 	ldrex	r3, [r3]
 810a514:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 810a516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810a518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a51c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810a520:	687b      	ldr	r3, [r7, #4]
 810a522:	681b      	ldr	r3, [r3, #0]
 810a524:	461a      	mov	r2, r3
 810a526:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810a52a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810a52c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a52e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 810a530:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810a532:	e841 2300 	strex	r3, r2, [r1]
 810a536:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 810a538:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810a53a:	2b00      	cmp	r3, #0
 810a53c:	d1e4      	bne.n	810a508 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810a53e:	687b      	ldr	r3, [r7, #4]
 810a540:	681b      	ldr	r3, [r3, #0]
 810a542:	3308      	adds	r3, #8
 810a544:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810a548:	e853 3f00 	ldrex	r3, [r3]
 810a54c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 810a54e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810a550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810a554:	f023 0301 	bic.w	r3, r3, #1
 810a558:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810a55c:	687b      	ldr	r3, [r7, #4]
 810a55e:	681b      	ldr	r3, [r3, #0]
 810a560:	3308      	adds	r3, #8
 810a562:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810a566:	66ba      	str	r2, [r7, #104]	@ 0x68
 810a568:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a56a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 810a56c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 810a56e:	e841 2300 	strex	r3, r2, [r1]
 810a572:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810a574:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810a576:	2b00      	cmp	r3, #0
 810a578:	d1e1      	bne.n	810a53e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810a57a:	687b      	ldr	r3, [r7, #4]
 810a57c:	2220      	movs	r2, #32
 810a57e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810a582:	687b      	ldr	r3, [r7, #4]
 810a584:	2200      	movs	r2, #0
 810a586:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810a588:	687b      	ldr	r3, [r7, #4]
 810a58a:	2200      	movs	r2, #0
 810a58c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810a58e:	687b      	ldr	r3, [r7, #4]
 810a590:	681b      	ldr	r3, [r3, #0]
 810a592:	4a60      	ldr	r2, [pc, #384]	@ (810a714 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 810a594:	4293      	cmp	r3, r2
 810a596:	d021      	beq.n	810a5dc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810a598:	687b      	ldr	r3, [r7, #4]
 810a59a:	681b      	ldr	r3, [r3, #0]
 810a59c:	685b      	ldr	r3, [r3, #4]
 810a59e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810a5a2:	2b00      	cmp	r3, #0
 810a5a4:	d01a      	beq.n	810a5dc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810a5a6:	687b      	ldr	r3, [r7, #4]
 810a5a8:	681b      	ldr	r3, [r3, #0]
 810a5aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a5ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810a5ae:	e853 3f00 	ldrex	r3, [r3]
 810a5b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810a5b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a5b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810a5ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810a5be:	687b      	ldr	r3, [r7, #4]
 810a5c0:	681b      	ldr	r3, [r3, #0]
 810a5c2:	461a      	mov	r2, r3
 810a5c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810a5c8:	657b      	str	r3, [r7, #84]	@ 0x54
 810a5ca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a5cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810a5ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810a5d0:	e841 2300 	strex	r3, r2, [r1]
 810a5d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810a5d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a5d8:	2b00      	cmp	r3, #0
 810a5da:	d1e4      	bne.n	810a5a6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810a5dc:	687b      	ldr	r3, [r7, #4]
 810a5de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a5e0:	2b01      	cmp	r3, #1
 810a5e2:	d130      	bne.n	810a646 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a5e4:	687b      	ldr	r3, [r7, #4]
 810a5e6:	2200      	movs	r2, #0
 810a5e8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810a5ea:	687b      	ldr	r3, [r7, #4]
 810a5ec:	681b      	ldr	r3, [r3, #0]
 810a5ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a5f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a5f2:	e853 3f00 	ldrex	r3, [r3]
 810a5f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810a5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a5fa:	f023 0310 	bic.w	r3, r3, #16
 810a5fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810a602:	687b      	ldr	r3, [r7, #4]
 810a604:	681b      	ldr	r3, [r3, #0]
 810a606:	461a      	mov	r2, r3
 810a608:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810a60c:	643b      	str	r3, [r7, #64]	@ 0x40
 810a60e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a610:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810a612:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810a614:	e841 2300 	strex	r3, r2, [r1]
 810a618:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810a61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a61c:	2b00      	cmp	r3, #0
 810a61e:	d1e4      	bne.n	810a5ea <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810a620:	687b      	ldr	r3, [r7, #4]
 810a622:	681b      	ldr	r3, [r3, #0]
 810a624:	69db      	ldr	r3, [r3, #28]
 810a626:	f003 0310 	and.w	r3, r3, #16
 810a62a:	2b10      	cmp	r3, #16
 810a62c:	d103      	bne.n	810a636 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810a62e:	687b      	ldr	r3, [r7, #4]
 810a630:	681b      	ldr	r3, [r3, #0]
 810a632:	2210      	movs	r2, #16
 810a634:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810a636:	687b      	ldr	r3, [r7, #4]
 810a638:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810a63c:	4619      	mov	r1, r3
 810a63e:	6878      	ldr	r0, [r7, #4]
 810a640:	f7fe fc0e 	bl	8108e60 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 810a644:	e00e      	b.n	810a664 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 810a646:	6878      	ldr	r0, [r7, #4]
 810a648:	f7f8 f96e 	bl	8102928 <HAL_UART_RxCpltCallback>
        break;
 810a64c:	e00a      	b.n	810a664 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810a64e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 810a652:	2b00      	cmp	r3, #0
 810a654:	d006      	beq.n	810a664 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 810a656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810a65a:	f003 0320 	and.w	r3, r3, #32
 810a65e:	2b00      	cmp	r3, #0
 810a660:	f47f aece 	bne.w	810a400 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810a664:	687b      	ldr	r3, [r7, #4]
 810a666:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a66a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810a66e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 810a672:	2b00      	cmp	r3, #0
 810a674:	d049      	beq.n	810a70a <UART_RxISR_8BIT_FIFOEN+0x352>
 810a676:	687b      	ldr	r3, [r7, #4]
 810a678:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810a67c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 810a680:	429a      	cmp	r2, r3
 810a682:	d242      	bcs.n	810a70a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810a684:	687b      	ldr	r3, [r7, #4]
 810a686:	681b      	ldr	r3, [r3, #0]
 810a688:	3308      	adds	r3, #8
 810a68a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a68c:	6a3b      	ldr	r3, [r7, #32]
 810a68e:	e853 3f00 	ldrex	r3, [r3]
 810a692:	61fb      	str	r3, [r7, #28]
   return(result);
 810a694:	69fb      	ldr	r3, [r7, #28]
 810a696:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810a69a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810a69e:	687b      	ldr	r3, [r7, #4]
 810a6a0:	681b      	ldr	r3, [r3, #0]
 810a6a2:	3308      	adds	r3, #8
 810a6a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810a6a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810a6aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a6ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810a6ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810a6b0:	e841 2300 	strex	r3, r2, [r1]
 810a6b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810a6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a6b8:	2b00      	cmp	r3, #0
 810a6ba:	d1e3      	bne.n	810a684 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 810a6bc:	687b      	ldr	r3, [r7, #4]
 810a6be:	4a16      	ldr	r2, [pc, #88]	@ (810a718 <UART_RxISR_8BIT_FIFOEN+0x360>)
 810a6c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810a6c2:	687b      	ldr	r3, [r7, #4]
 810a6c4:	681b      	ldr	r3, [r3, #0]
 810a6c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a6c8:	68fb      	ldr	r3, [r7, #12]
 810a6ca:	e853 3f00 	ldrex	r3, [r3]
 810a6ce:	60bb      	str	r3, [r7, #8]
   return(result);
 810a6d0:	68bb      	ldr	r3, [r7, #8]
 810a6d2:	f043 0320 	orr.w	r3, r3, #32
 810a6d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810a6da:	687b      	ldr	r3, [r7, #4]
 810a6dc:	681b      	ldr	r3, [r3, #0]
 810a6de:	461a      	mov	r2, r3
 810a6e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810a6e4:	61bb      	str	r3, [r7, #24]
 810a6e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a6e8:	6979      	ldr	r1, [r7, #20]
 810a6ea:	69ba      	ldr	r2, [r7, #24]
 810a6ec:	e841 2300 	strex	r3, r2, [r1]
 810a6f0:	613b      	str	r3, [r7, #16]
   return(result);
 810a6f2:	693b      	ldr	r3, [r7, #16]
 810a6f4:	2b00      	cmp	r3, #0
 810a6f6:	d1e4      	bne.n	810a6c2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810a6f8:	e007      	b.n	810a70a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810a6fa:	687b      	ldr	r3, [r7, #4]
 810a6fc:	681b      	ldr	r3, [r3, #0]
 810a6fe:	699a      	ldr	r2, [r3, #24]
 810a700:	687b      	ldr	r3, [r7, #4]
 810a702:	681b      	ldr	r3, [r3, #0]
 810a704:	f042 0208 	orr.w	r2, r2, #8
 810a708:	619a      	str	r2, [r3, #24]
}
 810a70a:	bf00      	nop
 810a70c:	37b0      	adds	r7, #176	@ 0xb0
 810a70e:	46bd      	mov	sp, r7
 810a710:	bd80      	pop	{r7, pc}
 810a712:	bf00      	nop
 810a714:	58000c00 	.word	0x58000c00
 810a718:	0810a049 	.word	0x0810a049

0810a71c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810a71c:	b580      	push	{r7, lr}
 810a71e:	b0ae      	sub	sp, #184	@ 0xb8
 810a720:	af00      	add	r7, sp, #0
 810a722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 810a724:	687b      	ldr	r3, [r7, #4]
 810a726:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810a72a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810a72e:	687b      	ldr	r3, [r7, #4]
 810a730:	681b      	ldr	r3, [r3, #0]
 810a732:	69db      	ldr	r3, [r3, #28]
 810a734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810a738:	687b      	ldr	r3, [r7, #4]
 810a73a:	681b      	ldr	r3, [r3, #0]
 810a73c:	681b      	ldr	r3, [r3, #0]
 810a73e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810a742:	687b      	ldr	r3, [r7, #4]
 810a744:	681b      	ldr	r3, [r3, #0]
 810a746:	689b      	ldr	r3, [r3, #8]
 810a748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810a74c:	687b      	ldr	r3, [r7, #4]
 810a74e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810a752:	2b22      	cmp	r3, #34	@ 0x22
 810a754:	f040 8187 	bne.w	810aa66 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810a758:	687b      	ldr	r3, [r7, #4]
 810a75a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810a75e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810a762:	e12a      	b.n	810a9ba <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810a764:	687b      	ldr	r3, [r7, #4]
 810a766:	681b      	ldr	r3, [r3, #0]
 810a768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a76a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 810a76e:	687b      	ldr	r3, [r7, #4]
 810a770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 810a776:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 810a77a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 810a77e:	4013      	ands	r3, r2
 810a780:	b29a      	uxth	r2, r3
 810a782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810a786:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 810a788:	687b      	ldr	r3, [r7, #4]
 810a78a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a78c:	1c9a      	adds	r2, r3, #2
 810a78e:	687b      	ldr	r3, [r7, #4]
 810a790:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810a792:	687b      	ldr	r3, [r7, #4]
 810a794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a798:	b29b      	uxth	r3, r3
 810a79a:	3b01      	subs	r3, #1
 810a79c:	b29a      	uxth	r2, r3
 810a79e:	687b      	ldr	r3, [r7, #4]
 810a7a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810a7a4:	687b      	ldr	r3, [r7, #4]
 810a7a6:	681b      	ldr	r3, [r3, #0]
 810a7a8:	69db      	ldr	r3, [r3, #28]
 810a7aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810a7ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810a7b2:	f003 0307 	and.w	r3, r3, #7
 810a7b6:	2b00      	cmp	r3, #0
 810a7b8:	d053      	beq.n	810a862 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810a7ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810a7be:	f003 0301 	and.w	r3, r3, #1
 810a7c2:	2b00      	cmp	r3, #0
 810a7c4:	d011      	beq.n	810a7ea <UART_RxISR_16BIT_FIFOEN+0xce>
 810a7c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810a7ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810a7ce:	2b00      	cmp	r3, #0
 810a7d0:	d00b      	beq.n	810a7ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810a7d2:	687b      	ldr	r3, [r7, #4]
 810a7d4:	681b      	ldr	r3, [r3, #0]
 810a7d6:	2201      	movs	r2, #1
 810a7d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810a7da:	687b      	ldr	r3, [r7, #4]
 810a7dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810a7e0:	f043 0201 	orr.w	r2, r3, #1
 810a7e4:	687b      	ldr	r3, [r7, #4]
 810a7e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810a7ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810a7ee:	f003 0302 	and.w	r3, r3, #2
 810a7f2:	2b00      	cmp	r3, #0
 810a7f4:	d011      	beq.n	810a81a <UART_RxISR_16BIT_FIFOEN+0xfe>
 810a7f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810a7fa:	f003 0301 	and.w	r3, r3, #1
 810a7fe:	2b00      	cmp	r3, #0
 810a800:	d00b      	beq.n	810a81a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810a802:	687b      	ldr	r3, [r7, #4]
 810a804:	681b      	ldr	r3, [r3, #0]
 810a806:	2202      	movs	r2, #2
 810a808:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810a80a:	687b      	ldr	r3, [r7, #4]
 810a80c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810a810:	f043 0204 	orr.w	r2, r3, #4
 810a814:	687b      	ldr	r3, [r7, #4]
 810a816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810a81a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810a81e:	f003 0304 	and.w	r3, r3, #4
 810a822:	2b00      	cmp	r3, #0
 810a824:	d011      	beq.n	810a84a <UART_RxISR_16BIT_FIFOEN+0x12e>
 810a826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810a82a:	f003 0301 	and.w	r3, r3, #1
 810a82e:	2b00      	cmp	r3, #0
 810a830:	d00b      	beq.n	810a84a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810a832:	687b      	ldr	r3, [r7, #4]
 810a834:	681b      	ldr	r3, [r3, #0]
 810a836:	2204      	movs	r2, #4
 810a838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810a83a:	687b      	ldr	r3, [r7, #4]
 810a83c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810a840:	f043 0202 	orr.w	r2, r3, #2
 810a844:	687b      	ldr	r3, [r7, #4]
 810a846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810a84a:	687b      	ldr	r3, [r7, #4]
 810a84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810a850:	2b00      	cmp	r3, #0
 810a852:	d006      	beq.n	810a862 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810a854:	6878      	ldr	r0, [r7, #4]
 810a856:	f7fe faf9 	bl	8108e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a85a:	687b      	ldr	r3, [r7, #4]
 810a85c:	2200      	movs	r2, #0
 810a85e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810a862:	687b      	ldr	r3, [r7, #4]
 810a864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a868:	b29b      	uxth	r3, r3
 810a86a:	2b00      	cmp	r3, #0
 810a86c:	f040 80a5 	bne.w	810a9ba <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810a870:	687b      	ldr	r3, [r7, #4]
 810a872:	681b      	ldr	r3, [r3, #0]
 810a874:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810a878:	e853 3f00 	ldrex	r3, [r3]
 810a87c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810a87e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810a880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810a888:	687b      	ldr	r3, [r7, #4]
 810a88a:	681b      	ldr	r3, [r3, #0]
 810a88c:	461a      	mov	r2, r3
 810a88e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810a892:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810a896:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a898:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810a89a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810a89e:	e841 2300 	strex	r3, r2, [r1]
 810a8a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810a8a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810a8a6:	2b00      	cmp	r3, #0
 810a8a8:	d1e2      	bne.n	810a870 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810a8aa:	687b      	ldr	r3, [r7, #4]
 810a8ac:	681b      	ldr	r3, [r3, #0]
 810a8ae:	3308      	adds	r3, #8
 810a8b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a8b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810a8b4:	e853 3f00 	ldrex	r3, [r3]
 810a8b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810a8ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810a8bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810a8c0:	f023 0301 	bic.w	r3, r3, #1
 810a8c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810a8c8:	687b      	ldr	r3, [r7, #4]
 810a8ca:	681b      	ldr	r3, [r3, #0]
 810a8cc:	3308      	adds	r3, #8
 810a8ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 810a8d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810a8d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a8d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810a8d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810a8da:	e841 2300 	strex	r3, r2, [r1]
 810a8de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810a8e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810a8e2:	2b00      	cmp	r3, #0
 810a8e4:	d1e1      	bne.n	810a8aa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810a8e6:	687b      	ldr	r3, [r7, #4]
 810a8e8:	2220      	movs	r2, #32
 810a8ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810a8ee:	687b      	ldr	r3, [r7, #4]
 810a8f0:	2200      	movs	r2, #0
 810a8f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810a8f4:	687b      	ldr	r3, [r7, #4]
 810a8f6:	2200      	movs	r2, #0
 810a8f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810a8fa:	687b      	ldr	r3, [r7, #4]
 810a8fc:	681b      	ldr	r3, [r3, #0]
 810a8fe:	4a60      	ldr	r2, [pc, #384]	@ (810aa80 <UART_RxISR_16BIT_FIFOEN+0x364>)
 810a900:	4293      	cmp	r3, r2
 810a902:	d021      	beq.n	810a948 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810a904:	687b      	ldr	r3, [r7, #4]
 810a906:	681b      	ldr	r3, [r3, #0]
 810a908:	685b      	ldr	r3, [r3, #4]
 810a90a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810a90e:	2b00      	cmp	r3, #0
 810a910:	d01a      	beq.n	810a948 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810a912:	687b      	ldr	r3, [r7, #4]
 810a914:	681b      	ldr	r3, [r3, #0]
 810a916:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a91a:	e853 3f00 	ldrex	r3, [r3]
 810a91e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810a920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810a922:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810a926:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810a92a:	687b      	ldr	r3, [r7, #4]
 810a92c:	681b      	ldr	r3, [r3, #0]
 810a92e:	461a      	mov	r2, r3
 810a930:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 810a934:	65bb      	str	r3, [r7, #88]	@ 0x58
 810a936:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a938:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810a93a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810a93c:	e841 2300 	strex	r3, r2, [r1]
 810a940:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810a942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810a944:	2b00      	cmp	r3, #0
 810a946:	d1e4      	bne.n	810a912 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810a948:	687b      	ldr	r3, [r7, #4]
 810a94a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a94c:	2b01      	cmp	r3, #1
 810a94e:	d130      	bne.n	810a9b2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a950:	687b      	ldr	r3, [r7, #4]
 810a952:	2200      	movs	r2, #0
 810a954:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810a956:	687b      	ldr	r3, [r7, #4]
 810a958:	681b      	ldr	r3, [r3, #0]
 810a95a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a95e:	e853 3f00 	ldrex	r3, [r3]
 810a962:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810a964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a966:	f023 0310 	bic.w	r3, r3, #16
 810a96a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810a96e:	687b      	ldr	r3, [r7, #4]
 810a970:	681b      	ldr	r3, [r3, #0]
 810a972:	461a      	mov	r2, r3
 810a974:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810a978:	647b      	str	r3, [r7, #68]	@ 0x44
 810a97a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a97c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810a97e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810a980:	e841 2300 	strex	r3, r2, [r1]
 810a984:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810a986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a988:	2b00      	cmp	r3, #0
 810a98a:	d1e4      	bne.n	810a956 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810a98c:	687b      	ldr	r3, [r7, #4]
 810a98e:	681b      	ldr	r3, [r3, #0]
 810a990:	69db      	ldr	r3, [r3, #28]
 810a992:	f003 0310 	and.w	r3, r3, #16
 810a996:	2b10      	cmp	r3, #16
 810a998:	d103      	bne.n	810a9a2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810a99a:	687b      	ldr	r3, [r7, #4]
 810a99c:	681b      	ldr	r3, [r3, #0]
 810a99e:	2210      	movs	r2, #16
 810a9a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810a9a2:	687b      	ldr	r3, [r7, #4]
 810a9a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810a9a8:	4619      	mov	r1, r3
 810a9aa:	6878      	ldr	r0, [r7, #4]
 810a9ac:	f7fe fa58 	bl	8108e60 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 810a9b0:	e00e      	b.n	810a9d0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 810a9b2:	6878      	ldr	r0, [r7, #4]
 810a9b4:	f7f7 ffb8 	bl	8102928 <HAL_UART_RxCpltCallback>
        break;
 810a9b8:	e00a      	b.n	810a9d0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810a9ba:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 810a9be:	2b00      	cmp	r3, #0
 810a9c0:	d006      	beq.n	810a9d0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 810a9c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810a9c6:	f003 0320 	and.w	r3, r3, #32
 810a9ca:	2b00      	cmp	r3, #0
 810a9cc:	f47f aeca 	bne.w	810a764 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810a9d0:	687b      	ldr	r3, [r7, #4]
 810a9d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a9d6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810a9da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 810a9de:	2b00      	cmp	r3, #0
 810a9e0:	d049      	beq.n	810aa76 <UART_RxISR_16BIT_FIFOEN+0x35a>
 810a9e2:	687b      	ldr	r3, [r7, #4]
 810a9e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810a9e8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 810a9ec:	429a      	cmp	r2, r3
 810a9ee:	d242      	bcs.n	810aa76 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810a9f0:	687b      	ldr	r3, [r7, #4]
 810a9f2:	681b      	ldr	r3, [r3, #0]
 810a9f4:	3308      	adds	r3, #8
 810a9f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a9fa:	e853 3f00 	ldrex	r3, [r3]
 810a9fe:	623b      	str	r3, [r7, #32]
   return(result);
 810aa00:	6a3b      	ldr	r3, [r7, #32]
 810aa02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810aa06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810aa0a:	687b      	ldr	r3, [r7, #4]
 810aa0c:	681b      	ldr	r3, [r3, #0]
 810aa0e:	3308      	adds	r3, #8
 810aa10:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 810aa14:	633a      	str	r2, [r7, #48]	@ 0x30
 810aa16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810aa1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810aa1c:	e841 2300 	strex	r3, r2, [r1]
 810aa20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810aa22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810aa24:	2b00      	cmp	r3, #0
 810aa26:	d1e3      	bne.n	810a9f0 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 810aa28:	687b      	ldr	r3, [r7, #4]
 810aa2a:	4a16      	ldr	r2, [pc, #88]	@ (810aa84 <UART_RxISR_16BIT_FIFOEN+0x368>)
 810aa2c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810aa2e:	687b      	ldr	r3, [r7, #4]
 810aa30:	681b      	ldr	r3, [r3, #0]
 810aa32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa34:	693b      	ldr	r3, [r7, #16]
 810aa36:	e853 3f00 	ldrex	r3, [r3]
 810aa3a:	60fb      	str	r3, [r7, #12]
   return(result);
 810aa3c:	68fb      	ldr	r3, [r7, #12]
 810aa3e:	f043 0320 	orr.w	r3, r3, #32
 810aa42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810aa46:	687b      	ldr	r3, [r7, #4]
 810aa48:	681b      	ldr	r3, [r3, #0]
 810aa4a:	461a      	mov	r2, r3
 810aa4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810aa50:	61fb      	str	r3, [r7, #28]
 810aa52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa54:	69b9      	ldr	r1, [r7, #24]
 810aa56:	69fa      	ldr	r2, [r7, #28]
 810aa58:	e841 2300 	strex	r3, r2, [r1]
 810aa5c:	617b      	str	r3, [r7, #20]
   return(result);
 810aa5e:	697b      	ldr	r3, [r7, #20]
 810aa60:	2b00      	cmp	r3, #0
 810aa62:	d1e4      	bne.n	810aa2e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810aa64:	e007      	b.n	810aa76 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810aa66:	687b      	ldr	r3, [r7, #4]
 810aa68:	681b      	ldr	r3, [r3, #0]
 810aa6a:	699a      	ldr	r2, [r3, #24]
 810aa6c:	687b      	ldr	r3, [r7, #4]
 810aa6e:	681b      	ldr	r3, [r3, #0]
 810aa70:	f042 0208 	orr.w	r2, r2, #8
 810aa74:	619a      	str	r2, [r3, #24]
}
 810aa76:	bf00      	nop
 810aa78:	37b8      	adds	r7, #184	@ 0xb8
 810aa7a:	46bd      	mov	sp, r7
 810aa7c:	bd80      	pop	{r7, pc}
 810aa7e:	bf00      	nop
 810aa80:	58000c00 	.word	0x58000c00
 810aa84:	0810a201 	.word	0x0810a201

0810aa88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810aa88:	b480      	push	{r7}
 810aa8a:	b083      	sub	sp, #12
 810aa8c:	af00      	add	r7, sp, #0
 810aa8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810aa90:	bf00      	nop
 810aa92:	370c      	adds	r7, #12
 810aa94:	46bd      	mov	sp, r7
 810aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa9a:	4770      	bx	lr

0810aa9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810aa9c:	b480      	push	{r7}
 810aa9e:	b083      	sub	sp, #12
 810aaa0:	af00      	add	r7, sp, #0
 810aaa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810aaa4:	bf00      	nop
 810aaa6:	370c      	adds	r7, #12
 810aaa8:	46bd      	mov	sp, r7
 810aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aaae:	4770      	bx	lr

0810aab0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810aab0:	b480      	push	{r7}
 810aab2:	b083      	sub	sp, #12
 810aab4:	af00      	add	r7, sp, #0
 810aab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810aab8:	bf00      	nop
 810aaba:	370c      	adds	r7, #12
 810aabc:	46bd      	mov	sp, r7
 810aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aac2:	4770      	bx	lr

0810aac4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810aac4:	b480      	push	{r7}
 810aac6:	b085      	sub	sp, #20
 810aac8:	af00      	add	r7, sp, #0
 810aaca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810aacc:	687b      	ldr	r3, [r7, #4]
 810aace:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810aad2:	2b01      	cmp	r3, #1
 810aad4:	d101      	bne.n	810aada <HAL_UARTEx_DisableFifoMode+0x16>
 810aad6:	2302      	movs	r3, #2
 810aad8:	e027      	b.n	810ab2a <HAL_UARTEx_DisableFifoMode+0x66>
 810aada:	687b      	ldr	r3, [r7, #4]
 810aadc:	2201      	movs	r2, #1
 810aade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810aae2:	687b      	ldr	r3, [r7, #4]
 810aae4:	2224      	movs	r2, #36	@ 0x24
 810aae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810aaea:	687b      	ldr	r3, [r7, #4]
 810aaec:	681b      	ldr	r3, [r3, #0]
 810aaee:	681b      	ldr	r3, [r3, #0]
 810aaf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810aaf2:	687b      	ldr	r3, [r7, #4]
 810aaf4:	681b      	ldr	r3, [r3, #0]
 810aaf6:	681a      	ldr	r2, [r3, #0]
 810aaf8:	687b      	ldr	r3, [r7, #4]
 810aafa:	681b      	ldr	r3, [r3, #0]
 810aafc:	f022 0201 	bic.w	r2, r2, #1
 810ab00:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810ab02:	68fb      	ldr	r3, [r7, #12]
 810ab04:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810ab08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810ab0a:	687b      	ldr	r3, [r7, #4]
 810ab0c:	2200      	movs	r2, #0
 810ab0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ab10:	687b      	ldr	r3, [r7, #4]
 810ab12:	681b      	ldr	r3, [r3, #0]
 810ab14:	68fa      	ldr	r2, [r7, #12]
 810ab16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ab18:	687b      	ldr	r3, [r7, #4]
 810ab1a:	2220      	movs	r2, #32
 810ab1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ab20:	687b      	ldr	r3, [r7, #4]
 810ab22:	2200      	movs	r2, #0
 810ab24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ab28:	2300      	movs	r3, #0
}
 810ab2a:	4618      	mov	r0, r3
 810ab2c:	3714      	adds	r7, #20
 810ab2e:	46bd      	mov	sp, r7
 810ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab34:	4770      	bx	lr

0810ab36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ab36:	b580      	push	{r7, lr}
 810ab38:	b084      	sub	sp, #16
 810ab3a:	af00      	add	r7, sp, #0
 810ab3c:	6078      	str	r0, [r7, #4]
 810ab3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ab40:	687b      	ldr	r3, [r7, #4]
 810ab42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810ab46:	2b01      	cmp	r3, #1
 810ab48:	d101      	bne.n	810ab4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810ab4a:	2302      	movs	r3, #2
 810ab4c:	e02d      	b.n	810abaa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810ab4e:	687b      	ldr	r3, [r7, #4]
 810ab50:	2201      	movs	r2, #1
 810ab52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ab56:	687b      	ldr	r3, [r7, #4]
 810ab58:	2224      	movs	r2, #36	@ 0x24
 810ab5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ab5e:	687b      	ldr	r3, [r7, #4]
 810ab60:	681b      	ldr	r3, [r3, #0]
 810ab62:	681b      	ldr	r3, [r3, #0]
 810ab64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ab66:	687b      	ldr	r3, [r7, #4]
 810ab68:	681b      	ldr	r3, [r3, #0]
 810ab6a:	681a      	ldr	r2, [r3, #0]
 810ab6c:	687b      	ldr	r3, [r7, #4]
 810ab6e:	681b      	ldr	r3, [r3, #0]
 810ab70:	f022 0201 	bic.w	r2, r2, #1
 810ab74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810ab76:	687b      	ldr	r3, [r7, #4]
 810ab78:	681b      	ldr	r3, [r3, #0]
 810ab7a:	689b      	ldr	r3, [r3, #8]
 810ab7c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810ab80:	687b      	ldr	r3, [r7, #4]
 810ab82:	681b      	ldr	r3, [r3, #0]
 810ab84:	683a      	ldr	r2, [r7, #0]
 810ab86:	430a      	orrs	r2, r1
 810ab88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ab8a:	6878      	ldr	r0, [r7, #4]
 810ab8c:	f000 f850 	bl	810ac30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ab90:	687b      	ldr	r3, [r7, #4]
 810ab92:	681b      	ldr	r3, [r3, #0]
 810ab94:	68fa      	ldr	r2, [r7, #12]
 810ab96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ab98:	687b      	ldr	r3, [r7, #4]
 810ab9a:	2220      	movs	r2, #32
 810ab9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810aba0:	687b      	ldr	r3, [r7, #4]
 810aba2:	2200      	movs	r2, #0
 810aba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810aba8:	2300      	movs	r3, #0
}
 810abaa:	4618      	mov	r0, r3
 810abac:	3710      	adds	r7, #16
 810abae:	46bd      	mov	sp, r7
 810abb0:	bd80      	pop	{r7, pc}

0810abb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810abb2:	b580      	push	{r7, lr}
 810abb4:	b084      	sub	sp, #16
 810abb6:	af00      	add	r7, sp, #0
 810abb8:	6078      	str	r0, [r7, #4]
 810abba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810abbc:	687b      	ldr	r3, [r7, #4]
 810abbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810abc2:	2b01      	cmp	r3, #1
 810abc4:	d101      	bne.n	810abca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810abc6:	2302      	movs	r3, #2
 810abc8:	e02d      	b.n	810ac26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810abca:	687b      	ldr	r3, [r7, #4]
 810abcc:	2201      	movs	r2, #1
 810abce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810abd2:	687b      	ldr	r3, [r7, #4]
 810abd4:	2224      	movs	r2, #36	@ 0x24
 810abd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810abda:	687b      	ldr	r3, [r7, #4]
 810abdc:	681b      	ldr	r3, [r3, #0]
 810abde:	681b      	ldr	r3, [r3, #0]
 810abe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810abe2:	687b      	ldr	r3, [r7, #4]
 810abe4:	681b      	ldr	r3, [r3, #0]
 810abe6:	681a      	ldr	r2, [r3, #0]
 810abe8:	687b      	ldr	r3, [r7, #4]
 810abea:	681b      	ldr	r3, [r3, #0]
 810abec:	f022 0201 	bic.w	r2, r2, #1
 810abf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810abf2:	687b      	ldr	r3, [r7, #4]
 810abf4:	681b      	ldr	r3, [r3, #0]
 810abf6:	689b      	ldr	r3, [r3, #8]
 810abf8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810abfc:	687b      	ldr	r3, [r7, #4]
 810abfe:	681b      	ldr	r3, [r3, #0]
 810ac00:	683a      	ldr	r2, [r7, #0]
 810ac02:	430a      	orrs	r2, r1
 810ac04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ac06:	6878      	ldr	r0, [r7, #4]
 810ac08:	f000 f812 	bl	810ac30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ac0c:	687b      	ldr	r3, [r7, #4]
 810ac0e:	681b      	ldr	r3, [r3, #0]
 810ac10:	68fa      	ldr	r2, [r7, #12]
 810ac12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ac14:	687b      	ldr	r3, [r7, #4]
 810ac16:	2220      	movs	r2, #32
 810ac18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ac1c:	687b      	ldr	r3, [r7, #4]
 810ac1e:	2200      	movs	r2, #0
 810ac20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ac24:	2300      	movs	r3, #0
}
 810ac26:	4618      	mov	r0, r3
 810ac28:	3710      	adds	r7, #16
 810ac2a:	46bd      	mov	sp, r7
 810ac2c:	bd80      	pop	{r7, pc}
	...

0810ac30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810ac30:	b480      	push	{r7}
 810ac32:	b085      	sub	sp, #20
 810ac34:	af00      	add	r7, sp, #0
 810ac36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810ac38:	687b      	ldr	r3, [r7, #4]
 810ac3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810ac3c:	2b00      	cmp	r3, #0
 810ac3e:	d108      	bne.n	810ac52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810ac40:	687b      	ldr	r3, [r7, #4]
 810ac42:	2201      	movs	r2, #1
 810ac44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810ac48:	687b      	ldr	r3, [r7, #4]
 810ac4a:	2201      	movs	r2, #1
 810ac4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810ac50:	e031      	b.n	810acb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810ac52:	2310      	movs	r3, #16
 810ac54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810ac56:	2310      	movs	r3, #16
 810ac58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810ac5a:	687b      	ldr	r3, [r7, #4]
 810ac5c:	681b      	ldr	r3, [r3, #0]
 810ac5e:	689b      	ldr	r3, [r3, #8]
 810ac60:	0e5b      	lsrs	r3, r3, #25
 810ac62:	b2db      	uxtb	r3, r3
 810ac64:	f003 0307 	and.w	r3, r3, #7
 810ac68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810ac6a:	687b      	ldr	r3, [r7, #4]
 810ac6c:	681b      	ldr	r3, [r3, #0]
 810ac6e:	689b      	ldr	r3, [r3, #8]
 810ac70:	0f5b      	lsrs	r3, r3, #29
 810ac72:	b2db      	uxtb	r3, r3
 810ac74:	f003 0307 	and.w	r3, r3, #7
 810ac78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ac7a:	7bbb      	ldrb	r3, [r7, #14]
 810ac7c:	7b3a      	ldrb	r2, [r7, #12]
 810ac7e:	4911      	ldr	r1, [pc, #68]	@ (810acc4 <UARTEx_SetNbDataToProcess+0x94>)
 810ac80:	5c8a      	ldrb	r2, [r1, r2]
 810ac82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810ac86:	7b3a      	ldrb	r2, [r7, #12]
 810ac88:	490f      	ldr	r1, [pc, #60]	@ (810acc8 <UARTEx_SetNbDataToProcess+0x98>)
 810ac8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ac8c:	fb93 f3f2 	sdiv	r3, r3, r2
 810ac90:	b29a      	uxth	r2, r3
 810ac92:	687b      	ldr	r3, [r7, #4]
 810ac94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ac98:	7bfb      	ldrb	r3, [r7, #15]
 810ac9a:	7b7a      	ldrb	r2, [r7, #13]
 810ac9c:	4909      	ldr	r1, [pc, #36]	@ (810acc4 <UARTEx_SetNbDataToProcess+0x94>)
 810ac9e:	5c8a      	ldrb	r2, [r1, r2]
 810aca0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810aca4:	7b7a      	ldrb	r2, [r7, #13]
 810aca6:	4908      	ldr	r1, [pc, #32]	@ (810acc8 <UARTEx_SetNbDataToProcess+0x98>)
 810aca8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810acaa:	fb93 f3f2 	sdiv	r3, r3, r2
 810acae:	b29a      	uxth	r2, r3
 810acb0:	687b      	ldr	r3, [r7, #4]
 810acb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810acb6:	bf00      	nop
 810acb8:	3714      	adds	r7, #20
 810acba:	46bd      	mov	sp, r7
 810acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810acc0:	4770      	bx	lr
 810acc2:	bf00      	nop
 810acc4:	0810f230 	.word	0x0810f230
 810acc8:	0810f238 	.word	0x0810f238

0810accc <__NVIC_SetPriority>:
{
 810accc:	b480      	push	{r7}
 810acce:	b083      	sub	sp, #12
 810acd0:	af00      	add	r7, sp, #0
 810acd2:	4603      	mov	r3, r0
 810acd4:	6039      	str	r1, [r7, #0]
 810acd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810acd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810acdc:	2b00      	cmp	r3, #0
 810acde:	db0a      	blt.n	810acf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810ace0:	683b      	ldr	r3, [r7, #0]
 810ace2:	b2da      	uxtb	r2, r3
 810ace4:	490c      	ldr	r1, [pc, #48]	@ (810ad18 <__NVIC_SetPriority+0x4c>)
 810ace6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810acea:	0112      	lsls	r2, r2, #4
 810acec:	b2d2      	uxtb	r2, r2
 810acee:	440b      	add	r3, r1
 810acf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810acf4:	e00a      	b.n	810ad0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810acf6:	683b      	ldr	r3, [r7, #0]
 810acf8:	b2da      	uxtb	r2, r3
 810acfa:	4908      	ldr	r1, [pc, #32]	@ (810ad1c <__NVIC_SetPriority+0x50>)
 810acfc:	88fb      	ldrh	r3, [r7, #6]
 810acfe:	f003 030f 	and.w	r3, r3, #15
 810ad02:	3b04      	subs	r3, #4
 810ad04:	0112      	lsls	r2, r2, #4
 810ad06:	b2d2      	uxtb	r2, r2
 810ad08:	440b      	add	r3, r1
 810ad0a:	761a      	strb	r2, [r3, #24]
}
 810ad0c:	bf00      	nop
 810ad0e:	370c      	adds	r7, #12
 810ad10:	46bd      	mov	sp, r7
 810ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad16:	4770      	bx	lr
 810ad18:	e000e100 	.word	0xe000e100
 810ad1c:	e000ed00 	.word	0xe000ed00

0810ad20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810ad20:	b580      	push	{r7, lr}
 810ad22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810ad24:	2100      	movs	r1, #0
 810ad26:	f06f 0004 	mvn.w	r0, #4
 810ad2a:	f7ff ffcf 	bl	810accc <__NVIC_SetPriority>
#endif
}
 810ad2e:	bf00      	nop
 810ad30:	bd80      	pop	{r7, pc}
	...

0810ad34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810ad34:	b480      	push	{r7}
 810ad36:	b083      	sub	sp, #12
 810ad38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810ad3a:	f3ef 8305 	mrs	r3, IPSR
 810ad3e:	603b      	str	r3, [r7, #0]
  return(result);
 810ad40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810ad42:	2b00      	cmp	r3, #0
 810ad44:	d003      	beq.n	810ad4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810ad46:	f06f 0305 	mvn.w	r3, #5
 810ad4a:	607b      	str	r3, [r7, #4]
 810ad4c:	e00c      	b.n	810ad68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810ad4e:	4b0a      	ldr	r3, [pc, #40]	@ (810ad78 <osKernelInitialize+0x44>)
 810ad50:	681b      	ldr	r3, [r3, #0]
 810ad52:	2b00      	cmp	r3, #0
 810ad54:	d105      	bne.n	810ad62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810ad56:	4b08      	ldr	r3, [pc, #32]	@ (810ad78 <osKernelInitialize+0x44>)
 810ad58:	2201      	movs	r2, #1
 810ad5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810ad5c:	2300      	movs	r3, #0
 810ad5e:	607b      	str	r3, [r7, #4]
 810ad60:	e002      	b.n	810ad68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810ad62:	f04f 33ff 	mov.w	r3, #4294967295
 810ad66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810ad68:	687b      	ldr	r3, [r7, #4]
}
 810ad6a:	4618      	mov	r0, r3
 810ad6c:	370c      	adds	r7, #12
 810ad6e:	46bd      	mov	sp, r7
 810ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad74:	4770      	bx	lr
 810ad76:	bf00      	nop
 810ad78:	100004ac 	.word	0x100004ac

0810ad7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810ad7c:	b580      	push	{r7, lr}
 810ad7e:	b082      	sub	sp, #8
 810ad80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810ad82:	f3ef 8305 	mrs	r3, IPSR
 810ad86:	603b      	str	r3, [r7, #0]
  return(result);
 810ad88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810ad8a:	2b00      	cmp	r3, #0
 810ad8c:	d003      	beq.n	810ad96 <osKernelStart+0x1a>
    stat = osErrorISR;
 810ad8e:	f06f 0305 	mvn.w	r3, #5
 810ad92:	607b      	str	r3, [r7, #4]
 810ad94:	e010      	b.n	810adb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810ad96:	4b0b      	ldr	r3, [pc, #44]	@ (810adc4 <osKernelStart+0x48>)
 810ad98:	681b      	ldr	r3, [r3, #0]
 810ad9a:	2b01      	cmp	r3, #1
 810ad9c:	d109      	bne.n	810adb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810ad9e:	f7ff ffbf 	bl	810ad20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810ada2:	4b08      	ldr	r3, [pc, #32]	@ (810adc4 <osKernelStart+0x48>)
 810ada4:	2202      	movs	r2, #2
 810ada6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810ada8:	f001 fcbc 	bl	810c724 <vTaskStartScheduler>
      stat = osOK;
 810adac:	2300      	movs	r3, #0
 810adae:	607b      	str	r3, [r7, #4]
 810adb0:	e002      	b.n	810adb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810adb2:	f04f 33ff 	mov.w	r3, #4294967295
 810adb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810adb8:	687b      	ldr	r3, [r7, #4]
}
 810adba:	4618      	mov	r0, r3
 810adbc:	3708      	adds	r7, #8
 810adbe:	46bd      	mov	sp, r7
 810adc0:	bd80      	pop	{r7, pc}
 810adc2:	bf00      	nop
 810adc4:	100004ac 	.word	0x100004ac

0810adc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810adc8:	b580      	push	{r7, lr}
 810adca:	b08e      	sub	sp, #56	@ 0x38
 810adcc:	af04      	add	r7, sp, #16
 810adce:	60f8      	str	r0, [r7, #12]
 810add0:	60b9      	str	r1, [r7, #8]
 810add2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810add4:	2300      	movs	r3, #0
 810add6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810add8:	f3ef 8305 	mrs	r3, IPSR
 810addc:	617b      	str	r3, [r7, #20]
  return(result);
 810adde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810ade0:	2b00      	cmp	r3, #0
 810ade2:	d17e      	bne.n	810aee2 <osThreadNew+0x11a>
 810ade4:	68fb      	ldr	r3, [r7, #12]
 810ade6:	2b00      	cmp	r3, #0
 810ade8:	d07b      	beq.n	810aee2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810adea:	2380      	movs	r3, #128	@ 0x80
 810adec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810adee:	2318      	movs	r3, #24
 810adf0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810adf2:	2300      	movs	r3, #0
 810adf4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810adf6:	f04f 33ff 	mov.w	r3, #4294967295
 810adfa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810adfc:	687b      	ldr	r3, [r7, #4]
 810adfe:	2b00      	cmp	r3, #0
 810ae00:	d045      	beq.n	810ae8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810ae02:	687b      	ldr	r3, [r7, #4]
 810ae04:	681b      	ldr	r3, [r3, #0]
 810ae06:	2b00      	cmp	r3, #0
 810ae08:	d002      	beq.n	810ae10 <osThreadNew+0x48>
        name = attr->name;
 810ae0a:	687b      	ldr	r3, [r7, #4]
 810ae0c:	681b      	ldr	r3, [r3, #0]
 810ae0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810ae10:	687b      	ldr	r3, [r7, #4]
 810ae12:	699b      	ldr	r3, [r3, #24]
 810ae14:	2b00      	cmp	r3, #0
 810ae16:	d002      	beq.n	810ae1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810ae18:	687b      	ldr	r3, [r7, #4]
 810ae1a:	699b      	ldr	r3, [r3, #24]
 810ae1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810ae1e:	69fb      	ldr	r3, [r7, #28]
 810ae20:	2b00      	cmp	r3, #0
 810ae22:	d008      	beq.n	810ae36 <osThreadNew+0x6e>
 810ae24:	69fb      	ldr	r3, [r7, #28]
 810ae26:	2b38      	cmp	r3, #56	@ 0x38
 810ae28:	d805      	bhi.n	810ae36 <osThreadNew+0x6e>
 810ae2a:	687b      	ldr	r3, [r7, #4]
 810ae2c:	685b      	ldr	r3, [r3, #4]
 810ae2e:	f003 0301 	and.w	r3, r3, #1
 810ae32:	2b00      	cmp	r3, #0
 810ae34:	d001      	beq.n	810ae3a <osThreadNew+0x72>
        return (NULL);
 810ae36:	2300      	movs	r3, #0
 810ae38:	e054      	b.n	810aee4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810ae3a:	687b      	ldr	r3, [r7, #4]
 810ae3c:	695b      	ldr	r3, [r3, #20]
 810ae3e:	2b00      	cmp	r3, #0
 810ae40:	d003      	beq.n	810ae4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810ae42:	687b      	ldr	r3, [r7, #4]
 810ae44:	695b      	ldr	r3, [r3, #20]
 810ae46:	089b      	lsrs	r3, r3, #2
 810ae48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810ae4a:	687b      	ldr	r3, [r7, #4]
 810ae4c:	689b      	ldr	r3, [r3, #8]
 810ae4e:	2b00      	cmp	r3, #0
 810ae50:	d00e      	beq.n	810ae70 <osThreadNew+0xa8>
 810ae52:	687b      	ldr	r3, [r7, #4]
 810ae54:	68db      	ldr	r3, [r3, #12]
 810ae56:	2ba7      	cmp	r3, #167	@ 0xa7
 810ae58:	d90a      	bls.n	810ae70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810ae5a:	687b      	ldr	r3, [r7, #4]
 810ae5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810ae5e:	2b00      	cmp	r3, #0
 810ae60:	d006      	beq.n	810ae70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810ae62:	687b      	ldr	r3, [r7, #4]
 810ae64:	695b      	ldr	r3, [r3, #20]
 810ae66:	2b00      	cmp	r3, #0
 810ae68:	d002      	beq.n	810ae70 <osThreadNew+0xa8>
        mem = 1;
 810ae6a:	2301      	movs	r3, #1
 810ae6c:	61bb      	str	r3, [r7, #24]
 810ae6e:	e010      	b.n	810ae92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810ae70:	687b      	ldr	r3, [r7, #4]
 810ae72:	689b      	ldr	r3, [r3, #8]
 810ae74:	2b00      	cmp	r3, #0
 810ae76:	d10c      	bne.n	810ae92 <osThreadNew+0xca>
 810ae78:	687b      	ldr	r3, [r7, #4]
 810ae7a:	68db      	ldr	r3, [r3, #12]
 810ae7c:	2b00      	cmp	r3, #0
 810ae7e:	d108      	bne.n	810ae92 <osThreadNew+0xca>
 810ae80:	687b      	ldr	r3, [r7, #4]
 810ae82:	691b      	ldr	r3, [r3, #16]
 810ae84:	2b00      	cmp	r3, #0
 810ae86:	d104      	bne.n	810ae92 <osThreadNew+0xca>
          mem = 0;
 810ae88:	2300      	movs	r3, #0
 810ae8a:	61bb      	str	r3, [r7, #24]
 810ae8c:	e001      	b.n	810ae92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810ae8e:	2300      	movs	r3, #0
 810ae90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810ae92:	69bb      	ldr	r3, [r7, #24]
 810ae94:	2b01      	cmp	r3, #1
 810ae96:	d110      	bne.n	810aeba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810ae98:	687b      	ldr	r3, [r7, #4]
 810ae9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810ae9c:	687a      	ldr	r2, [r7, #4]
 810ae9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810aea0:	9202      	str	r2, [sp, #8]
 810aea2:	9301      	str	r3, [sp, #4]
 810aea4:	69fb      	ldr	r3, [r7, #28]
 810aea6:	9300      	str	r3, [sp, #0]
 810aea8:	68bb      	ldr	r3, [r7, #8]
 810aeaa:	6a3a      	ldr	r2, [r7, #32]
 810aeac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810aeae:	68f8      	ldr	r0, [r7, #12]
 810aeb0:	f001 fa44 	bl	810c33c <xTaskCreateStatic>
 810aeb4:	4603      	mov	r3, r0
 810aeb6:	613b      	str	r3, [r7, #16]
 810aeb8:	e013      	b.n	810aee2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810aeba:	69bb      	ldr	r3, [r7, #24]
 810aebc:	2b00      	cmp	r3, #0
 810aebe:	d110      	bne.n	810aee2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810aec0:	6a3b      	ldr	r3, [r7, #32]
 810aec2:	b29a      	uxth	r2, r3
 810aec4:	f107 0310 	add.w	r3, r7, #16
 810aec8:	9301      	str	r3, [sp, #4]
 810aeca:	69fb      	ldr	r3, [r7, #28]
 810aecc:	9300      	str	r3, [sp, #0]
 810aece:	68bb      	ldr	r3, [r7, #8]
 810aed0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810aed2:	68f8      	ldr	r0, [r7, #12]
 810aed4:	f001 fa92 	bl	810c3fc <xTaskCreate>
 810aed8:	4603      	mov	r3, r0
 810aeda:	2b01      	cmp	r3, #1
 810aedc:	d001      	beq.n	810aee2 <osThreadNew+0x11a>
            hTask = NULL;
 810aede:	2300      	movs	r3, #0
 810aee0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810aee2:	693b      	ldr	r3, [r7, #16]
}
 810aee4:	4618      	mov	r0, r3
 810aee6:	3728      	adds	r7, #40	@ 0x28
 810aee8:	46bd      	mov	sp, r7
 810aeea:	bd80      	pop	{r7, pc}

0810aeec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810aeec:	b580      	push	{r7, lr}
 810aeee:	b084      	sub	sp, #16
 810aef0:	af00      	add	r7, sp, #0
 810aef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810aef4:	f3ef 8305 	mrs	r3, IPSR
 810aef8:	60bb      	str	r3, [r7, #8]
  return(result);
 810aefa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810aefc:	2b00      	cmp	r3, #0
 810aefe:	d003      	beq.n	810af08 <osDelay+0x1c>
    stat = osErrorISR;
 810af00:	f06f 0305 	mvn.w	r3, #5
 810af04:	60fb      	str	r3, [r7, #12]
 810af06:	e007      	b.n	810af18 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810af08:	2300      	movs	r3, #0
 810af0a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810af0c:	687b      	ldr	r3, [r7, #4]
 810af0e:	2b00      	cmp	r3, #0
 810af10:	d002      	beq.n	810af18 <osDelay+0x2c>
      vTaskDelay(ticks);
 810af12:	6878      	ldr	r0, [r7, #4]
 810af14:	f001 fbd0 	bl	810c6b8 <vTaskDelay>
    }
  }

  return (stat);
 810af18:	68fb      	ldr	r3, [r7, #12]
}
 810af1a:	4618      	mov	r0, r3
 810af1c:	3710      	adds	r7, #16
 810af1e:	46bd      	mov	sp, r7
 810af20:	bd80      	pop	{r7, pc}
	...

0810af24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810af24:	b480      	push	{r7}
 810af26:	b085      	sub	sp, #20
 810af28:	af00      	add	r7, sp, #0
 810af2a:	60f8      	str	r0, [r7, #12]
 810af2c:	60b9      	str	r1, [r7, #8]
 810af2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810af30:	68fb      	ldr	r3, [r7, #12]
 810af32:	4a07      	ldr	r2, [pc, #28]	@ (810af50 <vApplicationGetIdleTaskMemory+0x2c>)
 810af34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810af36:	68bb      	ldr	r3, [r7, #8]
 810af38:	4a06      	ldr	r2, [pc, #24]	@ (810af54 <vApplicationGetIdleTaskMemory+0x30>)
 810af3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810af3c:	687b      	ldr	r3, [r7, #4]
 810af3e:	2280      	movs	r2, #128	@ 0x80
 810af40:	601a      	str	r2, [r3, #0]
}
 810af42:	bf00      	nop
 810af44:	3714      	adds	r7, #20
 810af46:	46bd      	mov	sp, r7
 810af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af4c:	4770      	bx	lr
 810af4e:	bf00      	nop
 810af50:	100004b0 	.word	0x100004b0
 810af54:	10000558 	.word	0x10000558

0810af58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810af58:	b480      	push	{r7}
 810af5a:	b085      	sub	sp, #20
 810af5c:	af00      	add	r7, sp, #0
 810af5e:	60f8      	str	r0, [r7, #12]
 810af60:	60b9      	str	r1, [r7, #8]
 810af62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810af64:	68fb      	ldr	r3, [r7, #12]
 810af66:	4a07      	ldr	r2, [pc, #28]	@ (810af84 <vApplicationGetTimerTaskMemory+0x2c>)
 810af68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810af6a:	68bb      	ldr	r3, [r7, #8]
 810af6c:	4a06      	ldr	r2, [pc, #24]	@ (810af88 <vApplicationGetTimerTaskMemory+0x30>)
 810af6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810af70:	687b      	ldr	r3, [r7, #4]
 810af72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810af76:	601a      	str	r2, [r3, #0]
}
 810af78:	bf00      	nop
 810af7a:	3714      	adds	r7, #20
 810af7c:	46bd      	mov	sp, r7
 810af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af82:	4770      	bx	lr
 810af84:	10000758 	.word	0x10000758
 810af88:	10000800 	.word	0x10000800

0810af8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810af8c:	b580      	push	{r7, lr}
 810af8e:	b08a      	sub	sp, #40	@ 0x28
 810af90:	af00      	add	r7, sp, #0
 810af92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810af94:	2300      	movs	r3, #0
 810af96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810af98:	f001 fc34 	bl	810c804 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810af9c:	4b5c      	ldr	r3, [pc, #368]	@ (810b110 <pvPortMalloc+0x184>)
 810af9e:	681b      	ldr	r3, [r3, #0]
 810afa0:	2b00      	cmp	r3, #0
 810afa2:	d101      	bne.n	810afa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810afa4:	f000 f930 	bl	810b208 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810afa8:	4b5a      	ldr	r3, [pc, #360]	@ (810b114 <pvPortMalloc+0x188>)
 810afaa:	681a      	ldr	r2, [r3, #0]
 810afac:	687b      	ldr	r3, [r7, #4]
 810afae:	4013      	ands	r3, r2
 810afb0:	2b00      	cmp	r3, #0
 810afb2:	f040 8095 	bne.w	810b0e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810afb6:	687b      	ldr	r3, [r7, #4]
 810afb8:	2b00      	cmp	r3, #0
 810afba:	d01e      	beq.n	810affa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810afbc:	2208      	movs	r2, #8
 810afbe:	687b      	ldr	r3, [r7, #4]
 810afc0:	4413      	add	r3, r2
 810afc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810afc4:	687b      	ldr	r3, [r7, #4]
 810afc6:	f003 0307 	and.w	r3, r3, #7
 810afca:	2b00      	cmp	r3, #0
 810afcc:	d015      	beq.n	810affa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810afce:	687b      	ldr	r3, [r7, #4]
 810afd0:	f023 0307 	bic.w	r3, r3, #7
 810afd4:	3308      	adds	r3, #8
 810afd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810afd8:	687b      	ldr	r3, [r7, #4]
 810afda:	f003 0307 	and.w	r3, r3, #7
 810afde:	2b00      	cmp	r3, #0
 810afe0:	d00b      	beq.n	810affa <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810afe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810afe6:	f383 8811 	msr	BASEPRI, r3
 810afea:	f3bf 8f6f 	isb	sy
 810afee:	f3bf 8f4f 	dsb	sy
 810aff2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810aff4:	bf00      	nop
 810aff6:	bf00      	nop
 810aff8:	e7fd      	b.n	810aff6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810affa:	687b      	ldr	r3, [r7, #4]
 810affc:	2b00      	cmp	r3, #0
 810affe:	d06f      	beq.n	810b0e0 <pvPortMalloc+0x154>
 810b000:	4b45      	ldr	r3, [pc, #276]	@ (810b118 <pvPortMalloc+0x18c>)
 810b002:	681b      	ldr	r3, [r3, #0]
 810b004:	687a      	ldr	r2, [r7, #4]
 810b006:	429a      	cmp	r2, r3
 810b008:	d86a      	bhi.n	810b0e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810b00a:	4b44      	ldr	r3, [pc, #272]	@ (810b11c <pvPortMalloc+0x190>)
 810b00c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810b00e:	4b43      	ldr	r3, [pc, #268]	@ (810b11c <pvPortMalloc+0x190>)
 810b010:	681b      	ldr	r3, [r3, #0]
 810b012:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810b014:	e004      	b.n	810b020 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810b016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810b01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b01c:	681b      	ldr	r3, [r3, #0]
 810b01e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810b020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b022:	685b      	ldr	r3, [r3, #4]
 810b024:	687a      	ldr	r2, [r7, #4]
 810b026:	429a      	cmp	r2, r3
 810b028:	d903      	bls.n	810b032 <pvPortMalloc+0xa6>
 810b02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b02c:	681b      	ldr	r3, [r3, #0]
 810b02e:	2b00      	cmp	r3, #0
 810b030:	d1f1      	bne.n	810b016 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810b032:	4b37      	ldr	r3, [pc, #220]	@ (810b110 <pvPortMalloc+0x184>)
 810b034:	681b      	ldr	r3, [r3, #0]
 810b036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810b038:	429a      	cmp	r2, r3
 810b03a:	d051      	beq.n	810b0e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810b03c:	6a3b      	ldr	r3, [r7, #32]
 810b03e:	681b      	ldr	r3, [r3, #0]
 810b040:	2208      	movs	r2, #8
 810b042:	4413      	add	r3, r2
 810b044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810b046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b048:	681a      	ldr	r2, [r3, #0]
 810b04a:	6a3b      	ldr	r3, [r7, #32]
 810b04c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810b04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b050:	685a      	ldr	r2, [r3, #4]
 810b052:	687b      	ldr	r3, [r7, #4]
 810b054:	1ad2      	subs	r2, r2, r3
 810b056:	2308      	movs	r3, #8
 810b058:	005b      	lsls	r3, r3, #1
 810b05a:	429a      	cmp	r2, r3
 810b05c:	d920      	bls.n	810b0a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810b05e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810b060:	687b      	ldr	r3, [r7, #4]
 810b062:	4413      	add	r3, r2
 810b064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810b066:	69bb      	ldr	r3, [r7, #24]
 810b068:	f003 0307 	and.w	r3, r3, #7
 810b06c:	2b00      	cmp	r3, #0
 810b06e:	d00b      	beq.n	810b088 <pvPortMalloc+0xfc>
	__asm volatile
 810b070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b074:	f383 8811 	msr	BASEPRI, r3
 810b078:	f3bf 8f6f 	isb	sy
 810b07c:	f3bf 8f4f 	dsb	sy
 810b080:	613b      	str	r3, [r7, #16]
}
 810b082:	bf00      	nop
 810b084:	bf00      	nop
 810b086:	e7fd      	b.n	810b084 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810b088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b08a:	685a      	ldr	r2, [r3, #4]
 810b08c:	687b      	ldr	r3, [r7, #4]
 810b08e:	1ad2      	subs	r2, r2, r3
 810b090:	69bb      	ldr	r3, [r7, #24]
 810b092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810b094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b096:	687a      	ldr	r2, [r7, #4]
 810b098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810b09a:	69b8      	ldr	r0, [r7, #24]
 810b09c:	f000 f916 	bl	810b2cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810b0a0:	4b1d      	ldr	r3, [pc, #116]	@ (810b118 <pvPortMalloc+0x18c>)
 810b0a2:	681a      	ldr	r2, [r3, #0]
 810b0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b0a6:	685b      	ldr	r3, [r3, #4]
 810b0a8:	1ad3      	subs	r3, r2, r3
 810b0aa:	4a1b      	ldr	r2, [pc, #108]	@ (810b118 <pvPortMalloc+0x18c>)
 810b0ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810b0ae:	4b1a      	ldr	r3, [pc, #104]	@ (810b118 <pvPortMalloc+0x18c>)
 810b0b0:	681a      	ldr	r2, [r3, #0]
 810b0b2:	4b1b      	ldr	r3, [pc, #108]	@ (810b120 <pvPortMalloc+0x194>)
 810b0b4:	681b      	ldr	r3, [r3, #0]
 810b0b6:	429a      	cmp	r2, r3
 810b0b8:	d203      	bcs.n	810b0c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810b0ba:	4b17      	ldr	r3, [pc, #92]	@ (810b118 <pvPortMalloc+0x18c>)
 810b0bc:	681b      	ldr	r3, [r3, #0]
 810b0be:	4a18      	ldr	r2, [pc, #96]	@ (810b120 <pvPortMalloc+0x194>)
 810b0c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810b0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b0c4:	685a      	ldr	r2, [r3, #4]
 810b0c6:	4b13      	ldr	r3, [pc, #76]	@ (810b114 <pvPortMalloc+0x188>)
 810b0c8:	681b      	ldr	r3, [r3, #0]
 810b0ca:	431a      	orrs	r2, r3
 810b0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b0ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810b0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b0d2:	2200      	movs	r2, #0
 810b0d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810b0d6:	4b13      	ldr	r3, [pc, #76]	@ (810b124 <pvPortMalloc+0x198>)
 810b0d8:	681b      	ldr	r3, [r3, #0]
 810b0da:	3301      	adds	r3, #1
 810b0dc:	4a11      	ldr	r2, [pc, #68]	@ (810b124 <pvPortMalloc+0x198>)
 810b0de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810b0e0:	f001 fb9e 	bl	810c820 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810b0e4:	69fb      	ldr	r3, [r7, #28]
 810b0e6:	f003 0307 	and.w	r3, r3, #7
 810b0ea:	2b00      	cmp	r3, #0
 810b0ec:	d00b      	beq.n	810b106 <pvPortMalloc+0x17a>
	__asm volatile
 810b0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b0f2:	f383 8811 	msr	BASEPRI, r3
 810b0f6:	f3bf 8f6f 	isb	sy
 810b0fa:	f3bf 8f4f 	dsb	sy
 810b0fe:	60fb      	str	r3, [r7, #12]
}
 810b100:	bf00      	nop
 810b102:	bf00      	nop
 810b104:	e7fd      	b.n	810b102 <pvPortMalloc+0x176>
	return pvReturn;
 810b106:	69fb      	ldr	r3, [r7, #28]
}
 810b108:	4618      	mov	r0, r3
 810b10a:	3728      	adds	r7, #40	@ 0x28
 810b10c:	46bd      	mov	sp, r7
 810b10e:	bd80      	pop	{r7, pc}
 810b110:	10004808 	.word	0x10004808
 810b114:	1000481c 	.word	0x1000481c
 810b118:	1000480c 	.word	0x1000480c
 810b11c:	10004800 	.word	0x10004800
 810b120:	10004810 	.word	0x10004810
 810b124:	10004814 	.word	0x10004814

0810b128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810b128:	b580      	push	{r7, lr}
 810b12a:	b086      	sub	sp, #24
 810b12c:	af00      	add	r7, sp, #0
 810b12e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810b130:	687b      	ldr	r3, [r7, #4]
 810b132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810b134:	687b      	ldr	r3, [r7, #4]
 810b136:	2b00      	cmp	r3, #0
 810b138:	d04f      	beq.n	810b1da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810b13a:	2308      	movs	r3, #8
 810b13c:	425b      	negs	r3, r3
 810b13e:	697a      	ldr	r2, [r7, #20]
 810b140:	4413      	add	r3, r2
 810b142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810b144:	697b      	ldr	r3, [r7, #20]
 810b146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810b148:	693b      	ldr	r3, [r7, #16]
 810b14a:	685a      	ldr	r2, [r3, #4]
 810b14c:	4b25      	ldr	r3, [pc, #148]	@ (810b1e4 <vPortFree+0xbc>)
 810b14e:	681b      	ldr	r3, [r3, #0]
 810b150:	4013      	ands	r3, r2
 810b152:	2b00      	cmp	r3, #0
 810b154:	d10b      	bne.n	810b16e <vPortFree+0x46>
	__asm volatile
 810b156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b15a:	f383 8811 	msr	BASEPRI, r3
 810b15e:	f3bf 8f6f 	isb	sy
 810b162:	f3bf 8f4f 	dsb	sy
 810b166:	60fb      	str	r3, [r7, #12]
}
 810b168:	bf00      	nop
 810b16a:	bf00      	nop
 810b16c:	e7fd      	b.n	810b16a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810b16e:	693b      	ldr	r3, [r7, #16]
 810b170:	681b      	ldr	r3, [r3, #0]
 810b172:	2b00      	cmp	r3, #0
 810b174:	d00b      	beq.n	810b18e <vPortFree+0x66>
	__asm volatile
 810b176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b17a:	f383 8811 	msr	BASEPRI, r3
 810b17e:	f3bf 8f6f 	isb	sy
 810b182:	f3bf 8f4f 	dsb	sy
 810b186:	60bb      	str	r3, [r7, #8]
}
 810b188:	bf00      	nop
 810b18a:	bf00      	nop
 810b18c:	e7fd      	b.n	810b18a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810b18e:	693b      	ldr	r3, [r7, #16]
 810b190:	685a      	ldr	r2, [r3, #4]
 810b192:	4b14      	ldr	r3, [pc, #80]	@ (810b1e4 <vPortFree+0xbc>)
 810b194:	681b      	ldr	r3, [r3, #0]
 810b196:	4013      	ands	r3, r2
 810b198:	2b00      	cmp	r3, #0
 810b19a:	d01e      	beq.n	810b1da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810b19c:	693b      	ldr	r3, [r7, #16]
 810b19e:	681b      	ldr	r3, [r3, #0]
 810b1a0:	2b00      	cmp	r3, #0
 810b1a2:	d11a      	bne.n	810b1da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810b1a4:	693b      	ldr	r3, [r7, #16]
 810b1a6:	685a      	ldr	r2, [r3, #4]
 810b1a8:	4b0e      	ldr	r3, [pc, #56]	@ (810b1e4 <vPortFree+0xbc>)
 810b1aa:	681b      	ldr	r3, [r3, #0]
 810b1ac:	43db      	mvns	r3, r3
 810b1ae:	401a      	ands	r2, r3
 810b1b0:	693b      	ldr	r3, [r7, #16]
 810b1b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810b1b4:	f001 fb26 	bl	810c804 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810b1b8:	693b      	ldr	r3, [r7, #16]
 810b1ba:	685a      	ldr	r2, [r3, #4]
 810b1bc:	4b0a      	ldr	r3, [pc, #40]	@ (810b1e8 <vPortFree+0xc0>)
 810b1be:	681b      	ldr	r3, [r3, #0]
 810b1c0:	4413      	add	r3, r2
 810b1c2:	4a09      	ldr	r2, [pc, #36]	@ (810b1e8 <vPortFree+0xc0>)
 810b1c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810b1c6:	6938      	ldr	r0, [r7, #16]
 810b1c8:	f000 f880 	bl	810b2cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810b1cc:	4b07      	ldr	r3, [pc, #28]	@ (810b1ec <vPortFree+0xc4>)
 810b1ce:	681b      	ldr	r3, [r3, #0]
 810b1d0:	3301      	adds	r3, #1
 810b1d2:	4a06      	ldr	r2, [pc, #24]	@ (810b1ec <vPortFree+0xc4>)
 810b1d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810b1d6:	f001 fb23 	bl	810c820 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810b1da:	bf00      	nop
 810b1dc:	3718      	adds	r7, #24
 810b1de:	46bd      	mov	sp, r7
 810b1e0:	bd80      	pop	{r7, pc}
 810b1e2:	bf00      	nop
 810b1e4:	1000481c 	.word	0x1000481c
 810b1e8:	1000480c 	.word	0x1000480c
 810b1ec:	10004818 	.word	0x10004818

0810b1f0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 810b1f0:	b480      	push	{r7}
 810b1f2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 810b1f4:	4b03      	ldr	r3, [pc, #12]	@ (810b204 <xPortGetFreeHeapSize+0x14>)
 810b1f6:	681b      	ldr	r3, [r3, #0]
}
 810b1f8:	4618      	mov	r0, r3
 810b1fa:	46bd      	mov	sp, r7
 810b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b200:	4770      	bx	lr
 810b202:	bf00      	nop
 810b204:	1000480c 	.word	0x1000480c

0810b208 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810b208:	b480      	push	{r7}
 810b20a:	b085      	sub	sp, #20
 810b20c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810b20e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 810b212:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810b214:	4b27      	ldr	r3, [pc, #156]	@ (810b2b4 <prvHeapInit+0xac>)
 810b216:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810b218:	68fb      	ldr	r3, [r7, #12]
 810b21a:	f003 0307 	and.w	r3, r3, #7
 810b21e:	2b00      	cmp	r3, #0
 810b220:	d00c      	beq.n	810b23c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810b222:	68fb      	ldr	r3, [r7, #12]
 810b224:	3307      	adds	r3, #7
 810b226:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810b228:	68fb      	ldr	r3, [r7, #12]
 810b22a:	f023 0307 	bic.w	r3, r3, #7
 810b22e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810b230:	68ba      	ldr	r2, [r7, #8]
 810b232:	68fb      	ldr	r3, [r7, #12]
 810b234:	1ad3      	subs	r3, r2, r3
 810b236:	4a1f      	ldr	r2, [pc, #124]	@ (810b2b4 <prvHeapInit+0xac>)
 810b238:	4413      	add	r3, r2
 810b23a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810b23c:	68fb      	ldr	r3, [r7, #12]
 810b23e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810b240:	4a1d      	ldr	r2, [pc, #116]	@ (810b2b8 <prvHeapInit+0xb0>)
 810b242:	687b      	ldr	r3, [r7, #4]
 810b244:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810b246:	4b1c      	ldr	r3, [pc, #112]	@ (810b2b8 <prvHeapInit+0xb0>)
 810b248:	2200      	movs	r2, #0
 810b24a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810b24c:	687b      	ldr	r3, [r7, #4]
 810b24e:	68ba      	ldr	r2, [r7, #8]
 810b250:	4413      	add	r3, r2
 810b252:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810b254:	2208      	movs	r2, #8
 810b256:	68fb      	ldr	r3, [r7, #12]
 810b258:	1a9b      	subs	r3, r3, r2
 810b25a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810b25c:	68fb      	ldr	r3, [r7, #12]
 810b25e:	f023 0307 	bic.w	r3, r3, #7
 810b262:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810b264:	68fb      	ldr	r3, [r7, #12]
 810b266:	4a15      	ldr	r2, [pc, #84]	@ (810b2bc <prvHeapInit+0xb4>)
 810b268:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810b26a:	4b14      	ldr	r3, [pc, #80]	@ (810b2bc <prvHeapInit+0xb4>)
 810b26c:	681b      	ldr	r3, [r3, #0]
 810b26e:	2200      	movs	r2, #0
 810b270:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810b272:	4b12      	ldr	r3, [pc, #72]	@ (810b2bc <prvHeapInit+0xb4>)
 810b274:	681b      	ldr	r3, [r3, #0]
 810b276:	2200      	movs	r2, #0
 810b278:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810b27a:	687b      	ldr	r3, [r7, #4]
 810b27c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810b27e:	683b      	ldr	r3, [r7, #0]
 810b280:	68fa      	ldr	r2, [r7, #12]
 810b282:	1ad2      	subs	r2, r2, r3
 810b284:	683b      	ldr	r3, [r7, #0]
 810b286:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810b288:	4b0c      	ldr	r3, [pc, #48]	@ (810b2bc <prvHeapInit+0xb4>)
 810b28a:	681a      	ldr	r2, [r3, #0]
 810b28c:	683b      	ldr	r3, [r7, #0]
 810b28e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810b290:	683b      	ldr	r3, [r7, #0]
 810b292:	685b      	ldr	r3, [r3, #4]
 810b294:	4a0a      	ldr	r2, [pc, #40]	@ (810b2c0 <prvHeapInit+0xb8>)
 810b296:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810b298:	683b      	ldr	r3, [r7, #0]
 810b29a:	685b      	ldr	r3, [r3, #4]
 810b29c:	4a09      	ldr	r2, [pc, #36]	@ (810b2c4 <prvHeapInit+0xbc>)
 810b29e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810b2a0:	4b09      	ldr	r3, [pc, #36]	@ (810b2c8 <prvHeapInit+0xc0>)
 810b2a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810b2a6:	601a      	str	r2, [r3, #0]
}
 810b2a8:	bf00      	nop
 810b2aa:	3714      	adds	r7, #20
 810b2ac:	46bd      	mov	sp, r7
 810b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2b2:	4770      	bx	lr
 810b2b4:	10000c00 	.word	0x10000c00
 810b2b8:	10004800 	.word	0x10004800
 810b2bc:	10004808 	.word	0x10004808
 810b2c0:	10004810 	.word	0x10004810
 810b2c4:	1000480c 	.word	0x1000480c
 810b2c8:	1000481c 	.word	0x1000481c

0810b2cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810b2cc:	b480      	push	{r7}
 810b2ce:	b085      	sub	sp, #20
 810b2d0:	af00      	add	r7, sp, #0
 810b2d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810b2d4:	4b28      	ldr	r3, [pc, #160]	@ (810b378 <prvInsertBlockIntoFreeList+0xac>)
 810b2d6:	60fb      	str	r3, [r7, #12]
 810b2d8:	e002      	b.n	810b2e0 <prvInsertBlockIntoFreeList+0x14>
 810b2da:	68fb      	ldr	r3, [r7, #12]
 810b2dc:	681b      	ldr	r3, [r3, #0]
 810b2de:	60fb      	str	r3, [r7, #12]
 810b2e0:	68fb      	ldr	r3, [r7, #12]
 810b2e2:	681b      	ldr	r3, [r3, #0]
 810b2e4:	687a      	ldr	r2, [r7, #4]
 810b2e6:	429a      	cmp	r2, r3
 810b2e8:	d8f7      	bhi.n	810b2da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810b2ea:	68fb      	ldr	r3, [r7, #12]
 810b2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810b2ee:	68fb      	ldr	r3, [r7, #12]
 810b2f0:	685b      	ldr	r3, [r3, #4]
 810b2f2:	68ba      	ldr	r2, [r7, #8]
 810b2f4:	4413      	add	r3, r2
 810b2f6:	687a      	ldr	r2, [r7, #4]
 810b2f8:	429a      	cmp	r2, r3
 810b2fa:	d108      	bne.n	810b30e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810b2fc:	68fb      	ldr	r3, [r7, #12]
 810b2fe:	685a      	ldr	r2, [r3, #4]
 810b300:	687b      	ldr	r3, [r7, #4]
 810b302:	685b      	ldr	r3, [r3, #4]
 810b304:	441a      	add	r2, r3
 810b306:	68fb      	ldr	r3, [r7, #12]
 810b308:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810b30a:	68fb      	ldr	r3, [r7, #12]
 810b30c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810b30e:	687b      	ldr	r3, [r7, #4]
 810b310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810b312:	687b      	ldr	r3, [r7, #4]
 810b314:	685b      	ldr	r3, [r3, #4]
 810b316:	68ba      	ldr	r2, [r7, #8]
 810b318:	441a      	add	r2, r3
 810b31a:	68fb      	ldr	r3, [r7, #12]
 810b31c:	681b      	ldr	r3, [r3, #0]
 810b31e:	429a      	cmp	r2, r3
 810b320:	d118      	bne.n	810b354 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810b322:	68fb      	ldr	r3, [r7, #12]
 810b324:	681a      	ldr	r2, [r3, #0]
 810b326:	4b15      	ldr	r3, [pc, #84]	@ (810b37c <prvInsertBlockIntoFreeList+0xb0>)
 810b328:	681b      	ldr	r3, [r3, #0]
 810b32a:	429a      	cmp	r2, r3
 810b32c:	d00d      	beq.n	810b34a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810b32e:	687b      	ldr	r3, [r7, #4]
 810b330:	685a      	ldr	r2, [r3, #4]
 810b332:	68fb      	ldr	r3, [r7, #12]
 810b334:	681b      	ldr	r3, [r3, #0]
 810b336:	685b      	ldr	r3, [r3, #4]
 810b338:	441a      	add	r2, r3
 810b33a:	687b      	ldr	r3, [r7, #4]
 810b33c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810b33e:	68fb      	ldr	r3, [r7, #12]
 810b340:	681b      	ldr	r3, [r3, #0]
 810b342:	681a      	ldr	r2, [r3, #0]
 810b344:	687b      	ldr	r3, [r7, #4]
 810b346:	601a      	str	r2, [r3, #0]
 810b348:	e008      	b.n	810b35c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810b34a:	4b0c      	ldr	r3, [pc, #48]	@ (810b37c <prvInsertBlockIntoFreeList+0xb0>)
 810b34c:	681a      	ldr	r2, [r3, #0]
 810b34e:	687b      	ldr	r3, [r7, #4]
 810b350:	601a      	str	r2, [r3, #0]
 810b352:	e003      	b.n	810b35c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810b354:	68fb      	ldr	r3, [r7, #12]
 810b356:	681a      	ldr	r2, [r3, #0]
 810b358:	687b      	ldr	r3, [r7, #4]
 810b35a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810b35c:	68fa      	ldr	r2, [r7, #12]
 810b35e:	687b      	ldr	r3, [r7, #4]
 810b360:	429a      	cmp	r2, r3
 810b362:	d002      	beq.n	810b36a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810b364:	68fb      	ldr	r3, [r7, #12]
 810b366:	687a      	ldr	r2, [r7, #4]
 810b368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810b36a:	bf00      	nop
 810b36c:	3714      	adds	r7, #20
 810b36e:	46bd      	mov	sp, r7
 810b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b374:	4770      	bx	lr
 810b376:	bf00      	nop
 810b378:	10004800 	.word	0x10004800
 810b37c:	10004808 	.word	0x10004808

0810b380 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810b380:	b480      	push	{r7}
 810b382:	b083      	sub	sp, #12
 810b384:	af00      	add	r7, sp, #0
 810b386:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810b388:	687b      	ldr	r3, [r7, #4]
 810b38a:	f103 0208 	add.w	r2, r3, #8
 810b38e:	687b      	ldr	r3, [r7, #4]
 810b390:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810b392:	687b      	ldr	r3, [r7, #4]
 810b394:	f04f 32ff 	mov.w	r2, #4294967295
 810b398:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810b39a:	687b      	ldr	r3, [r7, #4]
 810b39c:	f103 0208 	add.w	r2, r3, #8
 810b3a0:	687b      	ldr	r3, [r7, #4]
 810b3a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810b3a4:	687b      	ldr	r3, [r7, #4]
 810b3a6:	f103 0208 	add.w	r2, r3, #8
 810b3aa:	687b      	ldr	r3, [r7, #4]
 810b3ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810b3ae:	687b      	ldr	r3, [r7, #4]
 810b3b0:	2200      	movs	r2, #0
 810b3b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810b3b4:	bf00      	nop
 810b3b6:	370c      	adds	r7, #12
 810b3b8:	46bd      	mov	sp, r7
 810b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3be:	4770      	bx	lr

0810b3c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810b3c0:	b480      	push	{r7}
 810b3c2:	b083      	sub	sp, #12
 810b3c4:	af00      	add	r7, sp, #0
 810b3c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810b3c8:	687b      	ldr	r3, [r7, #4]
 810b3ca:	2200      	movs	r2, #0
 810b3cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810b3ce:	bf00      	nop
 810b3d0:	370c      	adds	r7, #12
 810b3d2:	46bd      	mov	sp, r7
 810b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3d8:	4770      	bx	lr

0810b3da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810b3da:	b480      	push	{r7}
 810b3dc:	b085      	sub	sp, #20
 810b3de:	af00      	add	r7, sp, #0
 810b3e0:	6078      	str	r0, [r7, #4]
 810b3e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810b3e4:	687b      	ldr	r3, [r7, #4]
 810b3e6:	685b      	ldr	r3, [r3, #4]
 810b3e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810b3ea:	683b      	ldr	r3, [r7, #0]
 810b3ec:	68fa      	ldr	r2, [r7, #12]
 810b3ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810b3f0:	68fb      	ldr	r3, [r7, #12]
 810b3f2:	689a      	ldr	r2, [r3, #8]
 810b3f4:	683b      	ldr	r3, [r7, #0]
 810b3f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810b3f8:	68fb      	ldr	r3, [r7, #12]
 810b3fa:	689b      	ldr	r3, [r3, #8]
 810b3fc:	683a      	ldr	r2, [r7, #0]
 810b3fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810b400:	68fb      	ldr	r3, [r7, #12]
 810b402:	683a      	ldr	r2, [r7, #0]
 810b404:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810b406:	683b      	ldr	r3, [r7, #0]
 810b408:	687a      	ldr	r2, [r7, #4]
 810b40a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810b40c:	687b      	ldr	r3, [r7, #4]
 810b40e:	681b      	ldr	r3, [r3, #0]
 810b410:	1c5a      	adds	r2, r3, #1
 810b412:	687b      	ldr	r3, [r7, #4]
 810b414:	601a      	str	r2, [r3, #0]
}
 810b416:	bf00      	nop
 810b418:	3714      	adds	r7, #20
 810b41a:	46bd      	mov	sp, r7
 810b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b420:	4770      	bx	lr

0810b422 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810b422:	b480      	push	{r7}
 810b424:	b085      	sub	sp, #20
 810b426:	af00      	add	r7, sp, #0
 810b428:	6078      	str	r0, [r7, #4]
 810b42a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810b42c:	683b      	ldr	r3, [r7, #0]
 810b42e:	681b      	ldr	r3, [r3, #0]
 810b430:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810b432:	68bb      	ldr	r3, [r7, #8]
 810b434:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b438:	d103      	bne.n	810b442 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810b43a:	687b      	ldr	r3, [r7, #4]
 810b43c:	691b      	ldr	r3, [r3, #16]
 810b43e:	60fb      	str	r3, [r7, #12]
 810b440:	e00c      	b.n	810b45c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810b442:	687b      	ldr	r3, [r7, #4]
 810b444:	3308      	adds	r3, #8
 810b446:	60fb      	str	r3, [r7, #12]
 810b448:	e002      	b.n	810b450 <vListInsert+0x2e>
 810b44a:	68fb      	ldr	r3, [r7, #12]
 810b44c:	685b      	ldr	r3, [r3, #4]
 810b44e:	60fb      	str	r3, [r7, #12]
 810b450:	68fb      	ldr	r3, [r7, #12]
 810b452:	685b      	ldr	r3, [r3, #4]
 810b454:	681b      	ldr	r3, [r3, #0]
 810b456:	68ba      	ldr	r2, [r7, #8]
 810b458:	429a      	cmp	r2, r3
 810b45a:	d2f6      	bcs.n	810b44a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810b45c:	68fb      	ldr	r3, [r7, #12]
 810b45e:	685a      	ldr	r2, [r3, #4]
 810b460:	683b      	ldr	r3, [r7, #0]
 810b462:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810b464:	683b      	ldr	r3, [r7, #0]
 810b466:	685b      	ldr	r3, [r3, #4]
 810b468:	683a      	ldr	r2, [r7, #0]
 810b46a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810b46c:	683b      	ldr	r3, [r7, #0]
 810b46e:	68fa      	ldr	r2, [r7, #12]
 810b470:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810b472:	68fb      	ldr	r3, [r7, #12]
 810b474:	683a      	ldr	r2, [r7, #0]
 810b476:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810b478:	683b      	ldr	r3, [r7, #0]
 810b47a:	687a      	ldr	r2, [r7, #4]
 810b47c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810b47e:	687b      	ldr	r3, [r7, #4]
 810b480:	681b      	ldr	r3, [r3, #0]
 810b482:	1c5a      	adds	r2, r3, #1
 810b484:	687b      	ldr	r3, [r7, #4]
 810b486:	601a      	str	r2, [r3, #0]
}
 810b488:	bf00      	nop
 810b48a:	3714      	adds	r7, #20
 810b48c:	46bd      	mov	sp, r7
 810b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b492:	4770      	bx	lr

0810b494 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810b494:	b480      	push	{r7}
 810b496:	b085      	sub	sp, #20
 810b498:	af00      	add	r7, sp, #0
 810b49a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810b49c:	687b      	ldr	r3, [r7, #4]
 810b49e:	691b      	ldr	r3, [r3, #16]
 810b4a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810b4a2:	687b      	ldr	r3, [r7, #4]
 810b4a4:	685b      	ldr	r3, [r3, #4]
 810b4a6:	687a      	ldr	r2, [r7, #4]
 810b4a8:	6892      	ldr	r2, [r2, #8]
 810b4aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810b4ac:	687b      	ldr	r3, [r7, #4]
 810b4ae:	689b      	ldr	r3, [r3, #8]
 810b4b0:	687a      	ldr	r2, [r7, #4]
 810b4b2:	6852      	ldr	r2, [r2, #4]
 810b4b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810b4b6:	68fb      	ldr	r3, [r7, #12]
 810b4b8:	685b      	ldr	r3, [r3, #4]
 810b4ba:	687a      	ldr	r2, [r7, #4]
 810b4bc:	429a      	cmp	r2, r3
 810b4be:	d103      	bne.n	810b4c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810b4c0:	687b      	ldr	r3, [r7, #4]
 810b4c2:	689a      	ldr	r2, [r3, #8]
 810b4c4:	68fb      	ldr	r3, [r7, #12]
 810b4c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810b4c8:	687b      	ldr	r3, [r7, #4]
 810b4ca:	2200      	movs	r2, #0
 810b4cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810b4ce:	68fb      	ldr	r3, [r7, #12]
 810b4d0:	681b      	ldr	r3, [r3, #0]
 810b4d2:	1e5a      	subs	r2, r3, #1
 810b4d4:	68fb      	ldr	r3, [r7, #12]
 810b4d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810b4d8:	68fb      	ldr	r3, [r7, #12]
 810b4da:	681b      	ldr	r3, [r3, #0]
}
 810b4dc:	4618      	mov	r0, r3
 810b4de:	3714      	adds	r7, #20
 810b4e0:	46bd      	mov	sp, r7
 810b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b4e6:	4770      	bx	lr

0810b4e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810b4e8:	b480      	push	{r7}
 810b4ea:	b085      	sub	sp, #20
 810b4ec:	af00      	add	r7, sp, #0
 810b4ee:	60f8      	str	r0, [r7, #12]
 810b4f0:	60b9      	str	r1, [r7, #8]
 810b4f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810b4f4:	68fb      	ldr	r3, [r7, #12]
 810b4f6:	3b04      	subs	r3, #4
 810b4f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810b4fa:	68fb      	ldr	r3, [r7, #12]
 810b4fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810b500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810b502:	68fb      	ldr	r3, [r7, #12]
 810b504:	3b04      	subs	r3, #4
 810b506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810b508:	68bb      	ldr	r3, [r7, #8]
 810b50a:	f023 0201 	bic.w	r2, r3, #1
 810b50e:	68fb      	ldr	r3, [r7, #12]
 810b510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810b512:	68fb      	ldr	r3, [r7, #12]
 810b514:	3b04      	subs	r3, #4
 810b516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810b518:	4a0c      	ldr	r2, [pc, #48]	@ (810b54c <pxPortInitialiseStack+0x64>)
 810b51a:	68fb      	ldr	r3, [r7, #12]
 810b51c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810b51e:	68fb      	ldr	r3, [r7, #12]
 810b520:	3b14      	subs	r3, #20
 810b522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810b524:	687a      	ldr	r2, [r7, #4]
 810b526:	68fb      	ldr	r3, [r7, #12]
 810b528:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810b52a:	68fb      	ldr	r3, [r7, #12]
 810b52c:	3b04      	subs	r3, #4
 810b52e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810b530:	68fb      	ldr	r3, [r7, #12]
 810b532:	f06f 0202 	mvn.w	r2, #2
 810b536:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810b538:	68fb      	ldr	r3, [r7, #12]
 810b53a:	3b20      	subs	r3, #32
 810b53c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810b53e:	68fb      	ldr	r3, [r7, #12]
}
 810b540:	4618      	mov	r0, r3
 810b542:	3714      	adds	r7, #20
 810b544:	46bd      	mov	sp, r7
 810b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b54a:	4770      	bx	lr
 810b54c:	0810b551 	.word	0x0810b551

0810b550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810b550:	b480      	push	{r7}
 810b552:	b085      	sub	sp, #20
 810b554:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810b556:	2300      	movs	r3, #0
 810b558:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810b55a:	4b13      	ldr	r3, [pc, #76]	@ (810b5a8 <prvTaskExitError+0x58>)
 810b55c:	681b      	ldr	r3, [r3, #0]
 810b55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b562:	d00b      	beq.n	810b57c <prvTaskExitError+0x2c>
	__asm volatile
 810b564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b568:	f383 8811 	msr	BASEPRI, r3
 810b56c:	f3bf 8f6f 	isb	sy
 810b570:	f3bf 8f4f 	dsb	sy
 810b574:	60fb      	str	r3, [r7, #12]
}
 810b576:	bf00      	nop
 810b578:	bf00      	nop
 810b57a:	e7fd      	b.n	810b578 <prvTaskExitError+0x28>
	__asm volatile
 810b57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b580:	f383 8811 	msr	BASEPRI, r3
 810b584:	f3bf 8f6f 	isb	sy
 810b588:	f3bf 8f4f 	dsb	sy
 810b58c:	60bb      	str	r3, [r7, #8]
}
 810b58e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810b590:	bf00      	nop
 810b592:	687b      	ldr	r3, [r7, #4]
 810b594:	2b00      	cmp	r3, #0
 810b596:	d0fc      	beq.n	810b592 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810b598:	bf00      	nop
 810b59a:	bf00      	nop
 810b59c:	3714      	adds	r7, #20
 810b59e:	46bd      	mov	sp, r7
 810b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5a4:	4770      	bx	lr
 810b5a6:	bf00      	nop
 810b5a8:	10000010 	.word	0x10000010
 810b5ac:	00000000 	.word	0x00000000

0810b5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810b5b0:	4b07      	ldr	r3, [pc, #28]	@ (810b5d0 <pxCurrentTCBConst2>)
 810b5b2:	6819      	ldr	r1, [r3, #0]
 810b5b4:	6808      	ldr	r0, [r1, #0]
 810b5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b5ba:	f380 8809 	msr	PSP, r0
 810b5be:	f3bf 8f6f 	isb	sy
 810b5c2:	f04f 0000 	mov.w	r0, #0
 810b5c6:	f380 8811 	msr	BASEPRI, r0
 810b5ca:	4770      	bx	lr
 810b5cc:	f3af 8000 	nop.w

0810b5d0 <pxCurrentTCBConst2>:
 810b5d0:	10004868 	.word	0x10004868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810b5d4:	bf00      	nop
 810b5d6:	bf00      	nop

0810b5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810b5d8:	4808      	ldr	r0, [pc, #32]	@ (810b5fc <prvPortStartFirstTask+0x24>)
 810b5da:	6800      	ldr	r0, [r0, #0]
 810b5dc:	6800      	ldr	r0, [r0, #0]
 810b5de:	f380 8808 	msr	MSP, r0
 810b5e2:	f04f 0000 	mov.w	r0, #0
 810b5e6:	f380 8814 	msr	CONTROL, r0
 810b5ea:	b662      	cpsie	i
 810b5ec:	b661      	cpsie	f
 810b5ee:	f3bf 8f4f 	dsb	sy
 810b5f2:	f3bf 8f6f 	isb	sy
 810b5f6:	df00      	svc	0
 810b5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810b5fa:	bf00      	nop
 810b5fc:	e000ed08 	.word	0xe000ed08

0810b600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810b600:	b580      	push	{r7, lr}
 810b602:	b086      	sub	sp, #24
 810b604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810b606:	4b47      	ldr	r3, [pc, #284]	@ (810b724 <xPortStartScheduler+0x124>)
 810b608:	681b      	ldr	r3, [r3, #0]
 810b60a:	4a47      	ldr	r2, [pc, #284]	@ (810b728 <xPortStartScheduler+0x128>)
 810b60c:	4293      	cmp	r3, r2
 810b60e:	d10b      	bne.n	810b628 <xPortStartScheduler+0x28>
	__asm volatile
 810b610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b614:	f383 8811 	msr	BASEPRI, r3
 810b618:	f3bf 8f6f 	isb	sy
 810b61c:	f3bf 8f4f 	dsb	sy
 810b620:	60fb      	str	r3, [r7, #12]
}
 810b622:	bf00      	nop
 810b624:	bf00      	nop
 810b626:	e7fd      	b.n	810b624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810b628:	4b3e      	ldr	r3, [pc, #248]	@ (810b724 <xPortStartScheduler+0x124>)
 810b62a:	681b      	ldr	r3, [r3, #0]
 810b62c:	4a3f      	ldr	r2, [pc, #252]	@ (810b72c <xPortStartScheduler+0x12c>)
 810b62e:	4293      	cmp	r3, r2
 810b630:	d10b      	bne.n	810b64a <xPortStartScheduler+0x4a>
	__asm volatile
 810b632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b636:	f383 8811 	msr	BASEPRI, r3
 810b63a:	f3bf 8f6f 	isb	sy
 810b63e:	f3bf 8f4f 	dsb	sy
 810b642:	613b      	str	r3, [r7, #16]
}
 810b644:	bf00      	nop
 810b646:	bf00      	nop
 810b648:	e7fd      	b.n	810b646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810b64a:	4b39      	ldr	r3, [pc, #228]	@ (810b730 <xPortStartScheduler+0x130>)
 810b64c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810b64e:	697b      	ldr	r3, [r7, #20]
 810b650:	781b      	ldrb	r3, [r3, #0]
 810b652:	b2db      	uxtb	r3, r3
 810b654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810b656:	697b      	ldr	r3, [r7, #20]
 810b658:	22ff      	movs	r2, #255	@ 0xff
 810b65a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810b65c:	697b      	ldr	r3, [r7, #20]
 810b65e:	781b      	ldrb	r3, [r3, #0]
 810b660:	b2db      	uxtb	r3, r3
 810b662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810b664:	78fb      	ldrb	r3, [r7, #3]
 810b666:	b2db      	uxtb	r3, r3
 810b668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810b66c:	b2da      	uxtb	r2, r3
 810b66e:	4b31      	ldr	r3, [pc, #196]	@ (810b734 <xPortStartScheduler+0x134>)
 810b670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810b672:	4b31      	ldr	r3, [pc, #196]	@ (810b738 <xPortStartScheduler+0x138>)
 810b674:	2207      	movs	r2, #7
 810b676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810b678:	e009      	b.n	810b68e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810b67a:	4b2f      	ldr	r3, [pc, #188]	@ (810b738 <xPortStartScheduler+0x138>)
 810b67c:	681b      	ldr	r3, [r3, #0]
 810b67e:	3b01      	subs	r3, #1
 810b680:	4a2d      	ldr	r2, [pc, #180]	@ (810b738 <xPortStartScheduler+0x138>)
 810b682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810b684:	78fb      	ldrb	r3, [r7, #3]
 810b686:	b2db      	uxtb	r3, r3
 810b688:	005b      	lsls	r3, r3, #1
 810b68a:	b2db      	uxtb	r3, r3
 810b68c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810b68e:	78fb      	ldrb	r3, [r7, #3]
 810b690:	b2db      	uxtb	r3, r3
 810b692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b696:	2b80      	cmp	r3, #128	@ 0x80
 810b698:	d0ef      	beq.n	810b67a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810b69a:	4b27      	ldr	r3, [pc, #156]	@ (810b738 <xPortStartScheduler+0x138>)
 810b69c:	681b      	ldr	r3, [r3, #0]
 810b69e:	f1c3 0307 	rsb	r3, r3, #7
 810b6a2:	2b04      	cmp	r3, #4
 810b6a4:	d00b      	beq.n	810b6be <xPortStartScheduler+0xbe>
	__asm volatile
 810b6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b6aa:	f383 8811 	msr	BASEPRI, r3
 810b6ae:	f3bf 8f6f 	isb	sy
 810b6b2:	f3bf 8f4f 	dsb	sy
 810b6b6:	60bb      	str	r3, [r7, #8]
}
 810b6b8:	bf00      	nop
 810b6ba:	bf00      	nop
 810b6bc:	e7fd      	b.n	810b6ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810b6be:	4b1e      	ldr	r3, [pc, #120]	@ (810b738 <xPortStartScheduler+0x138>)
 810b6c0:	681b      	ldr	r3, [r3, #0]
 810b6c2:	021b      	lsls	r3, r3, #8
 810b6c4:	4a1c      	ldr	r2, [pc, #112]	@ (810b738 <xPortStartScheduler+0x138>)
 810b6c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810b6c8:	4b1b      	ldr	r3, [pc, #108]	@ (810b738 <xPortStartScheduler+0x138>)
 810b6ca:	681b      	ldr	r3, [r3, #0]
 810b6cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810b6d0:	4a19      	ldr	r2, [pc, #100]	@ (810b738 <xPortStartScheduler+0x138>)
 810b6d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810b6d4:	687b      	ldr	r3, [r7, #4]
 810b6d6:	b2da      	uxtb	r2, r3
 810b6d8:	697b      	ldr	r3, [r7, #20]
 810b6da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810b6dc:	4b17      	ldr	r3, [pc, #92]	@ (810b73c <xPortStartScheduler+0x13c>)
 810b6de:	681b      	ldr	r3, [r3, #0]
 810b6e0:	4a16      	ldr	r2, [pc, #88]	@ (810b73c <xPortStartScheduler+0x13c>)
 810b6e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810b6e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810b6e8:	4b14      	ldr	r3, [pc, #80]	@ (810b73c <xPortStartScheduler+0x13c>)
 810b6ea:	681b      	ldr	r3, [r3, #0]
 810b6ec:	4a13      	ldr	r2, [pc, #76]	@ (810b73c <xPortStartScheduler+0x13c>)
 810b6ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 810b6f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810b6f4:	f000 f8b8 	bl	810b868 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810b6f8:	4b11      	ldr	r3, [pc, #68]	@ (810b740 <xPortStartScheduler+0x140>)
 810b6fa:	2200      	movs	r2, #0
 810b6fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810b6fe:	f000 f8d7 	bl	810b8b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810b702:	4b10      	ldr	r3, [pc, #64]	@ (810b744 <xPortStartScheduler+0x144>)
 810b704:	681b      	ldr	r3, [r3, #0]
 810b706:	4a0f      	ldr	r2, [pc, #60]	@ (810b744 <xPortStartScheduler+0x144>)
 810b708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810b70c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810b70e:	f7ff ff63 	bl	810b5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810b712:	f001 f9ed 	bl	810caf0 <vTaskSwitchContext>
	prvTaskExitError();
 810b716:	f7ff ff1b 	bl	810b550 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810b71a:	2300      	movs	r3, #0
}
 810b71c:	4618      	mov	r0, r3
 810b71e:	3718      	adds	r7, #24
 810b720:	46bd      	mov	sp, r7
 810b722:	bd80      	pop	{r7, pc}
 810b724:	e000ed00 	.word	0xe000ed00
 810b728:	410fc271 	.word	0x410fc271
 810b72c:	410fc270 	.word	0x410fc270
 810b730:	e000e400 	.word	0xe000e400
 810b734:	10004820 	.word	0x10004820
 810b738:	10004824 	.word	0x10004824
 810b73c:	e000ed20 	.word	0xe000ed20
 810b740:	10000010 	.word	0x10000010
 810b744:	e000ef34 	.word	0xe000ef34

0810b748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810b748:	b480      	push	{r7}
 810b74a:	b083      	sub	sp, #12
 810b74c:	af00      	add	r7, sp, #0
	__asm volatile
 810b74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b752:	f383 8811 	msr	BASEPRI, r3
 810b756:	f3bf 8f6f 	isb	sy
 810b75a:	f3bf 8f4f 	dsb	sy
 810b75e:	607b      	str	r3, [r7, #4]
}
 810b760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810b762:	4b10      	ldr	r3, [pc, #64]	@ (810b7a4 <vPortEnterCritical+0x5c>)
 810b764:	681b      	ldr	r3, [r3, #0]
 810b766:	3301      	adds	r3, #1
 810b768:	4a0e      	ldr	r2, [pc, #56]	@ (810b7a4 <vPortEnterCritical+0x5c>)
 810b76a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810b76c:	4b0d      	ldr	r3, [pc, #52]	@ (810b7a4 <vPortEnterCritical+0x5c>)
 810b76e:	681b      	ldr	r3, [r3, #0]
 810b770:	2b01      	cmp	r3, #1
 810b772:	d110      	bne.n	810b796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810b774:	4b0c      	ldr	r3, [pc, #48]	@ (810b7a8 <vPortEnterCritical+0x60>)
 810b776:	681b      	ldr	r3, [r3, #0]
 810b778:	b2db      	uxtb	r3, r3
 810b77a:	2b00      	cmp	r3, #0
 810b77c:	d00b      	beq.n	810b796 <vPortEnterCritical+0x4e>
	__asm volatile
 810b77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b782:	f383 8811 	msr	BASEPRI, r3
 810b786:	f3bf 8f6f 	isb	sy
 810b78a:	f3bf 8f4f 	dsb	sy
 810b78e:	603b      	str	r3, [r7, #0]
}
 810b790:	bf00      	nop
 810b792:	bf00      	nop
 810b794:	e7fd      	b.n	810b792 <vPortEnterCritical+0x4a>
	}
}
 810b796:	bf00      	nop
 810b798:	370c      	adds	r7, #12
 810b79a:	46bd      	mov	sp, r7
 810b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b7a0:	4770      	bx	lr
 810b7a2:	bf00      	nop
 810b7a4:	10000010 	.word	0x10000010
 810b7a8:	e000ed04 	.word	0xe000ed04

0810b7ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810b7ac:	b480      	push	{r7}
 810b7ae:	b083      	sub	sp, #12
 810b7b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810b7b2:	4b12      	ldr	r3, [pc, #72]	@ (810b7fc <vPortExitCritical+0x50>)
 810b7b4:	681b      	ldr	r3, [r3, #0]
 810b7b6:	2b00      	cmp	r3, #0
 810b7b8:	d10b      	bne.n	810b7d2 <vPortExitCritical+0x26>
	__asm volatile
 810b7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b7be:	f383 8811 	msr	BASEPRI, r3
 810b7c2:	f3bf 8f6f 	isb	sy
 810b7c6:	f3bf 8f4f 	dsb	sy
 810b7ca:	607b      	str	r3, [r7, #4]
}
 810b7cc:	bf00      	nop
 810b7ce:	bf00      	nop
 810b7d0:	e7fd      	b.n	810b7ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810b7d2:	4b0a      	ldr	r3, [pc, #40]	@ (810b7fc <vPortExitCritical+0x50>)
 810b7d4:	681b      	ldr	r3, [r3, #0]
 810b7d6:	3b01      	subs	r3, #1
 810b7d8:	4a08      	ldr	r2, [pc, #32]	@ (810b7fc <vPortExitCritical+0x50>)
 810b7da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810b7dc:	4b07      	ldr	r3, [pc, #28]	@ (810b7fc <vPortExitCritical+0x50>)
 810b7de:	681b      	ldr	r3, [r3, #0]
 810b7e0:	2b00      	cmp	r3, #0
 810b7e2:	d105      	bne.n	810b7f0 <vPortExitCritical+0x44>
 810b7e4:	2300      	movs	r3, #0
 810b7e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810b7e8:	683b      	ldr	r3, [r7, #0]
 810b7ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810b7ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810b7f0:	bf00      	nop
 810b7f2:	370c      	adds	r7, #12
 810b7f4:	46bd      	mov	sp, r7
 810b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b7fa:	4770      	bx	lr
 810b7fc:	10000010 	.word	0x10000010

0810b800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810b800:	f3ef 8009 	mrs	r0, PSP
 810b804:	f3bf 8f6f 	isb	sy
 810b808:	4b15      	ldr	r3, [pc, #84]	@ (810b860 <pxCurrentTCBConst>)
 810b80a:	681a      	ldr	r2, [r3, #0]
 810b80c:	f01e 0f10 	tst.w	lr, #16
 810b810:	bf08      	it	eq
 810b812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810b816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b81a:	6010      	str	r0, [r2, #0]
 810b81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 810b820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 810b824:	f380 8811 	msr	BASEPRI, r0
 810b828:	f3bf 8f4f 	dsb	sy
 810b82c:	f3bf 8f6f 	isb	sy
 810b830:	f001 f95e 	bl	810caf0 <vTaskSwitchContext>
 810b834:	f04f 0000 	mov.w	r0, #0
 810b838:	f380 8811 	msr	BASEPRI, r0
 810b83c:	bc09      	pop	{r0, r3}
 810b83e:	6819      	ldr	r1, [r3, #0]
 810b840:	6808      	ldr	r0, [r1, #0]
 810b842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b846:	f01e 0f10 	tst.w	lr, #16
 810b84a:	bf08      	it	eq
 810b84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810b850:	f380 8809 	msr	PSP, r0
 810b854:	f3bf 8f6f 	isb	sy
 810b858:	4770      	bx	lr
 810b85a:	bf00      	nop
 810b85c:	f3af 8000 	nop.w

0810b860 <pxCurrentTCBConst>:
 810b860:	10004868 	.word	0x10004868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810b864:	bf00      	nop
 810b866:	bf00      	nop

0810b868 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810b868:	b480      	push	{r7}
 810b86a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810b86c:	4b0b      	ldr	r3, [pc, #44]	@ (810b89c <vPortSetupTimerInterrupt+0x34>)
 810b86e:	2200      	movs	r2, #0
 810b870:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810b872:	4b0b      	ldr	r3, [pc, #44]	@ (810b8a0 <vPortSetupTimerInterrupt+0x38>)
 810b874:	2200      	movs	r2, #0
 810b876:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810b878:	4b0a      	ldr	r3, [pc, #40]	@ (810b8a4 <vPortSetupTimerInterrupt+0x3c>)
 810b87a:	681b      	ldr	r3, [r3, #0]
 810b87c:	4a0a      	ldr	r2, [pc, #40]	@ (810b8a8 <vPortSetupTimerInterrupt+0x40>)
 810b87e:	fba2 2303 	umull	r2, r3, r2, r3
 810b882:	099b      	lsrs	r3, r3, #6
 810b884:	4a09      	ldr	r2, [pc, #36]	@ (810b8ac <vPortSetupTimerInterrupt+0x44>)
 810b886:	3b01      	subs	r3, #1
 810b888:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810b88a:	4b04      	ldr	r3, [pc, #16]	@ (810b89c <vPortSetupTimerInterrupt+0x34>)
 810b88c:	2207      	movs	r2, #7
 810b88e:	601a      	str	r2, [r3, #0]
}
 810b890:	bf00      	nop
 810b892:	46bd      	mov	sp, r7
 810b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b898:	4770      	bx	lr
 810b89a:	bf00      	nop
 810b89c:	e000e010 	.word	0xe000e010
 810b8a0:	e000e018 	.word	0xe000e018
 810b8a4:	10000004 	.word	0x10000004
 810b8a8:	10624dd3 	.word	0x10624dd3
 810b8ac:	e000e014 	.word	0xe000e014

0810b8b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810b8b0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 810b8c0 <vPortEnableVFP+0x10>
 810b8b4:	6801      	ldr	r1, [r0, #0]
 810b8b6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810b8ba:	6001      	str	r1, [r0, #0]
 810b8bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810b8be:	bf00      	nop
 810b8c0:	e000ed88 	.word	0xe000ed88

0810b8c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810b8c4:	b480      	push	{r7}
 810b8c6:	b085      	sub	sp, #20
 810b8c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810b8ca:	f3ef 8305 	mrs	r3, IPSR
 810b8ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810b8d0:	68fb      	ldr	r3, [r7, #12]
 810b8d2:	2b0f      	cmp	r3, #15
 810b8d4:	d915      	bls.n	810b902 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810b8d6:	4a18      	ldr	r2, [pc, #96]	@ (810b938 <vPortValidateInterruptPriority+0x74>)
 810b8d8:	68fb      	ldr	r3, [r7, #12]
 810b8da:	4413      	add	r3, r2
 810b8dc:	781b      	ldrb	r3, [r3, #0]
 810b8de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810b8e0:	4b16      	ldr	r3, [pc, #88]	@ (810b93c <vPortValidateInterruptPriority+0x78>)
 810b8e2:	781b      	ldrb	r3, [r3, #0]
 810b8e4:	7afa      	ldrb	r2, [r7, #11]
 810b8e6:	429a      	cmp	r2, r3
 810b8e8:	d20b      	bcs.n	810b902 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810b8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b8ee:	f383 8811 	msr	BASEPRI, r3
 810b8f2:	f3bf 8f6f 	isb	sy
 810b8f6:	f3bf 8f4f 	dsb	sy
 810b8fa:	607b      	str	r3, [r7, #4]
}
 810b8fc:	bf00      	nop
 810b8fe:	bf00      	nop
 810b900:	e7fd      	b.n	810b8fe <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810b902:	4b0f      	ldr	r3, [pc, #60]	@ (810b940 <vPortValidateInterruptPriority+0x7c>)
 810b904:	681b      	ldr	r3, [r3, #0]
 810b906:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810b90a:	4b0e      	ldr	r3, [pc, #56]	@ (810b944 <vPortValidateInterruptPriority+0x80>)
 810b90c:	681b      	ldr	r3, [r3, #0]
 810b90e:	429a      	cmp	r2, r3
 810b910:	d90b      	bls.n	810b92a <vPortValidateInterruptPriority+0x66>
	__asm volatile
 810b912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b916:	f383 8811 	msr	BASEPRI, r3
 810b91a:	f3bf 8f6f 	isb	sy
 810b91e:	f3bf 8f4f 	dsb	sy
 810b922:	603b      	str	r3, [r7, #0]
}
 810b924:	bf00      	nop
 810b926:	bf00      	nop
 810b928:	e7fd      	b.n	810b926 <vPortValidateInterruptPriority+0x62>
	}
 810b92a:	bf00      	nop
 810b92c:	3714      	adds	r7, #20
 810b92e:	46bd      	mov	sp, r7
 810b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b934:	4770      	bx	lr
 810b936:	bf00      	nop
 810b938:	e000e3f0 	.word	0xe000e3f0
 810b93c:	10004820 	.word	0x10004820
 810b940:	e000ed0c 	.word	0xe000ed0c
 810b944:	10004824 	.word	0x10004824

0810b948 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810b948:	b580      	push	{r7, lr}
 810b94a:	b084      	sub	sp, #16
 810b94c:	af00      	add	r7, sp, #0
 810b94e:	6078      	str	r0, [r7, #4]
 810b950:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810b952:	687b      	ldr	r3, [r7, #4]
 810b954:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810b956:	68fb      	ldr	r3, [r7, #12]
 810b958:	2b00      	cmp	r3, #0
 810b95a:	d10b      	bne.n	810b974 <xQueueGenericReset+0x2c>
	__asm volatile
 810b95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b960:	f383 8811 	msr	BASEPRI, r3
 810b964:	f3bf 8f6f 	isb	sy
 810b968:	f3bf 8f4f 	dsb	sy
 810b96c:	60bb      	str	r3, [r7, #8]
}
 810b96e:	bf00      	nop
 810b970:	bf00      	nop
 810b972:	e7fd      	b.n	810b970 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810b974:	f7ff fee8 	bl	810b748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810b978:	68fb      	ldr	r3, [r7, #12]
 810b97a:	681a      	ldr	r2, [r3, #0]
 810b97c:	68fb      	ldr	r3, [r7, #12]
 810b97e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810b980:	68f9      	ldr	r1, [r7, #12]
 810b982:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810b984:	fb01 f303 	mul.w	r3, r1, r3
 810b988:	441a      	add	r2, r3
 810b98a:	68fb      	ldr	r3, [r7, #12]
 810b98c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810b98e:	68fb      	ldr	r3, [r7, #12]
 810b990:	2200      	movs	r2, #0
 810b992:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810b994:	68fb      	ldr	r3, [r7, #12]
 810b996:	681a      	ldr	r2, [r3, #0]
 810b998:	68fb      	ldr	r3, [r7, #12]
 810b99a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810b99c:	68fb      	ldr	r3, [r7, #12]
 810b99e:	681a      	ldr	r2, [r3, #0]
 810b9a0:	68fb      	ldr	r3, [r7, #12]
 810b9a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810b9a4:	3b01      	subs	r3, #1
 810b9a6:	68f9      	ldr	r1, [r7, #12]
 810b9a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810b9aa:	fb01 f303 	mul.w	r3, r1, r3
 810b9ae:	441a      	add	r2, r3
 810b9b0:	68fb      	ldr	r3, [r7, #12]
 810b9b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810b9b4:	68fb      	ldr	r3, [r7, #12]
 810b9b6:	22ff      	movs	r2, #255	@ 0xff
 810b9b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810b9bc:	68fb      	ldr	r3, [r7, #12]
 810b9be:	22ff      	movs	r2, #255	@ 0xff
 810b9c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 810b9c4:	683b      	ldr	r3, [r7, #0]
 810b9c6:	2b00      	cmp	r3, #0
 810b9c8:	d114      	bne.n	810b9f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810b9ca:	68fb      	ldr	r3, [r7, #12]
 810b9cc:	691b      	ldr	r3, [r3, #16]
 810b9ce:	2b00      	cmp	r3, #0
 810b9d0:	d01a      	beq.n	810ba08 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810b9d2:	68fb      	ldr	r3, [r7, #12]
 810b9d4:	3310      	adds	r3, #16
 810b9d6:	4618      	mov	r0, r3
 810b9d8:	f001 f942 	bl	810cc60 <xTaskRemoveFromEventList>
 810b9dc:	4603      	mov	r3, r0
 810b9de:	2b00      	cmp	r3, #0
 810b9e0:	d012      	beq.n	810ba08 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810b9e2:	4b0d      	ldr	r3, [pc, #52]	@ (810ba18 <xQueueGenericReset+0xd0>)
 810b9e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810b9e8:	601a      	str	r2, [r3, #0]
 810b9ea:	f3bf 8f4f 	dsb	sy
 810b9ee:	f3bf 8f6f 	isb	sy
 810b9f2:	e009      	b.n	810ba08 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810b9f4:	68fb      	ldr	r3, [r7, #12]
 810b9f6:	3310      	adds	r3, #16
 810b9f8:	4618      	mov	r0, r3
 810b9fa:	f7ff fcc1 	bl	810b380 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810b9fe:	68fb      	ldr	r3, [r7, #12]
 810ba00:	3324      	adds	r3, #36	@ 0x24
 810ba02:	4618      	mov	r0, r3
 810ba04:	f7ff fcbc 	bl	810b380 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810ba08:	f7ff fed0 	bl	810b7ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810ba0c:	2301      	movs	r3, #1
}
 810ba0e:	4618      	mov	r0, r3
 810ba10:	3710      	adds	r7, #16
 810ba12:	46bd      	mov	sp, r7
 810ba14:	bd80      	pop	{r7, pc}
 810ba16:	bf00      	nop
 810ba18:	e000ed04 	.word	0xe000ed04

0810ba1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810ba1c:	b580      	push	{r7, lr}
 810ba1e:	b08e      	sub	sp, #56	@ 0x38
 810ba20:	af02      	add	r7, sp, #8
 810ba22:	60f8      	str	r0, [r7, #12]
 810ba24:	60b9      	str	r1, [r7, #8]
 810ba26:	607a      	str	r2, [r7, #4]
 810ba28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810ba2a:	68fb      	ldr	r3, [r7, #12]
 810ba2c:	2b00      	cmp	r3, #0
 810ba2e:	d10b      	bne.n	810ba48 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 810ba30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ba34:	f383 8811 	msr	BASEPRI, r3
 810ba38:	f3bf 8f6f 	isb	sy
 810ba3c:	f3bf 8f4f 	dsb	sy
 810ba40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810ba42:	bf00      	nop
 810ba44:	bf00      	nop
 810ba46:	e7fd      	b.n	810ba44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810ba48:	683b      	ldr	r3, [r7, #0]
 810ba4a:	2b00      	cmp	r3, #0
 810ba4c:	d10b      	bne.n	810ba66 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 810ba4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ba52:	f383 8811 	msr	BASEPRI, r3
 810ba56:	f3bf 8f6f 	isb	sy
 810ba5a:	f3bf 8f4f 	dsb	sy
 810ba5e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810ba60:	bf00      	nop
 810ba62:	bf00      	nop
 810ba64:	e7fd      	b.n	810ba62 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810ba66:	687b      	ldr	r3, [r7, #4]
 810ba68:	2b00      	cmp	r3, #0
 810ba6a:	d002      	beq.n	810ba72 <xQueueGenericCreateStatic+0x56>
 810ba6c:	68bb      	ldr	r3, [r7, #8]
 810ba6e:	2b00      	cmp	r3, #0
 810ba70:	d001      	beq.n	810ba76 <xQueueGenericCreateStatic+0x5a>
 810ba72:	2301      	movs	r3, #1
 810ba74:	e000      	b.n	810ba78 <xQueueGenericCreateStatic+0x5c>
 810ba76:	2300      	movs	r3, #0
 810ba78:	2b00      	cmp	r3, #0
 810ba7a:	d10b      	bne.n	810ba94 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 810ba7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ba80:	f383 8811 	msr	BASEPRI, r3
 810ba84:	f3bf 8f6f 	isb	sy
 810ba88:	f3bf 8f4f 	dsb	sy
 810ba8c:	623b      	str	r3, [r7, #32]
}
 810ba8e:	bf00      	nop
 810ba90:	bf00      	nop
 810ba92:	e7fd      	b.n	810ba90 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810ba94:	687b      	ldr	r3, [r7, #4]
 810ba96:	2b00      	cmp	r3, #0
 810ba98:	d102      	bne.n	810baa0 <xQueueGenericCreateStatic+0x84>
 810ba9a:	68bb      	ldr	r3, [r7, #8]
 810ba9c:	2b00      	cmp	r3, #0
 810ba9e:	d101      	bne.n	810baa4 <xQueueGenericCreateStatic+0x88>
 810baa0:	2301      	movs	r3, #1
 810baa2:	e000      	b.n	810baa6 <xQueueGenericCreateStatic+0x8a>
 810baa4:	2300      	movs	r3, #0
 810baa6:	2b00      	cmp	r3, #0
 810baa8:	d10b      	bne.n	810bac2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810baaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810baae:	f383 8811 	msr	BASEPRI, r3
 810bab2:	f3bf 8f6f 	isb	sy
 810bab6:	f3bf 8f4f 	dsb	sy
 810baba:	61fb      	str	r3, [r7, #28]
}
 810babc:	bf00      	nop
 810babe:	bf00      	nop
 810bac0:	e7fd      	b.n	810babe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810bac2:	2350      	movs	r3, #80	@ 0x50
 810bac4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810bac6:	697b      	ldr	r3, [r7, #20]
 810bac8:	2b50      	cmp	r3, #80	@ 0x50
 810baca:	d00b      	beq.n	810bae4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 810bacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bad0:	f383 8811 	msr	BASEPRI, r3
 810bad4:	f3bf 8f6f 	isb	sy
 810bad8:	f3bf 8f4f 	dsb	sy
 810badc:	61bb      	str	r3, [r7, #24]
}
 810bade:	bf00      	nop
 810bae0:	bf00      	nop
 810bae2:	e7fd      	b.n	810bae0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810bae4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810bae6:	683b      	ldr	r3, [r7, #0]
 810bae8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810baea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810baec:	2b00      	cmp	r3, #0
 810baee:	d00d      	beq.n	810bb0c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810baf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810baf2:	2201      	movs	r2, #1
 810baf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810baf8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 810bafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810bafe:	9300      	str	r3, [sp, #0]
 810bb00:	4613      	mov	r3, r2
 810bb02:	687a      	ldr	r2, [r7, #4]
 810bb04:	68b9      	ldr	r1, [r7, #8]
 810bb06:	68f8      	ldr	r0, [r7, #12]
 810bb08:	f000 f805 	bl	810bb16 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810bb0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 810bb0e:	4618      	mov	r0, r3
 810bb10:	3730      	adds	r7, #48	@ 0x30
 810bb12:	46bd      	mov	sp, r7
 810bb14:	bd80      	pop	{r7, pc}

0810bb16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810bb16:	b580      	push	{r7, lr}
 810bb18:	b084      	sub	sp, #16
 810bb1a:	af00      	add	r7, sp, #0
 810bb1c:	60f8      	str	r0, [r7, #12]
 810bb1e:	60b9      	str	r1, [r7, #8]
 810bb20:	607a      	str	r2, [r7, #4]
 810bb22:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810bb24:	68bb      	ldr	r3, [r7, #8]
 810bb26:	2b00      	cmp	r3, #0
 810bb28:	d103      	bne.n	810bb32 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810bb2a:	69bb      	ldr	r3, [r7, #24]
 810bb2c:	69ba      	ldr	r2, [r7, #24]
 810bb2e:	601a      	str	r2, [r3, #0]
 810bb30:	e002      	b.n	810bb38 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810bb32:	69bb      	ldr	r3, [r7, #24]
 810bb34:	687a      	ldr	r2, [r7, #4]
 810bb36:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810bb38:	69bb      	ldr	r3, [r7, #24]
 810bb3a:	68fa      	ldr	r2, [r7, #12]
 810bb3c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810bb3e:	69bb      	ldr	r3, [r7, #24]
 810bb40:	68ba      	ldr	r2, [r7, #8]
 810bb42:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810bb44:	2101      	movs	r1, #1
 810bb46:	69b8      	ldr	r0, [r7, #24]
 810bb48:	f7ff fefe 	bl	810b948 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810bb4c:	69bb      	ldr	r3, [r7, #24]
 810bb4e:	78fa      	ldrb	r2, [r7, #3]
 810bb50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810bb54:	bf00      	nop
 810bb56:	3710      	adds	r7, #16
 810bb58:	46bd      	mov	sp, r7
 810bb5a:	bd80      	pop	{r7, pc}

0810bb5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810bb5c:	b580      	push	{r7, lr}
 810bb5e:	b08e      	sub	sp, #56	@ 0x38
 810bb60:	af00      	add	r7, sp, #0
 810bb62:	60f8      	str	r0, [r7, #12]
 810bb64:	60b9      	str	r1, [r7, #8]
 810bb66:	607a      	str	r2, [r7, #4]
 810bb68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810bb6a:	2300      	movs	r3, #0
 810bb6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810bb6e:	68fb      	ldr	r3, [r7, #12]
 810bb70:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810bb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bb74:	2b00      	cmp	r3, #0
 810bb76:	d10b      	bne.n	810bb90 <xQueueGenericSend+0x34>
	__asm volatile
 810bb78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bb7c:	f383 8811 	msr	BASEPRI, r3
 810bb80:	f3bf 8f6f 	isb	sy
 810bb84:	f3bf 8f4f 	dsb	sy
 810bb88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810bb8a:	bf00      	nop
 810bb8c:	bf00      	nop
 810bb8e:	e7fd      	b.n	810bb8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810bb90:	68bb      	ldr	r3, [r7, #8]
 810bb92:	2b00      	cmp	r3, #0
 810bb94:	d103      	bne.n	810bb9e <xQueueGenericSend+0x42>
 810bb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bb98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810bb9a:	2b00      	cmp	r3, #0
 810bb9c:	d101      	bne.n	810bba2 <xQueueGenericSend+0x46>
 810bb9e:	2301      	movs	r3, #1
 810bba0:	e000      	b.n	810bba4 <xQueueGenericSend+0x48>
 810bba2:	2300      	movs	r3, #0
 810bba4:	2b00      	cmp	r3, #0
 810bba6:	d10b      	bne.n	810bbc0 <xQueueGenericSend+0x64>
	__asm volatile
 810bba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bbac:	f383 8811 	msr	BASEPRI, r3
 810bbb0:	f3bf 8f6f 	isb	sy
 810bbb4:	f3bf 8f4f 	dsb	sy
 810bbb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810bbba:	bf00      	nop
 810bbbc:	bf00      	nop
 810bbbe:	e7fd      	b.n	810bbbc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810bbc0:	683b      	ldr	r3, [r7, #0]
 810bbc2:	2b02      	cmp	r3, #2
 810bbc4:	d103      	bne.n	810bbce <xQueueGenericSend+0x72>
 810bbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bbc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810bbca:	2b01      	cmp	r3, #1
 810bbcc:	d101      	bne.n	810bbd2 <xQueueGenericSend+0x76>
 810bbce:	2301      	movs	r3, #1
 810bbd0:	e000      	b.n	810bbd4 <xQueueGenericSend+0x78>
 810bbd2:	2300      	movs	r3, #0
 810bbd4:	2b00      	cmp	r3, #0
 810bbd6:	d10b      	bne.n	810bbf0 <xQueueGenericSend+0x94>
	__asm volatile
 810bbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bbdc:	f383 8811 	msr	BASEPRI, r3
 810bbe0:	f3bf 8f6f 	isb	sy
 810bbe4:	f3bf 8f4f 	dsb	sy
 810bbe8:	623b      	str	r3, [r7, #32]
}
 810bbea:	bf00      	nop
 810bbec:	bf00      	nop
 810bbee:	e7fd      	b.n	810bbec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810bbf0:	f001 f9fc 	bl	810cfec <xTaskGetSchedulerState>
 810bbf4:	4603      	mov	r3, r0
 810bbf6:	2b00      	cmp	r3, #0
 810bbf8:	d102      	bne.n	810bc00 <xQueueGenericSend+0xa4>
 810bbfa:	687b      	ldr	r3, [r7, #4]
 810bbfc:	2b00      	cmp	r3, #0
 810bbfe:	d101      	bne.n	810bc04 <xQueueGenericSend+0xa8>
 810bc00:	2301      	movs	r3, #1
 810bc02:	e000      	b.n	810bc06 <xQueueGenericSend+0xaa>
 810bc04:	2300      	movs	r3, #0
 810bc06:	2b00      	cmp	r3, #0
 810bc08:	d10b      	bne.n	810bc22 <xQueueGenericSend+0xc6>
	__asm volatile
 810bc0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bc0e:	f383 8811 	msr	BASEPRI, r3
 810bc12:	f3bf 8f6f 	isb	sy
 810bc16:	f3bf 8f4f 	dsb	sy
 810bc1a:	61fb      	str	r3, [r7, #28]
}
 810bc1c:	bf00      	nop
 810bc1e:	bf00      	nop
 810bc20:	e7fd      	b.n	810bc1e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810bc22:	f7ff fd91 	bl	810b748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810bc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bc28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810bc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bc2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810bc2e:	429a      	cmp	r2, r3
 810bc30:	d302      	bcc.n	810bc38 <xQueueGenericSend+0xdc>
 810bc32:	683b      	ldr	r3, [r7, #0]
 810bc34:	2b02      	cmp	r3, #2
 810bc36:	d129      	bne.n	810bc8c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810bc38:	683a      	ldr	r2, [r7, #0]
 810bc3a:	68b9      	ldr	r1, [r7, #8]
 810bc3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810bc3e:	f000 fa0f 	bl	810c060 <prvCopyDataToQueue>
 810bc42:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810bc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bc46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810bc48:	2b00      	cmp	r3, #0
 810bc4a:	d010      	beq.n	810bc6e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810bc4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bc4e:	3324      	adds	r3, #36	@ 0x24
 810bc50:	4618      	mov	r0, r3
 810bc52:	f001 f805 	bl	810cc60 <xTaskRemoveFromEventList>
 810bc56:	4603      	mov	r3, r0
 810bc58:	2b00      	cmp	r3, #0
 810bc5a:	d013      	beq.n	810bc84 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810bc5c:	4b3f      	ldr	r3, [pc, #252]	@ (810bd5c <xQueueGenericSend+0x200>)
 810bc5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810bc62:	601a      	str	r2, [r3, #0]
 810bc64:	f3bf 8f4f 	dsb	sy
 810bc68:	f3bf 8f6f 	isb	sy
 810bc6c:	e00a      	b.n	810bc84 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810bc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810bc70:	2b00      	cmp	r3, #0
 810bc72:	d007      	beq.n	810bc84 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810bc74:	4b39      	ldr	r3, [pc, #228]	@ (810bd5c <xQueueGenericSend+0x200>)
 810bc76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810bc7a:	601a      	str	r2, [r3, #0]
 810bc7c:	f3bf 8f4f 	dsb	sy
 810bc80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810bc84:	f7ff fd92 	bl	810b7ac <vPortExitCritical>
				return pdPASS;
 810bc88:	2301      	movs	r3, #1
 810bc8a:	e063      	b.n	810bd54 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810bc8c:	687b      	ldr	r3, [r7, #4]
 810bc8e:	2b00      	cmp	r3, #0
 810bc90:	d103      	bne.n	810bc9a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810bc92:	f7ff fd8b 	bl	810b7ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810bc96:	2300      	movs	r3, #0
 810bc98:	e05c      	b.n	810bd54 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810bc9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bc9c:	2b00      	cmp	r3, #0
 810bc9e:	d106      	bne.n	810bcae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810bca0:	f107 0314 	add.w	r3, r7, #20
 810bca4:	4618      	mov	r0, r3
 810bca6:	f001 f83f 	bl	810cd28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810bcaa:	2301      	movs	r3, #1
 810bcac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810bcae:	f7ff fd7d 	bl	810b7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810bcb2:	f000 fda7 	bl	810c804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810bcb6:	f7ff fd47 	bl	810b748 <vPortEnterCritical>
 810bcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bcbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810bcc0:	b25b      	sxtb	r3, r3
 810bcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bcc6:	d103      	bne.n	810bcd0 <xQueueGenericSend+0x174>
 810bcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bcca:	2200      	movs	r2, #0
 810bccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810bcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bcd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810bcd6:	b25b      	sxtb	r3, r3
 810bcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bcdc:	d103      	bne.n	810bce6 <xQueueGenericSend+0x18a>
 810bcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bce0:	2200      	movs	r2, #0
 810bce2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810bce6:	f7ff fd61 	bl	810b7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810bcea:	1d3a      	adds	r2, r7, #4
 810bcec:	f107 0314 	add.w	r3, r7, #20
 810bcf0:	4611      	mov	r1, r2
 810bcf2:	4618      	mov	r0, r3
 810bcf4:	f001 f82e 	bl	810cd54 <xTaskCheckForTimeOut>
 810bcf8:	4603      	mov	r3, r0
 810bcfa:	2b00      	cmp	r3, #0
 810bcfc:	d124      	bne.n	810bd48 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810bcfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810bd00:	f000 faa6 	bl	810c250 <prvIsQueueFull>
 810bd04:	4603      	mov	r3, r0
 810bd06:	2b00      	cmp	r3, #0
 810bd08:	d018      	beq.n	810bd3c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810bd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bd0c:	3310      	adds	r3, #16
 810bd0e:	687a      	ldr	r2, [r7, #4]
 810bd10:	4611      	mov	r1, r2
 810bd12:	4618      	mov	r0, r3
 810bd14:	f000 ff52 	bl	810cbbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810bd18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810bd1a:	f000 fa31 	bl	810c180 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810bd1e:	f000 fd7f 	bl	810c820 <xTaskResumeAll>
 810bd22:	4603      	mov	r3, r0
 810bd24:	2b00      	cmp	r3, #0
 810bd26:	f47f af7c 	bne.w	810bc22 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810bd2a:	4b0c      	ldr	r3, [pc, #48]	@ (810bd5c <xQueueGenericSend+0x200>)
 810bd2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810bd30:	601a      	str	r2, [r3, #0]
 810bd32:	f3bf 8f4f 	dsb	sy
 810bd36:	f3bf 8f6f 	isb	sy
 810bd3a:	e772      	b.n	810bc22 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810bd3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810bd3e:	f000 fa1f 	bl	810c180 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810bd42:	f000 fd6d 	bl	810c820 <xTaskResumeAll>
 810bd46:	e76c      	b.n	810bc22 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810bd48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810bd4a:	f000 fa19 	bl	810c180 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810bd4e:	f000 fd67 	bl	810c820 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810bd52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810bd54:	4618      	mov	r0, r3
 810bd56:	3738      	adds	r7, #56	@ 0x38
 810bd58:	46bd      	mov	sp, r7
 810bd5a:	bd80      	pop	{r7, pc}
 810bd5c:	e000ed04 	.word	0xe000ed04

0810bd60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810bd60:	b580      	push	{r7, lr}
 810bd62:	b090      	sub	sp, #64	@ 0x40
 810bd64:	af00      	add	r7, sp, #0
 810bd66:	60f8      	str	r0, [r7, #12]
 810bd68:	60b9      	str	r1, [r7, #8]
 810bd6a:	607a      	str	r2, [r7, #4]
 810bd6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810bd6e:	68fb      	ldr	r3, [r7, #12]
 810bd70:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810bd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd74:	2b00      	cmp	r3, #0
 810bd76:	d10b      	bne.n	810bd90 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810bd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bd7c:	f383 8811 	msr	BASEPRI, r3
 810bd80:	f3bf 8f6f 	isb	sy
 810bd84:	f3bf 8f4f 	dsb	sy
 810bd88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810bd8a:	bf00      	nop
 810bd8c:	bf00      	nop
 810bd8e:	e7fd      	b.n	810bd8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810bd90:	68bb      	ldr	r3, [r7, #8]
 810bd92:	2b00      	cmp	r3, #0
 810bd94:	d103      	bne.n	810bd9e <xQueueGenericSendFromISR+0x3e>
 810bd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810bd9a:	2b00      	cmp	r3, #0
 810bd9c:	d101      	bne.n	810bda2 <xQueueGenericSendFromISR+0x42>
 810bd9e:	2301      	movs	r3, #1
 810bda0:	e000      	b.n	810bda4 <xQueueGenericSendFromISR+0x44>
 810bda2:	2300      	movs	r3, #0
 810bda4:	2b00      	cmp	r3, #0
 810bda6:	d10b      	bne.n	810bdc0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810bda8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bdac:	f383 8811 	msr	BASEPRI, r3
 810bdb0:	f3bf 8f6f 	isb	sy
 810bdb4:	f3bf 8f4f 	dsb	sy
 810bdb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810bdba:	bf00      	nop
 810bdbc:	bf00      	nop
 810bdbe:	e7fd      	b.n	810bdbc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810bdc0:	683b      	ldr	r3, [r7, #0]
 810bdc2:	2b02      	cmp	r3, #2
 810bdc4:	d103      	bne.n	810bdce <xQueueGenericSendFromISR+0x6e>
 810bdc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bdc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810bdca:	2b01      	cmp	r3, #1
 810bdcc:	d101      	bne.n	810bdd2 <xQueueGenericSendFromISR+0x72>
 810bdce:	2301      	movs	r3, #1
 810bdd0:	e000      	b.n	810bdd4 <xQueueGenericSendFromISR+0x74>
 810bdd2:	2300      	movs	r3, #0
 810bdd4:	2b00      	cmp	r3, #0
 810bdd6:	d10b      	bne.n	810bdf0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 810bdd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bddc:	f383 8811 	msr	BASEPRI, r3
 810bde0:	f3bf 8f6f 	isb	sy
 810bde4:	f3bf 8f4f 	dsb	sy
 810bde8:	623b      	str	r3, [r7, #32]
}
 810bdea:	bf00      	nop
 810bdec:	bf00      	nop
 810bdee:	e7fd      	b.n	810bdec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810bdf0:	f7ff fd68 	bl	810b8c4 <vPortValidateInterruptPriority>
	__asm volatile
 810bdf4:	f3ef 8211 	mrs	r2, BASEPRI
 810bdf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bdfc:	f383 8811 	msr	BASEPRI, r3
 810be00:	f3bf 8f6f 	isb	sy
 810be04:	f3bf 8f4f 	dsb	sy
 810be08:	61fa      	str	r2, [r7, #28]
 810be0a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810be0c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810be0e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810be10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810be14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810be18:	429a      	cmp	r2, r3
 810be1a:	d302      	bcc.n	810be22 <xQueueGenericSendFromISR+0xc2>
 810be1c:	683b      	ldr	r3, [r7, #0]
 810be1e:	2b02      	cmp	r3, #2
 810be20:	d12f      	bne.n	810be82 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810be22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810be28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810be2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810be30:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810be32:	683a      	ldr	r2, [r7, #0]
 810be34:	68b9      	ldr	r1, [r7, #8]
 810be36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810be38:	f000 f912 	bl	810c060 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810be3c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810be40:	f1b3 3fff 	cmp.w	r3, #4294967295
 810be44:	d112      	bne.n	810be6c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810be46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810be4a:	2b00      	cmp	r3, #0
 810be4c:	d016      	beq.n	810be7c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810be4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be50:	3324      	adds	r3, #36	@ 0x24
 810be52:	4618      	mov	r0, r3
 810be54:	f000 ff04 	bl	810cc60 <xTaskRemoveFromEventList>
 810be58:	4603      	mov	r3, r0
 810be5a:	2b00      	cmp	r3, #0
 810be5c:	d00e      	beq.n	810be7c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810be5e:	687b      	ldr	r3, [r7, #4]
 810be60:	2b00      	cmp	r3, #0
 810be62:	d00b      	beq.n	810be7c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810be64:	687b      	ldr	r3, [r7, #4]
 810be66:	2201      	movs	r2, #1
 810be68:	601a      	str	r2, [r3, #0]
 810be6a:	e007      	b.n	810be7c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810be6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810be70:	3301      	adds	r3, #1
 810be72:	b2db      	uxtb	r3, r3
 810be74:	b25a      	sxtb	r2, r3
 810be76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810be7c:	2301      	movs	r3, #1
 810be7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810be80:	e001      	b.n	810be86 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810be82:	2300      	movs	r3, #0
 810be84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810be86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810be88:	617b      	str	r3, [r7, #20]
	__asm volatile
 810be8a:	697b      	ldr	r3, [r7, #20]
 810be8c:	f383 8811 	msr	BASEPRI, r3
}
 810be90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810be92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810be94:	4618      	mov	r0, r3
 810be96:	3740      	adds	r7, #64	@ 0x40
 810be98:	46bd      	mov	sp, r7
 810be9a:	bd80      	pop	{r7, pc}

0810be9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810be9c:	b580      	push	{r7, lr}
 810be9e:	b08c      	sub	sp, #48	@ 0x30
 810bea0:	af00      	add	r7, sp, #0
 810bea2:	60f8      	str	r0, [r7, #12]
 810bea4:	60b9      	str	r1, [r7, #8]
 810bea6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810bea8:	2300      	movs	r3, #0
 810beaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810beac:	68fb      	ldr	r3, [r7, #12]
 810beae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810beb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810beb2:	2b00      	cmp	r3, #0
 810beb4:	d10b      	bne.n	810bece <xQueueReceive+0x32>
	__asm volatile
 810beb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810beba:	f383 8811 	msr	BASEPRI, r3
 810bebe:	f3bf 8f6f 	isb	sy
 810bec2:	f3bf 8f4f 	dsb	sy
 810bec6:	623b      	str	r3, [r7, #32]
}
 810bec8:	bf00      	nop
 810beca:	bf00      	nop
 810becc:	e7fd      	b.n	810beca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810bece:	68bb      	ldr	r3, [r7, #8]
 810bed0:	2b00      	cmp	r3, #0
 810bed2:	d103      	bne.n	810bedc <xQueueReceive+0x40>
 810bed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810bed8:	2b00      	cmp	r3, #0
 810beda:	d101      	bne.n	810bee0 <xQueueReceive+0x44>
 810bedc:	2301      	movs	r3, #1
 810bede:	e000      	b.n	810bee2 <xQueueReceive+0x46>
 810bee0:	2300      	movs	r3, #0
 810bee2:	2b00      	cmp	r3, #0
 810bee4:	d10b      	bne.n	810befe <xQueueReceive+0x62>
	__asm volatile
 810bee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810beea:	f383 8811 	msr	BASEPRI, r3
 810beee:	f3bf 8f6f 	isb	sy
 810bef2:	f3bf 8f4f 	dsb	sy
 810bef6:	61fb      	str	r3, [r7, #28]
}
 810bef8:	bf00      	nop
 810befa:	bf00      	nop
 810befc:	e7fd      	b.n	810befa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810befe:	f001 f875 	bl	810cfec <xTaskGetSchedulerState>
 810bf02:	4603      	mov	r3, r0
 810bf04:	2b00      	cmp	r3, #0
 810bf06:	d102      	bne.n	810bf0e <xQueueReceive+0x72>
 810bf08:	687b      	ldr	r3, [r7, #4]
 810bf0a:	2b00      	cmp	r3, #0
 810bf0c:	d101      	bne.n	810bf12 <xQueueReceive+0x76>
 810bf0e:	2301      	movs	r3, #1
 810bf10:	e000      	b.n	810bf14 <xQueueReceive+0x78>
 810bf12:	2300      	movs	r3, #0
 810bf14:	2b00      	cmp	r3, #0
 810bf16:	d10b      	bne.n	810bf30 <xQueueReceive+0x94>
	__asm volatile
 810bf18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bf1c:	f383 8811 	msr	BASEPRI, r3
 810bf20:	f3bf 8f6f 	isb	sy
 810bf24:	f3bf 8f4f 	dsb	sy
 810bf28:	61bb      	str	r3, [r7, #24]
}
 810bf2a:	bf00      	nop
 810bf2c:	bf00      	nop
 810bf2e:	e7fd      	b.n	810bf2c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810bf30:	f7ff fc0a 	bl	810b748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810bf34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bf36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810bf38:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810bf3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bf3c:	2b00      	cmp	r3, #0
 810bf3e:	d01f      	beq.n	810bf80 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810bf40:	68b9      	ldr	r1, [r7, #8]
 810bf42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810bf44:	f000 f8f6 	bl	810c134 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810bf48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bf4a:	1e5a      	subs	r2, r3, #1
 810bf4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bf4e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810bf50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bf52:	691b      	ldr	r3, [r3, #16]
 810bf54:	2b00      	cmp	r3, #0
 810bf56:	d00f      	beq.n	810bf78 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810bf58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bf5a:	3310      	adds	r3, #16
 810bf5c:	4618      	mov	r0, r3
 810bf5e:	f000 fe7f 	bl	810cc60 <xTaskRemoveFromEventList>
 810bf62:	4603      	mov	r3, r0
 810bf64:	2b00      	cmp	r3, #0
 810bf66:	d007      	beq.n	810bf78 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810bf68:	4b3c      	ldr	r3, [pc, #240]	@ (810c05c <xQueueReceive+0x1c0>)
 810bf6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810bf6e:	601a      	str	r2, [r3, #0]
 810bf70:	f3bf 8f4f 	dsb	sy
 810bf74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810bf78:	f7ff fc18 	bl	810b7ac <vPortExitCritical>
				return pdPASS;
 810bf7c:	2301      	movs	r3, #1
 810bf7e:	e069      	b.n	810c054 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810bf80:	687b      	ldr	r3, [r7, #4]
 810bf82:	2b00      	cmp	r3, #0
 810bf84:	d103      	bne.n	810bf8e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810bf86:	f7ff fc11 	bl	810b7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810bf8a:	2300      	movs	r3, #0
 810bf8c:	e062      	b.n	810c054 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810bf8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810bf90:	2b00      	cmp	r3, #0
 810bf92:	d106      	bne.n	810bfa2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810bf94:	f107 0310 	add.w	r3, r7, #16
 810bf98:	4618      	mov	r0, r3
 810bf9a:	f000 fec5 	bl	810cd28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810bf9e:	2301      	movs	r3, #1
 810bfa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810bfa2:	f7ff fc03 	bl	810b7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810bfa6:	f000 fc2d 	bl	810c804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810bfaa:	f7ff fbcd 	bl	810b748 <vPortEnterCritical>
 810bfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bfb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810bfb4:	b25b      	sxtb	r3, r3
 810bfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bfba:	d103      	bne.n	810bfc4 <xQueueReceive+0x128>
 810bfbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bfbe:	2200      	movs	r2, #0
 810bfc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810bfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bfc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810bfca:	b25b      	sxtb	r3, r3
 810bfcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bfd0:	d103      	bne.n	810bfda <xQueueReceive+0x13e>
 810bfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bfd4:	2200      	movs	r2, #0
 810bfd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810bfda:	f7ff fbe7 	bl	810b7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810bfde:	1d3a      	adds	r2, r7, #4
 810bfe0:	f107 0310 	add.w	r3, r7, #16
 810bfe4:	4611      	mov	r1, r2
 810bfe6:	4618      	mov	r0, r3
 810bfe8:	f000 feb4 	bl	810cd54 <xTaskCheckForTimeOut>
 810bfec:	4603      	mov	r3, r0
 810bfee:	2b00      	cmp	r3, #0
 810bff0:	d123      	bne.n	810c03a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810bff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810bff4:	f000 f916 	bl	810c224 <prvIsQueueEmpty>
 810bff8:	4603      	mov	r3, r0
 810bffa:	2b00      	cmp	r3, #0
 810bffc:	d017      	beq.n	810c02e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810bffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c000:	3324      	adds	r3, #36	@ 0x24
 810c002:	687a      	ldr	r2, [r7, #4]
 810c004:	4611      	mov	r1, r2
 810c006:	4618      	mov	r0, r3
 810c008:	f000 fdd8 	bl	810cbbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810c00c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810c00e:	f000 f8b7 	bl	810c180 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810c012:	f000 fc05 	bl	810c820 <xTaskResumeAll>
 810c016:	4603      	mov	r3, r0
 810c018:	2b00      	cmp	r3, #0
 810c01a:	d189      	bne.n	810bf30 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 810c01c:	4b0f      	ldr	r3, [pc, #60]	@ (810c05c <xQueueReceive+0x1c0>)
 810c01e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c022:	601a      	str	r2, [r3, #0]
 810c024:	f3bf 8f4f 	dsb	sy
 810c028:	f3bf 8f6f 	isb	sy
 810c02c:	e780      	b.n	810bf30 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810c02e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810c030:	f000 f8a6 	bl	810c180 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810c034:	f000 fbf4 	bl	810c820 <xTaskResumeAll>
 810c038:	e77a      	b.n	810bf30 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810c03a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810c03c:	f000 f8a0 	bl	810c180 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810c040:	f000 fbee 	bl	810c820 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810c044:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810c046:	f000 f8ed 	bl	810c224 <prvIsQueueEmpty>
 810c04a:	4603      	mov	r3, r0
 810c04c:	2b00      	cmp	r3, #0
 810c04e:	f43f af6f 	beq.w	810bf30 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810c052:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810c054:	4618      	mov	r0, r3
 810c056:	3730      	adds	r7, #48	@ 0x30
 810c058:	46bd      	mov	sp, r7
 810c05a:	bd80      	pop	{r7, pc}
 810c05c:	e000ed04 	.word	0xe000ed04

0810c060 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810c060:	b580      	push	{r7, lr}
 810c062:	b086      	sub	sp, #24
 810c064:	af00      	add	r7, sp, #0
 810c066:	60f8      	str	r0, [r7, #12]
 810c068:	60b9      	str	r1, [r7, #8]
 810c06a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810c06c:	2300      	movs	r3, #0
 810c06e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810c070:	68fb      	ldr	r3, [r7, #12]
 810c072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c074:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810c076:	68fb      	ldr	r3, [r7, #12]
 810c078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c07a:	2b00      	cmp	r3, #0
 810c07c:	d10d      	bne.n	810c09a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810c07e:	68fb      	ldr	r3, [r7, #12]
 810c080:	681b      	ldr	r3, [r3, #0]
 810c082:	2b00      	cmp	r3, #0
 810c084:	d14d      	bne.n	810c122 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810c086:	68fb      	ldr	r3, [r7, #12]
 810c088:	689b      	ldr	r3, [r3, #8]
 810c08a:	4618      	mov	r0, r3
 810c08c:	f000 ffcc 	bl	810d028 <xTaskPriorityDisinherit>
 810c090:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810c092:	68fb      	ldr	r3, [r7, #12]
 810c094:	2200      	movs	r2, #0
 810c096:	609a      	str	r2, [r3, #8]
 810c098:	e043      	b.n	810c122 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810c09a:	687b      	ldr	r3, [r7, #4]
 810c09c:	2b00      	cmp	r3, #0
 810c09e:	d119      	bne.n	810c0d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810c0a0:	68fb      	ldr	r3, [r7, #12]
 810c0a2:	6858      	ldr	r0, [r3, #4]
 810c0a4:	68fb      	ldr	r3, [r7, #12]
 810c0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c0a8:	461a      	mov	r2, r3
 810c0aa:	68b9      	ldr	r1, [r7, #8]
 810c0ac:	f002 fa8b 	bl	810e5c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810c0b0:	68fb      	ldr	r3, [r7, #12]
 810c0b2:	685a      	ldr	r2, [r3, #4]
 810c0b4:	68fb      	ldr	r3, [r7, #12]
 810c0b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c0b8:	441a      	add	r2, r3
 810c0ba:	68fb      	ldr	r3, [r7, #12]
 810c0bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810c0be:	68fb      	ldr	r3, [r7, #12]
 810c0c0:	685a      	ldr	r2, [r3, #4]
 810c0c2:	68fb      	ldr	r3, [r7, #12]
 810c0c4:	689b      	ldr	r3, [r3, #8]
 810c0c6:	429a      	cmp	r2, r3
 810c0c8:	d32b      	bcc.n	810c122 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810c0ca:	68fb      	ldr	r3, [r7, #12]
 810c0cc:	681a      	ldr	r2, [r3, #0]
 810c0ce:	68fb      	ldr	r3, [r7, #12]
 810c0d0:	605a      	str	r2, [r3, #4]
 810c0d2:	e026      	b.n	810c122 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810c0d4:	68fb      	ldr	r3, [r7, #12]
 810c0d6:	68d8      	ldr	r0, [r3, #12]
 810c0d8:	68fb      	ldr	r3, [r7, #12]
 810c0da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c0dc:	461a      	mov	r2, r3
 810c0de:	68b9      	ldr	r1, [r7, #8]
 810c0e0:	f002 fa71 	bl	810e5c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810c0e4:	68fb      	ldr	r3, [r7, #12]
 810c0e6:	68da      	ldr	r2, [r3, #12]
 810c0e8:	68fb      	ldr	r3, [r7, #12]
 810c0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c0ec:	425b      	negs	r3, r3
 810c0ee:	441a      	add	r2, r3
 810c0f0:	68fb      	ldr	r3, [r7, #12]
 810c0f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810c0f4:	68fb      	ldr	r3, [r7, #12]
 810c0f6:	68da      	ldr	r2, [r3, #12]
 810c0f8:	68fb      	ldr	r3, [r7, #12]
 810c0fa:	681b      	ldr	r3, [r3, #0]
 810c0fc:	429a      	cmp	r2, r3
 810c0fe:	d207      	bcs.n	810c110 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810c100:	68fb      	ldr	r3, [r7, #12]
 810c102:	689a      	ldr	r2, [r3, #8]
 810c104:	68fb      	ldr	r3, [r7, #12]
 810c106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c108:	425b      	negs	r3, r3
 810c10a:	441a      	add	r2, r3
 810c10c:	68fb      	ldr	r3, [r7, #12]
 810c10e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810c110:	687b      	ldr	r3, [r7, #4]
 810c112:	2b02      	cmp	r3, #2
 810c114:	d105      	bne.n	810c122 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810c116:	693b      	ldr	r3, [r7, #16]
 810c118:	2b00      	cmp	r3, #0
 810c11a:	d002      	beq.n	810c122 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810c11c:	693b      	ldr	r3, [r7, #16]
 810c11e:	3b01      	subs	r3, #1
 810c120:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810c122:	693b      	ldr	r3, [r7, #16]
 810c124:	1c5a      	adds	r2, r3, #1
 810c126:	68fb      	ldr	r3, [r7, #12]
 810c128:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810c12a:	697b      	ldr	r3, [r7, #20]
}
 810c12c:	4618      	mov	r0, r3
 810c12e:	3718      	adds	r7, #24
 810c130:	46bd      	mov	sp, r7
 810c132:	bd80      	pop	{r7, pc}

0810c134 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810c134:	b580      	push	{r7, lr}
 810c136:	b082      	sub	sp, #8
 810c138:	af00      	add	r7, sp, #0
 810c13a:	6078      	str	r0, [r7, #4]
 810c13c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810c13e:	687b      	ldr	r3, [r7, #4]
 810c140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c142:	2b00      	cmp	r3, #0
 810c144:	d018      	beq.n	810c178 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810c146:	687b      	ldr	r3, [r7, #4]
 810c148:	68da      	ldr	r2, [r3, #12]
 810c14a:	687b      	ldr	r3, [r7, #4]
 810c14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c14e:	441a      	add	r2, r3
 810c150:	687b      	ldr	r3, [r7, #4]
 810c152:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810c154:	687b      	ldr	r3, [r7, #4]
 810c156:	68da      	ldr	r2, [r3, #12]
 810c158:	687b      	ldr	r3, [r7, #4]
 810c15a:	689b      	ldr	r3, [r3, #8]
 810c15c:	429a      	cmp	r2, r3
 810c15e:	d303      	bcc.n	810c168 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810c160:	687b      	ldr	r3, [r7, #4]
 810c162:	681a      	ldr	r2, [r3, #0]
 810c164:	687b      	ldr	r3, [r7, #4]
 810c166:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810c168:	687b      	ldr	r3, [r7, #4]
 810c16a:	68d9      	ldr	r1, [r3, #12]
 810c16c:	687b      	ldr	r3, [r7, #4]
 810c16e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c170:	461a      	mov	r2, r3
 810c172:	6838      	ldr	r0, [r7, #0]
 810c174:	f002 fa27 	bl	810e5c6 <memcpy>
	}
}
 810c178:	bf00      	nop
 810c17a:	3708      	adds	r7, #8
 810c17c:	46bd      	mov	sp, r7
 810c17e:	bd80      	pop	{r7, pc}

0810c180 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810c180:	b580      	push	{r7, lr}
 810c182:	b084      	sub	sp, #16
 810c184:	af00      	add	r7, sp, #0
 810c186:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810c188:	f7ff fade 	bl	810b748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810c18c:	687b      	ldr	r3, [r7, #4]
 810c18e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810c192:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810c194:	e011      	b.n	810c1ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810c196:	687b      	ldr	r3, [r7, #4]
 810c198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c19a:	2b00      	cmp	r3, #0
 810c19c:	d012      	beq.n	810c1c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810c19e:	687b      	ldr	r3, [r7, #4]
 810c1a0:	3324      	adds	r3, #36	@ 0x24
 810c1a2:	4618      	mov	r0, r3
 810c1a4:	f000 fd5c 	bl	810cc60 <xTaskRemoveFromEventList>
 810c1a8:	4603      	mov	r3, r0
 810c1aa:	2b00      	cmp	r3, #0
 810c1ac:	d001      	beq.n	810c1b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810c1ae:	f000 fe35 	bl	810ce1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810c1b2:	7bfb      	ldrb	r3, [r7, #15]
 810c1b4:	3b01      	subs	r3, #1
 810c1b6:	b2db      	uxtb	r3, r3
 810c1b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810c1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810c1be:	2b00      	cmp	r3, #0
 810c1c0:	dce9      	bgt.n	810c196 <prvUnlockQueue+0x16>
 810c1c2:	e000      	b.n	810c1c6 <prvUnlockQueue+0x46>
					break;
 810c1c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810c1c6:	687b      	ldr	r3, [r7, #4]
 810c1c8:	22ff      	movs	r2, #255	@ 0xff
 810c1ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810c1ce:	f7ff faed 	bl	810b7ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810c1d2:	f7ff fab9 	bl	810b748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810c1d6:	687b      	ldr	r3, [r7, #4]
 810c1d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810c1dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810c1de:	e011      	b.n	810c204 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810c1e0:	687b      	ldr	r3, [r7, #4]
 810c1e2:	691b      	ldr	r3, [r3, #16]
 810c1e4:	2b00      	cmp	r3, #0
 810c1e6:	d012      	beq.n	810c20e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810c1e8:	687b      	ldr	r3, [r7, #4]
 810c1ea:	3310      	adds	r3, #16
 810c1ec:	4618      	mov	r0, r3
 810c1ee:	f000 fd37 	bl	810cc60 <xTaskRemoveFromEventList>
 810c1f2:	4603      	mov	r3, r0
 810c1f4:	2b00      	cmp	r3, #0
 810c1f6:	d001      	beq.n	810c1fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810c1f8:	f000 fe10 	bl	810ce1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810c1fc:	7bbb      	ldrb	r3, [r7, #14]
 810c1fe:	3b01      	subs	r3, #1
 810c200:	b2db      	uxtb	r3, r3
 810c202:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810c204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810c208:	2b00      	cmp	r3, #0
 810c20a:	dce9      	bgt.n	810c1e0 <prvUnlockQueue+0x60>
 810c20c:	e000      	b.n	810c210 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810c20e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810c210:	687b      	ldr	r3, [r7, #4]
 810c212:	22ff      	movs	r2, #255	@ 0xff
 810c214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810c218:	f7ff fac8 	bl	810b7ac <vPortExitCritical>
}
 810c21c:	bf00      	nop
 810c21e:	3710      	adds	r7, #16
 810c220:	46bd      	mov	sp, r7
 810c222:	bd80      	pop	{r7, pc}

0810c224 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810c224:	b580      	push	{r7, lr}
 810c226:	b084      	sub	sp, #16
 810c228:	af00      	add	r7, sp, #0
 810c22a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810c22c:	f7ff fa8c 	bl	810b748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810c230:	687b      	ldr	r3, [r7, #4]
 810c232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c234:	2b00      	cmp	r3, #0
 810c236:	d102      	bne.n	810c23e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810c238:	2301      	movs	r3, #1
 810c23a:	60fb      	str	r3, [r7, #12]
 810c23c:	e001      	b.n	810c242 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810c23e:	2300      	movs	r3, #0
 810c240:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810c242:	f7ff fab3 	bl	810b7ac <vPortExitCritical>

	return xReturn;
 810c246:	68fb      	ldr	r3, [r7, #12]
}
 810c248:	4618      	mov	r0, r3
 810c24a:	3710      	adds	r7, #16
 810c24c:	46bd      	mov	sp, r7
 810c24e:	bd80      	pop	{r7, pc}

0810c250 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810c250:	b580      	push	{r7, lr}
 810c252:	b084      	sub	sp, #16
 810c254:	af00      	add	r7, sp, #0
 810c256:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810c258:	f7ff fa76 	bl	810b748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810c25c:	687b      	ldr	r3, [r7, #4]
 810c25e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810c260:	687b      	ldr	r3, [r7, #4]
 810c262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c264:	429a      	cmp	r2, r3
 810c266:	d102      	bne.n	810c26e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810c268:	2301      	movs	r3, #1
 810c26a:	60fb      	str	r3, [r7, #12]
 810c26c:	e001      	b.n	810c272 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810c26e:	2300      	movs	r3, #0
 810c270:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810c272:	f7ff fa9b 	bl	810b7ac <vPortExitCritical>

	return xReturn;
 810c276:	68fb      	ldr	r3, [r7, #12]
}
 810c278:	4618      	mov	r0, r3
 810c27a:	3710      	adds	r7, #16
 810c27c:	46bd      	mov	sp, r7
 810c27e:	bd80      	pop	{r7, pc}

0810c280 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810c280:	b480      	push	{r7}
 810c282:	b085      	sub	sp, #20
 810c284:	af00      	add	r7, sp, #0
 810c286:	6078      	str	r0, [r7, #4]
 810c288:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810c28a:	2300      	movs	r3, #0
 810c28c:	60fb      	str	r3, [r7, #12]
 810c28e:	e014      	b.n	810c2ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810c290:	4a0f      	ldr	r2, [pc, #60]	@ (810c2d0 <vQueueAddToRegistry+0x50>)
 810c292:	68fb      	ldr	r3, [r7, #12]
 810c294:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810c298:	2b00      	cmp	r3, #0
 810c29a:	d10b      	bne.n	810c2b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810c29c:	490c      	ldr	r1, [pc, #48]	@ (810c2d0 <vQueueAddToRegistry+0x50>)
 810c29e:	68fb      	ldr	r3, [r7, #12]
 810c2a0:	683a      	ldr	r2, [r7, #0]
 810c2a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810c2a6:	4a0a      	ldr	r2, [pc, #40]	@ (810c2d0 <vQueueAddToRegistry+0x50>)
 810c2a8:	68fb      	ldr	r3, [r7, #12]
 810c2aa:	00db      	lsls	r3, r3, #3
 810c2ac:	4413      	add	r3, r2
 810c2ae:	687a      	ldr	r2, [r7, #4]
 810c2b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810c2b2:	e006      	b.n	810c2c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810c2b4:	68fb      	ldr	r3, [r7, #12]
 810c2b6:	3301      	adds	r3, #1
 810c2b8:	60fb      	str	r3, [r7, #12]
 810c2ba:	68fb      	ldr	r3, [r7, #12]
 810c2bc:	2b07      	cmp	r3, #7
 810c2be:	d9e7      	bls.n	810c290 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810c2c0:	bf00      	nop
 810c2c2:	bf00      	nop
 810c2c4:	3714      	adds	r7, #20
 810c2c6:	46bd      	mov	sp, r7
 810c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2cc:	4770      	bx	lr
 810c2ce:	bf00      	nop
 810c2d0:	10004828 	.word	0x10004828

0810c2d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810c2d4:	b580      	push	{r7, lr}
 810c2d6:	b086      	sub	sp, #24
 810c2d8:	af00      	add	r7, sp, #0
 810c2da:	60f8      	str	r0, [r7, #12]
 810c2dc:	60b9      	str	r1, [r7, #8]
 810c2de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810c2e0:	68fb      	ldr	r3, [r7, #12]
 810c2e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810c2e4:	f7ff fa30 	bl	810b748 <vPortEnterCritical>
 810c2e8:	697b      	ldr	r3, [r7, #20]
 810c2ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810c2ee:	b25b      	sxtb	r3, r3
 810c2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c2f4:	d103      	bne.n	810c2fe <vQueueWaitForMessageRestricted+0x2a>
 810c2f6:	697b      	ldr	r3, [r7, #20]
 810c2f8:	2200      	movs	r2, #0
 810c2fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810c2fe:	697b      	ldr	r3, [r7, #20]
 810c300:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810c304:	b25b      	sxtb	r3, r3
 810c306:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c30a:	d103      	bne.n	810c314 <vQueueWaitForMessageRestricted+0x40>
 810c30c:	697b      	ldr	r3, [r7, #20]
 810c30e:	2200      	movs	r2, #0
 810c310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810c314:	f7ff fa4a 	bl	810b7ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810c318:	697b      	ldr	r3, [r7, #20]
 810c31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c31c:	2b00      	cmp	r3, #0
 810c31e:	d106      	bne.n	810c32e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810c320:	697b      	ldr	r3, [r7, #20]
 810c322:	3324      	adds	r3, #36	@ 0x24
 810c324:	687a      	ldr	r2, [r7, #4]
 810c326:	68b9      	ldr	r1, [r7, #8]
 810c328:	4618      	mov	r0, r3
 810c32a:	f000 fc6d 	bl	810cc08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810c32e:	6978      	ldr	r0, [r7, #20]
 810c330:	f7ff ff26 	bl	810c180 <prvUnlockQueue>
	}
 810c334:	bf00      	nop
 810c336:	3718      	adds	r7, #24
 810c338:	46bd      	mov	sp, r7
 810c33a:	bd80      	pop	{r7, pc}

0810c33c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810c33c:	b580      	push	{r7, lr}
 810c33e:	b08e      	sub	sp, #56	@ 0x38
 810c340:	af04      	add	r7, sp, #16
 810c342:	60f8      	str	r0, [r7, #12]
 810c344:	60b9      	str	r1, [r7, #8]
 810c346:	607a      	str	r2, [r7, #4]
 810c348:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810c34a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c34c:	2b00      	cmp	r3, #0
 810c34e:	d10b      	bne.n	810c368 <xTaskCreateStatic+0x2c>
	__asm volatile
 810c350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c354:	f383 8811 	msr	BASEPRI, r3
 810c358:	f3bf 8f6f 	isb	sy
 810c35c:	f3bf 8f4f 	dsb	sy
 810c360:	623b      	str	r3, [r7, #32]
}
 810c362:	bf00      	nop
 810c364:	bf00      	nop
 810c366:	e7fd      	b.n	810c364 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810c368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c36a:	2b00      	cmp	r3, #0
 810c36c:	d10b      	bne.n	810c386 <xTaskCreateStatic+0x4a>
	__asm volatile
 810c36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c372:	f383 8811 	msr	BASEPRI, r3
 810c376:	f3bf 8f6f 	isb	sy
 810c37a:	f3bf 8f4f 	dsb	sy
 810c37e:	61fb      	str	r3, [r7, #28]
}
 810c380:	bf00      	nop
 810c382:	bf00      	nop
 810c384:	e7fd      	b.n	810c382 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810c386:	23a8      	movs	r3, #168	@ 0xa8
 810c388:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810c38a:	693b      	ldr	r3, [r7, #16]
 810c38c:	2ba8      	cmp	r3, #168	@ 0xa8
 810c38e:	d00b      	beq.n	810c3a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 810c390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c394:	f383 8811 	msr	BASEPRI, r3
 810c398:	f3bf 8f6f 	isb	sy
 810c39c:	f3bf 8f4f 	dsb	sy
 810c3a0:	61bb      	str	r3, [r7, #24]
}
 810c3a2:	bf00      	nop
 810c3a4:	bf00      	nop
 810c3a6:	e7fd      	b.n	810c3a4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810c3a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810c3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c3ac:	2b00      	cmp	r3, #0
 810c3ae:	d01e      	beq.n	810c3ee <xTaskCreateStatic+0xb2>
 810c3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c3b2:	2b00      	cmp	r3, #0
 810c3b4:	d01b      	beq.n	810c3ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810c3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c3b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810c3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c3bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810c3be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810c3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c3c2:	2202      	movs	r2, #2
 810c3c4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810c3c8:	2300      	movs	r3, #0
 810c3ca:	9303      	str	r3, [sp, #12]
 810c3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c3ce:	9302      	str	r3, [sp, #8]
 810c3d0:	f107 0314 	add.w	r3, r7, #20
 810c3d4:	9301      	str	r3, [sp, #4]
 810c3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c3d8:	9300      	str	r3, [sp, #0]
 810c3da:	683b      	ldr	r3, [r7, #0]
 810c3dc:	687a      	ldr	r2, [r7, #4]
 810c3de:	68b9      	ldr	r1, [r7, #8]
 810c3e0:	68f8      	ldr	r0, [r7, #12]
 810c3e2:	f000 f851 	bl	810c488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810c3e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810c3e8:	f000 f8f6 	bl	810c5d8 <prvAddNewTaskToReadyList>
 810c3ec:	e001      	b.n	810c3f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810c3ee:	2300      	movs	r3, #0
 810c3f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810c3f2:	697b      	ldr	r3, [r7, #20]
	}
 810c3f4:	4618      	mov	r0, r3
 810c3f6:	3728      	adds	r7, #40	@ 0x28
 810c3f8:	46bd      	mov	sp, r7
 810c3fa:	bd80      	pop	{r7, pc}

0810c3fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810c3fc:	b580      	push	{r7, lr}
 810c3fe:	b08c      	sub	sp, #48	@ 0x30
 810c400:	af04      	add	r7, sp, #16
 810c402:	60f8      	str	r0, [r7, #12]
 810c404:	60b9      	str	r1, [r7, #8]
 810c406:	603b      	str	r3, [r7, #0]
 810c408:	4613      	mov	r3, r2
 810c40a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810c40c:	88fb      	ldrh	r3, [r7, #6]
 810c40e:	009b      	lsls	r3, r3, #2
 810c410:	4618      	mov	r0, r3
 810c412:	f7fe fdbb 	bl	810af8c <pvPortMalloc>
 810c416:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810c418:	697b      	ldr	r3, [r7, #20]
 810c41a:	2b00      	cmp	r3, #0
 810c41c:	d00e      	beq.n	810c43c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810c41e:	20a8      	movs	r0, #168	@ 0xa8
 810c420:	f7fe fdb4 	bl	810af8c <pvPortMalloc>
 810c424:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810c426:	69fb      	ldr	r3, [r7, #28]
 810c428:	2b00      	cmp	r3, #0
 810c42a:	d003      	beq.n	810c434 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810c42c:	69fb      	ldr	r3, [r7, #28]
 810c42e:	697a      	ldr	r2, [r7, #20]
 810c430:	631a      	str	r2, [r3, #48]	@ 0x30
 810c432:	e005      	b.n	810c440 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810c434:	6978      	ldr	r0, [r7, #20]
 810c436:	f7fe fe77 	bl	810b128 <vPortFree>
 810c43a:	e001      	b.n	810c440 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810c43c:	2300      	movs	r3, #0
 810c43e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810c440:	69fb      	ldr	r3, [r7, #28]
 810c442:	2b00      	cmp	r3, #0
 810c444:	d017      	beq.n	810c476 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810c446:	69fb      	ldr	r3, [r7, #28]
 810c448:	2200      	movs	r2, #0
 810c44a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810c44e:	88fa      	ldrh	r2, [r7, #6]
 810c450:	2300      	movs	r3, #0
 810c452:	9303      	str	r3, [sp, #12]
 810c454:	69fb      	ldr	r3, [r7, #28]
 810c456:	9302      	str	r3, [sp, #8]
 810c458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c45a:	9301      	str	r3, [sp, #4]
 810c45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c45e:	9300      	str	r3, [sp, #0]
 810c460:	683b      	ldr	r3, [r7, #0]
 810c462:	68b9      	ldr	r1, [r7, #8]
 810c464:	68f8      	ldr	r0, [r7, #12]
 810c466:	f000 f80f 	bl	810c488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810c46a:	69f8      	ldr	r0, [r7, #28]
 810c46c:	f000 f8b4 	bl	810c5d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810c470:	2301      	movs	r3, #1
 810c472:	61bb      	str	r3, [r7, #24]
 810c474:	e002      	b.n	810c47c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810c476:	f04f 33ff 	mov.w	r3, #4294967295
 810c47a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810c47c:	69bb      	ldr	r3, [r7, #24]
	}
 810c47e:	4618      	mov	r0, r3
 810c480:	3720      	adds	r7, #32
 810c482:	46bd      	mov	sp, r7
 810c484:	bd80      	pop	{r7, pc}
	...

0810c488 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810c488:	b580      	push	{r7, lr}
 810c48a:	b088      	sub	sp, #32
 810c48c:	af00      	add	r7, sp, #0
 810c48e:	60f8      	str	r0, [r7, #12]
 810c490:	60b9      	str	r1, [r7, #8]
 810c492:	607a      	str	r2, [r7, #4]
 810c494:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810c496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c498:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810c49a:	687b      	ldr	r3, [r7, #4]
 810c49c:	009b      	lsls	r3, r3, #2
 810c49e:	461a      	mov	r2, r3
 810c4a0:	21a5      	movs	r1, #165	@ 0xa5
 810c4a2:	f001 ff63 	bl	810e36c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810c4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c4a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810c4aa:	687b      	ldr	r3, [r7, #4]
 810c4ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810c4b0:	3b01      	subs	r3, #1
 810c4b2:	009b      	lsls	r3, r3, #2
 810c4b4:	4413      	add	r3, r2
 810c4b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810c4b8:	69bb      	ldr	r3, [r7, #24]
 810c4ba:	f023 0307 	bic.w	r3, r3, #7
 810c4be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810c4c0:	69bb      	ldr	r3, [r7, #24]
 810c4c2:	f003 0307 	and.w	r3, r3, #7
 810c4c6:	2b00      	cmp	r3, #0
 810c4c8:	d00b      	beq.n	810c4e2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810c4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c4ce:	f383 8811 	msr	BASEPRI, r3
 810c4d2:	f3bf 8f6f 	isb	sy
 810c4d6:	f3bf 8f4f 	dsb	sy
 810c4da:	617b      	str	r3, [r7, #20]
}
 810c4dc:	bf00      	nop
 810c4de:	bf00      	nop
 810c4e0:	e7fd      	b.n	810c4de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810c4e2:	68bb      	ldr	r3, [r7, #8]
 810c4e4:	2b00      	cmp	r3, #0
 810c4e6:	d01f      	beq.n	810c528 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810c4e8:	2300      	movs	r3, #0
 810c4ea:	61fb      	str	r3, [r7, #28]
 810c4ec:	e012      	b.n	810c514 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810c4ee:	68ba      	ldr	r2, [r7, #8]
 810c4f0:	69fb      	ldr	r3, [r7, #28]
 810c4f2:	4413      	add	r3, r2
 810c4f4:	7819      	ldrb	r1, [r3, #0]
 810c4f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c4f8:	69fb      	ldr	r3, [r7, #28]
 810c4fa:	4413      	add	r3, r2
 810c4fc:	3334      	adds	r3, #52	@ 0x34
 810c4fe:	460a      	mov	r2, r1
 810c500:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810c502:	68ba      	ldr	r2, [r7, #8]
 810c504:	69fb      	ldr	r3, [r7, #28]
 810c506:	4413      	add	r3, r2
 810c508:	781b      	ldrb	r3, [r3, #0]
 810c50a:	2b00      	cmp	r3, #0
 810c50c:	d006      	beq.n	810c51c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810c50e:	69fb      	ldr	r3, [r7, #28]
 810c510:	3301      	adds	r3, #1
 810c512:	61fb      	str	r3, [r7, #28]
 810c514:	69fb      	ldr	r3, [r7, #28]
 810c516:	2b0f      	cmp	r3, #15
 810c518:	d9e9      	bls.n	810c4ee <prvInitialiseNewTask+0x66>
 810c51a:	e000      	b.n	810c51e <prvInitialiseNewTask+0x96>
			{
				break;
 810c51c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810c51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c520:	2200      	movs	r2, #0
 810c522:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810c526:	e003      	b.n	810c530 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810c528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c52a:	2200      	movs	r2, #0
 810c52c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810c530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c532:	2b37      	cmp	r3, #55	@ 0x37
 810c534:	d901      	bls.n	810c53a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810c536:	2337      	movs	r3, #55	@ 0x37
 810c538:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810c53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c53c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810c53e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810c540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810c544:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810c546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c548:	2200      	movs	r2, #0
 810c54a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810c54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c54e:	3304      	adds	r3, #4
 810c550:	4618      	mov	r0, r3
 810c552:	f7fe ff35 	bl	810b3c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810c556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c558:	3318      	adds	r3, #24
 810c55a:	4618      	mov	r0, r3
 810c55c:	f7fe ff30 	bl	810b3c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810c560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c564:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810c566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c568:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810c56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c56e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810c570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c574:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810c576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c578:	2200      	movs	r2, #0
 810c57a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810c57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c580:	2200      	movs	r2, #0
 810c582:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810c586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c588:	3354      	adds	r3, #84	@ 0x54
 810c58a:	224c      	movs	r2, #76	@ 0x4c
 810c58c:	2100      	movs	r1, #0
 810c58e:	4618      	mov	r0, r3
 810c590:	f001 feec 	bl	810e36c <memset>
 810c594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c596:	4a0d      	ldr	r2, [pc, #52]	@ (810c5cc <prvInitialiseNewTask+0x144>)
 810c598:	659a      	str	r2, [r3, #88]	@ 0x58
 810c59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c59c:	4a0c      	ldr	r2, [pc, #48]	@ (810c5d0 <prvInitialiseNewTask+0x148>)
 810c59e:	65da      	str	r2, [r3, #92]	@ 0x5c
 810c5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c5a2:	4a0c      	ldr	r2, [pc, #48]	@ (810c5d4 <prvInitialiseNewTask+0x14c>)
 810c5a4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810c5a6:	683a      	ldr	r2, [r7, #0]
 810c5a8:	68f9      	ldr	r1, [r7, #12]
 810c5aa:	69b8      	ldr	r0, [r7, #24]
 810c5ac:	f7fe ff9c 	bl	810b4e8 <pxPortInitialiseStack>
 810c5b0:	4602      	mov	r2, r0
 810c5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c5b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810c5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c5b8:	2b00      	cmp	r3, #0
 810c5ba:	d002      	beq.n	810c5c2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810c5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c5be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c5c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810c5c2:	bf00      	nop
 810c5c4:	3720      	adds	r7, #32
 810c5c6:	46bd      	mov	sp, r7
 810c5c8:	bd80      	pop	{r7, pc}
 810c5ca:	bf00      	nop
 810c5cc:	10004ea8 	.word	0x10004ea8
 810c5d0:	10004f10 	.word	0x10004f10
 810c5d4:	10004f78 	.word	0x10004f78

0810c5d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810c5d8:	b580      	push	{r7, lr}
 810c5da:	b082      	sub	sp, #8
 810c5dc:	af00      	add	r7, sp, #0
 810c5de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810c5e0:	f7ff f8b2 	bl	810b748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810c5e4:	4b2d      	ldr	r3, [pc, #180]	@ (810c69c <prvAddNewTaskToReadyList+0xc4>)
 810c5e6:	681b      	ldr	r3, [r3, #0]
 810c5e8:	3301      	adds	r3, #1
 810c5ea:	4a2c      	ldr	r2, [pc, #176]	@ (810c69c <prvAddNewTaskToReadyList+0xc4>)
 810c5ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810c5ee:	4b2c      	ldr	r3, [pc, #176]	@ (810c6a0 <prvAddNewTaskToReadyList+0xc8>)
 810c5f0:	681b      	ldr	r3, [r3, #0]
 810c5f2:	2b00      	cmp	r3, #0
 810c5f4:	d109      	bne.n	810c60a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810c5f6:	4a2a      	ldr	r2, [pc, #168]	@ (810c6a0 <prvAddNewTaskToReadyList+0xc8>)
 810c5f8:	687b      	ldr	r3, [r7, #4]
 810c5fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810c5fc:	4b27      	ldr	r3, [pc, #156]	@ (810c69c <prvAddNewTaskToReadyList+0xc4>)
 810c5fe:	681b      	ldr	r3, [r3, #0]
 810c600:	2b01      	cmp	r3, #1
 810c602:	d110      	bne.n	810c626 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810c604:	f000 fc2e 	bl	810ce64 <prvInitialiseTaskLists>
 810c608:	e00d      	b.n	810c626 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810c60a:	4b26      	ldr	r3, [pc, #152]	@ (810c6a4 <prvAddNewTaskToReadyList+0xcc>)
 810c60c:	681b      	ldr	r3, [r3, #0]
 810c60e:	2b00      	cmp	r3, #0
 810c610:	d109      	bne.n	810c626 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810c612:	4b23      	ldr	r3, [pc, #140]	@ (810c6a0 <prvAddNewTaskToReadyList+0xc8>)
 810c614:	681b      	ldr	r3, [r3, #0]
 810c616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810c618:	687b      	ldr	r3, [r7, #4]
 810c61a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c61c:	429a      	cmp	r2, r3
 810c61e:	d802      	bhi.n	810c626 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810c620:	4a1f      	ldr	r2, [pc, #124]	@ (810c6a0 <prvAddNewTaskToReadyList+0xc8>)
 810c622:	687b      	ldr	r3, [r7, #4]
 810c624:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810c626:	4b20      	ldr	r3, [pc, #128]	@ (810c6a8 <prvAddNewTaskToReadyList+0xd0>)
 810c628:	681b      	ldr	r3, [r3, #0]
 810c62a:	3301      	adds	r3, #1
 810c62c:	4a1e      	ldr	r2, [pc, #120]	@ (810c6a8 <prvAddNewTaskToReadyList+0xd0>)
 810c62e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810c630:	4b1d      	ldr	r3, [pc, #116]	@ (810c6a8 <prvAddNewTaskToReadyList+0xd0>)
 810c632:	681a      	ldr	r2, [r3, #0]
 810c634:	687b      	ldr	r3, [r7, #4]
 810c636:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810c638:	687b      	ldr	r3, [r7, #4]
 810c63a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810c63c:	4b1b      	ldr	r3, [pc, #108]	@ (810c6ac <prvAddNewTaskToReadyList+0xd4>)
 810c63e:	681b      	ldr	r3, [r3, #0]
 810c640:	429a      	cmp	r2, r3
 810c642:	d903      	bls.n	810c64c <prvAddNewTaskToReadyList+0x74>
 810c644:	687b      	ldr	r3, [r7, #4]
 810c646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c648:	4a18      	ldr	r2, [pc, #96]	@ (810c6ac <prvAddNewTaskToReadyList+0xd4>)
 810c64a:	6013      	str	r3, [r2, #0]
 810c64c:	687b      	ldr	r3, [r7, #4]
 810c64e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810c650:	4613      	mov	r3, r2
 810c652:	009b      	lsls	r3, r3, #2
 810c654:	4413      	add	r3, r2
 810c656:	009b      	lsls	r3, r3, #2
 810c658:	4a15      	ldr	r2, [pc, #84]	@ (810c6b0 <prvAddNewTaskToReadyList+0xd8>)
 810c65a:	441a      	add	r2, r3
 810c65c:	687b      	ldr	r3, [r7, #4]
 810c65e:	3304      	adds	r3, #4
 810c660:	4619      	mov	r1, r3
 810c662:	4610      	mov	r0, r2
 810c664:	f7fe feb9 	bl	810b3da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810c668:	f7ff f8a0 	bl	810b7ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810c66c:	4b0d      	ldr	r3, [pc, #52]	@ (810c6a4 <prvAddNewTaskToReadyList+0xcc>)
 810c66e:	681b      	ldr	r3, [r3, #0]
 810c670:	2b00      	cmp	r3, #0
 810c672:	d00e      	beq.n	810c692 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810c674:	4b0a      	ldr	r3, [pc, #40]	@ (810c6a0 <prvAddNewTaskToReadyList+0xc8>)
 810c676:	681b      	ldr	r3, [r3, #0]
 810c678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810c67a:	687b      	ldr	r3, [r7, #4]
 810c67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c67e:	429a      	cmp	r2, r3
 810c680:	d207      	bcs.n	810c692 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810c682:	4b0c      	ldr	r3, [pc, #48]	@ (810c6b4 <prvAddNewTaskToReadyList+0xdc>)
 810c684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c688:	601a      	str	r2, [r3, #0]
 810c68a:	f3bf 8f4f 	dsb	sy
 810c68e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810c692:	bf00      	nop
 810c694:	3708      	adds	r7, #8
 810c696:	46bd      	mov	sp, r7
 810c698:	bd80      	pop	{r7, pc}
 810c69a:	bf00      	nop
 810c69c:	10004d3c 	.word	0x10004d3c
 810c6a0:	10004868 	.word	0x10004868
 810c6a4:	10004d48 	.word	0x10004d48
 810c6a8:	10004d58 	.word	0x10004d58
 810c6ac:	10004d44 	.word	0x10004d44
 810c6b0:	1000486c 	.word	0x1000486c
 810c6b4:	e000ed04 	.word	0xe000ed04

0810c6b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810c6b8:	b580      	push	{r7, lr}
 810c6ba:	b084      	sub	sp, #16
 810c6bc:	af00      	add	r7, sp, #0
 810c6be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810c6c0:	2300      	movs	r3, #0
 810c6c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810c6c4:	687b      	ldr	r3, [r7, #4]
 810c6c6:	2b00      	cmp	r3, #0
 810c6c8:	d018      	beq.n	810c6fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810c6ca:	4b14      	ldr	r3, [pc, #80]	@ (810c71c <vTaskDelay+0x64>)
 810c6cc:	681b      	ldr	r3, [r3, #0]
 810c6ce:	2b00      	cmp	r3, #0
 810c6d0:	d00b      	beq.n	810c6ea <vTaskDelay+0x32>
	__asm volatile
 810c6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c6d6:	f383 8811 	msr	BASEPRI, r3
 810c6da:	f3bf 8f6f 	isb	sy
 810c6de:	f3bf 8f4f 	dsb	sy
 810c6e2:	60bb      	str	r3, [r7, #8]
}
 810c6e4:	bf00      	nop
 810c6e6:	bf00      	nop
 810c6e8:	e7fd      	b.n	810c6e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810c6ea:	f000 f88b 	bl	810c804 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810c6ee:	2100      	movs	r1, #0
 810c6f0:	6878      	ldr	r0, [r7, #4]
 810c6f2:	f000 fd09 	bl	810d108 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810c6f6:	f000 f893 	bl	810c820 <xTaskResumeAll>
 810c6fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810c6fc:	68fb      	ldr	r3, [r7, #12]
 810c6fe:	2b00      	cmp	r3, #0
 810c700:	d107      	bne.n	810c712 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810c702:	4b07      	ldr	r3, [pc, #28]	@ (810c720 <vTaskDelay+0x68>)
 810c704:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c708:	601a      	str	r2, [r3, #0]
 810c70a:	f3bf 8f4f 	dsb	sy
 810c70e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810c712:	bf00      	nop
 810c714:	3710      	adds	r7, #16
 810c716:	46bd      	mov	sp, r7
 810c718:	bd80      	pop	{r7, pc}
 810c71a:	bf00      	nop
 810c71c:	10004d64 	.word	0x10004d64
 810c720:	e000ed04 	.word	0xe000ed04

0810c724 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810c724:	b580      	push	{r7, lr}
 810c726:	b08a      	sub	sp, #40	@ 0x28
 810c728:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810c72a:	2300      	movs	r3, #0
 810c72c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810c72e:	2300      	movs	r3, #0
 810c730:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810c732:	463a      	mov	r2, r7
 810c734:	1d39      	adds	r1, r7, #4
 810c736:	f107 0308 	add.w	r3, r7, #8
 810c73a:	4618      	mov	r0, r3
 810c73c:	f7fe fbf2 	bl	810af24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810c740:	6839      	ldr	r1, [r7, #0]
 810c742:	687b      	ldr	r3, [r7, #4]
 810c744:	68ba      	ldr	r2, [r7, #8]
 810c746:	9202      	str	r2, [sp, #8]
 810c748:	9301      	str	r3, [sp, #4]
 810c74a:	2300      	movs	r3, #0
 810c74c:	9300      	str	r3, [sp, #0]
 810c74e:	2300      	movs	r3, #0
 810c750:	460a      	mov	r2, r1
 810c752:	4924      	ldr	r1, [pc, #144]	@ (810c7e4 <vTaskStartScheduler+0xc0>)
 810c754:	4824      	ldr	r0, [pc, #144]	@ (810c7e8 <vTaskStartScheduler+0xc4>)
 810c756:	f7ff fdf1 	bl	810c33c <xTaskCreateStatic>
 810c75a:	4603      	mov	r3, r0
 810c75c:	4a23      	ldr	r2, [pc, #140]	@ (810c7ec <vTaskStartScheduler+0xc8>)
 810c75e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810c760:	4b22      	ldr	r3, [pc, #136]	@ (810c7ec <vTaskStartScheduler+0xc8>)
 810c762:	681b      	ldr	r3, [r3, #0]
 810c764:	2b00      	cmp	r3, #0
 810c766:	d002      	beq.n	810c76e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810c768:	2301      	movs	r3, #1
 810c76a:	617b      	str	r3, [r7, #20]
 810c76c:	e001      	b.n	810c772 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810c76e:	2300      	movs	r3, #0
 810c770:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810c772:	697b      	ldr	r3, [r7, #20]
 810c774:	2b01      	cmp	r3, #1
 810c776:	d102      	bne.n	810c77e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810c778:	f000 fd1a 	bl	810d1b0 <xTimerCreateTimerTask>
 810c77c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810c77e:	697b      	ldr	r3, [r7, #20]
 810c780:	2b01      	cmp	r3, #1
 810c782:	d11b      	bne.n	810c7bc <vTaskStartScheduler+0x98>
	__asm volatile
 810c784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c788:	f383 8811 	msr	BASEPRI, r3
 810c78c:	f3bf 8f6f 	isb	sy
 810c790:	f3bf 8f4f 	dsb	sy
 810c794:	613b      	str	r3, [r7, #16]
}
 810c796:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810c798:	4b15      	ldr	r3, [pc, #84]	@ (810c7f0 <vTaskStartScheduler+0xcc>)
 810c79a:	681b      	ldr	r3, [r3, #0]
 810c79c:	3354      	adds	r3, #84	@ 0x54
 810c79e:	4a15      	ldr	r2, [pc, #84]	@ (810c7f4 <vTaskStartScheduler+0xd0>)
 810c7a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810c7a2:	4b15      	ldr	r3, [pc, #84]	@ (810c7f8 <vTaskStartScheduler+0xd4>)
 810c7a4:	f04f 32ff 	mov.w	r2, #4294967295
 810c7a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810c7aa:	4b14      	ldr	r3, [pc, #80]	@ (810c7fc <vTaskStartScheduler+0xd8>)
 810c7ac:	2201      	movs	r2, #1
 810c7ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810c7b0:	4b13      	ldr	r3, [pc, #76]	@ (810c800 <vTaskStartScheduler+0xdc>)
 810c7b2:	2200      	movs	r2, #0
 810c7b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810c7b6:	f7fe ff23 	bl	810b600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810c7ba:	e00f      	b.n	810c7dc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810c7bc:	697b      	ldr	r3, [r7, #20]
 810c7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c7c2:	d10b      	bne.n	810c7dc <vTaskStartScheduler+0xb8>
	__asm volatile
 810c7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c7c8:	f383 8811 	msr	BASEPRI, r3
 810c7cc:	f3bf 8f6f 	isb	sy
 810c7d0:	f3bf 8f4f 	dsb	sy
 810c7d4:	60fb      	str	r3, [r7, #12]
}
 810c7d6:	bf00      	nop
 810c7d8:	bf00      	nop
 810c7da:	e7fd      	b.n	810c7d8 <vTaskStartScheduler+0xb4>
}
 810c7dc:	bf00      	nop
 810c7de:	3718      	adds	r7, #24
 810c7e0:	46bd      	mov	sp, r7
 810c7e2:	bd80      	pop	{r7, pc}
 810c7e4:	0810f198 	.word	0x0810f198
 810c7e8:	0810ce35 	.word	0x0810ce35
 810c7ec:	10004d60 	.word	0x10004d60
 810c7f0:	10004868 	.word	0x10004868
 810c7f4:	10000020 	.word	0x10000020
 810c7f8:	10004d5c 	.word	0x10004d5c
 810c7fc:	10004d48 	.word	0x10004d48
 810c800:	10004d40 	.word	0x10004d40

0810c804 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810c804:	b480      	push	{r7}
 810c806:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810c808:	4b04      	ldr	r3, [pc, #16]	@ (810c81c <vTaskSuspendAll+0x18>)
 810c80a:	681b      	ldr	r3, [r3, #0]
 810c80c:	3301      	adds	r3, #1
 810c80e:	4a03      	ldr	r2, [pc, #12]	@ (810c81c <vTaskSuspendAll+0x18>)
 810c810:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810c812:	bf00      	nop
 810c814:	46bd      	mov	sp, r7
 810c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c81a:	4770      	bx	lr
 810c81c:	10004d64 	.word	0x10004d64

0810c820 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810c820:	b580      	push	{r7, lr}
 810c822:	b084      	sub	sp, #16
 810c824:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810c826:	2300      	movs	r3, #0
 810c828:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810c82a:	2300      	movs	r3, #0
 810c82c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810c82e:	4b42      	ldr	r3, [pc, #264]	@ (810c938 <xTaskResumeAll+0x118>)
 810c830:	681b      	ldr	r3, [r3, #0]
 810c832:	2b00      	cmp	r3, #0
 810c834:	d10b      	bne.n	810c84e <xTaskResumeAll+0x2e>
	__asm volatile
 810c836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c83a:	f383 8811 	msr	BASEPRI, r3
 810c83e:	f3bf 8f6f 	isb	sy
 810c842:	f3bf 8f4f 	dsb	sy
 810c846:	603b      	str	r3, [r7, #0]
}
 810c848:	bf00      	nop
 810c84a:	bf00      	nop
 810c84c:	e7fd      	b.n	810c84a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810c84e:	f7fe ff7b 	bl	810b748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810c852:	4b39      	ldr	r3, [pc, #228]	@ (810c938 <xTaskResumeAll+0x118>)
 810c854:	681b      	ldr	r3, [r3, #0]
 810c856:	3b01      	subs	r3, #1
 810c858:	4a37      	ldr	r2, [pc, #220]	@ (810c938 <xTaskResumeAll+0x118>)
 810c85a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810c85c:	4b36      	ldr	r3, [pc, #216]	@ (810c938 <xTaskResumeAll+0x118>)
 810c85e:	681b      	ldr	r3, [r3, #0]
 810c860:	2b00      	cmp	r3, #0
 810c862:	d162      	bne.n	810c92a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810c864:	4b35      	ldr	r3, [pc, #212]	@ (810c93c <xTaskResumeAll+0x11c>)
 810c866:	681b      	ldr	r3, [r3, #0]
 810c868:	2b00      	cmp	r3, #0
 810c86a:	d05e      	beq.n	810c92a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810c86c:	e02f      	b.n	810c8ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810c86e:	4b34      	ldr	r3, [pc, #208]	@ (810c940 <xTaskResumeAll+0x120>)
 810c870:	68db      	ldr	r3, [r3, #12]
 810c872:	68db      	ldr	r3, [r3, #12]
 810c874:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810c876:	68fb      	ldr	r3, [r7, #12]
 810c878:	3318      	adds	r3, #24
 810c87a:	4618      	mov	r0, r3
 810c87c:	f7fe fe0a 	bl	810b494 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810c880:	68fb      	ldr	r3, [r7, #12]
 810c882:	3304      	adds	r3, #4
 810c884:	4618      	mov	r0, r3
 810c886:	f7fe fe05 	bl	810b494 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810c88a:	68fb      	ldr	r3, [r7, #12]
 810c88c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810c88e:	4b2d      	ldr	r3, [pc, #180]	@ (810c944 <xTaskResumeAll+0x124>)
 810c890:	681b      	ldr	r3, [r3, #0]
 810c892:	429a      	cmp	r2, r3
 810c894:	d903      	bls.n	810c89e <xTaskResumeAll+0x7e>
 810c896:	68fb      	ldr	r3, [r7, #12]
 810c898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c89a:	4a2a      	ldr	r2, [pc, #168]	@ (810c944 <xTaskResumeAll+0x124>)
 810c89c:	6013      	str	r3, [r2, #0]
 810c89e:	68fb      	ldr	r3, [r7, #12]
 810c8a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810c8a2:	4613      	mov	r3, r2
 810c8a4:	009b      	lsls	r3, r3, #2
 810c8a6:	4413      	add	r3, r2
 810c8a8:	009b      	lsls	r3, r3, #2
 810c8aa:	4a27      	ldr	r2, [pc, #156]	@ (810c948 <xTaskResumeAll+0x128>)
 810c8ac:	441a      	add	r2, r3
 810c8ae:	68fb      	ldr	r3, [r7, #12]
 810c8b0:	3304      	adds	r3, #4
 810c8b2:	4619      	mov	r1, r3
 810c8b4:	4610      	mov	r0, r2
 810c8b6:	f7fe fd90 	bl	810b3da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810c8ba:	68fb      	ldr	r3, [r7, #12]
 810c8bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810c8be:	4b23      	ldr	r3, [pc, #140]	@ (810c94c <xTaskResumeAll+0x12c>)
 810c8c0:	681b      	ldr	r3, [r3, #0]
 810c8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c8c4:	429a      	cmp	r2, r3
 810c8c6:	d302      	bcc.n	810c8ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810c8c8:	4b21      	ldr	r3, [pc, #132]	@ (810c950 <xTaskResumeAll+0x130>)
 810c8ca:	2201      	movs	r2, #1
 810c8cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810c8ce:	4b1c      	ldr	r3, [pc, #112]	@ (810c940 <xTaskResumeAll+0x120>)
 810c8d0:	681b      	ldr	r3, [r3, #0]
 810c8d2:	2b00      	cmp	r3, #0
 810c8d4:	d1cb      	bne.n	810c86e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810c8d6:	68fb      	ldr	r3, [r7, #12]
 810c8d8:	2b00      	cmp	r3, #0
 810c8da:	d001      	beq.n	810c8e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810c8dc:	f000 fb66 	bl	810cfac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810c8e0:	4b1c      	ldr	r3, [pc, #112]	@ (810c954 <xTaskResumeAll+0x134>)
 810c8e2:	681b      	ldr	r3, [r3, #0]
 810c8e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810c8e6:	687b      	ldr	r3, [r7, #4]
 810c8e8:	2b00      	cmp	r3, #0
 810c8ea:	d010      	beq.n	810c90e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810c8ec:	f000 f846 	bl	810c97c <xTaskIncrementTick>
 810c8f0:	4603      	mov	r3, r0
 810c8f2:	2b00      	cmp	r3, #0
 810c8f4:	d002      	beq.n	810c8fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810c8f6:	4b16      	ldr	r3, [pc, #88]	@ (810c950 <xTaskResumeAll+0x130>)
 810c8f8:	2201      	movs	r2, #1
 810c8fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810c8fc:	687b      	ldr	r3, [r7, #4]
 810c8fe:	3b01      	subs	r3, #1
 810c900:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810c902:	687b      	ldr	r3, [r7, #4]
 810c904:	2b00      	cmp	r3, #0
 810c906:	d1f1      	bne.n	810c8ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810c908:	4b12      	ldr	r3, [pc, #72]	@ (810c954 <xTaskResumeAll+0x134>)
 810c90a:	2200      	movs	r2, #0
 810c90c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810c90e:	4b10      	ldr	r3, [pc, #64]	@ (810c950 <xTaskResumeAll+0x130>)
 810c910:	681b      	ldr	r3, [r3, #0]
 810c912:	2b00      	cmp	r3, #0
 810c914:	d009      	beq.n	810c92a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810c916:	2301      	movs	r3, #1
 810c918:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810c91a:	4b0f      	ldr	r3, [pc, #60]	@ (810c958 <xTaskResumeAll+0x138>)
 810c91c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c920:	601a      	str	r2, [r3, #0]
 810c922:	f3bf 8f4f 	dsb	sy
 810c926:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810c92a:	f7fe ff3f 	bl	810b7ac <vPortExitCritical>

	return xAlreadyYielded;
 810c92e:	68bb      	ldr	r3, [r7, #8]
}
 810c930:	4618      	mov	r0, r3
 810c932:	3710      	adds	r7, #16
 810c934:	46bd      	mov	sp, r7
 810c936:	bd80      	pop	{r7, pc}
 810c938:	10004d64 	.word	0x10004d64
 810c93c:	10004d3c 	.word	0x10004d3c
 810c940:	10004cfc 	.word	0x10004cfc
 810c944:	10004d44 	.word	0x10004d44
 810c948:	1000486c 	.word	0x1000486c
 810c94c:	10004868 	.word	0x10004868
 810c950:	10004d50 	.word	0x10004d50
 810c954:	10004d4c 	.word	0x10004d4c
 810c958:	e000ed04 	.word	0xe000ed04

0810c95c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810c95c:	b480      	push	{r7}
 810c95e:	b083      	sub	sp, #12
 810c960:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810c962:	4b05      	ldr	r3, [pc, #20]	@ (810c978 <xTaskGetTickCount+0x1c>)
 810c964:	681b      	ldr	r3, [r3, #0]
 810c966:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810c968:	687b      	ldr	r3, [r7, #4]
}
 810c96a:	4618      	mov	r0, r3
 810c96c:	370c      	adds	r7, #12
 810c96e:	46bd      	mov	sp, r7
 810c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c974:	4770      	bx	lr
 810c976:	bf00      	nop
 810c978:	10004d40 	.word	0x10004d40

0810c97c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810c97c:	b580      	push	{r7, lr}
 810c97e:	b086      	sub	sp, #24
 810c980:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810c982:	2300      	movs	r3, #0
 810c984:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810c986:	4b4f      	ldr	r3, [pc, #316]	@ (810cac4 <xTaskIncrementTick+0x148>)
 810c988:	681b      	ldr	r3, [r3, #0]
 810c98a:	2b00      	cmp	r3, #0
 810c98c:	f040 8090 	bne.w	810cab0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810c990:	4b4d      	ldr	r3, [pc, #308]	@ (810cac8 <xTaskIncrementTick+0x14c>)
 810c992:	681b      	ldr	r3, [r3, #0]
 810c994:	3301      	adds	r3, #1
 810c996:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810c998:	4a4b      	ldr	r2, [pc, #300]	@ (810cac8 <xTaskIncrementTick+0x14c>)
 810c99a:	693b      	ldr	r3, [r7, #16]
 810c99c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810c99e:	693b      	ldr	r3, [r7, #16]
 810c9a0:	2b00      	cmp	r3, #0
 810c9a2:	d121      	bne.n	810c9e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810c9a4:	4b49      	ldr	r3, [pc, #292]	@ (810cacc <xTaskIncrementTick+0x150>)
 810c9a6:	681b      	ldr	r3, [r3, #0]
 810c9a8:	681b      	ldr	r3, [r3, #0]
 810c9aa:	2b00      	cmp	r3, #0
 810c9ac:	d00b      	beq.n	810c9c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 810c9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c9b2:	f383 8811 	msr	BASEPRI, r3
 810c9b6:	f3bf 8f6f 	isb	sy
 810c9ba:	f3bf 8f4f 	dsb	sy
 810c9be:	603b      	str	r3, [r7, #0]
}
 810c9c0:	bf00      	nop
 810c9c2:	bf00      	nop
 810c9c4:	e7fd      	b.n	810c9c2 <xTaskIncrementTick+0x46>
 810c9c6:	4b41      	ldr	r3, [pc, #260]	@ (810cacc <xTaskIncrementTick+0x150>)
 810c9c8:	681b      	ldr	r3, [r3, #0]
 810c9ca:	60fb      	str	r3, [r7, #12]
 810c9cc:	4b40      	ldr	r3, [pc, #256]	@ (810cad0 <xTaskIncrementTick+0x154>)
 810c9ce:	681b      	ldr	r3, [r3, #0]
 810c9d0:	4a3e      	ldr	r2, [pc, #248]	@ (810cacc <xTaskIncrementTick+0x150>)
 810c9d2:	6013      	str	r3, [r2, #0]
 810c9d4:	4a3e      	ldr	r2, [pc, #248]	@ (810cad0 <xTaskIncrementTick+0x154>)
 810c9d6:	68fb      	ldr	r3, [r7, #12]
 810c9d8:	6013      	str	r3, [r2, #0]
 810c9da:	4b3e      	ldr	r3, [pc, #248]	@ (810cad4 <xTaskIncrementTick+0x158>)
 810c9dc:	681b      	ldr	r3, [r3, #0]
 810c9de:	3301      	adds	r3, #1
 810c9e0:	4a3c      	ldr	r2, [pc, #240]	@ (810cad4 <xTaskIncrementTick+0x158>)
 810c9e2:	6013      	str	r3, [r2, #0]
 810c9e4:	f000 fae2 	bl	810cfac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810c9e8:	4b3b      	ldr	r3, [pc, #236]	@ (810cad8 <xTaskIncrementTick+0x15c>)
 810c9ea:	681b      	ldr	r3, [r3, #0]
 810c9ec:	693a      	ldr	r2, [r7, #16]
 810c9ee:	429a      	cmp	r2, r3
 810c9f0:	d349      	bcc.n	810ca86 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810c9f2:	4b36      	ldr	r3, [pc, #216]	@ (810cacc <xTaskIncrementTick+0x150>)
 810c9f4:	681b      	ldr	r3, [r3, #0]
 810c9f6:	681b      	ldr	r3, [r3, #0]
 810c9f8:	2b00      	cmp	r3, #0
 810c9fa:	d104      	bne.n	810ca06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810c9fc:	4b36      	ldr	r3, [pc, #216]	@ (810cad8 <xTaskIncrementTick+0x15c>)
 810c9fe:	f04f 32ff 	mov.w	r2, #4294967295
 810ca02:	601a      	str	r2, [r3, #0]
					break;
 810ca04:	e03f      	b.n	810ca86 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ca06:	4b31      	ldr	r3, [pc, #196]	@ (810cacc <xTaskIncrementTick+0x150>)
 810ca08:	681b      	ldr	r3, [r3, #0]
 810ca0a:	68db      	ldr	r3, [r3, #12]
 810ca0c:	68db      	ldr	r3, [r3, #12]
 810ca0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810ca10:	68bb      	ldr	r3, [r7, #8]
 810ca12:	685b      	ldr	r3, [r3, #4]
 810ca14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810ca16:	693a      	ldr	r2, [r7, #16]
 810ca18:	687b      	ldr	r3, [r7, #4]
 810ca1a:	429a      	cmp	r2, r3
 810ca1c:	d203      	bcs.n	810ca26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810ca1e:	4a2e      	ldr	r2, [pc, #184]	@ (810cad8 <xTaskIncrementTick+0x15c>)
 810ca20:	687b      	ldr	r3, [r7, #4]
 810ca22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810ca24:	e02f      	b.n	810ca86 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810ca26:	68bb      	ldr	r3, [r7, #8]
 810ca28:	3304      	adds	r3, #4
 810ca2a:	4618      	mov	r0, r3
 810ca2c:	f7fe fd32 	bl	810b494 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810ca30:	68bb      	ldr	r3, [r7, #8]
 810ca32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ca34:	2b00      	cmp	r3, #0
 810ca36:	d004      	beq.n	810ca42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810ca38:	68bb      	ldr	r3, [r7, #8]
 810ca3a:	3318      	adds	r3, #24
 810ca3c:	4618      	mov	r0, r3
 810ca3e:	f7fe fd29 	bl	810b494 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810ca42:	68bb      	ldr	r3, [r7, #8]
 810ca44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ca46:	4b25      	ldr	r3, [pc, #148]	@ (810cadc <xTaskIncrementTick+0x160>)
 810ca48:	681b      	ldr	r3, [r3, #0]
 810ca4a:	429a      	cmp	r2, r3
 810ca4c:	d903      	bls.n	810ca56 <xTaskIncrementTick+0xda>
 810ca4e:	68bb      	ldr	r3, [r7, #8]
 810ca50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ca52:	4a22      	ldr	r2, [pc, #136]	@ (810cadc <xTaskIncrementTick+0x160>)
 810ca54:	6013      	str	r3, [r2, #0]
 810ca56:	68bb      	ldr	r3, [r7, #8]
 810ca58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ca5a:	4613      	mov	r3, r2
 810ca5c:	009b      	lsls	r3, r3, #2
 810ca5e:	4413      	add	r3, r2
 810ca60:	009b      	lsls	r3, r3, #2
 810ca62:	4a1f      	ldr	r2, [pc, #124]	@ (810cae0 <xTaskIncrementTick+0x164>)
 810ca64:	441a      	add	r2, r3
 810ca66:	68bb      	ldr	r3, [r7, #8]
 810ca68:	3304      	adds	r3, #4
 810ca6a:	4619      	mov	r1, r3
 810ca6c:	4610      	mov	r0, r2
 810ca6e:	f7fe fcb4 	bl	810b3da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810ca72:	68bb      	ldr	r3, [r7, #8]
 810ca74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ca76:	4b1b      	ldr	r3, [pc, #108]	@ (810cae4 <xTaskIncrementTick+0x168>)
 810ca78:	681b      	ldr	r3, [r3, #0]
 810ca7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ca7c:	429a      	cmp	r2, r3
 810ca7e:	d3b8      	bcc.n	810c9f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810ca80:	2301      	movs	r3, #1
 810ca82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810ca84:	e7b5      	b.n	810c9f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810ca86:	4b17      	ldr	r3, [pc, #92]	@ (810cae4 <xTaskIncrementTick+0x168>)
 810ca88:	681b      	ldr	r3, [r3, #0]
 810ca8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ca8c:	4914      	ldr	r1, [pc, #80]	@ (810cae0 <xTaskIncrementTick+0x164>)
 810ca8e:	4613      	mov	r3, r2
 810ca90:	009b      	lsls	r3, r3, #2
 810ca92:	4413      	add	r3, r2
 810ca94:	009b      	lsls	r3, r3, #2
 810ca96:	440b      	add	r3, r1
 810ca98:	681b      	ldr	r3, [r3, #0]
 810ca9a:	2b01      	cmp	r3, #1
 810ca9c:	d901      	bls.n	810caa2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810ca9e:	2301      	movs	r3, #1
 810caa0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810caa2:	4b11      	ldr	r3, [pc, #68]	@ (810cae8 <xTaskIncrementTick+0x16c>)
 810caa4:	681b      	ldr	r3, [r3, #0]
 810caa6:	2b00      	cmp	r3, #0
 810caa8:	d007      	beq.n	810caba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810caaa:	2301      	movs	r3, #1
 810caac:	617b      	str	r3, [r7, #20]
 810caae:	e004      	b.n	810caba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810cab0:	4b0e      	ldr	r3, [pc, #56]	@ (810caec <xTaskIncrementTick+0x170>)
 810cab2:	681b      	ldr	r3, [r3, #0]
 810cab4:	3301      	adds	r3, #1
 810cab6:	4a0d      	ldr	r2, [pc, #52]	@ (810caec <xTaskIncrementTick+0x170>)
 810cab8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810caba:	697b      	ldr	r3, [r7, #20]
}
 810cabc:	4618      	mov	r0, r3
 810cabe:	3718      	adds	r7, #24
 810cac0:	46bd      	mov	sp, r7
 810cac2:	bd80      	pop	{r7, pc}
 810cac4:	10004d64 	.word	0x10004d64
 810cac8:	10004d40 	.word	0x10004d40
 810cacc:	10004cf4 	.word	0x10004cf4
 810cad0:	10004cf8 	.word	0x10004cf8
 810cad4:	10004d54 	.word	0x10004d54
 810cad8:	10004d5c 	.word	0x10004d5c
 810cadc:	10004d44 	.word	0x10004d44
 810cae0:	1000486c 	.word	0x1000486c
 810cae4:	10004868 	.word	0x10004868
 810cae8:	10004d50 	.word	0x10004d50
 810caec:	10004d4c 	.word	0x10004d4c

0810caf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810caf0:	b480      	push	{r7}
 810caf2:	b085      	sub	sp, #20
 810caf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810caf6:	4b2b      	ldr	r3, [pc, #172]	@ (810cba4 <vTaskSwitchContext+0xb4>)
 810caf8:	681b      	ldr	r3, [r3, #0]
 810cafa:	2b00      	cmp	r3, #0
 810cafc:	d003      	beq.n	810cb06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810cafe:	4b2a      	ldr	r3, [pc, #168]	@ (810cba8 <vTaskSwitchContext+0xb8>)
 810cb00:	2201      	movs	r2, #1
 810cb02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810cb04:	e047      	b.n	810cb96 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 810cb06:	4b28      	ldr	r3, [pc, #160]	@ (810cba8 <vTaskSwitchContext+0xb8>)
 810cb08:	2200      	movs	r2, #0
 810cb0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810cb0c:	4b27      	ldr	r3, [pc, #156]	@ (810cbac <vTaskSwitchContext+0xbc>)
 810cb0e:	681b      	ldr	r3, [r3, #0]
 810cb10:	60fb      	str	r3, [r7, #12]
 810cb12:	e011      	b.n	810cb38 <vTaskSwitchContext+0x48>
 810cb14:	68fb      	ldr	r3, [r7, #12]
 810cb16:	2b00      	cmp	r3, #0
 810cb18:	d10b      	bne.n	810cb32 <vTaskSwitchContext+0x42>
	__asm volatile
 810cb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cb1e:	f383 8811 	msr	BASEPRI, r3
 810cb22:	f3bf 8f6f 	isb	sy
 810cb26:	f3bf 8f4f 	dsb	sy
 810cb2a:	607b      	str	r3, [r7, #4]
}
 810cb2c:	bf00      	nop
 810cb2e:	bf00      	nop
 810cb30:	e7fd      	b.n	810cb2e <vTaskSwitchContext+0x3e>
 810cb32:	68fb      	ldr	r3, [r7, #12]
 810cb34:	3b01      	subs	r3, #1
 810cb36:	60fb      	str	r3, [r7, #12]
 810cb38:	491d      	ldr	r1, [pc, #116]	@ (810cbb0 <vTaskSwitchContext+0xc0>)
 810cb3a:	68fa      	ldr	r2, [r7, #12]
 810cb3c:	4613      	mov	r3, r2
 810cb3e:	009b      	lsls	r3, r3, #2
 810cb40:	4413      	add	r3, r2
 810cb42:	009b      	lsls	r3, r3, #2
 810cb44:	440b      	add	r3, r1
 810cb46:	681b      	ldr	r3, [r3, #0]
 810cb48:	2b00      	cmp	r3, #0
 810cb4a:	d0e3      	beq.n	810cb14 <vTaskSwitchContext+0x24>
 810cb4c:	68fa      	ldr	r2, [r7, #12]
 810cb4e:	4613      	mov	r3, r2
 810cb50:	009b      	lsls	r3, r3, #2
 810cb52:	4413      	add	r3, r2
 810cb54:	009b      	lsls	r3, r3, #2
 810cb56:	4a16      	ldr	r2, [pc, #88]	@ (810cbb0 <vTaskSwitchContext+0xc0>)
 810cb58:	4413      	add	r3, r2
 810cb5a:	60bb      	str	r3, [r7, #8]
 810cb5c:	68bb      	ldr	r3, [r7, #8]
 810cb5e:	685b      	ldr	r3, [r3, #4]
 810cb60:	685a      	ldr	r2, [r3, #4]
 810cb62:	68bb      	ldr	r3, [r7, #8]
 810cb64:	605a      	str	r2, [r3, #4]
 810cb66:	68bb      	ldr	r3, [r7, #8]
 810cb68:	685a      	ldr	r2, [r3, #4]
 810cb6a:	68bb      	ldr	r3, [r7, #8]
 810cb6c:	3308      	adds	r3, #8
 810cb6e:	429a      	cmp	r2, r3
 810cb70:	d104      	bne.n	810cb7c <vTaskSwitchContext+0x8c>
 810cb72:	68bb      	ldr	r3, [r7, #8]
 810cb74:	685b      	ldr	r3, [r3, #4]
 810cb76:	685a      	ldr	r2, [r3, #4]
 810cb78:	68bb      	ldr	r3, [r7, #8]
 810cb7a:	605a      	str	r2, [r3, #4]
 810cb7c:	68bb      	ldr	r3, [r7, #8]
 810cb7e:	685b      	ldr	r3, [r3, #4]
 810cb80:	68db      	ldr	r3, [r3, #12]
 810cb82:	4a0c      	ldr	r2, [pc, #48]	@ (810cbb4 <vTaskSwitchContext+0xc4>)
 810cb84:	6013      	str	r3, [r2, #0]
 810cb86:	4a09      	ldr	r2, [pc, #36]	@ (810cbac <vTaskSwitchContext+0xbc>)
 810cb88:	68fb      	ldr	r3, [r7, #12]
 810cb8a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810cb8c:	4b09      	ldr	r3, [pc, #36]	@ (810cbb4 <vTaskSwitchContext+0xc4>)
 810cb8e:	681b      	ldr	r3, [r3, #0]
 810cb90:	3354      	adds	r3, #84	@ 0x54
 810cb92:	4a09      	ldr	r2, [pc, #36]	@ (810cbb8 <vTaskSwitchContext+0xc8>)
 810cb94:	6013      	str	r3, [r2, #0]
}
 810cb96:	bf00      	nop
 810cb98:	3714      	adds	r7, #20
 810cb9a:	46bd      	mov	sp, r7
 810cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cba0:	4770      	bx	lr
 810cba2:	bf00      	nop
 810cba4:	10004d64 	.word	0x10004d64
 810cba8:	10004d50 	.word	0x10004d50
 810cbac:	10004d44 	.word	0x10004d44
 810cbb0:	1000486c 	.word	0x1000486c
 810cbb4:	10004868 	.word	0x10004868
 810cbb8:	10000020 	.word	0x10000020

0810cbbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810cbbc:	b580      	push	{r7, lr}
 810cbbe:	b084      	sub	sp, #16
 810cbc0:	af00      	add	r7, sp, #0
 810cbc2:	6078      	str	r0, [r7, #4]
 810cbc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810cbc6:	687b      	ldr	r3, [r7, #4]
 810cbc8:	2b00      	cmp	r3, #0
 810cbca:	d10b      	bne.n	810cbe4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810cbcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cbd0:	f383 8811 	msr	BASEPRI, r3
 810cbd4:	f3bf 8f6f 	isb	sy
 810cbd8:	f3bf 8f4f 	dsb	sy
 810cbdc:	60fb      	str	r3, [r7, #12]
}
 810cbde:	bf00      	nop
 810cbe0:	bf00      	nop
 810cbe2:	e7fd      	b.n	810cbe0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810cbe4:	4b07      	ldr	r3, [pc, #28]	@ (810cc04 <vTaskPlaceOnEventList+0x48>)
 810cbe6:	681b      	ldr	r3, [r3, #0]
 810cbe8:	3318      	adds	r3, #24
 810cbea:	4619      	mov	r1, r3
 810cbec:	6878      	ldr	r0, [r7, #4]
 810cbee:	f7fe fc18 	bl	810b422 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810cbf2:	2101      	movs	r1, #1
 810cbf4:	6838      	ldr	r0, [r7, #0]
 810cbf6:	f000 fa87 	bl	810d108 <prvAddCurrentTaskToDelayedList>
}
 810cbfa:	bf00      	nop
 810cbfc:	3710      	adds	r7, #16
 810cbfe:	46bd      	mov	sp, r7
 810cc00:	bd80      	pop	{r7, pc}
 810cc02:	bf00      	nop
 810cc04:	10004868 	.word	0x10004868

0810cc08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810cc08:	b580      	push	{r7, lr}
 810cc0a:	b086      	sub	sp, #24
 810cc0c:	af00      	add	r7, sp, #0
 810cc0e:	60f8      	str	r0, [r7, #12]
 810cc10:	60b9      	str	r1, [r7, #8]
 810cc12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810cc14:	68fb      	ldr	r3, [r7, #12]
 810cc16:	2b00      	cmp	r3, #0
 810cc18:	d10b      	bne.n	810cc32 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810cc1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cc1e:	f383 8811 	msr	BASEPRI, r3
 810cc22:	f3bf 8f6f 	isb	sy
 810cc26:	f3bf 8f4f 	dsb	sy
 810cc2a:	617b      	str	r3, [r7, #20]
}
 810cc2c:	bf00      	nop
 810cc2e:	bf00      	nop
 810cc30:	e7fd      	b.n	810cc2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810cc32:	4b0a      	ldr	r3, [pc, #40]	@ (810cc5c <vTaskPlaceOnEventListRestricted+0x54>)
 810cc34:	681b      	ldr	r3, [r3, #0]
 810cc36:	3318      	adds	r3, #24
 810cc38:	4619      	mov	r1, r3
 810cc3a:	68f8      	ldr	r0, [r7, #12]
 810cc3c:	f7fe fbcd 	bl	810b3da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810cc40:	687b      	ldr	r3, [r7, #4]
 810cc42:	2b00      	cmp	r3, #0
 810cc44:	d002      	beq.n	810cc4c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810cc46:	f04f 33ff 	mov.w	r3, #4294967295
 810cc4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810cc4c:	6879      	ldr	r1, [r7, #4]
 810cc4e:	68b8      	ldr	r0, [r7, #8]
 810cc50:	f000 fa5a 	bl	810d108 <prvAddCurrentTaskToDelayedList>
	}
 810cc54:	bf00      	nop
 810cc56:	3718      	adds	r7, #24
 810cc58:	46bd      	mov	sp, r7
 810cc5a:	bd80      	pop	{r7, pc}
 810cc5c:	10004868 	.word	0x10004868

0810cc60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810cc60:	b580      	push	{r7, lr}
 810cc62:	b086      	sub	sp, #24
 810cc64:	af00      	add	r7, sp, #0
 810cc66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810cc68:	687b      	ldr	r3, [r7, #4]
 810cc6a:	68db      	ldr	r3, [r3, #12]
 810cc6c:	68db      	ldr	r3, [r3, #12]
 810cc6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810cc70:	693b      	ldr	r3, [r7, #16]
 810cc72:	2b00      	cmp	r3, #0
 810cc74:	d10b      	bne.n	810cc8e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810cc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cc7a:	f383 8811 	msr	BASEPRI, r3
 810cc7e:	f3bf 8f6f 	isb	sy
 810cc82:	f3bf 8f4f 	dsb	sy
 810cc86:	60fb      	str	r3, [r7, #12]
}
 810cc88:	bf00      	nop
 810cc8a:	bf00      	nop
 810cc8c:	e7fd      	b.n	810cc8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810cc8e:	693b      	ldr	r3, [r7, #16]
 810cc90:	3318      	adds	r3, #24
 810cc92:	4618      	mov	r0, r3
 810cc94:	f7fe fbfe 	bl	810b494 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810cc98:	4b1d      	ldr	r3, [pc, #116]	@ (810cd10 <xTaskRemoveFromEventList+0xb0>)
 810cc9a:	681b      	ldr	r3, [r3, #0]
 810cc9c:	2b00      	cmp	r3, #0
 810cc9e:	d11d      	bne.n	810ccdc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810cca0:	693b      	ldr	r3, [r7, #16]
 810cca2:	3304      	adds	r3, #4
 810cca4:	4618      	mov	r0, r3
 810cca6:	f7fe fbf5 	bl	810b494 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810ccaa:	693b      	ldr	r3, [r7, #16]
 810ccac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ccae:	4b19      	ldr	r3, [pc, #100]	@ (810cd14 <xTaskRemoveFromEventList+0xb4>)
 810ccb0:	681b      	ldr	r3, [r3, #0]
 810ccb2:	429a      	cmp	r2, r3
 810ccb4:	d903      	bls.n	810ccbe <xTaskRemoveFromEventList+0x5e>
 810ccb6:	693b      	ldr	r3, [r7, #16]
 810ccb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ccba:	4a16      	ldr	r2, [pc, #88]	@ (810cd14 <xTaskRemoveFromEventList+0xb4>)
 810ccbc:	6013      	str	r3, [r2, #0]
 810ccbe:	693b      	ldr	r3, [r7, #16]
 810ccc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ccc2:	4613      	mov	r3, r2
 810ccc4:	009b      	lsls	r3, r3, #2
 810ccc6:	4413      	add	r3, r2
 810ccc8:	009b      	lsls	r3, r3, #2
 810ccca:	4a13      	ldr	r2, [pc, #76]	@ (810cd18 <xTaskRemoveFromEventList+0xb8>)
 810cccc:	441a      	add	r2, r3
 810ccce:	693b      	ldr	r3, [r7, #16]
 810ccd0:	3304      	adds	r3, #4
 810ccd2:	4619      	mov	r1, r3
 810ccd4:	4610      	mov	r0, r2
 810ccd6:	f7fe fb80 	bl	810b3da <vListInsertEnd>
 810ccda:	e005      	b.n	810cce8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810ccdc:	693b      	ldr	r3, [r7, #16]
 810ccde:	3318      	adds	r3, #24
 810cce0:	4619      	mov	r1, r3
 810cce2:	480e      	ldr	r0, [pc, #56]	@ (810cd1c <xTaskRemoveFromEventList+0xbc>)
 810cce4:	f7fe fb79 	bl	810b3da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810cce8:	693b      	ldr	r3, [r7, #16]
 810ccea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ccec:	4b0c      	ldr	r3, [pc, #48]	@ (810cd20 <xTaskRemoveFromEventList+0xc0>)
 810ccee:	681b      	ldr	r3, [r3, #0]
 810ccf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ccf2:	429a      	cmp	r2, r3
 810ccf4:	d905      	bls.n	810cd02 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810ccf6:	2301      	movs	r3, #1
 810ccf8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810ccfa:	4b0a      	ldr	r3, [pc, #40]	@ (810cd24 <xTaskRemoveFromEventList+0xc4>)
 810ccfc:	2201      	movs	r2, #1
 810ccfe:	601a      	str	r2, [r3, #0]
 810cd00:	e001      	b.n	810cd06 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810cd02:	2300      	movs	r3, #0
 810cd04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810cd06:	697b      	ldr	r3, [r7, #20]
}
 810cd08:	4618      	mov	r0, r3
 810cd0a:	3718      	adds	r7, #24
 810cd0c:	46bd      	mov	sp, r7
 810cd0e:	bd80      	pop	{r7, pc}
 810cd10:	10004d64 	.word	0x10004d64
 810cd14:	10004d44 	.word	0x10004d44
 810cd18:	1000486c 	.word	0x1000486c
 810cd1c:	10004cfc 	.word	0x10004cfc
 810cd20:	10004868 	.word	0x10004868
 810cd24:	10004d50 	.word	0x10004d50

0810cd28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810cd28:	b480      	push	{r7}
 810cd2a:	b083      	sub	sp, #12
 810cd2c:	af00      	add	r7, sp, #0
 810cd2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810cd30:	4b06      	ldr	r3, [pc, #24]	@ (810cd4c <vTaskInternalSetTimeOutState+0x24>)
 810cd32:	681a      	ldr	r2, [r3, #0]
 810cd34:	687b      	ldr	r3, [r7, #4]
 810cd36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810cd38:	4b05      	ldr	r3, [pc, #20]	@ (810cd50 <vTaskInternalSetTimeOutState+0x28>)
 810cd3a:	681a      	ldr	r2, [r3, #0]
 810cd3c:	687b      	ldr	r3, [r7, #4]
 810cd3e:	605a      	str	r2, [r3, #4]
}
 810cd40:	bf00      	nop
 810cd42:	370c      	adds	r7, #12
 810cd44:	46bd      	mov	sp, r7
 810cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd4a:	4770      	bx	lr
 810cd4c:	10004d54 	.word	0x10004d54
 810cd50:	10004d40 	.word	0x10004d40

0810cd54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810cd54:	b580      	push	{r7, lr}
 810cd56:	b088      	sub	sp, #32
 810cd58:	af00      	add	r7, sp, #0
 810cd5a:	6078      	str	r0, [r7, #4]
 810cd5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810cd5e:	687b      	ldr	r3, [r7, #4]
 810cd60:	2b00      	cmp	r3, #0
 810cd62:	d10b      	bne.n	810cd7c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810cd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cd68:	f383 8811 	msr	BASEPRI, r3
 810cd6c:	f3bf 8f6f 	isb	sy
 810cd70:	f3bf 8f4f 	dsb	sy
 810cd74:	613b      	str	r3, [r7, #16]
}
 810cd76:	bf00      	nop
 810cd78:	bf00      	nop
 810cd7a:	e7fd      	b.n	810cd78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810cd7c:	683b      	ldr	r3, [r7, #0]
 810cd7e:	2b00      	cmp	r3, #0
 810cd80:	d10b      	bne.n	810cd9a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810cd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cd86:	f383 8811 	msr	BASEPRI, r3
 810cd8a:	f3bf 8f6f 	isb	sy
 810cd8e:	f3bf 8f4f 	dsb	sy
 810cd92:	60fb      	str	r3, [r7, #12]
}
 810cd94:	bf00      	nop
 810cd96:	bf00      	nop
 810cd98:	e7fd      	b.n	810cd96 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810cd9a:	f7fe fcd5 	bl	810b748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810cd9e:	4b1d      	ldr	r3, [pc, #116]	@ (810ce14 <xTaskCheckForTimeOut+0xc0>)
 810cda0:	681b      	ldr	r3, [r3, #0]
 810cda2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810cda4:	687b      	ldr	r3, [r7, #4]
 810cda6:	685b      	ldr	r3, [r3, #4]
 810cda8:	69ba      	ldr	r2, [r7, #24]
 810cdaa:	1ad3      	subs	r3, r2, r3
 810cdac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810cdae:	683b      	ldr	r3, [r7, #0]
 810cdb0:	681b      	ldr	r3, [r3, #0]
 810cdb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cdb6:	d102      	bne.n	810cdbe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810cdb8:	2300      	movs	r3, #0
 810cdba:	61fb      	str	r3, [r7, #28]
 810cdbc:	e023      	b.n	810ce06 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810cdbe:	687b      	ldr	r3, [r7, #4]
 810cdc0:	681a      	ldr	r2, [r3, #0]
 810cdc2:	4b15      	ldr	r3, [pc, #84]	@ (810ce18 <xTaskCheckForTimeOut+0xc4>)
 810cdc4:	681b      	ldr	r3, [r3, #0]
 810cdc6:	429a      	cmp	r2, r3
 810cdc8:	d007      	beq.n	810cdda <xTaskCheckForTimeOut+0x86>
 810cdca:	687b      	ldr	r3, [r7, #4]
 810cdcc:	685b      	ldr	r3, [r3, #4]
 810cdce:	69ba      	ldr	r2, [r7, #24]
 810cdd0:	429a      	cmp	r2, r3
 810cdd2:	d302      	bcc.n	810cdda <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810cdd4:	2301      	movs	r3, #1
 810cdd6:	61fb      	str	r3, [r7, #28]
 810cdd8:	e015      	b.n	810ce06 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810cdda:	683b      	ldr	r3, [r7, #0]
 810cddc:	681b      	ldr	r3, [r3, #0]
 810cdde:	697a      	ldr	r2, [r7, #20]
 810cde0:	429a      	cmp	r2, r3
 810cde2:	d20b      	bcs.n	810cdfc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810cde4:	683b      	ldr	r3, [r7, #0]
 810cde6:	681a      	ldr	r2, [r3, #0]
 810cde8:	697b      	ldr	r3, [r7, #20]
 810cdea:	1ad2      	subs	r2, r2, r3
 810cdec:	683b      	ldr	r3, [r7, #0]
 810cdee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810cdf0:	6878      	ldr	r0, [r7, #4]
 810cdf2:	f7ff ff99 	bl	810cd28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810cdf6:	2300      	movs	r3, #0
 810cdf8:	61fb      	str	r3, [r7, #28]
 810cdfa:	e004      	b.n	810ce06 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810cdfc:	683b      	ldr	r3, [r7, #0]
 810cdfe:	2200      	movs	r2, #0
 810ce00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810ce02:	2301      	movs	r3, #1
 810ce04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810ce06:	f7fe fcd1 	bl	810b7ac <vPortExitCritical>

	return xReturn;
 810ce0a:	69fb      	ldr	r3, [r7, #28]
}
 810ce0c:	4618      	mov	r0, r3
 810ce0e:	3720      	adds	r7, #32
 810ce10:	46bd      	mov	sp, r7
 810ce12:	bd80      	pop	{r7, pc}
 810ce14:	10004d40 	.word	0x10004d40
 810ce18:	10004d54 	.word	0x10004d54

0810ce1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810ce1c:	b480      	push	{r7}
 810ce1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810ce20:	4b03      	ldr	r3, [pc, #12]	@ (810ce30 <vTaskMissedYield+0x14>)
 810ce22:	2201      	movs	r2, #1
 810ce24:	601a      	str	r2, [r3, #0]
}
 810ce26:	bf00      	nop
 810ce28:	46bd      	mov	sp, r7
 810ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce2e:	4770      	bx	lr
 810ce30:	10004d50 	.word	0x10004d50

0810ce34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810ce34:	b580      	push	{r7, lr}
 810ce36:	b082      	sub	sp, #8
 810ce38:	af00      	add	r7, sp, #0
 810ce3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810ce3c:	f000 f852 	bl	810cee4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810ce40:	4b06      	ldr	r3, [pc, #24]	@ (810ce5c <prvIdleTask+0x28>)
 810ce42:	681b      	ldr	r3, [r3, #0]
 810ce44:	2b01      	cmp	r3, #1
 810ce46:	d9f9      	bls.n	810ce3c <prvIdleTask+0x8>
			{
				taskYIELD();
 810ce48:	4b05      	ldr	r3, [pc, #20]	@ (810ce60 <prvIdleTask+0x2c>)
 810ce4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ce4e:	601a      	str	r2, [r3, #0]
 810ce50:	f3bf 8f4f 	dsb	sy
 810ce54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810ce58:	e7f0      	b.n	810ce3c <prvIdleTask+0x8>
 810ce5a:	bf00      	nop
 810ce5c:	1000486c 	.word	0x1000486c
 810ce60:	e000ed04 	.word	0xe000ed04

0810ce64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810ce64:	b580      	push	{r7, lr}
 810ce66:	b082      	sub	sp, #8
 810ce68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810ce6a:	2300      	movs	r3, #0
 810ce6c:	607b      	str	r3, [r7, #4]
 810ce6e:	e00c      	b.n	810ce8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810ce70:	687a      	ldr	r2, [r7, #4]
 810ce72:	4613      	mov	r3, r2
 810ce74:	009b      	lsls	r3, r3, #2
 810ce76:	4413      	add	r3, r2
 810ce78:	009b      	lsls	r3, r3, #2
 810ce7a:	4a12      	ldr	r2, [pc, #72]	@ (810cec4 <prvInitialiseTaskLists+0x60>)
 810ce7c:	4413      	add	r3, r2
 810ce7e:	4618      	mov	r0, r3
 810ce80:	f7fe fa7e 	bl	810b380 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810ce84:	687b      	ldr	r3, [r7, #4]
 810ce86:	3301      	adds	r3, #1
 810ce88:	607b      	str	r3, [r7, #4]
 810ce8a:	687b      	ldr	r3, [r7, #4]
 810ce8c:	2b37      	cmp	r3, #55	@ 0x37
 810ce8e:	d9ef      	bls.n	810ce70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810ce90:	480d      	ldr	r0, [pc, #52]	@ (810cec8 <prvInitialiseTaskLists+0x64>)
 810ce92:	f7fe fa75 	bl	810b380 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810ce96:	480d      	ldr	r0, [pc, #52]	@ (810cecc <prvInitialiseTaskLists+0x68>)
 810ce98:	f7fe fa72 	bl	810b380 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810ce9c:	480c      	ldr	r0, [pc, #48]	@ (810ced0 <prvInitialiseTaskLists+0x6c>)
 810ce9e:	f7fe fa6f 	bl	810b380 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810cea2:	480c      	ldr	r0, [pc, #48]	@ (810ced4 <prvInitialiseTaskLists+0x70>)
 810cea4:	f7fe fa6c 	bl	810b380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810cea8:	480b      	ldr	r0, [pc, #44]	@ (810ced8 <prvInitialiseTaskLists+0x74>)
 810ceaa:	f7fe fa69 	bl	810b380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810ceae:	4b0b      	ldr	r3, [pc, #44]	@ (810cedc <prvInitialiseTaskLists+0x78>)
 810ceb0:	4a05      	ldr	r2, [pc, #20]	@ (810cec8 <prvInitialiseTaskLists+0x64>)
 810ceb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810ceb4:	4b0a      	ldr	r3, [pc, #40]	@ (810cee0 <prvInitialiseTaskLists+0x7c>)
 810ceb6:	4a05      	ldr	r2, [pc, #20]	@ (810cecc <prvInitialiseTaskLists+0x68>)
 810ceb8:	601a      	str	r2, [r3, #0]
}
 810ceba:	bf00      	nop
 810cebc:	3708      	adds	r7, #8
 810cebe:	46bd      	mov	sp, r7
 810cec0:	bd80      	pop	{r7, pc}
 810cec2:	bf00      	nop
 810cec4:	1000486c 	.word	0x1000486c
 810cec8:	10004ccc 	.word	0x10004ccc
 810cecc:	10004ce0 	.word	0x10004ce0
 810ced0:	10004cfc 	.word	0x10004cfc
 810ced4:	10004d10 	.word	0x10004d10
 810ced8:	10004d28 	.word	0x10004d28
 810cedc:	10004cf4 	.word	0x10004cf4
 810cee0:	10004cf8 	.word	0x10004cf8

0810cee4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810cee4:	b580      	push	{r7, lr}
 810cee6:	b082      	sub	sp, #8
 810cee8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810ceea:	e019      	b.n	810cf20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810ceec:	f7fe fc2c 	bl	810b748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810cef0:	4b10      	ldr	r3, [pc, #64]	@ (810cf34 <prvCheckTasksWaitingTermination+0x50>)
 810cef2:	68db      	ldr	r3, [r3, #12]
 810cef4:	68db      	ldr	r3, [r3, #12]
 810cef6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810cef8:	687b      	ldr	r3, [r7, #4]
 810cefa:	3304      	adds	r3, #4
 810cefc:	4618      	mov	r0, r3
 810cefe:	f7fe fac9 	bl	810b494 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810cf02:	4b0d      	ldr	r3, [pc, #52]	@ (810cf38 <prvCheckTasksWaitingTermination+0x54>)
 810cf04:	681b      	ldr	r3, [r3, #0]
 810cf06:	3b01      	subs	r3, #1
 810cf08:	4a0b      	ldr	r2, [pc, #44]	@ (810cf38 <prvCheckTasksWaitingTermination+0x54>)
 810cf0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810cf0c:	4b0b      	ldr	r3, [pc, #44]	@ (810cf3c <prvCheckTasksWaitingTermination+0x58>)
 810cf0e:	681b      	ldr	r3, [r3, #0]
 810cf10:	3b01      	subs	r3, #1
 810cf12:	4a0a      	ldr	r2, [pc, #40]	@ (810cf3c <prvCheckTasksWaitingTermination+0x58>)
 810cf14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810cf16:	f7fe fc49 	bl	810b7ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810cf1a:	6878      	ldr	r0, [r7, #4]
 810cf1c:	f000 f810 	bl	810cf40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810cf20:	4b06      	ldr	r3, [pc, #24]	@ (810cf3c <prvCheckTasksWaitingTermination+0x58>)
 810cf22:	681b      	ldr	r3, [r3, #0]
 810cf24:	2b00      	cmp	r3, #0
 810cf26:	d1e1      	bne.n	810ceec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810cf28:	bf00      	nop
 810cf2a:	bf00      	nop
 810cf2c:	3708      	adds	r7, #8
 810cf2e:	46bd      	mov	sp, r7
 810cf30:	bd80      	pop	{r7, pc}
 810cf32:	bf00      	nop
 810cf34:	10004d10 	.word	0x10004d10
 810cf38:	10004d3c 	.word	0x10004d3c
 810cf3c:	10004d24 	.word	0x10004d24

0810cf40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810cf40:	b580      	push	{r7, lr}
 810cf42:	b084      	sub	sp, #16
 810cf44:	af00      	add	r7, sp, #0
 810cf46:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810cf48:	687b      	ldr	r3, [r7, #4]
 810cf4a:	3354      	adds	r3, #84	@ 0x54
 810cf4c:	4618      	mov	r0, r3
 810cf4e:	f001 fa55 	bl	810e3fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810cf52:	687b      	ldr	r3, [r7, #4]
 810cf54:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810cf58:	2b00      	cmp	r3, #0
 810cf5a:	d108      	bne.n	810cf6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810cf5c:	687b      	ldr	r3, [r7, #4]
 810cf5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810cf60:	4618      	mov	r0, r3
 810cf62:	f7fe f8e1 	bl	810b128 <vPortFree>
				vPortFree( pxTCB );
 810cf66:	6878      	ldr	r0, [r7, #4]
 810cf68:	f7fe f8de 	bl	810b128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810cf6c:	e019      	b.n	810cfa2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810cf6e:	687b      	ldr	r3, [r7, #4]
 810cf70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810cf74:	2b01      	cmp	r3, #1
 810cf76:	d103      	bne.n	810cf80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810cf78:	6878      	ldr	r0, [r7, #4]
 810cf7a:	f7fe f8d5 	bl	810b128 <vPortFree>
	}
 810cf7e:	e010      	b.n	810cfa2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810cf80:	687b      	ldr	r3, [r7, #4]
 810cf82:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810cf86:	2b02      	cmp	r3, #2
 810cf88:	d00b      	beq.n	810cfa2 <prvDeleteTCB+0x62>
	__asm volatile
 810cf8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cf8e:	f383 8811 	msr	BASEPRI, r3
 810cf92:	f3bf 8f6f 	isb	sy
 810cf96:	f3bf 8f4f 	dsb	sy
 810cf9a:	60fb      	str	r3, [r7, #12]
}
 810cf9c:	bf00      	nop
 810cf9e:	bf00      	nop
 810cfa0:	e7fd      	b.n	810cf9e <prvDeleteTCB+0x5e>
	}
 810cfa2:	bf00      	nop
 810cfa4:	3710      	adds	r7, #16
 810cfa6:	46bd      	mov	sp, r7
 810cfa8:	bd80      	pop	{r7, pc}
	...

0810cfac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810cfac:	b480      	push	{r7}
 810cfae:	b083      	sub	sp, #12
 810cfb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810cfb2:	4b0c      	ldr	r3, [pc, #48]	@ (810cfe4 <prvResetNextTaskUnblockTime+0x38>)
 810cfb4:	681b      	ldr	r3, [r3, #0]
 810cfb6:	681b      	ldr	r3, [r3, #0]
 810cfb8:	2b00      	cmp	r3, #0
 810cfba:	d104      	bne.n	810cfc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810cfbc:	4b0a      	ldr	r3, [pc, #40]	@ (810cfe8 <prvResetNextTaskUnblockTime+0x3c>)
 810cfbe:	f04f 32ff 	mov.w	r2, #4294967295
 810cfc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810cfc4:	e008      	b.n	810cfd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810cfc6:	4b07      	ldr	r3, [pc, #28]	@ (810cfe4 <prvResetNextTaskUnblockTime+0x38>)
 810cfc8:	681b      	ldr	r3, [r3, #0]
 810cfca:	68db      	ldr	r3, [r3, #12]
 810cfcc:	68db      	ldr	r3, [r3, #12]
 810cfce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810cfd0:	687b      	ldr	r3, [r7, #4]
 810cfd2:	685b      	ldr	r3, [r3, #4]
 810cfd4:	4a04      	ldr	r2, [pc, #16]	@ (810cfe8 <prvResetNextTaskUnblockTime+0x3c>)
 810cfd6:	6013      	str	r3, [r2, #0]
}
 810cfd8:	bf00      	nop
 810cfda:	370c      	adds	r7, #12
 810cfdc:	46bd      	mov	sp, r7
 810cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cfe2:	4770      	bx	lr
 810cfe4:	10004cf4 	.word	0x10004cf4
 810cfe8:	10004d5c 	.word	0x10004d5c

0810cfec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810cfec:	b480      	push	{r7}
 810cfee:	b083      	sub	sp, #12
 810cff0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810cff2:	4b0b      	ldr	r3, [pc, #44]	@ (810d020 <xTaskGetSchedulerState+0x34>)
 810cff4:	681b      	ldr	r3, [r3, #0]
 810cff6:	2b00      	cmp	r3, #0
 810cff8:	d102      	bne.n	810d000 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810cffa:	2301      	movs	r3, #1
 810cffc:	607b      	str	r3, [r7, #4]
 810cffe:	e008      	b.n	810d012 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810d000:	4b08      	ldr	r3, [pc, #32]	@ (810d024 <xTaskGetSchedulerState+0x38>)
 810d002:	681b      	ldr	r3, [r3, #0]
 810d004:	2b00      	cmp	r3, #0
 810d006:	d102      	bne.n	810d00e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810d008:	2302      	movs	r3, #2
 810d00a:	607b      	str	r3, [r7, #4]
 810d00c:	e001      	b.n	810d012 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810d00e:	2300      	movs	r3, #0
 810d010:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810d012:	687b      	ldr	r3, [r7, #4]
	}
 810d014:	4618      	mov	r0, r3
 810d016:	370c      	adds	r7, #12
 810d018:	46bd      	mov	sp, r7
 810d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d01e:	4770      	bx	lr
 810d020:	10004d48 	.word	0x10004d48
 810d024:	10004d64 	.word	0x10004d64

0810d028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810d028:	b580      	push	{r7, lr}
 810d02a:	b086      	sub	sp, #24
 810d02c:	af00      	add	r7, sp, #0
 810d02e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810d030:	687b      	ldr	r3, [r7, #4]
 810d032:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810d034:	2300      	movs	r3, #0
 810d036:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810d038:	687b      	ldr	r3, [r7, #4]
 810d03a:	2b00      	cmp	r3, #0
 810d03c:	d058      	beq.n	810d0f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810d03e:	4b2f      	ldr	r3, [pc, #188]	@ (810d0fc <xTaskPriorityDisinherit+0xd4>)
 810d040:	681b      	ldr	r3, [r3, #0]
 810d042:	693a      	ldr	r2, [r7, #16]
 810d044:	429a      	cmp	r2, r3
 810d046:	d00b      	beq.n	810d060 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810d048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d04c:	f383 8811 	msr	BASEPRI, r3
 810d050:	f3bf 8f6f 	isb	sy
 810d054:	f3bf 8f4f 	dsb	sy
 810d058:	60fb      	str	r3, [r7, #12]
}
 810d05a:	bf00      	nop
 810d05c:	bf00      	nop
 810d05e:	e7fd      	b.n	810d05c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810d060:	693b      	ldr	r3, [r7, #16]
 810d062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810d064:	2b00      	cmp	r3, #0
 810d066:	d10b      	bne.n	810d080 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810d068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d06c:	f383 8811 	msr	BASEPRI, r3
 810d070:	f3bf 8f6f 	isb	sy
 810d074:	f3bf 8f4f 	dsb	sy
 810d078:	60bb      	str	r3, [r7, #8]
}
 810d07a:	bf00      	nop
 810d07c:	bf00      	nop
 810d07e:	e7fd      	b.n	810d07c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810d080:	693b      	ldr	r3, [r7, #16]
 810d082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810d084:	1e5a      	subs	r2, r3, #1
 810d086:	693b      	ldr	r3, [r7, #16]
 810d088:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810d08a:	693b      	ldr	r3, [r7, #16]
 810d08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d08e:	693b      	ldr	r3, [r7, #16]
 810d090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810d092:	429a      	cmp	r2, r3
 810d094:	d02c      	beq.n	810d0f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810d096:	693b      	ldr	r3, [r7, #16]
 810d098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810d09a:	2b00      	cmp	r3, #0
 810d09c:	d128      	bne.n	810d0f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810d09e:	693b      	ldr	r3, [r7, #16]
 810d0a0:	3304      	adds	r3, #4
 810d0a2:	4618      	mov	r0, r3
 810d0a4:	f7fe f9f6 	bl	810b494 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810d0a8:	693b      	ldr	r3, [r7, #16]
 810d0aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810d0ac:	693b      	ldr	r3, [r7, #16]
 810d0ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810d0b0:	693b      	ldr	r3, [r7, #16]
 810d0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d0b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810d0b8:	693b      	ldr	r3, [r7, #16]
 810d0ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810d0bc:	693b      	ldr	r3, [r7, #16]
 810d0be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d0c0:	4b0f      	ldr	r3, [pc, #60]	@ (810d100 <xTaskPriorityDisinherit+0xd8>)
 810d0c2:	681b      	ldr	r3, [r3, #0]
 810d0c4:	429a      	cmp	r2, r3
 810d0c6:	d903      	bls.n	810d0d0 <xTaskPriorityDisinherit+0xa8>
 810d0c8:	693b      	ldr	r3, [r7, #16]
 810d0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d0cc:	4a0c      	ldr	r2, [pc, #48]	@ (810d100 <xTaskPriorityDisinherit+0xd8>)
 810d0ce:	6013      	str	r3, [r2, #0]
 810d0d0:	693b      	ldr	r3, [r7, #16]
 810d0d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d0d4:	4613      	mov	r3, r2
 810d0d6:	009b      	lsls	r3, r3, #2
 810d0d8:	4413      	add	r3, r2
 810d0da:	009b      	lsls	r3, r3, #2
 810d0dc:	4a09      	ldr	r2, [pc, #36]	@ (810d104 <xTaskPriorityDisinherit+0xdc>)
 810d0de:	441a      	add	r2, r3
 810d0e0:	693b      	ldr	r3, [r7, #16]
 810d0e2:	3304      	adds	r3, #4
 810d0e4:	4619      	mov	r1, r3
 810d0e6:	4610      	mov	r0, r2
 810d0e8:	f7fe f977 	bl	810b3da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810d0ec:	2301      	movs	r3, #1
 810d0ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810d0f0:	697b      	ldr	r3, [r7, #20]
	}
 810d0f2:	4618      	mov	r0, r3
 810d0f4:	3718      	adds	r7, #24
 810d0f6:	46bd      	mov	sp, r7
 810d0f8:	bd80      	pop	{r7, pc}
 810d0fa:	bf00      	nop
 810d0fc:	10004868 	.word	0x10004868
 810d100:	10004d44 	.word	0x10004d44
 810d104:	1000486c 	.word	0x1000486c

0810d108 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810d108:	b580      	push	{r7, lr}
 810d10a:	b084      	sub	sp, #16
 810d10c:	af00      	add	r7, sp, #0
 810d10e:	6078      	str	r0, [r7, #4]
 810d110:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810d112:	4b21      	ldr	r3, [pc, #132]	@ (810d198 <prvAddCurrentTaskToDelayedList+0x90>)
 810d114:	681b      	ldr	r3, [r3, #0]
 810d116:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810d118:	4b20      	ldr	r3, [pc, #128]	@ (810d19c <prvAddCurrentTaskToDelayedList+0x94>)
 810d11a:	681b      	ldr	r3, [r3, #0]
 810d11c:	3304      	adds	r3, #4
 810d11e:	4618      	mov	r0, r3
 810d120:	f7fe f9b8 	bl	810b494 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810d124:	687b      	ldr	r3, [r7, #4]
 810d126:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d12a:	d10a      	bne.n	810d142 <prvAddCurrentTaskToDelayedList+0x3a>
 810d12c:	683b      	ldr	r3, [r7, #0]
 810d12e:	2b00      	cmp	r3, #0
 810d130:	d007      	beq.n	810d142 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810d132:	4b1a      	ldr	r3, [pc, #104]	@ (810d19c <prvAddCurrentTaskToDelayedList+0x94>)
 810d134:	681b      	ldr	r3, [r3, #0]
 810d136:	3304      	adds	r3, #4
 810d138:	4619      	mov	r1, r3
 810d13a:	4819      	ldr	r0, [pc, #100]	@ (810d1a0 <prvAddCurrentTaskToDelayedList+0x98>)
 810d13c:	f7fe f94d 	bl	810b3da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810d140:	e026      	b.n	810d190 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810d142:	68fa      	ldr	r2, [r7, #12]
 810d144:	687b      	ldr	r3, [r7, #4]
 810d146:	4413      	add	r3, r2
 810d148:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810d14a:	4b14      	ldr	r3, [pc, #80]	@ (810d19c <prvAddCurrentTaskToDelayedList+0x94>)
 810d14c:	681b      	ldr	r3, [r3, #0]
 810d14e:	68ba      	ldr	r2, [r7, #8]
 810d150:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810d152:	68ba      	ldr	r2, [r7, #8]
 810d154:	68fb      	ldr	r3, [r7, #12]
 810d156:	429a      	cmp	r2, r3
 810d158:	d209      	bcs.n	810d16e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810d15a:	4b12      	ldr	r3, [pc, #72]	@ (810d1a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 810d15c:	681a      	ldr	r2, [r3, #0]
 810d15e:	4b0f      	ldr	r3, [pc, #60]	@ (810d19c <prvAddCurrentTaskToDelayedList+0x94>)
 810d160:	681b      	ldr	r3, [r3, #0]
 810d162:	3304      	adds	r3, #4
 810d164:	4619      	mov	r1, r3
 810d166:	4610      	mov	r0, r2
 810d168:	f7fe f95b 	bl	810b422 <vListInsert>
}
 810d16c:	e010      	b.n	810d190 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810d16e:	4b0e      	ldr	r3, [pc, #56]	@ (810d1a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 810d170:	681a      	ldr	r2, [r3, #0]
 810d172:	4b0a      	ldr	r3, [pc, #40]	@ (810d19c <prvAddCurrentTaskToDelayedList+0x94>)
 810d174:	681b      	ldr	r3, [r3, #0]
 810d176:	3304      	adds	r3, #4
 810d178:	4619      	mov	r1, r3
 810d17a:	4610      	mov	r0, r2
 810d17c:	f7fe f951 	bl	810b422 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810d180:	4b0a      	ldr	r3, [pc, #40]	@ (810d1ac <prvAddCurrentTaskToDelayedList+0xa4>)
 810d182:	681b      	ldr	r3, [r3, #0]
 810d184:	68ba      	ldr	r2, [r7, #8]
 810d186:	429a      	cmp	r2, r3
 810d188:	d202      	bcs.n	810d190 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810d18a:	4a08      	ldr	r2, [pc, #32]	@ (810d1ac <prvAddCurrentTaskToDelayedList+0xa4>)
 810d18c:	68bb      	ldr	r3, [r7, #8]
 810d18e:	6013      	str	r3, [r2, #0]
}
 810d190:	bf00      	nop
 810d192:	3710      	adds	r7, #16
 810d194:	46bd      	mov	sp, r7
 810d196:	bd80      	pop	{r7, pc}
 810d198:	10004d40 	.word	0x10004d40
 810d19c:	10004868 	.word	0x10004868
 810d1a0:	10004d28 	.word	0x10004d28
 810d1a4:	10004cf8 	.word	0x10004cf8
 810d1a8:	10004cf4 	.word	0x10004cf4
 810d1ac:	10004d5c 	.word	0x10004d5c

0810d1b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810d1b0:	b580      	push	{r7, lr}
 810d1b2:	b08a      	sub	sp, #40	@ 0x28
 810d1b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810d1b6:	2300      	movs	r3, #0
 810d1b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810d1ba:	f000 fb13 	bl	810d7e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810d1be:	4b1d      	ldr	r3, [pc, #116]	@ (810d234 <xTimerCreateTimerTask+0x84>)
 810d1c0:	681b      	ldr	r3, [r3, #0]
 810d1c2:	2b00      	cmp	r3, #0
 810d1c4:	d021      	beq.n	810d20a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810d1c6:	2300      	movs	r3, #0
 810d1c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810d1ca:	2300      	movs	r3, #0
 810d1cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810d1ce:	1d3a      	adds	r2, r7, #4
 810d1d0:	f107 0108 	add.w	r1, r7, #8
 810d1d4:	f107 030c 	add.w	r3, r7, #12
 810d1d8:	4618      	mov	r0, r3
 810d1da:	f7fd febd 	bl	810af58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810d1de:	6879      	ldr	r1, [r7, #4]
 810d1e0:	68bb      	ldr	r3, [r7, #8]
 810d1e2:	68fa      	ldr	r2, [r7, #12]
 810d1e4:	9202      	str	r2, [sp, #8]
 810d1e6:	9301      	str	r3, [sp, #4]
 810d1e8:	2302      	movs	r3, #2
 810d1ea:	9300      	str	r3, [sp, #0]
 810d1ec:	2300      	movs	r3, #0
 810d1ee:	460a      	mov	r2, r1
 810d1f0:	4911      	ldr	r1, [pc, #68]	@ (810d238 <xTimerCreateTimerTask+0x88>)
 810d1f2:	4812      	ldr	r0, [pc, #72]	@ (810d23c <xTimerCreateTimerTask+0x8c>)
 810d1f4:	f7ff f8a2 	bl	810c33c <xTaskCreateStatic>
 810d1f8:	4603      	mov	r3, r0
 810d1fa:	4a11      	ldr	r2, [pc, #68]	@ (810d240 <xTimerCreateTimerTask+0x90>)
 810d1fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810d1fe:	4b10      	ldr	r3, [pc, #64]	@ (810d240 <xTimerCreateTimerTask+0x90>)
 810d200:	681b      	ldr	r3, [r3, #0]
 810d202:	2b00      	cmp	r3, #0
 810d204:	d001      	beq.n	810d20a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810d206:	2301      	movs	r3, #1
 810d208:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810d20a:	697b      	ldr	r3, [r7, #20]
 810d20c:	2b00      	cmp	r3, #0
 810d20e:	d10b      	bne.n	810d228 <xTimerCreateTimerTask+0x78>
	__asm volatile
 810d210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d214:	f383 8811 	msr	BASEPRI, r3
 810d218:	f3bf 8f6f 	isb	sy
 810d21c:	f3bf 8f4f 	dsb	sy
 810d220:	613b      	str	r3, [r7, #16]
}
 810d222:	bf00      	nop
 810d224:	bf00      	nop
 810d226:	e7fd      	b.n	810d224 <xTimerCreateTimerTask+0x74>
	return xReturn;
 810d228:	697b      	ldr	r3, [r7, #20]
}
 810d22a:	4618      	mov	r0, r3
 810d22c:	3718      	adds	r7, #24
 810d22e:	46bd      	mov	sp, r7
 810d230:	bd80      	pop	{r7, pc}
 810d232:	bf00      	nop
 810d234:	10004d98 	.word	0x10004d98
 810d238:	0810f1a0 	.word	0x0810f1a0
 810d23c:	0810d37d 	.word	0x0810d37d
 810d240:	10004d9c 	.word	0x10004d9c

0810d244 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810d244:	b580      	push	{r7, lr}
 810d246:	b08a      	sub	sp, #40	@ 0x28
 810d248:	af00      	add	r7, sp, #0
 810d24a:	60f8      	str	r0, [r7, #12]
 810d24c:	60b9      	str	r1, [r7, #8]
 810d24e:	607a      	str	r2, [r7, #4]
 810d250:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810d252:	2300      	movs	r3, #0
 810d254:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810d256:	68fb      	ldr	r3, [r7, #12]
 810d258:	2b00      	cmp	r3, #0
 810d25a:	d10b      	bne.n	810d274 <xTimerGenericCommand+0x30>
	__asm volatile
 810d25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d260:	f383 8811 	msr	BASEPRI, r3
 810d264:	f3bf 8f6f 	isb	sy
 810d268:	f3bf 8f4f 	dsb	sy
 810d26c:	623b      	str	r3, [r7, #32]
}
 810d26e:	bf00      	nop
 810d270:	bf00      	nop
 810d272:	e7fd      	b.n	810d270 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810d274:	4b19      	ldr	r3, [pc, #100]	@ (810d2dc <xTimerGenericCommand+0x98>)
 810d276:	681b      	ldr	r3, [r3, #0]
 810d278:	2b00      	cmp	r3, #0
 810d27a:	d02a      	beq.n	810d2d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810d27c:	68bb      	ldr	r3, [r7, #8]
 810d27e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810d280:	687b      	ldr	r3, [r7, #4]
 810d282:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810d284:	68fb      	ldr	r3, [r7, #12]
 810d286:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810d288:	68bb      	ldr	r3, [r7, #8]
 810d28a:	2b05      	cmp	r3, #5
 810d28c:	dc18      	bgt.n	810d2c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810d28e:	f7ff fead 	bl	810cfec <xTaskGetSchedulerState>
 810d292:	4603      	mov	r3, r0
 810d294:	2b02      	cmp	r3, #2
 810d296:	d109      	bne.n	810d2ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810d298:	4b10      	ldr	r3, [pc, #64]	@ (810d2dc <xTimerGenericCommand+0x98>)
 810d29a:	6818      	ldr	r0, [r3, #0]
 810d29c:	f107 0110 	add.w	r1, r7, #16
 810d2a0:	2300      	movs	r3, #0
 810d2a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d2a4:	f7fe fc5a 	bl	810bb5c <xQueueGenericSend>
 810d2a8:	6278      	str	r0, [r7, #36]	@ 0x24
 810d2aa:	e012      	b.n	810d2d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810d2ac:	4b0b      	ldr	r3, [pc, #44]	@ (810d2dc <xTimerGenericCommand+0x98>)
 810d2ae:	6818      	ldr	r0, [r3, #0]
 810d2b0:	f107 0110 	add.w	r1, r7, #16
 810d2b4:	2300      	movs	r3, #0
 810d2b6:	2200      	movs	r2, #0
 810d2b8:	f7fe fc50 	bl	810bb5c <xQueueGenericSend>
 810d2bc:	6278      	str	r0, [r7, #36]	@ 0x24
 810d2be:	e008      	b.n	810d2d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810d2c0:	4b06      	ldr	r3, [pc, #24]	@ (810d2dc <xTimerGenericCommand+0x98>)
 810d2c2:	6818      	ldr	r0, [r3, #0]
 810d2c4:	f107 0110 	add.w	r1, r7, #16
 810d2c8:	2300      	movs	r3, #0
 810d2ca:	683a      	ldr	r2, [r7, #0]
 810d2cc:	f7fe fd48 	bl	810bd60 <xQueueGenericSendFromISR>
 810d2d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810d2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810d2d4:	4618      	mov	r0, r3
 810d2d6:	3728      	adds	r7, #40	@ 0x28
 810d2d8:	46bd      	mov	sp, r7
 810d2da:	bd80      	pop	{r7, pc}
 810d2dc:	10004d98 	.word	0x10004d98

0810d2e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810d2e0:	b580      	push	{r7, lr}
 810d2e2:	b088      	sub	sp, #32
 810d2e4:	af02      	add	r7, sp, #8
 810d2e6:	6078      	str	r0, [r7, #4]
 810d2e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810d2ea:	4b23      	ldr	r3, [pc, #140]	@ (810d378 <prvProcessExpiredTimer+0x98>)
 810d2ec:	681b      	ldr	r3, [r3, #0]
 810d2ee:	68db      	ldr	r3, [r3, #12]
 810d2f0:	68db      	ldr	r3, [r3, #12]
 810d2f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810d2f4:	697b      	ldr	r3, [r7, #20]
 810d2f6:	3304      	adds	r3, #4
 810d2f8:	4618      	mov	r0, r3
 810d2fa:	f7fe f8cb 	bl	810b494 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810d2fe:	697b      	ldr	r3, [r7, #20]
 810d300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810d304:	f003 0304 	and.w	r3, r3, #4
 810d308:	2b00      	cmp	r3, #0
 810d30a:	d023      	beq.n	810d354 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810d30c:	697b      	ldr	r3, [r7, #20]
 810d30e:	699a      	ldr	r2, [r3, #24]
 810d310:	687b      	ldr	r3, [r7, #4]
 810d312:	18d1      	adds	r1, r2, r3
 810d314:	687b      	ldr	r3, [r7, #4]
 810d316:	683a      	ldr	r2, [r7, #0]
 810d318:	6978      	ldr	r0, [r7, #20]
 810d31a:	f000 f8d5 	bl	810d4c8 <prvInsertTimerInActiveList>
 810d31e:	4603      	mov	r3, r0
 810d320:	2b00      	cmp	r3, #0
 810d322:	d020      	beq.n	810d366 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810d324:	2300      	movs	r3, #0
 810d326:	9300      	str	r3, [sp, #0]
 810d328:	2300      	movs	r3, #0
 810d32a:	687a      	ldr	r2, [r7, #4]
 810d32c:	2100      	movs	r1, #0
 810d32e:	6978      	ldr	r0, [r7, #20]
 810d330:	f7ff ff88 	bl	810d244 <xTimerGenericCommand>
 810d334:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810d336:	693b      	ldr	r3, [r7, #16]
 810d338:	2b00      	cmp	r3, #0
 810d33a:	d114      	bne.n	810d366 <prvProcessExpiredTimer+0x86>
	__asm volatile
 810d33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d340:	f383 8811 	msr	BASEPRI, r3
 810d344:	f3bf 8f6f 	isb	sy
 810d348:	f3bf 8f4f 	dsb	sy
 810d34c:	60fb      	str	r3, [r7, #12]
}
 810d34e:	bf00      	nop
 810d350:	bf00      	nop
 810d352:	e7fd      	b.n	810d350 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810d354:	697b      	ldr	r3, [r7, #20]
 810d356:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810d35a:	f023 0301 	bic.w	r3, r3, #1
 810d35e:	b2da      	uxtb	r2, r3
 810d360:	697b      	ldr	r3, [r7, #20]
 810d362:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810d366:	697b      	ldr	r3, [r7, #20]
 810d368:	6a1b      	ldr	r3, [r3, #32]
 810d36a:	6978      	ldr	r0, [r7, #20]
 810d36c:	4798      	blx	r3
}
 810d36e:	bf00      	nop
 810d370:	3718      	adds	r7, #24
 810d372:	46bd      	mov	sp, r7
 810d374:	bd80      	pop	{r7, pc}
 810d376:	bf00      	nop
 810d378:	10004d90 	.word	0x10004d90

0810d37c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810d37c:	b580      	push	{r7, lr}
 810d37e:	b084      	sub	sp, #16
 810d380:	af00      	add	r7, sp, #0
 810d382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810d384:	f107 0308 	add.w	r3, r7, #8
 810d388:	4618      	mov	r0, r3
 810d38a:	f000 f859 	bl	810d440 <prvGetNextExpireTime>
 810d38e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810d390:	68bb      	ldr	r3, [r7, #8]
 810d392:	4619      	mov	r1, r3
 810d394:	68f8      	ldr	r0, [r7, #12]
 810d396:	f000 f805 	bl	810d3a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810d39a:	f000 f8d7 	bl	810d54c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810d39e:	bf00      	nop
 810d3a0:	e7f0      	b.n	810d384 <prvTimerTask+0x8>
	...

0810d3a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810d3a4:	b580      	push	{r7, lr}
 810d3a6:	b084      	sub	sp, #16
 810d3a8:	af00      	add	r7, sp, #0
 810d3aa:	6078      	str	r0, [r7, #4]
 810d3ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810d3ae:	f7ff fa29 	bl	810c804 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810d3b2:	f107 0308 	add.w	r3, r7, #8
 810d3b6:	4618      	mov	r0, r3
 810d3b8:	f000 f866 	bl	810d488 <prvSampleTimeNow>
 810d3bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810d3be:	68bb      	ldr	r3, [r7, #8]
 810d3c0:	2b00      	cmp	r3, #0
 810d3c2:	d130      	bne.n	810d426 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810d3c4:	683b      	ldr	r3, [r7, #0]
 810d3c6:	2b00      	cmp	r3, #0
 810d3c8:	d10a      	bne.n	810d3e0 <prvProcessTimerOrBlockTask+0x3c>
 810d3ca:	687a      	ldr	r2, [r7, #4]
 810d3cc:	68fb      	ldr	r3, [r7, #12]
 810d3ce:	429a      	cmp	r2, r3
 810d3d0:	d806      	bhi.n	810d3e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810d3d2:	f7ff fa25 	bl	810c820 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810d3d6:	68f9      	ldr	r1, [r7, #12]
 810d3d8:	6878      	ldr	r0, [r7, #4]
 810d3da:	f7ff ff81 	bl	810d2e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810d3de:	e024      	b.n	810d42a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810d3e0:	683b      	ldr	r3, [r7, #0]
 810d3e2:	2b00      	cmp	r3, #0
 810d3e4:	d008      	beq.n	810d3f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810d3e6:	4b13      	ldr	r3, [pc, #76]	@ (810d434 <prvProcessTimerOrBlockTask+0x90>)
 810d3e8:	681b      	ldr	r3, [r3, #0]
 810d3ea:	681b      	ldr	r3, [r3, #0]
 810d3ec:	2b00      	cmp	r3, #0
 810d3ee:	d101      	bne.n	810d3f4 <prvProcessTimerOrBlockTask+0x50>
 810d3f0:	2301      	movs	r3, #1
 810d3f2:	e000      	b.n	810d3f6 <prvProcessTimerOrBlockTask+0x52>
 810d3f4:	2300      	movs	r3, #0
 810d3f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810d3f8:	4b0f      	ldr	r3, [pc, #60]	@ (810d438 <prvProcessTimerOrBlockTask+0x94>)
 810d3fa:	6818      	ldr	r0, [r3, #0]
 810d3fc:	687a      	ldr	r2, [r7, #4]
 810d3fe:	68fb      	ldr	r3, [r7, #12]
 810d400:	1ad3      	subs	r3, r2, r3
 810d402:	683a      	ldr	r2, [r7, #0]
 810d404:	4619      	mov	r1, r3
 810d406:	f7fe ff65 	bl	810c2d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810d40a:	f7ff fa09 	bl	810c820 <xTaskResumeAll>
 810d40e:	4603      	mov	r3, r0
 810d410:	2b00      	cmp	r3, #0
 810d412:	d10a      	bne.n	810d42a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810d414:	4b09      	ldr	r3, [pc, #36]	@ (810d43c <prvProcessTimerOrBlockTask+0x98>)
 810d416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d41a:	601a      	str	r2, [r3, #0]
 810d41c:	f3bf 8f4f 	dsb	sy
 810d420:	f3bf 8f6f 	isb	sy
}
 810d424:	e001      	b.n	810d42a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810d426:	f7ff f9fb 	bl	810c820 <xTaskResumeAll>
}
 810d42a:	bf00      	nop
 810d42c:	3710      	adds	r7, #16
 810d42e:	46bd      	mov	sp, r7
 810d430:	bd80      	pop	{r7, pc}
 810d432:	bf00      	nop
 810d434:	10004d94 	.word	0x10004d94
 810d438:	10004d98 	.word	0x10004d98
 810d43c:	e000ed04 	.word	0xe000ed04

0810d440 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810d440:	b480      	push	{r7}
 810d442:	b085      	sub	sp, #20
 810d444:	af00      	add	r7, sp, #0
 810d446:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810d448:	4b0e      	ldr	r3, [pc, #56]	@ (810d484 <prvGetNextExpireTime+0x44>)
 810d44a:	681b      	ldr	r3, [r3, #0]
 810d44c:	681b      	ldr	r3, [r3, #0]
 810d44e:	2b00      	cmp	r3, #0
 810d450:	d101      	bne.n	810d456 <prvGetNextExpireTime+0x16>
 810d452:	2201      	movs	r2, #1
 810d454:	e000      	b.n	810d458 <prvGetNextExpireTime+0x18>
 810d456:	2200      	movs	r2, #0
 810d458:	687b      	ldr	r3, [r7, #4]
 810d45a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810d45c:	687b      	ldr	r3, [r7, #4]
 810d45e:	681b      	ldr	r3, [r3, #0]
 810d460:	2b00      	cmp	r3, #0
 810d462:	d105      	bne.n	810d470 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810d464:	4b07      	ldr	r3, [pc, #28]	@ (810d484 <prvGetNextExpireTime+0x44>)
 810d466:	681b      	ldr	r3, [r3, #0]
 810d468:	68db      	ldr	r3, [r3, #12]
 810d46a:	681b      	ldr	r3, [r3, #0]
 810d46c:	60fb      	str	r3, [r7, #12]
 810d46e:	e001      	b.n	810d474 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810d470:	2300      	movs	r3, #0
 810d472:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810d474:	68fb      	ldr	r3, [r7, #12]
}
 810d476:	4618      	mov	r0, r3
 810d478:	3714      	adds	r7, #20
 810d47a:	46bd      	mov	sp, r7
 810d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d480:	4770      	bx	lr
 810d482:	bf00      	nop
 810d484:	10004d90 	.word	0x10004d90

0810d488 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810d488:	b580      	push	{r7, lr}
 810d48a:	b084      	sub	sp, #16
 810d48c:	af00      	add	r7, sp, #0
 810d48e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810d490:	f7ff fa64 	bl	810c95c <xTaskGetTickCount>
 810d494:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810d496:	4b0b      	ldr	r3, [pc, #44]	@ (810d4c4 <prvSampleTimeNow+0x3c>)
 810d498:	681b      	ldr	r3, [r3, #0]
 810d49a:	68fa      	ldr	r2, [r7, #12]
 810d49c:	429a      	cmp	r2, r3
 810d49e:	d205      	bcs.n	810d4ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810d4a0:	f000 f93a 	bl	810d718 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810d4a4:	687b      	ldr	r3, [r7, #4]
 810d4a6:	2201      	movs	r2, #1
 810d4a8:	601a      	str	r2, [r3, #0]
 810d4aa:	e002      	b.n	810d4b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810d4ac:	687b      	ldr	r3, [r7, #4]
 810d4ae:	2200      	movs	r2, #0
 810d4b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810d4b2:	4a04      	ldr	r2, [pc, #16]	@ (810d4c4 <prvSampleTimeNow+0x3c>)
 810d4b4:	68fb      	ldr	r3, [r7, #12]
 810d4b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810d4b8:	68fb      	ldr	r3, [r7, #12]
}
 810d4ba:	4618      	mov	r0, r3
 810d4bc:	3710      	adds	r7, #16
 810d4be:	46bd      	mov	sp, r7
 810d4c0:	bd80      	pop	{r7, pc}
 810d4c2:	bf00      	nop
 810d4c4:	10004da0 	.word	0x10004da0

0810d4c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810d4c8:	b580      	push	{r7, lr}
 810d4ca:	b086      	sub	sp, #24
 810d4cc:	af00      	add	r7, sp, #0
 810d4ce:	60f8      	str	r0, [r7, #12]
 810d4d0:	60b9      	str	r1, [r7, #8]
 810d4d2:	607a      	str	r2, [r7, #4]
 810d4d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810d4d6:	2300      	movs	r3, #0
 810d4d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810d4da:	68fb      	ldr	r3, [r7, #12]
 810d4dc:	68ba      	ldr	r2, [r7, #8]
 810d4de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810d4e0:	68fb      	ldr	r3, [r7, #12]
 810d4e2:	68fa      	ldr	r2, [r7, #12]
 810d4e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810d4e6:	68ba      	ldr	r2, [r7, #8]
 810d4e8:	687b      	ldr	r3, [r7, #4]
 810d4ea:	429a      	cmp	r2, r3
 810d4ec:	d812      	bhi.n	810d514 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810d4ee:	687a      	ldr	r2, [r7, #4]
 810d4f0:	683b      	ldr	r3, [r7, #0]
 810d4f2:	1ad2      	subs	r2, r2, r3
 810d4f4:	68fb      	ldr	r3, [r7, #12]
 810d4f6:	699b      	ldr	r3, [r3, #24]
 810d4f8:	429a      	cmp	r2, r3
 810d4fa:	d302      	bcc.n	810d502 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810d4fc:	2301      	movs	r3, #1
 810d4fe:	617b      	str	r3, [r7, #20]
 810d500:	e01b      	b.n	810d53a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810d502:	4b10      	ldr	r3, [pc, #64]	@ (810d544 <prvInsertTimerInActiveList+0x7c>)
 810d504:	681a      	ldr	r2, [r3, #0]
 810d506:	68fb      	ldr	r3, [r7, #12]
 810d508:	3304      	adds	r3, #4
 810d50a:	4619      	mov	r1, r3
 810d50c:	4610      	mov	r0, r2
 810d50e:	f7fd ff88 	bl	810b422 <vListInsert>
 810d512:	e012      	b.n	810d53a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810d514:	687a      	ldr	r2, [r7, #4]
 810d516:	683b      	ldr	r3, [r7, #0]
 810d518:	429a      	cmp	r2, r3
 810d51a:	d206      	bcs.n	810d52a <prvInsertTimerInActiveList+0x62>
 810d51c:	68ba      	ldr	r2, [r7, #8]
 810d51e:	683b      	ldr	r3, [r7, #0]
 810d520:	429a      	cmp	r2, r3
 810d522:	d302      	bcc.n	810d52a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810d524:	2301      	movs	r3, #1
 810d526:	617b      	str	r3, [r7, #20]
 810d528:	e007      	b.n	810d53a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810d52a:	4b07      	ldr	r3, [pc, #28]	@ (810d548 <prvInsertTimerInActiveList+0x80>)
 810d52c:	681a      	ldr	r2, [r3, #0]
 810d52e:	68fb      	ldr	r3, [r7, #12]
 810d530:	3304      	adds	r3, #4
 810d532:	4619      	mov	r1, r3
 810d534:	4610      	mov	r0, r2
 810d536:	f7fd ff74 	bl	810b422 <vListInsert>
		}
	}

	return xProcessTimerNow;
 810d53a:	697b      	ldr	r3, [r7, #20]
}
 810d53c:	4618      	mov	r0, r3
 810d53e:	3718      	adds	r7, #24
 810d540:	46bd      	mov	sp, r7
 810d542:	bd80      	pop	{r7, pc}
 810d544:	10004d94 	.word	0x10004d94
 810d548:	10004d90 	.word	0x10004d90

0810d54c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810d54c:	b580      	push	{r7, lr}
 810d54e:	b08e      	sub	sp, #56	@ 0x38
 810d550:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810d552:	e0ce      	b.n	810d6f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810d554:	687b      	ldr	r3, [r7, #4]
 810d556:	2b00      	cmp	r3, #0
 810d558:	da19      	bge.n	810d58e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810d55a:	1d3b      	adds	r3, r7, #4
 810d55c:	3304      	adds	r3, #4
 810d55e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810d560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d562:	2b00      	cmp	r3, #0
 810d564:	d10b      	bne.n	810d57e <prvProcessReceivedCommands+0x32>
	__asm volatile
 810d566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d56a:	f383 8811 	msr	BASEPRI, r3
 810d56e:	f3bf 8f6f 	isb	sy
 810d572:	f3bf 8f4f 	dsb	sy
 810d576:	61fb      	str	r3, [r7, #28]
}
 810d578:	bf00      	nop
 810d57a:	bf00      	nop
 810d57c:	e7fd      	b.n	810d57a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810d57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d580:	681b      	ldr	r3, [r3, #0]
 810d582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810d584:	6850      	ldr	r0, [r2, #4]
 810d586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810d588:	6892      	ldr	r2, [r2, #8]
 810d58a:	4611      	mov	r1, r2
 810d58c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810d58e:	687b      	ldr	r3, [r7, #4]
 810d590:	2b00      	cmp	r3, #0
 810d592:	f2c0 80ae 	blt.w	810d6f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810d596:	68fb      	ldr	r3, [r7, #12]
 810d598:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810d59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d59c:	695b      	ldr	r3, [r3, #20]
 810d59e:	2b00      	cmp	r3, #0
 810d5a0:	d004      	beq.n	810d5ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810d5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d5a4:	3304      	adds	r3, #4
 810d5a6:	4618      	mov	r0, r3
 810d5a8:	f7fd ff74 	bl	810b494 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810d5ac:	463b      	mov	r3, r7
 810d5ae:	4618      	mov	r0, r3
 810d5b0:	f7ff ff6a 	bl	810d488 <prvSampleTimeNow>
 810d5b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810d5b6:	687b      	ldr	r3, [r7, #4]
 810d5b8:	2b09      	cmp	r3, #9
 810d5ba:	f200 8097 	bhi.w	810d6ec <prvProcessReceivedCommands+0x1a0>
 810d5be:	a201      	add	r2, pc, #4	@ (adr r2, 810d5c4 <prvProcessReceivedCommands+0x78>)
 810d5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d5c4:	0810d5ed 	.word	0x0810d5ed
 810d5c8:	0810d5ed 	.word	0x0810d5ed
 810d5cc:	0810d5ed 	.word	0x0810d5ed
 810d5d0:	0810d663 	.word	0x0810d663
 810d5d4:	0810d677 	.word	0x0810d677
 810d5d8:	0810d6c3 	.word	0x0810d6c3
 810d5dc:	0810d5ed 	.word	0x0810d5ed
 810d5e0:	0810d5ed 	.word	0x0810d5ed
 810d5e4:	0810d663 	.word	0x0810d663
 810d5e8:	0810d677 	.word	0x0810d677
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810d5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d5ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810d5f2:	f043 0301 	orr.w	r3, r3, #1
 810d5f6:	b2da      	uxtb	r2, r3
 810d5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d5fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810d5fe:	68ba      	ldr	r2, [r7, #8]
 810d600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d602:	699b      	ldr	r3, [r3, #24]
 810d604:	18d1      	adds	r1, r2, r3
 810d606:	68bb      	ldr	r3, [r7, #8]
 810d608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810d60a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d60c:	f7ff ff5c 	bl	810d4c8 <prvInsertTimerInActiveList>
 810d610:	4603      	mov	r3, r0
 810d612:	2b00      	cmp	r3, #0
 810d614:	d06c      	beq.n	810d6f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810d616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d618:	6a1b      	ldr	r3, [r3, #32]
 810d61a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d61c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810d61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810d624:	f003 0304 	and.w	r3, r3, #4
 810d628:	2b00      	cmp	r3, #0
 810d62a:	d061      	beq.n	810d6f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810d62c:	68ba      	ldr	r2, [r7, #8]
 810d62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d630:	699b      	ldr	r3, [r3, #24]
 810d632:	441a      	add	r2, r3
 810d634:	2300      	movs	r3, #0
 810d636:	9300      	str	r3, [sp, #0]
 810d638:	2300      	movs	r3, #0
 810d63a:	2100      	movs	r1, #0
 810d63c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d63e:	f7ff fe01 	bl	810d244 <xTimerGenericCommand>
 810d642:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810d644:	6a3b      	ldr	r3, [r7, #32]
 810d646:	2b00      	cmp	r3, #0
 810d648:	d152      	bne.n	810d6f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810d64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d64e:	f383 8811 	msr	BASEPRI, r3
 810d652:	f3bf 8f6f 	isb	sy
 810d656:	f3bf 8f4f 	dsb	sy
 810d65a:	61bb      	str	r3, [r7, #24]
}
 810d65c:	bf00      	nop
 810d65e:	bf00      	nop
 810d660:	e7fd      	b.n	810d65e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810d662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d664:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810d668:	f023 0301 	bic.w	r3, r3, #1
 810d66c:	b2da      	uxtb	r2, r3
 810d66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d670:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810d674:	e03d      	b.n	810d6f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810d676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d678:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810d67c:	f043 0301 	orr.w	r3, r3, #1
 810d680:	b2da      	uxtb	r2, r3
 810d682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d684:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810d688:	68ba      	ldr	r2, [r7, #8]
 810d68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d68c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810d68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d690:	699b      	ldr	r3, [r3, #24]
 810d692:	2b00      	cmp	r3, #0
 810d694:	d10b      	bne.n	810d6ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 810d696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d69a:	f383 8811 	msr	BASEPRI, r3
 810d69e:	f3bf 8f6f 	isb	sy
 810d6a2:	f3bf 8f4f 	dsb	sy
 810d6a6:	617b      	str	r3, [r7, #20]
}
 810d6a8:	bf00      	nop
 810d6aa:	bf00      	nop
 810d6ac:	e7fd      	b.n	810d6aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810d6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d6b0:	699a      	ldr	r2, [r3, #24]
 810d6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d6b4:	18d1      	adds	r1, r2, r3
 810d6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d6b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810d6ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d6bc:	f7ff ff04 	bl	810d4c8 <prvInsertTimerInActiveList>
					break;
 810d6c0:	e017      	b.n	810d6f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810d6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d6c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810d6c8:	f003 0302 	and.w	r3, r3, #2
 810d6cc:	2b00      	cmp	r3, #0
 810d6ce:	d103      	bne.n	810d6d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 810d6d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d6d2:	f7fd fd29 	bl	810b128 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810d6d6:	e00c      	b.n	810d6f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810d6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d6da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810d6de:	f023 0301 	bic.w	r3, r3, #1
 810d6e2:	b2da      	uxtb	r2, r3
 810d6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d6e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810d6ea:	e002      	b.n	810d6f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 810d6ec:	bf00      	nop
 810d6ee:	e000      	b.n	810d6f2 <prvProcessReceivedCommands+0x1a6>
					break;
 810d6f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810d6f2:	4b08      	ldr	r3, [pc, #32]	@ (810d714 <prvProcessReceivedCommands+0x1c8>)
 810d6f4:	681b      	ldr	r3, [r3, #0]
 810d6f6:	1d39      	adds	r1, r7, #4
 810d6f8:	2200      	movs	r2, #0
 810d6fa:	4618      	mov	r0, r3
 810d6fc:	f7fe fbce 	bl	810be9c <xQueueReceive>
 810d700:	4603      	mov	r3, r0
 810d702:	2b00      	cmp	r3, #0
 810d704:	f47f af26 	bne.w	810d554 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 810d708:	bf00      	nop
 810d70a:	bf00      	nop
 810d70c:	3730      	adds	r7, #48	@ 0x30
 810d70e:	46bd      	mov	sp, r7
 810d710:	bd80      	pop	{r7, pc}
 810d712:	bf00      	nop
 810d714:	10004d98 	.word	0x10004d98

0810d718 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810d718:	b580      	push	{r7, lr}
 810d71a:	b088      	sub	sp, #32
 810d71c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810d71e:	e049      	b.n	810d7b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810d720:	4b2e      	ldr	r3, [pc, #184]	@ (810d7dc <prvSwitchTimerLists+0xc4>)
 810d722:	681b      	ldr	r3, [r3, #0]
 810d724:	68db      	ldr	r3, [r3, #12]
 810d726:	681b      	ldr	r3, [r3, #0]
 810d728:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810d72a:	4b2c      	ldr	r3, [pc, #176]	@ (810d7dc <prvSwitchTimerLists+0xc4>)
 810d72c:	681b      	ldr	r3, [r3, #0]
 810d72e:	68db      	ldr	r3, [r3, #12]
 810d730:	68db      	ldr	r3, [r3, #12]
 810d732:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810d734:	68fb      	ldr	r3, [r7, #12]
 810d736:	3304      	adds	r3, #4
 810d738:	4618      	mov	r0, r3
 810d73a:	f7fd feab 	bl	810b494 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810d73e:	68fb      	ldr	r3, [r7, #12]
 810d740:	6a1b      	ldr	r3, [r3, #32]
 810d742:	68f8      	ldr	r0, [r7, #12]
 810d744:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810d746:	68fb      	ldr	r3, [r7, #12]
 810d748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810d74c:	f003 0304 	and.w	r3, r3, #4
 810d750:	2b00      	cmp	r3, #0
 810d752:	d02f      	beq.n	810d7b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810d754:	68fb      	ldr	r3, [r7, #12]
 810d756:	699b      	ldr	r3, [r3, #24]
 810d758:	693a      	ldr	r2, [r7, #16]
 810d75a:	4413      	add	r3, r2
 810d75c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810d75e:	68ba      	ldr	r2, [r7, #8]
 810d760:	693b      	ldr	r3, [r7, #16]
 810d762:	429a      	cmp	r2, r3
 810d764:	d90e      	bls.n	810d784 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810d766:	68fb      	ldr	r3, [r7, #12]
 810d768:	68ba      	ldr	r2, [r7, #8]
 810d76a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810d76c:	68fb      	ldr	r3, [r7, #12]
 810d76e:	68fa      	ldr	r2, [r7, #12]
 810d770:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810d772:	4b1a      	ldr	r3, [pc, #104]	@ (810d7dc <prvSwitchTimerLists+0xc4>)
 810d774:	681a      	ldr	r2, [r3, #0]
 810d776:	68fb      	ldr	r3, [r7, #12]
 810d778:	3304      	adds	r3, #4
 810d77a:	4619      	mov	r1, r3
 810d77c:	4610      	mov	r0, r2
 810d77e:	f7fd fe50 	bl	810b422 <vListInsert>
 810d782:	e017      	b.n	810d7b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810d784:	2300      	movs	r3, #0
 810d786:	9300      	str	r3, [sp, #0]
 810d788:	2300      	movs	r3, #0
 810d78a:	693a      	ldr	r2, [r7, #16]
 810d78c:	2100      	movs	r1, #0
 810d78e:	68f8      	ldr	r0, [r7, #12]
 810d790:	f7ff fd58 	bl	810d244 <xTimerGenericCommand>
 810d794:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810d796:	687b      	ldr	r3, [r7, #4]
 810d798:	2b00      	cmp	r3, #0
 810d79a:	d10b      	bne.n	810d7b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 810d79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d7a0:	f383 8811 	msr	BASEPRI, r3
 810d7a4:	f3bf 8f6f 	isb	sy
 810d7a8:	f3bf 8f4f 	dsb	sy
 810d7ac:	603b      	str	r3, [r7, #0]
}
 810d7ae:	bf00      	nop
 810d7b0:	bf00      	nop
 810d7b2:	e7fd      	b.n	810d7b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810d7b4:	4b09      	ldr	r3, [pc, #36]	@ (810d7dc <prvSwitchTimerLists+0xc4>)
 810d7b6:	681b      	ldr	r3, [r3, #0]
 810d7b8:	681b      	ldr	r3, [r3, #0]
 810d7ba:	2b00      	cmp	r3, #0
 810d7bc:	d1b0      	bne.n	810d720 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810d7be:	4b07      	ldr	r3, [pc, #28]	@ (810d7dc <prvSwitchTimerLists+0xc4>)
 810d7c0:	681b      	ldr	r3, [r3, #0]
 810d7c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810d7c4:	4b06      	ldr	r3, [pc, #24]	@ (810d7e0 <prvSwitchTimerLists+0xc8>)
 810d7c6:	681b      	ldr	r3, [r3, #0]
 810d7c8:	4a04      	ldr	r2, [pc, #16]	@ (810d7dc <prvSwitchTimerLists+0xc4>)
 810d7ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810d7cc:	4a04      	ldr	r2, [pc, #16]	@ (810d7e0 <prvSwitchTimerLists+0xc8>)
 810d7ce:	697b      	ldr	r3, [r7, #20]
 810d7d0:	6013      	str	r3, [r2, #0]
}
 810d7d2:	bf00      	nop
 810d7d4:	3718      	adds	r7, #24
 810d7d6:	46bd      	mov	sp, r7
 810d7d8:	bd80      	pop	{r7, pc}
 810d7da:	bf00      	nop
 810d7dc:	10004d90 	.word	0x10004d90
 810d7e0:	10004d94 	.word	0x10004d94

0810d7e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810d7e4:	b580      	push	{r7, lr}
 810d7e6:	b082      	sub	sp, #8
 810d7e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810d7ea:	f7fd ffad 	bl	810b748 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810d7ee:	4b15      	ldr	r3, [pc, #84]	@ (810d844 <prvCheckForValidListAndQueue+0x60>)
 810d7f0:	681b      	ldr	r3, [r3, #0]
 810d7f2:	2b00      	cmp	r3, #0
 810d7f4:	d120      	bne.n	810d838 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810d7f6:	4814      	ldr	r0, [pc, #80]	@ (810d848 <prvCheckForValidListAndQueue+0x64>)
 810d7f8:	f7fd fdc2 	bl	810b380 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810d7fc:	4813      	ldr	r0, [pc, #76]	@ (810d84c <prvCheckForValidListAndQueue+0x68>)
 810d7fe:	f7fd fdbf 	bl	810b380 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810d802:	4b13      	ldr	r3, [pc, #76]	@ (810d850 <prvCheckForValidListAndQueue+0x6c>)
 810d804:	4a10      	ldr	r2, [pc, #64]	@ (810d848 <prvCheckForValidListAndQueue+0x64>)
 810d806:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810d808:	4b12      	ldr	r3, [pc, #72]	@ (810d854 <prvCheckForValidListAndQueue+0x70>)
 810d80a:	4a10      	ldr	r2, [pc, #64]	@ (810d84c <prvCheckForValidListAndQueue+0x68>)
 810d80c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810d80e:	2300      	movs	r3, #0
 810d810:	9300      	str	r3, [sp, #0]
 810d812:	4b11      	ldr	r3, [pc, #68]	@ (810d858 <prvCheckForValidListAndQueue+0x74>)
 810d814:	4a11      	ldr	r2, [pc, #68]	@ (810d85c <prvCheckForValidListAndQueue+0x78>)
 810d816:	2110      	movs	r1, #16
 810d818:	200a      	movs	r0, #10
 810d81a:	f7fe f8ff 	bl	810ba1c <xQueueGenericCreateStatic>
 810d81e:	4603      	mov	r3, r0
 810d820:	4a08      	ldr	r2, [pc, #32]	@ (810d844 <prvCheckForValidListAndQueue+0x60>)
 810d822:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810d824:	4b07      	ldr	r3, [pc, #28]	@ (810d844 <prvCheckForValidListAndQueue+0x60>)
 810d826:	681b      	ldr	r3, [r3, #0]
 810d828:	2b00      	cmp	r3, #0
 810d82a:	d005      	beq.n	810d838 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810d82c:	4b05      	ldr	r3, [pc, #20]	@ (810d844 <prvCheckForValidListAndQueue+0x60>)
 810d82e:	681b      	ldr	r3, [r3, #0]
 810d830:	490b      	ldr	r1, [pc, #44]	@ (810d860 <prvCheckForValidListAndQueue+0x7c>)
 810d832:	4618      	mov	r0, r3
 810d834:	f7fe fd24 	bl	810c280 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810d838:	f7fd ffb8 	bl	810b7ac <vPortExitCritical>
}
 810d83c:	bf00      	nop
 810d83e:	46bd      	mov	sp, r7
 810d840:	bd80      	pop	{r7, pc}
 810d842:	bf00      	nop
 810d844:	10004d98 	.word	0x10004d98
 810d848:	10004d68 	.word	0x10004d68
 810d84c:	10004d7c 	.word	0x10004d7c
 810d850:	10004d90 	.word	0x10004d90
 810d854:	10004d94 	.word	0x10004d94
 810d858:	10004e44 	.word	0x10004e44
 810d85c:	10004da4 	.word	0x10004da4
 810d860:	0810f1a8 	.word	0x0810f1a8

0810d864 <ResMgr_Init>:
  * @param  SendFunct : function pointer used to send message to the other core
  * @param  Callback  : function pointer used to publish the status to user side
  * @retval Return Status
  */
ResMgr_Status_t  ResMgr_Init(ResMgrSendMsg_t SendFunct, ResMgrCallback_t Callback)
{
 810d864:	b580      	push	{r7, lr}
 810d866:	b084      	sub	sp, #16
 810d868:	af00      	add	r7, sp, #0
 810d86a:	6078      	str	r0, [r7, #4]
 810d86c:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 810d86e:	2300      	movs	r3, #0
 810d870:	73fb      	strb	r3, [r7, #15]
  uint32_t count = 0;
 810d872:	2300      	movs	r3, #0
 810d874:	60bb      	str	r3, [r7, #8]
  /* lock table modification */
  RESMGR_TBL_LOCK(RESMGR_ID_RESMGR_TABLE);
 810d876:	201f      	movs	r0, #31
 810d878:	f7f8 fc6c 	bl	8106154 <HAL_HSEM_FastTake>
 810d87c:	4603      	mov	r3, r0
 810d87e:	2b00      	cmp	r3, #0
 810d880:	d1f9      	bne.n	810d876 <ResMgr_Init+0x12>

  /* Check whether the resource is free */
  if(ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State != RESMGR_STATE_TBL_INIT)
 810d882:	4b43      	ldr	r3, [pc, #268]	@ (810d990 <ResMgr_Init+0x12c>)
 810d884:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 810d888:	2b5a      	cmp	r3, #90	@ 0x5a
 810d88a:	d062      	beq.n	810d952 <ResMgr_Init+0xee>
  {

#if defined(RESMGR_USE_DEFAULT_TBL)
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 810d88c:	e05a      	b.n	810d944 <ResMgr_Init+0xe0>
    {
      if(Default_ResTbl[count] != RES_DEFAULT_ASSIGN_NONE)
 810d88e:	4a41      	ldr	r2, [pc, #260]	@ (810d994 <ResMgr_Init+0x130>)
 810d890:	68bb      	ldr	r3, [r7, #8]
 810d892:	4413      	add	r3, r2
 810d894:	781b      	ldrb	r3, [r3, #0]
 810d896:	2b00      	cmp	r3, #0
 810d898:	d02a      	beq.n	810d8f0 <ResMgr_Init+0x8c>
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_ASSIGNED;
 810d89a:	493d      	ldr	r1, [pc, #244]	@ (810d990 <ResMgr_Init+0x12c>)
 810d89c:	68ba      	ldr	r2, [r7, #8]
 810d89e:	4613      	mov	r3, r2
 810d8a0:	009b      	lsls	r3, r3, #2
 810d8a2:	4413      	add	r3, r2
 810d8a4:	009b      	lsls	r3, r3, #2
 810d8a6:	440b      	add	r3, r1
 810d8a8:	3308      	adds	r3, #8
 810d8aa:	2201      	movs	r2, #1
 810d8ac:	601a      	str	r2, [r3, #0]
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU1)
 810d8ae:	4a39      	ldr	r2, [pc, #228]	@ (810d994 <ResMgr_Init+0x130>)
 810d8b0:	68bb      	ldr	r3, [r7, #8]
 810d8b2:	4413      	add	r3, r2
 810d8b4:	781b      	ldrb	r3, [r3, #0]
 810d8b6:	2b01      	cmp	r3, #1
 810d8b8:	d109      	bne.n	810d8ce <ResMgr_Init+0x6a>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU1;
 810d8ba:	4935      	ldr	r1, [pc, #212]	@ (810d990 <ResMgr_Init+0x12c>)
 810d8bc:	68ba      	ldr	r2, [r7, #8]
 810d8be:	4613      	mov	r3, r2
 810d8c0:	009b      	lsls	r3, r3, #2
 810d8c2:	4413      	add	r3, r2
 810d8c4:	009b      	lsls	r3, r3, #2
 810d8c6:	440b      	add	r3, r1
 810d8c8:	3304      	adds	r3, #4
 810d8ca:	2208      	movs	r2, #8
 810d8cc:	601a      	str	r2, [r3, #0]
        }
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU2)
 810d8ce:	4a31      	ldr	r2, [pc, #196]	@ (810d994 <ResMgr_Init+0x130>)
 810d8d0:	68bb      	ldr	r3, [r7, #8]
 810d8d2:	4413      	add	r3, r2
 810d8d4:	781b      	ldrb	r3, [r3, #0]
 810d8d6:	2b02      	cmp	r3, #2
 810d8d8:	d11e      	bne.n	810d918 <ResMgr_Init+0xb4>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU2;
 810d8da:	492d      	ldr	r1, [pc, #180]	@ (810d990 <ResMgr_Init+0x12c>)
 810d8dc:	68ba      	ldr	r2, [r7, #8]
 810d8de:	4613      	mov	r3, r2
 810d8e0:	009b      	lsls	r3, r3, #2
 810d8e2:	4413      	add	r3, r2
 810d8e4:	009b      	lsls	r3, r3, #2
 810d8e6:	440b      	add	r3, r1
 810d8e8:	3304      	adds	r3, #4
 810d8ea:	2210      	movs	r2, #16
 810d8ec:	601a      	str	r2, [r3, #0]
 810d8ee:	e013      	b.n	810d918 <ResMgr_Init+0xb4>
        }
      }
      else
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
 810d8f0:	4927      	ldr	r1, [pc, #156]	@ (810d990 <ResMgr_Init+0x12c>)
 810d8f2:	68ba      	ldr	r2, [r7, #8]
 810d8f4:	4613      	mov	r3, r2
 810d8f6:	009b      	lsls	r3, r3, #2
 810d8f8:	4413      	add	r3, r2
 810d8fa:	009b      	lsls	r3, r3, #2
 810d8fc:	440b      	add	r3, r1
 810d8fe:	3308      	adds	r3, #8
 810d900:	2200      	movs	r2, #0
 810d902:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[count].Ctx.Flags = 0;
 810d904:	4922      	ldr	r1, [pc, #136]	@ (810d990 <ResMgr_Init+0x12c>)
 810d906:	68ba      	ldr	r2, [r7, #8]
 810d908:	4613      	mov	r3, r2
 810d90a:	009b      	lsls	r3, r3, #2
 810d90c:	4413      	add	r3, r2
 810d90e:	009b      	lsls	r3, r3, #2
 810d910:	440b      	add	r3, r1
 810d912:	3304      	adds	r3, #4
 810d914:	2200      	movs	r2, #0
 810d916:	601a      	str	r2, [r3, #0]
      }
      ResMgr_Tbl[count].Spinlock = 0;
 810d918:	491d      	ldr	r1, [pc, #116]	@ (810d990 <ResMgr_Init+0x12c>)
 810d91a:	68ba      	ldr	r2, [r7, #8]
 810d91c:	4613      	mov	r3, r2
 810d91e:	009b      	lsls	r3, r3, #2
 810d920:	4413      	add	r3, r2
 810d922:	009b      	lsls	r3, r3, #2
 810d924:	440b      	add	r3, r1
 810d926:	2200      	movs	r2, #0
 810d928:	601a      	str	r2, [r3, #0]
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
 810d92a:	4919      	ldr	r1, [pc, #100]	@ (810d990 <ResMgr_Init+0x12c>)
 810d92c:	68ba      	ldr	r2, [r7, #8]
 810d92e:	4613      	mov	r3, r2
 810d930:	009b      	lsls	r3, r3, #2
 810d932:	4413      	add	r3, r2
 810d934:	009b      	lsls	r3, r3, #2
 810d936:	440b      	add	r3, r1
 810d938:	3310      	adds	r3, #16
 810d93a:	2200      	movs	r2, #0
 810d93c:	601a      	str	r2, [r3, #0]
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 810d93e:	68bb      	ldr	r3, [r7, #8]
 810d940:	3301      	adds	r3, #1
 810d942:	60bb      	str	r3, [r7, #8]
 810d944:	68bb      	ldr	r3, [r7, #8]
 810d946:	2b15      	cmp	r3, #21
 810d948:	d9a1      	bls.n	810d88e <ResMgr_Init+0x2a>
      ResMgr_Tbl[count].Ctx.Flags = 0;
      ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
    }
#endif /* RESMGR_USE_DEFAULT_TBL */
    ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State = RESMGR_STATE_TBL_INIT;
 810d94a:	4b11      	ldr	r3, [pc, #68]	@ (810d990 <ResMgr_Init+0x12c>)
 810d94c:	225a      	movs	r2, #90	@ 0x5a
 810d94e:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
  }

  RESMGR_TBL_UNLOCK(RESMGR_ID_RESMGR_TABLE);
 810d952:	2100      	movs	r1, #0
 810d954:	201f      	movs	r0, #31
 810d956:	f7f8 fc17 	bl	8106188 <HAL_HSEM_Release>

  if((SendFunct != NULL) || (Callback != NULL))
 810d95a:	687b      	ldr	r3, [r7, #4]
 810d95c:	2b00      	cmp	r3, #0
 810d95e:	d102      	bne.n	810d966 <ResMgr_Init+0x102>
 810d960:	683b      	ldr	r3, [r7, #0]
 810d962:	2b00      	cmp	r3, #0
 810d964:	d00c      	beq.n	810d980 <ResMgr_Init+0x11c>
  {
    ResMgrSendMsgFunct = SendFunct;
 810d966:	4a0c      	ldr	r2, [pc, #48]	@ (810d998 <ResMgr_Init+0x134>)
 810d968:	687b      	ldr	r3, [r7, #4]
 810d96a:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct = Callback;
 810d96c:	4a0b      	ldr	r2, [pc, #44]	@ (810d99c <ResMgr_Init+0x138>)
 810d96e:	683b      	ldr	r3, [r7, #0]
 810d970:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct(RESMGR_ID_ALL, RESMGR_MSG_INIT);
 810d972:	4b0a      	ldr	r3, [pc, #40]	@ (810d99c <ResMgr_Init+0x138>)
 810d974:	681b      	ldr	r3, [r3, #0]
 810d976:	2100      	movs	r1, #0
 810d978:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 810d97c:	4798      	blx	r3
 810d97e:	e001      	b.n	810d984 <ResMgr_Init+0x120>
  }
  else
  {
    ret = RESMGR_ERROR;
 810d980:	2301      	movs	r3, #1
 810d982:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 810d984:	7bfb      	ldrb	r3, [r7, #15]
}
 810d986:	4618      	mov	r0, r3
 810d988:	3710      	adds	r7, #16
 810d98a:	46bd      	mov	sp, r7
 810d98c:	bd80      	pop	{r7, pc}
 810d98e:	bf00      	nop
 810d990:	10000070 	.word	0x10000070
 810d994:	0810f240 	.word	0x0810f240
 810d998:	10004e94 	.word	0x10004e94
 810d99c:	10004e98 	.word	0x10004e98

0810d9a0 <ResMgr_Request>:
  * @param  prio: Request priority
  * @param  phandle: resource driver handle
  * @retval Status
  */
ResMgr_Status_t  ResMgr_Request ( uint32_t id, uint32_t flags, uint32_t prio, void *phandle)
{
 810d9a0:	b580      	push	{r7, lr}
 810d9a2:	b086      	sub	sp, #24
 810d9a4:	af00      	add	r7, sp, #0
 810d9a6:	60f8      	str	r0, [r7, #12]
 810d9a8:	60b9      	str	r1, [r7, #8]
 810d9aa:	607a      	str	r2, [r7, #4]
 810d9ac:	603b      	str	r3, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 810d9ae:	2300      	movs	r3, #0
 810d9b0:	75fb      	strb	r3, [r7, #23]

  if(id < RESMGR_ENTRY_NBR)
 810d9b2:	68fb      	ldr	r3, [r7, #12]
 810d9b4:	2b15      	cmp	r3, #21
 810d9b6:	f200 80f5 	bhi.w	810dba4 <ResMgr_Request+0x204>
  {
    /* lock table modification*/

    RESMGR_TBL_LOCK(id);
 810d9ba:	201f      	movs	r0, #31
 810d9bc:	f7f8 fbca 	bl	8106154 <HAL_HSEM_FastTake>
 810d9c0:	4603      	mov	r3, r0
 810d9c2:	2b00      	cmp	r3, #0
 810d9c4:	d1f9      	bne.n	810d9ba <ResMgr_Request+0x1a>

    /* Check whether the resource is free */
    /* Or the resource is assigned by default to the current Core*/
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 810d9c6:	497b      	ldr	r1, [pc, #492]	@ (810dbb4 <ResMgr_Request+0x214>)
 810d9c8:	68fa      	ldr	r2, [r7, #12]
 810d9ca:	4613      	mov	r3, r2
 810d9cc:	009b      	lsls	r3, r3, #2
 810d9ce:	4413      	add	r3, r2
 810d9d0:	009b      	lsls	r3, r3, #2
 810d9d2:	440b      	add	r3, r1
 810d9d4:	3308      	adds	r3, #8
 810d9d6:	681b      	ldr	r3, [r3, #0]
 810d9d8:	2b00      	cmp	r3, #0
 810d9da:	d019      	beq.n	810da10 <ResMgr_Request+0x70>
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 810d9dc:	4975      	ldr	r1, [pc, #468]	@ (810dbb4 <ResMgr_Request+0x214>)
 810d9de:	68fa      	ldr	r2, [r7, #12]
 810d9e0:	4613      	mov	r3, r2
 810d9e2:	009b      	lsls	r3, r3, #2
 810d9e4:	4413      	add	r3, r2
 810d9e6:	009b      	lsls	r3, r3, #2
 810d9e8:	440b      	add	r3, r1
 810d9ea:	3308      	adds	r3, #8
 810d9ec:	681b      	ldr	r3, [r3, #0]
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 810d9ee:	2b01      	cmp	r3, #1
 810d9f0:	d165      	bne.n	810dabe <ResMgr_Request+0x11e>
        (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) == (flags & RESMGR_FLAGS_OWNER_MSK)))
 810d9f2:	4970      	ldr	r1, [pc, #448]	@ (810dbb4 <ResMgr_Request+0x214>)
 810d9f4:	68fa      	ldr	r2, [r7, #12]
 810d9f6:	4613      	mov	r3, r2
 810d9f8:	009b      	lsls	r3, r3, #2
 810d9fa:	4413      	add	r3, r2
 810d9fc:	009b      	lsls	r3, r3, #2
 810d9fe:	440b      	add	r3, r1
 810da00:	3304      	adds	r3, #4
 810da02:	681a      	ldr	r2, [r3, #0]
 810da04:	68bb      	ldr	r3, [r7, #8]
 810da06:	4053      	eors	r3, r2
 810da08:	f003 0318 	and.w	r3, r3, #24
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 810da0c:	2b00      	cmp	r3, #0
 810da0e:	d156      	bne.n	810dabe <ResMgr_Request+0x11e>
    {

      if(phandle != NULL)
 810da10:	683b      	ldr	r3, [r7, #0]
 810da12:	2b00      	cmp	r3, #0
 810da14:	d02c      	beq.n	810da70 <ResMgr_Request+0xd0>
      {
        if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 810da16:	68bb      	ldr	r3, [r7, #8]
 810da18:	f003 0301 	and.w	r3, r3, #1
 810da1c:	2b00      	cmp	r3, #0
 810da1e:	d01d      	beq.n	810da5c <ResMgr_Request+0xbc>
        {
          if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 810da20:	4964      	ldr	r1, [pc, #400]	@ (810dbb4 <ResMgr_Request+0x214>)
 810da22:	68fa      	ldr	r2, [r7, #12]
 810da24:	4613      	mov	r3, r2
 810da26:	009b      	lsls	r3, r3, #2
 810da28:	4413      	add	r3, r2
 810da2a:	009b      	lsls	r3, r3, #2
 810da2c:	440b      	add	r3, r1
 810da2e:	3310      	adds	r3, #16
 810da30:	681b      	ldr	r3, [r3, #0]
 810da32:	2b00      	cmp	r3, #0
 810da34:	d00c      	beq.n	810da50 <ResMgr_Request+0xb0>
          {
            *((uint32_t *)phandle) = (uint32_t ) (uint32_t *)ResMgr_Tbl[id].Ctx.pHandle;
 810da36:	495f      	ldr	r1, [pc, #380]	@ (810dbb4 <ResMgr_Request+0x214>)
 810da38:	68fa      	ldr	r2, [r7, #12]
 810da3a:	4613      	mov	r3, r2
 810da3c:	009b      	lsls	r3, r3, #2
 810da3e:	4413      	add	r3, r2
 810da40:	009b      	lsls	r3, r3, #2
 810da42:	440b      	add	r3, r1
 810da44:	3310      	adds	r3, #16
 810da46:	681b      	ldr	r3, [r3, #0]
 810da48:	461a      	mov	r2, r3
 810da4a:	683b      	ldr	r3, [r7, #0]
 810da4c:	601a      	str	r2, [r3, #0]
 810da4e:	e00f      	b.n	810da70 <ResMgr_Request+0xd0>
          }
          else
          {
            RESMGR_TBL_UNLOCK(id);
 810da50:	2100      	movs	r1, #0
 810da52:	201f      	movs	r0, #31
 810da54:	f7f8 fb98 	bl	8106188 <HAL_HSEM_Release>
            return  RESMGR_ERROR;
 810da58:	2301      	movs	r3, #1
 810da5a:	e0a6      	b.n	810dbaa <ResMgr_Request+0x20a>
          }
        }
        else
        {
          ResMgr_Tbl[id].Ctx.pHandle = phandle;
 810da5c:	4955      	ldr	r1, [pc, #340]	@ (810dbb4 <ResMgr_Request+0x214>)
 810da5e:	68fa      	ldr	r2, [r7, #12]
 810da60:	4613      	mov	r3, r2
 810da62:	009b      	lsls	r3, r3, #2
 810da64:	4413      	add	r3, r2
 810da66:	009b      	lsls	r3, r3, #2
 810da68:	440b      	add	r3, r1
 810da6a:	3310      	adds	r3, #16
 810da6c:	683a      	ldr	r2, [r7, #0]
 810da6e:	601a      	str	r2, [r3, #0]
        }
      }
      /* Resource free, update the table and send a message */
      ResMgr_Tbl[id].Ctx.Flags = (flags & ~RESMGR_FLAGS_ACCESS_MSK) | \
 810da70:	68bb      	ldr	r3, [r7, #8]
 810da72:	f023 0306 	bic.w	r3, r3, #6
 810da76:	f043 0102 	orr.w	r1, r3, #2
 810da7a:	484e      	ldr	r0, [pc, #312]	@ (810dbb4 <ResMgr_Request+0x214>)
 810da7c:	68fa      	ldr	r2, [r7, #12]
 810da7e:	4613      	mov	r3, r2
 810da80:	009b      	lsls	r3, r3, #2
 810da82:	4413      	add	r3, r2
 810da84:	009b      	lsls	r3, r3, #2
 810da86:	4403      	add	r3, r0
 810da88:	3304      	adds	r3, #4
 810da8a:	6019      	str	r1, [r3, #0]
        RESMGR_FLAGS_ACCESS_NORMAL;

      ResMgr_Tbl[id].Ctx.State = RESMGR_STATE_ASSIGNED;
 810da8c:	4949      	ldr	r1, [pc, #292]	@ (810dbb4 <ResMgr_Request+0x214>)
 810da8e:	68fa      	ldr	r2, [r7, #12]
 810da90:	4613      	mov	r3, r2
 810da92:	009b      	lsls	r3, r3, #2
 810da94:	4413      	add	r3, r2
 810da96:	009b      	lsls	r3, r3, #2
 810da98:	440b      	add	r3, r1
 810da9a:	3308      	adds	r3, #8
 810da9c:	2201      	movs	r2, #1
 810da9e:	601a      	str	r2, [r3, #0]
      RESMGR_TBL_UNLOCK(id);
 810daa0:	2100      	movs	r1, #0
 810daa2:	201f      	movs	r0, #31
 810daa4:	f7f8 fb70 	bl	8106188 <HAL_HSEM_Release>
      ResMgrSendMsgFunct(id, RESMGR_MSG_ASSIGN);
 810daa8:	4b43      	ldr	r3, [pc, #268]	@ (810dbb8 <ResMgr_Request+0x218>)
 810daaa:	681b      	ldr	r3, [r3, #0]
 810daac:	2101      	movs	r1, #1
 810daae:	68f8      	ldr	r0, [r7, #12]
 810dab0:	4798      	blx	r3
      ResMgrCallbackFunct(id, RESMGR_MSG_ASSIGNED);
 810dab2:	4b42      	ldr	r3, [pc, #264]	@ (810dbbc <ResMgr_Request+0x21c>)
 810dab4:	681b      	ldr	r3, [r3, #0]
 810dab6:	2111      	movs	r1, #17
 810dab8:	68f8      	ldr	r0, [r7, #12]
 810daba:	4798      	blx	r3
 810dabc:	e074      	b.n	810dba8 <ResMgr_Request+0x208>
    }
    else  /* Resource already used, update the table and send a message */
    {
      ret = RESMGR_BUSY;
 810dabe:	2302      	movs	r3, #2
 810dac0:	75fb      	strb	r3, [r7, #23]

      /* is the request for normal access, reject*/
      if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_NORMAL)
 810dac2:	68bb      	ldr	r3, [r7, #8]
 810dac4:	f003 0306 	and.w	r3, r3, #6
 810dac8:	2b02      	cmp	r3, #2
 810daca:	d10e      	bne.n	810daea <ResMgr_Request+0x14a>
      {
        RESMGR_TBL_UNLOCK(id);
 810dacc:	2100      	movs	r1, #0
 810dace:	201f      	movs	r0, #31
 810dad0:	f7f8 fb5a 	bl	8106188 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_REJECT);
 810dad4:	4b38      	ldr	r3, [pc, #224]	@ (810dbb8 <ResMgr_Request+0x218>)
 810dad6:	681b      	ldr	r3, [r3, #0]
 810dad8:	2105      	movs	r1, #5
 810dada:	68f8      	ldr	r0, [r7, #12]
 810dadc:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_REJECTED);
 810dade:	4b37      	ldr	r3, [pc, #220]	@ (810dbbc <ResMgr_Request+0x21c>)
 810dae0:	681b      	ldr	r3, [r3, #0]
 810dae2:	2115      	movs	r1, #21
 810dae4:	68f8      	ldr	r0, [r7, #12]
 810dae6:	4798      	blx	r3
 810dae8:	e05e      	b.n	810dba8 <ResMgr_Request+0x208>
      }

      /* it is a pend request? */
      else if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_PEND)
 810daea:	68bb      	ldr	r3, [r7, #8]
 810daec:	f003 0306 	and.w	r3, r3, #6
 810daf0:	2b04      	cmp	r3, #4
 810daf2:	d154      	bne.n	810db9e <ResMgr_Request+0x1fe>
      {
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810daf4:	492f      	ldr	r1, [pc, #188]	@ (810dbb4 <ResMgr_Request+0x214>)
 810daf6:	68fa      	ldr	r2, [r7, #12]
 810daf8:	4613      	mov	r3, r2
 810dafa:	009b      	lsls	r3, r3, #2
 810dafc:	4413      	add	r3, r2
 810dafe:	009b      	lsls	r3, r3, #2
 810db00:	440b      	add	r3, r1
 810db02:	3304      	adds	r3, #4
 810db04:	681b      	ldr	r3, [r3, #0]
 810db06:	f003 0218 	and.w	r2, r3, #24
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 810db0a:	68bb      	ldr	r3, [r7, #8]
 810db0c:	f023 0306 	bic.w	r3, r3, #6
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810db10:	4313      	orrs	r3, r2
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 810db12:	f043 0104 	orr.w	r1, r3, #4
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810db16:	4827      	ldr	r0, [pc, #156]	@ (810dbb4 <ResMgr_Request+0x214>)
 810db18:	68fa      	ldr	r2, [r7, #12]
 810db1a:	4613      	mov	r3, r2
 810db1c:	009b      	lsls	r3, r3, #2
 810db1e:	4413      	add	r3, r2
 810db20:	009b      	lsls	r3, r3, #2
 810db22:	4403      	add	r3, r0
 810db24:	3304      	adds	r3, #4
 810db26:	6019      	str	r1, [r3, #0]

        if(phandle != NULL)
 810db28:	683b      	ldr	r3, [r7, #0]
 810db2a:	2b00      	cmp	r3, #0
 810db2c:	d028      	beq.n	810db80 <ResMgr_Request+0x1e0>
        {
          if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 810db2e:	68bb      	ldr	r3, [r7, #8]
 810db30:	f003 0301 	and.w	r3, r3, #1
 810db34:	2b00      	cmp	r3, #0
 810db36:	d019      	beq.n	810db6c <ResMgr_Request+0x1cc>
          {
            if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 810db38:	491e      	ldr	r1, [pc, #120]	@ (810dbb4 <ResMgr_Request+0x214>)
 810db3a:	68fa      	ldr	r2, [r7, #12]
 810db3c:	4613      	mov	r3, r2
 810db3e:	009b      	lsls	r3, r3, #2
 810db40:	4413      	add	r3, r2
 810db42:	009b      	lsls	r3, r3, #2
 810db44:	440b      	add	r3, r1
 810db46:	3310      	adds	r3, #16
 810db48:	681b      	ldr	r3, [r3, #0]
 810db4a:	2b00      	cmp	r3, #0
 810db4c:	d00c      	beq.n	810db68 <ResMgr_Request+0x1c8>
            {
              *((uint32_t *)phandle) = (uint32_t )(uint32_t *) ResMgr_Tbl[id].Ctx.pHandle;
 810db4e:	4919      	ldr	r1, [pc, #100]	@ (810dbb4 <ResMgr_Request+0x214>)
 810db50:	68fa      	ldr	r2, [r7, #12]
 810db52:	4613      	mov	r3, r2
 810db54:	009b      	lsls	r3, r3, #2
 810db56:	4413      	add	r3, r2
 810db58:	009b      	lsls	r3, r3, #2
 810db5a:	440b      	add	r3, r1
 810db5c:	3310      	adds	r3, #16
 810db5e:	681b      	ldr	r3, [r3, #0]
 810db60:	461a      	mov	r2, r3
 810db62:	683b      	ldr	r3, [r7, #0]
 810db64:	601a      	str	r2, [r3, #0]
 810db66:	e00b      	b.n	810db80 <ResMgr_Request+0x1e0>
            }
            else
            {
              return  RESMGR_ERROR;
 810db68:	2301      	movs	r3, #1
 810db6a:	e01e      	b.n	810dbaa <ResMgr_Request+0x20a>
            }
          }
          else
          {
            ResMgr_Tbl[id].Ctx.pHandle = phandle;
 810db6c:	4911      	ldr	r1, [pc, #68]	@ (810dbb4 <ResMgr_Request+0x214>)
 810db6e:	68fa      	ldr	r2, [r7, #12]
 810db70:	4613      	mov	r3, r2
 810db72:	009b      	lsls	r3, r3, #2
 810db74:	4413      	add	r3, r2
 810db76:	009b      	lsls	r3, r3, #2
 810db78:	440b      	add	r3, r1
 810db7a:	3310      	adds	r3, #16
 810db7c:	683a      	ldr	r2, [r7, #0]
 810db7e:	601a      	str	r2, [r3, #0]
          }
        }
        RESMGR_TBL_UNLOCK(id);
 810db80:	2100      	movs	r1, #0
 810db82:	201f      	movs	r0, #31
 810db84:	f7f8 fb00 	bl	8106188 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_PEND);
 810db88:	4b0b      	ldr	r3, [pc, #44]	@ (810dbb8 <ResMgr_Request+0x218>)
 810db8a:	681b      	ldr	r3, [r3, #0]
 810db8c:	2104      	movs	r1, #4
 810db8e:	68f8      	ldr	r0, [r7, #12]
 810db90:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_PENDED);
 810db92:	4b0a      	ldr	r3, [pc, #40]	@ (810dbbc <ResMgr_Request+0x21c>)
 810db94:	681b      	ldr	r3, [r3, #0]
 810db96:	2114      	movs	r1, #20
 810db98:	68f8      	ldr	r0, [r7, #12]
 810db9a:	4798      	blx	r3
 810db9c:	e004      	b.n	810dba8 <ResMgr_Request+0x208>
      }
      else
      {
        ret = RESMGR_ERROR;
 810db9e:	2301      	movs	r3, #1
 810dba0:	75fb      	strb	r3, [r7, #23]
 810dba2:	e001      	b.n	810dba8 <ResMgr_Request+0x208>
    }

  }
  else
  {
    ret = RESMGR_ERROR;
 810dba4:	2301      	movs	r3, #1
 810dba6:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 810dba8:	7dfb      	ldrb	r3, [r7, #23]
}
 810dbaa:	4618      	mov	r0, r3
 810dbac:	3718      	adds	r7, #24
 810dbae:	46bd      	mov	sp, r7
 810dbb0:	bd80      	pop	{r7, pc}
 810dbb2:	bf00      	nop
 810dbb4:	10000070 	.word	0x10000070
 810dbb8:	10004e94 	.word	0x10004e94
 810dbbc:	10004e98 	.word	0x10004e98

0810dbc0 <_ZdlPvj>:
 810dbc0:	f000 b8d8 	b.w	810dd74 <_ZdlPv>

0810dbc4 <_Znwj>:
 810dbc4:	2801      	cmp	r0, #1
 810dbc6:	bf38      	it	cc
 810dbc8:	2001      	movcc	r0, #1
 810dbca:	b510      	push	{r4, lr}
 810dbcc:	4604      	mov	r4, r0
 810dbce:	4620      	mov	r0, r4
 810dbd0:	f000 f8e2 	bl	810dd98 <malloc>
 810dbd4:	b100      	cbz	r0, 810dbd8 <_Znwj+0x14>
 810dbd6:	bd10      	pop	{r4, pc}
 810dbd8:	f000 f8ce 	bl	810dd78 <_ZSt15get_new_handlerv>
 810dbdc:	b908      	cbnz	r0, 810dbe2 <_Znwj+0x1e>
 810dbde:	f000 f8d3 	bl	810dd88 <abort>
 810dbe2:	4780      	blx	r0
 810dbe4:	e7f3      	b.n	810dbce <_Znwj+0xa>

0810dbe6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 810dbe6:	68c3      	ldr	r3, [r0, #12]
 810dbe8:	689a      	ldr	r2, [r3, #8]
 810dbea:	b510      	push	{r4, lr}
 810dbec:	60c2      	str	r2, [r0, #12]
 810dbee:	b102      	cbz	r2, 810dbf2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 810dbf0:	6050      	str	r0, [r2, #4]
 810dbf2:	6842      	ldr	r2, [r0, #4]
 810dbf4:	605a      	str	r2, [r3, #4]
 810dbf6:	680c      	ldr	r4, [r1, #0]
 810dbf8:	4284      	cmp	r4, r0
 810dbfa:	d103      	bne.n	810dc04 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 810dbfc:	600b      	str	r3, [r1, #0]
 810dbfe:	6098      	str	r0, [r3, #8]
 810dc00:	6043      	str	r3, [r0, #4]
 810dc02:	bd10      	pop	{r4, pc}
 810dc04:	6891      	ldr	r1, [r2, #8]
 810dc06:	4281      	cmp	r1, r0
 810dc08:	bf0c      	ite	eq
 810dc0a:	6093      	streq	r3, [r2, #8]
 810dc0c:	60d3      	strne	r3, [r2, #12]
 810dc0e:	e7f6      	b.n	810dbfe <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0810dc10 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 810dc10:	6883      	ldr	r3, [r0, #8]
 810dc12:	68da      	ldr	r2, [r3, #12]
 810dc14:	b510      	push	{r4, lr}
 810dc16:	6082      	str	r2, [r0, #8]
 810dc18:	b102      	cbz	r2, 810dc1c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 810dc1a:	6050      	str	r0, [r2, #4]
 810dc1c:	6842      	ldr	r2, [r0, #4]
 810dc1e:	605a      	str	r2, [r3, #4]
 810dc20:	680c      	ldr	r4, [r1, #0]
 810dc22:	4284      	cmp	r4, r0
 810dc24:	d103      	bne.n	810dc2e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 810dc26:	600b      	str	r3, [r1, #0]
 810dc28:	60d8      	str	r0, [r3, #12]
 810dc2a:	6043      	str	r3, [r0, #4]
 810dc2c:	bd10      	pop	{r4, pc}
 810dc2e:	68d1      	ldr	r1, [r2, #12]
 810dc30:	4281      	cmp	r1, r0
 810dc32:	bf0c      	ite	eq
 810dc34:	60d3      	streq	r3, [r2, #12]
 810dc36:	6093      	strne	r3, [r2, #8]
 810dc38:	e7f6      	b.n	810dc28 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0810dc3a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 810dc3a:	68c2      	ldr	r2, [r0, #12]
 810dc3c:	4603      	mov	r3, r0
 810dc3e:	b122      	cbz	r2, 810dc4a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 810dc40:	4610      	mov	r0, r2
 810dc42:	6892      	ldr	r2, [r2, #8]
 810dc44:	2a00      	cmp	r2, #0
 810dc46:	d1fb      	bne.n	810dc40 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x6>
 810dc48:	4770      	bx	lr
 810dc4a:	6840      	ldr	r0, [r0, #4]
 810dc4c:	68c2      	ldr	r2, [r0, #12]
 810dc4e:	429a      	cmp	r2, r3
 810dc50:	d004      	beq.n	810dc5c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x22>
 810dc52:	68da      	ldr	r2, [r3, #12]
 810dc54:	4290      	cmp	r0, r2
 810dc56:	bf08      	it	eq
 810dc58:	4618      	moveq	r0, r3
 810dc5a:	4770      	bx	lr
 810dc5c:	4603      	mov	r3, r0
 810dc5e:	6840      	ldr	r0, [r0, #4]
 810dc60:	e7f4      	b.n	810dc4c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x12>

0810dc62 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 810dc62:	7802      	ldrb	r2, [r0, #0]
 810dc64:	4603      	mov	r3, r0
 810dc66:	b92a      	cbnz	r2, 810dc74 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 810dc68:	6842      	ldr	r2, [r0, #4]
 810dc6a:	6852      	ldr	r2, [r2, #4]
 810dc6c:	4282      	cmp	r2, r0
 810dc6e:	d101      	bne.n	810dc74 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 810dc70:	68d0      	ldr	r0, [r2, #12]
 810dc72:	4770      	bx	lr
 810dc74:	689a      	ldr	r2, [r3, #8]
 810dc76:	b122      	cbz	r2, 810dc82 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 810dc78:	4610      	mov	r0, r2
 810dc7a:	68d2      	ldr	r2, [r2, #12]
 810dc7c:	2a00      	cmp	r2, #0
 810dc7e:	d1fb      	bne.n	810dc78 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 810dc80:	4770      	bx	lr
 810dc82:	6858      	ldr	r0, [r3, #4]
 810dc84:	6882      	ldr	r2, [r0, #8]
 810dc86:	429a      	cmp	r2, r3
 810dc88:	d000      	beq.n	810dc8c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 810dc8a:	4770      	bx	lr
 810dc8c:	4603      	mov	r3, r0
 810dc8e:	6840      	ldr	r0, [r0, #4]
 810dc90:	e7f8      	b.n	810dc84 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0810dc92 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 810dc92:	f7ff bfd2 	b.w	810dc3a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

0810dc96 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 810dc96:	f7ff bfe4 	b.w	810dc62 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0810dc9a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 810dc9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810dc9e:	461d      	mov	r5, r3
 810dca0:	1d1f      	adds	r7, r3, #4
 810dca2:	2300      	movs	r3, #0
 810dca4:	e9c1 3302 	strd	r3, r3, [r1, #8]
 810dca8:	460c      	mov	r4, r1
 810dcaa:	604a      	str	r2, [r1, #4]
 810dcac:	700b      	strb	r3, [r1, #0]
 810dcae:	b1a0      	cbz	r0, 810dcda <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 810dcb0:	4295      	cmp	r5, r2
 810dcb2:	6091      	str	r1, [r2, #8]
 810dcb4:	d102      	bne.n	810dcbc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 810dcb6:	6069      	str	r1, [r5, #4]
 810dcb8:	60ec      	str	r4, [r5, #12]
 810dcba:	e003      	b.n	810dcc4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 810dcbc:	68ab      	ldr	r3, [r5, #8]
 810dcbe:	4293      	cmp	r3, r2
 810dcc0:	bf08      	it	eq
 810dcc2:	60a9      	streq	r1, [r5, #8]
 810dcc4:	f04f 0900 	mov.w	r9, #0
 810dcc8:	f04f 0801 	mov.w	r8, #1
 810dccc:	686b      	ldr	r3, [r5, #4]
 810dcce:	42a3      	cmp	r3, r4
 810dcd0:	d132      	bne.n	810dd38 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 810dcd2:	2201      	movs	r2, #1
 810dcd4:	701a      	strb	r2, [r3, #0]
 810dcd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810dcda:	60d1      	str	r1, [r2, #12]
 810dcdc:	68eb      	ldr	r3, [r5, #12]
 810dcde:	4293      	cmp	r3, r2
 810dce0:	d1f0      	bne.n	810dcc4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 810dce2:	e7e9      	b.n	810dcb8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 810dce4:	68c3      	ldr	r3, [r0, #12]
 810dce6:	42a3      	cmp	r3, r4
 810dce8:	d103      	bne.n	810dcf2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 810dcea:	4639      	mov	r1, r7
 810dcec:	f7ff ff7b 	bl	810dbe6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 810dcf0:	4604      	mov	r4, r0
 810dcf2:	6863      	ldr	r3, [r4, #4]
 810dcf4:	4639      	mov	r1, r7
 810dcf6:	f883 8000 	strb.w	r8, [r3]
 810dcfa:	4630      	mov	r0, r6
 810dcfc:	f886 9000 	strb.w	r9, [r6]
 810dd00:	f7ff ff86 	bl	810dc10 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 810dd04:	e7e2      	b.n	810dccc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 810dd06:	b133      	cbz	r3, 810dd16 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 810dd08:	781a      	ldrb	r2, [r3, #0]
 810dd0a:	b922      	cbnz	r2, 810dd16 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 810dd0c:	f880 8000 	strb.w	r8, [r0]
 810dd10:	f883 8000 	strb.w	r8, [r3]
 810dd14:	e021      	b.n	810dd5a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 810dd16:	6883      	ldr	r3, [r0, #8]
 810dd18:	42a3      	cmp	r3, r4
 810dd1a:	d103      	bne.n	810dd24 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 810dd1c:	4639      	mov	r1, r7
 810dd1e:	f7ff ff77 	bl	810dc10 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 810dd22:	4604      	mov	r4, r0
 810dd24:	6863      	ldr	r3, [r4, #4]
 810dd26:	4639      	mov	r1, r7
 810dd28:	f883 8000 	strb.w	r8, [r3]
 810dd2c:	4630      	mov	r0, r6
 810dd2e:	f886 9000 	strb.w	r9, [r6]
 810dd32:	f7ff ff58 	bl	810dbe6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 810dd36:	e7c9      	b.n	810dccc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 810dd38:	6860      	ldr	r0, [r4, #4]
 810dd3a:	7802      	ldrb	r2, [r0, #0]
 810dd3c:	2a00      	cmp	r2, #0
 810dd3e:	d1c8      	bne.n	810dcd2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 810dd40:	6846      	ldr	r6, [r0, #4]
 810dd42:	68b3      	ldr	r3, [r6, #8]
 810dd44:	4283      	cmp	r3, r0
 810dd46:	d1de      	bne.n	810dd06 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 810dd48:	68f2      	ldr	r2, [r6, #12]
 810dd4a:	2a00      	cmp	r2, #0
 810dd4c:	d0ca      	beq.n	810dce4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 810dd4e:	7811      	ldrb	r1, [r2, #0]
 810dd50:	2900      	cmp	r1, #0
 810dd52:	d1c7      	bne.n	810dce4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 810dd54:	2101      	movs	r1, #1
 810dd56:	7019      	strb	r1, [r3, #0]
 810dd58:	7011      	strb	r1, [r2, #0]
 810dd5a:	f886 9000 	strb.w	r9, [r6]
 810dd5e:	4634      	mov	r4, r6
 810dd60:	e7b4      	b.n	810dccc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

0810dd62 <_ZSt17__throw_bad_allocv>:
 810dd62:	b508      	push	{r3, lr}
 810dd64:	f000 f810 	bl	810dd88 <abort>

0810dd68 <_ZSt28__throw_bad_array_new_lengthv>:
 810dd68:	b508      	push	{r3, lr}
 810dd6a:	f000 f80d 	bl	810dd88 <abort>

0810dd6e <_ZSt20__throw_length_errorPKc>:
 810dd6e:	b508      	push	{r3, lr}
 810dd70:	f000 f80a 	bl	810dd88 <abort>

0810dd74 <_ZdlPv>:
 810dd74:	f000 b818 	b.w	810dda8 <free>

0810dd78 <_ZSt15get_new_handlerv>:
 810dd78:	4b02      	ldr	r3, [pc, #8]	@ (810dd84 <_ZSt15get_new_handlerv+0xc>)
 810dd7a:	6818      	ldr	r0, [r3, #0]
 810dd7c:	f3bf 8f5b 	dmb	ish
 810dd80:	4770      	bx	lr
 810dd82:	bf00      	nop
 810dd84:	10004e9c 	.word	0x10004e9c

0810dd88 <abort>:
 810dd88:	b508      	push	{r3, lr}
 810dd8a:	2006      	movs	r0, #6
 810dd8c:	f000 fb1e 	bl	810e3cc <raise>
 810dd90:	2001      	movs	r0, #1
 810dd92:	f7f7 f829 	bl	8104de8 <_exit>
	...

0810dd98 <malloc>:
 810dd98:	4b02      	ldr	r3, [pc, #8]	@ (810dda4 <malloc+0xc>)
 810dd9a:	4601      	mov	r1, r0
 810dd9c:	6818      	ldr	r0, [r3, #0]
 810dd9e:	f000 b82d 	b.w	810ddfc <_malloc_r>
 810dda2:	bf00      	nop
 810dda4:	10000020 	.word	0x10000020

0810dda8 <free>:
 810dda8:	4b02      	ldr	r3, [pc, #8]	@ (810ddb4 <free+0xc>)
 810ddaa:	4601      	mov	r1, r0
 810ddac:	6818      	ldr	r0, [r3, #0]
 810ddae:	f000 bc19 	b.w	810e5e4 <_free_r>
 810ddb2:	bf00      	nop
 810ddb4:	10000020 	.word	0x10000020

0810ddb8 <sbrk_aligned>:
 810ddb8:	b570      	push	{r4, r5, r6, lr}
 810ddba:	4e0f      	ldr	r6, [pc, #60]	@ (810ddf8 <sbrk_aligned+0x40>)
 810ddbc:	460c      	mov	r4, r1
 810ddbe:	6831      	ldr	r1, [r6, #0]
 810ddc0:	4605      	mov	r5, r0
 810ddc2:	b911      	cbnz	r1, 810ddca <sbrk_aligned+0x12>
 810ddc4:	f000 fbb0 	bl	810e528 <_sbrk_r>
 810ddc8:	6030      	str	r0, [r6, #0]
 810ddca:	4621      	mov	r1, r4
 810ddcc:	4628      	mov	r0, r5
 810ddce:	f000 fbab 	bl	810e528 <_sbrk_r>
 810ddd2:	1c43      	adds	r3, r0, #1
 810ddd4:	d103      	bne.n	810ddde <sbrk_aligned+0x26>
 810ddd6:	f04f 34ff 	mov.w	r4, #4294967295
 810ddda:	4620      	mov	r0, r4
 810dddc:	bd70      	pop	{r4, r5, r6, pc}
 810ddde:	1cc4      	adds	r4, r0, #3
 810dde0:	f024 0403 	bic.w	r4, r4, #3
 810dde4:	42a0      	cmp	r0, r4
 810dde6:	d0f8      	beq.n	810ddda <sbrk_aligned+0x22>
 810dde8:	1a21      	subs	r1, r4, r0
 810ddea:	4628      	mov	r0, r5
 810ddec:	f000 fb9c 	bl	810e528 <_sbrk_r>
 810ddf0:	3001      	adds	r0, #1
 810ddf2:	d1f2      	bne.n	810ddda <sbrk_aligned+0x22>
 810ddf4:	e7ef      	b.n	810ddd6 <sbrk_aligned+0x1e>
 810ddf6:	bf00      	nop
 810ddf8:	10004ea0 	.word	0x10004ea0

0810ddfc <_malloc_r>:
 810ddfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810de00:	1ccd      	adds	r5, r1, #3
 810de02:	f025 0503 	bic.w	r5, r5, #3
 810de06:	3508      	adds	r5, #8
 810de08:	2d0c      	cmp	r5, #12
 810de0a:	bf38      	it	cc
 810de0c:	250c      	movcc	r5, #12
 810de0e:	2d00      	cmp	r5, #0
 810de10:	4606      	mov	r6, r0
 810de12:	db01      	blt.n	810de18 <_malloc_r+0x1c>
 810de14:	42a9      	cmp	r1, r5
 810de16:	d904      	bls.n	810de22 <_malloc_r+0x26>
 810de18:	230c      	movs	r3, #12
 810de1a:	6033      	str	r3, [r6, #0]
 810de1c:	2000      	movs	r0, #0
 810de1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810de22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810def8 <_malloc_r+0xfc>
 810de26:	f000 f869 	bl	810defc <__malloc_lock>
 810de2a:	f8d8 3000 	ldr.w	r3, [r8]
 810de2e:	461c      	mov	r4, r3
 810de30:	bb44      	cbnz	r4, 810de84 <_malloc_r+0x88>
 810de32:	4629      	mov	r1, r5
 810de34:	4630      	mov	r0, r6
 810de36:	f7ff ffbf 	bl	810ddb8 <sbrk_aligned>
 810de3a:	1c43      	adds	r3, r0, #1
 810de3c:	4604      	mov	r4, r0
 810de3e:	d158      	bne.n	810def2 <_malloc_r+0xf6>
 810de40:	f8d8 4000 	ldr.w	r4, [r8]
 810de44:	4627      	mov	r7, r4
 810de46:	2f00      	cmp	r7, #0
 810de48:	d143      	bne.n	810ded2 <_malloc_r+0xd6>
 810de4a:	2c00      	cmp	r4, #0
 810de4c:	d04b      	beq.n	810dee6 <_malloc_r+0xea>
 810de4e:	6823      	ldr	r3, [r4, #0]
 810de50:	4639      	mov	r1, r7
 810de52:	4630      	mov	r0, r6
 810de54:	eb04 0903 	add.w	r9, r4, r3
 810de58:	f000 fb66 	bl	810e528 <_sbrk_r>
 810de5c:	4581      	cmp	r9, r0
 810de5e:	d142      	bne.n	810dee6 <_malloc_r+0xea>
 810de60:	6821      	ldr	r1, [r4, #0]
 810de62:	1a6d      	subs	r5, r5, r1
 810de64:	4629      	mov	r1, r5
 810de66:	4630      	mov	r0, r6
 810de68:	f7ff ffa6 	bl	810ddb8 <sbrk_aligned>
 810de6c:	3001      	adds	r0, #1
 810de6e:	d03a      	beq.n	810dee6 <_malloc_r+0xea>
 810de70:	6823      	ldr	r3, [r4, #0]
 810de72:	442b      	add	r3, r5
 810de74:	6023      	str	r3, [r4, #0]
 810de76:	f8d8 3000 	ldr.w	r3, [r8]
 810de7a:	685a      	ldr	r2, [r3, #4]
 810de7c:	bb62      	cbnz	r2, 810ded8 <_malloc_r+0xdc>
 810de7e:	f8c8 7000 	str.w	r7, [r8]
 810de82:	e00f      	b.n	810dea4 <_malloc_r+0xa8>
 810de84:	6822      	ldr	r2, [r4, #0]
 810de86:	1b52      	subs	r2, r2, r5
 810de88:	d420      	bmi.n	810decc <_malloc_r+0xd0>
 810de8a:	2a0b      	cmp	r2, #11
 810de8c:	d917      	bls.n	810debe <_malloc_r+0xc2>
 810de8e:	1961      	adds	r1, r4, r5
 810de90:	42a3      	cmp	r3, r4
 810de92:	6025      	str	r5, [r4, #0]
 810de94:	bf18      	it	ne
 810de96:	6059      	strne	r1, [r3, #4]
 810de98:	6863      	ldr	r3, [r4, #4]
 810de9a:	bf08      	it	eq
 810de9c:	f8c8 1000 	streq.w	r1, [r8]
 810dea0:	5162      	str	r2, [r4, r5]
 810dea2:	604b      	str	r3, [r1, #4]
 810dea4:	4630      	mov	r0, r6
 810dea6:	f000 f82f 	bl	810df08 <__malloc_unlock>
 810deaa:	f104 000b 	add.w	r0, r4, #11
 810deae:	1d23      	adds	r3, r4, #4
 810deb0:	f020 0007 	bic.w	r0, r0, #7
 810deb4:	1ac2      	subs	r2, r0, r3
 810deb6:	bf1c      	itt	ne
 810deb8:	1a1b      	subne	r3, r3, r0
 810deba:	50a3      	strne	r3, [r4, r2]
 810debc:	e7af      	b.n	810de1e <_malloc_r+0x22>
 810debe:	6862      	ldr	r2, [r4, #4]
 810dec0:	42a3      	cmp	r3, r4
 810dec2:	bf0c      	ite	eq
 810dec4:	f8c8 2000 	streq.w	r2, [r8]
 810dec8:	605a      	strne	r2, [r3, #4]
 810deca:	e7eb      	b.n	810dea4 <_malloc_r+0xa8>
 810decc:	4623      	mov	r3, r4
 810dece:	6864      	ldr	r4, [r4, #4]
 810ded0:	e7ae      	b.n	810de30 <_malloc_r+0x34>
 810ded2:	463c      	mov	r4, r7
 810ded4:	687f      	ldr	r7, [r7, #4]
 810ded6:	e7b6      	b.n	810de46 <_malloc_r+0x4a>
 810ded8:	461a      	mov	r2, r3
 810deda:	685b      	ldr	r3, [r3, #4]
 810dedc:	42a3      	cmp	r3, r4
 810dede:	d1fb      	bne.n	810ded8 <_malloc_r+0xdc>
 810dee0:	2300      	movs	r3, #0
 810dee2:	6053      	str	r3, [r2, #4]
 810dee4:	e7de      	b.n	810dea4 <_malloc_r+0xa8>
 810dee6:	230c      	movs	r3, #12
 810dee8:	6033      	str	r3, [r6, #0]
 810deea:	4630      	mov	r0, r6
 810deec:	f000 f80c 	bl	810df08 <__malloc_unlock>
 810def0:	e794      	b.n	810de1c <_malloc_r+0x20>
 810def2:	6005      	str	r5, [r0, #0]
 810def4:	e7d6      	b.n	810dea4 <_malloc_r+0xa8>
 810def6:	bf00      	nop
 810def8:	10004ea4 	.word	0x10004ea4

0810defc <__malloc_lock>:
 810defc:	4801      	ldr	r0, [pc, #4]	@ (810df04 <__malloc_lock+0x8>)
 810defe:	f000 bb60 	b.w	810e5c2 <__retarget_lock_acquire_recursive>
 810df02:	bf00      	nop
 810df04:	10004fe8 	.word	0x10004fe8

0810df08 <__malloc_unlock>:
 810df08:	4801      	ldr	r0, [pc, #4]	@ (810df10 <__malloc_unlock+0x8>)
 810df0a:	f000 bb5b 	b.w	810e5c4 <__retarget_lock_release_recursive>
 810df0e:	bf00      	nop
 810df10:	10004fe8 	.word	0x10004fe8

0810df14 <std>:
 810df14:	2300      	movs	r3, #0
 810df16:	b510      	push	{r4, lr}
 810df18:	4604      	mov	r4, r0
 810df1a:	e9c0 3300 	strd	r3, r3, [r0]
 810df1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810df22:	6083      	str	r3, [r0, #8]
 810df24:	8181      	strh	r1, [r0, #12]
 810df26:	6643      	str	r3, [r0, #100]	@ 0x64
 810df28:	81c2      	strh	r2, [r0, #14]
 810df2a:	6183      	str	r3, [r0, #24]
 810df2c:	4619      	mov	r1, r3
 810df2e:	2208      	movs	r2, #8
 810df30:	305c      	adds	r0, #92	@ 0x5c
 810df32:	f000 fa1b 	bl	810e36c <memset>
 810df36:	4b0d      	ldr	r3, [pc, #52]	@ (810df6c <std+0x58>)
 810df38:	6263      	str	r3, [r4, #36]	@ 0x24
 810df3a:	4b0d      	ldr	r3, [pc, #52]	@ (810df70 <std+0x5c>)
 810df3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 810df3e:	4b0d      	ldr	r3, [pc, #52]	@ (810df74 <std+0x60>)
 810df40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810df42:	4b0d      	ldr	r3, [pc, #52]	@ (810df78 <std+0x64>)
 810df44:	6323      	str	r3, [r4, #48]	@ 0x30
 810df46:	4b0d      	ldr	r3, [pc, #52]	@ (810df7c <std+0x68>)
 810df48:	6224      	str	r4, [r4, #32]
 810df4a:	429c      	cmp	r4, r3
 810df4c:	d006      	beq.n	810df5c <std+0x48>
 810df4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810df52:	4294      	cmp	r4, r2
 810df54:	d002      	beq.n	810df5c <std+0x48>
 810df56:	33d0      	adds	r3, #208	@ 0xd0
 810df58:	429c      	cmp	r4, r3
 810df5a:	d105      	bne.n	810df68 <std+0x54>
 810df5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810df60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810df64:	f000 bb2c 	b.w	810e5c0 <__retarget_lock_init_recursive>
 810df68:	bd10      	pop	{r4, pc}
 810df6a:	bf00      	nop
 810df6c:	0810e189 	.word	0x0810e189
 810df70:	0810e1ab 	.word	0x0810e1ab
 810df74:	0810e1e3 	.word	0x0810e1e3
 810df78:	0810e207 	.word	0x0810e207
 810df7c:	10004ea8 	.word	0x10004ea8

0810df80 <stdio_exit_handler>:
 810df80:	4a02      	ldr	r2, [pc, #8]	@ (810df8c <stdio_exit_handler+0xc>)
 810df82:	4903      	ldr	r1, [pc, #12]	@ (810df90 <stdio_exit_handler+0x10>)
 810df84:	4803      	ldr	r0, [pc, #12]	@ (810df94 <stdio_exit_handler+0x14>)
 810df86:	f000 b869 	b.w	810e05c <_fwalk_sglue>
 810df8a:	bf00      	nop
 810df8c:	10000014 	.word	0x10000014
 810df90:	0810ed1d 	.word	0x0810ed1d
 810df94:	10000024 	.word	0x10000024

0810df98 <cleanup_stdio>:
 810df98:	6841      	ldr	r1, [r0, #4]
 810df9a:	4b0c      	ldr	r3, [pc, #48]	@ (810dfcc <cleanup_stdio+0x34>)
 810df9c:	4299      	cmp	r1, r3
 810df9e:	b510      	push	{r4, lr}
 810dfa0:	4604      	mov	r4, r0
 810dfa2:	d001      	beq.n	810dfa8 <cleanup_stdio+0x10>
 810dfa4:	f000 feba 	bl	810ed1c <_fflush_r>
 810dfa8:	68a1      	ldr	r1, [r4, #8]
 810dfaa:	4b09      	ldr	r3, [pc, #36]	@ (810dfd0 <cleanup_stdio+0x38>)
 810dfac:	4299      	cmp	r1, r3
 810dfae:	d002      	beq.n	810dfb6 <cleanup_stdio+0x1e>
 810dfb0:	4620      	mov	r0, r4
 810dfb2:	f000 feb3 	bl	810ed1c <_fflush_r>
 810dfb6:	68e1      	ldr	r1, [r4, #12]
 810dfb8:	4b06      	ldr	r3, [pc, #24]	@ (810dfd4 <cleanup_stdio+0x3c>)
 810dfba:	4299      	cmp	r1, r3
 810dfbc:	d004      	beq.n	810dfc8 <cleanup_stdio+0x30>
 810dfbe:	4620      	mov	r0, r4
 810dfc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dfc4:	f000 beaa 	b.w	810ed1c <_fflush_r>
 810dfc8:	bd10      	pop	{r4, pc}
 810dfca:	bf00      	nop
 810dfcc:	10004ea8 	.word	0x10004ea8
 810dfd0:	10004f10 	.word	0x10004f10
 810dfd4:	10004f78 	.word	0x10004f78

0810dfd8 <global_stdio_init.part.0>:
 810dfd8:	b510      	push	{r4, lr}
 810dfda:	4b0b      	ldr	r3, [pc, #44]	@ (810e008 <global_stdio_init.part.0+0x30>)
 810dfdc:	4c0b      	ldr	r4, [pc, #44]	@ (810e00c <global_stdio_init.part.0+0x34>)
 810dfde:	4a0c      	ldr	r2, [pc, #48]	@ (810e010 <global_stdio_init.part.0+0x38>)
 810dfe0:	601a      	str	r2, [r3, #0]
 810dfe2:	4620      	mov	r0, r4
 810dfe4:	2200      	movs	r2, #0
 810dfe6:	2104      	movs	r1, #4
 810dfe8:	f7ff ff94 	bl	810df14 <std>
 810dfec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810dff0:	2201      	movs	r2, #1
 810dff2:	2109      	movs	r1, #9
 810dff4:	f7ff ff8e 	bl	810df14 <std>
 810dff8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810dffc:	2202      	movs	r2, #2
 810dffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810e002:	2112      	movs	r1, #18
 810e004:	f7ff bf86 	b.w	810df14 <std>
 810e008:	10004fe0 	.word	0x10004fe0
 810e00c:	10004ea8 	.word	0x10004ea8
 810e010:	0810df81 	.word	0x0810df81

0810e014 <__sfp_lock_acquire>:
 810e014:	4801      	ldr	r0, [pc, #4]	@ (810e01c <__sfp_lock_acquire+0x8>)
 810e016:	f000 bad4 	b.w	810e5c2 <__retarget_lock_acquire_recursive>
 810e01a:	bf00      	nop
 810e01c:	10004fe9 	.word	0x10004fe9

0810e020 <__sfp_lock_release>:
 810e020:	4801      	ldr	r0, [pc, #4]	@ (810e028 <__sfp_lock_release+0x8>)
 810e022:	f000 bacf 	b.w	810e5c4 <__retarget_lock_release_recursive>
 810e026:	bf00      	nop
 810e028:	10004fe9 	.word	0x10004fe9

0810e02c <__sinit>:
 810e02c:	b510      	push	{r4, lr}
 810e02e:	4604      	mov	r4, r0
 810e030:	f7ff fff0 	bl	810e014 <__sfp_lock_acquire>
 810e034:	6a23      	ldr	r3, [r4, #32]
 810e036:	b11b      	cbz	r3, 810e040 <__sinit+0x14>
 810e038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810e03c:	f7ff bff0 	b.w	810e020 <__sfp_lock_release>
 810e040:	4b04      	ldr	r3, [pc, #16]	@ (810e054 <__sinit+0x28>)
 810e042:	6223      	str	r3, [r4, #32]
 810e044:	4b04      	ldr	r3, [pc, #16]	@ (810e058 <__sinit+0x2c>)
 810e046:	681b      	ldr	r3, [r3, #0]
 810e048:	2b00      	cmp	r3, #0
 810e04a:	d1f5      	bne.n	810e038 <__sinit+0xc>
 810e04c:	f7ff ffc4 	bl	810dfd8 <global_stdio_init.part.0>
 810e050:	e7f2      	b.n	810e038 <__sinit+0xc>
 810e052:	bf00      	nop
 810e054:	0810df99 	.word	0x0810df99
 810e058:	10004fe0 	.word	0x10004fe0

0810e05c <_fwalk_sglue>:
 810e05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e060:	4607      	mov	r7, r0
 810e062:	4688      	mov	r8, r1
 810e064:	4614      	mov	r4, r2
 810e066:	2600      	movs	r6, #0
 810e068:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810e06c:	f1b9 0901 	subs.w	r9, r9, #1
 810e070:	d505      	bpl.n	810e07e <_fwalk_sglue+0x22>
 810e072:	6824      	ldr	r4, [r4, #0]
 810e074:	2c00      	cmp	r4, #0
 810e076:	d1f7      	bne.n	810e068 <_fwalk_sglue+0xc>
 810e078:	4630      	mov	r0, r6
 810e07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e07e:	89ab      	ldrh	r3, [r5, #12]
 810e080:	2b01      	cmp	r3, #1
 810e082:	d907      	bls.n	810e094 <_fwalk_sglue+0x38>
 810e084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810e088:	3301      	adds	r3, #1
 810e08a:	d003      	beq.n	810e094 <_fwalk_sglue+0x38>
 810e08c:	4629      	mov	r1, r5
 810e08e:	4638      	mov	r0, r7
 810e090:	47c0      	blx	r8
 810e092:	4306      	orrs	r6, r0
 810e094:	3568      	adds	r5, #104	@ 0x68
 810e096:	e7e9      	b.n	810e06c <_fwalk_sglue+0x10>

0810e098 <iprintf>:
 810e098:	b40f      	push	{r0, r1, r2, r3}
 810e09a:	b507      	push	{r0, r1, r2, lr}
 810e09c:	4906      	ldr	r1, [pc, #24]	@ (810e0b8 <iprintf+0x20>)
 810e09e:	ab04      	add	r3, sp, #16
 810e0a0:	6808      	ldr	r0, [r1, #0]
 810e0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 810e0a6:	6881      	ldr	r1, [r0, #8]
 810e0a8:	9301      	str	r3, [sp, #4]
 810e0aa:	f000 fb0f 	bl	810e6cc <_vfiprintf_r>
 810e0ae:	b003      	add	sp, #12
 810e0b0:	f85d eb04 	ldr.w	lr, [sp], #4
 810e0b4:	b004      	add	sp, #16
 810e0b6:	4770      	bx	lr
 810e0b8:	10000020 	.word	0x10000020

0810e0bc <putchar>:
 810e0bc:	4b02      	ldr	r3, [pc, #8]	@ (810e0c8 <putchar+0xc>)
 810e0be:	4601      	mov	r1, r0
 810e0c0:	6818      	ldr	r0, [r3, #0]
 810e0c2:	6882      	ldr	r2, [r0, #8]
 810e0c4:	f000 beb4 	b.w	810ee30 <_putc_r>
 810e0c8:	10000020 	.word	0x10000020

0810e0cc <_puts_r>:
 810e0cc:	6a03      	ldr	r3, [r0, #32]
 810e0ce:	b570      	push	{r4, r5, r6, lr}
 810e0d0:	6884      	ldr	r4, [r0, #8]
 810e0d2:	4605      	mov	r5, r0
 810e0d4:	460e      	mov	r6, r1
 810e0d6:	b90b      	cbnz	r3, 810e0dc <_puts_r+0x10>
 810e0d8:	f7ff ffa8 	bl	810e02c <__sinit>
 810e0dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810e0de:	07db      	lsls	r3, r3, #31
 810e0e0:	d405      	bmi.n	810e0ee <_puts_r+0x22>
 810e0e2:	89a3      	ldrh	r3, [r4, #12]
 810e0e4:	0598      	lsls	r0, r3, #22
 810e0e6:	d402      	bmi.n	810e0ee <_puts_r+0x22>
 810e0e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810e0ea:	f000 fa6a 	bl	810e5c2 <__retarget_lock_acquire_recursive>
 810e0ee:	89a3      	ldrh	r3, [r4, #12]
 810e0f0:	0719      	lsls	r1, r3, #28
 810e0f2:	d502      	bpl.n	810e0fa <_puts_r+0x2e>
 810e0f4:	6923      	ldr	r3, [r4, #16]
 810e0f6:	2b00      	cmp	r3, #0
 810e0f8:	d135      	bne.n	810e166 <_puts_r+0x9a>
 810e0fa:	4621      	mov	r1, r4
 810e0fc:	4628      	mov	r0, r5
 810e0fe:	f000 f8c5 	bl	810e28c <__swsetup_r>
 810e102:	b380      	cbz	r0, 810e166 <_puts_r+0x9a>
 810e104:	f04f 35ff 	mov.w	r5, #4294967295
 810e108:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810e10a:	07da      	lsls	r2, r3, #31
 810e10c:	d405      	bmi.n	810e11a <_puts_r+0x4e>
 810e10e:	89a3      	ldrh	r3, [r4, #12]
 810e110:	059b      	lsls	r3, r3, #22
 810e112:	d402      	bmi.n	810e11a <_puts_r+0x4e>
 810e114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810e116:	f000 fa55 	bl	810e5c4 <__retarget_lock_release_recursive>
 810e11a:	4628      	mov	r0, r5
 810e11c:	bd70      	pop	{r4, r5, r6, pc}
 810e11e:	2b00      	cmp	r3, #0
 810e120:	da04      	bge.n	810e12c <_puts_r+0x60>
 810e122:	69a2      	ldr	r2, [r4, #24]
 810e124:	429a      	cmp	r2, r3
 810e126:	dc17      	bgt.n	810e158 <_puts_r+0x8c>
 810e128:	290a      	cmp	r1, #10
 810e12a:	d015      	beq.n	810e158 <_puts_r+0x8c>
 810e12c:	6823      	ldr	r3, [r4, #0]
 810e12e:	1c5a      	adds	r2, r3, #1
 810e130:	6022      	str	r2, [r4, #0]
 810e132:	7019      	strb	r1, [r3, #0]
 810e134:	68a3      	ldr	r3, [r4, #8]
 810e136:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810e13a:	3b01      	subs	r3, #1
 810e13c:	60a3      	str	r3, [r4, #8]
 810e13e:	2900      	cmp	r1, #0
 810e140:	d1ed      	bne.n	810e11e <_puts_r+0x52>
 810e142:	2b00      	cmp	r3, #0
 810e144:	da11      	bge.n	810e16a <_puts_r+0x9e>
 810e146:	4622      	mov	r2, r4
 810e148:	210a      	movs	r1, #10
 810e14a:	4628      	mov	r0, r5
 810e14c:	f000 f85f 	bl	810e20e <__swbuf_r>
 810e150:	3001      	adds	r0, #1
 810e152:	d0d7      	beq.n	810e104 <_puts_r+0x38>
 810e154:	250a      	movs	r5, #10
 810e156:	e7d7      	b.n	810e108 <_puts_r+0x3c>
 810e158:	4622      	mov	r2, r4
 810e15a:	4628      	mov	r0, r5
 810e15c:	f000 f857 	bl	810e20e <__swbuf_r>
 810e160:	3001      	adds	r0, #1
 810e162:	d1e7      	bne.n	810e134 <_puts_r+0x68>
 810e164:	e7ce      	b.n	810e104 <_puts_r+0x38>
 810e166:	3e01      	subs	r6, #1
 810e168:	e7e4      	b.n	810e134 <_puts_r+0x68>
 810e16a:	6823      	ldr	r3, [r4, #0]
 810e16c:	1c5a      	adds	r2, r3, #1
 810e16e:	6022      	str	r2, [r4, #0]
 810e170:	220a      	movs	r2, #10
 810e172:	701a      	strb	r2, [r3, #0]
 810e174:	e7ee      	b.n	810e154 <_puts_r+0x88>
	...

0810e178 <puts>:
 810e178:	4b02      	ldr	r3, [pc, #8]	@ (810e184 <puts+0xc>)
 810e17a:	4601      	mov	r1, r0
 810e17c:	6818      	ldr	r0, [r3, #0]
 810e17e:	f7ff bfa5 	b.w	810e0cc <_puts_r>
 810e182:	bf00      	nop
 810e184:	10000020 	.word	0x10000020

0810e188 <__sread>:
 810e188:	b510      	push	{r4, lr}
 810e18a:	460c      	mov	r4, r1
 810e18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e190:	f000 f9a4 	bl	810e4dc <_read_r>
 810e194:	2800      	cmp	r0, #0
 810e196:	bfab      	itete	ge
 810e198:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810e19a:	89a3      	ldrhlt	r3, [r4, #12]
 810e19c:	181b      	addge	r3, r3, r0
 810e19e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810e1a2:	bfac      	ite	ge
 810e1a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 810e1a6:	81a3      	strhlt	r3, [r4, #12]
 810e1a8:	bd10      	pop	{r4, pc}

0810e1aa <__swrite>:
 810e1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e1ae:	461f      	mov	r7, r3
 810e1b0:	898b      	ldrh	r3, [r1, #12]
 810e1b2:	05db      	lsls	r3, r3, #23
 810e1b4:	4605      	mov	r5, r0
 810e1b6:	460c      	mov	r4, r1
 810e1b8:	4616      	mov	r6, r2
 810e1ba:	d505      	bpl.n	810e1c8 <__swrite+0x1e>
 810e1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e1c0:	2302      	movs	r3, #2
 810e1c2:	2200      	movs	r2, #0
 810e1c4:	f000 f978 	bl	810e4b8 <_lseek_r>
 810e1c8:	89a3      	ldrh	r3, [r4, #12]
 810e1ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e1ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810e1d2:	81a3      	strh	r3, [r4, #12]
 810e1d4:	4632      	mov	r2, r6
 810e1d6:	463b      	mov	r3, r7
 810e1d8:	4628      	mov	r0, r5
 810e1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810e1de:	f000 b9b3 	b.w	810e548 <_write_r>

0810e1e2 <__sseek>:
 810e1e2:	b510      	push	{r4, lr}
 810e1e4:	460c      	mov	r4, r1
 810e1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e1ea:	f000 f965 	bl	810e4b8 <_lseek_r>
 810e1ee:	1c43      	adds	r3, r0, #1
 810e1f0:	89a3      	ldrh	r3, [r4, #12]
 810e1f2:	bf15      	itete	ne
 810e1f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 810e1f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810e1fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810e1fe:	81a3      	strheq	r3, [r4, #12]
 810e200:	bf18      	it	ne
 810e202:	81a3      	strhne	r3, [r4, #12]
 810e204:	bd10      	pop	{r4, pc}

0810e206 <__sclose>:
 810e206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e20a:	f000 b8e7 	b.w	810e3dc <_close_r>

0810e20e <__swbuf_r>:
 810e20e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e210:	460e      	mov	r6, r1
 810e212:	4614      	mov	r4, r2
 810e214:	4605      	mov	r5, r0
 810e216:	b118      	cbz	r0, 810e220 <__swbuf_r+0x12>
 810e218:	6a03      	ldr	r3, [r0, #32]
 810e21a:	b90b      	cbnz	r3, 810e220 <__swbuf_r+0x12>
 810e21c:	f7ff ff06 	bl	810e02c <__sinit>
 810e220:	69a3      	ldr	r3, [r4, #24]
 810e222:	60a3      	str	r3, [r4, #8]
 810e224:	89a3      	ldrh	r3, [r4, #12]
 810e226:	071a      	lsls	r2, r3, #28
 810e228:	d501      	bpl.n	810e22e <__swbuf_r+0x20>
 810e22a:	6923      	ldr	r3, [r4, #16]
 810e22c:	b943      	cbnz	r3, 810e240 <__swbuf_r+0x32>
 810e22e:	4621      	mov	r1, r4
 810e230:	4628      	mov	r0, r5
 810e232:	f000 f82b 	bl	810e28c <__swsetup_r>
 810e236:	b118      	cbz	r0, 810e240 <__swbuf_r+0x32>
 810e238:	f04f 37ff 	mov.w	r7, #4294967295
 810e23c:	4638      	mov	r0, r7
 810e23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810e240:	6823      	ldr	r3, [r4, #0]
 810e242:	6922      	ldr	r2, [r4, #16]
 810e244:	1a98      	subs	r0, r3, r2
 810e246:	6963      	ldr	r3, [r4, #20]
 810e248:	b2f6      	uxtb	r6, r6
 810e24a:	4283      	cmp	r3, r0
 810e24c:	4637      	mov	r7, r6
 810e24e:	dc05      	bgt.n	810e25c <__swbuf_r+0x4e>
 810e250:	4621      	mov	r1, r4
 810e252:	4628      	mov	r0, r5
 810e254:	f000 fd62 	bl	810ed1c <_fflush_r>
 810e258:	2800      	cmp	r0, #0
 810e25a:	d1ed      	bne.n	810e238 <__swbuf_r+0x2a>
 810e25c:	68a3      	ldr	r3, [r4, #8]
 810e25e:	3b01      	subs	r3, #1
 810e260:	60a3      	str	r3, [r4, #8]
 810e262:	6823      	ldr	r3, [r4, #0]
 810e264:	1c5a      	adds	r2, r3, #1
 810e266:	6022      	str	r2, [r4, #0]
 810e268:	701e      	strb	r6, [r3, #0]
 810e26a:	6962      	ldr	r2, [r4, #20]
 810e26c:	1c43      	adds	r3, r0, #1
 810e26e:	429a      	cmp	r2, r3
 810e270:	d004      	beq.n	810e27c <__swbuf_r+0x6e>
 810e272:	89a3      	ldrh	r3, [r4, #12]
 810e274:	07db      	lsls	r3, r3, #31
 810e276:	d5e1      	bpl.n	810e23c <__swbuf_r+0x2e>
 810e278:	2e0a      	cmp	r6, #10
 810e27a:	d1df      	bne.n	810e23c <__swbuf_r+0x2e>
 810e27c:	4621      	mov	r1, r4
 810e27e:	4628      	mov	r0, r5
 810e280:	f000 fd4c 	bl	810ed1c <_fflush_r>
 810e284:	2800      	cmp	r0, #0
 810e286:	d0d9      	beq.n	810e23c <__swbuf_r+0x2e>
 810e288:	e7d6      	b.n	810e238 <__swbuf_r+0x2a>
	...

0810e28c <__swsetup_r>:
 810e28c:	b538      	push	{r3, r4, r5, lr}
 810e28e:	4b29      	ldr	r3, [pc, #164]	@ (810e334 <__swsetup_r+0xa8>)
 810e290:	4605      	mov	r5, r0
 810e292:	6818      	ldr	r0, [r3, #0]
 810e294:	460c      	mov	r4, r1
 810e296:	b118      	cbz	r0, 810e2a0 <__swsetup_r+0x14>
 810e298:	6a03      	ldr	r3, [r0, #32]
 810e29a:	b90b      	cbnz	r3, 810e2a0 <__swsetup_r+0x14>
 810e29c:	f7ff fec6 	bl	810e02c <__sinit>
 810e2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e2a4:	0719      	lsls	r1, r3, #28
 810e2a6:	d422      	bmi.n	810e2ee <__swsetup_r+0x62>
 810e2a8:	06da      	lsls	r2, r3, #27
 810e2aa:	d407      	bmi.n	810e2bc <__swsetup_r+0x30>
 810e2ac:	2209      	movs	r2, #9
 810e2ae:	602a      	str	r2, [r5, #0]
 810e2b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810e2b4:	81a3      	strh	r3, [r4, #12]
 810e2b6:	f04f 30ff 	mov.w	r0, #4294967295
 810e2ba:	e033      	b.n	810e324 <__swsetup_r+0x98>
 810e2bc:	0758      	lsls	r0, r3, #29
 810e2be:	d512      	bpl.n	810e2e6 <__swsetup_r+0x5a>
 810e2c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810e2c2:	b141      	cbz	r1, 810e2d6 <__swsetup_r+0x4a>
 810e2c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810e2c8:	4299      	cmp	r1, r3
 810e2ca:	d002      	beq.n	810e2d2 <__swsetup_r+0x46>
 810e2cc:	4628      	mov	r0, r5
 810e2ce:	f000 f989 	bl	810e5e4 <_free_r>
 810e2d2:	2300      	movs	r3, #0
 810e2d4:	6363      	str	r3, [r4, #52]	@ 0x34
 810e2d6:	89a3      	ldrh	r3, [r4, #12]
 810e2d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810e2dc:	81a3      	strh	r3, [r4, #12]
 810e2de:	2300      	movs	r3, #0
 810e2e0:	6063      	str	r3, [r4, #4]
 810e2e2:	6923      	ldr	r3, [r4, #16]
 810e2e4:	6023      	str	r3, [r4, #0]
 810e2e6:	89a3      	ldrh	r3, [r4, #12]
 810e2e8:	f043 0308 	orr.w	r3, r3, #8
 810e2ec:	81a3      	strh	r3, [r4, #12]
 810e2ee:	6923      	ldr	r3, [r4, #16]
 810e2f0:	b94b      	cbnz	r3, 810e306 <__swsetup_r+0x7a>
 810e2f2:	89a3      	ldrh	r3, [r4, #12]
 810e2f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810e2f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810e2fc:	d003      	beq.n	810e306 <__swsetup_r+0x7a>
 810e2fe:	4621      	mov	r1, r4
 810e300:	4628      	mov	r0, r5
 810e302:	f000 fd59 	bl	810edb8 <__smakebuf_r>
 810e306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e30a:	f013 0201 	ands.w	r2, r3, #1
 810e30e:	d00a      	beq.n	810e326 <__swsetup_r+0x9a>
 810e310:	2200      	movs	r2, #0
 810e312:	60a2      	str	r2, [r4, #8]
 810e314:	6962      	ldr	r2, [r4, #20]
 810e316:	4252      	negs	r2, r2
 810e318:	61a2      	str	r2, [r4, #24]
 810e31a:	6922      	ldr	r2, [r4, #16]
 810e31c:	b942      	cbnz	r2, 810e330 <__swsetup_r+0xa4>
 810e31e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810e322:	d1c5      	bne.n	810e2b0 <__swsetup_r+0x24>
 810e324:	bd38      	pop	{r3, r4, r5, pc}
 810e326:	0799      	lsls	r1, r3, #30
 810e328:	bf58      	it	pl
 810e32a:	6962      	ldrpl	r2, [r4, #20]
 810e32c:	60a2      	str	r2, [r4, #8]
 810e32e:	e7f4      	b.n	810e31a <__swsetup_r+0x8e>
 810e330:	2000      	movs	r0, #0
 810e332:	e7f7      	b.n	810e324 <__swsetup_r+0x98>
 810e334:	10000020 	.word	0x10000020

0810e338 <memmove>:
 810e338:	4288      	cmp	r0, r1
 810e33a:	b510      	push	{r4, lr}
 810e33c:	eb01 0402 	add.w	r4, r1, r2
 810e340:	d902      	bls.n	810e348 <memmove+0x10>
 810e342:	4284      	cmp	r4, r0
 810e344:	4623      	mov	r3, r4
 810e346:	d807      	bhi.n	810e358 <memmove+0x20>
 810e348:	1e43      	subs	r3, r0, #1
 810e34a:	42a1      	cmp	r1, r4
 810e34c:	d008      	beq.n	810e360 <memmove+0x28>
 810e34e:	f811 2b01 	ldrb.w	r2, [r1], #1
 810e352:	f803 2f01 	strb.w	r2, [r3, #1]!
 810e356:	e7f8      	b.n	810e34a <memmove+0x12>
 810e358:	4402      	add	r2, r0
 810e35a:	4601      	mov	r1, r0
 810e35c:	428a      	cmp	r2, r1
 810e35e:	d100      	bne.n	810e362 <memmove+0x2a>
 810e360:	bd10      	pop	{r4, pc}
 810e362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810e366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810e36a:	e7f7      	b.n	810e35c <memmove+0x24>

0810e36c <memset>:
 810e36c:	4402      	add	r2, r0
 810e36e:	4603      	mov	r3, r0
 810e370:	4293      	cmp	r3, r2
 810e372:	d100      	bne.n	810e376 <memset+0xa>
 810e374:	4770      	bx	lr
 810e376:	f803 1b01 	strb.w	r1, [r3], #1
 810e37a:	e7f9      	b.n	810e370 <memset+0x4>

0810e37c <_raise_r>:
 810e37c:	291f      	cmp	r1, #31
 810e37e:	b538      	push	{r3, r4, r5, lr}
 810e380:	4605      	mov	r5, r0
 810e382:	460c      	mov	r4, r1
 810e384:	d904      	bls.n	810e390 <_raise_r+0x14>
 810e386:	2316      	movs	r3, #22
 810e388:	6003      	str	r3, [r0, #0]
 810e38a:	f04f 30ff 	mov.w	r0, #4294967295
 810e38e:	bd38      	pop	{r3, r4, r5, pc}
 810e390:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810e392:	b112      	cbz	r2, 810e39a <_raise_r+0x1e>
 810e394:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810e398:	b94b      	cbnz	r3, 810e3ae <_raise_r+0x32>
 810e39a:	4628      	mov	r0, r5
 810e39c:	f000 f8c2 	bl	810e524 <_getpid_r>
 810e3a0:	4622      	mov	r2, r4
 810e3a2:	4601      	mov	r1, r0
 810e3a4:	4628      	mov	r0, r5
 810e3a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e3aa:	f000 b8a9 	b.w	810e500 <_kill_r>
 810e3ae:	2b01      	cmp	r3, #1
 810e3b0:	d00a      	beq.n	810e3c8 <_raise_r+0x4c>
 810e3b2:	1c59      	adds	r1, r3, #1
 810e3b4:	d103      	bne.n	810e3be <_raise_r+0x42>
 810e3b6:	2316      	movs	r3, #22
 810e3b8:	6003      	str	r3, [r0, #0]
 810e3ba:	2001      	movs	r0, #1
 810e3bc:	e7e7      	b.n	810e38e <_raise_r+0x12>
 810e3be:	2100      	movs	r1, #0
 810e3c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810e3c4:	4620      	mov	r0, r4
 810e3c6:	4798      	blx	r3
 810e3c8:	2000      	movs	r0, #0
 810e3ca:	e7e0      	b.n	810e38e <_raise_r+0x12>

0810e3cc <raise>:
 810e3cc:	4b02      	ldr	r3, [pc, #8]	@ (810e3d8 <raise+0xc>)
 810e3ce:	4601      	mov	r1, r0
 810e3d0:	6818      	ldr	r0, [r3, #0]
 810e3d2:	f7ff bfd3 	b.w	810e37c <_raise_r>
 810e3d6:	bf00      	nop
 810e3d8:	10000020 	.word	0x10000020

0810e3dc <_close_r>:
 810e3dc:	b538      	push	{r3, r4, r5, lr}
 810e3de:	4d06      	ldr	r5, [pc, #24]	@ (810e3f8 <_close_r+0x1c>)
 810e3e0:	2300      	movs	r3, #0
 810e3e2:	4604      	mov	r4, r0
 810e3e4:	4608      	mov	r0, r1
 810e3e6:	602b      	str	r3, [r5, #0]
 810e3e8:	f7f6 fd26 	bl	8104e38 <_close>
 810e3ec:	1c43      	adds	r3, r0, #1
 810e3ee:	d102      	bne.n	810e3f6 <_close_r+0x1a>
 810e3f0:	682b      	ldr	r3, [r5, #0]
 810e3f2:	b103      	cbz	r3, 810e3f6 <_close_r+0x1a>
 810e3f4:	6023      	str	r3, [r4, #0]
 810e3f6:	bd38      	pop	{r3, r4, r5, pc}
 810e3f8:	10004fe4 	.word	0x10004fe4

0810e3fc <_reclaim_reent>:
 810e3fc:	4b2d      	ldr	r3, [pc, #180]	@ (810e4b4 <_reclaim_reent+0xb8>)
 810e3fe:	681b      	ldr	r3, [r3, #0]
 810e400:	4283      	cmp	r3, r0
 810e402:	b570      	push	{r4, r5, r6, lr}
 810e404:	4604      	mov	r4, r0
 810e406:	d053      	beq.n	810e4b0 <_reclaim_reent+0xb4>
 810e408:	69c3      	ldr	r3, [r0, #28]
 810e40a:	b31b      	cbz	r3, 810e454 <_reclaim_reent+0x58>
 810e40c:	68db      	ldr	r3, [r3, #12]
 810e40e:	b163      	cbz	r3, 810e42a <_reclaim_reent+0x2e>
 810e410:	2500      	movs	r5, #0
 810e412:	69e3      	ldr	r3, [r4, #28]
 810e414:	68db      	ldr	r3, [r3, #12]
 810e416:	5959      	ldr	r1, [r3, r5]
 810e418:	b9b1      	cbnz	r1, 810e448 <_reclaim_reent+0x4c>
 810e41a:	3504      	adds	r5, #4
 810e41c:	2d80      	cmp	r5, #128	@ 0x80
 810e41e:	d1f8      	bne.n	810e412 <_reclaim_reent+0x16>
 810e420:	69e3      	ldr	r3, [r4, #28]
 810e422:	4620      	mov	r0, r4
 810e424:	68d9      	ldr	r1, [r3, #12]
 810e426:	f000 f8dd 	bl	810e5e4 <_free_r>
 810e42a:	69e3      	ldr	r3, [r4, #28]
 810e42c:	6819      	ldr	r1, [r3, #0]
 810e42e:	b111      	cbz	r1, 810e436 <_reclaim_reent+0x3a>
 810e430:	4620      	mov	r0, r4
 810e432:	f000 f8d7 	bl	810e5e4 <_free_r>
 810e436:	69e3      	ldr	r3, [r4, #28]
 810e438:	689d      	ldr	r5, [r3, #8]
 810e43a:	b15d      	cbz	r5, 810e454 <_reclaim_reent+0x58>
 810e43c:	4629      	mov	r1, r5
 810e43e:	4620      	mov	r0, r4
 810e440:	682d      	ldr	r5, [r5, #0]
 810e442:	f000 f8cf 	bl	810e5e4 <_free_r>
 810e446:	e7f8      	b.n	810e43a <_reclaim_reent+0x3e>
 810e448:	680e      	ldr	r6, [r1, #0]
 810e44a:	4620      	mov	r0, r4
 810e44c:	f000 f8ca 	bl	810e5e4 <_free_r>
 810e450:	4631      	mov	r1, r6
 810e452:	e7e1      	b.n	810e418 <_reclaim_reent+0x1c>
 810e454:	6961      	ldr	r1, [r4, #20]
 810e456:	b111      	cbz	r1, 810e45e <_reclaim_reent+0x62>
 810e458:	4620      	mov	r0, r4
 810e45a:	f000 f8c3 	bl	810e5e4 <_free_r>
 810e45e:	69e1      	ldr	r1, [r4, #28]
 810e460:	b111      	cbz	r1, 810e468 <_reclaim_reent+0x6c>
 810e462:	4620      	mov	r0, r4
 810e464:	f000 f8be 	bl	810e5e4 <_free_r>
 810e468:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 810e46a:	b111      	cbz	r1, 810e472 <_reclaim_reent+0x76>
 810e46c:	4620      	mov	r0, r4
 810e46e:	f000 f8b9 	bl	810e5e4 <_free_r>
 810e472:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810e474:	b111      	cbz	r1, 810e47c <_reclaim_reent+0x80>
 810e476:	4620      	mov	r0, r4
 810e478:	f000 f8b4 	bl	810e5e4 <_free_r>
 810e47c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 810e47e:	b111      	cbz	r1, 810e486 <_reclaim_reent+0x8a>
 810e480:	4620      	mov	r0, r4
 810e482:	f000 f8af 	bl	810e5e4 <_free_r>
 810e486:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 810e488:	b111      	cbz	r1, 810e490 <_reclaim_reent+0x94>
 810e48a:	4620      	mov	r0, r4
 810e48c:	f000 f8aa 	bl	810e5e4 <_free_r>
 810e490:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 810e492:	b111      	cbz	r1, 810e49a <_reclaim_reent+0x9e>
 810e494:	4620      	mov	r0, r4
 810e496:	f000 f8a5 	bl	810e5e4 <_free_r>
 810e49a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 810e49c:	b111      	cbz	r1, 810e4a4 <_reclaim_reent+0xa8>
 810e49e:	4620      	mov	r0, r4
 810e4a0:	f000 f8a0 	bl	810e5e4 <_free_r>
 810e4a4:	6a23      	ldr	r3, [r4, #32]
 810e4a6:	b11b      	cbz	r3, 810e4b0 <_reclaim_reent+0xb4>
 810e4a8:	4620      	mov	r0, r4
 810e4aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810e4ae:	4718      	bx	r3
 810e4b0:	bd70      	pop	{r4, r5, r6, pc}
 810e4b2:	bf00      	nop
 810e4b4:	10000020 	.word	0x10000020

0810e4b8 <_lseek_r>:
 810e4b8:	b538      	push	{r3, r4, r5, lr}
 810e4ba:	4d07      	ldr	r5, [pc, #28]	@ (810e4d8 <_lseek_r+0x20>)
 810e4bc:	4604      	mov	r4, r0
 810e4be:	4608      	mov	r0, r1
 810e4c0:	4611      	mov	r1, r2
 810e4c2:	2200      	movs	r2, #0
 810e4c4:	602a      	str	r2, [r5, #0]
 810e4c6:	461a      	mov	r2, r3
 810e4c8:	f7f6 fcdd 	bl	8104e86 <_lseek>
 810e4cc:	1c43      	adds	r3, r0, #1
 810e4ce:	d102      	bne.n	810e4d6 <_lseek_r+0x1e>
 810e4d0:	682b      	ldr	r3, [r5, #0]
 810e4d2:	b103      	cbz	r3, 810e4d6 <_lseek_r+0x1e>
 810e4d4:	6023      	str	r3, [r4, #0]
 810e4d6:	bd38      	pop	{r3, r4, r5, pc}
 810e4d8:	10004fe4 	.word	0x10004fe4

0810e4dc <_read_r>:
 810e4dc:	b538      	push	{r3, r4, r5, lr}
 810e4de:	4d07      	ldr	r5, [pc, #28]	@ (810e4fc <_read_r+0x20>)
 810e4e0:	4604      	mov	r4, r0
 810e4e2:	4608      	mov	r0, r1
 810e4e4:	4611      	mov	r1, r2
 810e4e6:	2200      	movs	r2, #0
 810e4e8:	602a      	str	r2, [r5, #0]
 810e4ea:	461a      	mov	r2, r3
 810e4ec:	f7f6 fc87 	bl	8104dfe <_read>
 810e4f0:	1c43      	adds	r3, r0, #1
 810e4f2:	d102      	bne.n	810e4fa <_read_r+0x1e>
 810e4f4:	682b      	ldr	r3, [r5, #0]
 810e4f6:	b103      	cbz	r3, 810e4fa <_read_r+0x1e>
 810e4f8:	6023      	str	r3, [r4, #0]
 810e4fa:	bd38      	pop	{r3, r4, r5, pc}
 810e4fc:	10004fe4 	.word	0x10004fe4

0810e500 <_kill_r>:
 810e500:	b538      	push	{r3, r4, r5, lr}
 810e502:	4d07      	ldr	r5, [pc, #28]	@ (810e520 <_kill_r+0x20>)
 810e504:	2300      	movs	r3, #0
 810e506:	4604      	mov	r4, r0
 810e508:	4608      	mov	r0, r1
 810e50a:	4611      	mov	r1, r2
 810e50c:	602b      	str	r3, [r5, #0]
 810e50e:	f7f6 fc5b 	bl	8104dc8 <_kill>
 810e512:	1c43      	adds	r3, r0, #1
 810e514:	d102      	bne.n	810e51c <_kill_r+0x1c>
 810e516:	682b      	ldr	r3, [r5, #0]
 810e518:	b103      	cbz	r3, 810e51c <_kill_r+0x1c>
 810e51a:	6023      	str	r3, [r4, #0]
 810e51c:	bd38      	pop	{r3, r4, r5, pc}
 810e51e:	bf00      	nop
 810e520:	10004fe4 	.word	0x10004fe4

0810e524 <_getpid_r>:
 810e524:	f7f6 bc48 	b.w	8104db8 <_getpid>

0810e528 <_sbrk_r>:
 810e528:	b538      	push	{r3, r4, r5, lr}
 810e52a:	4d06      	ldr	r5, [pc, #24]	@ (810e544 <_sbrk_r+0x1c>)
 810e52c:	2300      	movs	r3, #0
 810e52e:	4604      	mov	r4, r0
 810e530:	4608      	mov	r0, r1
 810e532:	602b      	str	r3, [r5, #0]
 810e534:	f7f6 fcb4 	bl	8104ea0 <_sbrk>
 810e538:	1c43      	adds	r3, r0, #1
 810e53a:	d102      	bne.n	810e542 <_sbrk_r+0x1a>
 810e53c:	682b      	ldr	r3, [r5, #0]
 810e53e:	b103      	cbz	r3, 810e542 <_sbrk_r+0x1a>
 810e540:	6023      	str	r3, [r4, #0]
 810e542:	bd38      	pop	{r3, r4, r5, pc}
 810e544:	10004fe4 	.word	0x10004fe4

0810e548 <_write_r>:
 810e548:	b538      	push	{r3, r4, r5, lr}
 810e54a:	4d07      	ldr	r5, [pc, #28]	@ (810e568 <_write_r+0x20>)
 810e54c:	4604      	mov	r4, r0
 810e54e:	4608      	mov	r0, r1
 810e550:	4611      	mov	r1, r2
 810e552:	2200      	movs	r2, #0
 810e554:	602a      	str	r2, [r5, #0]
 810e556:	461a      	mov	r2, r3
 810e558:	f7f6 f9c2 	bl	81048e0 <_write>
 810e55c:	1c43      	adds	r3, r0, #1
 810e55e:	d102      	bne.n	810e566 <_write_r+0x1e>
 810e560:	682b      	ldr	r3, [r5, #0]
 810e562:	b103      	cbz	r3, 810e566 <_write_r+0x1e>
 810e564:	6023      	str	r3, [r4, #0]
 810e566:	bd38      	pop	{r3, r4, r5, pc}
 810e568:	10004fe4 	.word	0x10004fe4

0810e56c <__errno>:
 810e56c:	4b01      	ldr	r3, [pc, #4]	@ (810e574 <__errno+0x8>)
 810e56e:	6818      	ldr	r0, [r3, #0]
 810e570:	4770      	bx	lr
 810e572:	bf00      	nop
 810e574:	10000020 	.word	0x10000020

0810e578 <__libc_init_array>:
 810e578:	b570      	push	{r4, r5, r6, lr}
 810e57a:	4d0d      	ldr	r5, [pc, #52]	@ (810e5b0 <__libc_init_array+0x38>)
 810e57c:	4c0d      	ldr	r4, [pc, #52]	@ (810e5b4 <__libc_init_array+0x3c>)
 810e57e:	1b64      	subs	r4, r4, r5
 810e580:	10a4      	asrs	r4, r4, #2
 810e582:	2600      	movs	r6, #0
 810e584:	42a6      	cmp	r6, r4
 810e586:	d109      	bne.n	810e59c <__libc_init_array+0x24>
 810e588:	4d0b      	ldr	r5, [pc, #44]	@ (810e5b8 <__libc_init_array+0x40>)
 810e58a:	4c0c      	ldr	r4, [pc, #48]	@ (810e5bc <__libc_init_array+0x44>)
 810e58c:	f000 fca6 	bl	810eedc <_init>
 810e590:	1b64      	subs	r4, r4, r5
 810e592:	10a4      	asrs	r4, r4, #2
 810e594:	2600      	movs	r6, #0
 810e596:	42a6      	cmp	r6, r4
 810e598:	d105      	bne.n	810e5a6 <__libc_init_array+0x2e>
 810e59a:	bd70      	pop	{r4, r5, r6, pc}
 810e59c:	f855 3b04 	ldr.w	r3, [r5], #4
 810e5a0:	4798      	blx	r3
 810e5a2:	3601      	adds	r6, #1
 810e5a4:	e7ee      	b.n	810e584 <__libc_init_array+0xc>
 810e5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 810e5aa:	4798      	blx	r3
 810e5ac:	3601      	adds	r6, #1
 810e5ae:	e7f2      	b.n	810e596 <__libc_init_array+0x1e>
 810e5b0:	0810f294 	.word	0x0810f294
 810e5b4:	0810f294 	.word	0x0810f294
 810e5b8:	0810f294 	.word	0x0810f294
 810e5bc:	0810f29c 	.word	0x0810f29c

0810e5c0 <__retarget_lock_init_recursive>:
 810e5c0:	4770      	bx	lr

0810e5c2 <__retarget_lock_acquire_recursive>:
 810e5c2:	4770      	bx	lr

0810e5c4 <__retarget_lock_release_recursive>:
 810e5c4:	4770      	bx	lr

0810e5c6 <memcpy>:
 810e5c6:	440a      	add	r2, r1
 810e5c8:	4291      	cmp	r1, r2
 810e5ca:	f100 33ff 	add.w	r3, r0, #4294967295
 810e5ce:	d100      	bne.n	810e5d2 <memcpy+0xc>
 810e5d0:	4770      	bx	lr
 810e5d2:	b510      	push	{r4, lr}
 810e5d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e5d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 810e5dc:	4291      	cmp	r1, r2
 810e5de:	d1f9      	bne.n	810e5d4 <memcpy+0xe>
 810e5e0:	bd10      	pop	{r4, pc}
	...

0810e5e4 <_free_r>:
 810e5e4:	b538      	push	{r3, r4, r5, lr}
 810e5e6:	4605      	mov	r5, r0
 810e5e8:	2900      	cmp	r1, #0
 810e5ea:	d041      	beq.n	810e670 <_free_r+0x8c>
 810e5ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810e5f0:	1f0c      	subs	r4, r1, #4
 810e5f2:	2b00      	cmp	r3, #0
 810e5f4:	bfb8      	it	lt
 810e5f6:	18e4      	addlt	r4, r4, r3
 810e5f8:	f7ff fc80 	bl	810defc <__malloc_lock>
 810e5fc:	4a1d      	ldr	r2, [pc, #116]	@ (810e674 <_free_r+0x90>)
 810e5fe:	6813      	ldr	r3, [r2, #0]
 810e600:	b933      	cbnz	r3, 810e610 <_free_r+0x2c>
 810e602:	6063      	str	r3, [r4, #4]
 810e604:	6014      	str	r4, [r2, #0]
 810e606:	4628      	mov	r0, r5
 810e608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e60c:	f7ff bc7c 	b.w	810df08 <__malloc_unlock>
 810e610:	42a3      	cmp	r3, r4
 810e612:	d908      	bls.n	810e626 <_free_r+0x42>
 810e614:	6820      	ldr	r0, [r4, #0]
 810e616:	1821      	adds	r1, r4, r0
 810e618:	428b      	cmp	r3, r1
 810e61a:	bf01      	itttt	eq
 810e61c:	6819      	ldreq	r1, [r3, #0]
 810e61e:	685b      	ldreq	r3, [r3, #4]
 810e620:	1809      	addeq	r1, r1, r0
 810e622:	6021      	streq	r1, [r4, #0]
 810e624:	e7ed      	b.n	810e602 <_free_r+0x1e>
 810e626:	461a      	mov	r2, r3
 810e628:	685b      	ldr	r3, [r3, #4]
 810e62a:	b10b      	cbz	r3, 810e630 <_free_r+0x4c>
 810e62c:	42a3      	cmp	r3, r4
 810e62e:	d9fa      	bls.n	810e626 <_free_r+0x42>
 810e630:	6811      	ldr	r1, [r2, #0]
 810e632:	1850      	adds	r0, r2, r1
 810e634:	42a0      	cmp	r0, r4
 810e636:	d10b      	bne.n	810e650 <_free_r+0x6c>
 810e638:	6820      	ldr	r0, [r4, #0]
 810e63a:	4401      	add	r1, r0
 810e63c:	1850      	adds	r0, r2, r1
 810e63e:	4283      	cmp	r3, r0
 810e640:	6011      	str	r1, [r2, #0]
 810e642:	d1e0      	bne.n	810e606 <_free_r+0x22>
 810e644:	6818      	ldr	r0, [r3, #0]
 810e646:	685b      	ldr	r3, [r3, #4]
 810e648:	6053      	str	r3, [r2, #4]
 810e64a:	4408      	add	r0, r1
 810e64c:	6010      	str	r0, [r2, #0]
 810e64e:	e7da      	b.n	810e606 <_free_r+0x22>
 810e650:	d902      	bls.n	810e658 <_free_r+0x74>
 810e652:	230c      	movs	r3, #12
 810e654:	602b      	str	r3, [r5, #0]
 810e656:	e7d6      	b.n	810e606 <_free_r+0x22>
 810e658:	6820      	ldr	r0, [r4, #0]
 810e65a:	1821      	adds	r1, r4, r0
 810e65c:	428b      	cmp	r3, r1
 810e65e:	bf04      	itt	eq
 810e660:	6819      	ldreq	r1, [r3, #0]
 810e662:	685b      	ldreq	r3, [r3, #4]
 810e664:	6063      	str	r3, [r4, #4]
 810e666:	bf04      	itt	eq
 810e668:	1809      	addeq	r1, r1, r0
 810e66a:	6021      	streq	r1, [r4, #0]
 810e66c:	6054      	str	r4, [r2, #4]
 810e66e:	e7ca      	b.n	810e606 <_free_r+0x22>
 810e670:	bd38      	pop	{r3, r4, r5, pc}
 810e672:	bf00      	nop
 810e674:	10004ea4 	.word	0x10004ea4

0810e678 <__sfputc_r>:
 810e678:	6893      	ldr	r3, [r2, #8]
 810e67a:	3b01      	subs	r3, #1
 810e67c:	2b00      	cmp	r3, #0
 810e67e:	b410      	push	{r4}
 810e680:	6093      	str	r3, [r2, #8]
 810e682:	da08      	bge.n	810e696 <__sfputc_r+0x1e>
 810e684:	6994      	ldr	r4, [r2, #24]
 810e686:	42a3      	cmp	r3, r4
 810e688:	db01      	blt.n	810e68e <__sfputc_r+0x16>
 810e68a:	290a      	cmp	r1, #10
 810e68c:	d103      	bne.n	810e696 <__sfputc_r+0x1e>
 810e68e:	f85d 4b04 	ldr.w	r4, [sp], #4
 810e692:	f7ff bdbc 	b.w	810e20e <__swbuf_r>
 810e696:	6813      	ldr	r3, [r2, #0]
 810e698:	1c58      	adds	r0, r3, #1
 810e69a:	6010      	str	r0, [r2, #0]
 810e69c:	7019      	strb	r1, [r3, #0]
 810e69e:	4608      	mov	r0, r1
 810e6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 810e6a4:	4770      	bx	lr

0810e6a6 <__sfputs_r>:
 810e6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e6a8:	4606      	mov	r6, r0
 810e6aa:	460f      	mov	r7, r1
 810e6ac:	4614      	mov	r4, r2
 810e6ae:	18d5      	adds	r5, r2, r3
 810e6b0:	42ac      	cmp	r4, r5
 810e6b2:	d101      	bne.n	810e6b8 <__sfputs_r+0x12>
 810e6b4:	2000      	movs	r0, #0
 810e6b6:	e007      	b.n	810e6c8 <__sfputs_r+0x22>
 810e6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e6bc:	463a      	mov	r2, r7
 810e6be:	4630      	mov	r0, r6
 810e6c0:	f7ff ffda 	bl	810e678 <__sfputc_r>
 810e6c4:	1c43      	adds	r3, r0, #1
 810e6c6:	d1f3      	bne.n	810e6b0 <__sfputs_r+0xa>
 810e6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810e6cc <_vfiprintf_r>:
 810e6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e6d0:	460d      	mov	r5, r1
 810e6d2:	b09d      	sub	sp, #116	@ 0x74
 810e6d4:	4614      	mov	r4, r2
 810e6d6:	4698      	mov	r8, r3
 810e6d8:	4606      	mov	r6, r0
 810e6da:	b118      	cbz	r0, 810e6e4 <_vfiprintf_r+0x18>
 810e6dc:	6a03      	ldr	r3, [r0, #32]
 810e6de:	b90b      	cbnz	r3, 810e6e4 <_vfiprintf_r+0x18>
 810e6e0:	f7ff fca4 	bl	810e02c <__sinit>
 810e6e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810e6e6:	07d9      	lsls	r1, r3, #31
 810e6e8:	d405      	bmi.n	810e6f6 <_vfiprintf_r+0x2a>
 810e6ea:	89ab      	ldrh	r3, [r5, #12]
 810e6ec:	059a      	lsls	r2, r3, #22
 810e6ee:	d402      	bmi.n	810e6f6 <_vfiprintf_r+0x2a>
 810e6f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810e6f2:	f7ff ff66 	bl	810e5c2 <__retarget_lock_acquire_recursive>
 810e6f6:	89ab      	ldrh	r3, [r5, #12]
 810e6f8:	071b      	lsls	r3, r3, #28
 810e6fa:	d501      	bpl.n	810e700 <_vfiprintf_r+0x34>
 810e6fc:	692b      	ldr	r3, [r5, #16]
 810e6fe:	b99b      	cbnz	r3, 810e728 <_vfiprintf_r+0x5c>
 810e700:	4629      	mov	r1, r5
 810e702:	4630      	mov	r0, r6
 810e704:	f7ff fdc2 	bl	810e28c <__swsetup_r>
 810e708:	b170      	cbz	r0, 810e728 <_vfiprintf_r+0x5c>
 810e70a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810e70c:	07dc      	lsls	r4, r3, #31
 810e70e:	d504      	bpl.n	810e71a <_vfiprintf_r+0x4e>
 810e710:	f04f 30ff 	mov.w	r0, #4294967295
 810e714:	b01d      	add	sp, #116	@ 0x74
 810e716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e71a:	89ab      	ldrh	r3, [r5, #12]
 810e71c:	0598      	lsls	r0, r3, #22
 810e71e:	d4f7      	bmi.n	810e710 <_vfiprintf_r+0x44>
 810e720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810e722:	f7ff ff4f 	bl	810e5c4 <__retarget_lock_release_recursive>
 810e726:	e7f3      	b.n	810e710 <_vfiprintf_r+0x44>
 810e728:	2300      	movs	r3, #0
 810e72a:	9309      	str	r3, [sp, #36]	@ 0x24
 810e72c:	2320      	movs	r3, #32
 810e72e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810e732:	f8cd 800c 	str.w	r8, [sp, #12]
 810e736:	2330      	movs	r3, #48	@ 0x30
 810e738:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810e8e8 <_vfiprintf_r+0x21c>
 810e73c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810e740:	f04f 0901 	mov.w	r9, #1
 810e744:	4623      	mov	r3, r4
 810e746:	469a      	mov	sl, r3
 810e748:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e74c:	b10a      	cbz	r2, 810e752 <_vfiprintf_r+0x86>
 810e74e:	2a25      	cmp	r2, #37	@ 0x25
 810e750:	d1f9      	bne.n	810e746 <_vfiprintf_r+0x7a>
 810e752:	ebba 0b04 	subs.w	fp, sl, r4
 810e756:	d00b      	beq.n	810e770 <_vfiprintf_r+0xa4>
 810e758:	465b      	mov	r3, fp
 810e75a:	4622      	mov	r2, r4
 810e75c:	4629      	mov	r1, r5
 810e75e:	4630      	mov	r0, r6
 810e760:	f7ff ffa1 	bl	810e6a6 <__sfputs_r>
 810e764:	3001      	adds	r0, #1
 810e766:	f000 80a7 	beq.w	810e8b8 <_vfiprintf_r+0x1ec>
 810e76a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810e76c:	445a      	add	r2, fp
 810e76e:	9209      	str	r2, [sp, #36]	@ 0x24
 810e770:	f89a 3000 	ldrb.w	r3, [sl]
 810e774:	2b00      	cmp	r3, #0
 810e776:	f000 809f 	beq.w	810e8b8 <_vfiprintf_r+0x1ec>
 810e77a:	2300      	movs	r3, #0
 810e77c:	f04f 32ff 	mov.w	r2, #4294967295
 810e780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810e784:	f10a 0a01 	add.w	sl, sl, #1
 810e788:	9304      	str	r3, [sp, #16]
 810e78a:	9307      	str	r3, [sp, #28]
 810e78c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810e790:	931a      	str	r3, [sp, #104]	@ 0x68
 810e792:	4654      	mov	r4, sl
 810e794:	2205      	movs	r2, #5
 810e796:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e79a:	4853      	ldr	r0, [pc, #332]	@ (810e8e8 <_vfiprintf_r+0x21c>)
 810e79c:	f7f1 fda0 	bl	81002e0 <memchr>
 810e7a0:	9a04      	ldr	r2, [sp, #16]
 810e7a2:	b9d8      	cbnz	r0, 810e7dc <_vfiprintf_r+0x110>
 810e7a4:	06d1      	lsls	r1, r2, #27
 810e7a6:	bf44      	itt	mi
 810e7a8:	2320      	movmi	r3, #32
 810e7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810e7ae:	0713      	lsls	r3, r2, #28
 810e7b0:	bf44      	itt	mi
 810e7b2:	232b      	movmi	r3, #43	@ 0x2b
 810e7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810e7b8:	f89a 3000 	ldrb.w	r3, [sl]
 810e7bc:	2b2a      	cmp	r3, #42	@ 0x2a
 810e7be:	d015      	beq.n	810e7ec <_vfiprintf_r+0x120>
 810e7c0:	9a07      	ldr	r2, [sp, #28]
 810e7c2:	4654      	mov	r4, sl
 810e7c4:	2000      	movs	r0, #0
 810e7c6:	f04f 0c0a 	mov.w	ip, #10
 810e7ca:	4621      	mov	r1, r4
 810e7cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 810e7d0:	3b30      	subs	r3, #48	@ 0x30
 810e7d2:	2b09      	cmp	r3, #9
 810e7d4:	d94b      	bls.n	810e86e <_vfiprintf_r+0x1a2>
 810e7d6:	b1b0      	cbz	r0, 810e806 <_vfiprintf_r+0x13a>
 810e7d8:	9207      	str	r2, [sp, #28]
 810e7da:	e014      	b.n	810e806 <_vfiprintf_r+0x13a>
 810e7dc:	eba0 0308 	sub.w	r3, r0, r8
 810e7e0:	fa09 f303 	lsl.w	r3, r9, r3
 810e7e4:	4313      	orrs	r3, r2
 810e7e6:	9304      	str	r3, [sp, #16]
 810e7e8:	46a2      	mov	sl, r4
 810e7ea:	e7d2      	b.n	810e792 <_vfiprintf_r+0xc6>
 810e7ec:	9b03      	ldr	r3, [sp, #12]
 810e7ee:	1d19      	adds	r1, r3, #4
 810e7f0:	681b      	ldr	r3, [r3, #0]
 810e7f2:	9103      	str	r1, [sp, #12]
 810e7f4:	2b00      	cmp	r3, #0
 810e7f6:	bfbb      	ittet	lt
 810e7f8:	425b      	neglt	r3, r3
 810e7fa:	f042 0202 	orrlt.w	r2, r2, #2
 810e7fe:	9307      	strge	r3, [sp, #28]
 810e800:	9307      	strlt	r3, [sp, #28]
 810e802:	bfb8      	it	lt
 810e804:	9204      	strlt	r2, [sp, #16]
 810e806:	7823      	ldrb	r3, [r4, #0]
 810e808:	2b2e      	cmp	r3, #46	@ 0x2e
 810e80a:	d10a      	bne.n	810e822 <_vfiprintf_r+0x156>
 810e80c:	7863      	ldrb	r3, [r4, #1]
 810e80e:	2b2a      	cmp	r3, #42	@ 0x2a
 810e810:	d132      	bne.n	810e878 <_vfiprintf_r+0x1ac>
 810e812:	9b03      	ldr	r3, [sp, #12]
 810e814:	1d1a      	adds	r2, r3, #4
 810e816:	681b      	ldr	r3, [r3, #0]
 810e818:	9203      	str	r2, [sp, #12]
 810e81a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810e81e:	3402      	adds	r4, #2
 810e820:	9305      	str	r3, [sp, #20]
 810e822:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810e8f8 <_vfiprintf_r+0x22c>
 810e826:	7821      	ldrb	r1, [r4, #0]
 810e828:	2203      	movs	r2, #3
 810e82a:	4650      	mov	r0, sl
 810e82c:	f7f1 fd58 	bl	81002e0 <memchr>
 810e830:	b138      	cbz	r0, 810e842 <_vfiprintf_r+0x176>
 810e832:	9b04      	ldr	r3, [sp, #16]
 810e834:	eba0 000a 	sub.w	r0, r0, sl
 810e838:	2240      	movs	r2, #64	@ 0x40
 810e83a:	4082      	lsls	r2, r0
 810e83c:	4313      	orrs	r3, r2
 810e83e:	3401      	adds	r4, #1
 810e840:	9304      	str	r3, [sp, #16]
 810e842:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e846:	4829      	ldr	r0, [pc, #164]	@ (810e8ec <_vfiprintf_r+0x220>)
 810e848:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810e84c:	2206      	movs	r2, #6
 810e84e:	f7f1 fd47 	bl	81002e0 <memchr>
 810e852:	2800      	cmp	r0, #0
 810e854:	d03f      	beq.n	810e8d6 <_vfiprintf_r+0x20a>
 810e856:	4b26      	ldr	r3, [pc, #152]	@ (810e8f0 <_vfiprintf_r+0x224>)
 810e858:	bb1b      	cbnz	r3, 810e8a2 <_vfiprintf_r+0x1d6>
 810e85a:	9b03      	ldr	r3, [sp, #12]
 810e85c:	3307      	adds	r3, #7
 810e85e:	f023 0307 	bic.w	r3, r3, #7
 810e862:	3308      	adds	r3, #8
 810e864:	9303      	str	r3, [sp, #12]
 810e866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810e868:	443b      	add	r3, r7
 810e86a:	9309      	str	r3, [sp, #36]	@ 0x24
 810e86c:	e76a      	b.n	810e744 <_vfiprintf_r+0x78>
 810e86e:	fb0c 3202 	mla	r2, ip, r2, r3
 810e872:	460c      	mov	r4, r1
 810e874:	2001      	movs	r0, #1
 810e876:	e7a8      	b.n	810e7ca <_vfiprintf_r+0xfe>
 810e878:	2300      	movs	r3, #0
 810e87a:	3401      	adds	r4, #1
 810e87c:	9305      	str	r3, [sp, #20]
 810e87e:	4619      	mov	r1, r3
 810e880:	f04f 0c0a 	mov.w	ip, #10
 810e884:	4620      	mov	r0, r4
 810e886:	f810 2b01 	ldrb.w	r2, [r0], #1
 810e88a:	3a30      	subs	r2, #48	@ 0x30
 810e88c:	2a09      	cmp	r2, #9
 810e88e:	d903      	bls.n	810e898 <_vfiprintf_r+0x1cc>
 810e890:	2b00      	cmp	r3, #0
 810e892:	d0c6      	beq.n	810e822 <_vfiprintf_r+0x156>
 810e894:	9105      	str	r1, [sp, #20]
 810e896:	e7c4      	b.n	810e822 <_vfiprintf_r+0x156>
 810e898:	fb0c 2101 	mla	r1, ip, r1, r2
 810e89c:	4604      	mov	r4, r0
 810e89e:	2301      	movs	r3, #1
 810e8a0:	e7f0      	b.n	810e884 <_vfiprintf_r+0x1b8>
 810e8a2:	ab03      	add	r3, sp, #12
 810e8a4:	9300      	str	r3, [sp, #0]
 810e8a6:	462a      	mov	r2, r5
 810e8a8:	4b12      	ldr	r3, [pc, #72]	@ (810e8f4 <_vfiprintf_r+0x228>)
 810e8aa:	a904      	add	r1, sp, #16
 810e8ac:	4630      	mov	r0, r6
 810e8ae:	f3af 8000 	nop.w
 810e8b2:	4607      	mov	r7, r0
 810e8b4:	1c78      	adds	r0, r7, #1
 810e8b6:	d1d6      	bne.n	810e866 <_vfiprintf_r+0x19a>
 810e8b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810e8ba:	07d9      	lsls	r1, r3, #31
 810e8bc:	d405      	bmi.n	810e8ca <_vfiprintf_r+0x1fe>
 810e8be:	89ab      	ldrh	r3, [r5, #12]
 810e8c0:	059a      	lsls	r2, r3, #22
 810e8c2:	d402      	bmi.n	810e8ca <_vfiprintf_r+0x1fe>
 810e8c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810e8c6:	f7ff fe7d 	bl	810e5c4 <__retarget_lock_release_recursive>
 810e8ca:	89ab      	ldrh	r3, [r5, #12]
 810e8cc:	065b      	lsls	r3, r3, #25
 810e8ce:	f53f af1f 	bmi.w	810e710 <_vfiprintf_r+0x44>
 810e8d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810e8d4:	e71e      	b.n	810e714 <_vfiprintf_r+0x48>
 810e8d6:	ab03      	add	r3, sp, #12
 810e8d8:	9300      	str	r3, [sp, #0]
 810e8da:	462a      	mov	r2, r5
 810e8dc:	4b05      	ldr	r3, [pc, #20]	@ (810e8f4 <_vfiprintf_r+0x228>)
 810e8de:	a904      	add	r1, sp, #16
 810e8e0:	4630      	mov	r0, r6
 810e8e2:	f000 f879 	bl	810e9d8 <_printf_i>
 810e8e6:	e7e4      	b.n	810e8b2 <_vfiprintf_r+0x1e6>
 810e8e8:	0810f256 	.word	0x0810f256
 810e8ec:	0810f260 	.word	0x0810f260
 810e8f0:	00000000 	.word	0x00000000
 810e8f4:	0810e6a7 	.word	0x0810e6a7
 810e8f8:	0810f25c 	.word	0x0810f25c

0810e8fc <_printf_common>:
 810e8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810e900:	4616      	mov	r6, r2
 810e902:	4698      	mov	r8, r3
 810e904:	688a      	ldr	r2, [r1, #8]
 810e906:	690b      	ldr	r3, [r1, #16]
 810e908:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810e90c:	4293      	cmp	r3, r2
 810e90e:	bfb8      	it	lt
 810e910:	4613      	movlt	r3, r2
 810e912:	6033      	str	r3, [r6, #0]
 810e914:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810e918:	4607      	mov	r7, r0
 810e91a:	460c      	mov	r4, r1
 810e91c:	b10a      	cbz	r2, 810e922 <_printf_common+0x26>
 810e91e:	3301      	adds	r3, #1
 810e920:	6033      	str	r3, [r6, #0]
 810e922:	6823      	ldr	r3, [r4, #0]
 810e924:	0699      	lsls	r1, r3, #26
 810e926:	bf42      	ittt	mi
 810e928:	6833      	ldrmi	r3, [r6, #0]
 810e92a:	3302      	addmi	r3, #2
 810e92c:	6033      	strmi	r3, [r6, #0]
 810e92e:	6825      	ldr	r5, [r4, #0]
 810e930:	f015 0506 	ands.w	r5, r5, #6
 810e934:	d106      	bne.n	810e944 <_printf_common+0x48>
 810e936:	f104 0a19 	add.w	sl, r4, #25
 810e93a:	68e3      	ldr	r3, [r4, #12]
 810e93c:	6832      	ldr	r2, [r6, #0]
 810e93e:	1a9b      	subs	r3, r3, r2
 810e940:	42ab      	cmp	r3, r5
 810e942:	dc26      	bgt.n	810e992 <_printf_common+0x96>
 810e944:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810e948:	6822      	ldr	r2, [r4, #0]
 810e94a:	3b00      	subs	r3, #0
 810e94c:	bf18      	it	ne
 810e94e:	2301      	movne	r3, #1
 810e950:	0692      	lsls	r2, r2, #26
 810e952:	d42b      	bmi.n	810e9ac <_printf_common+0xb0>
 810e954:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810e958:	4641      	mov	r1, r8
 810e95a:	4638      	mov	r0, r7
 810e95c:	47c8      	blx	r9
 810e95e:	3001      	adds	r0, #1
 810e960:	d01e      	beq.n	810e9a0 <_printf_common+0xa4>
 810e962:	6823      	ldr	r3, [r4, #0]
 810e964:	6922      	ldr	r2, [r4, #16]
 810e966:	f003 0306 	and.w	r3, r3, #6
 810e96a:	2b04      	cmp	r3, #4
 810e96c:	bf02      	ittt	eq
 810e96e:	68e5      	ldreq	r5, [r4, #12]
 810e970:	6833      	ldreq	r3, [r6, #0]
 810e972:	1aed      	subeq	r5, r5, r3
 810e974:	68a3      	ldr	r3, [r4, #8]
 810e976:	bf0c      	ite	eq
 810e978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810e97c:	2500      	movne	r5, #0
 810e97e:	4293      	cmp	r3, r2
 810e980:	bfc4      	itt	gt
 810e982:	1a9b      	subgt	r3, r3, r2
 810e984:	18ed      	addgt	r5, r5, r3
 810e986:	2600      	movs	r6, #0
 810e988:	341a      	adds	r4, #26
 810e98a:	42b5      	cmp	r5, r6
 810e98c:	d11a      	bne.n	810e9c4 <_printf_common+0xc8>
 810e98e:	2000      	movs	r0, #0
 810e990:	e008      	b.n	810e9a4 <_printf_common+0xa8>
 810e992:	2301      	movs	r3, #1
 810e994:	4652      	mov	r2, sl
 810e996:	4641      	mov	r1, r8
 810e998:	4638      	mov	r0, r7
 810e99a:	47c8      	blx	r9
 810e99c:	3001      	adds	r0, #1
 810e99e:	d103      	bne.n	810e9a8 <_printf_common+0xac>
 810e9a0:	f04f 30ff 	mov.w	r0, #4294967295
 810e9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810e9a8:	3501      	adds	r5, #1
 810e9aa:	e7c6      	b.n	810e93a <_printf_common+0x3e>
 810e9ac:	18e1      	adds	r1, r4, r3
 810e9ae:	1c5a      	adds	r2, r3, #1
 810e9b0:	2030      	movs	r0, #48	@ 0x30
 810e9b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810e9b6:	4422      	add	r2, r4
 810e9b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810e9bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810e9c0:	3302      	adds	r3, #2
 810e9c2:	e7c7      	b.n	810e954 <_printf_common+0x58>
 810e9c4:	2301      	movs	r3, #1
 810e9c6:	4622      	mov	r2, r4
 810e9c8:	4641      	mov	r1, r8
 810e9ca:	4638      	mov	r0, r7
 810e9cc:	47c8      	blx	r9
 810e9ce:	3001      	adds	r0, #1
 810e9d0:	d0e6      	beq.n	810e9a0 <_printf_common+0xa4>
 810e9d2:	3601      	adds	r6, #1
 810e9d4:	e7d9      	b.n	810e98a <_printf_common+0x8e>
	...

0810e9d8 <_printf_i>:
 810e9d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810e9dc:	7e0f      	ldrb	r7, [r1, #24]
 810e9de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810e9e0:	2f78      	cmp	r7, #120	@ 0x78
 810e9e2:	4691      	mov	r9, r2
 810e9e4:	4680      	mov	r8, r0
 810e9e6:	460c      	mov	r4, r1
 810e9e8:	469a      	mov	sl, r3
 810e9ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810e9ee:	d807      	bhi.n	810ea00 <_printf_i+0x28>
 810e9f0:	2f62      	cmp	r7, #98	@ 0x62
 810e9f2:	d80a      	bhi.n	810ea0a <_printf_i+0x32>
 810e9f4:	2f00      	cmp	r7, #0
 810e9f6:	f000 80d1 	beq.w	810eb9c <_printf_i+0x1c4>
 810e9fa:	2f58      	cmp	r7, #88	@ 0x58
 810e9fc:	f000 80b8 	beq.w	810eb70 <_printf_i+0x198>
 810ea00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810ea04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810ea08:	e03a      	b.n	810ea80 <_printf_i+0xa8>
 810ea0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810ea0e:	2b15      	cmp	r3, #21
 810ea10:	d8f6      	bhi.n	810ea00 <_printf_i+0x28>
 810ea12:	a101      	add	r1, pc, #4	@ (adr r1, 810ea18 <_printf_i+0x40>)
 810ea14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810ea18:	0810ea71 	.word	0x0810ea71
 810ea1c:	0810ea85 	.word	0x0810ea85
 810ea20:	0810ea01 	.word	0x0810ea01
 810ea24:	0810ea01 	.word	0x0810ea01
 810ea28:	0810ea01 	.word	0x0810ea01
 810ea2c:	0810ea01 	.word	0x0810ea01
 810ea30:	0810ea85 	.word	0x0810ea85
 810ea34:	0810ea01 	.word	0x0810ea01
 810ea38:	0810ea01 	.word	0x0810ea01
 810ea3c:	0810ea01 	.word	0x0810ea01
 810ea40:	0810ea01 	.word	0x0810ea01
 810ea44:	0810eb83 	.word	0x0810eb83
 810ea48:	0810eaaf 	.word	0x0810eaaf
 810ea4c:	0810eb3d 	.word	0x0810eb3d
 810ea50:	0810ea01 	.word	0x0810ea01
 810ea54:	0810ea01 	.word	0x0810ea01
 810ea58:	0810eba5 	.word	0x0810eba5
 810ea5c:	0810ea01 	.word	0x0810ea01
 810ea60:	0810eaaf 	.word	0x0810eaaf
 810ea64:	0810ea01 	.word	0x0810ea01
 810ea68:	0810ea01 	.word	0x0810ea01
 810ea6c:	0810eb45 	.word	0x0810eb45
 810ea70:	6833      	ldr	r3, [r6, #0]
 810ea72:	1d1a      	adds	r2, r3, #4
 810ea74:	681b      	ldr	r3, [r3, #0]
 810ea76:	6032      	str	r2, [r6, #0]
 810ea78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810ea7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810ea80:	2301      	movs	r3, #1
 810ea82:	e09c      	b.n	810ebbe <_printf_i+0x1e6>
 810ea84:	6833      	ldr	r3, [r6, #0]
 810ea86:	6820      	ldr	r0, [r4, #0]
 810ea88:	1d19      	adds	r1, r3, #4
 810ea8a:	6031      	str	r1, [r6, #0]
 810ea8c:	0606      	lsls	r6, r0, #24
 810ea8e:	d501      	bpl.n	810ea94 <_printf_i+0xbc>
 810ea90:	681d      	ldr	r5, [r3, #0]
 810ea92:	e003      	b.n	810ea9c <_printf_i+0xc4>
 810ea94:	0645      	lsls	r5, r0, #25
 810ea96:	d5fb      	bpl.n	810ea90 <_printf_i+0xb8>
 810ea98:	f9b3 5000 	ldrsh.w	r5, [r3]
 810ea9c:	2d00      	cmp	r5, #0
 810ea9e:	da03      	bge.n	810eaa8 <_printf_i+0xd0>
 810eaa0:	232d      	movs	r3, #45	@ 0x2d
 810eaa2:	426d      	negs	r5, r5
 810eaa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810eaa8:	4858      	ldr	r0, [pc, #352]	@ (810ec0c <_printf_i+0x234>)
 810eaaa:	230a      	movs	r3, #10
 810eaac:	e011      	b.n	810ead2 <_printf_i+0xfa>
 810eaae:	6821      	ldr	r1, [r4, #0]
 810eab0:	6833      	ldr	r3, [r6, #0]
 810eab2:	0608      	lsls	r0, r1, #24
 810eab4:	f853 5b04 	ldr.w	r5, [r3], #4
 810eab8:	d402      	bmi.n	810eac0 <_printf_i+0xe8>
 810eaba:	0649      	lsls	r1, r1, #25
 810eabc:	bf48      	it	mi
 810eabe:	b2ad      	uxthmi	r5, r5
 810eac0:	2f6f      	cmp	r7, #111	@ 0x6f
 810eac2:	4852      	ldr	r0, [pc, #328]	@ (810ec0c <_printf_i+0x234>)
 810eac4:	6033      	str	r3, [r6, #0]
 810eac6:	bf14      	ite	ne
 810eac8:	230a      	movne	r3, #10
 810eaca:	2308      	moveq	r3, #8
 810eacc:	2100      	movs	r1, #0
 810eace:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810ead2:	6866      	ldr	r6, [r4, #4]
 810ead4:	60a6      	str	r6, [r4, #8]
 810ead6:	2e00      	cmp	r6, #0
 810ead8:	db05      	blt.n	810eae6 <_printf_i+0x10e>
 810eada:	6821      	ldr	r1, [r4, #0]
 810eadc:	432e      	orrs	r6, r5
 810eade:	f021 0104 	bic.w	r1, r1, #4
 810eae2:	6021      	str	r1, [r4, #0]
 810eae4:	d04b      	beq.n	810eb7e <_printf_i+0x1a6>
 810eae6:	4616      	mov	r6, r2
 810eae8:	fbb5 f1f3 	udiv	r1, r5, r3
 810eaec:	fb03 5711 	mls	r7, r3, r1, r5
 810eaf0:	5dc7      	ldrb	r7, [r0, r7]
 810eaf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810eaf6:	462f      	mov	r7, r5
 810eaf8:	42bb      	cmp	r3, r7
 810eafa:	460d      	mov	r5, r1
 810eafc:	d9f4      	bls.n	810eae8 <_printf_i+0x110>
 810eafe:	2b08      	cmp	r3, #8
 810eb00:	d10b      	bne.n	810eb1a <_printf_i+0x142>
 810eb02:	6823      	ldr	r3, [r4, #0]
 810eb04:	07df      	lsls	r7, r3, #31
 810eb06:	d508      	bpl.n	810eb1a <_printf_i+0x142>
 810eb08:	6923      	ldr	r3, [r4, #16]
 810eb0a:	6861      	ldr	r1, [r4, #4]
 810eb0c:	4299      	cmp	r1, r3
 810eb0e:	bfde      	ittt	le
 810eb10:	2330      	movle	r3, #48	@ 0x30
 810eb12:	f806 3c01 	strble.w	r3, [r6, #-1]
 810eb16:	f106 36ff 	addle.w	r6, r6, #4294967295
 810eb1a:	1b92      	subs	r2, r2, r6
 810eb1c:	6122      	str	r2, [r4, #16]
 810eb1e:	f8cd a000 	str.w	sl, [sp]
 810eb22:	464b      	mov	r3, r9
 810eb24:	aa03      	add	r2, sp, #12
 810eb26:	4621      	mov	r1, r4
 810eb28:	4640      	mov	r0, r8
 810eb2a:	f7ff fee7 	bl	810e8fc <_printf_common>
 810eb2e:	3001      	adds	r0, #1
 810eb30:	d14a      	bne.n	810ebc8 <_printf_i+0x1f0>
 810eb32:	f04f 30ff 	mov.w	r0, #4294967295
 810eb36:	b004      	add	sp, #16
 810eb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810eb3c:	6823      	ldr	r3, [r4, #0]
 810eb3e:	f043 0320 	orr.w	r3, r3, #32
 810eb42:	6023      	str	r3, [r4, #0]
 810eb44:	4832      	ldr	r0, [pc, #200]	@ (810ec10 <_printf_i+0x238>)
 810eb46:	2778      	movs	r7, #120	@ 0x78
 810eb48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810eb4c:	6823      	ldr	r3, [r4, #0]
 810eb4e:	6831      	ldr	r1, [r6, #0]
 810eb50:	061f      	lsls	r7, r3, #24
 810eb52:	f851 5b04 	ldr.w	r5, [r1], #4
 810eb56:	d402      	bmi.n	810eb5e <_printf_i+0x186>
 810eb58:	065f      	lsls	r7, r3, #25
 810eb5a:	bf48      	it	mi
 810eb5c:	b2ad      	uxthmi	r5, r5
 810eb5e:	6031      	str	r1, [r6, #0]
 810eb60:	07d9      	lsls	r1, r3, #31
 810eb62:	bf44      	itt	mi
 810eb64:	f043 0320 	orrmi.w	r3, r3, #32
 810eb68:	6023      	strmi	r3, [r4, #0]
 810eb6a:	b11d      	cbz	r5, 810eb74 <_printf_i+0x19c>
 810eb6c:	2310      	movs	r3, #16
 810eb6e:	e7ad      	b.n	810eacc <_printf_i+0xf4>
 810eb70:	4826      	ldr	r0, [pc, #152]	@ (810ec0c <_printf_i+0x234>)
 810eb72:	e7e9      	b.n	810eb48 <_printf_i+0x170>
 810eb74:	6823      	ldr	r3, [r4, #0]
 810eb76:	f023 0320 	bic.w	r3, r3, #32
 810eb7a:	6023      	str	r3, [r4, #0]
 810eb7c:	e7f6      	b.n	810eb6c <_printf_i+0x194>
 810eb7e:	4616      	mov	r6, r2
 810eb80:	e7bd      	b.n	810eafe <_printf_i+0x126>
 810eb82:	6833      	ldr	r3, [r6, #0]
 810eb84:	6825      	ldr	r5, [r4, #0]
 810eb86:	6961      	ldr	r1, [r4, #20]
 810eb88:	1d18      	adds	r0, r3, #4
 810eb8a:	6030      	str	r0, [r6, #0]
 810eb8c:	062e      	lsls	r6, r5, #24
 810eb8e:	681b      	ldr	r3, [r3, #0]
 810eb90:	d501      	bpl.n	810eb96 <_printf_i+0x1be>
 810eb92:	6019      	str	r1, [r3, #0]
 810eb94:	e002      	b.n	810eb9c <_printf_i+0x1c4>
 810eb96:	0668      	lsls	r0, r5, #25
 810eb98:	d5fb      	bpl.n	810eb92 <_printf_i+0x1ba>
 810eb9a:	8019      	strh	r1, [r3, #0]
 810eb9c:	2300      	movs	r3, #0
 810eb9e:	6123      	str	r3, [r4, #16]
 810eba0:	4616      	mov	r6, r2
 810eba2:	e7bc      	b.n	810eb1e <_printf_i+0x146>
 810eba4:	6833      	ldr	r3, [r6, #0]
 810eba6:	1d1a      	adds	r2, r3, #4
 810eba8:	6032      	str	r2, [r6, #0]
 810ebaa:	681e      	ldr	r6, [r3, #0]
 810ebac:	6862      	ldr	r2, [r4, #4]
 810ebae:	2100      	movs	r1, #0
 810ebb0:	4630      	mov	r0, r6
 810ebb2:	f7f1 fb95 	bl	81002e0 <memchr>
 810ebb6:	b108      	cbz	r0, 810ebbc <_printf_i+0x1e4>
 810ebb8:	1b80      	subs	r0, r0, r6
 810ebba:	6060      	str	r0, [r4, #4]
 810ebbc:	6863      	ldr	r3, [r4, #4]
 810ebbe:	6123      	str	r3, [r4, #16]
 810ebc0:	2300      	movs	r3, #0
 810ebc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810ebc6:	e7aa      	b.n	810eb1e <_printf_i+0x146>
 810ebc8:	6923      	ldr	r3, [r4, #16]
 810ebca:	4632      	mov	r2, r6
 810ebcc:	4649      	mov	r1, r9
 810ebce:	4640      	mov	r0, r8
 810ebd0:	47d0      	blx	sl
 810ebd2:	3001      	adds	r0, #1
 810ebd4:	d0ad      	beq.n	810eb32 <_printf_i+0x15a>
 810ebd6:	6823      	ldr	r3, [r4, #0]
 810ebd8:	079b      	lsls	r3, r3, #30
 810ebda:	d413      	bmi.n	810ec04 <_printf_i+0x22c>
 810ebdc:	68e0      	ldr	r0, [r4, #12]
 810ebde:	9b03      	ldr	r3, [sp, #12]
 810ebe0:	4298      	cmp	r0, r3
 810ebe2:	bfb8      	it	lt
 810ebe4:	4618      	movlt	r0, r3
 810ebe6:	e7a6      	b.n	810eb36 <_printf_i+0x15e>
 810ebe8:	2301      	movs	r3, #1
 810ebea:	4632      	mov	r2, r6
 810ebec:	4649      	mov	r1, r9
 810ebee:	4640      	mov	r0, r8
 810ebf0:	47d0      	blx	sl
 810ebf2:	3001      	adds	r0, #1
 810ebf4:	d09d      	beq.n	810eb32 <_printf_i+0x15a>
 810ebf6:	3501      	adds	r5, #1
 810ebf8:	68e3      	ldr	r3, [r4, #12]
 810ebfa:	9903      	ldr	r1, [sp, #12]
 810ebfc:	1a5b      	subs	r3, r3, r1
 810ebfe:	42ab      	cmp	r3, r5
 810ec00:	dcf2      	bgt.n	810ebe8 <_printf_i+0x210>
 810ec02:	e7eb      	b.n	810ebdc <_printf_i+0x204>
 810ec04:	2500      	movs	r5, #0
 810ec06:	f104 0619 	add.w	r6, r4, #25
 810ec0a:	e7f5      	b.n	810ebf8 <_printf_i+0x220>
 810ec0c:	0810f267 	.word	0x0810f267
 810ec10:	0810f278 	.word	0x0810f278

0810ec14 <__sflush_r>:
 810ec14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810ec18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ec1c:	0716      	lsls	r6, r2, #28
 810ec1e:	4605      	mov	r5, r0
 810ec20:	460c      	mov	r4, r1
 810ec22:	d454      	bmi.n	810ecce <__sflush_r+0xba>
 810ec24:	684b      	ldr	r3, [r1, #4]
 810ec26:	2b00      	cmp	r3, #0
 810ec28:	dc02      	bgt.n	810ec30 <__sflush_r+0x1c>
 810ec2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810ec2c:	2b00      	cmp	r3, #0
 810ec2e:	dd48      	ble.n	810ecc2 <__sflush_r+0xae>
 810ec30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810ec32:	2e00      	cmp	r6, #0
 810ec34:	d045      	beq.n	810ecc2 <__sflush_r+0xae>
 810ec36:	2300      	movs	r3, #0
 810ec38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810ec3c:	682f      	ldr	r7, [r5, #0]
 810ec3e:	6a21      	ldr	r1, [r4, #32]
 810ec40:	602b      	str	r3, [r5, #0]
 810ec42:	d030      	beq.n	810eca6 <__sflush_r+0x92>
 810ec44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810ec46:	89a3      	ldrh	r3, [r4, #12]
 810ec48:	0759      	lsls	r1, r3, #29
 810ec4a:	d505      	bpl.n	810ec58 <__sflush_r+0x44>
 810ec4c:	6863      	ldr	r3, [r4, #4]
 810ec4e:	1ad2      	subs	r2, r2, r3
 810ec50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810ec52:	b10b      	cbz	r3, 810ec58 <__sflush_r+0x44>
 810ec54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810ec56:	1ad2      	subs	r2, r2, r3
 810ec58:	2300      	movs	r3, #0
 810ec5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810ec5c:	6a21      	ldr	r1, [r4, #32]
 810ec5e:	4628      	mov	r0, r5
 810ec60:	47b0      	blx	r6
 810ec62:	1c43      	adds	r3, r0, #1
 810ec64:	89a3      	ldrh	r3, [r4, #12]
 810ec66:	d106      	bne.n	810ec76 <__sflush_r+0x62>
 810ec68:	6829      	ldr	r1, [r5, #0]
 810ec6a:	291d      	cmp	r1, #29
 810ec6c:	d82b      	bhi.n	810ecc6 <__sflush_r+0xb2>
 810ec6e:	4a2a      	ldr	r2, [pc, #168]	@ (810ed18 <__sflush_r+0x104>)
 810ec70:	40ca      	lsrs	r2, r1
 810ec72:	07d6      	lsls	r6, r2, #31
 810ec74:	d527      	bpl.n	810ecc6 <__sflush_r+0xb2>
 810ec76:	2200      	movs	r2, #0
 810ec78:	6062      	str	r2, [r4, #4]
 810ec7a:	04d9      	lsls	r1, r3, #19
 810ec7c:	6922      	ldr	r2, [r4, #16]
 810ec7e:	6022      	str	r2, [r4, #0]
 810ec80:	d504      	bpl.n	810ec8c <__sflush_r+0x78>
 810ec82:	1c42      	adds	r2, r0, #1
 810ec84:	d101      	bne.n	810ec8a <__sflush_r+0x76>
 810ec86:	682b      	ldr	r3, [r5, #0]
 810ec88:	b903      	cbnz	r3, 810ec8c <__sflush_r+0x78>
 810ec8a:	6560      	str	r0, [r4, #84]	@ 0x54
 810ec8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810ec8e:	602f      	str	r7, [r5, #0]
 810ec90:	b1b9      	cbz	r1, 810ecc2 <__sflush_r+0xae>
 810ec92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810ec96:	4299      	cmp	r1, r3
 810ec98:	d002      	beq.n	810eca0 <__sflush_r+0x8c>
 810ec9a:	4628      	mov	r0, r5
 810ec9c:	f7ff fca2 	bl	810e5e4 <_free_r>
 810eca0:	2300      	movs	r3, #0
 810eca2:	6363      	str	r3, [r4, #52]	@ 0x34
 810eca4:	e00d      	b.n	810ecc2 <__sflush_r+0xae>
 810eca6:	2301      	movs	r3, #1
 810eca8:	4628      	mov	r0, r5
 810ecaa:	47b0      	blx	r6
 810ecac:	4602      	mov	r2, r0
 810ecae:	1c50      	adds	r0, r2, #1
 810ecb0:	d1c9      	bne.n	810ec46 <__sflush_r+0x32>
 810ecb2:	682b      	ldr	r3, [r5, #0]
 810ecb4:	2b00      	cmp	r3, #0
 810ecb6:	d0c6      	beq.n	810ec46 <__sflush_r+0x32>
 810ecb8:	2b1d      	cmp	r3, #29
 810ecba:	d001      	beq.n	810ecc0 <__sflush_r+0xac>
 810ecbc:	2b16      	cmp	r3, #22
 810ecbe:	d11e      	bne.n	810ecfe <__sflush_r+0xea>
 810ecc0:	602f      	str	r7, [r5, #0]
 810ecc2:	2000      	movs	r0, #0
 810ecc4:	e022      	b.n	810ed0c <__sflush_r+0xf8>
 810ecc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810ecca:	b21b      	sxth	r3, r3
 810eccc:	e01b      	b.n	810ed06 <__sflush_r+0xf2>
 810ecce:	690f      	ldr	r7, [r1, #16]
 810ecd0:	2f00      	cmp	r7, #0
 810ecd2:	d0f6      	beq.n	810ecc2 <__sflush_r+0xae>
 810ecd4:	0793      	lsls	r3, r2, #30
 810ecd6:	680e      	ldr	r6, [r1, #0]
 810ecd8:	bf08      	it	eq
 810ecda:	694b      	ldreq	r3, [r1, #20]
 810ecdc:	600f      	str	r7, [r1, #0]
 810ecde:	bf18      	it	ne
 810ece0:	2300      	movne	r3, #0
 810ece2:	eba6 0807 	sub.w	r8, r6, r7
 810ece6:	608b      	str	r3, [r1, #8]
 810ece8:	f1b8 0f00 	cmp.w	r8, #0
 810ecec:	dde9      	ble.n	810ecc2 <__sflush_r+0xae>
 810ecee:	6a21      	ldr	r1, [r4, #32]
 810ecf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810ecf2:	4643      	mov	r3, r8
 810ecf4:	463a      	mov	r2, r7
 810ecf6:	4628      	mov	r0, r5
 810ecf8:	47b0      	blx	r6
 810ecfa:	2800      	cmp	r0, #0
 810ecfc:	dc08      	bgt.n	810ed10 <__sflush_r+0xfc>
 810ecfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ed02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810ed06:	81a3      	strh	r3, [r4, #12]
 810ed08:	f04f 30ff 	mov.w	r0, #4294967295
 810ed0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ed10:	4407      	add	r7, r0
 810ed12:	eba8 0800 	sub.w	r8, r8, r0
 810ed16:	e7e7      	b.n	810ece8 <__sflush_r+0xd4>
 810ed18:	20400001 	.word	0x20400001

0810ed1c <_fflush_r>:
 810ed1c:	b538      	push	{r3, r4, r5, lr}
 810ed1e:	690b      	ldr	r3, [r1, #16]
 810ed20:	4605      	mov	r5, r0
 810ed22:	460c      	mov	r4, r1
 810ed24:	b913      	cbnz	r3, 810ed2c <_fflush_r+0x10>
 810ed26:	2500      	movs	r5, #0
 810ed28:	4628      	mov	r0, r5
 810ed2a:	bd38      	pop	{r3, r4, r5, pc}
 810ed2c:	b118      	cbz	r0, 810ed36 <_fflush_r+0x1a>
 810ed2e:	6a03      	ldr	r3, [r0, #32]
 810ed30:	b90b      	cbnz	r3, 810ed36 <_fflush_r+0x1a>
 810ed32:	f7ff f97b 	bl	810e02c <__sinit>
 810ed36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ed3a:	2b00      	cmp	r3, #0
 810ed3c:	d0f3      	beq.n	810ed26 <_fflush_r+0xa>
 810ed3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810ed40:	07d0      	lsls	r0, r2, #31
 810ed42:	d404      	bmi.n	810ed4e <_fflush_r+0x32>
 810ed44:	0599      	lsls	r1, r3, #22
 810ed46:	d402      	bmi.n	810ed4e <_fflush_r+0x32>
 810ed48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810ed4a:	f7ff fc3a 	bl	810e5c2 <__retarget_lock_acquire_recursive>
 810ed4e:	4628      	mov	r0, r5
 810ed50:	4621      	mov	r1, r4
 810ed52:	f7ff ff5f 	bl	810ec14 <__sflush_r>
 810ed56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810ed58:	07da      	lsls	r2, r3, #31
 810ed5a:	4605      	mov	r5, r0
 810ed5c:	d4e4      	bmi.n	810ed28 <_fflush_r+0xc>
 810ed5e:	89a3      	ldrh	r3, [r4, #12]
 810ed60:	059b      	lsls	r3, r3, #22
 810ed62:	d4e1      	bmi.n	810ed28 <_fflush_r+0xc>
 810ed64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810ed66:	f7ff fc2d 	bl	810e5c4 <__retarget_lock_release_recursive>
 810ed6a:	e7dd      	b.n	810ed28 <_fflush_r+0xc>

0810ed6c <__swhatbuf_r>:
 810ed6c:	b570      	push	{r4, r5, r6, lr}
 810ed6e:	460c      	mov	r4, r1
 810ed70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ed74:	2900      	cmp	r1, #0
 810ed76:	b096      	sub	sp, #88	@ 0x58
 810ed78:	4615      	mov	r5, r2
 810ed7a:	461e      	mov	r6, r3
 810ed7c:	da0d      	bge.n	810ed9a <__swhatbuf_r+0x2e>
 810ed7e:	89a3      	ldrh	r3, [r4, #12]
 810ed80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810ed84:	f04f 0100 	mov.w	r1, #0
 810ed88:	bf14      	ite	ne
 810ed8a:	2340      	movne	r3, #64	@ 0x40
 810ed8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810ed90:	2000      	movs	r0, #0
 810ed92:	6031      	str	r1, [r6, #0]
 810ed94:	602b      	str	r3, [r5, #0]
 810ed96:	b016      	add	sp, #88	@ 0x58
 810ed98:	bd70      	pop	{r4, r5, r6, pc}
 810ed9a:	466a      	mov	r2, sp
 810ed9c:	f000 f87c 	bl	810ee98 <_fstat_r>
 810eda0:	2800      	cmp	r0, #0
 810eda2:	dbec      	blt.n	810ed7e <__swhatbuf_r+0x12>
 810eda4:	9901      	ldr	r1, [sp, #4]
 810eda6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810edaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810edae:	4259      	negs	r1, r3
 810edb0:	4159      	adcs	r1, r3
 810edb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810edb6:	e7eb      	b.n	810ed90 <__swhatbuf_r+0x24>

0810edb8 <__smakebuf_r>:
 810edb8:	898b      	ldrh	r3, [r1, #12]
 810edba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810edbc:	079d      	lsls	r5, r3, #30
 810edbe:	4606      	mov	r6, r0
 810edc0:	460c      	mov	r4, r1
 810edc2:	d507      	bpl.n	810edd4 <__smakebuf_r+0x1c>
 810edc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810edc8:	6023      	str	r3, [r4, #0]
 810edca:	6123      	str	r3, [r4, #16]
 810edcc:	2301      	movs	r3, #1
 810edce:	6163      	str	r3, [r4, #20]
 810edd0:	b003      	add	sp, #12
 810edd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810edd4:	ab01      	add	r3, sp, #4
 810edd6:	466a      	mov	r2, sp
 810edd8:	f7ff ffc8 	bl	810ed6c <__swhatbuf_r>
 810eddc:	9f00      	ldr	r7, [sp, #0]
 810edde:	4605      	mov	r5, r0
 810ede0:	4639      	mov	r1, r7
 810ede2:	4630      	mov	r0, r6
 810ede4:	f7ff f80a 	bl	810ddfc <_malloc_r>
 810ede8:	b948      	cbnz	r0, 810edfe <__smakebuf_r+0x46>
 810edea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810edee:	059a      	lsls	r2, r3, #22
 810edf0:	d4ee      	bmi.n	810edd0 <__smakebuf_r+0x18>
 810edf2:	f023 0303 	bic.w	r3, r3, #3
 810edf6:	f043 0302 	orr.w	r3, r3, #2
 810edfa:	81a3      	strh	r3, [r4, #12]
 810edfc:	e7e2      	b.n	810edc4 <__smakebuf_r+0xc>
 810edfe:	89a3      	ldrh	r3, [r4, #12]
 810ee00:	6020      	str	r0, [r4, #0]
 810ee02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810ee06:	81a3      	strh	r3, [r4, #12]
 810ee08:	9b01      	ldr	r3, [sp, #4]
 810ee0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810ee0e:	b15b      	cbz	r3, 810ee28 <__smakebuf_r+0x70>
 810ee10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810ee14:	4630      	mov	r0, r6
 810ee16:	f000 f851 	bl	810eebc <_isatty_r>
 810ee1a:	b128      	cbz	r0, 810ee28 <__smakebuf_r+0x70>
 810ee1c:	89a3      	ldrh	r3, [r4, #12]
 810ee1e:	f023 0303 	bic.w	r3, r3, #3
 810ee22:	f043 0301 	orr.w	r3, r3, #1
 810ee26:	81a3      	strh	r3, [r4, #12]
 810ee28:	89a3      	ldrh	r3, [r4, #12]
 810ee2a:	431d      	orrs	r5, r3
 810ee2c:	81a5      	strh	r5, [r4, #12]
 810ee2e:	e7cf      	b.n	810edd0 <__smakebuf_r+0x18>

0810ee30 <_putc_r>:
 810ee30:	b570      	push	{r4, r5, r6, lr}
 810ee32:	460d      	mov	r5, r1
 810ee34:	4614      	mov	r4, r2
 810ee36:	4606      	mov	r6, r0
 810ee38:	b118      	cbz	r0, 810ee42 <_putc_r+0x12>
 810ee3a:	6a03      	ldr	r3, [r0, #32]
 810ee3c:	b90b      	cbnz	r3, 810ee42 <_putc_r+0x12>
 810ee3e:	f7ff f8f5 	bl	810e02c <__sinit>
 810ee42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810ee44:	07d8      	lsls	r0, r3, #31
 810ee46:	d405      	bmi.n	810ee54 <_putc_r+0x24>
 810ee48:	89a3      	ldrh	r3, [r4, #12]
 810ee4a:	0599      	lsls	r1, r3, #22
 810ee4c:	d402      	bmi.n	810ee54 <_putc_r+0x24>
 810ee4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810ee50:	f7ff fbb7 	bl	810e5c2 <__retarget_lock_acquire_recursive>
 810ee54:	68a3      	ldr	r3, [r4, #8]
 810ee56:	3b01      	subs	r3, #1
 810ee58:	2b00      	cmp	r3, #0
 810ee5a:	60a3      	str	r3, [r4, #8]
 810ee5c:	da05      	bge.n	810ee6a <_putc_r+0x3a>
 810ee5e:	69a2      	ldr	r2, [r4, #24]
 810ee60:	4293      	cmp	r3, r2
 810ee62:	db12      	blt.n	810ee8a <_putc_r+0x5a>
 810ee64:	b2eb      	uxtb	r3, r5
 810ee66:	2b0a      	cmp	r3, #10
 810ee68:	d00f      	beq.n	810ee8a <_putc_r+0x5a>
 810ee6a:	6823      	ldr	r3, [r4, #0]
 810ee6c:	1c5a      	adds	r2, r3, #1
 810ee6e:	6022      	str	r2, [r4, #0]
 810ee70:	701d      	strb	r5, [r3, #0]
 810ee72:	b2ed      	uxtb	r5, r5
 810ee74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810ee76:	07da      	lsls	r2, r3, #31
 810ee78:	d405      	bmi.n	810ee86 <_putc_r+0x56>
 810ee7a:	89a3      	ldrh	r3, [r4, #12]
 810ee7c:	059b      	lsls	r3, r3, #22
 810ee7e:	d402      	bmi.n	810ee86 <_putc_r+0x56>
 810ee80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810ee82:	f7ff fb9f 	bl	810e5c4 <__retarget_lock_release_recursive>
 810ee86:	4628      	mov	r0, r5
 810ee88:	bd70      	pop	{r4, r5, r6, pc}
 810ee8a:	4629      	mov	r1, r5
 810ee8c:	4622      	mov	r2, r4
 810ee8e:	4630      	mov	r0, r6
 810ee90:	f7ff f9bd 	bl	810e20e <__swbuf_r>
 810ee94:	4605      	mov	r5, r0
 810ee96:	e7ed      	b.n	810ee74 <_putc_r+0x44>

0810ee98 <_fstat_r>:
 810ee98:	b538      	push	{r3, r4, r5, lr}
 810ee9a:	4d07      	ldr	r5, [pc, #28]	@ (810eeb8 <_fstat_r+0x20>)
 810ee9c:	2300      	movs	r3, #0
 810ee9e:	4604      	mov	r4, r0
 810eea0:	4608      	mov	r0, r1
 810eea2:	4611      	mov	r1, r2
 810eea4:	602b      	str	r3, [r5, #0]
 810eea6:	f7f5 ffd3 	bl	8104e50 <_fstat>
 810eeaa:	1c43      	adds	r3, r0, #1
 810eeac:	d102      	bne.n	810eeb4 <_fstat_r+0x1c>
 810eeae:	682b      	ldr	r3, [r5, #0]
 810eeb0:	b103      	cbz	r3, 810eeb4 <_fstat_r+0x1c>
 810eeb2:	6023      	str	r3, [r4, #0]
 810eeb4:	bd38      	pop	{r3, r4, r5, pc}
 810eeb6:	bf00      	nop
 810eeb8:	10004fe4 	.word	0x10004fe4

0810eebc <_isatty_r>:
 810eebc:	b538      	push	{r3, r4, r5, lr}
 810eebe:	4d06      	ldr	r5, [pc, #24]	@ (810eed8 <_isatty_r+0x1c>)
 810eec0:	2300      	movs	r3, #0
 810eec2:	4604      	mov	r4, r0
 810eec4:	4608      	mov	r0, r1
 810eec6:	602b      	str	r3, [r5, #0]
 810eec8:	f7f5 ffd2 	bl	8104e70 <_isatty>
 810eecc:	1c43      	adds	r3, r0, #1
 810eece:	d102      	bne.n	810eed6 <_isatty_r+0x1a>
 810eed0:	682b      	ldr	r3, [r5, #0]
 810eed2:	b103      	cbz	r3, 810eed6 <_isatty_r+0x1a>
 810eed4:	6023      	str	r3, [r4, #0]
 810eed6:	bd38      	pop	{r3, r4, r5, pc}
 810eed8:	10004fe4 	.word	0x10004fe4

0810eedc <_init>:
 810eedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810eede:	bf00      	nop
 810eee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810eee2:	bc08      	pop	{r3}
 810eee4:	469e      	mov	lr, r3
 810eee6:	4770      	bx	lr

0810eee8 <_fini>:
 810eee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810eeea:	bf00      	nop
 810eeec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810eeee:	bc08      	pop	{r3}
 810eef0:	469e      	mov	lr, r3
 810eef2:	4770      	bx	lr
